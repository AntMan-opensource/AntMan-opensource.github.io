














struct sockaddr;


extern "C" {

















enum lsquic_version {
    
    LSQVER_043,   LSQVER_046,   LSQVER_050,   LSQVER_ID27,   LSQVER_ID29,   LSQVER_I001,   LSQVER_VERNEG,  N_LSQVER };







































enum lsquic_hsk_status {
    
    LSQ_HSK_FAIL,  LSQ_HSK_OK,  LSQ_HSK_RESUMED_OK,  LSQ_HSK_RESUMED_FAIL, };








struct lsquic_stream_if {

    
    lsquic_conn_ctx_t *(*on_new_conn)(void *stream_if_ctx, lsquic_conn_t *c);

    
    void (*on_goaway_received)(lsquic_conn_t *c);
    void (*on_conn_closed)(lsquic_conn_t *c);

    
    lsquic_stream_ctx_t * (*on_new_stream)(void *stream_if_ctx, lsquic_stream_t *s);

    void (*on_read)     (lsquic_stream_t *s, lsquic_stream_ctx_t *h);
    void (*on_write)    (lsquic_stream_t *s, lsquic_stream_ctx_t *h);
    void (*on_close)    (lsquic_stream_t *s, lsquic_stream_ctx_t *h);
    
    ssize_t (*on_dg_write)(lsquic_conn_t *c, void *, size_t);
    
    void (*on_datagram)(lsquic_conn_t *, const void *buf, size_t);
    
    
    void (*on_hsk_done)(lsquic_conn_t *c, enum lsquic_hsk_status s);
    
    void (*on_new_token)(lsquic_conn_t *c, const unsigned char *token, size_t token_size);
    
    void (*on_sess_resume_info)(lsquic_conn_t *c, const unsigned char *, size_t);
    
    void (*on_reset)    (lsquic_stream_t *s, lsquic_stream_ctx_t *h, int how);
    
    void (*on_conncloseframe_received)(lsquic_conn_t *c, int app_error, uint64_t error_code, const char *reason, int reason_len);

};

struct ssl_ctx_st;
struct ssl_st;
struct ssl_session_st;
struct lsxpack_header;




typedef struct ssl_ctx_st * (*lsquic_lookup_cert_f)( void *lsquic_cert_lookup_ctx, const struct sockaddr *local, const char *sni);






































































































































































struct lsquic_engine_settings {
    
    unsigned        es_versions;

    
    unsigned        es_cfcw;

    
    unsigned        es_sfcw;

    
    unsigned        es_max_cfcw;

    
    unsigned        es_max_sfcw;

    
    unsigned        es_max_streams_in;

    
    unsigned long   es_handshake_to;

    
    unsigned long   es_idle_conn_to;

    
    int             es_silent_close;

    
    unsigned        es_max_header_list_size;

    
    const char     *es_ua;

    
    uint64_t        es_sttl; 

    uint32_t        es_pdmd; 
    uint32_t        es_aead; 
    uint32_t        es_kexs; 

    
    unsigned        es_max_inchoate;

    
    int             es_support_push;

    
    int             es_support_tcid0;

    
    int             es_support_nstp;

    
    int             es_honor_prst;

    
    int             es_send_prst;

    
    unsigned        es_progress_check;

    
    int             es_rw_once;

    
    unsigned        es_proc_time_thresh;

    
    int             es_pace_packets;

    
    unsigned        es_clock_granularity;

    
    unsigned        es_cc_algo;

    
    unsigned        es_cc_rtt_thresh;

    
    unsigned        es_noprogress_timeout;

    
    

    
    unsigned        es_init_max_data;

    
    unsigned        es_init_max_stream_data_bidi_remote;

    
    unsigned        es_init_max_stream_data_bidi_local;

    
    unsigned        es_init_max_stream_data_uni;

    
    unsigned        es_init_max_streams_bidi;

    
    unsigned        es_init_max_streams_uni;

    
    unsigned        es_idle_timeout;

    
    unsigned        es_ping_period;

    
    unsigned        es_scid_len;

    
    unsigned        es_scid_iss_rate;

    
    unsigned        es_qpack_dec_max_size;

    
    unsigned        es_qpack_dec_max_blocked;

    
    unsigned        es_qpack_enc_max_size;

    
    unsigned        es_qpack_enc_max_blocked;

    
    int             es_ecn;

    
    int             es_allow_migration;

    
    int             es_ql_bits;

    
    int             es_spin;

    
    int             es_delayed_acks;

    
    int             es_timestamps;

    
    unsigned short  es_max_udp_payload_size_rx;

    
    int             es_grease_quic_bit;

    
    int             es_dplpmtud;

    
    unsigned short  es_base_plpmtu;

    
    unsigned short  es_max_plpmtu;

    
    unsigned        es_mtu_probe_timer;

    
    int             es_datagrams;

    
    int             es_optimistic_nat;

    
    int             es_ext_http_prio;

    
    int             es_qpack_experiment;

    
    unsigned es_ptpc_periodicity;   
    unsigned es_ptpc_max_packtol;   
    int      es_ptpc_dyn_target;    
    float    es_ptpc_target,         es_ptpc_prop_gain, es_ptpc_int_gain, es_ptpc_err_thresh, es_ptpc_err_divisor;




    
    int             es_delay_onclose;

    
    unsigned        es_max_batch_size;

    
    int             es_check_tp_sanity;
};


void lsquic_engine_init_settings (struct lsquic_engine_settings *, unsigned lsquic_engine_flags);



int lsquic_engine_check_settings (const struct lsquic_engine_settings *settings, unsigned lsquic_engine_flags, char *err_buf, size_t err_buf_sz);



struct lsquic_out_spec {
    struct iovec          *iov;
    size_t                 iovlen;
    const struct sockaddr *local_sa;
    const struct sockaddr *dest_sa;
    void                  *peer_ctx;
    lsquic_conn_ctx_t     *conn_ctx;  
    int                    ecn;       
};


typedef int (*lsquic_packets_out_f)( void                          *packets_out_ctx, const struct lsquic_out_spec  *out_spec, unsigned                       n_packets_out );





struct lsquic_shared_hash_if {
    
    int (*shi_insert)(void *shi_ctx, void *key, unsigned key_sz, void *data, unsigned data_sz, time_t expiry);
    
    int (*shi_delete)(void *shi_ctx, const void *key, unsigned key_sz);

    
    int (*shi_lookup)(void *shi_ctx, const void *key, unsigned key_sz, void **data, unsigned *data_sz);
};


struct lsquic_packout_mem_if {
    
    void *  (*pmi_allocate) (void *pmi_ctx, void *peer_ctx, lsquic_conn_ctx_t *, unsigned short sz, char is_ipv6);
    
    void    (*pmi_release)  (void *pmi_ctx, void *peer_ctx, void *buf, char is_ipv6);
    
    void    (*pmi_return)  (void *pmi_ctx, void *peer_ctx, void *buf, char is_ipv6);
};

typedef void (*lsquic_cids_update_f)(void *ctx, void **peer_ctx, const lsquic_cid_t *cids, unsigned n_cids);

struct stack_st_X509;

enum lsquic_hsi_flag {
    
    LSQUIC_HSI_HTTP1X          = 1 << 1,  LSQUIC_HSI_HASH_NAME       = 1 << 2,  LSQUIC_HSI_HASH_NAMEVAL    = 1 << 3, };





struct lsquic_hset_if {
    
    void * (*hsi_create_header_set)(void *hsi_ctx, lsquic_stream_t *stream, int is_push_promise);
    
    struct lsxpack_header * (*hsi_prepare_decode)(void *hdr_set, struct lsxpack_header *hdr, size_t space);


    
    int (*hsi_process_header)(void *hdr_set, struct lsxpack_header *hdr);
    
    void                (*hsi_discard_header_set)(void *hdr_set);
    
    enum lsquic_hsi_flag hsi_flags;
};


struct lsquic_engine_api {
    const struct lsquic_engine_settings *ea_settings;   
    
    const struct lsquic_stream_if       *ea_stream_if;
    void                                *ea_stream_if_ctx;
    
    lsquic_packets_out_f                 ea_packets_out;
    void                                *ea_packets_out_ctx;
    
    lsquic_lookup_cert_f                 ea_lookup_cert;
    void                                *ea_cert_lu_ctx;
    
    struct ssl_ctx_st *                (*ea_get_ssl_ctx)(void *peer_ctx, const struct sockaddr *local);
    
    const struct lsquic_shared_hash_if  *ea_shi;
    void                                *ea_shi_ctx;
    
    const struct lsquic_packout_mem_if  *ea_pmi;
    void                                *ea_pmi_ctx;
    
    lsquic_cids_update_f                 ea_new_scids;
    lsquic_cids_update_f                 ea_live_scids;
    lsquic_cids_update_f                 ea_old_scids;
    void                                *ea_cids_update_ctx;
    
    int                                (*ea_verify_cert)(void *verify_ctx, struct stack_st_X509 *chain);
    void                                *ea_verify_ctx;

    
    const struct lsquic_hset_if         *ea_hsi_if;
    void                                *ea_hsi_ctx;

    
    void              *ea_stats_fh;

    
    const char                          *ea_alpn;

    
    void                               (*ea_generate_scid)(void *ctx, lsquic_conn_t *, lsquic_cid_t *, unsigned);
    
    void                                *ea_gen_scid_ctx;
};


lsquic_engine_t * lsquic_engine_new (unsigned lsquic_engine_flags, const struct lsquic_engine_api *api);



lsquic_conn_t * lsquic_engine_connect (lsquic_engine_t *, enum lsquic_version, const struct sockaddr *local_sa, const struct sockaddr *peer_sa, void *peer_ctx, lsquic_conn_ctx_t *conn_ctx, const char *hostname, unsigned short base_plpmtu, const unsigned char *sess_resume, size_t sess_resume_len,  const unsigned char *token, size_t token_sz);









int lsquic_engine_packet_in (lsquic_engine_t *, const unsigned char *packet_in_data, size_t packet_in_size, const struct sockaddr *sa_local, const struct sockaddr *sa_peer, void *peer_ctx, int ecn);





void lsquic_engine_process_conns (lsquic_engine_t *engine);


int lsquic_engine_has_unsent_packets (lsquic_engine_t *engine);


void lsquic_engine_send_unsent_packets (lsquic_engine_t *engine);


void lsquic_engine_destroy (lsquic_engine_t *);


unsigned lsquic_conn_n_avail_streams (const lsquic_conn_t *);


void lsquic_conn_make_stream (lsquic_conn_t *);


unsigned lsquic_conn_n_pending_streams (const lsquic_conn_t *);


unsigned lsquic_conn_cancel_pending_streams (lsquic_conn_t *, unsigned n);


void lsquic_conn_going_away (lsquic_conn_t *);


void lsquic_conn_close (lsquic_conn_t *);


int lsquic_stream_wantread (lsquic_stream_t *s, int is_want);


ssize_t lsquic_stream_read (lsquic_stream_t *s, void *buf, size_t len);


ssize_t lsquic_stream_readv (lsquic_stream_t *s, const struct iovec *vec, int iovcnt);


ssize_t lsquic_stream_readf (lsquic_stream_t *s,  size_t (*readf)(void *ctx, const unsigned char *buf, size_t len, int fin), void *ctx);





int lsquic_stream_wantwrite (lsquic_stream_t *s, int is_want);


ssize_t lsquic_stream_write (lsquic_stream_t *s, const void *buf, size_t len);


ssize_t lsquic_stream_writev (lsquic_stream_t *s, const struct iovec *vec, int count);


ssize_t lsquic_stream_pwritev (lsquic_stream_t *s, ssize_t (*preadv)(void *user_data, const struct iovec *iov, int iovcnt), void *user_data, size_t n_to_write);




struct lsquic_reader {
    
    size_t (*lsqr_read) (void *lsqr_ctx, void *buf, size_t count);
    
    size_t (*lsqr_size) (void *lsqr_ctx);
    void    *lsqr_ctx;
};


ssize_t lsquic_stream_writef (lsquic_stream_t *, struct lsquic_reader *);


int lsquic_stream_flush (lsquic_stream_t *s);


struct lsquic_http_headers {
    int                     count;
    struct lsxpack_header  *headers;
};


int lsquic_stream_send_headers (lsquic_stream_t *s, const lsquic_http_headers_t *headers, int eos);



void * lsquic_stream_get_hset (lsquic_stream_t *);


int lsquic_conn_push_stream (lsquic_conn_t *c, void *hdr_set, lsquic_stream_t *s, const lsquic_http_headers_t *headers);



int lsquic_conn_is_push_enabled (lsquic_conn_t *);


int lsquic_stream_shutdown(lsquic_stream_t *s, int how);

int lsquic_stream_close(lsquic_stream_t *s);


int lsquic_stream_has_unacked_data (lsquic_stream_t *s);


struct stack_st_X509 * lsquic_conn_get_server_cert_chain (lsquic_conn_t *);


lsquic_stream_id_t lsquic_stream_id (const lsquic_stream_t *s);


lsquic_stream_ctx_t * lsquic_stream_get_ctx (const lsquic_stream_t *s);


void lsquic_stream_set_ctx (lsquic_stream_t *stream, lsquic_stream_ctx_t *ctx);


int lsquic_stream_is_pushed (const lsquic_stream_t *s);


int lsquic_stream_is_rejected (const lsquic_stream_t *s);


int lsquic_stream_refuse_push (lsquic_stream_t *s);


int lsquic_stream_push_info (const lsquic_stream_t *, lsquic_stream_id_t *ref_stream_id, void **hdr_set);



unsigned lsquic_stream_priority (const lsquic_stream_t *s);


int lsquic_stream_set_priority (lsquic_stream_t *s, unsigned priority);







struct lsquic_ext_http_prio {
    unsigned char   urgency;
    signed char     incremental;
};


int lsquic_stream_get_http_prio (lsquic_stream_t *, struct lsquic_ext_http_prio *);


int lsquic_stream_set_http_prio (lsquic_stream_t *, const struct lsquic_ext_http_prio *);



lsquic_conn_t * lsquic_stream_conn(const lsquic_stream_t *s);


const lsquic_cid_t * lsquic_conn_id (const lsquic_conn_t *c);


lsquic_engine_t * lsquic_conn_get_engine (lsquic_conn_t *c);

int lsquic_conn_get_sockaddr(lsquic_conn_t *c, const struct sockaddr **local, const struct sockaddr **peer);



int lsquic_conn_want_datagram_write (lsquic_conn_t *, int is_want);


size_t lsquic_conn_get_min_datagram_size (lsquic_conn_t *);


int lsquic_conn_set_min_datagram_size (lsquic_conn_t *, size_t sz);

struct lsquic_logger_if {
    int     (*log_buf)(void *logger_ctx, const char *buf, size_t len);
};


enum lsquic_logger_timestamp_style {
    
    LLTS_NONE,   LLTS_HHMMSSMS,   LLTS_YYYYMMDD_HHMMSSMS,   LLTS_CHROMELIKE,   LLTS_HHMMSSUS,   LLTS_YYYYMMDD_HHMMSSUS,  N_LLTS };



















void lsquic_logger_init(const struct lsquic_logger_if *, void *logger_ctx, enum lsquic_logger_timestamp_style);


int lsquic_set_log_level (const char *log_level);


int lsquic_logger_lopt (const char *optarg);


unsigned lsquic_engine_quic_versions (const lsquic_engine_t *);








int lsquic_global_init (int flags);


void lsquic_global_cleanup (void);


enum lsquic_version lsquic_conn_quic_version (const lsquic_conn_t *c);


int lsquic_conn_crypto_keysize (const lsquic_conn_t *c);


int lsquic_conn_crypto_alg_keysize (const lsquic_conn_t *c);

enum lsquic_crypto_ver {
    LSQ_CRY_QUIC, LSQ_CRY_TLSv13, };


enum lsquic_crypto_ver lsquic_conn_crypto_ver (const lsquic_conn_t *c);


const char * lsquic_conn_crypto_cipher (const lsquic_conn_t *c);


enum lsquic_version lsquic_str2ver (const char *str, size_t len);


enum lsquic_version lsquic_alpn2ver (const char *alpn, size_t len);


void lsquic_engine_cooldown (lsquic_engine_t *);


lsquic_conn_ctx_t * lsquic_conn_get_ctx (const lsquic_conn_t *);


void lsquic_conn_set_ctx (lsquic_conn_t *, lsquic_conn_ctx_t *);


void * lsquic_conn_get_peer_ctx (lsquic_conn_t *, const struct sockaddr *local_sa);


const char * lsquic_conn_get_sni (lsquic_conn_t *);


void lsquic_conn_abort (lsquic_conn_t *);


const char * lsquic_get_alt_svc_versions (unsigned versions);


const char *const * lsquic_get_h3_alpns (unsigned versions);


int lsquic_is_valid_hs_packet (lsquic_engine_t *, const unsigned char *, size_t);


int lsquic_cid_from_packet (const unsigned char *, size_t bufsz, lsquic_cid_t *cid);


int lsquic_dcid_from_packet (const unsigned char *, size_t bufsz, unsigned server_cid_len, unsigned *cid_len);



int lsquic_engine_earliest_adv_tick (lsquic_engine_t *engine, int *diff);


unsigned lsquic_engine_count_attq (lsquic_engine_t *engine, int from_now);

enum LSQUIC_CONN_STATUS {
    LSCONN_ST_HSK_IN_PROGRESS, LSCONN_ST_CONNECTED, LSCONN_ST_HSK_FAILURE, LSCONN_ST_GOING_AWAY, LSCONN_ST_TIMED_OUT,  LSCONN_ST_RESET, LSCONN_ST_USER_ABORTED, LSCONN_ST_ERROR, LSCONN_ST_CLOSED, LSCONN_ST_PEER_GOING_AWAY, LSCONN_ST_VERNEG_FAILURE, };












enum LSQUIC_CONN_STATUS lsquic_conn_status (lsquic_conn_t *, char *errbuf, size_t bufsz);

extern const char *const lsquic_ver2str[N_LSQVER];


lsquic_conn_t * lsquic_ssl_to_conn (const struct ssl_st *);


int lsquic_ssl_sess_to_resume_info (struct ssl_st *, struct ssl_session_st *, unsigned char **buf, size_t *buf_sz);



}




