






struct lsquic_stream_if;
struct lsquic_stream_ctx;
struct lsquic_conn_public;
struct stream_frame;
struct uncompressed_headers;
enum enc_level;
enum swtp_status;
struct frame_gen_ctx;
struct data_frame;
enum quic_frame_type;
struct push_promise;
union hblock_ctx;
struct lsquic_packet_out;
struct lsquic_send_ctl;
struct network_path;

TAILQ_HEAD(lsquic_streams_tailq, lsquic_stream);










typedef unsigned char sm_hist_idx_t;





enum stream_id_type {
    SIT_BIDI_CLIENT, SIT_BIDI_SERVER, SIT_UNI_CLIENT, SIT_UNI_SERVER, N_SITS };










enum stream_dir { SD_BIDI, SD_UNI, N_SDS };


struct stream_hq_frame {
    STAILQ_ENTRY(stream_hq_frame)
                        shf_next;
    
    uint64_t            shf_off;
    union {
        
        unsigned char  *frame_ptr;
        
        size_t          frame_size;
    }                   shf_u;


    enum hq_frame_type  shf_frame_type;
    enum shf_flags {
        SHF_TWO_BYTES   = 1 << 0,    SHF_FIXED_SIZE  = 1 << 1, SHF_ACTIVE      = 1 << 2, SHF_WRITTEN     = 1 << 3, SHF_CC_PAID     = 1 << 4, SHF_PHANTOM     = 1 << 5, }                   shf_flags:8;





};


struct hq_filter {
    struct varint_read2_state   hqfi_vint2_state;
    


    struct varint_read_state    hqfi_vint1_state;

    enum {
        HQFI_FLAG_UNUSED_0      = 1 << 0, HQFI_FLAG_ERROR         = 1 << 1, HQFI_FLAG_BEGIN         = 1 << 2, HQFI_FLAG_BLOCKED       = 1 << 3, HQFI_FLAG_HEADER        = 1 << 4, HQFI_FLAG_DATA          = 1 << 5, HQFI_FLAG_TRAILER       = 1 << 6, }                           hqfi_flags:8;






    enum {
        HQFI_STATE_FRAME_HEADER_BEGIN, HQFI_STATE_FRAME_HEADER_CONTINUE, HQFI_STATE_READING_PAYLOAD, HQFI_STATE_PUSH_ID_BEGIN, HQFI_STATE_PUSH_ID_CONTINUE, }                           hqfi_state:8;




};


struct stream_filter_if {
    int         (*sfi_readable)(struct lsquic_stream *);
    size_t      (*sfi_filter_df)(struct lsquic_stream *, struct data_frame *);
    void        (*sfi_decr_left)(struct lsquic_stream *, size_t);
};



enum stream_q_flags {
    
    SMQF_WANT_READ    = 1 << 0,    SMQF_WANT_WRITE   = 1 << 1, SMQF_WANT_FLUSH   = 1 << 2,     SMQF_SEND_WUF     = 1 << 3, SMQF_SEND_BLOCKED = 1 << 4, SMQF_SEND_RST     = 1 << 5, SMQF_SEND_STOP_SENDING = 1 << 10,      SMQF_CALL_ONCLOSE = 1 << 6, SMQF_FREE_STREAM  = 1 << 7, SMQF_ABORT_CONN   = 1 << 8,  SMQF_QPACK_DEC    = 1 << 9,    SMQF_WAIT_FIN_OFF = 1 << 11, };






























enum stream_b_flags {
    SMBF_SERVER       = 1 << 0, SMBF_IETF         = 1 << 1, SMBF_USE_HEADERS  = 1 << 2, SMBF_CRYPTO       = 1 << 3, SMBF_CRITICAL     = 1 << 4, SMBF_AUTOSWITCH   = 1 << 5, SMBF_RW_ONCE      = 1 << 6, SMBF_CONN_LIMITED = 1 << 7, SMBF_HEADERS      = 1 << 8, SMBF_VERIFY_CL    = 1 << 9, SMBF_HTTP_PRIO    = 1 <<10, SMBF_INCREMENTAL  = 1 <<11, SMBF_HPRIO_SET    = 1 <<12, SMBF_DELAY_ONCLOSE= 1 <<13,  };


















enum stream_d_flags {
    SMDF_ONRESET0       =   1 << 0,  SMDF_ONRESET1       =   1 << 1, };



enum stream_flags {
    STREAM_FIN_RECVD    = 1 << 0,    STREAM_RST_RECVD    = 1 << 1, STREAM_LAST_WRITE_OK= 1 << 2, STREAM_U_READ_DONE  = 1 << 3, STREAM_U_WRITE_DONE = 1 << 4, STREAM_FIN_SENT     = 1 << 5, STREAM_RST_SENT     = 1 << 6, STREAM_FIN_REACHED  = 1 << 7, STREAM_FINISHED     = 1 << 8, STREAM_ONCLOSE_DONE = 1 << 9, STREAM_CACHED_FRAME = 1 << 10, STREAM_HEADERS_SENT = 1 << 11, STREAM_HAVE_UH      = 1 << 12, STREAM_ENCODER_DEP  = 1 << 13, STREAM_HEAD_IN_FIN  = 1 << 14, STREAM_FRAMES_ELIDED= 1 << 15, STREAM_FORCE_FINISH = 1 << 16, STREAM_ONNEW_DONE   = 1 << 17, STREAM_PUSHING      = 1 << 18, STREAM_NOPUSH       = 1 << 19, STREAM_GOAWAY_IN    = 1 << 20, STREAM_SS_SENT      = 1 << 21, STREAM_RST_ACKED    = 1 << 22, STREAM_BLOCKED_SENT = 1 << 23, STREAM_RST_READ     = 1 << 24, STREAM_DATA_RECVD   = 1 << 25, STREAM_UNUSED26     = 1 << 26, STREAM_HDRS_FLUSHED = 1 << 27, STREAM_SS_RECVD     = 1 << 28, STREAM_DELAYED_SW   = 1 << 29, };



































struct lsquic_stream {
    struct lsquic_hash_elem         sm_hash_el;
    lsquic_stream_id_t              id;
    enum stream_flags               stream_flags;
    enum stream_b_flags             sm_bflags;
    enum stream_q_flags             sm_qflags;
    unsigned                        n_unacked;

    const struct lsquic_stream_if  *stream_if;
    struct lsquic_stream_ctx       *st_ctx;
    struct lsquic_conn_public      *conn_pub;
    TAILQ_ENTRY(lsquic_stream)      next_send_stream, next_read_stream, next_write_stream, next_service_stream, next_prio_stream;


    uint64_t                        tosend_off;
    uint64_t                        sm_payload;     
    uint64_t                        max_send_off;
    uint64_t                        sm_last_recv_off;
    uint64_t                        error_code;

    
    struct data_in                 *data_in;
    uint64_t                        read_offset;
    lsquic_sfcw_t                   fc;

    
    STAILQ_HEAD(, stream_hq_frame)  sm_hq_frames;

    
    struct stream_hq_frame          sm_hq_frame_arr[NUM_ALLOCED_HQ_FRAMES];

    struct hq_filter                sm_hq_filter;

    
    struct hq_arr                  *sm_hq_arr;

    


    
    uint64_t                        sm_flush_to;

    
    uint64_t                        sm_flush_to_payload;

    
    uint64_t                        blocked_off;

    struct uncompressed_headers    *uh, *push_req;
    union hblock_ctx               *sm_hblock_ctx;

    unsigned char                  *sm_buf;
    void                           *sm_onnew_arg;

    unsigned char                  *sm_header_block;
    uint64_t                        sm_hb_compl;

    
    uint64_t                        sm_fin_off;

    
    size_t                        (*sm_frame_header_sz)( const struct lsquic_stream *, unsigned);
    enum swtp_status              (*sm_write_to_packet)(struct frame_gen_ctx *, const size_t);
    size_t                        (*sm_write_avail)(struct lsquic_stream *);
    int                           (*sm_readable)(struct lsquic_stream *);

    struct lsquic_packet_out *    (*sm_get_packet_for_stream)( struct lsquic_send_ctl *, unsigned, const struct network_path *, const struct lsquic_stream *);



    
    const struct stream_filter_if  *sm_sfi;

    
    
    struct push_promise            *sm_promise;

    
    SLIST_HEAD(, push_promise)      sm_promises;

    uint64_t                        sm_last_frame_off;


    
    lsquic_time_t                   sm_last_prog;


    
    unsigned long long              sm_cont_len;
    
    unsigned long long              sm_data_in;

    
    unsigned                        sm_hblock_sz, sm_hblock_off;

    unsigned short                  sm_n_buffered;  
    unsigned short                  sm_n_allocated;  

    
    unsigned char                   sm_priority;  
    unsigned char                   sm_enc_level;
    enum {
        SSHS_BEGIN,          SSHS_ENC_SENDING, SSHS_HBLOCK_SENDING, }                               sm_send_headers_state:8;


    enum stream_d_flags             sm_dflags:8;
    signed char                     sm_saved_want_write;
    signed char                     sm_has_frame;


    sm_hist_idx_t                   sm_hist_idx;



    
    unsigned char                   sm_hist_buf[ 1 << SM_HIST_BITS ];

};


enum stream_ctor_flags {
    SCF_CALL_ON_NEW   = (1 << (N_SMBF_FLAGS + 0)),  SCF_USE_DI_HASH   = (1 << (N_SMBF_FLAGS + 1)), SCF_CRYPTO_FRAMES = (1 << (N_SMBF_FLAGS + 2)), SCF_DI_AUTOSWITCH = SMBF_AUTOSWITCH, SCF_DISP_RW_ONCE  = SMBF_RW_ONCE, SCF_CRITICAL      = SMBF_CRITICAL, SCF_IETF          = SMBF_IETF, SCF_HTTP          = SMBF_USE_HEADERS, SCF_CRYPTO        = SMBF_CRYPTO, SCF_HEADERS       = SMBF_HEADERS, SCF_HTTP_PRIO     = SMBF_HTTP_PRIO, SCF_DELAY_ONCLOSE = SMBF_DELAY_ONCLOSE, };













lsquic_stream_t * lsquic_stream_new (lsquic_stream_id_t id, struct lsquic_conn_public *, const struct lsquic_stream_if *, void *stream_if_ctx, unsigned initial_sfrw, uint64_t initial_send_off, enum stream_ctor_flags);




struct lsquic_stream * lsquic_stream_new_crypto (enum enc_level, struct lsquic_conn_public *conn_pub, const struct lsquic_stream_if *stream_if, void *stream_if_ctx, enum stream_ctor_flags ctor_flags);




void lsquic_stream_call_on_new (lsquic_stream_t *);

void lsquic_stream_destroy (lsquic_stream_t *);






int lsquic_stream_is_write_reset (const struct lsquic_stream *);


int lsquic_stream_frame_in (lsquic_stream_t *, struct stream_frame *frame);


int lsquic_stream_uh_in (lsquic_stream_t *, struct uncompressed_headers *);

void lsquic_stream_push_req (lsquic_stream_t *, struct uncompressed_headers *push_req);


int lsquic_stream_rst_in (lsquic_stream_t *, uint64_t offset, uint64_t error_code);

void lsquic_stream_stop_sending_in (struct lsquic_stream *, uint64_t error_code);

uint64_t lsquic_stream_read_offset (const lsquic_stream_t *stream);


int lsquic_stream_tosend_fin (const lsquic_stream_t *stream);

void lsquic_stream_window_update (lsquic_stream_t *stream, uint64_t offset);

int lsquic_stream_set_max_send_off (lsquic_stream_t *stream, uint64_t offset);


uint64_t lsquic_stream_fc_recv_off (lsquic_stream_t *stream);

void lsquic_stream_peer_blocked (struct lsquic_stream *, uint64_t);

void lsquic_stream_peer_blocked_gquic (struct lsquic_stream *);

void lsquic_stream_dispatch_read_events (lsquic_stream_t *);

void lsquic_stream_dispatch_write_events (lsquic_stream_t *);

void lsquic_stream_blocked_frame_sent (lsquic_stream_t *);

void lsquic_stream_rst_frame_sent (lsquic_stream_t *);

void lsquic_stream_stream_frame_sent (lsquic_stream_t *);

void lsquic_stream_maybe_reset (struct lsquic_stream *, uint64_t error_code, int);

void lsquic_stream_call_on_close (lsquic_stream_t *);

void lsquic_stream_shutdown_internal (lsquic_stream_t *);

void lsquic_stream_received_goaway (lsquic_stream_t *);

void lsquic_stream_acked (struct lsquic_stream *, enum quic_frame_type);



int lsquic_stream_update_sfcw (lsquic_stream_t *, uint64_t max_off);

int lsquic_stream_set_priority_internal (lsquic_stream_t *, unsigned priority);





size_t lsquic_stream_mem_used (const struct lsquic_stream *);

const lsquic_cid_t * lsquic_stream_cid (const struct lsquic_stream *);



int lsquic_stream_readable (struct lsquic_stream *);

size_t lsquic_stream_write_avail (struct lsquic_stream *);

void lsquic_stream_dump_state (const struct lsquic_stream *);


size_t lsquic_stream_flush_threshold (const struct lsquic_stream *, unsigned);




void lsquic_stream_set_stream_if (struct lsquic_stream *, const struct lsquic_stream_if *, void *stream_if_ctx);


uint64_t lsquic_stream_combined_send_off (const struct lsquic_stream *);


enum stream_state_sending {
    SSS_READY, SSS_SEND, SSS_DATA_SENT, SSS_RESET_SENT, SSS_DATA_RECVD, SSS_RESET_RECVD, };






extern const char *const lsquic_sss2str[];

enum stream_state_sending lsquic_stream_sending_state (const struct lsquic_stream *);


enum stream_state_receiving {
    SSR_RECV, SSR_SIZE_KNOWN, SSR_DATA_RECVD, SSR_RESET_RECVD, SSR_DATA_READ, SSR_RESET_READ, };






extern const char *const lsquic_ssr2str[];

enum stream_state_receiving lsquic_stream_receiving_state (struct lsquic_stream *);

uint64_t lsquic_stream_fc_recv_off_const (const struct lsquic_stream *);

void lsquic_stream_max_stream_data_sent (struct lsquic_stream *);

void lsquic_stream_qdec_unblocked (struct lsquic_stream *);

int lsquic_stream_can_push (const struct lsquic_stream *);

int lsquic_stream_push_promise (struct lsquic_stream *, struct push_promise *);

void lsquic_stream_force_finish (struct lsquic_stream *);

int lsquic_stream_header_is_pp (const struct lsquic_stream *);

int lsquic_stream_header_is_trailer (const struct lsquic_stream *);

int lsquic_stream_verify_len (struct lsquic_stream *, unsigned long long);



void lsquic_stream_ss_frame_sent (struct lsquic_stream *);


void lsquic_stream_set_pwritev_params (unsigned iovecs, unsigned frames);


void lsquic_stream_drop_hset_ref (struct lsquic_stream *);


