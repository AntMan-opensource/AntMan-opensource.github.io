




extern "C" {











typedef uint16_t lsxpack_strlen_t;

typedef uint32_t lsxpack_strlen_t;






enum lsxpack_flag {
    LSXPACK_HPACK_VAL_MATCHED = 1, LSXPACK_QPACK_IDX = 2, LSXPACK_APP_IDX   = 4, LSXPACK_NAME_HASH = 8, LSXPACK_NAMEVAL_HASH = 16, LSXPACK_VAL_MATCHED = 32, LSXPACK_NEVER_INDEX = 64, };









struct lsxpack_header {
    char             *buf;          
    uint32_t          name_hash;    
    uint32_t          nameval_hash; 
    lsxpack_strlen_t  name_offset;  
    lsxpack_strlen_t  name_len;     
    lsxpack_strlen_t  val_offset;   
    lsxpack_strlen_t  val_len;      
    uint16_t          chain_next_idx; 
    uint8_t           hpack_index;  
    uint8_t           qpack_index;  
    uint8_t           app_index;    
    enum lsxpack_flag flags:8;      
    uint8_t           indexed_type; 
    uint8_t           dec_overhead; 
};

typedef struct lsxpack_header lsxpack_header_t;


static inline void lsxpack_header_set_idx(lsxpack_header_t *hdr, int hpack_idx, const char *val, size_t val_len)

{
    memset(hdr, 0, sizeof(*hdr));
    hdr->buf = (char *)val;
    hdr->hpack_index = hpack_idx;
    assert(hpack_idx != 0);
    assert(val_len <= LSXPACK_MAX_STRLEN);
    hdr->val_len = val_len;
}


static inline void lsxpack_header_set_qpack_idx(lsxpack_header_t *hdr, int qpack_idx, const char *val, size_t val_len)

{
    memset(hdr, 0, sizeof(*hdr));
    hdr->buf = (char *)val;
    hdr->qpack_index = qpack_idx;
    assert(qpack_idx != -1);
    hdr->flags = LSXPACK_QPACK_IDX;
    assert(val_len <= LSXPACK_MAX_STRLEN);
    hdr->val_len = val_len;
}


static inline void lsxpack_header_set_offset(lsxpack_header_t *hdr, const char *buf, size_t name_offset, size_t name_len, size_t val_len)


{
    memset(hdr, 0, sizeof(*hdr));
    hdr->buf = (char *)buf;
    hdr->name_offset = name_offset;
    assert(name_len <= LSXPACK_MAX_STRLEN);
    hdr->name_len = name_len;
    assert(name_offset + name_len + 2 <= LSXPACK_MAX_STRLEN);
    hdr->val_offset = name_offset + name_len + 2;
    assert(val_len <= LSXPACK_MAX_STRLEN);
    hdr->val_len = val_len;
}


static inline void lsxpack_header_set_offset2(lsxpack_header_t *hdr, const char *buf, size_t name_offset, size_t name_len, size_t val_offset, size_t val_len)


{
    memset(hdr, 0, sizeof(*hdr));
    hdr->buf = (char *)buf;
    hdr->name_offset = name_offset;
    assert(name_len <= LSXPACK_MAX_STRLEN);
    hdr->name_len = name_len;
    assert(val_offset <= LSXPACK_MAX_STRLEN);
    hdr->val_offset = val_offset;
    assert(val_len <= LSXPACK_MAX_STRLEN);
    hdr->val_len = val_len;
}


static inline void lsxpack_header_prepare_decode(lsxpack_header_t *hdr, char *out, size_t offset, size_t len)

{
    memset(hdr, 0, sizeof(*hdr));
    hdr->buf = out;
    assert(offset <= LSXPACK_MAX_STRLEN);
    hdr->name_offset = offset;
    if (len > LSXPACK_MAX_STRLEN)
        hdr->val_len = LSXPACK_MAX_STRLEN;
    else hdr->val_len = len;
}


static inline const char * lsxpack_header_get_name(const lsxpack_header_t *hdr)
{
    return (hdr->name_len)? hdr->buf + hdr->name_offset : NULL;
}


static inline const char * lsxpack_header_get_value(const lsxpack_header_t *hdr)
{   return hdr->buf + hdr->val_offset;  }

static inline size_t lsxpack_header_get_dec_size(const lsxpack_header_t *hdr)
{   return hdr->name_len + hdr->val_len + hdr->dec_overhead;    }

static inline void lsxpack_header_mark_val_changed(lsxpack_header_t *hdr)
{
    hdr->flags = (enum lsxpack_flag)(hdr->flags & ~(LSXPACK_HPACK_VAL_MATCHED|LSXPACK_VAL_MATCHED|LSXPACK_NAMEVAL_HASH));
}

}



