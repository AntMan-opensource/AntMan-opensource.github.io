
















struct lsquic_conn;
struct lsquic_engine_public;
struct lsquic_packet_out;
struct lsquic_packet_in;
struct sockaddr;
struct parse_funcs;
struct attq_elem;

struct conn_stats;


enum lsquic_conn_flags {
    LSCONN_TICKED         = (1 << 0), LSCONN_HAS_OUTGOING   = (1 << 1), LSCONN_HASHED         = (1 << 2), LSCONN_MINI           = (1 << 3), LSCONN_IMMED_CLOSE    = (1 << 4), LSCONN_UNUSED_5       = (1 << 5), LSCONN_HANDSHAKE_DONE = (1 << 6), LSCONN_CLOSING        = (1 << 7), LSCONN_PEER_GOING_AWAY= (1 << 8), LSCONN_TCID0          = (1 << 9), LSCONN_VER_SET        = (1 <<10), LSCONN_EVANESCENT     = (1 <<11), LSCONN_TICKABLE       = (1 <<12), LSCONN_COI_ACTIVE     = (1 <<13), LSCONN_COI_INACTIVE   = (1 <<14), LSCONN_SEND_BLOCKED   = (1 <<15), LSCONN_PROMOTED       = (1 <<16), LSCONN_NEVER_TICKABLE = (1 <<17), LSCONN_UNUSED_18      = (1 <<18), LSCONN_ATTQ           = (1 <<19), LSCONN_SKIP_ON_PROC   = (1 <<20), LSCONN_UNUSED_21      = (1 <<21), LSCONN_SERVER         = (1 <<22), LSCONN_IETF           = (1 <<23), LSCONN_RETRY_CONN     = (1 <<24), };


























enum tick_st {
    TICK_SEND    = (1 << 0), TICK_CLOSE   = (1 << 1), TICK_PROMOTE = (1 << 2), };





struct network_path {
    union {
        unsigned char           buf[sizeof(struct sockaddr_in6)];
        struct sockaddr         sockaddr;
    }               np_local_addr_u;

    unsigned char   np_peer_addr[sizeof(struct sockaddr_in6)];
    void           *np_peer_ctx;
    lsquic_cid_t    np_dcid;
    unsigned short  np_pack_size;
    unsigned char   np_path_id;
};





struct ack_state {
    uint32_t    arr[6];
};

struct to_coal {
    const struct lsquic_packet_out  *prev_packet;
    size_t                           prev_sz_sum;
};

struct conn_iface {
    enum tick_st (*ci_tick) (struct lsquic_conn *, lsquic_time_t now);

    void (*ci_packet_in) (struct lsquic_conn *, struct lsquic_packet_in *);

    
    struct lsquic_packet_out * (*ci_next_packet_to_send) (struct lsquic_conn *, const struct to_coal *);

    void (*ci_packet_sent) (struct lsquic_conn *, struct lsquic_packet_out *);

    void (*ci_packet_not_sent) (struct lsquic_conn *, struct lsquic_packet_out *);

    void (*ci_packet_too_large) (struct lsquic_conn *, struct lsquic_packet_out *);

    void (*ci_hsk_done) (struct lsquic_conn *, enum lsquic_hsk_status);

    void (*ci_destroy) (struct lsquic_conn *);

    int (*ci_is_tickable) (struct lsquic_conn *);

    lsquic_time_t (*ci_next_tick_time) (struct lsquic_conn *, unsigned *why);

    int (*ci_can_write_ack) (struct lsquic_conn *);

    
    void (*ci_write_ack) (struct lsquic_conn *, struct lsquic_packet_out *);


    const struct conn_stats * (*ci_get_stats) (struct lsquic_conn *);

    void (*ci_log_stats) (struct lsquic_conn *);


    void (*ci_client_call_on_new) (struct lsquic_conn *);

    enum LSQUIC_CONN_STATUS (*ci_status) (struct lsquic_conn *, char *errbuf, size_t bufsz);

    unsigned (*ci_n_avail_streams) (const struct lsquic_conn *);

    unsigned (*ci_n_pending_streams) (const struct lsquic_conn *);

    unsigned (*ci_cancel_pending_streams) (struct lsquic_conn *, unsigned n);

    void (*ci_going_away) (struct lsquic_conn *);

    int (*ci_is_push_enabled) (struct lsquic_conn *);

    
    
    struct lsquic_stream * (*ci_get_stream_by_id) (struct lsquic_conn *, lsquic_stream_id_t stream_id);

    struct lsquic_engine * (*ci_get_engine) (struct lsquic_conn *);

    void (*ci_make_stream) (struct lsquic_conn *);

    void (*ci_abort) (struct lsquic_conn *);

    void (*ci_retire_cid) (struct lsquic_conn *);

    void (*ci_close) (struct lsquic_conn *);

    void (*ci_stateless_reset) (struct lsquic_conn *);

    int (*ci_crypto_keysize) (const struct lsquic_conn *);

    int (*ci_crypto_alg_keysize) (const struct lsquic_conn *);

    enum lsquic_crypto_ver (*ci_crypto_ver) (const struct lsquic_conn *);

    const char * (*ci_crypto_cipher) (const struct lsquic_conn *);

    int (*ci_push_stream) (struct lsquic_conn *, void *hset, struct lsquic_stream *, const struct lsquic_http_headers *headers);


    
    void (*ci_internal_error) (struct lsquic_conn *, const char *format, ...)

            __attribute__((format(printf, 2, 3)))

    ;

    
    void (*ci_abort_error) (struct lsquic_conn *, int is_app, unsigned error_code, const char *format, ...)


            __attribute__((format(printf, 4, 5)))

    ;

    void (*ci_tls_alert) (struct lsquic_conn *, uint8_t);

    
    lsquic_time_t (*ci_drain_time) (const struct lsquic_conn *);

    
    int (*ci_report_live) (struct lsquic_conn *, lsquic_time_t now);

    
    struct network_path * (*ci_get_path) (struct lsquic_conn *, const struct sockaddr *local_sa);

    unsigned char (*ci_record_addrs) (struct lsquic_conn *, void *peer_ctx, const struct sockaddr *local_sa, const struct sockaddr *peer_sa);


    const lsquic_cid_t * (*ci_get_log_cid) (const struct lsquic_conn *);

    
    void (*ci_drop_crypto_streams) (struct lsquic_conn *);

    
    void (*ci_count_garbage) (struct lsquic_conn *, size_t);

    
    void (*ci_mtu_probe_acked) (struct lsquic_conn *, const struct lsquic_packet_out *);


    
    void (*ci_retx_timeout) (struct lsquic_conn *);

    void (*ci_ack_snapshot) (struct lsquic_conn *, struct ack_state *);

    void (*ci_ack_rollback) (struct lsquic_conn *, struct ack_state *);

    
    int (*ci_want_datagram_write) (struct lsquic_conn *, int);

    
    int (*ci_set_min_datagram_size) (struct lsquic_conn *, size_t);

    
    size_t (*ci_get_min_datagram_size) (struct lsquic_conn *);

    
    void (*ci_early_data_failed) (struct lsquic_conn *);
};




struct conn_cid_elem {
    struct lsquic_hash_elem     cce_hash_el;    
    lsquic_cid_t                cce_cid;
    union {
        unsigned            seqno;
        unsigned short      port;
    }                           cce_u;


    enum conn_cce_flags {
        CCE_USED        = 1 << 0,        CCE_SEQNO       = 1 << 1, CCE_REG         = 1 << 2, CCE_PORT        = 1 << 3, }                           cce_flags;



};

struct lsquic_conn {
    void                        *cn_enc_session;
    const struct enc_session_funcs_common *cn_esf_c;
    union {
        const struct enc_session_funcs_gquic   *g;
        const struct enc_session_funcs_iquic   *i;
    }                            cn_esf;

    STAILQ_ENTRY(lsquic_conn)    cn_next_closed_conn;
    
    STAILQ_ENTRY(lsquic_conn)    cn_next_new_full;
    TAILQ_ENTRY(lsquic_conn)     cn_next_ticked;
    TAILQ_ENTRY(lsquic_conn)     cn_next_out;
    TAILQ_ENTRY(lsquic_conn)     cn_next_pr;
    const struct conn_iface     *cn_if;
    const struct parse_funcs    *cn_pf;
    struct attq_elem            *cn_attq_elem;
    lsquic_time_t                cn_last_sent;
    lsquic_time_t                cn_last_ticked;
    struct conn_cid_elem        *cn_cces;   
    lsquic_conn_ctx_t           *cn_conn_ctx;
    enum lsquic_conn_flags       cn_flags;
    enum lsquic_version          cn_version:8;
    unsigned char                cn_cces_mask;  
    unsigned char                cn_n_cces; 
    unsigned char                cn_cur_cce_idx;

    struct conn_cid_elem         cn_cces_buf[8];













};





unsigned char lsquic_conn_record_sockaddr (lsquic_conn_t *lconn, void *peer_ctx, const struct sockaddr *local_sa, const struct sockaddr *peer_sa);


int lsquic_conn_decrypt_packet (lsquic_conn_t *lconn, struct lsquic_engine_public *, struct lsquic_packet_in *);


int lsquic_conn_copy_and_release_pi_data (const lsquic_conn_t *conn, struct lsquic_engine_public *, struct lsquic_packet_in *);


void lsquic_generate_cid (lsquic_cid_t *cid, size_t len);

void lsquic_generate_cid_gquic (lsquic_cid_t *cid);

void lsquic_generate_scid (void *, struct lsquic_conn *lconn, lsquic_cid_t *scid, unsigned len);


void lsquic_conn_retire_cid (lsquic_conn_t *lconn);




struct conn_stats {
    
    unsigned long           n_ticks;            
    struct {
        unsigned long       stream_data_sz;     
        unsigned long       stream_frames;      
        unsigned long       packets,             undec_packets, dup_packets, err_packets;


        unsigned long       n_acks, n_acks_proc, n_acks_merged;

        unsigned long       bytes;              
        unsigned long       headers_uncomp;     
        unsigned long       headers_comp;       
    }                   in;
    struct {
        unsigned long       stream_data_sz;
        unsigned long       stream_frames;
        unsigned long       acks;
        unsigned long       packets;            
        unsigned long       acked_via_loss;     
        unsigned long       lost_packets;
        unsigned long       retx_packets;       
        unsigned long       bytes;              
        unsigned long       headers_uncomp;     
        unsigned long       headers_comp;       
    }                   out;
};

void lsquic_conn_stats_diff (const struct conn_stats *cumulative, const struct conn_stats *previous, struct conn_stats *new);





