
































































extern "C" {




typedef struct {
  FILE* file;
  struct timeval tv;
  rfbBool readTimestamp;
  rfbBool doNotSleep;
} rfbVNCRec;



typedef struct rfbClientData {
	void* tag;
	void* data;
	struct rfbClientData* next;
} rfbClientData;



typedef struct {
  rfbBool shareDesktop;
  rfbBool viewOnly;

  const char* encodingsString;

  rfbBool useBGR233;
  int nColours;
  rfbBool forceOwnCmap;
  rfbBool forceTrueColour;
  int requestedDepth;

  int compressLevel;
  int qualityLevel;
  rfbBool enableJPEG;
  rfbBool useRemoteCursor;
  rfbBool palmVNC;  
  int scaleSetting; 
} AppData;


typedef union _rfbCredential {
  
  struct {
    char *x509CACertFile;
    char *x509CACrlFile;
    char *x509ClientCertFile;
    char *x509ClientKeyFile;
    uint8_t x509CrlVerifyMode; 
  } x509Credential;
  
  struct {
    char *username;
    char *password;
  } userCredential;
} rfbCredential;









struct _rfbClient;


typedef void (*HandleTextChatProc)(struct _rfbClient* client, int value, char *text);

typedef void (*HandleXvpMsgProc)(struct _rfbClient* client, uint8_t version, uint8_t opcode);
typedef void (*HandleKeyboardLedStateProc)(struct _rfbClient* client, int value, int pad);
typedef rfbBool (*HandleCursorPosProc)(struct _rfbClient* client, int x, int y);
typedef void (*SoftCursorLockAreaProc)(struct _rfbClient* client, int x, int y, int w, int h);
typedef void (*SoftCursorUnlockScreenProc)(struct _rfbClient* client);

typedef void (*GotFrameBufferUpdateProc)(struct _rfbClient* client, int x, int y, int w, int h);

typedef void (*FinishedFrameBufferUpdateProc)(struct _rfbClient* client);
typedef char* (*GetPasswordProc)(struct _rfbClient* client);
typedef rfbCredential* (*GetCredentialProc)(struct _rfbClient* client, int credentialType);
typedef rfbBool (*MallocFrameBufferProc)(struct _rfbClient* client);
typedef void (*GotXCutTextProc)(struct _rfbClient* client, const char *text, int textlen);
typedef void (*BellProc)(struct _rfbClient* client);

typedef void (*GotCursorShapeProc)(struct _rfbClient* client, int xhot, int yhot, int width, int height, int bytesPerPixel);
typedef void (*GotCopyRectProc)(struct _rfbClient* client, int src_x, int src_y, int w, int h, int dest_x, int dest_y);
typedef void (*GotFillRectProc)(struct _rfbClient* client, int x, int y, int w, int h, uint32_t colour);
typedef void (*GotBitmapProc)(struct _rfbClient* client, const uint8_t* buffer, int x, int y, int w, int h);
typedef rfbBool (*GotJpegProc)(struct _rfbClient* client, const uint8_t* buffer, int length, int x, int y, int w, int h);
typedef rfbBool (*LockWriteToTLSProc)(struct _rfbClient* client);
typedef rfbBool (*UnlockWriteToTLSProc)(struct _rfbClient* client);


typedef char* (*GetUserProc)(struct _rfbClient* client);
typedef char* (*GetSASLMechanismProc)(struct _rfbClient* client, char* mechlist);


typedef struct _rfbClient {
	uint8_t* frameBuffer;
	int width, height;

	int endianTest;

	AppData appData;

	const char* programName;
	char* serverHost;
	int serverPort; 
	rfbBool listenSpecified;
	int listenPort, flashPort;

	struct {
		int x, y, w, h;
	} updateRect;

	


	char buffer[RFB_BUFFER_SIZE];

	

	rfbSocket sock;
	rfbBool canUseCoRRE;
	rfbBool canUseHextile;
	char *desktopName;
	rfbPixelFormat format;
	rfbServerInitMsg si;

	

	char buf[RFB_BUF_SIZE];
	char *bufoutptr;
	unsigned int buffered;

	

	
	
	int ultra_buffer_size;
	char *ultra_buffer;

	int raw_buffer_size;
	char *raw_buffer;


	z_stream decompStream;
	rfbBool decompStreamInited;




	

	

	char zlib_buffer[ZLIB_BUFFER_SIZE];

	
	z_stream zlibStream[4];
	rfbBool zlibStreamActive[4];

	
	rfbBool cutZeros;
	int rectWidth, rectColors;
	char tightPalette[256*4];
	uint8_t tightPrevRow[2048*3*sizeof(uint16_t)];


	
	rfbBool jpegError;

	struct jpeg_source_mgr* jpegSrcManager;
	void* jpegBufferPtr;
	size_t jpegBufferLen;





	
	
	uint8_t *rcSource, *rcMask;

	
	rfbClientData* clientData;

	rfbVNCRec* vncRec;

	
	int KeyboardLedStateEnabled;
	int CurrentKeyboardLedState;

	int canHandleNewFBSize;

	
	HandleTextChatProc         HandleTextChat;
	HandleKeyboardLedStateProc HandleKeyboardLedState;
	HandleCursorPosProc HandleCursorPos;
	SoftCursorLockAreaProc SoftCursorLockArea;
	SoftCursorUnlockScreenProc SoftCursorUnlockScreen;
	GotFrameBufferUpdateProc GotFrameBufferUpdate;
	
	GetPasswordProc GetPassword;
	MallocFrameBufferProc MallocFrameBuffer;
	GotXCutTextProc GotXCutText;
	BellProc Bell;

	GotCursorShapeProc GotCursorShape;
	GotCopyRectProc GotCopyRect;

	
	rfbSupportedMessages supportedMessages;

	
	int major, minor;

	
	uint32_t authScheme, subAuthScheme;

	
	void* tlsSession;

	
	GetCredentialProc GetCredential;

	
	uint32_t *clientAuthSchemes;

	
	char *destHost;
	int destPort;

        
        int QoS_DSCP;

        
	HandleXvpMsgProc           HandleXvpMsg;

	
        rfbSocket listenSock;

	FinishedFrameBufferUpdateProc FinishedFrameBufferUpdate;

	char *listenAddress;
        
        rfbSocket listen6Sock;
        char* listen6Address;
        int listen6Port;

        
        unsigned long outputWindow;

	
	LockWriteToTLSProc LockWriteToTLS;
	UnlockWriteToTLSProc UnlockWriteToTLS;

        
        GotFillRectProc GotFillRect;
        GotBitmapProc GotBitmap;
        
        GotJpegProc GotJpeg;


        sasl_conn_t *saslconn;
        const char *saslDecoded;
        unsigned int saslDecodedLength;
        unsigned int saslDecodedOffset;
        sasl_secret_t *saslSecret;

        
        GetSASLMechanismProc GetSASLMechanism;
        GetUserProc GetUser;





	
	void *tjhnd;



	
	unsigned int connectTimeout;
} rfbClient;



extern rfbBool HandleCursorShape(rfbClient* client,int xhot, int yhot, int width, int height, uint32_t enc);



extern void listenForIncomingConnections(rfbClient* viewer);
extern int listenForIncomingConnectionsNoFork(rfbClient* viewer, int usec_timeout);



extern rfbBool rfbEnableClientLogging;
typedef void (*rfbClientLogProc)(const char *format, ...);
extern rfbClientLogProc rfbClientLog,rfbClientErr;
extern rfbBool ConnectToRFBServer(rfbClient* client,const char *hostname, int port);
extern rfbBool ConnectToRFBRepeater(rfbClient* client,const char *repeaterHost, int repeaterPort, const char *destHost, int destPort);
extern void SetClientAuthSchemes(rfbClient* client,const uint32_t *authSchemes, int size);
extern rfbBool InitialiseRFBConnection(rfbClient* client);

extern rfbBool SetFormatAndEncodings(rfbClient* client);
extern rfbBool SendIncrementalFramebufferUpdateRequest(rfbClient* client);

extern rfbBool SendFramebufferUpdateRequest(rfbClient* client, int x, int y, int w, int h, rfbBool incremental);

extern rfbBool SendScaleSetting(rfbClient* client,int scaleSetting);

extern rfbBool SendPointerEvent(rfbClient* client,int x, int y, int buttonMask);

extern rfbBool SendKeyEvent(rfbClient* client,uint32_t key, rfbBool down);

extern rfbBool SendClientCutText(rfbClient* client,char *str, int len);

extern rfbBool HandleRFBServerMessage(rfbClient* client);


extern rfbBool TextChatSend(rfbClient* client, char *text);

extern rfbBool TextChatOpen(rfbClient* client);

extern rfbBool TextChatClose(rfbClient* client);
extern rfbBool TextChatFinish(rfbClient* client);
extern rfbBool PermitServerInput(rfbClient* client, int enabled);
extern rfbBool SendXvpMsg(rfbClient* client, uint8_t version, uint8_t code);

extern void PrintPixelFormat(rfbPixelFormat *format);

extern rfbBool SupportsClient2Server(rfbClient* client, int messageType);
extern rfbBool SupportsServer2Client(rfbClient* client, int messageType);




void rfbClientSetClientData(rfbClient* client, void* tag, void* data);

void* rfbClientGetClientData(rfbClient* client, void* tag);



typedef struct _rfbClientProtocolExtension {
	int* encodings;
	
	rfbBool (*handleEncoding)(rfbClient* cl, rfbFramebufferUpdateRectHeader* rect);
	
	rfbBool (*handleMessage)(rfbClient* cl, rfbServerToClientMsg* message);
	struct _rfbClientProtocolExtension* next;
	uint32_t const* securityTypes;
	
	rfbBool (*handleAuthentication)(rfbClient* cl, uint32_t authScheme);
} rfbClientProtocolExtension;

void rfbClientRegisterExtension(rfbClientProtocolExtension* e);



extern rfbBool errorMessageOnReadFailure;

extern rfbBool ReadFromRFBServer(rfbClient* client, char *out, unsigned int n);
extern rfbBool WriteToRFBServer(rfbClient* client, const char *buf, unsigned int n);
extern int FindFreeTcpPort(void);
extern rfbSocket ListenAtTcpPort(int port);
extern rfbSocket ListenAtTcpPortAndAddress(int port, const char *address);

extern rfbSocket ConnectClientToTcpAddr(unsigned int host, int port);

extern rfbSocket ConnectClientToTcpAddr6(const char *hostname, int port);

extern rfbSocket ConnectClientToUnixSock(const char *sockFile);

extern rfbSocket ConnectClientToTcpAddrWithTimeout(unsigned int host, int port, unsigned int timeout);

extern rfbSocket ConnectClientToTcpAddr6WithTimeout(const char *hostname, int port, unsigned int timeout);

extern rfbSocket ConnectClientToUnixSockWithTimeout(const char *sockFile, unsigned int timeout);
extern rfbSocket AcceptTcpConnection(rfbSocket listenSock);
extern rfbBool SetNonBlocking(rfbSocket sock);
extern rfbBool SetBlocking(rfbSocket sock);
extern rfbBool SetDSCP(rfbSocket sock, int dscp);

extern rfbBool StringToIPAddr(const char *str, unsigned int *addr);
extern rfbBool SameMachine(rfbSocket sock);

extern int WaitForMessage(rfbClient* client,unsigned int usecs);



rfbClient* rfbGetClient(int bitsPerSample,int samplesPerPixel,int bytesPerPixel);

rfbBool rfbInitClient(rfbClient* client,int* argc,char** argv);

void rfbClientCleanup(rfbClient* client);


}







