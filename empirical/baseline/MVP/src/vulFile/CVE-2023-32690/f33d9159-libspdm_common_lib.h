












typedef struct {
    uint8_t spdm_version_count;
    spdm_version_number_t spdm_version[SPDM_MAX_VERSION_COUNT];
} libspdm_device_version_t;

typedef struct {
    uint8_t ct_exponent;
    uint64_t rtt;
    uint32_t st1;
    uint32_t flags;
    uint32_t data_transfer_size;
    uint32_t max_spdm_msg_size;
} libspdm_device_capability_t;

typedef struct {
    uint8_t measurement_spec;
    uint8_t other_params_support;
    uint32_t measurement_hash_algo;
    uint32_t base_asym_algo;
    uint32_t base_hash_algo;
    uint16_t dhe_named_group;
    uint16_t aead_cipher_suite;
    uint16_t req_base_asym_alg;
    uint16_t key_schedule;
} libspdm_device_algorithm_t;

typedef struct {

    uint8_t buffer[LIBSPDM_MAX_CERT_CHAIN_SIZE];
    size_t buffer_size;

    uint8_t buffer_hash[LIBSPDM_MAX_HASH_SIZE];
    uint32_t buffer_hash_size;
    
    void *leaf_cert_public_key;

} libspdm_peer_used_cert_chain_t;

typedef struct {
    
    libspdm_device_version_t version;
    libspdm_device_capability_t capability;
    libspdm_device_algorithm_t algorithm;
    libspdm_device_version_t secured_message_version;

    
    const void *local_cert_chain_provision[SPDM_MAX_SLOT_COUNT];
    size_t local_cert_chain_provision_size[SPDM_MAX_SLOT_COUNT];
    
    uint8_t provisioned_slot_id;

    
    const void *peer_root_cert_provision[LIBSPDM_MAX_ROOT_CERT_SUPPORT];
    size_t peer_root_cert_provision_size[LIBSPDM_MAX_ROOT_CERT_SUPPORT];

    
    const void *peer_cert_chain_provision;
    size_t peer_cert_chain_provision_size;

    
    libspdm_verify_spdm_cert_chain_func verify_peer_spdm_cert_chain;

    
    size_t psk_hint_size;
    const void *psk_hint;

    
    size_t opaque_challenge_auth_rsp_size;
    uint8_t *opaque_challenge_auth_rsp;
    size_t opaque_measurement_rsp_size;
    uint8_t *opaque_measurement_rsp;

    
    bool basic_mut_auth_requested;
    uint8_t mut_auth_requested;
    uint8_t heartbeat_period;

    
    bool is_requester;
} libspdm_local_context_t;

typedef struct {
    
    libspdm_connection_state_t connection_state;

    
    spdm_version_number_t version;
    libspdm_device_capability_t capability;
    libspdm_device_algorithm_t algorithm;
    spdm_version_number_t secured_message_version;

    
    uint8_t peer_digest_slot_mask;
    uint8_t peer_total_digest_buffer[LIBSPDM_MAX_HASH_SIZE * SPDM_MAX_SLOT_COUNT];

    
    libspdm_peer_used_cert_chain_t peer_used_cert_chain[SPDM_MAX_SLOT_COUNT];
    uint8_t peer_used_cert_chain_slot_id;

    
    const uint8_t *local_used_cert_chain_buffer;
    size_t local_used_cert_chain_buffer_size;
} libspdm_connection_info_t;

typedef struct {
    size_t max_buffer_size;
    size_t buffer_size;
    
} libspdm_managed_buffer_t;

typedef struct {
    size_t max_buffer_size;
    size_t buffer_size;
    uint8_t buffer[LIBSPDM_MAX_MESSAGE_BUFFER_SIZE];
} libspdm_large_managed_buffer_t;

typedef struct {
    size_t max_buffer_size;
    size_t buffer_size;
    uint8_t buffer[LIBSPDM_MAX_MESSAGE_MEDIUM_BUFFER_SIZE];
} libspdm_medium_managed_buffer_t;

typedef struct {
    size_t max_buffer_size;
    size_t buffer_size;
    uint8_t buffer[LIBSPDM_MAX_MESSAGE_SMALL_BUFFER_SIZE];
} libspdm_small_managed_buffer_t;











typedef struct {
    
    libspdm_small_managed_buffer_t message_a;

    libspdm_large_managed_buffer_t message_b;
    libspdm_small_managed_buffer_t message_c;
    libspdm_large_managed_buffer_t message_mut_b;
    libspdm_small_managed_buffer_t message_mut_c;
    libspdm_large_managed_buffer_t message_m;

    void *digest_context_m1m2;
    void *digest_context_mut_m1m2;
    void *digest_context_l1l2;

} libspdm_transcript_t;


























typedef struct {

    libspdm_large_managed_buffer_t message_k;
    libspdm_large_managed_buffer_t message_f;
    libspdm_large_managed_buffer_t message_m;

    bool message_f_initialized;
    void *digest_context_th;
    void *digest_context_l1l2;
    
    void *digest_context_th_backup;

} libspdm_session_transcript_t;

typedef struct {
    uint32_t session_id;
    bool use_psk;
    uint8_t mut_auth_requested;
    uint8_t end_session_attributes;
    uint8_t session_policy;
    uint8_t heartbeat_period;
    libspdm_session_transcript_t session_transcript;
    
    spdm_key_update_request_t last_key_update_request;
    void *secured_message_context;
} libspdm_session_info_t;


typedef struct {
    
    uint8_t request_op_code_sequence[LIBSPDM_MAX_ENCAP_REQUEST_OP_CODE_SEQUENCE_COUNT + 1];
    uint8_t request_op_code_count;
    uint8_t current_request_op_code;
    uint8_t request_id;
    uint8_t req_slot_id;
    spdm_message_header_t last_encap_request_header;
    size_t last_encap_request_size;
    uint16_t cert_chain_total_len;
    libspdm_large_managed_buffer_t certificate_chain_buffer;
} libspdm_encap_context_t;


typedef struct {
    bool chunk_in_use;
    uint8_t chunk_handle;
    uint16_t chunk_seq_no;
    size_t chunk_bytes_transferred;

    void* large_message;
    size_t large_message_size;
    size_t large_message_capacity;
} libspdm_chunk_info_t;

typedef struct {
    libspdm_chunk_info_t send;
    libspdm_chunk_info_t get;
} libspdm_chunk_context_t;



typedef struct {
    void *buffer;
    size_t max_buffer_size;
    uint32_t mode;
    size_t buffer_size;
    uint32_t status;
} libspdm_msg_log_t;




typedef struct {
    uint32_t version;

    
    libspdm_device_send_message_func send_message;
    libspdm_device_receive_message_func receive_message;

    
    libspdm_device_acquire_sender_buffer_func acquire_sender_buffer;
    libspdm_device_release_sender_buffer_func release_sender_buffer;
    libspdm_device_acquire_receiver_buffer_func acquire_receiver_buffer;
    libspdm_device_release_receiver_buffer_func release_receiver_buffer;

    
    libspdm_transport_encode_message_func transport_encode_message;
    libspdm_transport_decode_message_func transport_decode_message;
    libspdm_transport_get_header_size_func transport_get_header_size;

    
    uint8_t last_spdm_request[LIBSPDM_MAX_MESSAGE_BUFFER_SIZE];
    size_t last_spdm_request_size;

    
    uint8_t *scratch_buffer;
    size_t scratch_buffer_size;
    
    uint8_t *sender_buffer;
    size_t sender_buffer_size;
    
    uint8_t *receiver_buffer;
    size_t receiver_buffer_size;

    
    uint32_t last_spdm_request_session_id;
    bool last_spdm_request_session_id_valid;

    
    libspdm_error_struct_t last_spdm_error;

    
    size_t get_response_func;

    
    size_t get_encap_response_func;
    libspdm_encap_context_t encap_context;

    
    size_t spdm_session_state_callback[LIBSPDM_MAX_SESSION_STATE_CALLBACK_NUM];

    
    size_t spdm_connection_state_callback[LIBSPDM_MAX_CONNECTION_STATE_CALLBACK_NUM];

    
    size_t spdm_key_update_callback[LIBSPDM_MAX_KEY_UPDATE_CALLBACK_NUM];

    libspdm_local_context_t local_context;

    libspdm_connection_info_t connection_info;
    libspdm_transcript_t transcript;

    libspdm_session_info_t session_info[LIBSPDM_MAX_SESSION_COUNT];

    
    uint32_t latest_session_id;

    
    libspdm_response_state_t response_state;

    
    spdm_error_data_response_not_ready_t error_data;
    uint8_t cache_spdm_request[LIBSPDM_MAX_MESSAGE_BUFFER_SIZE];
    size_t cache_spdm_request_size;
    uint8_t current_token;

    
    uint8_t retry_times;
    bool crypto_request;

    
    void *app_context_data_ptr;

    
    uint8_t handle_error_return_policy;


    
    libspdm_chunk_context_t chunk_context;



    libspdm_msg_log_t msg_log;

} libspdm_context_t;






void libspdm_internal_dump_hex_str(const uint8_t *data, size_t size);



void libspdm_internal_dump_data(const uint8_t *data, size_t size);



void libspdm_internal_dump_hex(const uint8_t *data, size_t size);









libspdm_return_t libspdm_append_managed_buffer(void *managed_buffer, const void *buffer, size_t buffer_size);


void libspdm_reset_managed_buffer(void *managed_buffer);


size_t libspdm_get_managed_buffer_size(void *managed_buffer);


void *libspdm_get_managed_buffer(void *managed_buffer);


void libspdm_init_managed_buffer(void *managed_buffer, size_t max_buffer_size);


void libspdm_reset_message_buffer_via_request_code(void *context, void *session_info, uint8_t request_code);


void libspdm_session_info_init(libspdm_context_t *spdm_context, libspdm_session_info_t *session_info, uint32_t session_id, bool use_psk);



void libspdm_session_info_set_psk_hint(libspdm_session_info_t *session_info, const void *psk_hint, size_t psk_hint_size);



bool libspdm_is_version_supported(const libspdm_context_t *spdm_context, uint8_t version);


uint8_t libspdm_get_connection_version(const libspdm_context_t *spdm_context);


bool libspdm_is_capabilities_flag_supported(const libspdm_context_t *spdm_context, bool is_requester, uint32_t requester_capabilities_flag, uint32_t responder_capabilities_flag);




bool libspdm_generate_cert_chain_hash(libspdm_context_t *spdm_context, size_t slot_id, uint8_t *hash);


bool libspdm_verify_peer_digests(libspdm_context_t *spdm_context, const void *digest, size_t digest_count);


bool libspdm_verify_peer_cert_chain_buffer(libspdm_context_t *spdm_context, const void *cert_chain_buffer, size_t cert_chain_buffer_size, const void **trust_anchor, size_t *trust_anchor_size, bool is_requester);






bool libspdm_generate_challenge_auth_signature(libspdm_context_t *spdm_context, bool is_requester, uint8_t *signature);



bool libspdm_verify_certificate_chain_hash(libspdm_context_t *spdm_context, const void *certificate_chain_hash, size_t certificate_chain_hash_size);



bool libspdm_verify_challenge_auth_signature(libspdm_context_t *spdm_context, bool is_requester, const void *sign_data, size_t sign_data_size);




uint32_t libspdm_get_measurement_summary_hash_size(libspdm_context_t *spdm_context, bool is_requester, uint8_t measurement_summary_hash_type);



bool libspdm_calculate_l1l2(void *context, void *session_info, libspdm_large_managed_buffer_t *l1l2);


bool libspdm_calculate_l1l2_hash(void *context, void *session_info, size_t *l1l2_hash_size, void *l1l2_hash);


bool libspdm_get_element_from_opaque_data(libspdm_context_t *spdm_context, size_t data_in_size, const void *data_in, uint8_t element_id, uint8_t sm_data_id, const void **get_element_ptr, size_t *get_element_len);




size_t libspdm_get_untrusted_opaque_data_supported_version_data_size( libspdm_context_t *spdm_context, uint8_t version_count);


size_t libspdm_get_opaque_data_supported_version_data_size(libspdm_context_t *spdm_context);


size_t libspdm_get_opaque_data_version_selection_data_size(const libspdm_context_t *spdm_context);


uint8_t libspdm_get_version_from_version_number(const spdm_version_number_t ver);


void libspdm_version_number_sort(spdm_version_number_t *ver_set, size_t ver_num);


bool libspdm_negotiate_connection_version(spdm_version_number_t *common_version, spdm_version_number_t *req_ver_set, size_t req_ver_num, const spdm_version_number_t *res_ver_set, size_t res_ver_num);





libspdm_return_t libspdm_acquire_sender_buffer ( libspdm_context_t *spdm_context, size_t *max_msg_size, void **msg_buf_ptr);


void libspdm_release_sender_buffer (libspdm_context_t *spdm_context);


void libspdm_get_sender_buffer ( libspdm_context_t *spdm_context, void **sender_buffer, size_t *sender_buffer_size);




libspdm_return_t libspdm_acquire_receiver_buffer ( libspdm_context_t *spdm_context, size_t *max_msg_size, void **msg_buf_ptr);


void libspdm_release_receiver_buffer (libspdm_context_t *spdm_context);


void libspdm_get_receiver_buffer ( libspdm_context_t *spdm_context, void **receiver_buffer, size_t *receiver_buffer_size);




uint8_t libspdm_get_cert_slot_mask (libspdm_context_t *spdm_context);


uint8_t libspdm_get_cert_slot_count(libspdm_context_t *spdm_context);


void libspdm_append_msg_log(void *context, void *message, size_t message_size);



void libspdm_reset_message_a(void *spdm_context);


void libspdm_reset_message_b(void *spdm_context);


void libspdm_reset_message_c(void *spdm_context);


void libspdm_reset_message_mut_b(void *spdm_context);


void libspdm_reset_message_mut_c(void *spdm_context);


void libspdm_reset_message_m(void *context, void *session_info);


void libspdm_reset_message_k(void *context, void *spdm_session_info);


void libspdm_reset_message_f(void *context, void *spdm_session_info);


libspdm_return_t libspdm_append_message_a(void *spdm_context, const void *message, size_t message_size);

libspdm_return_t libspdm_append_message_b(void *spdm_context, const void *message, size_t message_size);


libspdm_return_t libspdm_append_message_c(void *spdm_context, const void *message, size_t message_size);


libspdm_return_t libspdm_append_message_mut_b(void *spdm_context, const void *message, size_t message_size);


libspdm_return_t libspdm_append_message_mut_c(void *spdm_context, const void *message, size_t message_size);


libspdm_return_t libspdm_append_message_m(void *context, void *session_info, const void *message, size_t message_size);


libspdm_return_t libspdm_append_message_k(void *context, void *spdm_session_info, bool is_requester, const void *message, size_t message_size);



libspdm_return_t libspdm_append_message_f(void *context, void *spdm_session_info, bool is_requester, const void *message, size_t message_size);



uint32_t libspdm_generate_session_id(uint16_t req_session_id, uint16_t rsp_session_id);


void *libspdm_assign_session_id(void *spdm_context, uint32_t session_id, bool use_psk);


void libspdm_free_session_id(void *spdm_context, uint32_t session_id);



bool libspdm_calculate_th_for_exchange( void *spdm_context, void *spdm_session_info, const uint8_t *cert_chain_buffer, size_t cert_chain_buffer_size, size_t *th_data_buffer_size, void *th_data_buffer);




bool libspdm_calculate_th_hash_for_exchange( void *context, void *spdm_session_info, size_t *th_hash_buffer_size, void *th_hash_buffer);



bool libspdm_calculate_th_hmac_for_exchange_rsp( void *context, void *spdm_session_info, bool is_requester, size_t *th_hmac_buffer_size, void *th_hmac_buffer);





bool libspdm_calculate_th_for_finish(void *spdm_context, void *spdm_session_info, const uint8_t *cert_chain_buffer, size_t cert_chain_buffer_size, const uint8_t *mut_cert_chain_buffer, size_t mut_cert_chain_buffer_size, size_t *th_data_buffer_size, void *th_data_buffer);








bool libspdm_calculate_th_hash_for_finish(void *spdm_context, void *spdm_session_info, size_t *th_hash_buffer_size, void *th_hash_buffer);




bool libspdm_calculate_th_hmac_for_finish_rsp(void *spdm_context, void *spdm_session_info, size_t *th_hmac_buffer_size, void *th_hmac_buffer);




bool libspdm_calculate_th_hmac_for_finish_req(void *spdm_context, void *spdm_session_info, size_t *th_hmac_buffer_size, void *th_hmac_buffer);





bool libspdm_calculate_th1_hash(void *spdm_context, void *spdm_session_info, bool is_requester, uint8_t *th1_hash_data);




bool libspdm_calculate_th2_hash(void *spdm_context, void *spdm_session_info, bool is_requester, uint8_t *th2_hash_data);




uint32_t libspdm_read_uint24(const uint8_t *buffer);


void libspdm_write_uint24(uint8_t *buffer, uint32_t value);


uint16_t libspdm_read_uint16(const uint8_t *buffer);


void libspdm_write_uint16(uint8_t *buffer, uint16_t value);


uint32_t libspdm_read_uint32(const uint8_t *buffer);


void libspdm_write_uint32(uint8_t *buffer, uint32_t value);


uint64_t libspdm_read_uint64(const uint8_t *buffer);


void libspdm_write_uint64(uint8_t *buffer, uint64_t value);


static inline bool libspdm_onehot0(uint32_t mask)
{
    return !mask || !(mask & (mask - 1));
}


