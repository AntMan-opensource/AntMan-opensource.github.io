

























































struct lua_longjmp;  





















typedef struct stringtable {
  TString **hash;
  int nuse;  
  int size;
} stringtable;



typedef struct CallInfo {
  StkId func;  
  StkId	top;  
  struct CallInfo *previous, *next;  
  union {
    struct {  
      const Instruction *savedpc;
      volatile l_signalT trap;
      int nextraargs;  
    } l;
    struct {  
      lua_KFunction k;  
      ptrdiff_t old_errfunc;
      lua_KContext ctx;  
    } c;
  } u;
  union {
    int funcidx;  
    int nyield;  
    struct {  
      unsigned short ftransfer;  
      unsigned short ntransfer;  
    } transferinfo;
  } u2;
  short nresults;  
  unsigned short callstatus;
} CallInfo;



























typedef struct global_State {
  lua_Alloc frealloc;  
  void *ud;         
  l_mem totalbytes;  
  l_mem GCdebt;  
  lu_mem GCestimate;  
  lu_mem lastatomic;  
  stringtable strt;  
  TValue l_registry;
  TValue nilvalue;  
  unsigned int seed;  
  lu_byte currentwhite;
  lu_byte gcstate;  
  lu_byte gckind;  
  lu_byte genminormul;  
  lu_byte genmajormul;  
  lu_byte gcrunning;  
  lu_byte gcemergency;  
  lu_byte gcpause;  
  lu_byte gcstepmul;  
  lu_byte gcstepsize;  
  GCObject *allgc;  
  GCObject **sweepgc;  
  GCObject *finobj;  
  GCObject *gray;  
  GCObject *grayagain;  
  GCObject *weak;  
  GCObject *ephemeron;  
  GCObject *allweak;  
  GCObject *tobefnz;  
  GCObject *fixedgc;  
  
  GCObject *survival;  
  GCObject *old;  
  GCObject *reallyold;  
  GCObject *finobjsur;  
  GCObject *finobjold;  
  GCObject *finobjrold;  
  struct lua_State *twups;  
  lua_CFunction panic;  
  struct lua_State *mainthread;
  TString *memerrmsg;  
  TString *tmname[TM_N];  
  struct Table *mt[LUA_NUMTAGS];  
  TString *strcache[STRCACHE_N][STRCACHE_M];  
  lua_WarnFunction warnf;  
  void *ud_warn;         
  unsigned int Cstacklimit;  
} global_State;



struct lua_State {
  CommonHeader;
  lu_byte status;
  lu_byte allowhook;
  unsigned short nci;  
  StkId top;  
  global_State *l_G;
  CallInfo *ci;  
  const Instruction *oldpc;  
  StkId stack_last;  
  StkId stack;  
  UpVal *openupval;  
  GCObject *gclist;
  struct lua_State *twups;  
  struct lua_longjmp *errorJmp;  
  CallInfo base_ci;  
  volatile lua_Hook hook;
  ptrdiff_t errfunc;  
  l_uint32 nCcalls;  
  int stacksize;
  int basehookcount;
  int hookcount;
  volatile l_signalT hookmask;
};






union GCUnion {
  GCObject gc;  
  struct TString ts;
  struct Udata u;
  union Closure cl;
  struct Table h;
  struct Proto p;
  struct lua_State th;  
  struct UpVal upv;
};























LUAI_FUNC void luaE_setdebt (global_State *g, l_mem debt);
LUAI_FUNC void luaE_freethread (lua_State *L, lua_State *L1);
LUAI_FUNC CallInfo *luaE_extendCI (lua_State *L);
LUAI_FUNC void luaE_freeCI (lua_State *L);
LUAI_FUNC void luaE_shrinkCI (lua_State *L);
LUAI_FUNC void luaE_enterCcall (lua_State *L);
LUAI_FUNC void luaE_warning (lua_State *L, const char *msg, int tocont);
LUAI_FUNC void luaE_warnerror (lua_State *L, const char *where);






