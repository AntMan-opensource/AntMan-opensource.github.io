








using namespace cb;
using namespace std;


struct TarFileReader::private_t {
  io::filtering_istream filter;
};


TarFileReader::TarFileReader(const string &path, Compression compression) :
  pri(new private_t), stream(SystemUtilities::iopen(path)), didReadHeader(false) {

  if (compression == COMPRESSION_AUTO) compression = compressionFromPath(path);
  pushDecompression(compression, pri->filter);
  pri->filter.push(*this->stream);
}


TarFileReader::TarFileReader(istream &stream, Compression compression) :
  pri(new private_t), stream(SmartPointer<istream>::Phony(&stream)), didReadHeader(false) {

  pushDecompression(compression, pri->filter);
  pri->filter.push(*this->stream);
}


TarFileReader::~TarFileReader() {delete pri;}


bool TarFileReader::hasMore() {
  if (!didReadHeader) {
    SysError::clear();
    if (!readHeader(pri->filter))
      THROW("Tar file read failed: " << SysError());
    didReadHeader = true;
  }

  return !isEOF();
}


bool TarFileReader::next() {
  if (didReadHeader) {
    skipFile(pri->filter);
    didReadHeader = false;
  }

  return hasMore();
}


std::string TarFileReader::extract(const string &_path) {
  if (_path.empty()) THROW("path cannot be empty");
  if (!hasMore()) THROW("No more tar files");

  string path = _path;
  if (SystemUtilities::isDirectory(path)) {
    path += "/" + getFilename();

    
    string a = SystemUtilities::getCanonicalPath(_path);
    string b = SystemUtilities::getCanonicalPath(path);
    if (!String::startsWith(b, a))
      THROW("Tar path points outside of the extraction directory: " << path);
  }

  LOG_DEBUG(5, "Extracting: " << path);

  switch (getType()) {
  case REG_FILE: case NORMAL_FILE: case CONTIGUOUS_FILE:
    return extract(*SystemUtilities::oopen(path, getMode()));

  case DIRECTORY:
    SystemUtilities::ensureDirectory(path);
    didReadHeader = false;
    break;

  default: THROW("Unsupported tar file type " << getType());
  }

  return getFilename();
}


string TarFileReader::extract(ostream &out) {
  if (!hasMore()) THROW("No more tar files");

  readFile(out, pri->filter);
  didReadHeader = false;

  return getFilename();
}


void TarFileReader::extractAll(const string &path) {
  while (next()) extract(path);
}
