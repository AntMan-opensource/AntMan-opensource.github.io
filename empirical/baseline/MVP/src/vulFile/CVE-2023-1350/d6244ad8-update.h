










typedef enum {
	REQUEST_STATE_INITIALIZED = 0,	 REQUEST_STATE_PENDING, REQUEST_STATE_PROCESSING, REQUEST_STATE_DEQUEUE, REQUEST_STATE_FINISHED } request_state;





struct updateJob;
struct updateResult;

typedef guint32 updateFlags;


typedef void (*update_result_cb) (const struct updateResult * const result, gpointer user_data, updateFlags flags);


typedef struct updateOptions {
	gchar		*username;	
	gchar		*password;	
	gboolean	dontUseProxy;	
} *updateOptionsPtr;


typedef struct updateState {
	glong		lastModified;		
	guint64  	lastPoll;		
	guint64 	lastFaviconPoll;	
	gchar		*cookies;		
	gchar		*etag;			
	gint		maxAgeMinutes;		
	gint		synFrequency;		
	gint		synPeriod;		
	gint		timeToLive;		
} *updateStatePtr;

G_BEGIN_DECLS  G_DECLARE_FINAL_TYPE (UpdateRequest, update_request, UPDATE, REQUEST, GObject)


struct _UpdateRequest {
	GObject		parent;

	gchar 		*source;	
	gchar           *postdata;      
	gchar           *authValue;     
	updateOptionsPtr options;	
	gchar		*filtercmd;	
	updateStatePtr	updateState;	
};


typedef struct updateResult {
	gchar 		*source;	

	int		httpstatus;	
	gchar		*data;		
	size_t		size;		
	gchar		*contentType;	
	gchar		*filterErrors;	

	updateStatePtr	updateState;	
} *updateResultPtr;


typedef struct updateCommandState {
	GPid		pid;		
	guint		timeout_id;	
	guint		io_watch_id;	
	guint		child_watch_id;	
	gint		fd;		
	GIOChannel	*stdout_ch;	
} updateCommandState;



typedef struct updateJob {
	UpdateRequest		*request;
	updateResultPtr		result;
	gpointer		owner;		
	update_result_cb	callback;	
	gpointer		user_data;	
	updateFlags		flags;		
	gint			state;		
	updateCommandState	cmd;		
} *updateJobPtr;


updateStatePtr update_state_new (void);


updateStatePtr update_state_copy (updateStatePtr state);

glong update_state_get_lastmodified (updateStatePtr state);
void update_state_set_lastmodified (updateStatePtr state, glong lastmodified);

const gchar * update_state_get_etag (updateStatePtr state);
void update_state_set_etag (updateStatePtr state, const gchar *etag);

gint update_state_get_cache_maxage (updateStatePtr state);
void update_state_set_cache_maxage (updateStatePtr state, const gint maxage);

const gchar * update_state_get_cookies (updateStatePtr state);
void update_state_set_cookies (updateStatePtr state, const gchar *cookies);


void update_state_free (updateStatePtr updateState);


updateOptionsPtr update_options_copy (updateOptionsPtr options);


void update_options_free (updateOptionsPtr options);


void update_init (void);


void update_deinit (void);


UpdateRequest * update_request_new (const gchar *source, updateStatePtr state, updateOptionsPtr options);


void update_request_set_source (UpdateRequest *request, const gchar* source);


void update_request_set_auth_value (UpdateRequest *request, const gchar* authValue);


updateResultPtr update_result_new (void);


void update_result_free (updateResultPtr result);


updateJobPtr update_execute_request (gpointer owner, UpdateRequest *request, update_result_cb callback, gpointer user_data, updateFlags flags);







void update_process_finished_job (updateJobPtr job);


void update_job_cancel_by_owner (gpointer owner);


gint update_job_get_state (updateJobPtr job);


void update_jobs_get_count (guint *count, guint *maxcount);

G_END_DECLS  

