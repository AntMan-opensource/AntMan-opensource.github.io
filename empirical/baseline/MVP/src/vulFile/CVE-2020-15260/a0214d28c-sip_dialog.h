


















PJ_BEGIN_DECL         typedef struct pjsip_dlg_party {









    pjsip_fromto_hdr	*info;	    
    pj_str_t		 info_str;  
    pj_uint32_t		 tag_hval;  
    pjsip_contact_hdr	*contact;   
    pj_int32_t		 first_cseq;
    pj_int32_t		 cseq;	    
} pjsip_dlg_party;



typedef enum pjsip_dialog_state {
    
    PJSIP_DIALOG_STATE_NULL,   PJSIP_DIALOG_STATE_ESTABLISHED } pjsip_dialog_state;






typedef enum pjsip_dialog_cap_status {
    
    PJSIP_DIALOG_CAP_UNSUPPORTED    = 0,   PJSIP_DIALOG_CAP_SUPPORTED	    = 1,   PJSIP_DIALOG_CAP_UNKNOWN	    = 2 } pjsip_dialog_cap_status;









struct pjsip_dialog {
    
    PJ_DECL_LIST_MEMBER(pjsip_dialog);

    
    char		obj_name[PJ_MAX_OBJ_NAME];  
    pj_pool_t	       *pool;	    
    pjsip_user_agent   *ua;	    
    pjsip_endpoint     *endpt;	    
    pj_grp_lock_t      *grp_lock_;  

    
    void	       *dlg_set;

    
    pjsip_dialog_state	state;	    
    pjsip_uri	       *target;	    
    pjsip_target_set	target_set; 
    pjsip_hdr	        inv_hdr;    
    pjsip_dlg_party     local;	    
    pjsip_dlg_party     remote;	    
    pjsip_hdr		rem_cap_hdr;
    pjsip_role_e	role;	    
    pj_bool_t		uac_has_2xx;
    pj_bool_t		secure;	    
    pj_bool_t		add_allow;  
    pjsip_cid_hdr      *call_id;    
    pjsip_route_hdr	route_set;  
    pj_bool_t		route_set_frozen; 
    pjsip_auth_clt_sess	auth_sess;  

    
    int			sess_count; 

    
    int			tsx_count;  

    
    pjsip_tpselector	tp_sel;

    
    unsigned		usage_cnt;  
    pjsip_module       *usage[PJSIP_MAX_MODULE]; 

    
    void	       *mod_data[PJSIP_MAX_MODULE]; 

    
    pjsip_host_port     via_addr;   
    const void         *via_tp;     
};


typedef struct pjsip_dlg_create_uac_param {
    
    pjsip_user_agent *ua;

    
    pj_str_t local_uri;

    
    pj_str_t local_contact;

    
    pj_str_t remote_uri;

    
    pj_str_t target;

    
    pj_grp_lock_t *grp_lock;

} pjsip_dlg_create_uac_param;



PJ_DECL(pj_bool_t) pjsip_method_creates_dialog(const pjsip_method *m);


PJ_DECL(pj_status_t) pjsip_dlg_create_uac( pjsip_user_agent *ua, const pj_str_t *local_uri, const pj_str_t *local_contact, const pj_str_t *remote_uri, const pj_str_t *target, pjsip_dialog **p_dlg);






PJ_DECL(pj_status_t) pjsip_dlg_create_uac2( const pjsip_dlg_create_uac_param *create_param, pjsip_dialog **p_dlg);





PJ_DECL(pj_status_t) pjsip_dlg_create_uas(  pjsip_user_agent *ua, pjsip_rx_data *rdata, const pj_str_t *contact, pjsip_dialog **p_dlg);






PJ_DECL(pj_status_t)
pjsip_dlg_create_uas_and_inc_lock(    pjsip_user_agent *ua, pjsip_rx_data *rdata, const pj_str_t *contact, pjsip_dialog **p_dlg);





PJ_DECL(pj_status_t) pjsip_dlg_set_transport(pjsip_dialog *dlg, const pjsip_tpselector *sel);



PJ_DECL(pj_status_t) pjsip_dlg_set_via_sent_by(pjsip_dialog *dlg, pjsip_host_port *via_addr, pjsip_transport *via_tp);




PJ_DECL(pj_status_t) pjsip_dlg_fork(const pjsip_dialog *original_dlg, const pjsip_rx_data *rdata, pjsip_dialog **new_dlg );



PJ_DECL(pj_status_t) pjsip_dlg_terminate( pjsip_dialog *dlg );



PJ_DECL(pj_status_t) pjsip_dlg_set_route_set( pjsip_dialog *dlg, const pjsip_route_hdr *route_set );


PJ_DECL(pj_status_t) pjsip_dlg_inc_session( pjsip_dialog *dlg, pjsip_module *mod);



PJ_DECL(pj_status_t) pjsip_dlg_dec_session( pjsip_dialog *dlg, pjsip_module *mod);


PJ_DECL(pj_status_t) pjsip_dlg_add_usage( pjsip_dialog *dlg, pjsip_module *module, void *mod_data );



PJ_DECL(pj_bool_t) pjsip_dlg_has_usage(pjsip_dialog *dlg, pjsip_module *module);


PJ_DECL(pj_status_t) pjsip_dlg_set_mod_data( pjsip_dialog *dlg, int mod_id, void *data );



PJ_DECL(void*) pjsip_dlg_get_mod_data( pjsip_dialog *dlg, int mod_id);



PJ_DECL(void) pjsip_dlg_inc_lock( pjsip_dialog *dlg );


PJ_DECL(pj_status_t) pjsip_dlg_try_inc_lock( pjsip_dialog *dlg );


PJ_DECL(void) pjsip_dlg_dec_lock( pjsip_dialog *dlg );


PJ_DECL(pj_grp_lock_t *) pjsip_dlg_get_lock( pjsip_dialog *dlg );



PJ_DECL(pjsip_dialog*) pjsip_rdata_get_dlg( pjsip_rx_data *rdata );


PJ_DECL(pjsip_dialog*) pjsip_tdata_get_dlg( pjsip_tx_data *tdata );


PJ_DECL(pjsip_dialog*) pjsip_tsx_get_dlg( pjsip_transaction *tsx );



PJ_DECL(pj_status_t) pjsip_dlg_create_request(	pjsip_dialog *dlg, const pjsip_method *method, int cseq, pjsip_tx_data **tdata);





PJ_DECL(pj_status_t) pjsip_dlg_send_request (	pjsip_dialog *dlg, pjsip_tx_data *tdata, int mod_data_id, void *mod_data);





PJ_DECL(pj_status_t) pjsip_dlg_create_response(	pjsip_dialog *dlg, pjsip_rx_data *rdata, int st_code, const pj_str_t *st_text, pjsip_tx_data **tdata);






PJ_DECL(pj_status_t) pjsip_dlg_modify_response(	pjsip_dialog *dlg, pjsip_tx_data *tdata, int st_code, const pj_str_t *st_text);





PJ_DECL(pj_status_t) pjsip_dlg_send_response(	pjsip_dialog *dlg, pjsip_transaction *tsx, pjsip_tx_data *tdata);




PJ_DECL(pj_status_t) pjsip_dlg_respond( pjsip_dialog *dlg, pjsip_rx_data *rdata, int st_code, const pj_str_t *st_text, const pjsip_hdr *hdr_list, const pjsip_msg_body *body );







PJ_DECL(pjsip_dialog_cap_status) pjsip_dlg_remote_has_cap( pjsip_dialog *dlg, int htype, const pj_str_t *hname, const pj_str_t *token);





PJ_DECL(const pjsip_hdr*) pjsip_dlg_get_remote_cap_hdr(pjsip_dialog *dlg, int htype, const pj_str_t *hname);



PJ_DECL(pj_status_t) pjsip_dlg_set_remote_cap_hdr( pjsip_dialog *dlg, const pjsip_generic_array_hdr *cap_hdr);



PJ_DECL(pj_status_t) pjsip_dlg_remove_remote_cap_hdr(pjsip_dialog *dlg, int htype, const pj_str_t *hname);



PJ_DECL(pj_status_t) pjsip_dlg_update_remote_cap(pjsip_dialog *dlg, const pjsip_msg *msg, pj_bool_t strict);









void pjsip_dlg_on_tsx_state( pjsip_dialog *dlg, pjsip_transaction *tsx, pjsip_event *e );


void pjsip_dlg_on_rx_request( pjsip_dialog *dlg, pjsip_rx_data *rdata );

void pjsip_dlg_on_rx_response( pjsip_dialog *dlg, pjsip_rx_data *rdata );



PJ_END_DECL    



