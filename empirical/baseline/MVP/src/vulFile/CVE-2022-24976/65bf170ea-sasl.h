






































struct sasl_session {
	mowgli_node_t                   node;                   
	const struct sasl_mechanism *   mechptr;                
	struct server *                 server;                 
	struct sourceinfo *             si;                     
	void *                          mechdata;               
	char *                          certfp;                 
	char *                          host;                   
	char *                          ip;                     
	char *                          buf;                    
	size_t                          len;                    
	unsigned int                    flags;                  
	char                            authcid[NICKLEN + 1];   
	char                            authzid[NICKLEN + 1];   
	char                            authceid[IDLEN + 1];    
	char                            authzeid[IDLEN + 1];    
	char                            uid[UIDLEN + 1];        
};

struct sasl_sourceinfo {
	struct sourceinfo       parent;
	struct sasl_session *   sess;
};

struct sasl_message {
	struct server * server;
	char *          uid;
	char *          parv[SASL_MESSAGE_MAXPARA];
	int             parc;
	char            mode;
};

struct sasl_input_buf {
	const void *    buf;
	const size_t    len;
	unsigned int *  flags;
};

struct sasl_output_buf {
	void *          buf;
	size_t          len;
	unsigned int    flags;
};

enum sasl_mechanism_result {
	ASASL_MRESULT_ERROR     = 1,     ASASL_MRESULT_FAILURE   = 2, ASASL_MRESULT_CONTINUE  = 3, ASASL_MRESULT_SUCCESS   = 4, };




typedef enum sasl_mechanism_result (*sasl_mech_start_fn)(struct sasl_session *restrict, struct sasl_output_buf *restrict) ATHEME_FATTR_WUR;

typedef enum sasl_mechanism_result (*sasl_mech_step_fn)(struct sasl_session *restrict, const struct sasl_input_buf *restrict, struct sasl_output_buf *restrict) ATHEME_FATTR_WUR;

typedef void (*sasl_mech_finish_fn)(struct sasl_session *);

struct sasl_mechanism {
	char                name[SASL_MECHANISM_MAXLEN];
	sasl_mech_start_fn  mech_start;
	sasl_mech_step_fn   mech_step;
	sasl_mech_finish_fn mech_finish;
	bool                password_based;
};

typedef bool (*sasl_authxid_can_login_fn)(struct sasl_session *restrict, const char *restrict, struct myuser **restrict) ATHEME_FATTR_WUR;

struct sasl_core_functions {
	void                      (*mech_register)(const struct sasl_mechanism *);
	void                      (*mech_unregister)(const struct sasl_mechanism *);
	sasl_authxid_can_login_fn   authcid_can_login;
	sasl_authxid_can_login_fn   authzid_can_login;
	void                      (*recalc_mechlist)(const struct sasl_session *, const struct myuser *, const char **);
};


