












    #include <wolfssl/wolfcrypt/fips.h>






    #include <wolfssl/wolfcrypt/hash.h>



    #include <wolfssl/wolfcrypt/async.h>
    #ifdef WOLFSSL_CERT_GEN
        #include <wolfssl/wolfcrypt/asn.h>
    #endif



    #include <wolfssl/wolfcrypt/port/atmel/atmel.h>



    #include <wolfssl/wolfcrypt/port/arm/cryptoCell.h>



    extern "C" {





    #ifndef USE_ECC_B_PARAM 
        #define USE_ECC_B_PARAM
    #endif









    #define MAX_ECC_BITS    521

    #define MAX_ECC_BITS    512

    #define MAX_ECC_BITS    384

    #define MAX_ECC_BITS    320

    #define MAX_ECC_BITS    256

    #define MAX_ECC_BITS    239

    #define MAX_ECC_BITS    224

    #define MAX_ECC_BITS    192

    #define MAX_ECC_BITS    160

    #define MAX_ECC_BITS    128

    #define MAX_ECC_BITS    112




    #define MAX_ECC_BYTES     (MAX_ECC_BITS / 8)

    
    #define MAX_ECC_BYTES     ((MAX_ECC_BITS / 8) + 1)



    
    #define ECC_MAX_PAD_SZ 2


enum {
    ECC_PUBLICKEY       = 1, ECC_PRIVATEKEY      = 2, ECC_PRIVATEKEY_ONLY = 3, ECC_MAXNAME     = 16, SIG_HEADER_SZ   =  7, ECC_BUFSIZE     = 256, ECC_MINSIZE     = 20, ECC_MAXSIZE     = 66, ECC_MAXSIZE_GEN = 74, ECC_MAX_OID_LEN = 16, ECC_MAX_SIG_SIZE= ((MAX_ECC_BYTES * 2) + ECC_MAX_PAD_SZ + SIG_HEADER_SZ),    ECC_MAX_CRYPTO_HW_SIZE = ATECC_KEY_SIZE, ECC_MAX_CRYPTO_HW_PUBKEY_SIZE = (ATECC_KEY_SIZE*2),  ECC_MAX_CRYPTO_HW_SIZE = 32,  #ifndef CRYPTOCELL_KEY_SIZE


















        CRYPTOCELL_KEY_SIZE = ECC_MAXSIZE, #endif
    ECC_MAX_CRYPTO_HW_SIZE = CRYPTOCELL_KEY_SIZE,    ECC_POINT_COMP_EVEN = 0x02, ECC_POINT_COMP_ODD = 0x03, ECC_POINT_UNCOMP = 0x04,   SHAMIR_PRECOMP_SZ = 16,   ECC_MAX_ID_LEN    = 32,  };















typedef enum ecc_curve_id {
    ECC_CURVE_INVALID = -1, ECC_CURVE_DEF = 0,   ECC_SECP192R1, ECC_PRIME192V2, ECC_PRIME192V3, ECC_PRIME239V1, ECC_PRIME239V2, ECC_PRIME239V3, ECC_SECP256R1,   ECC_SECP112R1, ECC_SECP112R2, ECC_SECP128R1, ECC_SECP128R2, ECC_SECP160R1, ECC_SECP160R2, ECC_SECP224R1, ECC_SECP384R1, ECC_SECP521R1,   ECC_SECP160K1, ECC_SECP192K1, ECC_SECP224K1, ECC_SECP256K1,   ECC_BRAINPOOLP160R1, ECC_BRAINPOOLP192R1, ECC_BRAINPOOLP224R1, ECC_BRAINPOOLP256R1, ECC_BRAINPOOLP320R1, ECC_BRAINPOOLP384R1, ECC_BRAINPOOLP512R1,    ECC_X25519,   ECC_X448,    ECC_CURVE_CUSTOM,  } ecc_curve_id;


















































typedef word16 ecc_oid_t;

typedef byte   ecc_oid_t;
    




    

    #define WOLFSSL_ECC_CURVE_STATIC




typedef struct ecc_set_type {
    int size;             
    int id;               
    const char* name;     
    const char* prime;    
    const char* Af;       
    const char* Bf;       
    const char* order;    
    const char* Gx;       
    const char* Gy;       
    const ecc_oid_t* oid;
    word32      oidSz;
    word32      oidSum;    
    int         cofactor;
} ecc_set_type;



    

typedef struct ecc_set_type {
    int size;             
    int id;               
    const char name[MAX_ECC_NAME];     
    const char prime[MAX_ECC_STRING];    
    const char Af[MAX_ECC_STRING];       
    const char Bf[MAX_ECC_STRING];       
    const char order[MAX_ECC_STRING];    
    const char Gx[MAX_ECC_STRING];       
    const char Gy[MAX_ECC_STRING];       
    const ecc_oid_t oid[10];
    word32      oidSz;
    word32      oidSum;    
    int         cofactor;
} ecc_set_type;








    #error USE_FAST_MATH must be defined to use ALT_ECC_SIZE




    
    #if ((MAX_ECC_BITS * 2) % DIGIT_BIT) == 0
        
        #define FP_MAX_BITS_ECC     (MAX_ECC_BITS * 2)
    #else
        
        #define FP_MAX_BITS_ECC     ((MAX_ECC_BITS * 2) + DIGIT_BIT)
    #endif

    
    #if FP_MAX_BITS_ECC % CHAR_BIT
       #error FP_MAX_BITS_ECC must be a multiple of CHAR_BIT
    #endif







typedef struct alt_fp_int {
    int used, sign, size;
    mp_digit dp[FP_SIZE_ECC];
} alt_fp_int;



    typedef struct ecc_key ecc_key;
    #define WC_ECCKEY_TYPE_DEFINED




typedef struct {

    mp_int x[1];        
    mp_int y[1];        
    mp_int z[1];        

    mp_int* x;        
    mp_int* y;        
    mp_int* z;        
    alt_fp_int xyz[3];


    ecc_key* key;

} ecc_point;


enum {
    WC_ECC_FLAG_NONE = 0x00,  WC_ECC_FLAG_COFACTOR = 0x01,  };





struct ecc_key {
    int type;           
    int idx;            
    int    state;
    word32 flags;
    const ecc_set_type* dp;     

    int deallocSet;

    void* heap;         
    ecc_point pubkey;   
    mp_int    k;        

    int  slot;        
    byte pubkey_raw[ECC_MAX_CRYPTO_HW_PUBKEY_SIZE];


    int devId;


    mp_int* r;          
    mp_int* s;
    WC_ASYNC_DEV asyncDev;
    #ifdef HAVE_CAVIUM_V
        mp_int* e;      
        mp_int* signK;
    #endif
    #ifdef WOLFSSL_CERT_GEN
        CertSignCtx certSignCtx; 
    #endif


    byte id[ECC_MAX_ID_LEN];
    int  idLen;


    ecc_context_t ctx;



    mp_int *sign_k;



    mp_int* t1;
    mp_int* t2;

    mp_int* x;
    mp_int* y;
    mp_int* z;




    remote_handle64 handle;

};


WOLFSSL_ABI WOLFSSL_API ecc_key* wc_ecc_key_new(void*);
WOLFSSL_ABI WOLFSSL_API void wc_ecc_key_free(ecc_key*);



extern const ecc_set_type ecc_sets[];

WOLFSSL_API const char* wc_ecc_get_name(int curve_id);




    #define ECC_API    WOLFSSL_API

    #define ECC_API    WOLFSSL_LOCAL


ECC_API int ecc_mul2add(ecc_point* A, mp_int* kA, ecc_point* B, mp_int* kB, ecc_point* C, mp_int* a, mp_int* modulus, void* heap);


ECC_API int ecc_map(ecc_point*, mp_int*, mp_digit);
ECC_API int ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R, mp_int* a, mp_int* modulus, mp_digit mp);
ECC_API int ecc_projective_dbl_point(ecc_point* P, ecc_point* R, mp_int* a, mp_int* modulus, mp_digit mp);



WOLFSSL_API int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key);
WOLFSSL_ABI WOLFSSL_API int wc_ecc_make_key_ex(WC_RNG* rng, int keysize, ecc_key* key, int curve_id);
WOLFSSL_API int wc_ecc_make_pub(ecc_key* key, ecc_point* pubOut);
WOLFSSL_API int wc_ecc_check_key(ecc_key* key);
WOLFSSL_API int wc_ecc_is_point(ecc_point* ecp, mp_int* a, mp_int* b, mp_int* prime);


WOLFSSL_API int wc_ecc_shared_secret(ecc_key* private_key, ecc_key* public_key, byte* out, word32* outlen);

WOLFSSL_LOCAL int wc_ecc_shared_secret_gen(ecc_key* private_key, ecc_point* point, byte* out, word32 *outlen);

WOLFSSL_API int wc_ecc_shared_secret_ex(ecc_key* private_key, ecc_point* point, byte* out, word32 *outlen);











WOLFSSL_ABI WOLFSSL_API int wc_ecc_sign_hash(const byte* in, word32 inlen, byte* out, word32 *outlen, WC_RNG* rng, ecc_key* key);

WOLFSSL_API int wc_ecc_sign_hash_ex(const byte* in, word32 inlen, WC_RNG* rng, ecc_key* key, mp_int *r, mp_int *s);


WOLFSSL_API int wc_ecc_sign_set_k(const byte* k, word32 klen, ecc_key* key);




WOLFSSL_API int wc_ecc_verify_hash(const byte* sig, word32 siglen, const byte* hash, word32 hashlen, int* stat, ecc_key* key);

WOLFSSL_API int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash, word32 hashlen, int* stat, ecc_key* key);



WOLFSSL_API int wc_ecc_init(ecc_key* key);
WOLFSSL_ABI WOLFSSL_API int wc_ecc_init_ex(ecc_key* key, void* heap, int devId);

WOLFSSL_API int wc_ecc_init_id(ecc_key* key, unsigned char* id, int len, void* heap, int devId);



WOLFSSL_LOCAL void wc_ecc_free_curve(const ecc_set_type* curve, void* heap);

WOLFSSL_ABI WOLFSSL_API int wc_ecc_free(ecc_key* key);
WOLFSSL_API int wc_ecc_set_flags(ecc_key* key, word32 flags);
WOLFSSL_API void wc_ecc_fp_free(void);

WOLFSSL_API int wc_ecc_set_curve(ecc_key* key, int keysize, int curve_id);

WOLFSSL_API int wc_ecc_is_valid_idx(int n);
WOLFSSL_API int wc_ecc_get_curve_idx(int curve_id);
WOLFSSL_API int wc_ecc_get_curve_id(int curve_idx);

WOLFSSL_API int wc_ecc_get_curve_size_from_id(int curve_id);

WOLFSSL_API int wc_ecc_get_curve_idx_from_name(const char* curveName);
WOLFSSL_API int wc_ecc_get_curve_size_from_name(const char* curveName);
WOLFSSL_API int wc_ecc_get_curve_id_from_name(const char* curveName);
WOLFSSL_API int wc_ecc_get_curve_id_from_params(int fieldSize, const byte* prime, word32 primeSz, const byte* Af, word32 AfSz, const byte* Bf, word32 BfSz, const byte* order, word32 orderSz, const byte* Gx, word32 GxSz, const byte* Gy, word32 GySz, int cofactor);



WOLFSSL_API int wc_ecc_get_curve_id_from_dp_params(const ecc_set_type* dp);

WOLFSSL_API int wc_ecc_get_curve_id_from_oid(const byte* oid, word32 len);

WOLFSSL_API const ecc_set_type* wc_ecc_get_curve_params(int curve_idx);

WOLFSSL_API ecc_point* wc_ecc_new_point(void);
WOLFSSL_API ecc_point* wc_ecc_new_point_h(void* h);
WOLFSSL_API void wc_ecc_del_point(ecc_point* p);
WOLFSSL_API void wc_ecc_del_point_h(ecc_point* p, void* h);
WOLFSSL_API int wc_ecc_copy_point(ecc_point* p, ecc_point *r);
WOLFSSL_API int wc_ecc_cmp_point(ecc_point* a, ecc_point *b);
WOLFSSL_API int wc_ecc_point_is_at_infinity(ecc_point *p);


WOLFSSL_API int wc_ecc_mulmod(mp_int* k, ecc_point *G, ecc_point *R, mp_int* a, mp_int* modulus, int map);

WOLFSSL_LOCAL int wc_ecc_mulmod_ex(mp_int* k, ecc_point *G, ecc_point *R, mp_int* a, mp_int* modulus, int map, void* heap);






WOLFSSL_API int wc_ecc_export_x963(ecc_key*, byte* out, word32* outLen);
WOLFSSL_API int wc_ecc_export_x963_ex(ecc_key*, byte* out, word32* outLen, int compressed);
    



WOLFSSL_ABI WOLFSSL_API int wc_ecc_import_x963(const byte* in, word32 inLen, ecc_key* key);
WOLFSSL_API int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key, int curve_id);

WOLFSSL_API int wc_ecc_import_private_key(const byte* priv, word32 privSz, const byte* pub, word32 pubSz, ecc_key* key);

WOLFSSL_API int wc_ecc_import_private_key_ex(const byte* priv, word32 privSz, const byte* pub, word32 pubSz, ecc_key* key, int curve_id);

WOLFSSL_API int wc_ecc_rs_to_sig(const char* r, const char* s, byte* out, word32* outlen);
WOLFSSL_API int wc_ecc_rs_raw_to_sig(const byte* r, word32 rSz, const byte* s, word32 sSz, byte* out, word32* outlen);

WOLFSSL_API int wc_ecc_sig_to_rs(const byte* sig, word32 sigLen, byte* r, word32* rLen, byte* s, word32* sLen);

WOLFSSL_API int wc_ecc_import_raw(ecc_key* key, const char* qx, const char* qy, const char* d, const char* curveName);

WOLFSSL_API int wc_ecc_import_raw_ex(ecc_key* key, const char* qx, const char* qy, const char* d, int curve_id);

WOLFSSL_API int wc_ecc_import_unsigned(ecc_key* key, byte* qx, byte* qy, byte* d, int curve_id);




WOLFSSL_API int wc_ecc_export_ex(ecc_key* key, byte* qx, word32* qxLen, byte* qy, word32* qyLen, byte* d, word32* dLen, int encType);


WOLFSSL_API int wc_ecc_export_private_only(ecc_key* key, byte* out, word32* outLen);
WOLFSSL_API int wc_ecc_export_public_raw(ecc_key* key, byte* qx, word32* qxLen, byte* qy, word32* qyLen);

WOLFSSL_API int wc_ecc_export_private_raw(ecc_key* key, byte* qx, word32* qxLen, byte* qy, word32* qyLen, byte* d, word32* dLen);





WOLFSSL_API int wc_ecc_export_point_der(const int curve_idx, ecc_point* point, byte* out, word32* outLen);





WOLFSSL_API int wc_ecc_import_point_der(byte* in, word32 inLen, const int curve_idx, ecc_point* point);




WOLFSSL_API int wc_ecc_size(ecc_key* key);
WOLFSSL_API int wc_ecc_sig_size_calc(int sz);
WOLFSSL_API int wc_ecc_sig_size(ecc_key* key);

WOLFSSL_API int wc_ecc_get_oid(word32 oidSum, const byte** oid, word32* oidSz);


    WOLFSSL_API int wc_ecc_set_custom_curve(ecc_key* key, const ecc_set_type* dp);





enum ecEncAlgo {
    ecAES_128_CBC = 1,   ecAES_256_CBC = 2 };


enum ecKdfAlgo {
    ecHKDF_SHA256 = 1,   ecHKDF_SHA1   = 2 };


enum ecMacAlgo {
    ecHMAC_SHA256 = 1,   ecHMAC_SHA1   = 2 };


enum {
    KEY_SIZE_128     = 16, KEY_SIZE_256     = 32, IV_SIZE_64       =  8, IV_SIZE_128      = 16, EXCHANGE_SALT_SZ = 16, EXCHANGE_INFO_SZ = 23 };






enum ecFlags {
    REQ_RESP_CLIENT = 1, REQ_RESP_SERVER = 2 };



typedef struct ecEncCtx ecEncCtx;

WOLFSSL_API ecEncCtx* wc_ecc_ctx_new(int flags, WC_RNG* rng);
WOLFSSL_API ecEncCtx* wc_ecc_ctx_new_ex(int flags, WC_RNG* rng, void* heap);
WOLFSSL_API void wc_ecc_ctx_free(ecEncCtx*);
WOLFSSL_API int wc_ecc_ctx_reset(ecEncCtx*, WC_RNG*);

WOLFSSL_API const byte* wc_ecc_ctx_get_own_salt(ecEncCtx*);
WOLFSSL_API int wc_ecc_ctx_set_peer_salt(ecEncCtx*, const byte* salt);
WOLFSSL_API int wc_ecc_ctx_set_info(ecEncCtx*, const byte* info, int sz);

WOLFSSL_API int wc_ecc_encrypt(ecc_key* privKey, ecc_key* pubKey, const byte* msg, word32 msgSz, byte* out, word32* outSz, ecEncCtx* ctx);

WOLFSSL_API int wc_ecc_decrypt(ecc_key* privKey, ecc_key* pubKey, const byte* msg, word32 msgSz, byte* out, word32* outSz, ecEncCtx* ctx);





WOLFSSL_API int wc_X963_KDF(enum wc_HashType type, const byte* secret, word32 secretSz, const byte* sinfo, word32 sinfoSz, byte* out, word32 outSz);




WOLFSSL_API int wc_ecc_curve_cache_init(void);
WOLFSSL_API void wc_ecc_curve_cache_free(void);


WOLFSSL_API int wc_ecc_gen_k(WC_RNG* rng, int size, mp_int* k, mp_int* order);


WOLFSSL_API int wc_ecc_set_handle(ecc_key* key, remote_handle64 handle);
WOLFSSL_LOCAL int sp_dsp_ecc_verify_256(remote_handle64 handle, const byte* hash, word32 hashLen, mp_int* pX, mp_int* pY, mp_int* pZ, mp_int* r, mp_int* sm, int* res, void* heap);




    }    




