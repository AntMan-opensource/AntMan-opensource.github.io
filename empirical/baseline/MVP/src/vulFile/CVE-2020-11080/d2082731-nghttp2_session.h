



















extern int nghttp2_enable_strict_preface;


typedef enum {
  NGHTTP2_OPTMASK_NO_AUTO_WINDOW_UPDATE = 1 << 0, NGHTTP2_OPTMASK_NO_RECV_CLIENT_MAGIC = 1 << 1, NGHTTP2_OPTMASK_NO_HTTP_MESSAGING = 1 << 2, NGHTTP2_OPTMASK_NO_AUTO_PING_ACK = 1 << 3, NGHTTP2_OPTMASK_NO_CLOSED_STREAMS = 1 << 4 } nghttp2_optmask;






typedef enum {
  NGHTTP2_TYPEMASK_NONE = 0, NGHTTP2_TYPEMASK_ALTSVC = 1 << 0, NGHTTP2_TYPEMASK_ORIGIN = 1 << 1 } nghttp2_typemask;



typedef enum {
  NGHTTP2_OB_POP_ITEM, NGHTTP2_OB_SEND_DATA, NGHTTP2_OB_SEND_NO_COPY, NGHTTP2_OB_SEND_CLIENT_MAGIC } nghttp2_outbound_state;




typedef struct {
  nghttp2_outbound_item *item;
  nghttp2_bufs framebufs;
  nghttp2_outbound_state state;
} nghttp2_active_outbound_item;

















typedef enum {
  
  NGHTTP2_IB_READ_CLIENT_MAGIC, NGHTTP2_IB_READ_FIRST_SETTINGS, NGHTTP2_IB_READ_HEAD, NGHTTP2_IB_READ_NBYTE, NGHTTP2_IB_READ_HEADER_BLOCK, NGHTTP2_IB_IGN_HEADER_BLOCK, NGHTTP2_IB_IGN_PAYLOAD, NGHTTP2_IB_FRAME_SIZE_ERROR, NGHTTP2_IB_READ_SETTINGS, NGHTTP2_IB_READ_GOAWAY_DEBUG, NGHTTP2_IB_EXPECT_CONTINUATION, NGHTTP2_IB_IGN_CONTINUATION, NGHTTP2_IB_READ_PAD_DATA, NGHTTP2_IB_READ_DATA, NGHTTP2_IB_IGN_DATA, NGHTTP2_IB_IGN_ALL, NGHTTP2_IB_READ_ALTSVC_PAYLOAD, NGHTTP2_IB_READ_ORIGIN_PAYLOAD, NGHTTP2_IB_READ_EXTENSION_PAYLOAD } nghttp2_inbound_state;



















typedef struct {
  nghttp2_frame frame;
  
  nghttp2_ext_frame_payload ext_frame_payload;
  
  nghttp2_settings_entry *iv;
  
  nghttp2_buf sbuf;
  
  nghttp2_buf lbuf;
  
  uint8_t *raw_lbuf;
  
  size_t niv;
  
  size_t max_niv;
  
  size_t payloadleft;
  
  size_t padlen;
  nghttp2_inbound_state state;
  
  uint8_t raw_sbuf[NGHTTP2_FRAME_HDLEN];
} nghttp2_inbound_frame;

typedef struct {
  uint32_t header_table_size;
  uint32_t enable_push;
  uint32_t max_concurrent_streams;
  uint32_t initial_window_size;
  uint32_t max_frame_size;
  uint32_t max_header_list_size;
  uint32_t enable_connect_protocol;
} nghttp2_settings_storage;

typedef enum {
  NGHTTP2_GOAWAY_NONE = 0,  NGHTTP2_GOAWAY_TERM_ON_SEND = 0x1,  NGHTTP2_GOAWAY_TERM_SENT = 0x2,  NGHTTP2_GOAWAY_SENT = 0x4,  NGHTTP2_GOAWAY_RECV = 0x8 } nghttp2_goaway_flag;










struct nghttp2_inflight_settings {
  struct nghttp2_inflight_settings *next;
  nghttp2_settings_entry *iv;
  size_t niv;
};

typedef struct nghttp2_inflight_settings nghttp2_inflight_settings;

struct nghttp2_session {
  nghttp2_map  streams;
  
  nghttp2_stream root;
  
  nghttp2_outbound_queue ob_urgent;
  
  nghttp2_outbound_queue ob_reg;
  
  nghttp2_outbound_queue ob_syn;
  nghttp2_active_outbound_item aob;
  nghttp2_inbound_frame iframe;
  nghttp2_hd_deflater hd_deflater;
  nghttp2_hd_inflater hd_inflater;
  nghttp2_session_callbacks callbacks;
  
  nghttp2_mem mem;
  void *user_data;
  
  nghttp2_stream *closed_stream_head;
  
  nghttp2_stream *closed_stream_tail;
  
  nghttp2_stream *idle_stream_head;
  
  nghttp2_stream *idle_stream_tail;
  
  nghttp2_inflight_settings *inflight_settings_head;
  
  size_t num_outgoing_streams;
  
  size_t num_incoming_streams;
  
  size_t num_incoming_reserved_streams;
  
  size_t max_incoming_reserved_streams;
  
  size_t num_closed_streams;
  
  size_t num_idle_streams;
  
  size_t nvbuflen;
  
  size_t obq_flood_counter_;
  
  size_t max_outbound_ack;
  
  size_t max_send_header_block_length;
  
  uint32_t next_stream_id;
  
  int32_t last_sent_stream_id;
  
  int32_t last_recv_stream_id;
  
  int32_t last_proc_stream_id;
  
  uint32_t next_unique_id;
  
  int32_t local_last_stream_id;
  
  int32_t remote_last_stream_id;
  
  int32_t remote_window_size;
  
  int32_t recv_window_size;
  
  int32_t consumed_size;
  
  int32_t recv_reduction;
  
  int32_t local_window_size;
  
  uint8_t remote_settings_received;
  
  nghttp2_settings_storage remote_settings;
  
  nghttp2_settings_storage local_settings;
  
  uint32_t opt_flags;
  
  uint32_t pending_local_max_concurrent_stream;
  
  uint32_t builtin_recv_ext_types;
  
  uint8_t pending_enable_push;
  
  uint8_t pending_enable_connect_protocol;
  
  uint8_t server;
  
  uint8_t goaway_flags;
  
  uint8_t window_update_queued;
  
  uint8_t user_recv_ext_types[32];
};


typedef struct {
  nghttp2_session *session;
  int32_t new_window_size, old_window_size;
} nghttp2_update_window_size_arg;

typedef struct {
  nghttp2_session *session;
  
  nghttp2_stream *head;
  int32_t last_stream_id;
  
  int incoming;
} nghttp2_close_stream_on_goaway_arg;




int nghttp2_session_is_my_stream_id(nghttp2_session *session, int32_t stream_id);


int nghttp2_session_add_item(nghttp2_session *session, nghttp2_outbound_item *item);


int nghttp2_session_add_rst_stream(nghttp2_session *session, int32_t stream_id, uint32_t error_code);


int nghttp2_session_add_ping(nghttp2_session *session, uint8_t flags, const uint8_t *opaque_data);


int nghttp2_session_add_goaway(nghttp2_session *session, int32_t last_stream_id, uint32_t error_code, const uint8_t *opaque_data, size_t opaque_data_len, uint8_t aux_flags);



int nghttp2_session_add_window_update(nghttp2_session *session, uint8_t flags, int32_t stream_id, int32_t window_size_increment);



int nghttp2_session_add_settings(nghttp2_session *session, uint8_t flags, const nghttp2_settings_entry *iv, size_t niv);


nghttp2_stream *nghttp2_session_open_stream(nghttp2_session *session, int32_t stream_id, uint8_t flags, nghttp2_priority_spec *pri_spec, nghttp2_stream_state initial_state, void *stream_user_data);





int nghttp2_session_close_stream(nghttp2_session *session, int32_t stream_id, uint32_t error_code);


int nghttp2_session_destroy_stream(nghttp2_session *session, nghttp2_stream *stream);


void nghttp2_session_keep_closed_stream(nghttp2_session *session, nghttp2_stream *stream);


void nghttp2_session_keep_idle_stream(nghttp2_session *session, nghttp2_stream *stream);


void nghttp2_session_detach_idle_stream(nghttp2_session *session, nghttp2_stream *stream);


int nghttp2_session_adjust_closed_stream(nghttp2_session *session);


int nghttp2_session_adjust_idle_stream(nghttp2_session *session);


int nghttp2_session_close_stream_if_shut_rdwr(nghttp2_session *session, nghttp2_stream *stream);

int nghttp2_session_on_request_headers_received(nghttp2_session *session, nghttp2_frame *frame);

int nghttp2_session_on_response_headers_received(nghttp2_session *session, nghttp2_frame *frame, nghttp2_stream *stream);


int nghttp2_session_on_push_response_headers_received(nghttp2_session *session, nghttp2_frame *frame, nghttp2_stream *stream);



int nghttp2_session_on_headers_received(nghttp2_session *session, nghttp2_frame *frame, nghttp2_stream *stream);



int nghttp2_session_on_priority_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_rst_stream_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_settings_received(nghttp2_session *session, nghttp2_frame *frame, int noack);


int nghttp2_session_on_push_promise_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_ping_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_goaway_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_window_update_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_altsvc_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_origin_received(nghttp2_session *session, nghttp2_frame *frame);


int nghttp2_session_on_data_received(nghttp2_session *session, nghttp2_frame *frame);


nghttp2_stream *nghttp2_session_get_stream(nghttp2_session *session, int32_t stream_id);


nghttp2_stream *nghttp2_session_get_stream_raw(nghttp2_session *session, int32_t stream_id);


int nghttp2_session_pack_data(nghttp2_session *session, nghttp2_bufs *bufs, size_t datamax, nghttp2_frame *frame, nghttp2_data_aux_data *aux_data, nghttp2_stream *stream);




nghttp2_outbound_item * nghttp2_session_pop_next_ob_item(nghttp2_session *session);


nghttp2_outbound_item * nghttp2_session_get_next_ob_item(nghttp2_session *session);


int nghttp2_session_update_local_settings(nghttp2_session *session, nghttp2_settings_entry *iv, size_t niv);



int nghttp2_session_reprioritize_stream(nghttp2_session *session, nghttp2_stream *stream, const nghttp2_priority_spec *pri_spec);



int nghttp2_session_terminate_session_with_reason(nghttp2_session *session, uint32_t error_code, const char *reason);



int nghttp2_session_update_recv_connection_window_size(nghttp2_session *session, size_t delta_size);


int nghttp2_session_update_recv_stream_window_size(nghttp2_session *session, nghttp2_stream *stream, size_t delta_size, int send_window_update);




