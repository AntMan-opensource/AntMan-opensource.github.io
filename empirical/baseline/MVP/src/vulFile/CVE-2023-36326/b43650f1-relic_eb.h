



















enum {
	
	NIST_B163 = 1,  NIST_K163,  NIST_B233,  NIST_K233,  EBACS_B251,  HALVE_B257,  SECG_K239,  NIST_B283,  NIST_K283,  NIST_B409,  NIST_K409,  NIST_B571,  NIST_K571, };




























































typedef struct {
	
	fb_st x;
	
	fb_st y;
	
	fb_st z;
	
	int coord;
} eb_st;



typedef eb_st eb_t[1];


typedef eb_st *volatile eb_t;

typedef eb_st *eb_t;






















































































































void eb_curve_init(void);


void eb_curve_clean(void);


dig_t *eb_curve_get_a(void);


dig_t *eb_curve_get_b(void);


int eb_curve_opt_a(void);


int eb_curve_opt_b(void);


int eb_curve_is_kbltz(void);


void eb_curve_get_gen(eb_t g);


const eb_t *eb_curve_get_tab(void);


void eb_curve_get_ord(bn_t n);


void eb_curve_get_cof(bn_t h);


void eb_curve_set(const fb_t a, const fb_t b, const eb_t g, const bn_t n, const bn_t h);


void eb_param_set(int param);


int eb_param_set_any(void);


int eb_param_set_any_plain(void);


int eb_param_set_any_kbltz(void);


int eb_param_get(void);


void eb_param_print(void);


int eb_param_level(void);


int eb_is_infty(const eb_t p);


void eb_set_infty(eb_t p);


void eb_copy(eb_t r, const eb_t p);


int eb_cmp(const eb_t p, const eb_t q);


void eb_rand(eb_t p);


void eb_blind(eb_t r, const eb_t p);


void eb_rhs(fb_t rhs, const eb_t p);


int eb_on_curve(const eb_t p);


void eb_tab(eb_t *t, const eb_t p, int w);


void eb_print(const eb_t p);


int eb_size_bin(const eb_t a, int pack);


void eb_read_bin(eb_t a, const uint8_t *bin, int len);


void eb_write_bin(uint8_t *bin, int len, const eb_t a, int pack);


void eb_neg_basic(eb_t r, const eb_t p);


void eb_neg_projc(eb_t r, const eb_t p);


void eb_add_basic(eb_t r, const eb_t p, const eb_t q);


void eb_add_projc(eb_t r, const eb_t p, const eb_t q);


void eb_sub_basic(eb_t r, const eb_t p, const eb_t q);


void eb_sub_projc(eb_t r, const eb_t p, const eb_t q);


void eb_dbl_basic(eb_t r, const eb_t p);


void eb_dbl_projc(eb_t r, const eb_t p);


void eb_hlv(eb_t r, const eb_t p);


void eb_frb(eb_t r, const eb_t p);


void eb_mul_basic(eb_t r, const eb_t p, const bn_t k);


void eb_mul_lodah(eb_t r, const eb_t p, const bn_t k);


void eb_mul_lwnaf(eb_t r, const eb_t p, const bn_t k);


void eb_mul_rwnaf(eb_t r, const eb_t p, const bn_t k);


void eb_mul_halve(eb_t r, const eb_t p, const bn_t k);


void eb_mul_gen(eb_t r, const bn_t k);


void eb_mul_dig(eb_t r, const eb_t p, const dig_t k);


void eb_mul_pre_basic(eb_t *t, const eb_t p);


void eb_mul_pre_yaowi(eb_t *t, const eb_t p);


void eb_mul_pre_nafwi(eb_t *t, const eb_t p);


void eb_mul_pre_combs(eb_t *t, const eb_t p);


void eb_mul_pre_combd(eb_t *t, const eb_t p);


void eb_mul_pre_lwnaf(eb_t *t, const eb_t p);


void eb_mul_fix_basic(eb_t r, const eb_t *t, const bn_t k);


void eb_mul_fix_yaowi(eb_t r, const eb_t *t, const bn_t k);


void eb_mul_fix_nafwi(eb_t r, const eb_t *t, const bn_t k);


void eb_mul_fix_combs(eb_t r, const eb_t *t, const bn_t k);


void eb_mul_fix_combd(eb_t r, const eb_t *t, const bn_t k);


void eb_mul_fix_lwnaf(eb_t r, const eb_t *t, const bn_t k);


void eb_mul_sim_basic(eb_t r, const eb_t p, const bn_t k, const eb_t q, const bn_t m);


void eb_mul_sim_trick(eb_t r, const eb_t p, const bn_t k, const eb_t q, const bn_t m);


void eb_mul_sim_inter(eb_t r, const eb_t p, const bn_t k, const eb_t q, const bn_t m);


void eb_mul_sim_joint(eb_t r, const eb_t p, const bn_t k, const eb_t q, const bn_t m);


void eb_mul_sim_gen(eb_t r, const bn_t k, const eb_t q, const bn_t m);


void eb_norm(eb_t r, const eb_t p);


void eb_norm_sim(eb_t *r, const eb_t *t, int n);


void eb_map(eb_t p, const uint8_t *msg, int len);


void eb_pck(eb_t r, const eb_t p);


int eb_upk(eb_t r, const eb_t p);


