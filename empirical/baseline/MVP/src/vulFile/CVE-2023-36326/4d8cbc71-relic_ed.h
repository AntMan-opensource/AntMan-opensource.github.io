


















enum {
	
	CURVE_ED25519 = 1 };







































typedef struct {
	
	fp_st x;
	
	fp_st y;
	
	fp_st z;

	
	fp_st t;

	
	int coord;
} ed_st;



typedef ed_st ed_t[1];


typedef ed_st *volatile ed_t;

typedef ed_st *ed_t;










































































void ed_param_set(int param);


int ed_param_set_any(void);


int ed_param_get(void);


void ed_curve_get_ord(bn_t r);


void ed_curve_get_gen(ed_t g);


const ed_t *ed_curve_get_tab(void);


void ed_curve_get_cof(bn_t h);


void ed_param_print(void);


int ed_param_level(void);



void ed_projc_to_extnd(ed_t r, const fp_t x, const fp_t y, const fp_t z);



void ed_rand(ed_t p);


void ed_blind(ed_t r, const ed_t p);


void ed_rhs(fp_t rhs, const ed_t p);


void ed_copy(ed_t r, const ed_t p);


int ed_cmp(const ed_t p, const ed_t q);


void ed_set_infty(ed_t p);


int ed_is_infty(const ed_t p);


void ed_neg_basic(ed_t r, const ed_t p);


void ed_neg_projc(ed_t r, const ed_t p);


void ed_add_basic(ed_t r, const ed_t p, const ed_t q);


void ed_add_projc(ed_t r, const ed_t p, const ed_t q);


void ed_add_extnd(ed_t r, const ed_t p, const ed_t q);


void ed_sub_basic(ed_t r, const ed_t p, const ed_t q);


void ed_sub_projc(ed_t r, const ed_t p, const ed_t q);


void ed_sub_extnd(ed_t r, const ed_t p, const ed_t q);


void ed_dbl_basic(ed_t r, const ed_t p);


void ed_dbl_projc(ed_t r, const ed_t p);


void ed_dbl_extnd(ed_t r, const ed_t p);


void ed_norm(ed_t r, const ed_t p);


void ed_norm_sim(ed_t *r, const ed_t *t, int n);


void ed_map(ed_t p, const uint8_t *msg, int len);


void ed_map_dst(ed_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);




































 















void ed_curve_init(void);


void ed_curve_clean(void);


void ed_mul_pre_basic(ed_t *t, const ed_t p);


void ed_mul_pre_yaowi(ed_t *t, const ed_t p);


void ed_mul_pre_nafwi(ed_t *t, const ed_t p);


void ed_mul_pre_combs(ed_t *t, const ed_t p);


void ed_mul_pre_combd(ed_t *t, const ed_t p);


void ed_mul_pre_lwnaf(ed_t *t, const ed_t p);


void ed_mul_fix_basic(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_fix_yaowi(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_fix_nafwi(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_fix_combs(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_fix_combd(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_fix_lwnaf(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_fix_lwnaf_mixed(ed_t r, const ed_t *t, const bn_t k);


void ed_mul_gen(ed_t r, const bn_t k);


void ed_mul_dig(ed_t r, const ed_t p, dig_t k);


void ed_mul_sim_basic(ed_t r, const ed_t p, const bn_t k, const ed_t q, const bn_t m);


void ed_mul_sim_trick(ed_t r, const ed_t p, const bn_t k, const ed_t q, const bn_t m);


void ed_mul_sim_inter(ed_t r, const ed_t p, const bn_t k, const ed_t q, const bn_t m);


void ed_mul_sim_joint(ed_t r, const ed_t p, const bn_t k, const ed_t q, const bn_t m);


void ed_mul_sim_lot(ed_t r, const ed_t p[], const bn_t k[], int n);


void ed_mul_sim_gen(ed_t r, const bn_t k, const ed_t q, const bn_t m);


void ed_tab(ed_t *t, const ed_t p, int w);


void ed_print(const ed_t p);


int ed_on_curve(const ed_t p);


int ed_size_bin(const ed_t a, int pack);


void ed_read_bin(ed_t a, const uint8_t *bin, int len);


void ed_write_bin(uint8_t *bin, int len, const ed_t a, int pack);


void ed_mul_basic(ed_t r, const ed_t p, const bn_t k);


void ed_mul_slide(ed_t r, const ed_t p, const bn_t k);


void ed_mul_monty(ed_t r, const ed_t p, const bn_t k);


void ed_mul_lwnaf(ed_t r, const ed_t p, const bn_t k);


void ed_mul_lwreg(ed_t r, const ed_t p, const bn_t k);


void ed_pck(ed_t r, const ed_t p);


int ed_upk(ed_t r, const ed_t p);


