










































































using ::rtl::OUString;
using namespace ::sd;
using namespace ::com::sun::star;
using namespace ::com::sun::star::uno;
using namespace ::com::sun::star::lang;
using namespace ::com::sun::star::linguistic2;



TYPEINIT1( SdDrawDocument, FmFormModel );

SdDrawDocument* SdDrawDocument::pDocLockedInsertingLinks = NULL;



PresentationSettings::PresentationSettings()
:	mbAll( true ), mbEndless( false ), mbCustomShow(false), mbManual( false ), mbMouseVisible( false ), mbMouseAsPen( false ), mbLockedPages( false ), mbAlwaysOnTop( false ), mbFullScreen( true ), mbAnimationAllowed( true ), mnPauseTimeout( 10 ), mbShowPauseLogo( false ), mbStartWithNavigator(false)











{
}



PresentationSettings::PresentationSettings( const PresentationSettings& r )
:	maPresPage( r.maPresPage ), mbAll( r.mbAll ), mbEndless( r.mbEndless ), mbCustomShow( r.mbCustomShow ), mbManual( r.mbManual ), mbMouseVisible( r.mbMouseVisible ), mbMouseAsPen( r.mbMouseAsPen ), mbLockedPages( r.mbLockedPages ), mbAlwaysOnTop( r.mbAlwaysOnTop ), mbFullScreen( r.mbFullScreen ), mbAnimationAllowed( r.mbAnimationAllowed ), mnPauseTimeout( r.mnPauseTimeout ), mbShowPauseLogo( r.mbShowPauseLogo ), mbStartWithNavigator( r.mbStartWithNavigator )












{
}



SdDrawDocument::SdDrawDocument(DocumentType eType, SfxObjectShell* pDrDocSh)
: FmFormModel( SvtPathOptions().GetPalettePath(), NULL, pDrDocSh )
, bReadOnly(sal_False)
, mpOutliner(NULL)
, mpInternalOutliner(NULL)
, mpWorkStartupTimer(NULL)
, mpOnlineSpellingTimer(NULL)
, mpOnlineSpellingList(NULL)
, mpOnlineSearchItem(NULL)
, mpFrameViewList( new List() )
, mpCustomShowList(NULL)
, mpDocSh(static_cast< ::sd::DrawDocShell*>(pDrDocSh))
, mpCreatingTransferable( NULL )
, mbHasOnlineSpellErrors(sal_False)
, mbInitialOnlineSpellingEnabled(sal_True)
, mbNewOrLoadCompleted(sal_False)
, mbStartWithPresentation( false )
, meLanguage( LANGUAGE_SYSTEM )
, meLanguageCJK( LANGUAGE_SYSTEM )
, meLanguageCTL( LANGUAGE_SYSTEM )
, mePageNumType(SVX_ARABIC)
, mbAllocDocSh(sal_False)
, meDocType(eType)
, mpCharClass(NULL)
, mpLocale(NULL)
, mpDrawPageListWatcher(0)
, mpMasterPageListWatcher(0)
{
	
	mpDrawPageListWatcher = ::std::auto_ptr<ImpDrawPageListWatcher>( new ImpDrawPageListWatcher(*this));
	mpMasterPageListWatcher = ::std::auto_ptr<ImpMasterPageListWatcher>( new ImpMasterPageListWatcher(*this));

	SetObjectShell(pDrDocSh);		

	if (mpDocSh)
	{
		SetSwapGraphics(sal_True);
	}

	
	sal_Int32 nX, nY;
	SdOptions* pOptions = SD_MOD()->GetSdOptions(meDocType);
	pOptions->GetScale( nX, nY );

    
    if( eType == DOCUMENT_TYPE_DRAW )
        SetUIUnit( (FieldUnit)pOptions->GetMetric(), Fraction( nX, nY ) );	
    else SetUIUnit( (FieldUnit)pOptions->GetMetric(), Fraction( 1, 1 ) );

	SetScaleUnit(MAP_100TH_MM);
	SetScaleFraction(Fraction(1, 1));
	SetDefaultFontHeight(847);     

	pItemPool->SetDefaultMetric(SFX_MAPUNIT_100TH_MM);
	pItemPool->FreezeIdRanges();
	SetTextDefaults();

	
	FmFormModel::SetStyleSheetPool( new SdStyleSheetPool( GetPool(), this ) );

	
	
	
	
	SdrOutliner& rOutliner = GetDrawOutliner();
	rOutliner.SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());
	SetCalcFieldValueHdl( &rOutliner );

	
	{
        const SvtLinguConfig    aLinguConfig;
		SvtLinguOptions			aOptions;
		aLinguConfig.GetOptions( aOptions );

		SetLanguage( MsLangId::resolveSystemLanguageByScriptType(aOptions.nDefaultLanguage, ::com::sun::star::i18n::ScriptType::LATIN), EE_CHAR_LANGUAGE );
		SetLanguage( MsLangId::resolveSystemLanguageByScriptType(aOptions.nDefaultLanguage_CJK, ::com::sun::star::i18n::ScriptType::ASIAN), EE_CHAR_LANGUAGE_CJK );
		SetLanguage( MsLangId::resolveSystemLanguageByScriptType(aOptions.nDefaultLanguage_CTL, ::com::sun::star::i18n::ScriptType::COMPLEX), EE_CHAR_LANGUAGE_CTL );

		mbOnlineSpell = aOptions.bIsSpellAuto;
	}

	LanguageType eRealLanguage = MsLangId::getRealLanguage( meLanguage );
	mpLocale = new ::com::sun::star::lang::Locale( MsLangId::convertLanguageToLocale( eRealLanguage ));
	mpCharClass = new CharClass( *mpLocale );

	
	LanguageType eRealCTLLanguage = Application::GetSettings().GetLanguage();
	if( MsLangId::isRightToLeft( eRealCTLLanguage ) )
	{
		
		SetDefaultWritingMode( ::com::sun::star::text::WritingMode_RL_TB );
	}

	
	if( ( LANGUAGE_KOREAN  == eRealCTLLanguage ) || ( LANGUAGE_KOREAN_JOHAB == eRealCTLLanguage ) || ( LANGUAGE_JAPANESE == eRealCTLLanguage ) )
	{
        GetPool().GetSecondaryPool()->SetPoolDefaultItem( SvxScriptSpaceItem( sal_False, EE_PARA_ASIANCJKSPACING ) );
	}

	
	
	sal_uInt16 nDefTab = pOptions->GetDefTab();
	SetDefaultTabulator( nDefTab );

	try {
	    Reference< XSpellChecker1 > xSpellChecker( LinguMgr::GetSpellChecker() );
	    if ( xSpellChecker.is() )
		    rOutliner.SetSpeller( xSpellChecker );

	    Reference< XHyphenator > xHyphenator( LinguMgr::GetHyphenator() );
	    if( xHyphenator.is() )
		    rOutliner.SetHyphenator( xHyphenator );

		SetForbiddenCharsTable( new SvxForbiddenCharactersTable( ::comphelper::getProcessServiceFactory() ) );
	}
	catch(...)
	{
		DBG_ERROR("Can't get SpellChecker");
	}

	rOutliner.SetDefaultLanguage( Application::GetSettings().GetLanguage() );

	if (mpDocSh)
	{
		SetLinkManager( new sfx2::LinkManager(mpDocSh) );
	}

	sal_uLong nCntrl = rOutliner.GetControlWord();
	nCntrl |= EE_CNTRL_ALLOWBIGOBJS;
	nCntrl |= EE_CNTRL_URLSFXEXECUTE;

	if (mbOnlineSpell)
		nCntrl |= EE_CNTRL_ONLINESPELLING;
	else nCntrl &= ~EE_CNTRL_ONLINESPELLING;

	nCntrl &= ~ EE_CNTRL_ULSPACESUMMATION;
    if ( meDocType != DOCUMENT_TYPE_IMPRESS )
        SetSummationOfParagraphs( sal_False );
    else {
        SetSummationOfParagraphs( pOptions->IsSummationOfParagraphs() );
    	if ( pOptions->IsSummationOfParagraphs() )
	    	nCntrl |= EE_CNTRL_ULSPACESUMMATION;
    }
	rOutliner.SetControlWord(nCntrl);

    
    SetPrinterIndependentLayout (pOptions->GetPrinterIndependentLayout());

	
	
	
	
	SfxItemSet aSet2( pHitTestOutliner->GetEmptyItemSet() );
	pHitTestOutliner->SetStyleSheetPool( (SfxStyleSheetPool*)GetStyleSheetPool() );

	SetCalcFieldValueHdl( pHitTestOutliner );

	try {
	    Reference< XSpellChecker1 > xSpellChecker( LinguMgr::GetSpellChecker() );
	    if ( xSpellChecker.is() )
		    pHitTestOutliner->SetSpeller( xSpellChecker );

	    Reference< XHyphenator > xHyphenator( LinguMgr::GetHyphenator() );
	    if( xHyphenator.is() )
		    pHitTestOutliner->SetHyphenator( xHyphenator );
	}
	catch(...)
	{
		DBG_ERROR("Can't get SpellChecker");
	}

	pHitTestOutliner->SetDefaultLanguage( Application::GetSettings().GetLanguage() );

	sal_uLong nCntrl2 = pHitTestOutliner->GetControlWord();
	nCntrl2 |= EE_CNTRL_ALLOWBIGOBJS;
	nCntrl2 |= EE_CNTRL_URLSFXEXECUTE;
	nCntrl2 &= ~EE_CNTRL_ONLINESPELLING;

	nCntrl2 &= ~ EE_CNTRL_ULSPACESUMMATION;
	if ( pOptions->IsSummationOfParagraphs() )
		nCntrl2 |= EE_CNTRL_ULSPACESUMMATION;

	pHitTestOutliner->SetControlWord( nCntrl2 );

	
	{
		String aControlLayerName( SdResId(STR_LAYER_CONTROLS) );

		SdrLayerAdmin& rLayerAdmin = GetLayerAdmin();
		rLayerAdmin.NewLayer( String(SdResId(STR_LAYER_LAYOUT)) );
		rLayerAdmin.NewLayer( String(SdResId(STR_LAYER_BCKGRND)) );
		rLayerAdmin.NewLayer( String(SdResId(STR_LAYER_BCKGRNDOBJ)) );
		rLayerAdmin.NewLayer( aControlLayerName );
		rLayerAdmin.NewLayer( String(SdResId(STR_LAYER_MEASURELINES)) );

		rLayerAdmin.SetControlLayerName(aControlLayerName);
	}


}



SdDrawDocument::~SdDrawDocument()
{
	Broadcast(SdrHint(HINT_MODELCLEARED));

	if (mpWorkStartupTimer)
	{
		if ( mpWorkStartupTimer->IsActive() )
			mpWorkStartupTimer->Stop();

		delete mpWorkStartupTimer;
		mpWorkStartupTimer = NULL;
	}

	StopOnlineSpelling();
	delete mpOnlineSearchItem;
	mpOnlineSearchItem = NULL;

	CloseBookmarkDoc();
	SetAllocDocSh(sal_False);

	
	ClearModel(sal_True);

	if (pLinkManager)
	{
		
		if ( pLinkManager->GetLinks().Count() )
		{
			pLinkManager->Remove( 0, pLinkManager->GetLinks().Count() );
		}

		delete pLinkManager;
		pLinkManager = NULL;
	}

	::sd::FrameView* pFrameView = NULL;

	for (sal_uLong i = 0; i < mpFrameViewList->Count(); i++)
	{
		
		pFrameView = static_cast< ::sd::FrameView*>(mpFrameViewList->GetObject(i));

		if (pFrameView)
			delete pFrameView;
	}

	delete mpFrameViewList;
	mpFrameViewList = NULL;

	if (mpCustomShowList)
	{
		for (sal_uLong j = 0; j < mpCustomShowList->Count(); j++)
		{
			
			SdCustomShow* pCustomShow = (SdCustomShow*) mpCustomShowList->GetObject(j);
			delete pCustomShow;
		}

		delete mpCustomShowList;
		mpCustomShowList = NULL;
	}

	delete mpOutliner;
	mpOutliner = NULL;

	delete mpInternalOutliner;
	mpInternalOutliner = NULL;

	delete mpLocale;
	mpLocale = NULL;

	delete mpCharClass;
	mpCharClass = NULL;
}



SdrModel* SdDrawDocument::AllocModel() const {
	SdDrawDocument* pNewModel = NULL;

	if( mpCreatingTransferable )
	{
		
        SfxObjectShell*   pObj = NULL;
		::sd::DrawDocShell*		pNewDocSh = NULL;

    	if( meDocType == DOCUMENT_TYPE_IMPRESS )
    		mpCreatingTransferable->SetDocShell( new ::sd::DrawDocShell( SFX_CREATE_MODE_EMBEDDED, sal_True, meDocType ) );
		else mpCreatingTransferable->SetDocShell( new ::sd::GraphicDocShell( SFX_CREATE_MODE_EMBEDDED, sal_True, meDocType ) );


        pNewDocSh = static_cast< ::sd::DrawDocShell*>( pObj = mpCreatingTransferable->GetDocShell() );
		pNewDocSh->DoInitNew( NULL );
		pNewModel = pNewDocSh->GetDoc();

		
		
		SdStyleSheetPool* pOldStylePool = (SdStyleSheetPool*) GetStyleSheetPool();
		SdStyleSheetPool* pNewStylePool = (SdStyleSheetPool*) pNewModel->GetStyleSheetPool();

		pNewStylePool->CopyGraphicSheets(*pOldStylePool);
		pNewStylePool->CopyCellSheets(*pOldStylePool);
		pNewStylePool->CopyTableStyles(*pOldStylePool);


		for (sal_uInt16 i = 0; i < GetMasterSdPageCount(PK_STANDARD); i++)
		{
			
			String aOldLayoutName(((SdDrawDocument*) this)->GetMasterSdPage(i, PK_STANDARD)->GetLayoutName());
			aOldLayoutName.Erase( aOldLayoutName.SearchAscii( SD_LT_SEPARATOR ) );
			SdStyleSheetVector aCreatedSheets;
			pNewStylePool->CopyLayoutSheets(aOldLayoutName, *pOldStylePool, aCreatedSheets );
		}

		pNewModel->NewOrLoadCompleted( DOC_LOADED );  
	}
	else if( mbAllocDocSh )
	{
		
		SdDrawDocument* pDoc = (SdDrawDocument*) this;
		pDoc->SetAllocDocSh(sal_False);
		pDoc->mxAllocedDocShRef = new ::sd::DrawDocShell( SFX_CREATE_MODE_EMBEDDED, sal_True, meDocType);
		pDoc->mxAllocedDocShRef->DoInitNew(NULL);
		pNewModel = pDoc->mxAllocedDocShRef->GetDoc();
	}
	else {
		pNewModel = new SdDrawDocument(meDocType, NULL);
	}

	return pNewModel;
}



SdrPage* SdDrawDocument::AllocPage(FASTBOOL bMasterPage)
{
	return new SdPage(*this, NULL, (sal_Bool)bMasterPage);
}



void SdDrawDocument::SetChanged(sal_Bool bFlag)
{
	if (mpDocSh)
	{
		if (mbNewOrLoadCompleted && mpDocSh->IsEnableSetModified())
		{
			
			FmFormModel::SetChanged(bFlag);

			
			mpDocSh->SetModified(bFlag);
		}
	}
	else {
		
		FmFormModel::SetChanged(bFlag);
	}
}



void SdDrawDocument::NbcSetChanged(sal_Bool bFlag)
{
    
    FmFormModel::SetChanged(bFlag);
}



void SdDrawDocument::NewOrLoadCompleted(DocCreationMode eMode)
{
	if (eMode == NEW_DOC)
	{
		
		
		
		CreateLayoutTemplates();
		CreateDefaultCellStyles();

		static_cast< SdStyleSheetPool* >( mxStyleSheetPool.get() )->CreatePseudosIfNecessary();
	}
	else if (eMode == DOC_LOADED)
	{
			

		CheckMasterPages();

		if ( GetMasterSdPageCount(PK_STANDARD) > 1 )
			RemoveUnnecessaryMasterPages( NULL, sal_True, sal_False );

		for ( sal_uInt16 i = 0; i < GetPageCount(); i++ )
		{
			
			SdPage* pPage = (SdPage*) GetPage( i );

			if(pPage->TRG_HasMasterPage())
			{
				SdPage& rMaster = (SdPage&)pPage->TRG_GetMasterPage();

				if(rMaster.GetLayoutName() != pPage->GetLayoutName())
				{
					pPage->SetLayoutName(rMaster.GetLayoutName());
				}
			}
		}

		for ( sal_uInt16 nPage = 0; nPage < GetMasterPageCount(); nPage++)
		{
			
			SdPage* pPage = (SdPage*) GetMasterPage( nPage );

			String aName( pPage->GetLayoutName() );
			aName.Erase( aName.SearchAscii( SD_LT_SEPARATOR ) );

			if( aName != pPage->GetName() )
				pPage->SetName( aName );
		}

		
		RestoreLayerNames();

		
		static_cast<SdStyleSheetPool*>(mxStyleSheetPool.get())->UpdateStdNames();

		
		static_cast<SdStyleSheetPool*>(mxStyleSheetPool.get())->CreatePseudosIfNecessary();
	}

	
	String aName( SdResId(STR_STANDARD_STYLESHEET_NAME));
	SetDefaultStyleSheet(static_cast<SfxStyleSheet*>(mxStyleSheetPool->Find(aName, SD_STYLE_FAMILY_GRAPHICS)));

    
	SetDefaultStyleSheetForSdrGrafObjAndSdrOle2Obj(static_cast<SfxStyleSheet*>(mxStyleSheetPool->Find(String( SdResId(STR_POOLSHEET_OBJNOLINENOFILL)), SD_STYLE_FAMILY_GRAPHICS)));

	
	
	
	::Outliner& rDrawOutliner = GetDrawOutliner();
	rDrawOutliner.SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());
	sal_uLong nCntrl = rDrawOutliner.GetControlWord();
	if (mbOnlineSpell)
		nCntrl |= EE_CNTRL_ONLINESPELLING;
	else nCntrl &= ~EE_CNTRL_ONLINESPELLING;
	rDrawOutliner.SetControlWord(nCntrl);

	
	
	
	pHitTestOutliner->SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());

	if(mpOutliner)
	{
		mpOutliner->SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());
	}
	if(mpInternalOutliner)
	{
		mpInternalOutliner->SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());
	}

	if ( eMode == DOC_LOADED )
	{
		
		
		SdStyleSheetPool* pSPool = (SdStyleSheetPool*) GetStyleSheetPool();
		sal_uInt16 nPage, nPageCount;

		
		
		nPageCount = GetMasterSdPageCount( PK_STANDARD );
		for (nPage = 0; nPage < nPageCount; nPage++)
		{
			SdPage* pPage = GetMasterSdPage(nPage, PK_STANDARD);
			pSPool->CreateLayoutStyleSheets( pPage->GetName(), sal_True );
		}

		
		for (nPage = 0; nPage < GetPageCount(); nPage++)
		{
			SdPage* pPage = (SdPage*)GetPage(nPage);
			NewOrLoadCompleted( pPage, pSPool );
		}

		
		for (nPage = 0; nPage < GetMasterPageCount(); nPage++)
		{
			SdPage* pPage = (SdPage*)GetMasterPage(nPage);

			NewOrLoadCompleted( pPage, pSPool );
		}
	}

	mbNewOrLoadCompleted = sal_True;

	
	SdPage* pPage = NULL;
	sal_uInt16 nMaxSdPages = GetSdPageCount(PK_STANDARD);

	for (sal_uInt16 nSdPage=0; nSdPage < nMaxSdPages; nSdPage++)
	{
		pPage = (SdPage*) GetSdPage(nSdPage, PK_STANDARD);

		if (pPage && pPage->GetFileName().Len() && pPage->GetBookmarkName().Len())
		{
			pPage->SetModel(this);
		}
	}

	UpdateAllLinks();

	SetChanged( sal_False );
}


void SdDrawDocument::UpdateAllLinks()
{
	if ( !pDocLockedInsertingLinks && pLinkManager && pLinkManager->GetLinks().Count() )
	{
		pDocLockedInsertingLinks = this; 

		pLinkManager->UpdateAllLinks();  

		if( pDocLockedInsertingLinks == this )
			pDocLockedInsertingLinks = NULL;  
	}
}


void SdDrawDocument::NewOrLoadCompleted( SdPage* pPage, SdStyleSheetPool* pSPool )
{


	const sd::ShapeList& rPresentationShapes( pPage->GetPresentationShapeList() );
	if(!rPresentationShapes.isEmpty())
	{
		
		String aName = pPage->GetLayoutName();
		aName.Erase( aName.SearchAscii( SD_LT_SEPARATOR ));

		List* pOutlineList = pSPool->CreateOutlineSheetList(aName);
		SfxStyleSheet* pTitleSheet = (SfxStyleSheet*)
										pSPool->GetTitleSheet(aName);

		SdrObject* pObj = rPresentationShapes.getNextShape(0);

		
		
		while(pObj)
		{
			if (pObj->GetObjInventor() == SdrInventor)
			{
				OutlinerParaObject* pOPO = pObj->GetOutlinerParaObject();
				sal_uInt16 nId = pObj->GetObjIdentifier();

				if (nId == OBJ_TITLETEXT)
				{
					if( pOPO && pOPO->GetOutlinerMode() == OUTLINERMODE_DONTKNOW )
						pOPO->SetOutlinerMode( OUTLINERMODE_TITLEOBJECT );

					
					if (pTitleSheet)
						pObj->SetStyleSheet(pTitleSheet, sal_True);
				}
				else if (nId == OBJ_OUTLINETEXT)
				{
					if( pOPO && pOPO->GetOutlinerMode() == OUTLINERMODE_DONTKNOW )
						pOPO->SetOutlinerMode( OUTLINERMODE_OUTLINEOBJECT );

					for (sal_uInt16 nSheet = 0; nSheet < 10; nSheet++)
					{
						SfxStyleSheet* pSheet = (SfxStyleSheet*)pOutlineList->GetObject(nSheet);
						if (pSheet)
						{
							pObj->StartListening(*pSheet);

							if( nSheet == 0)
								
								pObj->NbcSetStyleSheet(pSheet, sal_True);
						}
					}
				}

				if (pObj->ISA(SdrTextObj) && pObj->IsEmptyPresObj() && pPage)
				{
					PresObjKind ePresObjKind = pPage->GetPresObjKind(pObj);
					String aString( pPage->GetPresObjText(ePresObjKind) );

					if (aString.Len())
					{
						sd::Outliner* pInternalOutl = GetInternalOutliner(sal_True);
						pPage->SetObjText( (SdrTextObj*) pObj, pInternalOutl, ePresObjKind, aString );
						pObj->NbcSetStyleSheet( pPage->GetStyleSheetForPresObj( ePresObjKind ), sal_True );
						pInternalOutl->Clear();
					}
				}
			}

			pObj = rPresentationShapes.getNextShape(pObj);
		}

		delete pOutlineList;
	}
}



::sd::Outliner* SdDrawDocument::GetOutliner(sal_Bool bCreateOutliner)
{
	if (!mpOutliner && bCreateOutliner)
	{
		mpOutliner = new ::sd::Outliner( this, OUTLINERMODE_TEXTOBJECT );

		if (mpDocSh)
			mpOutliner->SetRefDevice( SD_MOD()->GetRefDevice( *mpDocSh ) );

		mpOutliner->SetDefTab( nDefaultTabulator );
		mpOutliner->SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());
	}

	return(mpOutliner);
}




::sd::Outliner* SdDrawDocument::GetInternalOutliner(sal_Bool bCreateOutliner)
{
	if ( !mpInternalOutliner && bCreateOutliner )
	{
		mpInternalOutliner = new ::sd::Outliner( this, OUTLINERMODE_TEXTOBJECT );
		
		
		
		
		mpInternalOutliner->SetUpdateMode( sal_False );
		mpInternalOutliner->EnableUndo( sal_False );

		if (mpDocSh)
			mpInternalOutliner->SetRefDevice( SD_MOD()->GetRefDevice( *mpDocSh ) );

		mpInternalOutliner->SetDefTab( nDefaultTabulator );
		mpInternalOutliner->SetStyleSheetPool((SfxStyleSheetPool*)GetStyleSheetPool());
	}

	DBG_ASSERT( !mpInternalOutliner || ( mpInternalOutliner->GetUpdateMode() == sal_False ) , "InternalOutliner: UpdateMode = sal_True !" );
	DBG_ASSERT( !mpInternalOutliner || ( mpInternalOutliner->IsUndoEnabled() == sal_False ), "InternalOutliner: Undo = sal_True !" );

	
	
	
	
	DBG_ASSERT( !mpInternalOutliner || ( ( mpInternalOutliner->GetParagraphCount() == 1 ) && ( mpInternalOutliner->GetText( mpInternalOutliner->GetParagraph( 0 ) ).Len() == 0 ) ), "InternalOutliner: Nicht leer!" );

	return mpInternalOutliner;
}



void SdDrawDocument::SetOnlineSpell(sal_Bool bIn)
{
	mbOnlineSpell = bIn;
	sal_uLong nCntrl = 0;

	if(mpOutliner)
	{
		nCntrl = mpOutliner->GetControlWord();

		if(mbOnlineSpell)
			nCntrl |= EE_CNTRL_ONLINESPELLING;
		else nCntrl &= ~EE_CNTRL_ONLINESPELLING;

		mpOutliner->SetControlWord(nCntrl);
	}

	if (mpInternalOutliner)
	{
		nCntrl = mpInternalOutliner->GetControlWord();

		if (mbOnlineSpell)
			nCntrl |= EE_CNTRL_ONLINESPELLING;
		else nCntrl &= ~EE_CNTRL_ONLINESPELLING;

		mpInternalOutliner->SetControlWord(nCntrl);
	}

	::Outliner& rOutliner = GetDrawOutliner();

	nCntrl = rOutliner.GetControlWord();

	if (mbOnlineSpell)
		nCntrl |= EE_CNTRL_ONLINESPELLING;
	else nCntrl &= ~EE_CNTRL_ONLINESPELLING;

	rOutliner.SetControlWord(nCntrl);

	if (mbOnlineSpell)
	{
		StartOnlineSpelling();
	}
	else {
		StopOnlineSpelling();
	}
}




uno::Reference< uno::XInterface > SdDrawDocument::createUnoModel()
{
	uno::Reference< uno::XInterface > xModel;

	try {
		if ( mpDocSh )
			xModel = mpDocSh->GetModel();
	}
	catch( uno::RuntimeException& )
	{
	}

	return xModel;
}

SvxNumType SdDrawDocument::GetPageNumType() const {
	return mePageNumType;
}




void SdDrawDocument::SetPrinterIndependentLayout (sal_Int32 nMode)
{
	
    

	switch (nMode)
    {
        case ::com::sun::star::document::PrinterIndependentLayout::DISABLED:
        case ::com::sun::star::document::PrinterIndependentLayout::ENABLED:
            
            mnPrinterIndependentLayout = nMode;

			
			
			
			
			if(mpDocSh)
			{
				mpDocSh->UpdateRefDevice ();
			}

            break;

        default:
            
            break;
    }
}

sal_Int32 SdDrawDocument::GetPrinterIndependentLayout (void)
{
    return mnPrinterIndependentLayout;
}

bool SdDrawDocument::IsStartWithPresentation() const {
	return mbStartWithPresentation;
}

void SdDrawDocument::SetStartWithPresentation( bool bStartWithPresentation )
{
	mbStartWithPresentation = bStartWithPresentation;
}


void SdDrawDocument::PageListChanged()
{
	mpDrawPageListWatcher->Invalidate();
}


void SdDrawDocument::MasterPageListChanged()
{
	mpMasterPageListWatcher->Invalidate();
}

void SdDrawDocument::SetCalcFieldValueHdl(::Outliner* pOutliner)
{
	pOutliner->SetCalcFieldValueHdl(LINK(SD_MOD(), SdModule, CalcFieldValueHdl));
}

sal_uInt16 SdDrawDocument::GetAnnotationAuthorIndex( const rtl::OUString& rAuthor )
{
    
    if( maAnnotationAuthors.empty() )
    {
        SvtUserOptions aUserOptions;
        maAnnotationAuthors.push_back( aUserOptions.GetFullName() );
    }

    sal_uInt16 idx = 0;
    for( std::vector< OUString >::iterator iter( maAnnotationAuthors.begin() ); iter != maAnnotationAuthors.end(); iter++ )
    {
        if( (*iter) == rAuthor )
        {
            break;
        }
        idx++;
    }

    if( idx == maAnnotationAuthors.size() )
    {
        maAnnotationAuthors.push_back( rAuthor );
    }

    return idx;
}


