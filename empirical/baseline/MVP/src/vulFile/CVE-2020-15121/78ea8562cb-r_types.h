




































































































































  #define restrict
  #define strcasecmp stricmp
  #define strncasecmp strnicmp
  #define __WINDOWS__ 1

  #include <time.h>
  static inline struct tm *gmtime_r(const time_t *t, struct tm *r) { return (gmtime_s(r, t))? NULL : r; }



  #define __BSD__ 0
  #define __UNIX__ 1


  #define __BSD__ 1
  #define __UNIX__ 1


  #ifdef _MSC_VER
  
  #include <winsock2.h>
  #ifndef WIN32_LEAN_AND_MEAN
  #define WIN32_LEAN_AND_MEAN
  #endif
  #endif
  typedef int socklen_t;
  #undef USE_SOCKETS
  #define __WINDOWS__ 1
  #undef __UNIX__
  #undef __BSD__


  #define __addr_t_defined
  #include <windows.h>









  #define FUNC_ATTR_MALLOC __attribute__((malloc))
  #define FUNC_ATTR_ALLOC_SIZE(x) __attribute__((alloc_size(x)))
  #define FUNC_ATTR_ALLOC_SIZE_PROD(x,y) __attribute__((alloc_size(x,y)))
  #define FUNC_ATTR_ALLOC_ALIGN(x) __attribute__((alloc_align(x)))
  #define FUNC_ATTR_PURE __attribute__ ((pure))
  #define FUNC_ATTR_CONST __attribute__((const))
  #define FUNC_ATTR_USED __attribute__((used))
  #define FUNC_ATTR_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
  #define FUNC_ATTR_ALWAYS_INLINE __attribute__((always_inline))

  #ifdef __clang__
    
  #elif defined(__INTEL_COMPILER)
    
  #else
    
  #endif

  #define FUNC_ATTR_MALLOC
  #define FUNC_ATTR_ALLOC_SIZE(x)
  #define FUNC_ATTR_ALLOC_SIZE_PROD(x,y)
  #define FUNC_ATTR_ALLOC_ALIGN(x)
  #define FUNC_ATTR_PURE
  #define FUNC_ATTR_CONST
  #define FUNC_ATTR_USED
  #define FUNC_ATTR_WARN_UNUSED_RESULT
  #define FUNC_ATTR_ALWAYS_INLINE

















extern "C" {





























typedef int (*PrintfCallback)(const char *str, ...);






















  #define R_API export

  #define R_API inline

  #if defined(__GNUC__) && __GNUC__ >= 4
    #define R_API __attribute__((visibility("default")))
  #elif defined(_MSC_VER)
    #define R_API __declspec(dllexport)
  #else
    #define R_API
  #endif













static inline void *r_new_copy(int size, void *data) {
	void *a = malloc(size);
	if (a) {
		memcpy (a, data, size);
	}
	return a;
}

































































































































































































































enum {
	R_SYS_ARCH_NONE = 0, R_SYS_ARCH_X86 = 0x1, R_SYS_ARCH_ARM = 0x2, R_SYS_ARCH_PPC = 0x4, R_SYS_ARCH_M68K = 0x8, R_SYS_ARCH_JAVA = 0x10, R_SYS_ARCH_MIPS = 0x20, R_SYS_ARCH_SPARC = 0x40, R_SYS_ARCH_XAP = 0x80, R_SYS_ARCH_MSIL = 0x100, R_SYS_ARCH_OBJD = 0x200, R_SYS_ARCH_BF = 0x400, R_SYS_ARCH_SH = 0x800, R_SYS_ARCH_AVR = 0x1000, R_SYS_ARCH_DALVIK = 0x2000, R_SYS_ARCH_Z80 = 0x4000, R_SYS_ARCH_ARC = 0x8000, R_SYS_ARCH_I8080 = 0x10000, R_SYS_ARCH_RAR = 0x20000, R_SYS_ARCH_8051 = 0x40000, R_SYS_ARCH_TMS320 = 0x80000, R_SYS_ARCH_EBC = 0x100000, R_SYS_ARCH_H8300 = 0x200000, R_SYS_ARCH_CR16 = 0x400000, R_SYS_ARCH_V850 = 0x800000, R_SYS_ARCH_SYSZ = 0x1000000, R_SYS_ARCH_XCORE = 0x2000000, R_SYS_ARCH_PROPELLER = 0x4000000, R_SYS_ARCH_MSP430 = 0x8000000LL, R_SYS_ARCH_CRIS =  0x10000000LL, R_SYS_ARCH_HPPA =  0x20000000LL, R_SYS_ARCH_V810 =  0x40000000LL, R_SYS_ARCH_LM32 =  0x80000000LL, };





























































}


static inline void r_run_call1(void *fcn, void *arg1) {
	((void (*)(void *))(fcn))(arg1);
}

static inline void r_run_call2(void *fcn, void *arg1, void *arg2) {
	((void (*)(void *, void *))(fcn))(arg1, arg2);
}

static inline void r_run_call3(void *fcn, void *arg1, void *arg2, void *arg3) {
	((void (*)(void *, void *, void *))(fcn))(arg1, arg2, arg3);
}

static inline void r_run_call4(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4) {
	((void (*)(void *, void *, void *, void *))(fcn))(arg1, arg2, arg3, arg4);
}

static inline void r_run_call5(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4, void *arg5) {
	((void (*)(void *, void *, void *, void *, void *))(fcn))(arg1, arg2, arg3, arg4, arg5);
}

static inline void r_run_call6(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4, void *arg5, void *arg6) {
	((void (*)(void *, void *, void *, void *, void *, void *))(fcn))
		(arg1, arg2, arg3, arg4, arg5, arg6);
}

static inline void r_run_call7(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4, void *arg5, void *arg6, void *arg7) {
	((void (*)(void *, void *, void *, void *, void *, void *, void *))(fcn))
		(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}

static inline void r_run_call8(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4, void *arg5, void *arg6, void *arg7, void *arg8) {
	((void (*)(void *, void *, void *, void *, void *, void *, void *, void *))(fcn))
		(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

static inline void r_run_call9(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4, void *arg5, void *arg6, void *arg7, void *arg8, void *arg9) {
	((void (*)(void *, void *, void *, void *, void *, void *, void *, void *, void *))(fcn))
		(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}

static inline void r_run_call10(void *fcn, void *arg1, void *arg2, void *arg3, void *arg4, void *arg5, void *arg6, void *arg7, void *arg8, void *arg9, void *arg10) {
	((void (*)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *))(fcn))
		(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}










typedef int RRef;











