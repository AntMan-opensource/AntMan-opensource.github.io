


























namespace base {
class FilePath;
}

class InMemoryURLIndexTest;

namespace history {








class HistoryDatabase : public DownloadDatabase,  public AndroidURLsDatabase, public AndroidCacheDatabase,  public TypedURLSyncMetadataDatabase, public URLDatabase, public VisitDatabase, public VisitAnnotationsDatabase, public VisitSegmentDatabase {








 public:
  
  
  
  HistoryDatabase(DownloadInterruptReason download_interrupt_reason_none, DownloadInterruptReason download_interrupt_reason_crash);

  HistoryDatabase(const HistoryDatabase&) = delete;
  HistoryDatabase& operator=(const HistoryDatabase&) = delete;

  ~HistoryDatabase() override;

  
  
  void set_error_callback(const sql::Database::ErrorCallback& error_callback) {
    db_.set_error_callback(error_callback);
  }

  
  
  
  sql::InitStatus Init(const base::FilePath& history_name);

  
  
  void ComputeDatabaseMetrics(const base::FilePath& filename);

  
  int CountUniqueHostsVisitedLastMonth();

  
  
  int CountUniqueDomainsVisited(base::Time begin_time, base::Time end_time);

  
  
  
  
  
  void BeginExclusiveMode();

  
  static int GetCurrentVersion();

  
  
  
  
  
  
  
  void BeginTransaction();
  void CommitTransaction();
  int transaction_nesting() const {  
    return db_.transaction_nesting();
  }
  void RollbackTransaction();

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool RecreateAllTablesButURL();

  
  
  void Vacuum();

  
  void TrimMemory();

  
  bool Raze();

  std::string GetDiagnosticInfo(int extended_error, sql::Statement* statement);

  

  
  bool SetSegmentID(VisitID visit_id, SegmentID segment_id);

  
  
  SegmentID GetSegmentID(VisitID visit_id);

  
  
  
  virtual base::Time GetEarlyExpirationThreshold();
  virtual void UpdateEarlyExpirationThreshold(base::Time threshold);

 private:

  
  friend class AndroidProviderBackend;
  FRIEND_TEST_ALL_PREFIXES(AndroidURLsMigrationTest, MigrateToVersion22);

  friend class ::InMemoryURLIndexTest;

  
  
  sql::Database& GetDB() override;

  
  sql::MetaTable& GetMetaTable() override;

  

  
  
  
  
  
  
  sql::InitStatus EnsureCurrentVersion();


  
  
  void MigrateTimeEpoch();


  

  sql::Database db_;
  sql::MetaTable meta_table_;

  base::Time cached_early_expiration_threshold_;
};

}  


