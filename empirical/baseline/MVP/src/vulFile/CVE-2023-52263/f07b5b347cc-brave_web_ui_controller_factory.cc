


















































































using content::WebUI;
using content::WebUIController;

namespace {



typedef WebUIController* (*WebUIFactoryFunction)(WebUI* web_ui, const GURL& url);

WebUIController* NewWebUI(WebUI* web_ui, const GURL& url) {
  auto host = url.host_piece();
  Profile* profile = Profile::FromBrowserContext( web_ui->GetWebContents()->GetBrowserContext());
  if (host == kAdblockHost) {
    return new BraveAdblockUI(web_ui, url.host());
  } else if (host == kAdblockInternalsHost) {
    return new BraveAdblockInternalsUI(web_ui, url.host());
  } else if (host == kSkusInternalsHost) {
    return new SkusInternalsUI(web_ui, url.host());

  } else if (host == kWebcompatReporterHost) {
    return new WebcompatReporterUI(web_ui, url.host());


  } else if (host == kIPFSWebUIHost && ipfs::IpfsServiceFactory::IsIpfsEnabled(profile)) {
    return new IPFSUI(web_ui, url.host());


  } else if (host == kWalletPageHost && brave_wallet::IsAllowedForContext(profile)) {
    if (brave_wallet::IsNativeWalletEnabled()) {
      auto default_wallet = brave_wallet::GetDefaultEthereumWallet(profile->GetPrefs());
      if (default_wallet == brave_wallet::mojom::DefaultWallet::CryptoWallets) {
        return new EthereumRemoteClientUI(web_ui, url.host());
      }
      return new WalletPageUI(web_ui);
    }

    return new EthereumRemoteClientUI(web_ui, url.host());

  } else if (host == kWalletPanelHost && brave_wallet::IsAllowedForContext(profile)) {
    return new WalletPanelUI(web_ui);

  } else if (host == kRewardsPageHost &&       brave_rewards::IsSupported( profile->GetPrefs(), brave_rewards::IsSupportedOptions::kSkipRegionCheck)) {








    return new BraveRewardsPageUI(web_ui, url.host());
  } else if (host == kRewardsInternalsHost && brave_rewards::IsSupportedForProfile(profile)) {
    return new BraveRewardsInternalsUI(web_ui, url.host());

  } else if (host == kBraveRewardsPanelHost && brave_rewards::IsSupportedForProfile(profile)) {
    return new brave_rewards::RewardsPanelUI(web_ui);
  } else if (host == kBraveTipPanelHost && brave_rewards::IsSupportedForProfile(profile)) {
    return new brave_rewards::TipPanelUI(web_ui);
  } else if (base::FeatureList::IsEnabled( brave_news::features::kBraveNewsFeedUpdate) && host == kBraveNewsInternalsHost) {

    return new BraveNewsInternalsUI(web_ui, url.host());


  } else if (host == kWelcomeHost && !profile->IsGuestSession()) {
    return new BraveWelcomeUI(web_ui, url.host());
  } else if (host == chrome::kChromeUISettingsHost) {
    return new BraveSettingsUI(web_ui, url.host());
  } else if (host == chrome::kChromeUINewTabHost) {
    if (profile->IsIncognitoProfile() || profile->IsTor() || profile->IsGuestSession()) {
      return new BravePrivateNewTabUI(web_ui, url.host());
    }
    return new BraveNewTabUI(web_ui, url.host());
  } else if (host == kShieldsPanelHost) {
    return new ShieldsPanelUI(web_ui);
  } else if (host == kSpeedreaderPanelHost) {
    return new SpeedreaderToolbarUI(web_ui, url.host());
  } else if (host == kCookieListOptInHost) {
    if (base::FeatureList::IsEnabled( brave_shields::features::kBraveAdblockCookieListOptIn)) {
      return new CookieListOptInUI(web_ui);
    }


  } else if (host == kTorInternalsHost) {
    return new TorInternalsUI(web_ui, url.host());


  } else if (url.is_valid() && url.host() == kWalletPageHost) {
    return new AndroidWalletPageUI(web_ui, url);

  }
  return nullptr;
}




WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui, Profile* profile, const GURL& url) {

  
  
  if (!content::HasWebUIScheme(url)) {
    return nullptr;
  }

  if (url.host_piece() == kAdblockHost || url.host_piece() == kAdblockInternalsHost || url.host_piece() == kWebcompatReporterHost || (url.host_piece() == kSkusInternalsHost && base::FeatureList::IsEnabled(skus::features::kSkusFeature)) ||  (url.host_piece() == kIPFSWebUIHost && ipfs::IpfsServiceFactory::IsIpfsEnabled(profile)) ||   (url.is_valid() && url.host_piece() == kWalletPageHost && (url.path() == kWalletSwapPagePath || url.path() == kWalletSendPagePath || url.path() == kWalletBuyPagePath || url.path() == kWalletDepositPagePath)) ||  (base::FeatureList::IsEnabled( brave_news::features::kBraveNewsFeedUpdate) && url.host_piece() == kBraveNewsInternalsHost) || ((url.host_piece() == kWalletPanelHost || url.host_piece() == kWalletPageHost) && brave_wallet::IsAllowedForContext(profile)) || url.host_piece() == kBraveRewardsPanelHost || url.host_piece() == kBraveTipPanelHost || url.host_piece() == kSpeedreaderPanelHost ||   url.host_piece() == chrome::kChromeUINewTabHost || url.host_piece() == chrome::kChromeUISettingsHost || ((url.host_piece() == kWelcomeHost || url.host_piece() == chrome::kChromeUIWelcomeURL) && !profile->IsGuestSession()) || url.host_piece() == kShieldsPanelHost || (url.host_piece() == kCookieListOptInHost && base::FeatureList::IsEnabled( brave_shields::features::kBraveAdblockCookieListOptIn)) ||   url.host_piece() == kTorInternalsHost ||  url.host_piece() == kRewardsPageHost || url.host_piece() == kRewardsInternalsHost) {







































    return &NewWebUI;
  }

  return nullptr;
}

bool ShouldBlockRewardsWebUI(content::BrowserContext* browser_context, const GURL& url) {
  if (url.host_piece() != kRewardsPageHost &&  url.host_piece() != kBraveRewardsPanelHost && url.host_piece() != kBraveTipPanelHost &&  url.host_piece() != kRewardsInternalsHost) {




    return false;
  }

  Profile* profile = Profile::FromBrowserContext(browser_context);
  if (profile) {
    if (!brave_rewards::IsSupportedForProfile( profile, url.host_piece() == kRewardsPageHost ? brave_rewards::IsSupportedOptions::kSkipRegionCheck : brave_rewards::IsSupportedOptions::kNone)) {


      return true;
    }

    auto* prefs = profile->GetPrefs();
    if (prefs && prefs->GetBoolean(kSafetynetCheckFailed)) {
      return true;
    }

  }
  return false;
}


bool ShouldBlockWalletWebUI(content::BrowserContext* browser_context, const GURL& url) {
  if (!url.is_valid() || url.host() != kWalletPageHost) {
    return false;
  }
  Profile* profile = Profile::FromBrowserContext(browser_context);
  if (!profile) {
    return false;
  }
  auto* keyring_service = brave_wallet::KeyringServiceFactory::GetServiceForContext(profile);
  return keyring_service && keyring_service->IsLockedSync();
}

}  

WebUI::TypeID BraveWebUIControllerFactory::GetWebUIType( content::BrowserContext* browser_context, const GURL& url) {

  if (ShouldBlockRewardsWebUI(browser_context, url)) {
    return WebUI::kNoWebUI;
  }

  if (ShouldBlockWalletWebUI(browser_context, url)) {
    return WebUI::kNoWebUI;
  }


  if (playlist::PlaylistUI::ShouldBlockPlaylistWebUI(browser_context, url)) {
    return WebUI::kNoWebUI;
  }

  Profile* profile = Profile::FromBrowserContext(browser_context);
  WebUIFactoryFunction function = GetWebUIFactoryFunction(nullptr, profile, url);
  if (function) {
    return reinterpret_cast<WebUI::TypeID>(function);
  }
  return ChromeWebUIControllerFactory::GetWebUIType(browser_context, url);
}

std::unique_ptr<WebUIController> BraveWebUIControllerFactory::CreateWebUIControllerForURL(WebUI* web_ui, const GURL& url) {

  Profile* profile = Profile::FromWebUI(web_ui);
  WebUIFactoryFunction function = GetWebUIFactoryFunction(web_ui, profile, url);
  if (!function) {
    return ChromeWebUIControllerFactory::CreateWebUIControllerForURL(web_ui, url);
  }

  return base::WrapUnique((*function)(web_ui, url));
}


BraveWebUIControllerFactory* BraveWebUIControllerFactory::GetInstance() {
  static base::NoDestructor<BraveWebUIControllerFactory> instance;
  return instance.get();
}

BraveWebUIControllerFactory::BraveWebUIControllerFactory() = default;

BraveWebUIControllerFactory::~BraveWebUIControllerFactory() = default;
