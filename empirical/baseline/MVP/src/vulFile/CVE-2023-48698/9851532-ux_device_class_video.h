
























































extern   "C" {









extern UCHAR _ux_system_device_class_video_name[];




























































































































































































typedef struct UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_STRUCT {
    union UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_bmHint_UNION {
        USHORT                                  value;
        struct UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_bmHint_STRUCT {
            USHORT                              dwFrameInterval:1;
            USHORT                              wKeyFrameRate:1;
            USHORT                              wPFrameRate:1;
            USHORT                              wCompQuality:1;
            USHORT                              wCompWindowSize:1;
        }                                       bm;
    }                                           bmHint;
    UCHAR                                       bFormatIndex;
    UCHAR                                       bFrameIndex;
    ULONG                                       dwFrameInterval;
    USHORT                                      wKeyFrameRate;
    USHORT                                      wPFrameRate;
    USHORT                                      wCompQuality;
    USHORT                                      wCompWindowSize;
    USHORT                                      wDelay;
    UCHAR                                       dwMaxVideoFrameSize[4]; 
    UCHAR                                       dwMaxPayloadTransferSize[4];
    UCHAR                                       dwClockFrequency[4];
    union UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_bmFramingInfo_UNION {
        UCHAR                                   value;
        struct UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_bmFramingInfo_STRUCT {
            UCHAR                               FID_required:1;
            UCHAR                               EOF_may_present:1;
            UCHAR                               EOS_may_present:1;
        }                                       bm;
    }                                           bmFramingInfo;
    UCHAR                                       bPreferedVersion;
    UCHAR                                       bMinVersion;
    UCHAR                                       bMaxVersion;

    
    UCHAR                                       bUsage;
    UCHAR                                       bBitDepthLuma;
    UCHAR                                       bmSettings;
    UCHAR                                       bMaxNumberOfRefFramesPlus1;
    union UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_bmRateControlModes_UNION {
        USHORT                                  value;
        struct UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL_bmRateControlModes_STRUCT {
            USHORT                              rate_ctrl_mode_0:4;
            USHORT                              rate_ctrl_mode_1:4;
            USHORT                              rate_ctrl_mode_2:4;
            USHORT                              rate_ctrl_mode_3:4;
        }                                       bm;
    }                                           bmRateControlModes;
    UCHAR                                       bmLayoutPerStream;
} UX_DEVICE_CLASS_VIDEO_PROBE_COMMIT_CONTROL;









































typedef struct UX_DEVICE_CLASS_VIDEO_STILL_PROBE_COMMIT_CONTROL_STRUCT {
    UCHAR                                   bFormatIndex;
    UCHAR                                   bFrameIndex;
    UCHAR                                   bCompressionIndex;
    UCHAR                                   dwMaxVideoFrameSize[4]; 
    UCHAR                                   dwMaxPayloadTransferSize[4];
} UX_DEVICE_CLASS_VIDEO_STILL_PROBE_COMMIT_CONTROL;










typedef struct UX_DEVICE_CLASS_VIDEO_STATUS_PACKET_HEADER_STRUCT {
   UCHAR                                    bStatusType;
   UCHAR                                    bOriginator;
} UX_DEVICE_CLASS_VIDEO_STATUS_PACKET_HEADER;
typedef struct UX_DEVICE_CLASS_VIDEO_STATUS_PACKET_VC_STRUCT {
   UCHAR                                     bStatusType;
   UCHAR                                     bOriginator;
   UCHAR                                     bEvent;
   UCHAR                                     bSelector;
   UCHAR                                     bAttribute;
   UCHAR                                     bValue[1];     
} UX_DEVICE_CLASS_VIDEO_STATUS_PACKET_VC;
typedef struct UX_DEVICE_CLASS_VIDEO_STATUS_PACKET_VS_STRUCT {
   UCHAR                                     bStatusType;
   UCHAR                                     bOriginator;
   UCHAR                                     bEvent;
   UCHAR                                     bValue[1];     
} UX_DEVICE_CLASS_VIDEO_STATUS_PACKET_VS;












typedef struct UX_DEVICE_CLASS_VIDEO_PAYLOAD_HEADER_STRUCT {
   UCHAR                                     bHeaderLength;
   union UX_DEVICE_CLASS_VIDEO_PAYLOAD_HEADER_INFO_UNION {
      UCHAR                                  value;
      struct UX_DEVICE_CLASS_VIDEO_PAYLOAD_HEADER_INFO_STRUCT {
         UCHAR                               bFID:1; 
         UCHAR                               bEOF:1; 
         UCHAR                               bPTS:1; 
         UCHAR                               bSCR:1; 
         UCHAR                               bRES:1; 
         UCHAR                               bSTI:1; 
         UCHAR                               bERR:1; 
         UCHAR                               bEOH:1; 
      }                                      bm;
   }                                         bmHeaderInfo;
   UCHAR                                     dwPresentationTime[4];
   union UX_DEVICE_CLASS_VIDEO_PAYLOAD_SCR_UNION {
      UCHAR                                  byte_array[6];
      struct UX_DEVICE_CLASS_VIDEO_PAYLOAD_SCR_STRUCT {
         UCHAR                               STC[4];  
         USHORT                              SCR;     
      }                                      bm;
   }                                         scrSourceClock;
} UX_DEVICE_CLASS_VIDEO_PAYLOAD_HEADER;






























































































struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT;
struct UX_DEVICE_CLASS_VIDEO_STRUCT;

typedef struct UX_DEVICE_CLASS_VIDEO_CALLBACKS_STRUCT {

    VOID        (*ux_slave_class_video_instance_activate)(VOID *);
    VOID        (*ux_slave_class_video_instance_deactivate)(VOID *);
    UINT        (*ux_device_class_video_request)(struct UX_DEVICE_CLASS_VIDEO_STRUCT *, UX_SLAVE_TRANSFER *);
    VOID         *ux_device_class_video_arg;
} UX_DEVICE_CLASS_VIDEO_CALLBACKS;

typedef struct UX_DEVICE_CLASS_VIDEO_STREAM_CALLBACKS_STRUCT {
    VOID        (*ux_device_class_video_stream_change)(struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT *, ULONG);
    UINT        (*ux_device_class_video_stream_request)(struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT *, UX_SLAVE_TRANSFER *);
    VOID        (*ux_device_class_video_stream_payload_done)(struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT *, ULONG);
} UX_DEVICE_CLASS_VIDEO_STREAM_CALLBACKS;




typedef struct UX_DEVICE_CLASS_VIDEO_PAYLOAD_STRUCT {

    ULONG                                   ux_device_class_video_payload_length;
    UCHAR                                   ux_device_class_video_payload_data[4]; 
} UX_DEVICE_CLASS_VIDEO_PAYLOAD;

typedef struct UX_DEVICE_CLASS_VIDEO_STREAM_PARAMETER_STRUCT {

    UINT                                   (*ux_device_class_video_stream_parameter_task_function)(struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT*);

    ULONG                                    ux_device_class_video_stream_parameter_thread_stack_size;
    VOID                                   (*ux_device_class_video_stream_parameter_thread_entry)(ULONG id);

    UX_DEVICE_CLASS_VIDEO_STREAM_CALLBACKS   ux_device_class_video_stream_parameter_callbacks;

    ULONG                                    ux_device_class_video_stream_parameter_max_payload_buffer_size;
    ULONG                                    ux_device_class_video_stream_parameter_max_payload_buffer_nb;
} UX_DEVICE_CLASS_VIDEO_STREAM_PARAMETER;

typedef struct UX_DEVICE_CLASS_VIDEO_PARAMETER_STRUCT {
    ULONG                                    ux_device_class_video_parameter_master_interface;
    UX_DEVICE_CLASS_VIDEO_CALLBACKS          ux_device_class_video_parameter_callbacks;

    ULONG                                    ux_device_class_video_parameter_streams_nb;
    UX_DEVICE_CLASS_VIDEO_STREAM_PARAMETER  *ux_device_class_video_parameter_streams;
} UX_DEVICE_CLASS_VIDEO_PARAMETER;

typedef struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT {

    struct UX_DEVICE_CLASS_VIDEO_STRUCT     *ux_device_class_video_stream_video;
    UX_SLAVE_INTERFACE                      *ux_device_class_video_stream_interface;
    UX_SLAVE_ENDPOINT                       *ux_device_class_video_stream_endpoint;

    ULONG                                    ux_device_class_video_stream_error;

    UX_DEVICE_CLASS_VIDEO_STREAM_CALLBACKS   ux_device_class_video_stream_callbacks;


    UCHAR                                   *ux_device_class_video_stream_thread_stack;
    UX_THREAD                                ux_device_class_video_stream_thread;

    UINT                                   (*ux_device_class_video_stream_task_function)(struct UX_DEVICE_CLASS_VIDEO_STREAM_STRUCT*);
    UINT                                    ux_device_class_video_stream_task_state;
    UINT                                    ux_device_class_video_stream_task_status;


    ULONG                                   ux_device_class_video_stream_buffer_error_count;
    UCHAR                                   *ux_device_class_video_stream_buffer;
    ULONG                                    ux_device_class_video_stream_buffer_size;
    ULONG                                    ux_device_class_video_stream_payload_buffer_size;

    UX_DEVICE_CLASS_VIDEO_PAYLOAD           *ux_device_class_video_stream_transfer_pos;
    UX_DEVICE_CLASS_VIDEO_PAYLOAD           *ux_device_class_video_stream_access_pos;
} UX_DEVICE_CLASS_VIDEO_STREAM;



typedef struct UX_DEVICE_CLASS_VIDEO_STRUCT {

    UX_SLAVE_CLASS                          *ux_device_class_video_class;
    UX_SLAVE_DEVICE                         *ux_device_class_video_device;
    UX_SLAVE_INTERFACE                      *ux_device_class_video_interface;

    ULONG                                    ux_device_class_video_error;

    UX_DEVICE_CLASS_VIDEO_CALLBACKS          ux_device_class_video_callbacks;

    ULONG                                    ux_device_class_video_streams_nb;
    UX_DEVICE_CLASS_VIDEO_STREAM            *ux_device_class_video_streams;

} UX_DEVICE_CLASS_VIDEO;






UINT    _ux_device_class_video_initialize(UX_SLAVE_CLASS_COMMAND *command);
UINT    _ux_device_class_video_uninitialize(UX_SLAVE_CLASS_COMMAND *command);
UINT    _ux_device_class_video_activate(UX_SLAVE_CLASS_COMMAND *command);
UINT    _ux_device_class_video_change(UX_SLAVE_CLASS_COMMAND *command);
UINT    _ux_device_class_video_deactivate(UX_SLAVE_CLASS_COMMAND *command);
UINT    _ux_device_class_video_control_request(UX_SLAVE_CLASS_COMMAND *command);

UINT    _ux_device_class_video_entry(UX_SLAVE_CLASS_COMMAND *command);

UINT    _ux_device_class_video_ioctl(UX_DEVICE_CLASS_VIDEO *video, ULONG ioctl_function, VOID *parameter);

UINT    _ux_device_class_video_stream_get(UX_DEVICE_CLASS_VIDEO *video, ULONG stream_index, UX_DEVICE_CLASS_VIDEO_STREAM **stream);

VOID    _ux_device_class_video_write_thread_entry(ULONG video_stream);
VOID    _ux_device_class_video_read_thread_entry(ULONG video_stream);

ULONG   _ux_device_class_video_max_payload_length(UX_DEVICE_CLASS_VIDEO_STREAM *video);

UINT    _ux_device_class_video_reception_start(UX_DEVICE_CLASS_VIDEO_STREAM *video);

UINT    _ux_device_class_video_read_payload_get(UX_DEVICE_CLASS_VIDEO_STREAM *video, UCHAR **payload_data, ULONG *payload_length);
UINT    _ux_device_class_video_read_payload_free(UX_DEVICE_CLASS_VIDEO_STREAM *video);

UINT    _ux_device_class_video_transmission_start(UX_DEVICE_CLASS_VIDEO_STREAM *video);

UINT    _ux_device_class_video_write_payload_get(UX_DEVICE_CLASS_VIDEO_STREAM *video, UCHAR **buffer, ULONG *max_length);
UINT    _ux_device_class_video_write_payload_commit(UX_DEVICE_CLASS_VIDEO_STREAM *video, ULONG length);

UINT    _ux_device_class_video_tasks_run(VOID *instance);
UINT    _ux_device_class_video_read_task_function(UX_DEVICE_CLASS_VIDEO_STREAM *stream);
UINT    _ux_device_class_video_write_task_function(UX_DEVICE_CLASS_VIDEO_STREAM *stream);

































}



