






















































extern   "C" {


























































































































































































































































































































































































































typedef struct UX_DEVICE_CLASS_CCID_MESSAGES_STRUCT {
    UCHAR       *ux_device_class_ccid_messages_pc_to_rdr;
    UCHAR       *ux_device_class_ccid_messages_rdr_to_pc;
    ULONG       ux_device_class_ccid_messages_rdr_to_pc_length; 
} UX_DEVICE_CLASS_CCID_MESSAGES;


typedef struct UX_DEVICE_CLASS_CCID_MESSAGE_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bRFU[3];
} UX_DEVICE_CLASS_CCID_MESSAGE_HEADER;








typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_ICC_POWER_ON_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bPowerSelect;
    UCHAR       bRFU[2];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_ICC_POWER_ON_HEADER;



typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_ICC_POWER_OFF_HEADER;


typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_GET_SLOT_STATUS_HEADER;


typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_XFR_BLOCK_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bBWI;
    USHORT      wLevelParameter;
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_XFR_BLOCK_HEADER;




typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_GET_PARAMETERS_HEADER;


typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_RESET_PARAMETERS_HEADER;


typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_PARAMETERS_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bProtocolNum;
    UCHAR       bRFU[2];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_PARAMETERS_HEADER;

typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_PARAMETERS_T0_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bProtocolNum;
    UCHAR       bRFU[2];
    UCHAR       bmFindexDindex;
    UCHAR       bmTCCKST0;
    UCHAR       bGuardTimeT0;
    UCHAR       bWaitingIntegerT0;
    UCHAR       bClockStop;
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_PARAMETERS_T0;

typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_PARAMETERS_T1_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bProtocolNum;
    UCHAR       bRFU[2];
    UCHAR       bmFindexDindex;
    UCHAR       bmTCCKST1;
    UCHAR       bGuardTimeT1;
    UCHAR       bmWaitingIntegersT1;
    UCHAR       bClockStop;
    UCHAR       bIFSC;
    UCHAR       bNadValue;
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_PARAMETERS_T1;



typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_ESCAPE_HEADER;


typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_ICC_CLOCK_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bClockCommand;
    UCHAR       bRFU[2];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_ICC_CLOCK_HEADER;



typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_T0_APDU_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bmChanges;
    UCHAR       bClassGetResponse;
    UCHAR       bClassEnvelope;
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_T0_APDU_HEADER;





typedef UX_DEVICE_CLASS_CCID_PC_TO_RDR_XFR_BLOCK_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_SECURE_HEADER;

typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bBWI;
    USHORT      wLevelParameter;
    UCHAR       bPINOperation;
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_HEADER;




typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_VERIFICATION_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bBWI;
    USHORT      wLevelParameter;
    UCHAR       bPINOperation;

    UCHAR       bTimeOut;
    UCHAR       bmFormatString;
    UCHAR       bmPINBlockString;
    UCHAR       bmPINLengthFormat;

    UCHAR       wPINMaxExtraDigit[2]; 
    UCHAR       bEntryValidationCondition;
    UCHAR       bNumberMessage;
    UCHAR       wLangId[2];
    UCHAR       bMsgIndex;
    UCHAR       bTeoPrologue[3];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_VERIFICATION;
















typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bBWI;
    USHORT      wLevelParameter;
    UCHAR       bPINOperation;

    UCHAR       bTimeOut;
    UCHAR       bmFormatString;
    UCHAR       bmPINBlockString;
    UCHAR       bmPINLengthFormat;

    UCHAR       bInsertionOffsetOld;
    UCHAR       bInsertionOffsetNew;
    UCHAR       wPINMaxExtraDigit[2]; 
    UCHAR       bConfirmPIN;
    UCHAR       bEntryValidationCondition;
    UCHAR       bNumberMessage;
    UCHAR       wLangId[2];
    UCHAR       bMsgIndex1;
    UCHAR       bTeoPrologue[3];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION;
typedef UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION1;



typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION2_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bBWI;
    USHORT      wLevelParameter;
    UCHAR       bPINOperation;
    UCHAR       bTimeOut;
    UCHAR       bmFormatString;
    UCHAR       bmPINBlockString;
    UCHAR       bmPINLengthFormat;
    UCHAR       bInsertionOffsetOld;
    UCHAR       bInsertionOffsetNew;
    UCHAR       wPINMaxExtraDigit[2]; 
    UCHAR       bConfirmPIN;
    UCHAR       bEntryValidationCondition;
    UCHAR       bNumberMessage;
    UCHAR       wLangId[2];
    UCHAR       bMsgIndex1;
    UCHAR       bMsgIndex2;
    UCHAR       bTeoPrologue[3];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION2;



typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION3_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bBWI;
    USHORT      wLevelParameter;
    UCHAR       bPINOperation;
    UCHAR       bTimeOut;
    UCHAR       bmFormatString;
    UCHAR       bmPINBlockString;
    UCHAR       bmPINLengthFormat;
    UCHAR       bInsertionOffsetOld;
    UCHAR       bInsertionOffsetNew;
    UCHAR       wPINMaxExtraDigit[2]; 
    UCHAR       bConfirmPIN;
    UCHAR       bEntryValidationCondition;
    UCHAR       bNumberMessage;
    UCHAR       wLangId[2];
    UCHAR       bMsgIndex1;
    UCHAR       bMsgIndex2;
    UCHAR       bMsgIndex3;
    UCHAR       bTeoPrologue[3];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_PIN_MODIFICATION3;






typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_MECHANICAL_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bFunction;
    UCHAR       bRFU[2];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_MECHANICAL_HEADER;



typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_ABORT_HEADER;


typedef UX_DEVICE_CLASS_CCID_MESSAGE_HEADER UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_DATA_RATE_AND_CLOCK_FREQUENCY_HEADER;
typedef struct UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_DATA_RATE_AND_CLOCK_FREQUENCY_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bRFU[3];
    UCHAR       dwClockFrequency[4];
    UCHAR       dwDataRate[4];
} UX_DEVICE_CLASS_CCID_PC_TO_RDR_SET_DATA_RATE_AND_CLOCK_FREQUENCY;




typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bRFU;
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_HEADER;




typedef struct UX_DEVICE_CLASS_CCID_SLOT_STATUS_REGISTER_BITMAP_STRUCT {
    UCHAR bmICCStatus:2;
    UCHAR bmRFU:4;
    UCHAR bmCommandStatus:2;
} UX_DEVICE_CLASS_CCID_SLOT_STATUS_REGISTER_BITMAP;


typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_DATA_BLOCK_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bChainParameter;
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_DATA_BLOCK_HEADER;



typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_SLOT_STATUS_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bClockStatus;
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_SLOT_STATUS_HEADER;



typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_PARAMETERS_HEADER_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bProtocolNum;
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_PARAMETERS_HEADER;


typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_PARAMETERS_T0_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bProtocolNum;
    UCHAR       bmFindexDindex;
    UCHAR       bmTCCKST0;
    UCHAR       bGuardTimeT0;
    UCHAR       bWaitingIntegerT0;
    UCHAR       bClockStop;
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_PARAMETERS_T0;


typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_PARAMETERS_T1_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bProtocolNum;
    UCHAR       bmFindexDindex;
    UCHAR       bmTCCKST1;
    UCHAR       bGuardTimeT1;
    UCHAR       bmWaitingIntegersT1;
    UCHAR       bClockStop;
    UCHAR       bIFSC;
    UCHAR       bNadValue;
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_PARAMETERS_T1;



typedef UX_DEVICE_CLASS_CCID_RDR_TO_PC_HEADER UX_DEVICE_CLASS_CCID_RDR_TO_PC_ESCAPE_HEADER;


typedef UX_DEVICE_CLASS_CCID_RDR_TO_PC_HEADER UX_DEVICE_CLASS_CCID_RDR_TO_PC_DATA_RATE_AND_CLOCK_FREQUENCY_HEADER;
typedef struct UX_DEVICE_CLASS_CCID_RDR_TO_PC_DATA_RATE_AND_CLOCK_FREQUENCY_STRUCT {
    UCHAR       bMessageType;
    UCHAR       dwLength[4];
    UCHAR       bSlot;
    UCHAR       bSeq;
    UCHAR       bStatus;
    UCHAR       bError;
    UCHAR       bRFU;
    UCHAR       dwClockFrequency[4];
    UCHAR       dwDataRate[4];
} UX_DEVICE_CLASS_CCID_RDR_TO_PC_DATA_RATE_AND_CLOCK_FREQUENCY;





typedef UINT (*UX_DEVICE_CLASS_CCID_HANDLE)(ULONG slot, UX_DEVICE_CLASS_CCID_MESSAGES*);
typedef struct UX_DEVICE_CLASS_CCID_HANDLES_STRUCT {
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_icc_power_on;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_icc_power_off;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_get_slot_status;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_xfr_block;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_get_parameters;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_reset_parameters;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_set_parameters;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_escape;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_icc_clock;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_t0_apdu;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_secure;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_mechanical;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_abort;
    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_handles_set_data_rate_and_clock_frequency;
} UX_DEVICE_CLASS_CCID_HANDLES;

typedef struct UX_DEVICE_CLASS_CCID_COMMAND_SETT_STRUCT {
    UCHAR ux_device_class_ccid_command_sett_command_type;
    UCHAR ux_device_class_ccid_command_sett_response_type;
    UCHAR ux_device_class_ccid_command_sett_flags;
    CHAR  ux_device_class_ccid_command_sett_handle_index;
} UX_DEVICE_CLASS_CCID_COMMAND_SETT;



typedef struct UX_DEVICE_CLASS_CCID_SLOT_STRUCT {
    CHAR                    ux_device_class_ccid_slot_runner;
    UCHAR                   ux_device_class_ccid_slot_flags;

    UCHAR                   ux_device_class_ccid_slot_icc_status;
    UCHAR                   ux_device_class_ccid_slot_clock_status;

    UCHAR                   ux_device_class_ccid_slot_hw_error;
    UCHAR                   ux_device_class_ccid_slot_hw_error_seq;

    UCHAR                   ux_device_class_ccid_slot_aborting_seq;
    UCHAR                   ux_device_class_ccid_slot_aborting;
} UX_DEVICE_CLASS_CCID_SLOT;


typedef struct UX_DEVICE_CLASS_CCID_RUNNER_STRUCT {
    struct UX_DEVICE_CLASS_CCID_STRUCT *ux_device_class_ccid_runner_ccid;
    UCHAR                   *ux_device_class_ccid_runner_command;
    UCHAR                   *ux_device_class_ccid_runner_response;

    CHAR                    ux_device_class_ccid_runner_slot;
    CHAR                    ux_device_class_ccid_runner_id;
    CHAR                    ux_device_class_ccid_runner_command_index;

    UCHAR                   reserved;

    UX_THREAD               ux_device_class_ccid_runner_thread;
    UCHAR                   *ux_device_class_ccid_runner_thread_stack;

    UCHAR                   ux_device_class_ccid_runner_state;

    UX_DEVICE_CLASS_CCID_HANDLE ux_device_class_ccid_runner_handle;
    UX_DEVICE_CLASS_CCID_MESSAGES ux_device_class_ccid_runner_messages;

} UX_DEVICE_CLASS_CCID_RUNNER;


typedef struct UX_DEVICE_CLASS_CCID_PARAMETER_STRUCT {
    VOID                    (*ux_device_class_ccid_instance_activate)(VOID *);
    VOID                    (*ux_device_class_ccid_instance_deactivate)(VOID *);
    UX_DEVICE_CLASS_CCID_HANDLES *ux_device_class_ccid_handles;
    ULONG                   *ux_device_class_ccid_clocks;
    ULONG                   *ux_device_class_ccid_data_rates;
    ULONG                   ux_device_class_ccid_max_transfer_length;
    UCHAR                   ux_device_class_ccid_max_n_slots;
    UCHAR                   ux_device_class_ccid_max_n_busy_slots;
    UCHAR                   ux_device_class_ccid_n_clocks;
    UCHAR                   ux_device_class_ccid_n_data_rates;
} UX_DEVICE_CLASS_CCID_PARAMETER;




typedef struct UX_DEVICE_CLASS_CCID_STRUCT {
    UX_SLAVE_INTERFACE      *ux_device_class_ccid_interface;
    UX_SLAVE_ENDPOINT       *ux_device_class_ccid_endpoint_out;
    UX_SLAVE_ENDPOINT       *ux_device_class_ccid_endpoint_in;
    UX_SLAVE_ENDPOINT       *ux_device_class_ccid_endpoint_notify;

    UX_DEVICE_CLASS_CCID_PARAMETER ux_device_class_ccid_parameter;

    UX_DEVICE_CLASS_CCID_RUNNER *ux_device_class_ccid_runners;
    UX_DEVICE_CLASS_CCID_SLOT *ux_device_class_ccid_slots;

    UCHAR                   ux_device_class_ccid_header[UX_DEVICE_CLASS_CCID_MESSAGE_HEADER_LENGTH];
    SHORT                   ux_device_class_ccid_n_busy;


    UX_THREAD               ux_device_class_ccid_thread;
    UCHAR                   *ux_device_class_ccid_thread_stack;

    UX_THREAD               ux_device_class_ccid_notify_thread;
    UCHAR                   *ux_device_class_ccid_notify_thread_stack;

    UX_EVENT_FLAGS_GROUP    ux_device_class_ccid_events;
    UX_MUTEX                ux_device_class_ccid_mutex;
    UX_MUTEX                ux_device_class_ccid_response_mutex;
    UX_SEMAPHORE            ux_device_class_ccid_notify_semaphore;

    ULONG                   ux_device_class_ccid_flags;

    UCHAR                   ux_device_class_ccid_cmd_state;
    CHAR                    ux_device_class_ccid_cmd_index;
    UCHAR                   ux_device_class_ccid_rsp_state;
    UCHAR                   ux_device_class_ccid_notify_state;

} UX_DEVICE_CLASS_CCID;






























static inline const char *ccidCmdStateName(const UINT s)
{
    switch(s)
    {
    case UX_DEVICE_CLASS_CCID_CMD_IDLE:     return("cmdIDLE");
    case UX_DEVICE_CLASS_CCID_CMD_START:    return("cmdSTART");
    case UX_DEVICE_CLASS_CCID_CMD_WAIT:     return("cmdWAIT");
    case UX_DEVICE_CLASS_CCID_CMD_LOCK:     return("cmdLOCK");
    case UX_DEVICE_CLASS_CCID_CMD_PROCESS:  return("cmdPROCESS");
    case UX_DEVICE_CLASS_CCID_CMD_RSP_START:return("cmdRSP_START");
    default: return("cmd?");
    }
}





static inline const char *ccidRunnerStateName(const UINT s)
{
    switch(s)
    {
    case UX_DEVICE_CLASS_CCID_RUNNER_IDLE:          return("runnerIDLE");
    case UX_DEVICE_CLASS_CCID_RUNNER_START:         return("runnerSTART");
    case UX_DEVICE_CLASS_CCID_RUNNER_HANDLE:        return("runnerHANDLE");
    case UX_DEVICE_CLASS_CCID_RUNNER_RSP_START:     return("runnerRSP_START");
    default: return("runner?");
    }
}







static inline const char *ccidRspStateName(const UINT s)
{
    switch(s)
    {
    case UX_DEVICE_CLASS_CCID_RSP_IDLE:     return("rspIDLE");
    case UX_DEVICE_CLASS_CCID_RSP_START:    return("rspSTART");
    case UX_DEVICE_CLASS_CCID_RSP_WAIT:     return("rspWAIT");
    case UX_DEVICE_CLASS_CCID_RSP_LOCK:     return("rspLOCK");
    case UX_DEVICE_CLASS_CCID_RSP_UPDATE:   return("rspUPDATE");
    case UX_DEVICE_CLASS_CCID_RSP_DONE:     return("rspDONE");
    default: return("rsp?");
    }
}





static inline const char *ccidNotifyStateName(const UINT s)
{
    switch(s)
    {
    case UX_DEVICE_CLASS_CCID_NOTIFY_IDLE:     return("notifyIDLE");
    case UX_DEVICE_CLASS_CCID_NOTIFY_LOCK:     return("notifyLOCK");
    case UX_DEVICE_CLASS_CCID_NOTIFY_START:    return("notifySTART");
    case UX_DEVICE_CLASS_CCID_NOTIFY_WAIT:     return("notifyWAIT");
    default: return("notify?");
    }
}


extern const UX_DEVICE_CLASS_CCID_COMMAND_SETT _ux_device_class_ccid_command_sett[];


UINT  _ux_device_class_ccid_initialize(UX_SLAVE_CLASS_COMMAND *command);
UINT  _ux_device_class_ccid_uninitialize(UX_SLAVE_CLASS_COMMAND *command);
UINT  _ux_device_class_ccid_activate(UX_SLAVE_CLASS_COMMAND *command);
UINT  _ux_device_class_ccid_deactivate(UX_SLAVE_CLASS_COMMAND *command);
UINT  _ux_device_class_ccid_control_request(UX_SLAVE_CLASS_COMMAND *command);

VOID  _ux_device_class_ccid_thread_entry(ULONG ccid_instance);
VOID  _ux_device_class_ccid_notify_thread_entry(ULONG ccid_instance);
VOID  _ux_device_class_ccid_runner_thread_entry(ULONG runner_instance);

UINT  _ux_device_class_ccid_tasks_run(VOID *instance);
UINT  _ux_device_class_ccid_notify_task_run(UX_DEVICE_CLASS_CCID *ccid);
UINT  _ux_device_class_ccid_runner_task_run(UX_DEVICE_CLASS_CCID *ccid);

UINT  _ux_device_class_ccid_control_abort(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG seq);

UINT  _ux_device_class_ccid_response(UX_DEVICE_CLASS_CCID *ccid, UCHAR *buffer, ULONG length);

UINT  _ux_device_class_ccid_entry(UX_SLAVE_CLASS_COMMAND *command);

UINT  _ux_device_class_ccid_icc_insert(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG seq_start);
UINT  _ux_device_class_ccid_icc_remove(UX_DEVICE_CLASS_CCID *ccid, ULONG slot);
UINT  _ux_device_class_ccid_auto_seq_start(UX_DEVICE_CLASS_CCID *ccid, ULONG slot);
UINT  _ux_device_class_ccid_auto_seq_done(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG icc_status);
UINT  _ux_device_class_ccid_time_extension(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG wt);
UINT  _ux_device_class_ccid_hardware_error(UX_DEVICE_CLASS_CCID *ccid, ULONG slot, ULONG error);














}



