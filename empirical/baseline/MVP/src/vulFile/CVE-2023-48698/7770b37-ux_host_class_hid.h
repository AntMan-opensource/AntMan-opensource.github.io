













 
 







 
 
 
 
 






 

 
 
 
 
 
 





















 



 
extern   "C" { 



































                                                








                                                


























































































































































































































































































































































































































































































































































































































































































typedef struct UX_HID_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bcdHID;
    ULONG           bCountryCode;
    ULONG           bNumDescriptor;
    ULONG           bReportDescriptorType;
    ULONG           wItemLength;
} UX_HID_DESCRIPTOR;


typedef struct UX_HOST_CLASS_HID_REPORT_CALLBACK_STRUCT {

    struct UX_HOST_CLASS_HID_CLIENT_STRUCT         *ux_host_class_hid_report_callback_client;
    ULONG           ux_host_class_hid_report_callback_id;
    ULONG           ux_host_class_hid_report_callback_status;
    ULONG           ux_host_class_hid_report_callback_flags;
    ULONG           ux_host_class_hid_report_callback_value;
    ULONG           ux_host_class_hid_report_callback_usage;
    ULONG           ux_host_class_hid_report_callback_length;
    ULONG           ux_host_class_hid_report_callback_actual_length;
    VOID            *ux_host_class_hid_report_callback_buffer;
    VOID            (*ux_host_class_hid_report_callback_function) (struct UX_HOST_CLASS_HID_REPORT_CALLBACK_STRUCT *);
} UX_HOST_CLASS_HID_REPORT_CALLBACK;



typedef struct UX_HOST_CLASS_HID_REPORT_GET_ID_STRUCT {

    ULONG           ux_host_class_hid_report_get_id;
    ULONG           ux_host_class_hid_report_get_type;
    struct UX_HOST_CLASS_HID_REPORT_STRUCT            *ux_host_class_hid_report_get_report;
} UX_HOST_CLASS_HID_REPORT_GET_ID;




typedef struct UX_HOST_CLASS_HID_LOCAL_ITEM_STRUCT {

    ULONG           ux_host_class_hid_local_item_usages[UX_HOST_CLASS_HID_USAGES];
    ULONG           ux_host_class_hid_local_item_number_usage;
    ULONG           ux_host_class_hid_local_item_usage_min;
    ULONG           ux_host_class_hid_local_item_usage_max;
    ULONG           ux_host_class_hid_local_item_delimiter_level;
    ULONG           ux_host_class_hid_local_item_delimiter_branch;
} UX_HOST_CLASS_HID_LOCAL_ITEM;




typedef struct UX_HOST_CLASS_HID_GLOBAL_ITEM_STRUCT {

    ULONG           ux_host_class_hid_global_item_usage_page;
    SLONG           ux_host_class_hid_global_item_logical_min;
    SLONG           ux_host_class_hid_global_item_logical_max;
    SLONG           ux_host_class_hid_global_item_physical_min;
    SLONG           ux_host_class_hid_global_item_physical_max;
    ULONG           ux_host_class_hid_global_item_unit_expo;
    ULONG           ux_host_class_hid_global_item_unit;
    ULONG           ux_host_class_hid_global_item_report_size;
    ULONG           ux_host_class_hid_global_item_report_id;
    ULONG           ux_host_class_hid_global_item_report_count;
} UX_HOST_CLASS_HID_GLOBAL_ITEM;




typedef struct UX_HOST_CLASS_HID_FIELD_STRUCT {

    ULONG           ux_host_class_hid_field_physical;
    ULONG           ux_host_class_hid_field_logical;
    ULONG           ux_host_class_hid_field_application;
    ULONG           ux_host_class_hid_field_usage_page;
    ULONG           ux_host_class_hid_field_usage_min;
    ULONG           ux_host_class_hid_field_usage_max;
    SLONG           ux_host_class_hid_field_logical_min;
    SLONG           ux_host_class_hid_field_logical_max;
    SLONG           ux_host_class_hid_field_physical_min;
    SLONG           ux_host_class_hid_field_physical_max;
    ULONG           ux_host_class_hid_field_unit;
    ULONG           ux_host_class_hid_field_unit_expo;
    ULONG           ux_host_class_hid_field_report_type;
    ULONG           ux_host_class_hid_field_report_id;
    ULONG           ux_host_class_hid_field_report_offset;
    ULONG           ux_host_class_hid_field_report_size;
    ULONG           ux_host_class_hid_field_report_count;
    ULONG           ux_host_class_hid_field_value;
    ULONG           *ux_host_class_hid_field_usages;
    ULONG           ux_host_class_hid_field_number_usage;
    ULONG           *ux_host_class_hid_field_values;
    ULONG           ux_host_class_hid_field_number_values;
    struct UX_HOST_CLASS_HID_REPORT_STRUCT  *ux_host_class_hid_field_report;
    struct UX_HOST_CLASS_HID_FIELD_STRUCT  *ux_host_class_hid_field_next_field;
} UX_HOST_CLASS_HID_FIELD;




typedef struct UX_HOST_CLASS_HID_REPORT_STRUCT {

    ULONG           ux_host_class_hid_report_id;
    ULONG           ux_host_class_hid_report_type;
    struct UX_HOST_CLASS_HID_FIELD_STRUCT  *ux_host_class_hid_report_field;
    ULONG           ux_host_class_hid_report_number_item;
    ULONG           ux_host_class_hid_report_byte_length;
    ULONG           ux_host_class_hid_report_bit_length;
    ULONG           ux_host_class_hid_report_callback_flags;
    VOID            *ux_host_class_hid_report_callback_buffer;
    ULONG           ux_host_class_hid_report_callback_length;
    VOID            (*ux_host_class_hid_report_callback_function) (struct UX_HOST_CLASS_HID_REPORT_CALLBACK_STRUCT *);
    struct UX_HOST_CLASS_HID_REPORT_STRUCT  *ux_host_class_hid_report_next_report;
} UX_HOST_CLASS_HID_REPORT;




typedef struct UX_HOST_CLASS_HID_PARSER_STRUCT {

    UX_HOST_CLASS_HID_GLOBAL_ITEM ux_host_class_hid_parser_global;
    UX_HOST_CLASS_HID_GLOBAL_ITEM                 ux_host_class_hid_parser_global_pool[UX_HOST_CLASS_HID_MAX_GLOBAL];
    ULONG           ux_host_class_hid_parser_number_global;
    UX_HOST_CLASS_HID_LOCAL_ITEM                  ux_host_class_hid_parser_local;
    ULONG           ux_host_class_hid_parser_application;
    ULONG           ux_host_class_hid_parser_collection[UX_HOST_CLASS_HID_MAX_COLLECTION];
    ULONG           ux_host_class_hid_parser_number_collection;
    ULONG           ux_host_class_hid_parser_main_page;
    ULONG           ux_host_class_hid_parser_main_usage;
    UX_HOST_CLASS_HID_REPORT                      *ux_host_class_hid_parser_input_report;
    UX_HOST_CLASS_HID_REPORT                      *ux_host_class_hid_parser_output_report;
    UX_HOST_CLASS_HID_REPORT                      *ux_host_class_hid_parser_feature_report;
} UX_HOST_CLASS_HID_PARSER;




typedef struct UX_HOST_CLASS_HID_ITEM_STRUCT {

    UCHAR           ux_host_class_hid_item_report_type;
    UCHAR           ux_host_class_hid_item_report_tag;
    USHORT          ux_host_class_hid_item_report_length;
    USHORT          ux_host_class_hid_item_report_format;
}  UX_HOST_CLASS_HID_ITEM;




typedef struct UX_HOST_CLASS_HID_STRUCT {

    struct UX_HOST_CLASS_HID_STRUCT               *ux_host_class_hid_next_instance;
    UX_HOST_CLASS   *ux_host_class_hid_class;
    UX_DEVICE       *ux_host_class_hid_device;
    UX_ENDPOINT     *ux_host_class_hid_interrupt_endpoint;

    UX_ENDPOINT     *ux_host_class_hid_interrupt_out_endpoint;

    UINT            ux_host_class_hid_interrupt_endpoint_status;
    UX_INTERFACE    *ux_host_class_hid_interface;
    ULONG           ux_host_class_hid_state;
    struct UX_HID_DESCRIPTOR_STRUCT          ux_host_class_hid_descriptor;
    UX_HOST_CLASS_HID_PARSER                      ux_host_class_hid_parser;
    struct UX_HOST_CLASS_HID_CLIENT_STRUCT        *ux_host_class_hid_client;

    UX_SEMAPHORE    ux_host_class_hid_semaphore;

    ULONG           ux_host_class_hid_flags;
    UCHAR           *ux_host_class_hid_allocated;
    UINT            ux_host_class_hid_status;
    UCHAR           ux_host_class_hid_enum_state;
    UCHAR           ux_host_class_hid_next_state;
    UCHAR           ux_host_class_hid_cmd_state;
    UCHAR           reserved[1];

} UX_HOST_CLASS_HID;
























typedef struct UX_HOST_CLASS_HID_CLIENT_COMMAND_STRUCT {

    UINT            ux_host_class_hid_client_command_request;
    VOID            *ux_host_class_hid_client_command_container;
    UX_HOST_CLASS_HID    *ux_host_class_hid_client_command_instance;
    ULONG           ux_host_class_hid_client_command_page;
    ULONG           ux_host_class_hid_client_command_usage;
} UX_HOST_CLASS_HID_CLIENT_COMMAND;




typedef struct UX_HOST_CLASS_HID_CLIENT_REPORT_STRUCT {

    UX_HOST_CLASS_HID_REPORT *ux_host_class_hid_client_report;
    ULONG           *ux_host_class_hid_client_report_buffer;
    ULONG           ux_host_class_hid_client_report_length; 
    ULONG           ux_host_class_hid_client_report_actual_length; 
    UINT            ux_host_class_hid_client_report_flags;
} UX_HOST_CLASS_HID_CLIENT_REPORT;




typedef struct UX_HOST_CLASS_HID_CLIENT_STRUCT {

    ULONG           ux_host_class_hid_client_status;

    UCHAR           *ux_host_class_hid_client_name;

    UCHAR           ux_host_class_hid_client_name[UX_HOST_CLASS_HID_MAX_CLIENT_NAME_LENGTH + 1]; 

    UINT            (*ux_host_class_hid_client_handler) (struct UX_HOST_CLASS_HID_CLIENT_COMMAND_STRUCT *);
    VOID            *ux_host_class_hid_client_local_instance;  

    VOID            (*ux_host_class_hid_client_function)(struct UX_HOST_CLASS_HID_CLIENT_STRUCT *);

} UX_HOST_CLASS_HID_CLIENT;



UINT    _ux_host_class_hid_activate(UX_HOST_CLASS_COMMAND  *command);
UINT    _ux_host_class_hid_client_register(UCHAR *hid_client_name, UINT (*hid_client_handler)(struct UX_HOST_CLASS_HID_CLIENT_COMMAND_STRUCT *));
UINT    _ux_host_class_hid_client_search(UX_HOST_CLASS_HID *hid);
UINT    _ux_host_class_hid_configure(UX_HOST_CLASS_HID *hid);
UINT    _ux_host_class_hid_deactivate(UX_HOST_CLASS_COMMAND *command);
UINT    _ux_host_class_hid_descriptor_parse(UX_HOST_CLASS_HID *hid);
UINT    _ux_host_class_hid_entry(UX_HOST_CLASS_COMMAND *command);
UINT    _ux_host_class_hid_field_decompress(UX_HOST_CLASS_HID_FIELD *hid_field, UCHAR *report_buffer, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report);
UINT    _ux_host_class_hid_global_item_parse(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_ITEM *item, UCHAR *descriptor);
UINT    _ux_host_class_hid_idle_get(UX_HOST_CLASS_HID *hid, USHORT *idle_time, USHORT report_id);
UINT    _ux_host_class_hid_idle_set(UX_HOST_CLASS_HID *hid, USHORT idle_time, USHORT report_id);
UINT    _ux_host_class_hid_instance_clean(UX_HOST_CLASS_HID *hid);
UINT    _ux_host_class_hid_interrupt_endpoint_search(UX_HOST_CLASS_HID *hid);
ULONG   _ux_host_class_hid_item_data_get(UCHAR *descriptor, UX_HOST_CLASS_HID_ITEM *item);
UINT    _ux_host_class_hid_local_item_parse(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_ITEM *item, UCHAR *descriptor);
UINT    _ux_host_class_hid_main_item_parse(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_ITEM *item, UCHAR *descriptor);
UINT    _ux_host_class_hid_periodic_report_start(UX_HOST_CLASS_HID *hid);
UINT    _ux_host_class_hid_periodic_report_stop(UX_HOST_CLASS_HID *hid);
UINT    _ux_host_class_hid_report_add(UX_HOST_CLASS_HID *hid, UCHAR *descriptor, UX_HOST_CLASS_HID_ITEM *item);
UINT    _ux_host_class_hid_report_callback_register(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_REPORT_CALLBACK *call_back);
UINT    _ux_host_class_hid_report_compress(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report, UCHAR *report_buffer, ULONG report_length);
UINT    _ux_host_class_hid_report_decompress(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report, UCHAR  *report_buffer, ULONG report_length);
UINT    _ux_host_class_hid_report_descriptor_get(UX_HOST_CLASS_HID *hid, ULONG length);
UINT    _ux_host_class_hid_report_get(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report);
UINT    _ux_host_class_hid_report_id_get(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_REPORT_GET_ID *report_id);
UINT    _ux_host_class_hid_report_item_analyse(UCHAR *descriptor, UX_HOST_CLASS_HID_ITEM *item);
UINT    _ux_host_class_hid_report_set(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report);
UINT    _ux_host_class_hid_resources_free(UX_HOST_CLASS_HID *hid);
VOID    _ux_host_class_hid_transfer_request_completed(UX_TRANSFER *transfer_request);

UINT    _ux_host_class_hid_tasks_run(UX_HOST_CLASS *hid_class);
UINT    _ux_host_class_hid_idle_set_run(UX_HOST_CLASS_HID *hid, USHORT idle_time, USHORT report_id);
UINT    _ux_host_class_hid_report_set_run(UX_HOST_CLASS_HID *hid, UX_HOST_CLASS_HID_CLIENT_REPORT *client_report);


















   

} 




