







typedef struct cpp_reader cpp_reader;
typedef struct cpp_buffer cpp_buffer;
typedef struct cpp_options cpp_options;
typedef struct cpp_token cpp_token;
typedef struct cpp_string cpp_string;
typedef struct cpp_hashnode cpp_hashnode;
typedef struct cpp_macro cpp_macro;
typedef struct cpp_callbacks cpp_callbacks;
typedef struct cpp_dir cpp_dir;

struct _cpp_file;







































































































enum cpp_ttype {
  TTYPE_TABLE N_TTYPES,   CPP_KEYWORD,   CPP_LAST_EQ        = CPP_LSHIFT, CPP_FIRST_DIGRAPH  = CPP_HASH, CPP_LAST_PUNCTUATOR= CPP_ATSIGN, CPP_LAST_CPP_OP    = CPP_LESS_EQ };














enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X, CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11, CLK_STDC17, CLK_STDC2X, CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11, CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17, CLK_GNUCXX20, CLK_CXX20, CLK_GNUCXX23, CLK_CXX23, CLK_ASM};







struct GTY(()) cpp_string {
  unsigned int len;
  const unsigned char *text;
};

















enum cpp_token_fld_kind {
  CPP_TOKEN_FLD_NODE, CPP_TOKEN_FLD_SOURCE, CPP_TOKEN_FLD_STR, CPP_TOKEN_FLD_ARG_NO, CPP_TOKEN_FLD_TOKEN_NO, CPP_TOKEN_FLD_PRAGMA, CPP_TOKEN_FLD_NONE };








struct GTY(()) cpp_macro_arg {
  
  unsigned int arg_no;
  
  cpp_hashnode * GTY ((nested_ptr (union tree_node, "%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL", "%h ? HT_IDENT_TO_GCC_IDENT (HT_NODE (%h)) : NULL")))


       spelling;
};


struct GTY(()) cpp_identifier {
  
  cpp_hashnode * GTY ((nested_ptr (union tree_node, "%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL", "%h ? HT_IDENT_TO_GCC_IDENT (HT_NODE (%h)) : NULL")))


       node;
  
  cpp_hashnode * GTY ((nested_ptr (union tree_node, "%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL", "%h ? HT_IDENT_TO_GCC_IDENT (HT_NODE (%h)) : NULL")))


       spelling;
};


struct GTY(()) cpp_token {

  
  location_t src_loc;

  ENUM_BITFIELD(cpp_ttype) type : CHAR_BIT;  
  unsigned short flags;		

  union cpp_token_u {
    
    struct cpp_identifier GTY ((tag ("CPP_TOKEN_FLD_NODE"))) node;
	 
    
    cpp_token * GTY ((tag ("CPP_TOKEN_FLD_SOURCE"))) source;

    
    struct cpp_string GTY ((tag ("CPP_TOKEN_FLD_STR"))) str;

    
    struct cpp_macro_arg GTY ((tag ("CPP_TOKEN_FLD_ARG_NO"))) macro_arg;

    
    unsigned int GTY ((tag ("CPP_TOKEN_FLD_TOKEN_NO"))) token_no;

    
    unsigned int GTY ((tag ("CPP_TOKEN_FLD_PRAGMA"))) pragma;
  } GTY ((desc ("cpp_token_val_index (&%1)"))) val;
};


extern enum cpp_token_fld_kind cpp_token_val_index (const cpp_token *tok);









typedef unsigned CPPCHAR_SIGNED_T cppchar_t;
typedef CPPCHAR_SIGNED_T cppchar_signed_t;


enum cpp_deps_style { DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM };


enum cpp_normalize_level {
  
  normalized_KC = 0,  normalized_C,  normalized_identifier_C,  normalized_none };







enum cpp_main_search  {
  CMS_none,     CMS_header, CMS_user, CMS_system, };





struct cpp_options {
  
  enum c_lang lang;

  
  unsigned char cplusplus;

  
  unsigned char cplusplus_comments;

  
  unsigned char objc;

  
  unsigned char discard_comments;

  
  unsigned char discard_comments_in_macro_exp;

  
  unsigned char trigraphs;

  
  unsigned char digraphs;

  
  unsigned char extended_numbers;

  
  unsigned char uliterals;

  
  unsigned char utf8_char_literals;

  
  unsigned char rliterals;

  
  unsigned char print_include_names;

  
  unsigned char cpp_warn_deprecated;

  
  unsigned char warn_comments;

  
  unsigned char warn_date_time;

  
  unsigned char warn_missing_include_dirs;

  
  unsigned char warn_trigraphs;

  
  unsigned char warn_multichar;

  
  unsigned char cpp_warn_traditional;

  
  unsigned char cpp_warn_long_long;

  
  unsigned char warn_endif_labels;

  
  unsigned char warn_num_sign_change;

  
  unsigned char warn_variadic_macros;

  
  unsigned char warn_builtin_macro_redefined;

  
  unsigned char cpp_warn_implicit_fallthrough;

  
  unsigned char remap;

  
  unsigned char dollars_in_ident;

  
  unsigned char extended_identifiers;

  
  unsigned char warn_dollars;

  
  unsigned char warn_undef;

  
  unsigned char warn_expansion_to_defined;

  
  unsigned char warn_unused_macros;

  
  unsigned char c99;

  
  unsigned char std;

  
  unsigned char cpp_pedantic;

  
  unsigned char preprocessed;
  
  
  unsigned char debug;

  
  unsigned char track_macro_expansion;

  
  unsigned char operator_names;

  
  unsigned char warn_cxx_operator_names;

  
  unsigned char traditional;

  
  unsigned char user_literals;

  
  unsigned char warn_literal_suffix;

  
  unsigned char ext_numeric_literals;

  
  unsigned char c11_identifiers;

  
  unsigned char cxx23_identifiers;

  
  unsigned char binary_constants;

  
  unsigned char digit_separators;

  
  unsigned char dfp_constants;

  
  unsigned char va_opt;

  
  unsigned char scope;

  
  unsigned char elifdef;

  
  unsigned char module_directives;

  
  unsigned char size_t_literals;

  
  const char *narrow_charset;

  
  const char *wide_charset;

  
  const char *input_charset;

  
  int warn_normalize;

  
  bool warn_invalid_pch;

  
  bool restore_pch_deps;

  
  signed char cpp_warn_c90_c99_compat;

  
  signed char cpp_warn_c11_c2x_compat;

  
  bool cpp_warn_cxx11_compat;

  
  struct {
    
    enum cpp_deps_style style;

    
    bool missing_files;

    
    bool phony_targets;

    
    bool modules;

    
    bool ignore_main_file;

    
    bool need_preprocessor_output;
  } deps;

  

  
  size_t precision, char_precision, int_precision, wchar_precision;

  
  bool unsigned_char, unsigned_wchar;

  
  bool bytes_big_endian;

  
  unsigned char stdc_0_in_system_headers;

  
  bool directives_only;

  
  bool canonical_system_headers;

  
  unsigned int max_include_depth;

  cpp_main_search main_search : 8;
};



enum cpp_diagnostic_level {
  
  CPP_DL_WARNING = 0,  CPP_DL_WARNING_SYSHDR,  CPP_DL_PEDWARN,  CPP_DL_ERROR,  CPP_DL_ICE,  CPP_DL_NOTE,  CPP_DL_FATAL };















enum cpp_warning_reason {
  CPP_W_NONE = 0, CPP_W_DEPRECATED, CPP_W_COMMENTS, CPP_W_MISSING_INCLUDE_DIRS, CPP_W_TRIGRAPHS, CPP_W_MULTICHAR, CPP_W_TRADITIONAL, CPP_W_LONG_LONG, CPP_W_ENDIF_LABELS, CPP_W_NUM_SIGN_CHANGE, CPP_W_VARIADIC_MACROS, CPP_W_BUILTIN_MACRO_REDEFINED, CPP_W_DOLLARS, CPP_W_UNDEF, CPP_W_UNUSED_MACROS, CPP_W_CXX_OPERATOR_NAMES, CPP_W_NORMALIZE, CPP_W_INVALID_PCH, CPP_W_WARNING_DIRECTIVE, CPP_W_LITERAL_SUFFIX, CPP_W_SIZE_T_LITERALS, CPP_W_DATE_TIME, CPP_W_PEDANTIC, CPP_W_C90_C99_COMPAT, CPP_W_C11_C2X_COMPAT, CPP_W_CXX11_COMPAT, CPP_W_EXPANSION_TO_DEFINED };




























typedef const char *(*missing_header_cb)(cpp_reader *, const char *header, cpp_dir **);


struct cpp_callbacks {
  
  void (*line_change) (cpp_reader *, const cpp_token *, int);

  
  void (*file_change) (cpp_reader *, const line_map_ordinary *);

  void (*dir_change) (cpp_reader *, const char *);
  void (*include) (cpp_reader *, location_t, const unsigned char *, const char *, int, const cpp_token **);
  void (*define) (cpp_reader *, location_t, cpp_hashnode *);
  void (*undef) (cpp_reader *, location_t, cpp_hashnode *);
  void (*ident) (cpp_reader *, location_t, const cpp_string *);
  void (*def_pragma) (cpp_reader *, location_t);
  int (*valid_pch) (cpp_reader *, const char *, int);
  void (*read_pch) (cpp_reader *, const char *, int, const char *);
  missing_header_cb missing_header;

  
  cpp_hashnode * (*macro_to_expand) (cpp_reader *, const cpp_token *);

  
  bool (*diagnostic) (cpp_reader *, enum cpp_diagnostic_level, enum cpp_warning_reason, rich_location *, const char *, va_list *)



       ATTRIBUTE_FPTR_PRINTF(5,0);

  
  void (*used_define) (cpp_reader *, location_t, cpp_hashnode *);
  void (*used_undef) (cpp_reader *, location_t, cpp_hashnode *);
  
  void (*before_define) (cpp_reader *);
  
  void (*used) (cpp_reader *, location_t, cpp_hashnode *);

  
  int (*has_attribute) (cpp_reader *, bool);

  
  int (*has_builtin) (cpp_reader *);

  
  void (*user_lazy_macro) (cpp_reader *, cpp_macro *, unsigned);

  
  cpp_macro *(*user_deferred_macro) (cpp_reader *, location_t, cpp_hashnode *);

  
  time_t (*get_source_date_epoch) (cpp_reader *);

  
  const char *(*get_suggestion) (cpp_reader *, const char *, const char *const *);

  
  void (*comment) (cpp_reader *, location_t, const unsigned char *, size_t);

  
  const char *(*remap_filename) (const char*);

  
  char *(*translate_include) (cpp_reader *, line_maps *, location_t, const char *path);
};








struct cpp_dir {
  
  struct cpp_dir *next;

  
  char *name;
  unsigned int len;

  
  unsigned char sysp;

  
  bool user_supplied_p;

  
  char *canonical_name;

  
  const char **name_map;

  
  char *(*construct) (const char *header, cpp_dir *dir);

  
  INO_T_CPP;
  dev_t dev;
};


enum cpp_macro_kind {
  cmk_macro,	 cmk_assert, cmk_traditional };




struct GTY(()) cpp_macro {
  union cpp_parm_u  {
    
    cpp_hashnode ** GTY ((tag ("false"), nested_ptr (union tree_node, "%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL", "%h ? HT_IDENT_TO_GCC_IDENT (HT_NODE (%h)) : NULL"), length ("%1.paramc"))) params;




    
    cpp_macro *GTY ((tag ("true"))) next;
  } GTY ((desc ("%1.kind == cmk_assert"))) parm;

  
  location_t line;

  
  
  unsigned int count;

  
  unsigned short paramc;

  
  unsigned char lazy;

  
  unsigned kind : 2;

  
  unsigned int fun_like : 1;

  
  unsigned int variadic : 1;

  
  unsigned int syshdr   : 1;

  
  unsigned int used     : 1;

  
  unsigned int extra_tokens : 1;

  
  unsigned int imported_p : 1;

  

  union cpp_exp_u {
    
    cpp_token GTY ((tag ("false"), length ("%1.count"))) tokens[1];

    
    const unsigned char *GTY ((tag ("true"))) text;
  } GTY ((desc ("%1.kind == cmk_traditional"))) exp;
};















enum node_type {
  NT_VOID = 0,	    NT_MACRO_ARG, NT_USER_MACRO, NT_BUILTIN_MACRO, NT_MACRO_MASK = NT_USER_MACRO };






enum cpp_builtin_type {
  BT_SPECLINE = 0,		 BT_DATE, BT_FILE, BT_FILE_NAME, BT_BASE_FILE, BT_INCLUDE_LEVEL, BT_TIME, BT_STDC, BT_PRAGMA, BT_TIMESTAMP, BT_COUNTER, BT_HAS_ATTRIBUTE, BT_HAS_STD_ATTRIBUTE, BT_HAS_BUILTIN, BT_HAS_INCLUDE, BT_HAS_INCLUDE_NEXT };























union GTY(()) _cpp_hashnode_value {
  
  cpp_macro * GTY((tag ("NT_VOID"))) answers;
  
  cpp_macro * GTY((tag ("NT_USER_MACRO"))) macro;
  
  enum cpp_builtin_type GTY ((tag ("NT_BUILTIN_MACRO"))) builtin;
  
  unsigned short GTY ((tag ("NT_MACRO_ARG"))) arg_index;
};

struct GTY(()) cpp_hashnode {
  struct ht_identifier ident;
  unsigned int is_directive : 1;
  unsigned int directive_index : 7;	
  unsigned int rid_code : 8;		
  unsigned int flags : 9;		
  ENUM_BITFIELD(node_type) type : 2;	

  

  
  unsigned deferred;			

  union _cpp_hashnode_value GTY ((desc ("%1.type"))) value;
};



class cpp_string_location_reader {
 public:
  cpp_string_location_reader (location_t src_loc, line_maps *line_table);

  source_range get_next ();

 private:
  location_t m_loc;
  int m_offset_per_column;
};



class cpp_substring_ranges {
 public:
  cpp_substring_ranges ();
  ~cpp_substring_ranges ();

  int get_num_ranges () const { return m_num_ranges; }
  source_range get_range (int idx) const {
    linemap_assert (idx < m_num_ranges);
    return m_ranges[idx];
  }

  void add_range (source_range range);
  void add_n_ranges (int num, cpp_string_location_reader &loc_reader);

 private:
  source_range *m_ranges;
  int m_num_ranges;
  int m_alloc_ranges;
};


extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *, class line_maps *);


extern void cpp_set_line_map (cpp_reader *, class line_maps *);


extern void cpp_set_lang (cpp_reader *, enum c_lang);


extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);


extern cpp_options *cpp_get_options (cpp_reader *) ATTRIBUTE_PURE;
extern cpp_callbacks *cpp_get_callbacks (cpp_reader *) ATTRIBUTE_PURE;
extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);
extern class mkdeps *cpp_get_deps (cpp_reader *) ATTRIBUTE_PURE;

extern const char *cpp_probe_header_unit (cpp_reader *, const char *file, bool angle_p,  location_t);


extern const char *cpp_get_narrow_charset_name (cpp_reader *) ATTRIBUTE_PURE;
extern const char *cpp_get_wide_charset_name (cpp_reader *) ATTRIBUTE_PURE;


extern const char *cpp_read_main_file (cpp_reader *, const char *, bool injecting = false);
extern location_t cpp_main_loc (const cpp_reader *);


extern void cpp_retrofit_as_include (cpp_reader *);


extern void cpp_init_special_builtins (cpp_reader *);


extern void cpp_init_builtins (cpp_reader *, int);


extern void cpp_post_options (cpp_reader *);


extern void cpp_init_iconv (cpp_reader *);


extern void cpp_finish (cpp_reader *, FILE *deps_stream);


extern void cpp_destroy (cpp_reader *);

extern unsigned int cpp_token_len (const cpp_token *);
extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);
extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *, unsigned char *, bool);
extern void cpp_register_pragma (cpp_reader *, const char *, const char *, void (*) (cpp_reader *), bool);
extern void cpp_register_deferred_pragma (cpp_reader *, const char *, const char *, unsigned, bool, bool);
extern int cpp_avoid_paste (cpp_reader *, const cpp_token *, const cpp_token *);
extern const cpp_token *cpp_get_token (cpp_reader *);
extern const cpp_token *cpp_get_token_with_location (cpp_reader *, location_t *);
inline bool cpp_user_macro_p (const cpp_hashnode *node)
{
  return node->type == NT_USER_MACRO;
}
inline bool cpp_builtin_macro_p (const cpp_hashnode *node)
{
  return node->type == NT_BUILTIN_MACRO;
}
inline bool cpp_macro_p (const cpp_hashnode *node)
{
  return node->type & NT_MACRO_MASK;
}
inline cpp_macro *cpp_set_deferred_macro (cpp_hashnode *node, cpp_macro *forced = NULL)
{
  cpp_macro *old = node->value.macro;

  node->value.macro = forced;
  node->type = NT_USER_MACRO;
  node->flags &= ~NODE_USED;

  return old;
}
cpp_macro *cpp_get_deferred_macro (cpp_reader *, cpp_hashnode *, location_t);


inline bool cpp_fun_like_macro_p (cpp_hashnode *node)
{
  return cpp_user_macro_p (node) && node->value.macro->fun_like;
}

extern const unsigned char *cpp_macro_definition (cpp_reader *, cpp_hashnode *);
extern const unsigned char *cpp_macro_definition (cpp_reader *, cpp_hashnode *, const cpp_macro *);
inline location_t cpp_macro_definition_location (cpp_hashnode *node)
{
  const cpp_macro *macro = node->value.macro;
  return macro ? macro->line : 0;
}

enum class CPP_time_kind  {
  FIXED = -1,	 DYNAMIC = -2, UNKNOWN = -3 };


extern CPP_time_kind cpp_get_date (cpp_reader *, time_t *);

extern void _cpp_backup_tokens (cpp_reader *, unsigned int);
extern const cpp_token *cpp_peek_token (cpp_reader *, int);


extern cppchar_t cpp_interpret_charconst (cpp_reader *, const cpp_token *, unsigned int *, int *);

extern bool cpp_interpret_string (cpp_reader *, const cpp_string *, size_t, cpp_string *, enum cpp_ttype);

extern const char *cpp_interpret_string_ranges (cpp_reader *pfile, const cpp_string *from, cpp_string_location_reader *, size_t count, cpp_substring_ranges *out, enum cpp_ttype type);




extern bool cpp_interpret_string_notranslate (cpp_reader *, const cpp_string *, size_t, cpp_string *, enum cpp_ttype);



extern cppchar_t cpp_host_to_exec_charset (cpp_reader *, cppchar_t);


extern void cpp_define (cpp_reader *, const char *);
extern void cpp_define_unused (cpp_reader *, const char *);
extern void cpp_define_formatted (cpp_reader *pfile,  const char *fmt, ...) ATTRIBUTE_PRINTF_2;
extern void cpp_define_formatted_unused (cpp_reader *pfile, const char *fmt, ...) ATTRIBUTE_PRINTF_2;

extern void cpp_assert (cpp_reader *, const char *);
extern void cpp_undef (cpp_reader *, const char *);
extern void cpp_unassert (cpp_reader *, const char *);


extern void cpp_define_lazily (cpp_reader *, cpp_hashnode *node, unsigned N);


extern void cpp_undef_all (cpp_reader *);

extern cpp_buffer *cpp_push_buffer (cpp_reader *, const unsigned char *, size_t, int);
extern int cpp_defined (cpp_reader *, const unsigned char *, int);




typedef uint64_t cpp_num_part;
typedef struct cpp_num cpp_num;
struct cpp_num {
  cpp_num_part high;
  cpp_num_part low;
  bool unsignedp;  
  bool overflow;   
};










































extern unsigned cpp_classify_number (cpp_reader *, const cpp_token *, const char **, location_t);


extern unsigned int cpp_interpret_float_suffix (cpp_reader *, const char *, size_t);


extern unsigned int cpp_interpret_int_suffix (cpp_reader *, const char *, size_t);


extern cpp_num cpp_interpret_integer (cpp_reader *, const cpp_token *, unsigned int);


cpp_num cpp_num_sign_extend (cpp_num, size_t);


extern bool cpp_error (cpp_reader *, enum cpp_diagnostic_level, const char *msgid, ...)
  ATTRIBUTE_PRINTF_3;
extern bool cpp_warning (cpp_reader *, enum cpp_warning_reason, const char *msgid, ...)
  ATTRIBUTE_PRINTF_3;
extern bool cpp_pedwarning (cpp_reader *, enum cpp_warning_reason, const char *msgid, ...)
  ATTRIBUTE_PRINTF_3;
extern bool cpp_warning_syshdr (cpp_reader *, enum cpp_warning_reason reason, const char *msgid, ...)
  ATTRIBUTE_PRINTF_3;


extern bool cpp_warning_at (cpp_reader *, enum cpp_warning_reason, rich_location *richloc, const char *msgid, ...)
  ATTRIBUTE_PRINTF_4;
extern bool cpp_pedwarning_at (cpp_reader *, enum cpp_warning_reason, rich_location *richloc, const char *msgid, ...)
  ATTRIBUTE_PRINTF_4;


extern bool cpp_errno (cpp_reader *, enum cpp_diagnostic_level, const char *msgid);

extern bool cpp_errno_filename (cpp_reader *, enum cpp_diagnostic_level, const char *filename, location_t loc);


extern bool cpp_error_with_line (cpp_reader *, enum cpp_diagnostic_level, location_t, unsigned, const char *msgid, ...)

  ATTRIBUTE_PRINTF_5;
extern bool cpp_warning_with_line (cpp_reader *, enum cpp_warning_reason, location_t, unsigned, const char *msgid, ...)

  ATTRIBUTE_PRINTF_5;
extern bool cpp_pedwarning_with_line (cpp_reader *, enum cpp_warning_reason, location_t, unsigned, const char *msgid, ...)

  ATTRIBUTE_PRINTF_5;
extern bool cpp_warning_with_line_syshdr (cpp_reader *, enum cpp_warning_reason, location_t, unsigned, const char *msgid, ...)

  ATTRIBUTE_PRINTF_5;

extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level, location_t src_loc, const char *msgid, ...)
  ATTRIBUTE_PRINTF_4;

extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level, rich_location *richloc, const char *msgid, ...)
  ATTRIBUTE_PRINTF_4;


extern int cpp_ideq (const cpp_token *, const char *);
extern void cpp_output_line (cpp_reader *, FILE *);
extern unsigned char *cpp_output_line_to_string (cpp_reader *, const unsigned char *);
extern const unsigned char *cpp_alloc_token_string (cpp_reader *, const unsigned char *, unsigned);
extern void cpp_output_token (const cpp_token *, FILE *);
extern const char *cpp_type2name (enum cpp_ttype, unsigned char flags);

extern cppchar_t cpp_parse_escape (cpp_reader *, const unsigned char ** pstr, const unsigned char *limit, int wide);



typedef struct {
  
  char *comment;

  
  location_t sloc;
} cpp_comment;



typedef struct {
  
  cpp_comment *entries;

  
  int count;

  
  int allocated;
} cpp_comment_table;


extern cpp_comment_table *cpp_get_comments (cpp_reader *);




extern cpp_hashnode *cpp_lookup (cpp_reader *, const unsigned char *, unsigned int);

typedef int (*cpp_cb) (cpp_reader *, cpp_hashnode *, void *);
extern void cpp_forall_identifiers (cpp_reader *, cpp_cb, void *);


extern void cpp_scan_nooutput (cpp_reader *);
extern int  cpp_sys_macro_p (cpp_reader *);
extern unsigned char *cpp_quote_string (unsigned char *, const unsigned char *, unsigned int);
extern bool cpp_compare_macros (const cpp_macro *macro1, const cpp_macro *macro2);


extern bool cpp_included (cpp_reader *, const char *);
extern bool cpp_included_before (cpp_reader *, const char *, location_t);
extern void cpp_make_system_header (cpp_reader *, int, int);
extern bool cpp_push_include (cpp_reader *, const char *);
extern bool cpp_push_default_include (cpp_reader *, const char *);
extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);
extern const char *cpp_get_path (struct _cpp_file *);
extern cpp_dir *cpp_get_dir (struct _cpp_file *);
extern cpp_buffer *cpp_get_buffer (cpp_reader *);
extern struct _cpp_file *cpp_get_file (cpp_buffer *);
extern cpp_buffer *cpp_get_prev (cpp_buffer *);
extern void cpp_clear_file_cache (cpp_reader *);


struct cpp_converted_source {
  char *to_free;
  char *data;
  size_t len;
};
cpp_converted_source cpp_get_converted_source (const char *fname, const char *input_charset);


struct save_macro_data;
extern int cpp_save_state (cpp_reader *, FILE *);
extern int cpp_write_pch_deps (cpp_reader *, FILE *);
extern int cpp_write_pch_state (cpp_reader *, FILE *);
extern int cpp_valid_state (cpp_reader *, const char *, int);
extern void cpp_prepare_state (cpp_reader *, struct save_macro_data **);
extern int cpp_read_state (cpp_reader *, const char *, FILE *, struct save_macro_data *);


extern void cpp_force_token_locations (cpp_reader *, location_t);
extern void cpp_stop_forcing_token_locations (cpp_reader *);
enum CPP_DO_task {
  CPP_DO_print, CPP_DO_location, CPP_DO_token };



extern void cpp_directive_only_process (cpp_reader *pfile, void *data, void (*cb) (cpp_reader *, CPP_DO_task, void *data, ...));





extern enum cpp_ttype cpp_userdef_string_remove_type (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_string_add_type (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_char_remove_type (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_char_add_type (enum cpp_ttype type);
extern bool cpp_userdef_string_p (enum cpp_ttype type);
extern bool cpp_userdef_char_p (enum cpp_ttype type);
extern const char * cpp_get_userdef_suffix (const cpp_token *);





struct cpp_decoded_char {
  const char *m_start_byte;
  const char *m_next_byte;

  bool m_valid_ch;
  cppchar_t m_ch;
};



struct cpp_char_column_policy {
  cpp_char_column_policy (int tabstop, int (*width_cb) (cppchar_t c))
  : m_tabstop (tabstop), m_undecoded_byte_width (1), m_width_cb (width_cb)

  {}

  int m_tabstop;
  
  int m_undecoded_byte_width;
  int (*m_width_cb) (cppchar_t c);
};


class cpp_display_width_computation {
 public:
  cpp_display_width_computation (const char *data, int data_length, const cpp_char_column_policy &policy);
  const char *next_byte () const { return m_next; }
  int bytes_processed () const { return m_next - m_begin; }
  int bytes_left () const { return m_bytes_left; }
  bool done () const { return !bytes_left (); }
  int display_cols_processed () const { return m_display_cols; }

  int process_next_codepoint (cpp_decoded_char *out);
  int advance_display_cols (int n);

 private:
  const char *const m_begin;
  const char *m_next;
  size_t m_bytes_left;
  const cpp_char_column_policy &m_policy;
  int m_display_cols;
};



int cpp_byte_column_to_display_column (const char *data, int data_length, int column, const cpp_char_column_policy &policy);

inline int cpp_display_width (const char *data, int data_length, const cpp_char_column_policy &policy)
{
  return cpp_byte_column_to_display_column (data, data_length, data_length, policy);
}
int cpp_display_column_to_byte_column (const char *data, int data_length, int display_col, const cpp_char_column_policy &policy);

int cpp_wcwidth (cppchar_t c);

bool cpp_input_conversion_is_trivial (const char *input_charset);
int cpp_check_utf8_bom (const char *data, size_t data_length);


