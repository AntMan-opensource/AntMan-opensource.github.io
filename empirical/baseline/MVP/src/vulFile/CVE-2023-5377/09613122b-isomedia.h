








extern "C" {










enum {
	
	GF_ISOM_REF_OD = GF_4CC( 'm', 'p', 'o', 'd' ),  GF_ISOM_REF_DECODE = GF_4CC( 'd', 'p', 'n', 'd' ),  GF_ISOM_REF_OCR = GF_4CC( 's', 'y', 'n', 'c' ),  GF_ISOM_REF_IPI = GF_4CC( 'i', 'p', 'i', 'r' ),  GF_ISOM_REF_META = GF_4CC( 'c', 'd', 's', 'c' ),  GF_ISOM_REF_HINT = GF_4CC( 'h', 'i', 'n', 't' ),  GF_ISOM_REF_CHAP = GF_4CC( 'c', 'h', 'a', 'p' ),  GF_ISOM_REF_BASE = GF_4CC( 's', 'b', 'a', 's' ),  GF_ISOM_REF_SCAL = GF_4CC( 's', 'c', 'a', 'l' ),  GF_ISOM_REF_TBAS = GF_4CC( 't', 'b', 'a', 's' ),  GF_ISOM_REF_SABT = GF_4CC( 's', 'a', 'b', 't' ),  GF_ISOM_REF_OREF = GF_4CC( 'o', 'r', 'e', 'f' ),  GF_ISOM_REF_FONT = GF_4CC( 'f', 'o', 'n', 't' ),  GF_ISOM_REF_HIND = GF_4CC( 'h', 'i', 'n', 'd' ),  GF_ISOM_REF_VDEP = GF_4CC( 'v', 'd', 'e', 'p' ),  GF_ISOM_REF_VPLX = GF_4CC( 'v', 'p', 'l', 'x' ),  GF_ISOM_REF_SUBT = GF_4CC( 's', 'u', 'b', 't' ),  GF_ISOM_REF_THUMB = GF_4CC( 't', 'h', 'm', 'b' ),   GF_ISOM_REF_ADDA = GF_4CC( 'a', 'd', 'd', 'a' ),  GF_ISOM_REF_ADRC = GF_4CC( 'a', 'd', 'r', 'c' ),  GF_ISOM_REF_ILOC = GF_4CC( 'i', 'l', 'o', 'c' ),  GF_ISOM_REF_AVCP = GF_4CC( 'a', 'v', 'c', 'p' ),  GF_ISOM_REF_SWTO = GF_4CC( 's', 'w', 't', 'o' ),  GF_ISOM_REF_SWFR = GF_4CC( 's', 'w', 'f', 'r' ),   GF_ISOM_REF_TMCD = GF_4CC( 't', 'm', 'c', 'd' ),  GF_ISOM_REF_CDEP = GF_4CC( 'c', 'd', 'e', 'p' ),  GF_ISOM_REF_SCPT = GF_4CC( 's', 'c', 'p', 't' ),  GF_ISOM_REF_SSRC = GF_4CC( 's', 's', 'r', 'c' ),  GF_ISOM_REF_LYRA = GF_4CC( 'l', 'y', 'r', 'a' ),  GF_ISOM_REF_FDEL = GF_4CC( 'f', 'd', 'e', 'l' ),   GF_ISOM_REF_TRIN = GF_4CC( 't', 'r', 'i', 'n' ),    GF_ISOM_REF_AUXR = GF_4CC( 'a', 'u', 'x', 'r' ),   GF_ISOM_REF_SUBPIC = GF_4CC( 's', 'u', 'b', 'p' ), };








































































typedef enum {
	
	GF_ISOM_EDIT_EMPTY		=	0x00,  GF_ISOM_EDIT_DWELL		=	0x01,  GF_ISOM_EDIT_NORMAL		=	0x02 } GF_ISOEditType;






enum {
	
	GF_ISOM_MEDIA_VISUAL	= GF_4CC( 'v', 'i', 'd', 'e' ), GF_ISOM_MEDIA_AUXV      = GF_4CC( 'a', 'u', 'x', 'v' ), GF_ISOM_MEDIA_PICT      = GF_4CC( 'p', 'i', 'c', 't' ), GF_ISOM_MEDIA_AUDIO		= GF_4CC( 's', 'o', 'u', 'n' ), GF_ISOM_MEDIA_HINT		= GF_4CC( 'h', 'i', 'n', 't' ), GF_ISOM_MEDIA_META		= GF_4CC( 'm', 'e', 't', 'a' ), GF_ISOM_MEDIA_TEXT		= GF_4CC( 't', 'e', 'x', 't' ),  GF_ISOM_MEDIA_SUBT		= GF_4CC( 's', 'b', 't', 'l' ), GF_ISOM_MEDIA_SUBPIC	= GF_4CC( 's', 'u', 'b', 'p' ), GF_ISOM_MEDIA_MPEG_SUBT	= GF_4CC( 's', 'u', 'b', 't' ),  GF_ISOM_MEDIA_CLOSED_CAPTION		= GF_4CC( 'c', 'l', 'c', 'p' ),  GF_ISOM_MEDIA_TIMECODE		= GF_4CC( 't', 'm', 'c', 'd' ),  GF_ISOM_MEDIA_OD		= GF_4CC( 'o', 'd', 's', 'm' ), GF_ISOM_MEDIA_OCR		= GF_4CC( 'c', 'r', 's', 'm' ), GF_ISOM_MEDIA_SCENE		= GF_4CC( 's', 'd', 's', 'm' ), GF_ISOM_MEDIA_MPEG7		= GF_4CC( 'm', '7', 's', 'm' ), GF_ISOM_MEDIA_OCI		= GF_4CC( 'o', 'c', 's', 'm' ), GF_ISOM_MEDIA_IPMP		= GF_4CC( 'i', 'p', 's', 'm' ), GF_ISOM_MEDIA_MPEGJ		= GF_4CC( 'm', 'j', 's', 'm' ),  GF_ISOM_MEDIA_ESM		= GF_4CC( 'g', 'e', 's', 'm' ),  GF_ISOM_MEDIA_DIMS		= GF_4CC( 'd', 'i', 'm', 's' ),  GF_ISOM_MEDIA_FLASH		= GF_4CC( 'f', 'l', 's', 'h' ),  GF_ISOM_MEDIA_QTVR		= GF_4CC( 'q', 't', 'v', 'r' ), GF_ISOM_MEDIA_JPEG		= GF_4CC( 'j', 'p', 'e', 'g' ), GF_ISOM_MEDIA_JP2		= GF_4CC( 'j', 'p', '2', ' ' ), GF_ISOM_MEDIA_PNG		= GF_4CC( 'p', 'n', 'g', ' ' ), };




































enum {
	
	GF_ISOM_SUBTYPE_MPEG4		= GF_4CC( 'M', 'P', 'E', 'G' ),   GF_ISOM_SUBTYPE_MPEG4_CRYP	= GF_4CC( 'E', 'N', 'C', 'M' ),   GF_ISOM_SUBTYPE_RESV	= GF_4CC( 'r', 'e', 's', 'v' ),    GF_ISOM_SUBTYPE_AVC_H264		= GF_4CC( 'a', 'v', 'c', '1' ), GF_ISOM_SUBTYPE_AVC2_H264		= GF_4CC( 'a', 'v', 'c', '2' ), GF_ISOM_SUBTYPE_AVC3_H264		= GF_4CC( 'a', 'v', 'c', '3' ), GF_ISOM_SUBTYPE_AVC4_H264		= GF_4CC( 'a', 'v', 'c', '4' ), GF_ISOM_SUBTYPE_SVC_H264		= GF_4CC( 's', 'v', 'c', '1' ), GF_ISOM_SUBTYPE_MVC_H264		= GF_4CC( 'm', 'v', 'c', '1' ),   GF_ISOM_SUBTYPE_HVC1			= GF_4CC( 'h', 'v', 'c', '1' ), GF_ISOM_SUBTYPE_HEV1			= GF_4CC( 'h', 'e', 'v', '1' ), GF_ISOM_SUBTYPE_HVC2			= GF_4CC( 'h', 'v', 'c', '2' ), GF_ISOM_SUBTYPE_HEV2			= GF_4CC( 'h', 'e', 'v', '2' ), GF_ISOM_SUBTYPE_LHV1			= GF_4CC( 'l', 'h', 'v', '1' ), GF_ISOM_SUBTYPE_LHE1			= GF_4CC( 'l', 'h', 'e', '1' ), GF_ISOM_SUBTYPE_HVT1			= GF_4CC( 'h', 'v', 't', '1' ),   GF_ISOM_SUBTYPE_VVC1			= GF_4CC( 'v', 'v', 'c', '1' ), GF_ISOM_SUBTYPE_VVI1			= GF_4CC( 'v', 'v', 'i', '1' ), GF_ISOM_SUBTYPE_VVS1			= GF_4CC( 'v', 'v', 's', '1' ), GF_ISOM_SUBTYPE_VVCN			= GF_4CC( 'v', 'v', 'c', 'N' ),   GF_ISOM_SUBTYPE_AV01 = GF_4CC('a', 'v', '0', '1'),   GF_ISOM_SUBTYPE_OPUS = GF_4CC('O', 'p', 'u', 's'), GF_ISOM_SUBTYPE_FLAC = GF_4CC( 'f', 'L', 'a', 'C' ),   GF_ISOM_SUBTYPE_VP08 = GF_4CC('v', 'p', '0', '8'), GF_ISOM_SUBTYPE_VP09 = GF_4CC('v', 'p', '0', '9'), GF_ISOM_SUBTYPE_VP10 = GF_4CC('v', 'p', '1', '0'),   GF_ISOM_SUBTYPE_DVHE = GF_4CC('d', 'v', 'h', 'e'), GF_ISOM_SUBTYPE_DVH1 = GF_4CC('d', 'v', 'h', '1'), GF_ISOM_SUBTYPE_DVA1 = GF_4CC('d', 'v', 'a', '1'), GF_ISOM_SUBTYPE_DVAV = GF_4CC('d', 'v', 'a', 'v'), GF_ISOM_SUBTYPE_DAV1 = GF_4CC('d', 'a', 'v', '1'),   GF_ISOM_SUBTYPE_3GP_H263	= GF_4CC( 's', '2', '6', '3' ), GF_ISOM_SUBTYPE_3GP_AMR		= GF_4CC( 's', 'a', 'm', 'r' ), GF_ISOM_SUBTYPE_3GP_AMR_WB	= GF_4CC( 's', 'a', 'w', 'b' ), GF_ISOM_SUBTYPE_3GP_EVRC	= GF_4CC( 's', 'e', 'v', 'c' ), GF_ISOM_SUBTYPE_3GP_QCELP	= GF_4CC( 's', 'q', 'c', 'p' ), GF_ISOM_SUBTYPE_3GP_SMV		= GF_4CC( 's', 's', 'm', 'v' ),   GF_ISOM_SUBTYPE_3GP_DIMS	= GF_4CC( 'd', 'i', 'm', 's' ),  GF_ISOM_SUBTYPE_AC3			= GF_4CC( 'a', 'c', '-', '3' ), GF_ISOM_SUBTYPE_EC3			= GF_4CC( 'e', 'c', '-', '3' ), GF_ISOM_SUBTYPE_MP3			= GF_4CC( '.', 'm', 'p', '3' ), GF_ISOM_SUBTYPE_MLPA		= GF_4CC( 'm', 'l', 'p', 'a' ),  GF_ISOM_SUBTYPE_MP4A		= GF_4CC( 'm', 'p', '4', 'a' ), GF_ISOM_SUBTYPE_MP4S		= GF_4CC( 'm', 'p', '4', 's' ),  GF_ISOM_SUBTYPE_LSR1		= GF_4CC( 'l', 's', 'r', '1' ), GF_ISOM_SUBTYPE_WVTT		= GF_4CC( 'w', 'v', 't', 't' ), GF_ISOM_SUBTYPE_STXT		= GF_4CC( 's', 't', 'x', 't' ), GF_ISOM_SUBTYPE_STPP		= GF_4CC( 's', 't', 'p', 'p' ), GF_ISOM_SUBTYPE_SBTT		= GF_4CC( 's', 'b', 't', 't' ), GF_ISOM_SUBTYPE_METT		= GF_4CC( 'm', 'e', 't', 't' ), GF_ISOM_SUBTYPE_METX		= GF_4CC( 'm', 'e', 't', 'x' ), GF_ISOM_SUBTYPE_TX3G		= GF_4CC( 't', 'x', '3', 'g' ), GF_ISOM_SUBTYPE_TEXT		= GF_4CC( 't', 'e', 'x', 't' ), GF_ISOM_SUBTYPE_SUBTITLE	= GF_4CC( 's', 'b', 't', 'l' ),   GF_ISOM_SUBTYPE_RTP			= GF_4CC( 'r', 't', 'p', ' ' ), GF_ISOM_SUBTYPE_SRTP		= GF_4CC( 's', 'r', 't', 'p' ), GF_ISOM_SUBTYPE_RRTP		= GF_4CC( 'r', 'r', 't', 'p' ), GF_ISOM_SUBTYPE_RTCP		= GF_4CC( 'r', 't', 'c', 'p' ), GF_ISOM_SUBTYPE_FLUTE		= GF_4CC( 'f', 'd', 'p', ' ' ),   GF_ISOM_SUBTYPE_XDVB		= GF_4CC( 'x', 'd', 'v', 'b' ),  GF_ISOM_SUBTYPE_H263		= GF_4CC( 'h', '2', '6', '3' ),  GF_ISOM_SUBTYPE_JPEG		= GF_4CC( 'j', 'p', 'e', 'g' ), GF_ISOM_SUBTYPE_PNG 		= GF_4CC( 'p', 'n', 'g', ' ' ), GF_ISOM_SUBTYPE_MJP2 		= GF_4CC( 'm', 'j', 'p', '2' ), GF_ISOM_SUBTYPE_JP2K		= GF_4CC('j','p','2','k'),  GF_ISOM_SUBTYPE_MH3D_MHA1	= GF_4CC( 'm', 'h', 'a', '1' ), GF_ISOM_SUBTYPE_MH3D_MHA2	= GF_4CC( 'm', 'h', 'a', '2' ), GF_ISOM_SUBTYPE_MH3D_MHM1	= GF_4CC( 'm', 'h', 'm', '1' ), GF_ISOM_SUBTYPE_MH3D_MHM2	= GF_4CC( 'm', 'h', 'm', '2' ),  GF_ISOM_SUBTYPE_IPCM		= GF_4CC( 'i', 'p', 'c', 'm' ), GF_ISOM_SUBTYPE_FPCM		= GF_4CC( 'f', 'p', 'c', 'm' ),   GF_ISOM_SUBTYPE_NCLX 		= GF_4CC( 'n', 'c', 'l', 'x' ), GF_ISOM_SUBTYPE_NCLC 		= GF_4CC( 'n', 'c', 'l', 'c' ), GF_ISOM_SUBTYPE_PROF 		= GF_4CC( 'p', 'r', 'o', 'f' ), GF_ISOM_SUBTYPE_RICC 		= GF_4CC( 'r', 'I', 'C', 'C' ),    GF_QT_SUBTYPE_RAW	= GF_4CC('r','a','w',' '), GF_QT_SUBTYPE_TWOS 	= GF_4CC('t','w','o','s'), GF_QT_SUBTYPE_SOWT 	= GF_4CC('s','o','w','t'), GF_QT_SUBTYPE_FL32 	= GF_4CC('f','l','3','2'), GF_QT_SUBTYPE_FL64 	= GF_4CC('f','l','6','4'), GF_QT_SUBTYPE_IN24 	= GF_4CC('i','n','2','4'), GF_QT_SUBTYPE_IN32 	= GF_4CC('i','n','3','2'), GF_QT_SUBTYPE_ULAW 	= GF_4CC('u','l','a','w'), GF_QT_SUBTYPE_ALAW 	= GF_4CC('a','l','a','w'), GF_QT_SUBTYPE_ADPCM 	= GF_4CC(0x6D,0x73,0x00,0x02), GF_QT_SUBTYPE_IMA_ADPCM 	= GF_4CC(0x6D,0x73,0x00,0x11), GF_QT_SUBTYPE_DVCA 	= GF_4CC('d','v','c','a'), GF_QT_SUBTYPE_QDMC 	= GF_4CC('Q','D','M','C'), GF_QT_SUBTYPE_QDMC2	= GF_4CC('Q','D','M','2'), GF_QT_SUBTYPE_QCELP	= GF_4CC('Q','c','l','p'), GF_QT_SUBTYPE_kMP3 	= GF_4CC(0x6D,0x73,0x00,0x55),   GF_QT_SUBTYPE_C608	= GF_4CC( 'c', '6', '0', '8' ), GF_QT_SUBTYPE_APCH	= GF_4CC( 'a', 'p', 'c', 'h' ), GF_QT_SUBTYPE_APCO	= GF_4CC( 'a', 'p', 'c', 'o' ), GF_QT_SUBTYPE_APCN	= GF_4CC( 'a', 'p', 'c', 'n' ), GF_QT_SUBTYPE_APCS	= GF_4CC( 'a', 'p', 'c', 's' ), GF_QT_SUBTYPE_AP4X	= GF_4CC( 'a', 'p', '4', 'x' ), GF_QT_SUBTYPE_AP4H	= GF_4CC( 'a', 'p', '4', 'h' ), GF_QT_SUBTYPE_YUYV = GF_4CC('y','u','v','2'), GF_QT_SUBTYPE_UYVY = GF_4CC('2','v','u','y'), GF_QT_SUBTYPE_YUV444 = GF_4CC('v','3','0','8'), GF_QT_SUBTYPE_YUVA444 = GF_4CC('v','4','0','8'), GF_QT_SUBTYPE_YUV422_10 = GF_4CC('v','2','1','0'), GF_QT_SUBTYPE_YUV444_10 = GF_4CC('v','4','1','0'), GF_QT_SUBTYPE_YUV422_16 = GF_4CC('v','2','1','6'), GF_QT_SUBTYPE_YUV420 = GF_4CC('j','4','2','0'), GF_QT_SUBTYPE_I420 = GF_4CC('I','4','2','0'), GF_QT_SUBTYPE_IYUV = GF_4CC('I','Y','U','V'), GF_QT_SUBTYPE_YV12 = GF_4CC('y','v','1','2'), GF_QT_SUBTYPE_YVYU = GF_4CC('Y','V','Y','U'), GF_QT_SUBTYPE_RGBA = GF_4CC('R','G','B','A'), GF_QT_SUBTYPE_ABGR = GF_4CC('A','B','G','R'), GF_QT_SUBTYPE_ALAC =  GF_4CC('a','l','a','c'), GF_QT_SUBTYPE_LPCM =  GF_4CC('l','p','c','m'), GF_ISOM_SUBTYPE_FFV1		= GF_4CC( 'F', 'F', 'V', '1' ),  GF_ISOM_ITEM_TYPE_AUXI 	= GF_4CC('a', 'u', 'x', 'i'),  GF_QT_SUBTYPE_TMCD = GF_4CC( 't', 'm', 'c', 'd' ),  GF_ISOM_SUBTYPE_VC1 = GF_4CC( 'v', 'c', '-', '1' ),   GF_ISOM_SUBTYPE_DVB_SUBS	= GF_4CC( 'd', 'v', 'b', 's' ), GF_ISOM_SUBTYPE_DVB_TELETEXT	= GF_4CC( 'd', 'v', 'b', 't' ),   GF_ISOM_SUBTYPE_DTSC = GF_4CC('d','t','s','c'), GF_ISOM_SUBTYPE_DTSH = GF_4CC('d','t','s','h'), GF_ISOM_SUBTYPE_DTSL = GF_4CC('d','t','s','l'), GF_ISOM_SUBTYPE_DTSE = GF_4CC('d','t','s','e'), GF_ISOM_SUBTYPE_DTSX = GF_4CC('d','t','s','x'), GF_ISOM_SUBTYPE_DTSY = GF_4CC('d','t','s','y'),  GF_ISOM_SUBTYPE_UNCV	= GF_4CC( 'u', 'n', 'c', 'v' ), GF_ISOM_ITEM_TYPE_UNCI	= GF_4CC( 'u', 'n', 'c', 'i' ), };





















































































































































































typedef enum {
	
	GF_ISOM_SEARCH_FORWARD		=	1,  GF_ISOM_SEARCH_BACKWARD		=	2,  GF_ISOM_SEARCH_SYNC_FORWARD	=	3,  GF_ISOM_SEARCH_SYNC_BACKWARD	=	4,  GF_ISOM_SEARCH_SYNC_SHADOW		=	5 } GF_ISOSearchMode;










enum {
	
	GF_ISOM_BRAND_ISOM = GF_4CC( 'i', 's', 'o', 'm' ),  GF_ISOM_BRAND_ISO2 =  GF_4CC( 'i', 's', 'o', '2' ),  GF_ISOM_BRAND_MP41 = GF_4CC( 'm', 'p', '4', '1' ),  GF_ISOM_BRAND_MP42 = GF_4CC( 'm', 'p', '4', '2' ),  GF_ISOM_BRAND_MJP2 = GF_4CC( 'm', 'j', 'p', '2' ),  GF_ISOM_BRAND_MJ2S = GF_4CC( 'm', 'j', '2', 's' ),  GF_ISOM_BRAND_3GP4 = GF_4CC('3', 'g', 'p', '4'), GF_ISOM_BRAND_3GP5 = GF_4CC('3', 'g', 'p', '5'),  GF_ISOM_BRAND_3GP6 = GF_4CC('3', 'g', 'p', '6'),  GF_ISOM_BRAND_3GG5 = GF_4CC('3', 'g', 'g', '5'), GF_ISOM_BRAND_3GG6 = GF_4CC('3', 'g', 'g', '6'),  GF_ISOM_BRAND_3G2A = GF_4CC('3', 'g', '2', 'a'),  GF_ISOM_BRAND_AVC1 = GF_4CC('a', 'v', 'c', '1'),  GF_ISOM_BRAND_MP21 = GF_4CC('m', 'p', '2', '1'),  GF_ISOM_BRAND_ISO4 =  GF_4CC( 'i', 's', 'o', '4' ),  GF_ISOM_BRAND_HEIF = GF_4CC('h', 'e', 'i', 'f'), GF_ISOM_BRAND_MIF1 = GF_4CC('m', 'i', 'f', '1'), GF_ISOM_BRAND_HEIC = GF_4CC('h', 'e', 'i', 'c'), GF_ISOM_BRAND_HEIM = GF_4CC('h', 'e', 'i', 'm'), GF_ISOM_BRAND_AVIF = GF_4CC('a', 'v', 'i', 'f'), GF_ISOM_BRAND_AVCI = GF_4CC('a', 'v', 'c', 'i'), GF_ISOM_BRAND_VVIC = GF_4CC('v', 'v', 'i', 'c'),   GF_ISOM_BRAND_ISO1 = GF_4CC( 'i', 's', 'o', '1' ), GF_ISOM_BRAND_ISO3 = GF_4CC( 'i', 's', 'o', '3' ), GF_ISOM_BRAND_ISO5 = GF_4CC( 'i', 's', 'o', '5' ), GF_ISOM_BRAND_ISO6 = GF_4CC( 'i', 's', 'o', '6' ), GF_ISOM_BRAND_ISO7 = GF_4CC( 'i', 's', 'o', '7' ), GF_ISOM_BRAND_ISO8 = GF_4CC( 'i', 's', 'o', '8' ), GF_ISOM_BRAND_ISO9 = GF_4CC( 'i', 's', 'o', '9' ), GF_ISOM_BRAND_ISOA = GF_4CC( 'i', 's', 'o', 'a' ),   GF_ISOM_BRAND_QT  = GF_4CC( 'q', 't', ' ', ' ' ),   GF_ISOM_BRAND_JP2  = GF_4CC( 'j', 'p', '2', ' ' ),   GF_ISOM_BRAND_MSNV = GF_4CC( 'M', 'S', 'N', 'V' ),  GF_ISOM_BRAND_M4A  = GF_4CC( 'M', '4', 'A', ' ' ),  GF_ISOM_BRAND_M4V  = GF_4CC( 'M', '4', 'V', ' ' ),  GF_ISOM_BRAND_HVCE = GF_4CC( 'h', 'v', 'c', 'e' ), GF_ISOM_BRAND_HVCI = GF_4CC( 'h', 'v', 'c', 'i' ), GF_ISOM_BRAND_HVTI = GF_4CC( 'h', 'v', 't', 'i' ),   GF_ISOM_BRAND_AV01 = GF_4CC( 'a', 'v', '0', '1'),  GF_ISOM_BRAND_OPUS = GF_4CC( 'O', 'p', 'u', 's'),  GF_ISOM_BRAND_ISMA = GF_4CC( 'I', 'S', 'M', 'A' ),   GF_ISOM_BRAND_DASH = GF_4CC('d','a','s','h'),  GF_ISOM_BRAND_DSMS = GF_4CC('d','s','m','s'),  GF_ISOM_BRAND_MSDH = GF_4CC('m','s','d','h'),  GF_ISOM_BRAND_MSIX = GF_4CC('m','s','i','x'),  GF_ISOM_BRAND_RISX = GF_4CC('r','i','s','x'),  GF_ISOM_BRAND_LMSG = GF_4CC('l','m','s','g'),  GF_ISOM_BRAND_SISX = GF_4CC('s','i','s','x'),  GF_ISOM_BRAND_SSSS = GF_4CC('s','s','s','s'),   GF_ISOM_BRAND_CMFC = GF_4CC('c','m','f','c'),  GF_ISOM_BRAND_CMF2 = GF_4CC('c','m','f','2'),    GF_ISOM_BRAND_ODCF = GF_4CC('o','d','c','f'),  GF_ISOM_BRAND_OPF2 = GF_4CC('o','p','f','2'),   GF_ISOM_BRAND_COMP  = GF_4CC( 'c', 'o', 'm', 'p' ), GF_ISOM_BRAND_ISOC  = GF_4CC( 'i', 's', 'o', 'C' ),  };







































































































typedef enum {
	
	GF_ISOM_SAMPLE_ROLL_NONE=0,  GF_ISOM_SAMPLE_ROLL,  GF_ISOM_SAMPLE_PREROLL,  GF_ISOM_SAMPLE_PREROLL_NONE } GF_ISOSampleRollType;












typedef struct __tag_isom GF_ISOFile;


typedef u32 GF_ISOTrackID;






typedef enum {
	
	RAP_REDUNDANT = -1,  RAP_NO = 0,  RAP = 1,  SAP_TYPE_1 = 1,  SAP_TYPE_2 = 2,  SAP_TYPE_3 = 3,  SAP_TYPE_4 = 4, } GF_ISOSAPType;














typedef struct {
	
	u32 dataLength;
	
	u8 *data;
	
	u64 DTS;
	
	s32 CTS_Offset;
	
	GF_ISOSAPType IsRAP;
	
	u32 alloc_size;
	
	
	u32 nb_pack;

	
	u32 duration;
} GF_ISOSample;



GF_ISOSample *gf_isom_sample_new();


void gf_isom_sample_del(GF_ISOSample **samp);







typedef enum {
	
	GF_ISOM_OPEN_READ_DUMP = 0,  GF_ISOM_OPEN_READ,  GF_ISOM_OPEN_WRITE,  GF_ISOM_OPEN_EDIT,  GF_ISOM_WRITE_EDIT,  GF_ISOM_OPEN_KEEP_FRAGMENTS,  GF_ISOM_OPEN_READ_EDIT, } GF_ISOOpenMode;














u32 gf_isom_probe_file(const char *fileName);


u32 gf_isom_probe_file_range(const char *fileName, u64 start_range, u64 end_range);


u32 gf_isom_probe_data(const u8*inBuf, u32 inSize);


GF_ISOFile *gf_isom_open(const char *fileName, GF_ISOOpenMode OpenMode, const char *tmp_dir);


GF_Err gf_isom_close(GF_ISOFile *isom_file);


void gf_isom_delete(GF_ISOFile *isom_file);


GF_Err gf_isom_last_error(GF_ISOFile *isom_file);


u8 gf_isom_get_mode(GF_ISOFile *isom_file);


Bool gf_isom_is_JPEG2000(GF_ISOFile *isom_file);



Bool gf_isom_is_video_handler_type(u32 mtype);


u32 gf_isom_get_num_supported_boxes();


u32 gf_isom_get_supported_box_type(u32 idx);




GF_Err gf_isom_dump_supported_box(u32 idx, FILE * trace);








Bool gf_isom_moov_first(GF_ISOFile *isom_file);


GF_Err gf_isom_set_byte_offset(GF_ISOFile *isom_file, s64 byte_offset);



GF_Err gf_isom_open_progressive(const char *fileName, u64 start_range, u64 end_range, Bool enable_frag_templates, GF_ISOFile **isom_file, u64 *BytesMissing);



GF_Err gf_isom_open_progressive_ex(const char *fileName, u64 start_range, u64 end_range, Bool enable_frag_templates, GF_ISOFile **isom_file, u64 *BytesMissing, u32 *topBoxType);


u64 gf_isom_get_missing_bytes(GF_ISOFile *isom_file, u32 trackNumber);


Bool gf_isom_has_movie(GF_ISOFile *isom_file);


u32 gf_isom_get_track_count(GF_ISOFile *isom_file);


u32 gf_isom_get_timescale(GF_ISOFile *isom_file);


u64 gf_isom_get_duration(GF_ISOFile *isom_file);


u64 gf_isom_get_original_duration(GF_ISOFile *isom_file);





GF_Err gf_isom_get_creation_time(GF_ISOFile *isom_file, u64 *creationTime, u64 *modificationTime);



GF_Err gf_isom_get_track_creation_time(GF_ISOFile *isom_file, u32 trackNumber, u64 *creationTime, u64 *modificationTime);


GF_ISOTrackID gf_isom_get_track_id(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_track_by_id(GF_ISOFile *isom_file, GF_ISOTrackID trackID);


GF_ISOTrackID gf_isom_get_track_original_id(GF_ISOFile *isom_file, u32 trackNumber);


u8 gf_isom_is_track_enabled(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_track_flags(GF_ISOFile *isom_file, u32 trackNumber);


u64 gf_isom_get_track_duration(GF_ISOFile *isom_file, u32 trackNumber);


u64 gf_isom_get_track_duration_orig(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_media_type(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_media_subtype(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_get_media_time(GF_ISOFile *isom_file, u32 trackNumber, u32 movieTime, u64 *mediaTime);


u32 gf_isom_get_sample_description_count(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_sample_description_index(GF_ISOFile *isom_file, u32 trackNumber, u64 for_time);


Bool gf_isom_is_self_contained(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


u64 gf_isom_get_media_duration(GF_ISOFile *isom_file, u32 trackNumber);


u64 gf_isom_get_media_original_duration(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_media_timescale(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_chunks_infos(GF_ISOFile *isom_file, u32 trackNumber, u32 *dur_min, u32 *dur_avg, u32 *dur_max, u32 *size_min, u32 *size_avg, u32 *size_max);


GF_Err gf_isom_get_handler_name(GF_ISOFile *isom_file, u32 trackNumber, const char **outName);


GF_Err gf_isom_check_data_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_get_data_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const char **outURL, const char **outURN);


u32 gf_isom_get_sample_count(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_constant_sample_size(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_constant_sample_duration(GF_ISOFile *isom_file, u32 trackNumber);


Bool gf_isom_enable_raw_pack(GF_ISOFile *isom_file, u32 trackNumber, u32 pack_num_samples);


u64 gf_isom_get_media_data_size(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_set_sample_padding(GF_ISOFile *isom_file, u32 trackNumber, u32 padding_bytes);


GF_ISOSample *gf_isom_get_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 *sampleDescriptionIndex);


GF_ISOSample *gf_isom_get_sample_ex(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 *sampleDescriptionIndex, GF_ISOSample *static_sample, u64 *data_offset);


GF_ISOSample *gf_isom_get_sample_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 *sampleDescriptionIndex, u64 *data_offset);


GF_ISOSample *gf_isom_get_sample_info_ex(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 *sampleDescriptionIndex, u64 *data_offset, GF_ISOSample *static_sample);


u64 gf_isom_get_sample_dts(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber);


u32 gf_isom_get_sample_duration(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber);


u32 gf_isom_get_sample_size(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber);


u32 gf_isom_get_max_sample_size(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_avg_sample_size(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_max_sample_delta(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_avg_sample_delta(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_max_sample_cts_offset(GF_ISOFile *isom_file, u32 trackNumber);


Bool gf_isom_get_sample_sync(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber);


GF_Err gf_isom_get_sample_flags(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 *is_leading, u32 *dependsOn, u32 *dependedOn, u32 *redundant);


GF_Err gf_isom_get_sample_for_media_time(GF_ISOFile *isom_file, u32 trackNumber, u64 desiredTime, u32 *sampleDescriptionIndex, GF_ISOSearchMode SearchMode, GF_ISOSample **sample, u32 *sample_number, u64 *data_offset);


u32 gf_isom_get_sample_from_dts(GF_ISOFile *isom_file, u32 trackNumber, u64 dts);



const GF_ISOTrackID *gf_isom_enum_track_references(GF_ISOFile *isom_file, u32 trackNumber, u32 idx, u32 *referenceType, u32 *referenceCount);


s32 gf_isom_get_reference_count(GF_ISOFile *isom_file, u32 trackNumber, u32 referenceType);


GF_Err gf_isom_get_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 referenceType, u32 referenceIndex, u32 *refTrack);


GF_Err gf_isom_get_reference_ID(GF_ISOFile *isom_file, u32 trackNumber, u32 referenceType, u32 referenceIndex, GF_ISOTrackID *refTrackID);


u32 gf_isom_has_track_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 referenceType, GF_ISOTrackID refTrackID);


u32 gf_isom_is_track_referenced(GF_ISOFile *movie, u32 trackNumber, u32 referenceType);


GF_Err gf_isom_get_sample_for_movie_time(GF_ISOFile *isom_file, u32 trackNumber, u64 movieTime, u32 *sampleDescriptionIndex, GF_ISOSearchMode SearchMode, GF_ISOSample **sample, u32 *sample_number, u64 *data_offset);


Bool gf_isom_get_edit_list_type(GF_ISOFile *isom_file, u32 trackNumber, s64 *mediaOffset);


u32 gf_isom_get_edits_count(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_edit(GF_ISOFile *isom_file, u32 trackNumber, u32 EditIndex, u64 *EditTime, u64 *SegmentDuration, u64 *MediaTime, GF_ISOEditType *EditMode);


u32 gf_isom_get_copyright_count(GF_ISOFile *isom_file);


GF_Err gf_isom_get_copyright(GF_ISOFile *isom_file, u32 Index, const char **threeCharCodes, const char **notice);


u32 gf_isom_get_chapter_count(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_chapter(GF_ISOFile *isom_file, u32 trackNumber, u32 Index, u64 *chapter_time, const char **name);


u8 gf_isom_has_sync_points(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_sync_point_count(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_has_time_offset(GF_ISOFile *isom_file, u32 trackNumber);


s64 gf_isom_get_cts_to_dts_shift(GF_ISOFile *isom_file, u32 trackNumber);


Bool gf_isom_has_sync_shadows(GF_ISOFile *isom_file, u32 trackNumber);


Bool gf_isom_has_sample_dependency(GF_ISOFile *isom_file, u32 trackNumber);


u64 gf_isom_estimate_size(GF_ISOFile *isom_file);


u32 gf_isom_get_next_alternate_group_id(GF_ISOFile *isom_file);



const char *gf_isom_get_filename(GF_ISOFile *isom_file);



GF_Err gf_isom_get_brand_info(GF_ISOFile *isom_file, u32 *brand, u32 *minorVersion, u32 *AlternateBrandsCount);


GF_Err gf_isom_get_alternate_brand(GF_ISOFile *isom_file, u32 BrandIndex, u32 *brand);


const u32 *gf_isom_get_brands(GF_ISOFile *isom_file);


GF_Err gf_isom_get_sample_padding_bits(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u8 *NbBits);


Bool gf_isom_has_padding_bits(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_visual_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *Width, u32 *Height);


GF_Err gf_isom_get_visual_bit_depth(GF_ISOFile* isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u16 *bitDepth);


GF_Err gf_isom_get_audio_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *SampleRate, u32 *Channels, u32 *bitsPerSample);


typedef struct {
	
	u8 stream_structure;

	
	u8 definedLayout;

	
	u32 channels_count;
	struct {
		
		u8 position;
		
		s8 elevation;
		
		s16 azimuth;
	} layouts[64];
	
	u64 omittedChannelsMap;
	
	u8 object_count;
} GF_AudioChannelLayout;


GF_Err gf_isom_get_audio_layout(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_AudioChannelLayout *layout);



GF_Err gf_isom_get_track_layout_info(GF_ISOFile *isom_file, u32 trackNumber, u32 *width, u32 *height, s32 *translation_x, s32 *translation_y, s16 *layer);


GF_Err gf_isom_get_track_matrix(GF_ISOFile *isom_file, u32 trackNumber, u32 matrix[9]);


GF_Err gf_isom_get_pixel_aspect_ratio(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *hSpacing, u32 *vSpacing);


GF_Err gf_isom_get_color_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *colour_type, u16 *colour_primaries, u16 *transfer_characteristics, u16 *matrix_coefficients, Bool *full_range_flag);



GF_Err gf_isom_get_icc_profile(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Bool *icc_restricted, const u8 **icc, u32 *icc_size);


GF_Err gf_isom_get_clean_aperture(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *cleanApertureWidthN, u32 *cleanApertureWidthD, u32 *cleanApertureHeightN, u32 *cleanApertureHeightD, s32 *horizOffN, u32 *horizOffD, s32 *vertOffN, u32 *vertOffD);


typedef struct  {
	
	u16 max_content_light_level;
	
	u16 max_pic_average_light_level;
} GF_ContentLightLevelInfo;


typedef struct  {
	
	struct {
		u16 x;
		u16 y;
	} display_primaries[3];
	
	u16 white_point_x;
	
	u16 white_point_y;
	u32 max_display_mastering_luminance;
	
	u32 min_display_mastering_luminance;
} GF_MasteringDisplayColourVolumeInfo;


const GF_MasteringDisplayColourVolumeInfo *gf_isom_get_mastering_display_colour_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


const GF_ContentLightLevelInfo *gf_isom_get_content_light_level_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);



GF_Err gf_isom_get_media_language(GF_ISOFile *isom_file, u32 trackNumber, char **lang);


u32 gf_isom_get_track_kind_count(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_track_kind(GF_ISOFile *isom_file, u32 trackNumber, u32 index, char **scheme, char **value);


u64 gf_isom_get_track_magic(GF_ISOFile *isom_file, u32 trackNumber);


u32 gf_isom_get_track_group(GF_ISOFile *isom_file, u32 trackNumber, u32 track_group_type);


Bool gf_isom_enum_track_group(GF_ISOFile *isom_file, u32 trackNumber, u32 *idx, u32 *track_group_type, u32 *track_group_id);


Bool gf_isom_is_single_av(GF_ISOFile *isom_file);


u32 gf_isom_guess_specification(GF_ISOFile *isom_file);



u32 gf_isom_get_nalu_length_field(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_get_bitrate(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *average_bitrate, u32 *max_bitrate, u32 *decode_buffer_size);



GF_Err gf_isom_get_track_template(GF_ISOFile *isom_file, u32 trackNumber, u8 **output, u32 *output_size);


GF_Err gf_isom_get_trex_template(GF_ISOFile *isom_file, u32 trackNumber, u8 **output, u32 *output_size);


GF_Err gf_isom_set_removed_bytes(GF_ISOFile *isom_file, u64 bytes_removed);


GF_Err gf_isom_get_current_top_box_offset(GF_ISOFile *isom_file, u64 *current_top_box_offset);


GF_Err gf_isom_purge_samples(GF_ISOFile *isom_file, u32 trackNumber, u32 nb_samples);




GF_Err gf_isom_dump(GF_ISOFile *isom_file, FILE *trace, Bool skip_init, Bool skip_samples);





u32 gf_isom_get_chunk_count(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_chunk_info(GF_ISOFile *isom_file, u32 trackNumber, u32 chunkNumber, u64 *chunk_offset, u32 *first_sample_num, u32 *sample_per_chunk, u32 *sample_desc_idx, u32 *cache_1, u32 *cache_2);



u64 gf_isom_get_first_mdat_start(GF_ISOFile *isom_file);


u64 gf_isom_get_unused_box_bytes(GF_ISOFile *isom_file);









typedef enum {
	
	GF_ISOM_STORE_FLAT = 1,  GF_ISOM_STORE_STREAMABLE,  GF_ISOM_STORE_INTERLEAVED,  GF_ISOM_STORE_DRIFT_INTERLEAVED,  GF_ISOM_STORE_TIGHT,  GF_ISOM_STORE_FASTSTART, } GF_ISOStorageMode;












GF_Err gf_isom_write(GF_ISOFile *isom_file);


GF_Err gf_isom_freeze_order(GF_ISOFile *isom_file);


void gf_isom_keep_utc_times(GF_ISOFile *isom_file, Bool keep_utc);




Bool gf_isom_has_keep_utc_times(GF_ISOFile *isom_file);




GF_Err gf_isom_set_timescale(GF_ISOFile *isom_file, u32 timeScale);


GF_Err gf_isom_load_extra_boxes(GF_ISOFile *isom_file, u8 *moov_boxes, u32 moov_boxes_size, Bool udta_only);


u32 gf_isom_new_track(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u32 MediaType, u32 TimeScale);


u32 gf_isom_new_track_from_template(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u32 MediaType, u32 TimeScale, u8 *tk_box, u32 tk_box_size, Bool udta_only);


GF_Err gf_isom_remove_track(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_set_track_enabled(GF_ISOFile *isom_file, u32 trackNumber, Bool enableTrack);


typedef enum {
	
	GF_ISOM_TKFLAGS_SET = 1,  GF_ISOM_TKFLAGS_REM,  GF_ISOM_TKFLAGS_ADD, } GF_ISOMTrackFlagOp;








enum {
	
	GF_ISOM_TK_ENABLED = 1,  GF_ISOM_TK_IN_MOVIE = 1<<1,  GF_ISOM_TK_IN_PREVIEW = 1<<2,  GF_ISOM_TK_SIZE_IS_AR = 1<<3 };










GF_Err gf_isom_set_track_flags(GF_ISOFile *isom_file, u32 trackNumber, u32 flags, GF_ISOMTrackFlagOp op);


GF_Err gf_isom_set_creation_time(GF_ISOFile *isom_file, u64 create_time, u64 modif_time);


GF_Err gf_isom_set_track_creation_time(GF_ISOFile *isom_file, u32 trackNumber, u64 create_time, u64 modif_time);


GF_Err gf_isom_set_media_creation_time(GF_ISOFile *isom_file, u32 trackNumber, u64 create_time, u64 modif_time);


GF_Err gf_isom_set_track_id(GF_ISOFile *isom_file, u32 trackNumber, GF_ISOTrackID trackID);


GF_Err gf_isom_rewrite_track_dependencies(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_add_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const GF_ISOSample *sample);


GF_Err gf_isom_copy_sample_info(GF_ISOFile *dst, u32 dst_track, GF_ISOFile *src, u32 src_track, u32 sampleNumber);


GF_Err gf_isom_add_sample_shadow(GF_ISOFile *isom_file, u32 trackNumber, GF_ISOSample *sample);


GF_Err gf_isom_append_sample_data(GF_ISOFile *isom_file, u32 trackNumber, u8 *data, u32 data_size);


GF_Err gf_isom_add_sample_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_ISOSample *sample, u64 dataOffset);


GF_Err gf_isom_set_last_sample_duration(GF_ISOFile *isom_file, u32 trackNumber, u32 duration);


GF_Err gf_isom_set_last_sample_duration_ex(GF_ISOFile *isom_file, u32 trackNumber, u32 dur_num, u32 dur_den);


GF_Err gf_isom_patch_last_sample_duration(GF_ISOFile *isom_file, u32 trackNumber, u64 next_dts);


GF_Err gf_isom_set_track_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 referenceType, GF_ISOTrackID ReferencedTrackID);


GF_Err gf_isom_remove_track_references(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_purge_track_reference(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_remove_track_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 ref_type);


GF_Err gf_isom_set_handler_name(GF_ISOFile *isom_file, u32 trackNumber, const char *nameUTF8);


GF_Err gf_isom_refresh_size_info(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_update_duration(GF_ISOFile *isom_file);



GF_Err gf_isom_update_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, GF_ISOSample *sample, Bool data_only);


GF_Err gf_isom_update_sample_reference(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, GF_ISOSample *sample, u64 data_offset);


GF_Err gf_isom_remove_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber);



GF_Err gf_isom_set_media_timescale(GF_ISOFile *isom_file, u32 trackNumber, u32 new_timescale, u32 new_tsinc, u32 force_rescale_type);




GF_Err gf_isom_add_sample_aux_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 aux_type, u32 aux_info, u8 *data, u32 size);


GF_Err gf_isom_set_final_name(GF_ISOFile *isom_file, char *filename);


GF_Err gf_isom_set_storage_mode(GF_ISOFile *isom_file, GF_ISOStorageMode storage_mode);


GF_Err gf_isom_set_interleave_time(GF_ISOFile *isom_file, u32 InterleaveTime);


GF_Err gf_isom_force_64bit_chunk_offset(GF_ISOFile *isom_file, Bool set_on);


typedef enum {
	
	GF_ISOM_COMP_NONE=0,  GF_ISOM_COMP_MOOV,  GF_ISOM_COMP_MOOF,  GF_ISOM_COMP_MOOF_SIDX,  GF_ISOM_COMP_MOOF_SSIX,  GF_ISOM_COMP_ALL, } GF_ISOCompressMode;











enum {
	
	GF_ISOM_COMP_FORCE_ALL	=	0x01,  GF_ISOM_COMP_WRAP_FTYPE	=	0x02, };





GF_Err gf_isom_enable_compression(GF_ISOFile *isom_file, GF_ISOCompressMode compress_mode, u32 compress_flags);


GF_Err gf_isom_set_copyright(GF_ISOFile *isom_file, const char *threeCharCode, char *notice);


GF_Err gf_isom_add_track_kind(GF_ISOFile *isom_file, u32 trackNumber, const char *schemeURI, const char *value);


GF_Err gf_isom_remove_track_kind(GF_ISOFile *isom_file, u32 trackNumber, const char *schemeURI, const char *value);


GF_Err gf_isom_set_media_type(GF_ISOFile *isom_file, u32 trackNumber, u32 new_type);


GF_Err gf_isom_set_media_subtype(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 new_type);


GF_Err gf_isom_set_alternate_group_id(GF_ISOFile *isom_file, u32 trackNumber, u32 groupId);


GF_Err gf_isom_add_chapter(GF_ISOFile *isom_file, u32 trackNumber, u64 timestamp, char *name);


GF_Err gf_isom_remove_chapter(GF_ISOFile *isom_file, u32 trackNumber, u32 index);


GF_Err gf_isom_set_edit(GF_ISOFile *isom_file, u32 trackNumber, u64 EditTime, u64 EditDuration, u64 MediaTime, GF_ISOEditType EditMode);




GF_Err gf_isom_set_edit_with_rate(GF_ISOFile *isom_file, u32 trackNumber, u64 EditTime, u64 EditDuration, u64 MediaTime, u32 MediaRate);



GF_Err gf_isom_modify_edit(GF_ISOFile *isom_file, u32 trackNumber, u32 edit_index, u64 EditDuration, u64 MediaTime, GF_ISOEditType EditMode);


GF_Err gf_isom_append_edit(GF_ISOFile *isom_file, u32 trackNumber, u64 EditDuration, u64 MediaTime, GF_ISOEditType EditMode);


GF_Err gf_isom_remove_edits(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_remove_edit(GF_ISOFile *isom_file, u32 trackNumber, u32 edit_index);


GF_Err gf_isom_update_edit_list_duration(GF_ISOFile *isom_file, u32 trackNumber);



GF_Err gf_isom_remove_uuid(GF_ISOFile *isom_file, u32 trackNumber, bin128 UUID);


GF_Err gf_isom_add_uuid(GF_ISOFile *isom_file, u32 trackNumber, bin128 UUID, const u8 *data, u32 size);


GF_Err gf_isom_use_compact_size(GF_ISOFile *isom_file, u32 trackNumber, Bool CompactionOn);


GF_Err gf_isom_disable_brand_rewrite(GF_ISOFile *isom_file, Bool do_disable);


GF_Err gf_isom_set_brand_info(GF_ISOFile *isom_file, u32 MajorBrand, u32 MinorVersion);


GF_Err gf_isom_modify_alternate_brand(GF_ISOFile *isom_file, u32 Brand, Bool AddIt);


GF_Err gf_isom_reset_alt_brands(GF_ISOFile *isom_file);


GF_Err gf_isom_reset_alt_brands_ex(GF_ISOFile *isom_file, Bool leave_empty);


GF_Err gf_isom_set_sample_flags(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 isLeading, u32 dependsOn, u32 dependedOn, u32 redundant);


GF_Err gf_isom_set_visual_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 Width, u32 Height);


GF_Err gf_isom_set_visual_bit_depth(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u16 bitDepth);


GF_Err gf_isom_set_track_layout_info(GF_ISOFile *isom_file, u32 trackNumber, u32 width, u32 height, s32 translation_x, s32 translation_y, s16 layer);


GF_Err gf_isom_set_track_matrix(GF_ISOFile *isom_file, u32 trackNumber, s32 matrix[9]);


GF_Err gf_isom_set_pixel_aspect_ratio(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, s32 hSpacing, s32 vSpacing, Bool force_par);


GF_Err gf_isom_set_clean_aperture(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 cleanApertureWidthN, u32 cleanApertureWidthD, u32 cleanApertureHeightN, u32 cleanApertureHeightD, s32 horizOffN, u32 horizOffD, s32 vertOffN, u32 vertOffD);


GF_Err gf_isom_update_aperture_info(GF_ISOFile *isom_file, u32 trackNumber, Bool remove);



GF_Err gf_isom_set_high_dynamic_range_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_MasteringDisplayColourVolumeInfo *mdcv, GF_ContentLightLevelInfo *clli);


GF_Err gf_isom_set_dolby_vision_profile(GF_ISOFile* isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_DOVIDecoderConfigurationRecord *dvcc);



GF_Err gf_isom_set_image_sequence_coding_constraints(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Bool remove, Bool all_ref_pics_intra, Bool intra_pred_used, u32 max_ref_per_pic);


GF_Err gf_isom_set_image_sequence_alpha(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Bool remove);


GF_Err gf_isom_set_visual_color_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 colour_type, u16 colour_primaries, u16 transfer_characteristics, u16 matrix_coefficients, Bool full_range_flag, u8 *icc_data, u32 icc_size);



typedef enum {
	
	GF_IMPORT_AUDIO_SAMPLE_ENTRY_NOT_SET = 0,  GF_IMPORT_AUDIO_SAMPLE_ENTRY_v0_BS,  GF_IMPORT_AUDIO_SAMPLE_ENTRY_v0_2,  GF_IMPORT_AUDIO_SAMPLE_ENTRY_v1_MPEG,  GF_IMPORT_AUDIO_SAMPLE_ENTRY_v1_QTFF } GF_AudioSampleEntryImportMode;











GF_Err gf_isom_set_audio_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 sampleRate, u32 nbChannels, u8 bitsPerSample, GF_AudioSampleEntryImportMode asemode);



GF_Err gf_isom_set_audio_layout(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_AudioChannelLayout *layout);


GF_Err gf_isom_set_cts_packing(GF_ISOFile *isom_file, u32 trackNumber, Bool unpack);


GF_Err gf_isom_shift_cts_offset(GF_ISOFile *isom_file, u32 trackNumber, s32 offset_shift);


GF_Err gf_isom_set_composition_offset_mode(GF_ISOFile *isom_file, u32 trackNumber, Bool use_negative_offsets);


GF_Err gf_isom_set_ctts_v1(GF_ISOFile *isom_file, u32 trackNumber, u32 ctts_shift);



GF_Err gf_isom_set_media_language(GF_ISOFile *isom_file, u32 trackNumber, char *code);


GF_ISOTrackID gf_isom_get_last_created_track_id(GF_ISOFile *isom_file);


GF_Err gf_isom_apply_box_patch(GF_ISOFile *isom_file, GF_ISOTrackID trackID, const char *box_patch_filename, Bool for_fragments);


GF_Err gf_isom_set_track_magic(GF_ISOFile *isom_file, u32 trackNumber, u64 magic);


GF_Err gf_isom_set_track_index(GF_ISOFile *isom_file, u32 trackNumber, u32 index, void (*track_num_changed)(void *udta, u32 old_track_num, u32 new_track_num), void *udta);


GF_Err gf_isom_remove_stream_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_update_bitrate(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 average_bitrate, u32 max_bitrate, u32 decode_buffer_size);



typedef enum {
	
	GF_ISOM_CLONE_TRACK_KEEP_DREF = 1,  GF_ISOM_CLONE_TRACK_NO_QT = 1<<1,  GF_ISOM_CLONE_TRACK_DROP_ID = 1<<2,  GF_ISOM_CLONE_RESET_DURATION = 1<<3 } GF_ISOTrackCloneFlags;








GF_Err gf_isom_clone_track(GF_ISOFile *orig_file, u32 orig_track, GF_ISOFile *dest_file, GF_ISOTrackCloneFlags flags, u32 *dest_track);



GF_Err gf_isom_set_track_interleaving_group(GF_ISOFile *isom_file, u32 trackNumber, u32 GroupID);


GF_Err gf_isom_set_track_priority_in_group(GF_ISOFile *isom_file, u32 trackNumber, u32 InversePriority);


GF_Err gf_isom_hint_max_chunk_size(GF_ISOFile *isom_file, u32 trackNumber, u32 maxChunkSize);


GF_Err gf_isom_hint_max_chunk_duration(GF_ISOFile *isom_file, u32 trackNumber, u32 maxChunkDur);


GF_Err gf_isom_make_interleave(GF_ISOFile *isom_file, Double TimeInSec);


GF_Err gf_isom_make_interleave_ex(GF_ISOFile *isom_file, GF_Fraction *fTimeInSec);


void gf_isom_set_progress_callback(GF_ISOFile *isom_file, void (*progress_cbk)(void *udta, u64 nb_done, u64 nb_total), void *progress_cbk_udta);


GF_Err gf_isom_set_write_callback(GF_ISOFile *isom_file, GF_Err (*on_block_out)(void *cbk, u8 *data, u32 block_size, void *cbk_data, u32 cbk_magic), GF_Err (*on_block_patch)(void *usr_data, u8 *block, u32 block_size, u64 block_offset, Bool is_insert), void (*on_last_block_start)(void *cbk), void *usr_data, u32 block_size);






Bool gf_isom_is_inplace_rewrite(GF_ISOFile *isom_file);


void gf_isom_disable_inplace_rewrite(GF_ISOFile *isom_file);


GF_Err gf_isom_set_inplace_padding(GF_ISOFile *isom_file, u32 padding);









typedef enum {
	
	GF_ISOM_PL_AUDIO,  GF_ISOM_PL_VISUAL,  GF_ISOM_PL_GRAPHICS,  GF_ISOM_PL_SCENE,  GF_ISOM_PL_OD,  GF_ISOM_PL_MPEGJ,  GF_ISOM_PL_INLINE, } GF_ISOProfileLevelType;














u32 gf_isom_get_mpeg4_subtype(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Descriptor *gf_isom_get_root_od(GF_ISOFile *isom_file);


void gf_isom_disable_odf_conversion(GF_ISOFile *isom_file, Bool disable);


u8 gf_isom_is_track_in_root_od(GF_ISOFile *isom_file, u32 trackNumber);


GF_ESD *gf_isom_get_esd(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_DecoderConfig *gf_isom_get_decoder_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


void gf_isom_set_default_sync_track(GF_ISOFile *isom_file, u32 trackNumber);


u8 gf_isom_get_pl_indication(GF_ISOFile *isom_file, GF_ISOProfileLevelType PL_Code);


u32 gf_isom_find_od_id_for_track(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_set_pl_indication(GF_ISOFile *isom_file, GF_ISOProfileLevelType PL_Code, u8 ProfileLevel);



GF_Err gf_isom_set_root_od_id(GF_ISOFile *isom_file, u32 OD_ID);


GF_Err gf_isom_set_root_od_url(GF_ISOFile *isom_file, const char *url_string);


GF_Err gf_isom_remove_root_od(GF_ISOFile *isom_file);


GF_Err gf_isom_add_desc_to_root_od(GF_ISOFile *isom_file, const GF_Descriptor *theDesc);


GF_Err gf_isom_add_track_to_root_od(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_remove_track_from_root_od(GF_ISOFile *isom_file, u32 trackNumber);



GF_Err gf_isom_new_mpeg4_description(GF_ISOFile *isom_file, u32 trackNumber, const GF_ESD *esd, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_change_mpeg4_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const GF_ESD *newESD);


GF_Err gf_isom_add_desc_to_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const GF_Descriptor *theDesc);


GF_Err gf_isom_clone_pl_indications(GF_ISOFile *orig_file, GF_ISOFile *dest_file);


GF_Err gf_isom_remove_chapter(GF_ISOFile *the_file, u32 trackNumber, u32 index);


GF_Err gf_isom_set_extraction_slc(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const GF_SLConfig *slConfig);









typedef struct {
	
	u32 codec_tag;
	
	bin128 UUID;
	
	u16 version;
	
	u16 revision;
	
	u32 vendor_code;

	
	u32 temporal_quality;
	
	u32 spatial_quality;
	
	u16 width;
	
	u16 height;
	
	u32 h_res;
	
	u32 v_res;
	
	u16 depth;
	
	u16 color_table_index;
	
	char compressor_name[33];

	
	u32 samplerate;
	
	u16 nb_channels;
	
	u16 bits_per_sample;
	
	Bool is_qtff;
	
	u32 lpcm_flags;

	
	u8 *extension_buf;
	
	u32 extension_buf_size;
	
	u32 ext_box_wrap;
} GF_GenericSampleDescription;


GF_GenericSampleDescription *gf_isom_get_generic_sample_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_get_jp2_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u8 **out_dsi, u32 *out_size);




GF_Err gf_isom_get_rvc_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u16 *rvc_predefined, u8 **data, u32 *size, const char **mime);



GF_Err gf_isom_set_rvc_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u16 rvc_predefined, char *mime, u8 *data, u32 size);



GF_Err gf_isom_update_video_sample_entry_fields(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u16 revision, u32 vendor, u32 temporalQ, u32 spatialQ, u32 horiz_res, u32 vert_res, u16 frames_per_sample, const char *compressor_name, s16 color_table_index);


GF_Err gf_isom_update_sample_description_from_template(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u8 *data, u32 size);



GF_Err gf_isom_new_generic_sample_description(GF_ISOFile *isom_file, u32 trackNumber, const char *URLname, const char *URNname, GF_GenericSampleDescription *udesc, u32 *outDescriptionIndex);


GF_Err gf_isom_clone_sample_description(GF_ISOFile *isom_file, u32 trackNumber, GF_ISOFile *orig_file, u32 orig_track, u32 orig_desc_index, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_get_stsd_template(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u8 **output, u32 *output_size);




Bool gf_isom_is_same_sample_description(GF_ISOFile *f1, u32 tk1, u32 sdesc_index1, GF_ISOFile *f2, u32 tk2, u32 sdesc_index2);



typedef struct {
	
	u32 type;
	
	u32 vendor;
	
	u8 decoder_version;
	
	u8 frames_per_sample;
	
	u8 H263_level;
	
	u8 H263_profile;
	
	u16 AMR_mode_set;
	
	u8 AMR_mode_change_period;
} GF_3GPConfig;



GF_3GPConfig *gf_isom_3gp_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_3gp_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_3GPConfig *config, const char *URLname, const char *URNname, u32 *outDescriptionIndex);

GF_Err gf_isom_3gp_config_update(GF_ISOFile *isom_file, u32 trackNumber, GF_3GPConfig *config, u32 sampleDescriptionIndex);




GF_AVCConfig *gf_isom_avc_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);

GF_AVCConfig *gf_isom_svc_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);

GF_AVCConfig *gf_isom_mvc_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


typedef enum {
	
	GF_ISOM_AVCTYPE_NONE=0,  GF_ISOM_AVCTYPE_AVC_ONLY,  GF_ISOM_AVCTYPE_AVC_SVC,  GF_ISOM_AVCTYPE_SVC_ONLY,  GF_ISOM_AVCTYPE_AVC_MVC,  GF_ISOM_AVCTYPE_MVC_ONLY, } GF_ISOMAVCType;












GF_ISOMAVCType gf_isom_get_avc_svc_type(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


typedef enum {
	
	GF_ISOM_HEVCTYPE_NONE=0,  GF_ISOM_HEVCTYPE_HEVC_ONLY,  GF_ISOM_HEVCTYPE_HEVC_LHVC,  GF_ISOM_HEVCTYPE_LHVC_ONLY, } GF_ISOMHEVCType;








GF_ISOMHEVCType gf_isom_get_hevc_lhvc_type(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_HEVCConfig *gf_isom_hevc_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);

GF_HEVCConfig *gf_isom_lhvc_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


typedef enum {
	
	GF_ISOM_VVCTYPE_NONE=0,  GF_ISOM_VVCTYPE_ONLY,  GF_ISOM_VVCTYPE_SUBPIC,  GF_ISOM_VVCTYPE_NVCL, } GF_ISOMVVCType;








GF_ISOMVVCType gf_isom_get_vvc_type(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_VVCConfig *gf_isom_vvc_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_AV1Config *gf_isom_av1_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_VPConfig *gf_isom_vp_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_DOVIDecoderConfigurationRecord* gf_isom_dovi_config_get(GF_ISOFile* isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


Bool gf_isom_needs_layer_reconstruction(GF_ISOFile *isom_file);


typedef enum {
	
	GF_ISOM_NALU_EXTRACT_DEFAULT = 0,  GF_ISOM_NALU_EXTRACT_LAYER_ONLY,  GF_ISOM_NALU_EXTRACT_INSPECT,  GF_ISOM_NALU_EXTRACT_INBAND_PS_FLAG = 1<<16,  GF_ISOM_NALU_EXTRACT_ANNEXB_FLAG = 2<<17,  GF_ISOM_NALU_EXTRACT_VDRD_FLAG = 1<<18,  GF_ISOM_NALU_EXTRACT_TILE_ONLY = 1<<19 } GF_ISONaluExtractMode;














GF_Err gf_isom_set_nalu_extract_mode(GF_ISOFile *isom_file, u32 trackNumber, GF_ISONaluExtractMode nalu_extract_mode);

GF_ISONaluExtractMode gf_isom_get_nalu_extract_mode(GF_ISOFile *isom_file, u32 trackNumber);


s32 gf_isom_get_composition_offset_shift(GF_ISOFile *isom_file, u32 trackNumber);



GF_Err gf_isom_avc_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_AVCConfig *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);

GF_Err gf_isom_avc_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_AVCConfig *cfg);


GF_Err gf_isom_svc_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_AVCConfig *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);

GF_Err gf_isom_svc_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_AVCConfig *cfg, Bool is_additional);

GF_Err gf_isom_svc_config_del(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_mvc_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_AVCConfig *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_mvc_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_AVCConfig *cfg, Bool is_additional);


GF_Err gf_isom_mvc_config_del(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_avc_set_inband_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Bool keep_xps);


GF_Err gf_isom_hevc_set_inband_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Bool keep_xps);


GF_Err gf_isom_lhvc_force_inband_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_hevc_set_tile_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_HEVCConfig *cfg, Bool is_base_track);


GF_Err gf_isom_hevc_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_HEVCConfig *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_hevc_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_HEVCConfig *cfg);


typedef enum {
	
	GF_ISOM_LEHVC_ONLY = 0,  GF_ISOM_LEHVC_WITH_BASE,  GF_ISOM_LEHVC_WITH_BASE_BACKWARD,  GF_ISOM_HEVC_TILE_BASE, } GF_ISOMLHEVCTrackType;








GF_Err gf_isom_lhvc_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_HEVCConfig *cfg, GF_ISOMLHEVCTrackType track_type);


GF_Err gf_isom_set_nalu_length_field(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 nalu_size_length);



GF_Err gf_isom_vvc_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_VVCConfig *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_vvc_set_inband_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Bool keep_xps);


GF_Err gf_isom_vvc_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_VVCConfig *cfg);


GF_Err gf_isom_vp_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_VPConfig *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex, u32 vpx_type);



GF_Err gf_isom_av1_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_AV1Config *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);






typedef struct {
	
	u8 profile;
	
	u8 level;
	
	u8 pathComponents;
	
	Bool fullRequestHost;
	
	Bool streamType;
	
	u8 containsRedundant;
	
	const char *textEncoding;
	
	const char *contentEncoding;
	
	const char *content_script_types;
	
	const char *mime_type;
	
	const char *xml_schema_loc;
} GF_DIMSDescription;


GF_Err gf_isom_get_dims_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_DIMSDescription *desc);



GF_Err gf_isom_new_dims_description(GF_ISOFile *isom_file, u32 trackNumber, GF_DIMSDescription *desc, const char *URLname, const char *URNname, u32 *outDescriptionIndex);



GF_AC3Config *gf_isom_ac3_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);



GF_Err gf_isom_ac3_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_AC3Config *cfg, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_ac3_config_update(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_AC3Config *cfg);




GF_Err gf_isom_truehd_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *format_info, u32 *peak_data_rate);



GF_Err gf_isom_truehd_config_new(GF_ISOFile *isom_file, u32 trackNumber, char *URLname, char *URNname, u32 format_info, u32 peak_data_rate, u32 *outDescriptionIndex);



GF_Err gf_isom_flac_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u8 **dsi, u32 *dsi_size);



GF_Err gf_isom_flac_config_new(GF_ISOFile *isom_file, u32 trackNumber, u8 *metadata, u32 metadata_size, const char *URLname, const char *URNname, u32 *outDescriptionIndex);



GF_Err gf_isom_opus_config_get(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u8 **dsi, u32 *dsi_size);


GF_Err gf_isom_opus_config_get_desc(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_OpusConfig *opcfg);



GF_Err gf_isom_opus_config_new(GF_ISOFile *isom_file, u32 trackNumber, GF_OpusConfig *cfg, char *URLname, char *URNname, u32 *outDescriptionIndex);





GF_Err gf_isom_new_mj2k_description(GF_ISOFile *isom_file, u32 trackNumber, const char *URLname, const char *URNname, u32 *outDescriptionIndex, u8 *dsi, u32 dsi_len);





GF_Err gf_isom_tmcd_config_new(GF_ISOFile *isom_file, u32 trackNumber, u32 fps_num, u32 fps_den, s32 frames_per_counter_tick, Bool is_drop, Bool is_counter, u32 *outDescriptionIndex);




GF_Err gf_isom_get_tmcd_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *tmcd_flags, u32 *tmcd_fps_num, u32 *tmcd_fps_den, u32 *tmcd_fpt);


GF_Err gf_isom_get_pcm_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *flags, u32 *pcm_size);


GF_Err gf_isom_get_lpcm_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, Double *sample_rate, u32 *nb_channels, u32 *flags, u32 *pcm_size);





GF_Err gf_isom_new_mpha_description(GF_ISOFile *isom_file, u32 trackNumber, const char *URLname, const char *URNname, u32 *outDescriptionIndex, u8 *dsi, u32 dsi_size, u32 mha_subtype);



const u8 *gf_isom_get_mpegh_compatible_profiles(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *nb_compatible_profiles);




GF_Err gf_isom_set_mpegh_compatible_profiles(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const u32 *profiles, u32 nb_compatible_profiles);



typedef struct {
	
	u32 stereo_type;
	
	u32 projection_type;
	
	const char *meta_data;
	
	Bool pose_present;
	
	u32 yaw;
	
	u32 pitch;
	
	u32 roll;

	
	u32 layout;
	
	u32 padding;

	
	u32 top;
	
	u32 bottom;
	
	u32 left;
	
	u32 right;

} GF_ISOM_Y3D_Info;



GF_Err gf_isom_get_y3d_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_ISOM_Y3D_Info *info);



GF_Err gf_isom_set_y3d_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_ISOM_Y3D_Info *info);








Bool gf_isom_is_fragmented(GF_ISOFile *isom_file);


Bool gf_isom_is_track_fragmented(GF_ISOFile *isom_file, GF_ISOTrackID TrackID);




Bool gf_isom_has_segment(GF_ISOFile *isom_file, u32 *brand, u32 *version);

u32 gf_isom_segment_get_fragment_count(GF_ISOFile *isom_file);

u32 gf_isom_segment_get_track_fragment_count(GF_ISOFile *isom_file, u32 moof_index);

u32 gf_isom_segment_get_track_fragment_decode_time(GF_ISOFile *isom_file, u32 moof_index, u32 traf_index, u64 *decode_time);


u64 gf_isom_segment_get_fragment_size(GF_ISOFile *isom_file, u32 moof_index, u32 *moof_size);


void gf_isom_set_single_moof_mode(GF_ISOFile *isom_file, Bool mode);


GF_Err gf_isom_get_file_offset_for_time(GF_ISOFile *isom_file, Double start_time, u64 *offset);


GF_Err gf_isom_get_sidx_duration(GF_ISOFile *isom_file, u64 *sidx_dur, u32 *sidx_timescale);



GF_Err gf_isom_refresh_fragmented(GF_ISOFile *isom_file, u64 *MissingBytes, const char *new_location);


u64 gf_isom_get_current_tfdt(GF_ISOFile *isom_file, u32 trackNumber);


u64 gf_isom_get_smooth_next_tfdt(GF_ISOFile *isom_file, u32 trackNumber);


Bool gf_isom_is_smooth_streaming_moov(GF_ISOFile *isom_file);



GF_Err gf_isom_get_fragment_defaults(GF_ISOFile *isom_file, u32 trackNumber, u32 *defaultDuration, u32 *defaultSize, u32 *defaultDescriptionIndex, u32 *defaultRandomAccess, u8 *defaultPadding, u16 *defaultDegradationPriority);





Bool gf_isom_get_last_producer_time_box(GF_ISOFile *isom_file, GF_ISOTrackID *refTrackID, u64 *ntp, u64 *timestamp, Bool reset_info);


void gf_isom_enable_traf_map_templates(GF_ISOFile *isom_file);

Bool gf_isom_get_root_sidx_offsets(GF_ISOFile *isom_file, u64 *start, u64 *end);


typedef struct {
	
	u64 frag_start;
	
	u64 mdat_end;
	
	u64 seg_start_plus_one;

	
	const u8 *moof_template;
	
	u32 moof_template_size;
	
	u64 sidx_start;
	
	u64 sidx_end;
	
	u64 first_dts;
} GF_ISOFragmentBoundaryInfo;


Bool gf_isom_sample_is_fragment_start(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNum, GF_ISOFragmentBoundaryInfo *frag_info);


GF_Err gf_isom_release_segment(GF_ISOFile *isom_file, Bool reset_tables);





GF_Err gf_isom_reset_tables(GF_ISOFile *isom_file, Bool reset_sample_count);


GF_Err gf_isom_reset_data_offset(GF_ISOFile *isom_file, u64 *top_box_start);


typedef enum {
	
	GF_ISOM_SEGMENT_NO_ORDER_FLAG = 1,  GF_ISOM_SEGMENT_SCALABLE_FLAG = 1<<1, } GF_ISOSegOpenMode;






GF_Err gf_isom_open_segment(GF_ISOFile *isom_file, const char *fileName, u64 start_range, u64 end_range, GF_ISOSegOpenMode flags);


GF_ISOTrackID gf_isom_get_highest_track_in_scalable_segment(GF_ISOFile *isom_file, u32 for_base_track);


void gf_isom_reset_fragment_info(GF_ISOFile *isom_file, Bool keep_sample_count);


void gf_isom_reset_sample_count(GF_ISOFile *isom_file);

void gf_isom_reset_seq_num(GF_ISOFile *isom_file);


u64 gf_isom_get_fragmented_duration(GF_ISOFile *isom_file);


u32 gf_isom_get_fragments_count(GF_ISOFile *isom_file, Bool segments_only);


GF_Err gf_isom_get_fragmented_samples_info(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u32 *nb_samples, u64 *duration);


u32 gf_isom_get_next_moof_number(GF_ISOFile *isom_file);








u32 gf_isom_get_udta_count(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_get_udta_type(GF_ISOFile *isom_file, u32 trackNumber, u32 udta_idx, u32 *UserDataType, bin128 *UUID);


u32 gf_isom_get_user_data_count(GF_ISOFile *isom_file, u32 trackNumber, u32 UserDataType, bin128 UUID);


GF_Err gf_isom_get_user_data(GF_ISOFile *isom_file, u32 trackNumber, u32 UserDataType, bin128 UUID, u32 UserDataIndex, u8 **userData, u32 *userDataSize);




GF_Err gf_isom_add_user_data(GF_ISOFile *isom_file, u32 trackNumber, u32 UserDataType, bin128 UUID, u8 *data, u32 size);


GF_Err gf_isom_remove_user_data(GF_ISOFile *isom_file, u32 trackNumber, u32 UserDataType, bin128 UUID);


GF_Err gf_isom_remove_user_data_item(GF_ISOFile *isom_file, u32 trackNumber, u32 UserDataType, bin128 UUID, u32 UserDataIndex);


GF_Err gf_isom_add_user_data_boxes(GF_ISOFile *isom_file, u32 trackNumber, u8 *data, u32 size);


GF_Err gf_isom_get_raw_user_data(GF_ISOFile *isom_file, u8 **output, u32 *output_size);
















GF_Err gf_isom_setup_track_fragment(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, u32 DefaultSampleDescriptionIndex, u32 DefaultSampleDuration, u32 DefaultSampleSize, u8 DefaultSampleSyncFlags, u8 DefaultSamplePadding, u16 DefaultDegradationPriority, Bool force_traf_flags);








GF_Err gf_isom_change_track_fragment_defaults(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, u32 DefaultSampleDescriptionIndex, u32 DefaultSampleDuration, u32 DefaultSampleSize, u8 DefaultSampleIsSync, u8 DefaultSamplePadding, u16 DefaultDegradationPriority, u8 force_traf_flags);








GF_Err gf_isom_finalize_for_fragment(GF_ISOFile *isom_file, u32 media_segment_type, Bool mvex_after_tracks);


GF_Err gf_isom_set_movie_duration(GF_ISOFile *isom_file, u64 duration, Bool remove_mehd);


typedef enum {
	
	GF_ISOM_FRAG_MOOF_FIRST = 1,   GF_ISOM_FRAG_USE_COMPACT = 1<<1,  } GF_ISOStartFragmentFlags;





GF_Err gf_isom_start_fragment(GF_ISOFile *isom_file, GF_ISOStartFragmentFlags moof_first);


GF_Err gf_isom_start_segment(GF_ISOFile *isom_file, const char *SegName, Bool memory_mode);


GF_Err gf_isom_set_traf_base_media_decode_time(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, u64 decode_time);


GF_Err gf_isom_enable_mfra(GF_ISOFile *isom_file);


GF_Err gf_isom_set_traf_mss_timeext(GF_ISOFile *isom_file, GF_ISOTrackID reference_track_ID, u64 decode_traf_time, u64 traf_duration);


GF_Err gf_isom_close_segment(GF_ISOFile *isom_file, s32 subsegs_per_sidx, GF_ISOTrackID referenceTrackID, u64 ref_track_decode_time, s32 timestamp_shift, u64 ref_track_next_cts, Bool daisy_chain_sidx, Bool use_ssix, Bool last_segment, Bool close_segment_handle, u32 segment_marker_4cc, u64 *index_start_range, u64 *index_end_range, u64 *out_seg_size);


GF_Err gf_isom_flush_fragments(GF_ISOFile *isom_file, Bool last_segment);


GF_Err gf_isom_set_fragment_reference_time(GF_ISOFile *isom_file, GF_ISOTrackID reference_track_ID, u64 ntp, u64 timestamp);


GF_Err gf_isom_allocate_sidx(GF_ISOFile *isom_file, s32 subsegs_per_sidx, Bool daisy_chain_sidx, u32 nb_segs, u32 *frags_per_segment, u32 *start_range, u32 *end_range, Bool use_ssix);


GF_Err gf_isom_setup_track_fragment_template(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, u8 *boxes, u32 boxes_size, u8 force_traf_flags);



GF_Err gf_isom_enable_traf_inherit(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, GF_ISOTrackID BaseTrackID);



typedef enum {
	
	GF_ISOM_TRAF_EMPTY,  GF_ISOM_TRAF_RANDOM_ACCESS,  GF_ISOM_TRAF_DATA_CACHE,  GF_ISOM_TFHD_FORCE_MOOF_BASE_OFFSET,  GF_ISOM_TRAF_USE_SAMPLE_DEPS_BOX,  GF_ISOM_TRUN_FORCE,  GF_ISOM_TRUN_SET_INTERLEAVE_ID,  GF_ISOM_TRAF_TRUNS_FIRST,  GF_ISOM_TRAF_TRUN_V1,  GF_ISOM_TRAF_USE_LARGE_TFDT } GF_ISOTrackFragmentOption;




















GF_Err gf_isom_set_fragment_option(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, GF_ISOTrackFragmentOption Code, u32 param);


GF_Err gf_isom_fragment_add_sample(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, const GF_ISOSample *sample, u32 sampleDescriptionIndex, u32 Duration, u8 PaddingBits, u16 DegradationPriority, Bool redundantCoding);



GF_Err gf_isom_fragment_append_data(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, u8 *data, u32 data_size, u8 PaddingBits);



GF_Err gf_isom_fragment_set_cenc_sai(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u8 *sai_b, u32 sai_b_size, Bool use_subsample, Bool use_saio_32bit, Bool use_multikey);






GF_Err gf_isom_clone_pssh(GF_ISOFile *dst_file, GF_ISOFile *src_file, Bool in_moof);







GF_Err gf_isom_fragment_set_sample_roll_group(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u32 sample_number, GF_ISOSampleRollType roll_type, s16 roll_distance);


GF_Err gf_isom_fragment_set_sample_rap_group(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u32 sample_number_in_frag, Bool is_rap, u32 num_leading_samples);


GF_Err gf_isom_fragment_set_sample_flags(GF_ISOFile *isom_file, GF_ISOTrackID trackID, u32 is_leading, u32 dependsOn, u32 dependedOn, u32 redundant);




GF_Err gf_isom_fragment_set_sample_aux_info(GF_ISOFile *isom_file, u32 trackID, u32 sample_number_in_frag, u32 aux_type, u32 aux_info, u8 *data, u32 size);



void gf_isom_set_next_moof_number(GF_ISOFile *isom_file, u32 value);









typedef enum {
	
	GF_ISOM_HINT_RTP = GF_4CC('r', 't', 'p', ' '), } GF_ISOHintFormat;




GF_Err gf_isom_setup_hint_track(GF_ISOFile *isom_file, u32 trackNumber, GF_ISOHintFormat HintType);


GF_Err gf_isom_new_hint_description(GF_ISOFile *isom_file, u32 trackNumber, s32 HintTrackVersion, s32 LastCompatibleVersion, u8 Rely, u32 *HintDescriptionIndex);


GF_Err gf_isom_begin_hint_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 HintDescriptionIndex, u32 TransmissionTime);


GF_Err gf_isom_end_hint_sample(GF_ISOFile *isom_file, u32 trackNumber, u8 IsRandomAccessPoint);





GF_Err gf_isom_hint_blank_data(GF_ISOFile *isom_file, u32 trackNumber, u8 AtBegin);


GF_Err gf_isom_hint_direct_data(GF_ISOFile *isom_file, u32 trackNumber, u8 *data, u32 dataLength, u8 AtBegin);


GF_Err gf_isom_hint_sample_data(GF_ISOFile *isom_file, u32 trackNumber, GF_ISOTrackID SourceTrackID, u32 SampleNumber, u16 DataLength, u32 offsetInSample, u8 *extra_data, u8 AtBegin);



GF_Err gf_isom_hint_sample_description_data(GF_ISOFile *isom_file, u32 trackNumber, GF_ISOTrackID SourceTrackID, u32 sampleDescriptionIndex, u16 DataLength, u32 offsetInDescription, u8 AtBegin);



GF_Err gf_isom_rtp_packet_begin(GF_ISOFile *isom_file, u32 trackNumber, s32 relativeTime, u8 PackingBit, u8 eXtensionBit, u8 MarkerBit, u8 PayloadType, u8 disposable_packet, u8 IsRepeatedPacket, u16 SequenceNumber);


GF_Err gf_isom_rtp_packet_set_flags(GF_ISOFile *isom_file, u32 trackNumber, u8 PackingBit, u8 eXtensionBit, u8 MarkerBit, u8 disposable_packet, u8 IsRepeatedPacket);


GF_Err gf_isom_rtp_packet_set_offset(GF_ISOFile *isom_file, u32 trackNumber, s32 timeOffset);



GF_Err gf_isom_rtp_set_timescale(GF_ISOFile *isom_file, u32 trackNumber, u32 HintDescriptionIndex, u32 TimeScale);


GF_Err gf_isom_rtp_set_time_offset(GF_ISOFile *isom_file, u32 trackNumber, u32 HintDescriptionIndex, u32 TimeOffset);


GF_Err gf_isom_rtp_set_time_sequence_offset(GF_ISOFile *isom_file, u32 trackNumber, u32 HintDescriptionIndex, u32 SequenceNumberOffset);


GF_Err gf_isom_sdp_add_track_line(GF_ISOFile *isom_file, u32 trackNumber, const char *text);

GF_Err gf_isom_sdp_clean_track(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_sdp_add_line(GF_ISOFile *isom_file, const char *text);

GF_Err gf_isom_sdp_clean(GF_ISOFile *isom_file);








GF_Err gf_isom_dump_hint_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 SampleNum, FILE * trace);



GF_Err gf_isom_sdp_get(GF_ISOFile *isom_file, const char **sdp, u32 *length);

GF_Err gf_isom_sdp_track_get(GF_ISOFile *isom_file, u32 trackNumber, const char **sdp, u32 *length);

u32 gf_isom_get_payt_count(GF_ISOFile *isom_file, u32 trackNumber);

const char *gf_isom_get_payt_info(GF_ISOFile *isom_file, u32 trackNumber, u32 index, u32 *payID);











GF_Err gf_isom_text_set_streaming_mode(GF_ISOFile *isom_file, Bool do_convert);




typedef enum {
	
	GF_TEXTDUMPTYPE_TTXT = 0,  GF_TEXTDUMPTYPE_TTXT_BOXES,  GF_TEXTDUMPTYPE_SRT,  GF_TEXTDUMPTYPE_SVG,  GF_TEXTDUMPTYPE_TTXT_CHAP,  GF_TEXTDUMPTYPE_OGG_CHAP,  GF_TEXTDUMPTYPE_ZOOM_CHAP } GF_TextDumpType;













GF_Err gf_isom_text_dump(GF_ISOFile *isom_file, u32 trackNumber, FILE *dump, GF_TextDumpType dump_type);



GF_Err gf_isom_text_get_encoded_tx3g(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 sidx_offset, u8 **tx3g, u32 *tx3g_size);


GF_Err gf_isom_set_forced_text(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 force_type);


typedef struct _3gpp_text_sample GF_TextSample;

GF_TextSample *gf_isom_new_text_sample();

void gf_isom_delete_text_sample(GF_TextSample *tx_samp);


typedef struct _generic_subtitle_sample GF_GenericSubtitleSample;

GF_GenericSubtitleSample *gf_isom_new_generic_subtitle_sample();

void gf_isom_delete_generic_subtitle_sample(GF_GenericSubtitleSample *generic_subtitle_samp);



GF_Err gf_isom_new_webvtt_description(GF_ISOFile *isom_file, u32 trackNumber, const char *URLname, const char *URNname, u32 *outDescriptionIndex, const char *config);



const char *gf_isom_get_webvtt_config(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_stxt_get_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const char **mime, const char **encoding, const char **config);



GF_Err gf_isom_new_stxt_description(GF_ISOFile *isom_file, u32 trackNumber, u32 type, const char *mime, const char *encoding, const char *config, u32 *outDescriptionIndex);




GF_Err gf_isom_xml_subtitle_get_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const char **xmlnamespace, const char **xml_schema_loc, const char **mimes);



GF_Err gf_isom_new_xml_subtitle_description(GF_ISOFile *isom_file, u32 trackNumber, const char *xmlnamespace, const char *xml_schema_loc, const char *auxiliary_mimes, u32 *outDescriptionIndex);





const char *gf_isom_subtitle_get_mime(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);



GF_Err gf_isom_subtitle_set_mime(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const char *full_mime);




GF_Err gf_isom_get_xml_metadata_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, const char **xmlnamespace, const char **schema_loc, const char **content_encoding);



GF_Err gf_isom_new_xml_metadata_description(GF_ISOFile *isom_file, u32 trackNumber, const char *xmlnamespace, const char *schema_loc, const char *content_encoding, u32 *outDescriptionIndex);






typedef enum {
	GF_ISOM_TEXT_FLAGS_OVERWRITE = 0, GF_ISOM_TEXT_FLAGS_TOGGLE, GF_ISOM_TEXT_FLAGS_UNTOGGLE, } GF_TextFlagsMode;



GF_Err gf_isom_text_set_display_flags(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 flags, GF_TextFlagsMode op_type);


GF_Err gf_isom_get_text_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_TextSampleDescriptor **out_desc);




GF_Err gf_isom_new_text_description(GF_ISOFile *isom_file, u32 trackNumber, GF_TextSampleDescriptor *desc, const char *URLname, const char *URNname, u32 *outDescriptionIndex);


GF_Err gf_isom_text_reset(GF_TextSample * tx_samp);

GF_Err gf_isom_text_reset_styles(GF_TextSample *tx_samp);


GF_Err gf_isom_text_add_text(GF_TextSample *tx_samp, char *text_data, u32 text_len);

GF_Err gf_isom_text_add_style(GF_TextSample *tx_samp, GF_StyleRecord *rec);

GF_Err gf_isom_text_add_highlight(GF_TextSample *tx_samp, u16 start_char, u16 end_char);


GF_Err gf_isom_text_set_highlight_color(GF_TextSample *tx_samp, u32 argb);

GF_Err gf_isom_text_add_karaoke(GF_TextSample *tx_samp, u32 start_time);

GF_Err gf_isom_text_set_karaoke_segment(GF_TextSample *tx_samp, u32 end_time, u16 start_char, u16 end_char);

GF_Err gf_isom_text_set_scroll_delay(GF_TextSample *tx_samp, u32 scroll_delay);

GF_Err gf_isom_text_add_hyperlink(GF_TextSample *tx_samp, char *URL, char *altString, u16 start_char, u16 end_char);

GF_Err gf_isom_text_set_box(GF_TextSample *tx_samp, s16 top, s16 left, s16 bottom, s16 right);

GF_Err gf_isom_text_add_blink(GF_TextSample *tx_samp, u16 start_char, u16 end_char);

GF_Err gf_isom_text_set_wrap(GF_TextSample *tx_samp, u8 wrap_flags);


GF_Err gf_isom_text_set_forced(GF_TextSample *tx_samp, Bool is_forced);


GF_Err gf_isom_text_sample_write_bs(const GF_TextSample *tx_samp, GF_BitStream *bs);



GF_ISOSample *gf_isom_text_to_sample(const GF_TextSample *tx_samp);


u32 gf_isom_text_sample_size(GF_TextSample *tx_samp);


GF_GenericSubtitleSample *gf_isom_new_xml_subtitle_sample();

void gf_isom_delete_xml_subtitle_sample(GF_GenericSubtitleSample *subt_samp);

GF_Err gf_isom_xml_subtitle_reset(GF_GenericSubtitleSample *subt_samp);

GF_ISOSample *gf_isom_xml_subtitle_to_sample(GF_GenericSubtitleSample *subt_samp);

GF_Err gf_isom_xml_subtitle_sample_add_text(GF_GenericSubtitleSample *subt_samp, char *text_data, u32 text_len);












enum {
	
	GF_ISOM_BOX_UUID_PSEC = GF_4CC( 'P', 'S', 'E', 'C' ),  GF_ISOM_BOX_TYPE_SENC = GF_4CC( 's', 'e', 'n', 'c'),  GF_ISOM_BOX_TYPE_PSSH = GF_4CC( 'p', 's', 's', 'h'),  GF_ISOM_ISMACRYP_SCHEME	= GF_4CC( 'i', 'A', 'E', 'C' ),  GF_ISOM_OMADRM_SCHEME = GF_4CC('o','d','k','m'),  GF_ISOM_CENC_SCHEME	= GF_4CC('c','e','n','c'),  GF_ISOM_CBC_SCHEME = GF_4CC('c','b','c','1'),  GF_ISOM_ADOBE_SCHEME = GF_4CC('a','d','k','m'),  GF_ISOM_CENS_SCHEME	= GF_4CC('c','e','n','s'),  GF_ISOM_CBCS_SCHEME	= GF_4CC('c','b','c','s'),  GF_ISOM_PIFF_SCHEME	= GF_4CC('p','i','f','f'),  GF_ISOM_SVE1_SCHEME	= GF_4CC('s','v','e','1'), };

























typedef enum {
	
	GF_ISOM_ISMA_USE_SEL_ENC = 1,  GF_ISOM_ISMA_IS_ENCRYPTED = 2, } GF_ISOISMACrypFlags;







Bool gf_isom_is_track_encrypted(GF_ISOFile *isom_file, u32 trackNumber);




typedef struct {
	
	u64 IV;
	
	u8 IV_length;
	
	u8 *key_indicator;
	
	u8 KI_length;
	
	u32 dataLength;
	
	u8 *data;
	
	u32 flags;
} GF_ISMASample;

GF_ISMASample *gf_isom_ismacryp_new_sample();


void gf_isom_ismacryp_delete_sample(GF_ISMASample *samp);


GF_ISMASample *gf_isom_ismacryp_sample_from_data(u8 *data, u32 dataLength, Bool use_selective_encryption, u8 KI_length, u8 IV_length);


GF_ISMASample *gf_isom_get_ismacryp_sample(GF_ISOFile *isom_file, u32 trackNumber, const GF_ISOSample *samp, u32 sampleDescriptionIndex);


u32 gf_isom_is_media_encrypted(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


Bool gf_isom_is_ismacryp_media(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


Bool gf_isom_is_omadrm_media(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_get_omadrm_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *outOriginalFormat, u32 *outSchemeType, u32 *outSchemeVersion, const char **outContentID, const char **outRightsIssuerURL, const char **outTextualHeaders, u32 *outTextualHeadersLen, u64 *outPlaintextLength, u32 *outEncryptionType, Bool *outSelectiveEncryption, u32 *outIVLength, u32 *outKeyIndicationLength);



GF_Err gf_isom_get_ismacryp_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *outOriginalFormat, u32 *outSchemeType, u32 *outSchemeVersion, const char **outSchemeURI, const char **outKMS_URI, Bool *outSelectiveEncryption, u32 *outIVLength, u32 *outKeyIndicationLength);


GF_Err gf_isom_get_original_format_type(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *outOriginalFormat);




GF_Err gf_isom_set_ismacryp_protection(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 scheme_type, u32 scheme_version, char *scheme_uri, char *kms_URI, Bool selective_encryption, u32 KI_length, u32 IV_length);



GF_Err gf_isom_change_ismacryp_protection(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, char *scheme_uri, char *kms_uri);



GF_Err gf_isom_set_oma_protection(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, char *contentID, char *kms_URI, u32 encryption_type, u64 plainTextLength, char *textual_headers, u32 textual_headers_len, Bool selective_encryption, u32 KI_length, u32 IV_length);



GF_Err gf_isom_set_generic_protection(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 scheme_type, u32 scheme_version, char *scheme_uri, char *kms_URI);


GF_Err gf_isom_cenc_allocate_storage(GF_ISOFile *isom_file, u32 trackNumber);


GF_Err gf_isom_piff_allocate_storage(GF_ISOFile *isom_file, u32 trackNumber, u32 AlgorithmID, u8 IV_size, bin128 KID);



GF_Err gf_isom_track_cenc_add_sample_info(GF_ISOFile *isom_file, u32 trackNumber, u32 container_type, u8 *buf, u32 len, Bool use_subsamples, Bool use_saio_32bit, Bool is_multi_key);




GF_Err gf_isom_set_cenc_protection(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 scheme_type, u32 scheme_version, u32 default_IsEncrypted, u8 default_crypt_byte_block, u8 default_skip_byte_block, u8 *key_info, u32 key_info_size);




GF_Err gf_isom_set_cenc_protection_mkey(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 scheme_type, u32 scheme_version, u32 default_IsEncrypted, u8 default_crypt_byte_block, u8 default_skip_byte_block, u8 *key_info, u32 key_info_size);




GF_Err gf_cenc_set_pssh(GF_ISOFile *isom_file, bin128 systemID, u32 version, u32 KID_count, bin128 *KID, u8 *data, u32 len, u32 pssh_mode);


GF_Err gf_isom_remove_samp_enc_box(GF_ISOFile *isom_file, u32 trackNumber);

GF_Err gf_isom_remove_samp_group_box(GF_ISOFile *isom_file, u32 trackNumber);




Bool gf_isom_is_adobe_protection_media(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);


GF_Err gf_isom_get_adobe_protection_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *outOriginalFormat, u32 *outSchemeType, u32 *outSchemeVersion, const char **outMetadata);



GF_Err gf_isom_set_adobe_protection(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 scheme_type, u32 scheme_version, Bool is_selective_enc, char *metadata, u32 len);




Bool gf_isom_is_cenc_media(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex);

GF_Err gf_isom_get_cenc_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *outOriginalFormat, u32 *outSchemeType, u32 *outSchemeVersion);



GF_Err gf_isom_cenc_get_sample_aux_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 sampleDescIndex, u32 *container_type, u8 **out_buffer, u32 *outSize);


GF_Err gf_isom_cenc_get_default_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, u32 *container_type, Bool *default_IsEncrypted, u8 *crypt_byte_block, u8 *skip_byte_block, const u8 **key_info, u32 *key_info_size);


u32 gf_isom_get_pssh_count(GF_ISOFile *isom_file);


GF_Err gf_isom_get_pssh_info(GF_ISOFile *isom_file, u32 pssh_index, bin128 SystemID, u32 *version, u32 *KID_count, const bin128 **KIDs, const u8 **private_data, u32 *private_data_size);



GF_Err gf_isom_dump_ismacryp_protection(GF_ISOFile *isom_file, u32 trackNumber, FILE * trace);

GF_Err gf_isom_dump_ismacryp_sample(GF_ISOFile *isom_file, u32 trackNumber, u32 SampleNum, FILE *trace);



GF_Err gf_isom_get_sample_cenc_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, Bool *IsEncrypted, u8 *crypt_byte_block, u8 *skip_byte_block, const u8 **key_info, u32 *key_info_size);







u32 gf_isom_get_meta_type(GF_ISOFile *isom_file, Bool root_meta, u32 track_num);


u32 gf_isom_has_meta_xml(GF_ISOFile *isom_file, Bool root_meta, u32 track_num);


GF_Err gf_isom_extract_meta_xml(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, char *outName, Bool *is_binary);


u32 gf_isom_get_meta_item_count(GF_ISOFile *isom_file, Bool root_meta, u32 track_num);


GF_Err gf_isom_get_meta_item_info(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_num, u32 *itemID, u32 *type, u32 *protection_scheme, u32 *protection_scheme_version, Bool *is_self_reference, const char **item_name, const char **item_mime_type, const char **item_encoding, const char **item_url, const char **item_urn);




u32 gf_isom_get_meta_item_flags(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_num);


u32 gf_isom_get_meta_item_by_id(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_ID);


GF_Err gf_isom_extract_meta_item(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_num, const char *dump_file_name);


GF_Err gf_isom_extract_meta_item_mem(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_id, u8 **out_data, u32 *out_size, u32 *out_alloc_size, const char **mime_type, Bool use_annex_b);



GF_Err gf_isom_extract_meta_item_get_cenc_info(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_id, Bool *is_protected, u8 *skip_byte_block, u8 *crypt_byte_block, const u8 **key_info, u32 *key_info_size, u32 *aux_info_type_parameter, u8 **sai_out_data, u32 *sai_out_size, u32 *sai_out_alloc_size);



u32 gf_isom_get_meta_primary_item_id(GF_ISOFile *isom_file, Bool root_meta, u32 track_num);


u32 gf_isom_meta_get_item_ref_count(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 from_id, u32 type);


u32 gf_isom_meta_get_item_ref_id(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 from_id, u32 type, u32 ref_idx);


u32 gf_isom_meta_item_has_ref(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 to_id, u32 type);



typedef enum {
	
	TILE_ITEM_NONE = 0,  TILE_ITEM_ALL_NO_BASE,  TILE_ITEM_ALL_BASE,  TILE_ITEM_ALL_GRID,  TILE_ITEM_SINGLE } GF_TileItemMode;










typedef struct {
	u32 horizontal;
	u32 vertical;
} GF_ImageItemOverlayOffset;


typedef struct {
	u32 scheme_type;
	u32 scheme_version;
	u8 crypt_byte_block;
	u8 skip_byte_block;
	const u8 *key_info;
	u32 key_info_size;
	const u8 *sai_data;
	u32 sai_data_size;
} GF_ImageItemProtection;


typedef struct {
	
	u32 width;
	
	u32 height;
	
	u32 hSpacing;
	
	u32 vSpacing;
	
	u32 hOffset;
	
	u32 vOffset;
	
	u32 angle;
	
	u32 mirror;
	
	Bool hidden;
	
	u32 clap_wnum, clap_wden, clap_hnum, clap_hden, clap_hoden, clap_voden;
	s32 clap_honum, clap_vonum;
	
	void *config;
	
	GF_TileItemMode tile_mode;
	
	u32 single_tile_number;
	
	Double time;
	
	Double end_time;
	
	Double step_time;
	
	u32 sample_num;
	
	char iccPath[GF_MAX_PATH];
	
	Bool alpha;
	
	Bool depth;
	
	u8 num_channels;
	
	u32 bits_per_channel[3];
	
	u32 num_grid_columns;
	
	u32 num_grid_rows;
	
	u32 overlay_count;
	
	GF_ImageItemOverlayOffset *overlay_offsets;
	
	u32 overlay_canvas_fill_value_r;
	u32 overlay_canvas_fill_value_g;
	u32 overlay_canvas_fill_value_b;
	u32 overlay_canvas_fill_value_a;
	
	GF_ImageItemProtection *cenc_info;
	
	Bool use_reference;
	
	u32 item_ref_id;
	
	Bool copy_props;
	
	GF_ISOFile *src_file;
	Bool auto_grid;
	Double auto_grid_ratio;
	
	u32 av1_layer_size[3];
	
	u8 av1_op_index;

	
	u8 interlace_type;

	const char *aux_urn;
	const u8 *aux_data;
	u32 aux_data_len;

	
	u8 *config_ba;
	u32 config_ba_size;

} GF_ImageItemProperties;





GF_Err gf_isom_set_meta_type(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 metaType);


GF_Err gf_isom_remove_meta_xml(GF_ISOFile *isom_file, Bool root_meta, u32 track_num);


GF_Err gf_isom_set_meta_xml(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, char *XMLFileName, unsigned char *data, u32 data_size, Bool IsBinaryXML);


GF_Err gf_isom_meta_get_next_item_id(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 *item_id);


GF_Err gf_isom_add_meta_item(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, Bool self_reference, char *resource_path, const char *item_name, u32 item_id, u32 item_type, const char *mime_type, const char *content_encoding, const char *URL, const char *URN, GF_ImageItemProperties *image_props);




typedef struct {
	
	u64 extent_offset;
	
	u64 extent_length;
	
	u64 extent_index;

	
	u64 original_extent_offset;

} GF_ItemExtentEntry;




GF_Err gf_isom_add_meta_item_memory(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, const char *item_name, u32 *item_id, u32 item_type, const char *mime_type, const char *content_encoding, GF_ImageItemProperties *image_props, char *data, u32 data_len, GF_List *item_extent_refs);


GF_Err gf_isom_add_meta_item_sample_ref(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, const char *item_name, u32 *item_id, u32 item_type, const char *mime_type, const char *content_encoding, GF_ImageItemProperties *image_props, GF_ISOTrackID tk_id, u32 sample_num);


GF_Err gf_isom_iff_create_image_grid_item(GF_ISOFile *isom_file, Bool root_meta, u32 meta_track_number, const char *item_name, u32 item_id, GF_ImageItemProperties *image_props);


GF_Err gf_isom_iff_create_image_overlay_item(GF_ISOFile *isom_file, Bool root_meta, u32 meta_track_number, const char *item_name, u32 item_id, GF_ImageItemProperties *image_props);


GF_Err gf_isom_iff_create_image_identity_item(GF_ISOFile *isom_file, Bool root_meta, u32 meta_track_number, const char *item_name, u32 item_id, GF_ImageItemProperties *image_props);


GF_Err gf_isom_iff_create_image_item_from_track(GF_ISOFile *isom_file, Bool root_meta, u32 meta_track_number, u32 media_track, const char *item_name, u32 item_id, GF_ImageItemProperties *image_props, GF_List *item_extent_refs);


GF_Err gf_isom_remove_meta_item(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_num, Bool keep_refs, const char *keep_props);


GF_Err gf_isom_set_meta_primary_item(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_num);


GF_Err gf_isom_meta_add_item_ref(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 from_id, u32 to_id, u32 type, u64 *ref_index);


GF_Err gf_isom_meta_add_item_group(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_id, u32 group_id, u32 group_type);




GF_Err gf_isom_get_meta_image_props(GF_ISOFile *isom_file, Bool root_meta, u32 track_num, u32 item_id, GF_ImageItemProperties *out_image_props, GF_List *unmapped_props);









typedef enum {
	
	GF_ISOM_ITUNE_PROBE = 0,  GF_ISOM_ITUNE_RESET = 1, GF_ISOM_ITUNE_NAME 				= GF_4CC( 0xA9, 'n', 'a', 'm' ), GF_ISOM_ITUNE_ARTIST 			= GF_4CC( 0xA9, 'A', 'R', 'T' ), GF_ISOM_ITUNE_ALBUM_ARTIST 		= GF_4CC( 'a', 'A', 'R', 'T' ), GF_ISOM_ITUNE_ALBUM				= GF_4CC( 0xA9, 'a', 'l', 'b' ), GF_ISOM_ITUNE_GROUP 			= GF_4CC( 0xA9, 'g', 'r', 'p' ), GF_ISOM_ITUNE_WRITER 			= GF_4CC( 0xA9, 'w', 'r', 't' ), GF_ISOM_ITUNE_COMMENT 			= GF_4CC( 0xA9, 'c', 'm', 't' ), GF_ISOM_ITUNE_GENRE_USER		= GF_4CC( 0xA9, 'g', 'e', 'n'), GF_ISOM_ITUNE_GENRE 			= GF_4CC( 'g', 'n', 'r', 'e' ), GF_ISOM_ITUNE_CREATED 			= GF_4CC( 0xA9, 'd', 'a', 'y' ), GF_ISOM_ITUNE_TRACKNUMBER 		= GF_4CC( 't', 'r', 'k', 'n' ), GF_ISOM_ITUNE_DISK 				= GF_4CC( 'd', 'i', 's', 'k' ), GF_ISOM_ITUNE_TEMPO 			= GF_4CC( 't', 'm', 'p', 'o' ), GF_ISOM_ITUNE_COMPILATION 		= GF_4CC( 'c', 'p', 'i', 'l' ), GF_ISOM_ITUNE_TV_SHOW 			= GF_4CC( 't', 'v', 's', 'h'), GF_ISOM_ITUNE_TV_EPISODE 		= GF_4CC( 't', 'v', 'e', 'n'), GF_ISOM_ITUNE_TV_SEASON 		= GF_4CC( 't', 'v', 's', 'n'), GF_ISOM_ITUNE_TV_EPISODE_NUM 	= GF_4CC( 't', 'v', 'e', 's'), GF_ISOM_ITUNE_TV_NETWORK 		= GF_4CC( 't', 'v', 'n', 'n'), GF_ISOM_ITUNE_DESCRIPTION	 	= GF_4CC( 'd', 'e', 's', 'c' ), GF_ISOM_ITUNE_LONG_DESCRIPTION	= GF_4CC( 'l', 'd', 'e', 's'), GF_ISOM_ITUNE_LYRICS 			= GF_4CC( 0xA9, 'l', 'y', 'r' ), GF_ISOM_ITUNE_SORT_NAME 		= GF_4CC( 's', 'o', 'n', 'm' ), GF_ISOM_ITUNE_SORT_ARTIST 		= GF_4CC( 's', 'o', 'a', 'r' ), GF_ISOM_ITUNE_SORT_ALB_ARTIST 	= GF_4CC( 's', 'o', 'a', 'a' ), GF_ISOM_ITUNE_SORT_ALBUM	 	= GF_4CC( 's', 'o', 'a', 'l' ), GF_ISOM_ITUNE_SORT_COMPOSER	 	= GF_4CC( 's', 'o', 'c', 'o' ), GF_ISOM_ITUNE_SORT_SHOW	 		= GF_4CC( 's', 'o', 's', 'n' ), GF_ISOM_ITUNE_COVER_ART 		= GF_4CC( 'c', 'o', 'v', 'r' ), GF_ISOM_ITUNE_COPYRIGHT 		= GF_4CC( 'c', 'p', 'r', 't' ), GF_ISOM_ITUNE_TOOL 				= GF_4CC( 0xA9, 't', 'o', 'o' ), GF_ISOM_ITUNE_ENCODER 			= GF_4CC( 0xA9, 'e', 'n', 'c' ), GF_ISOM_ITUNE_PURCHASE_DATE 	= GF_4CC( 'p', 'u', 'r', 'd' ), GF_ISOM_ITUNE_PODCAST		 	= GF_4CC( 'p', 'c', 's', 't' ), GF_ISOM_ITUNE_PODCAST_URL	 	= GF_4CC( 'p', 'u', 'r', 'l' ), GF_ISOM_ITUNE_KEYWORDS 			= GF_4CC( 'k', 'y', 'y', 'w'), GF_ISOM_ITUNE_CATEGORY 			= GF_4CC( 'c', 'a', 't', 'g'), GF_ISOM_ITUNE_HD_VIDEO 			= GF_4CC( 'h', 'd', 'v', 'd'), GF_ISOM_ITUNE_MEDIA_TYPE 		= GF_4CC( 's', 't', 'i', 'k'), GF_ISOM_ITUNE_RATING	 		= GF_4CC( 'r', 't', 'n', 'g'), GF_ISOM_ITUNE_GAPLESS 			= GF_4CC( 'p', 'g', 'a', 'p' ), GF_ISOM_ITUNE_COMPOSER 		= GF_4CC( 0xA9, 'c', 'o', 'm' ), GF_ISOM_ITUNE_TRACK 		= GF_4CC( 0xA9, 't', 'r', 'k' ), GF_ISOM_ITUNE_CONDUCTOR 	= GF_4CC( 0xA9, 'c', 'o', 'n' ),  GF_ISOM_ITUNE_ART_DIRECTOR 	= GF_4CC( 0xA9, 'a', 'r', 'd' ), GF_ISOM_ITUNE_ARRANGER	 	= GF_4CC( 0xA9, 'a', 'r', 'g' ), GF_ISOM_ITUNE_LYRICIST	 	= GF_4CC( 0xA9, 'a', 'u', 't' ), GF_ISOM_ITUNE_COPY_ACK	 	= GF_4CC( 0xA9, 'c', 'a', 'k' ), GF_ISOM_ITUNE_SONG_DESC	 	= GF_4CC( 0xA9, 'd', 'e', 's' ), GF_ISOM_ITUNE_DIRECTOR	 	= GF_4CC( 0xA9, 'd', 'i', 'r' ), GF_ISOM_ITUNE_EQ_PRESET	 	= GF_4CC( 0xA9, 'e', 'q', 'u' ), GF_ISOM_ITUNE_LINER_NOTES 	= GF_4CC( 0xA9, 'l', 'n', 't' ), GF_ISOM_ITUNE_REC_COMPANY 	= GF_4CC( 0xA9, 'm', 'a', 'k' ), GF_ISOM_ITUNE_ORIG_ARTIST 	= GF_4CC( 0xA9, 'o', 'p', 'e' ), GF_ISOM_ITUNE_PHONO_RIGHTS 	= GF_4CC( 0xA9, 'p', 'h', 'g' ), GF_ISOM_ITUNE_PRODUCER	 	= GF_4CC( 0xA9, 'p', 'r', 'd' ), GF_ISOM_ITUNE_PERFORMER	 	= GF_4CC( 0xA9, 'p', 'r', 'f' ), GF_ISOM_ITUNE_PUBLISHER	 	= GF_4CC( 0xA9, 'p', 'u', 'b' ), GF_ISOM_ITUNE_SOUND_ENG	 	= GF_4CC( 0xA9, 's', 'n', 'e' ), GF_ISOM_ITUNE_SOLOIST	 	= GF_4CC( 0xA9, 's', 'o', 'l' ), GF_ISOM_ITUNE_CREDITS	 	= GF_4CC( 0xA9, 's', 'r', 'c' ), GF_ISOM_ITUNE_THANKS	 	= GF_4CC( 0xA9, 't', 'h', 'x' ), GF_ISOM_ITUNE_ONLINE	 	= GF_4CC( 0xA9, 'u', 'r', 'l' ), GF_ISOM_ITUNE_EXEC_PRODUCER	= GF_4CC( 0xA9, 'x', 'p', 'd' ), GF_ISOM_ITUNE_LOCATION	 	= GF_4CC( 0xA9, 'x', 'y', 'z' ),   GF_ISOM_ITUNE_ITUNES_DATA 	= GF_4CC( '-', '-', '-', '-' ),    } GF_ISOiTunesTag;














































































GF_Err gf_isom_apple_get_tag(GF_ISOFile *isom_file, GF_ISOiTunesTag tag, const u8 **data, u32 *data_len);


GF_Err gf_isom_apple_enum_tag(GF_ISOFile *isom_file, u32 idx, GF_ISOiTunesTag *out_tag, const u8 **data, u32 *data_len, u64 *out_int_val, u32 *out_int_val2, u32 *out_flags);



GF_Err gf_isom_wma_enum_tag(GF_ISOFile *isom_file, u32 idx, char **out_tag, const u8 **data, u32 *data_len, u32 *version, u32 *data_type);


typedef enum {
	GF_QT_KEY_OPAQUE=0, GF_QT_KEY_UTF8=1, GF_QT_KEY_UTF16_BE=2, GF_QT_KEY_JIS=3, GF_QT_KEY_UTF8_SORT=4, GF_QT_KEY_UTF16_SORT=5, GF_QT_KEY_JPEG=13, GF_QT_KEY_PNG=14, GF_QT_KEY_SIGNED_VSIZE=21, GF_QT_KEY_UNSIGNED_VSIZE=22, GF_QT_KEY_FLOAT=23, GF_QT_KEY_DOUBLE=24, GF_QT_KEY_BMP=27, GF_QT_KEY_METABOX=28, GF_QT_KEY_SIGNED_8=65, GF_QT_KEY_SIGNED_16=66, GF_QT_KEY_SIGNED_32=67, GF_QT_KEY_POINTF=70, GF_QT_KEY_SIZEF=71, GF_QT_KEY_RECTF=72, GF_QT_KEY_SIGNED_64=74, GF_QT_KEY_UNSIGNED_8=75, GF_QT_KEY_UNSIGNED_16=76, GF_QT_KEY_UNSIGNED_32=77, GF_QT_KEY_UNSIGNED_64=78, GF_QT_KEY_MATRIXF=79,   GF_QT_KEY_REMOVE=0xFFFFFFFF } GF_QTKeyType;































typedef struct {
	
	const char *name;
	
	u32 ns;

	
	GF_QTKeyType type;
	union {
		
		const char *string;
		
		struct _tag_data {
			
			const u8 *data;
			
			u32 data_len;
		} data;
		
		u64 uint;
		
		s64 sint;
		
		Double number;
		
		struct _tag_vec2 {
			
			Float x;
			
			Float y;
		} pos_size;
		
		struct _tag_rec {
			
			Float x;
			
			Float y;
			
			Float w;
			
			Float h;
		} rect;
		
		Double matrix[9];
	} value;
} GF_QT_UDTAKey;


GF_Err gf_isom_enum_udta_keys(GF_ISOFile *isom_file, u32 idx, GF_QT_UDTAKey *out_key);



GF_Err gf_isom_apple_set_tag(GF_ISOFile *isom_file, GF_ISOiTunesTag tag, const u8 *data, u32 data_len, u64 int_val, u32 int_val2);



GF_Err gf_isom_wma_set_tag(GF_ISOFile *isom_file, char *name, char *value);


GF_Err gf_isom_set_qt_key(GF_ISOFile *isom_file, GF_QT_UDTAKey *key);


GF_Err gf_isom_set_ipod_compatible(GF_ISOFile *isom_file, u32 trackNumber);








GF_Err gf_isom_get_track_switch_group_count(GF_ISOFile *isom_file, u32 trackNumber, u32 *alternateGroupID, u32 *nb_groups);


const u32 *gf_isom_get_track_switch_parameter(GF_ISOFile *isom_file, u32 trackNumber, u32 group_index, u32 *switchGroupID, u32 *criteriaListSize);



GF_Err gf_isom_set_track_switch_parameter(GF_ISOFile *isom_file, u32 trackNumber, u32 trackRefGroup, Bool is_switch_group, u32 *switchGroupID, u32 *criteriaList, u32 criteriaListCount);


GF_Err gf_isom_reset_track_switch_parameter(GF_ISOFile *isom_file, u32 trackNumber, Bool reset_all_group);


GF_Err gf_isom_reset_switch_parameters(GF_ISOFile *isom_file);


GF_Err gf_isom_set_track_group(GF_ISOFile *isom_file, u32 trackNumber, u32 track_group_id, u32 group_type, Bool do_add);








u8 *gf_isom_sample_get_subsamples_buffer(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 *osize);


u32 gf_isom_sample_has_subsamples(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 flags);


GF_Err gf_isom_sample_get_subsample(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 flags, u32 subSampleNumber, u32 *size, u8 *priority, u32 *reserved, Bool *discardable);



GF_Err gf_isom_add_subsample(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 flags, u32 subSampleSize, u8 priority, u32 reserved, Bool discardable);




GF_Err gf_isom_fragment_add_subsample(GF_ISOFile *isom_file, GF_ISOTrackID TrackID, u32 flags, u32 subSampleSize, u8 priority, u32 reserved, Bool discardable);









enum {
	GF_ISOM_SAMPLE_GROUP_ROLL = GF_4CC( 'r', 'o', 'l', 'l'), GF_ISOM_SAMPLE_GROUP_PROL = GF_4CC( 'p', 'r', 'o', 'l'), GF_ISOM_SAMPLE_GROUP_RAP = GF_4CC( 'r', 'a', 'p', ' ' ), GF_ISOM_SAMPLE_GROUP_SEIG = GF_4CC( 's', 'e', 'i', 'g' ), GF_ISOM_SAMPLE_GROUP_OINF = GF_4CC( 'o', 'i', 'n', 'f'), GF_ISOM_SAMPLE_GROUP_LINF = GF_4CC( 'l', 'i', 'n', 'f'), GF_ISOM_SAMPLE_GROUP_TRIF = GF_4CC( 't', 'r', 'i', 'f' ), GF_ISOM_SAMPLE_GROUP_NALM = GF_4CC( 'n', 'a', 'l', 'm'), GF_ISOM_SAMPLE_GROUP_TELE = GF_4CC( 't', 'e', 'l', 'e'), GF_ISOM_SAMPLE_GROUP_SAP = GF_4CC( 's', 'a', 'p', ' '), GF_ISOM_SAMPLE_GROUP_ALST = GF_4CC( 'a', 'l', 's', 't'), GF_ISOM_SAMPLE_GROUP_RASH = GF_4CC( 'r', 'a', 's', 'h'), GF_ISOM_SAMPLE_GROUP_AVLL = GF_4CC( 'a', 'v', 'l', 'l'), GF_ISOM_SAMPLE_GROUP_AVSS = GF_4CC( 'a', 'v', 's', 's'), GF_ISOM_SAMPLE_GROUP_DTRT = GF_4CC( 'd', 't', 'r', 't'), GF_ISOM_SAMPLE_GROUP_MVIF = GF_4CC( 'm', 'v', 'i', 'f'), GF_ISOM_SAMPLE_GROUP_SCIF = GF_4CC( 's', 'c', 'i', 'f'), GF_ISOM_SAMPLE_GROUP_SCNM = GF_4CC( 's', 'c', 'n', 'm'), GF_ISOM_SAMPLE_GROUP_STSA = GF_4CC( 's', 't', 's', 'a'), GF_ISOM_SAMPLE_GROUP_TSAS = GF_4CC( 't', 's', 'a', 's'), GF_ISOM_SAMPLE_GROUP_SYNC = GF_4CC( 's', 'y', 'n', 'c'), GF_ISOM_SAMPLE_GROUP_TSCL = GF_4CC( 't', 's', 'c', 'l'), GF_ISOM_SAMPLE_GROUP_VIPR = GF_4CC( 'v', 'i', 'p', 'r'), GF_ISOM_SAMPLE_GROUP_LBLI = GF_4CC( 'l', 'b', 'l', 'i'), GF_ISOM_SAMPLE_GROUP_3GAG = GF_4CC( '3', 'g', 'a', 'g'), GF_ISOM_SAMPLE_GROUP_AVCB = GF_4CC( 'a', 'v', 'c', 'b'), GF_ISOM_SAMPLE_GROUP_SPOR = GF_4CC( 's', 'p', 'o', 'r'), GF_ISOM_SAMPLE_GROUP_SULM = GF_4CC( 's', 'u', 'l', 'm'), GF_ISOM_SAMPLE_GROUP_ESGH = GF_4CC( 'e', 's', 'g', 'h'), GF_ISOM_SAMPLE_GROUP_ILCE = GF_4CC( 'i', 'l', 'c', 'e'), };































GF_Err gf_isom_get_sample_rap_roll_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, Bool *is_rap, GF_ISOSampleRollType *roll_type, s32 *roll_distance);


Bool gf_isom_get_sample_group_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sample_group_description_index, u32 grouping_type, u32 *default_index, const u8 **data, u32 *size);


GF_Err gf_isom_get_sample_to_group_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sample_number, u32 grouping_type, u32 grouping_type_parameter, u32 *sampleGroupDescIndex);


Bool gf_isom_has_cenc_sample_group(GF_ISOFile *isom_file, u32 trackNumber, Bool *has_selective, Bool *has_roll);


Bool gf_isom_get_tile_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sample_group_description_index, u32 *default_sample_group_index, u32 *id, u32 *independent, Bool *full_frame, u32 *x, u32 *y, u32 *w, u32 *h);



GF_Err gf_isom_enum_sample_group(GF_ISOFile *isom_file, u32 trackNumber, u32 sample_number, u32 *sgrp_idx, u32 *sgrp_type, u32 *sgrp_flags, u32 *sgrp_parameter, u8 **sgrp_data, u32 *sgrp_size);


GF_Err gf_isom_enum_sample_aux_data(GF_ISOFile *isom_file, u32 trackNumber, u32 sample_number, u32 *sai_idx, u32 *sai_type, u32 *sai_parameter, u8 **sai_data, u32 *sai_size);




GF_Err gf_isom_set_sample_rap_group(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, Bool is_rap, u32 num_leading_samples);


GF_Err gf_isom_set_sample_roll_group(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, GF_ISOSampleRollType roll_type, s16 roll_distance);


GF_Err gf_isom_set_sample_cenc_group(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u8 isEncrypted, u8 crypt_byte_block, u8 skip_byte_block, u8 *key_info, u32 key_info_size);



GF_Err gf_isom_set_sample_cenc_default_group(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber);


GF_Err gf_isom_add_sample_group_info(GF_ISOFile *isom_file, u32 trackNumber, u32 grouping_type, void *data, u32 data_size, Bool is_default, u32 *sampleGroupDescriptionIndex);


GF_Err gf_isom_remove_sample_group(GF_ISOFile *isom_file, u32 trackNumber, u32 grouping_type);


GF_Err gf_isom_set_sample_group_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 grouping_type, u32 grouping_type_parameter, void *data, u32 data_size, u32 sgpd_flags);



GF_Err gf_isom_add_sample_info(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleNumber, u32 grouping_type, u32 sampleGroupDescriptionIndex, u32 grouping_type_parameter);



GF_Err gf_isom_set_sample_group_in_traf(GF_ISOFile *isom_file);










}






