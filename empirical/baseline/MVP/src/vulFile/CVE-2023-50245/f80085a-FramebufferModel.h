










class FramebufferModel: public QObject {
    Q_OBJECT  public:

    FramebufferModel(QObject* parent = nullptr);
    virtual ~FramebufferModel();

    const QImage& getLoadedImage() const { return m_image; }

    bool isImageLoaded() const { return m_isImageLoaded; }

    int   width() const { return m_width; }
    int   height() const { return m_height; }
    float pixelAspectRatio() const { return m_pixelAspectRatio; }

    QRect getDisplayWindow() const;
    QRect getDataWindow() const;

    virtual std::string getColorInfo(int x, int y) const = 0;

  signals:
    void imageChanged();
    void imageLoaded();
    void exposureChanged(double exposure);
    void loadFailed(QString message);

  protected:
    float* m_pixelBuffer;
    QImage m_image;

    
    
    int m_width, m_height;

    bool m_isImageLoaded;

    double m_exposure;

    QFutureWatcher<void>* m_imageLoadingWatcher;
    QFutureWatcher<void>* m_imageEditingWatcher;

    QRect m_dataWindow;
    QRect m_displayWindow;
    float m_pixelAspectRatio;
};
