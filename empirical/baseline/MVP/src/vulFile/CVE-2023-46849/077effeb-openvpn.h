




























struct key_schedule {
    
    struct key_type key_type;

    
    struct key_ctx_bi static_key;

    
    struct tls_root_ctx ssl_ctx;

    
    struct key_type tls_auth_key_type;
    struct key_ctx_bi tls_wrap_key;
    
    struct key2 original_wrap_keydata;
    struct key_ctx tls_crypt_v2_server_key;
    struct buffer tls_crypt_v2_wkc;             
    struct key_ctx auth_token_key;
};



struct packet_id_persist {
    int dummy;
};
static inline void packet_id_persist_init(struct packet_id_persist *p)
{
}



struct context_buffers {
    
    struct buffer aux_buf;

    
    struct buffer encrypt_buf;
    struct buffer decrypt_buf;

    

    struct buffer compress_buf;
    struct buffer decompress_buf;


    
    struct buffer read_link_buf;
    struct buffer read_tun_buf;
};


struct context_persist {
    int restart_sleep_seconds;
};




struct context_0 {
    
    bool uid_gid_specified;
    
    bool uid_gid_chroot_set;
    struct platform_state_user platform_state_user;
    struct platform_state_group platform_state_group;
};



struct context_1 {
    struct link_socket_addr link_socket_addr;
    

    
    struct key_schedule ks;

    
    struct cached_dns_entry *dns_cache;

    
    struct packet_id_persist pid_persist;

    struct tuntap *tuntap;      
    bool tuntap_owned;          

    struct route_list *route_list;
    

    
    struct route_ipv6_list *route_ipv6_list;

    
    struct status_output *status_output;
    bool status_output_owned;

    
    struct http_proxy_info *http_proxy;
    bool http_proxy_owned;

    
    struct socks_proxy_info *socks_proxy;
    bool socks_proxy_owned;

    
    struct ifconfig_pool_persist *ifconfig_pool_persist;
    bool ifconfig_pool_persist_owned;

    
    struct sha256_digest pulled_options_digest_save;
    

    struct user_pass *auth_user_pass;
    
};


static inline bool is_cas_pending(enum multi_status cas)
{
    return cas == CAS_PENDING || cas == CAS_PENDING_DEFERRED || cas == CAS_PENDING_DEFERRED_PARTIAL;
}


struct context_2 {
    struct gc_arena gc;         

    
    struct event_set *event_set;
    int event_set_max;
    bool event_set_owned;

    
    unsigned int event_set_status;

    struct link_socket *link_socket;     
    bool link_socket_owned;

    
    struct link_socket_info *link_socket_info;
    const struct link_socket *accept_from; 

    struct link_socket_actual *to_link_addr;    
    struct link_socket_actual from;             

    
    struct frame frame;                         
    struct frame frame_initial;                 


    
    struct fragment_master *fragment;
    struct frame frame_fragment;
    struct frame frame_fragment_initial;
    struct frame frame_fragment_omit;


    
    struct shaper shaper;

    
    counter_type tun_read_bytes;
    counter_type tun_write_bytes;
    counter_type link_read_bytes;
    counter_type dco_read_bytes;
    counter_type link_read_bytes_auth;
    counter_type link_write_bytes;
    counter_type dco_write_bytes;

    counter_type n_trunc_tun_read;
    counter_type n_trunc_tun_write;
    counter_type n_trunc_pre_encrypt;
    counter_type n_trunc_post_decrypt;


    
    struct event_timeout wait_for_connect;
    struct event_timeout ping_send_interval;
    struct event_timeout ping_rec_interval;

    
    struct event_timeout inactivity_interval;
    int64_t inactivity_bytes;

    struct event_timeout session_interval;

    
    struct event_timeout auth_token_renewal_interval;

    
    char *options_string_local;
    char *options_string_remote;

    int occ_op;                 
    int occ_n_tries;
    struct event_timeout occ_interval;

    
    int original_recv_size;     
    int max_recv_size_local;    
    int max_recv_size_remote;   
    int max_send_size_local;    
    int max_send_size_remote;   


    
    int occ_mtu_load_size;

    struct event_timeout occ_mtu_load_test_interval;
    int occ_mtu_load_n_tries;

    
    struct tls_multi *tls_multi; 

    struct tls_auth_standalone *tls_auth_standalone;
    


    hmac_ctx_t *session_id_hmac;
    

    
    struct interval tmp_int;

    
    int tls_exit_signal;

    struct crypto_options crypto_options;
    

    struct event_timeout packet_id_persist_interval;


    struct compress_context *comp_context;
    


    
    struct context_buffers *buffers;
    bool buffers_owned; 

    
    struct buffer buf;
    struct buffer to_tun;
    struct buffer to_link;

    
    bool log_rw;

    
    struct event_timeout route_wakeup;
    struct event_timeout route_wakeup_expire;

    
    bool did_open_tun;

    

    
    struct timeval timeval;

    
    time_t coarse_timer_wakeup;

    
    time_t update_timeout_random_component;
    struct timeval timeout_random_component;

    
    struct event_timeout server_poll_interval;

    
    bool do_up_ran;

    
    time_t explicit_exit_notification_time_wait;
    struct event_timeout explicit_exit_notification_interval;

    
    struct env_set *es;
    bool es_owned;

    
    bool fast_io;

    
    bool push_request_received;
    bool push_ifconfig_defined;
    time_t sent_push_reply_expiry;
    in_addr_t push_ifconfig_local;
    in_addr_t push_ifconfig_remote_netmask;
    in_addr_t push_ifconfig_local_alias;

    bool push_ifconfig_ipv6_defined;
    struct in6_addr push_ifconfig_ipv6_local;
    int push_ifconfig_ipv6_netbits;
    struct in6_addr push_ifconfig_ipv6_remote;

    struct event_timeout push_request_interval;
    time_t push_request_timeout;

    
    bool pulled_options_digest_init_done;
    md_ctx_t *pulled_options_state;
    struct sha256_digest pulled_options_digest;

    struct event_timeout scheduled_exit;
    int scheduled_exit_signal;

    


    struct man_def_auth_context mda_context;



    int inotify_fd; 

};



struct context {
    struct options options;     

    bool first_time;            

    





    int mode;                   

    struct gc_arena gc;         

    struct env_set *es;         

    openvpn_net_ctx_t net_ctx;  

    struct signal_info *sig;    

    struct plugin_list *plugins; 
    bool plugins_owned;         

    bool did_we_daemonize;      

    struct context_persist persist;
    
    struct context_0 *c0;       
    struct context_1 c1;        
    struct context_2 c2;        
};

























