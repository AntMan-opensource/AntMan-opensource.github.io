





using namespace hermes::vm::detail;



using hermes::vm::StringPrimitive;
using hermes::vm::SymbolID;

template <typename T> uint32_t IdentifierHashTable::lookupString( llvh::ArrayRef<T> str, uint32_t hash, bool mustBeNew) const {



  assert(identifierTable_ && "identifier table pointer is not initialized");

  auto cap = capacity();
  assert(llvh::isPowerOf2_32(cap) && "capacity must be power of 2");
  assert(size_ < cap && "The hash table can never be full");


  assert(hash == hashString(str) && "invalid hash");

  uint32_t idx = hash & (cap - 1);
  uint32_t base = 1;
  
  
  
  OptValue<uint32_t> deletedIndex;
  
  while (1) {
    if (table_.isEmpty(idx)) {
      
      
      return deletedIndex ? *deletedIndex : idx;
    } else if (table_.isDeleted(idx)) {
      assert( !mustBeNew && "mustBeNew should never be set if there are deleted entries");

      deletedIndex = idx;
    } else if (!mustBeNew) {
      
      

      auto &lookupTableEntry = identifierTable_->getLookupTableEntry(table_.get(idx));
      if (lookupTableEntry.getHash() == hash) {
        if (lookupTableEntry.isStringPrim()) {
          const StringPrimitive *strPrim = lookupTableEntry.getStringPrim();
          if (strPrim->isASCII()) {
            if (stringRefEquals(str, strPrim->castToASCIIRef())) {
              return idx;
            }
          } else {
            if (stringRefEquals(str, strPrim->castToUTF16Ref())) {
              return idx;
            }
          }
        } else if (lookupTableEntry.isLazyASCII()) {
          
          if (stringRefEquals(str, lookupTableEntry.getLazyASCIIRef())) {
            return idx;
          }
        } else {
          
          if (stringRefEquals(str, lookupTableEntry.getLazyUTF16Ref())) {
            return idx;
          }
        }
      }
    }
    
    
    
    idx = (idx + base) & (cap - 1);
    ++base;
  }
}



template uint32_t IdentifierHashTable::lookupString( llvh::ArrayRef<char> str, uint32_t hash, bool mustBeNew) const;



template uint32_t IdentifierHashTable::lookupString( llvh::ArrayRef<char16_t> str, uint32_t hash, bool mustBeNew) const;



uint32_t IdentifierHashTable::lookupString( const StringPrimitive *str, bool mustBeNew) const {

  if (str->isASCII()) {
    return lookupString(str->castToASCIIRef(), mustBeNew);
  } else {
    return lookupString(str->castToUTF16Ref(), mustBeNew);
  }
}

uint32_t IdentifierHashTable::lookupString( const StringPrimitive *str, uint32_t hash, bool mustBeNew) const {


  if (str->isASCII()) {
    return lookupString(str->castToASCIIRef(), hash, mustBeNew);
  } else {
    return lookupString(str->castToUTF16Ref(), hash, mustBeNew);
  }
}

void IdentifierHashTable::insert(uint32_t idx, SymbolID id) {
  table_.set(idx, id.unsafeGetIndex());
  ++size_;
  ++nonEmptyEntryCount_;

  if (shouldGrow()) {
    growAndRehash(capacity() * 2);
  }
}

void IdentifierHashTable::remove(const StringPrimitive *str) {
  if (str->isASCII()) {
    remove(str->castToASCIIRef());
  } else {
    remove(str->castToUTF16Ref());
  }
}

void IdentifierHashTable::growAndRehash(uint32_t newCapacity) {
  assert(llvh::isPowerOf2_32(newCapacity) && "capacity must be power of 2");
  CompactTable tmpTable(newCapacity, table_.getCurrentScale());
  tmpTable.swap(table_);
  for (uint32_t oldIdx = 0; oldIdx < tmpTable.size(); ++oldIdx) {
    if (!tmpTable.isValid(oldIdx)) {
      continue;
    }
    
    uint32_t idx = 0;
    uint32_t oldVal = tmpTable.get(oldIdx);
    auto &lookupTableEntry = identifierTable_->getLookupTableEntry(oldVal);
    uint32_t hash = lookupTableEntry.getHash();
    if (lookupTableEntry.isStringPrim()) {
      idx = lookupString(lookupTableEntry.getStringPrim(), hash, true);
    } else if (lookupTableEntry.isLazyASCII()) {
      idx = lookupString(lookupTableEntry.getLazyASCIIRef(), hash, true);
    } else if (lookupTableEntry.isLazyUTF16()) {
      idx = lookupString(lookupTableEntry.getLazyUTF16Ref(), hash, true);
    }
    table_.set(idx, oldVal);
  }
  nonEmptyEntryCount_ = size_;
}
