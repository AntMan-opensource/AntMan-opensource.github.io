

struct h2_sess;
struct h2_req;
struct h2h_decode;
struct h2_frame_s;





struct h2_error_s {
	const char			*name;
	const char			*txt;
	uint32_t			val;
	int				stream;
	int				connection;
};

typedef const struct h2_error_s *h2_error;













typedef h2_error h2_rxframe_f(struct worker *, struct h2_sess *, struct h2_req *);

typedef const struct h2_frame_s *h2_frame;

struct h2_frame_s {
	const char	*name;
	h2_rxframe_f	*rxfunc;
	uint8_t		type;
	uint8_t		flags;
	h2_error	act_szero;
	h2_error	act_snonzero;
	h2_error	act_sidle;
	int		respect_window;
	h2_frame	continuation;
	uint8_t		final_flags;
	int		overhead;
};






struct h2_settings {


};

typedef void h2_setsetting_f(struct h2_settings*, uint32_t);

struct h2_setting_s {
	const char	*name;
	h2_setsetting_f	*setfunc;
	uint16_t	ident;
	uint32_t	defval;
	uint32_t	minval;
	uint32_t	maxval;
	h2_error	range_error;
};






enum h2_stream_e {
	H2_STREAM__DUMMY = -1,   };






struct h2_req {
	unsigned			magic;

	uint32_t			stream;
	int				scheduled;
	enum h2_stream_e		state;
	struct h2_sess			*h2sess;
	struct req			*req;
	double				t_send;
	double				t_winupd;
	pthread_cond_t			*cond;
	VTAILQ_ENTRY(h2_req)		list;
	int64_t				t_window;
	int64_t				r_window;

	
	struct worker			*wrk;

	VTAILQ_ENTRY(h2_req)		tx_list;
	h2_error			error;

	int				counted;
};

VTAILQ_HEAD(h2_req_s, h2_req);

struct h2_sess {
	unsigned			magic;


	pthread_t			rxthr;
	struct h2_req			*mailcall;
	pthread_cond_t			*cond;
	pthread_cond_t			winupd_cond[1];

	struct sess			*sess;
	int				refcnt;
	uint32_t			highest_stream;
	int				bogosity;
	int				do_sweep;

	struct h2_req			*req0;

	struct h2_req_s			streams;

	struct req			*srq;
	struct ws			*ws;
	struct http_conn		*htc;
	struct vsl_log			*vsl;
	struct h2h_decode		*decode;
	struct vht_table		dectbl[1];

	unsigned			rxf_len;
	unsigned			rxf_type;
	unsigned			rxf_flags;
	unsigned			rxf_stream;
	uint8_t				*rxf_data;

	struct h2_settings		remote_settings;
	struct h2_settings		local_settings;

	struct req			*new_req;
	uint32_t			goaway_last_stream;

	VTAILQ_HEAD(,h2_req)		txqueue;

	h2_error			error;

	int				open_streams;
};





vtr_sess_panic_f h2_sess_panic;




vtr_deliver_f h2_deliver;
vtr_minimal_response_f h2_minimal_response;



struct h2h_decode {
	unsigned			magic;


	h2_error			error;
	enum vhd_ret_e			vhd_ret;
	char				*out;
	char				*reset;
	size_t				out_l;
	size_t				out_u;
	size_t				namelen;
	struct vhd_decode		vhd[1];
};

void h2h_decode_init(const struct h2_sess *h2);
h2_error h2h_decode_fini(const struct h2_sess *h2);
h2_error h2h_decode_bytes(struct h2_sess *h2, const uint8_t *ptr, size_t len);


void H2_Send_Get(struct worker *, struct h2_sess *, struct h2_req *);
void H2_Send_Rel(struct h2_sess *, const struct h2_req *);

void H2_Send_Frame(struct worker *, struct h2_sess *, h2_frame type, uint8_t flags, uint32_t len, uint32_t stream, const void *);


void H2_Send_RST(struct worker *wrk, struct h2_sess *h2, const struct h2_req *r2, uint32_t stream, h2_error h2e);

void H2_Send(struct worker *, struct h2_req *, h2_frame type, uint8_t flags, uint32_t len, const void *, uint64_t *acct);


struct h2_req * h2_new_req(const struct worker *, struct h2_sess *, unsigned stream, struct req *);
int h2_stream_tmo(struct h2_sess *, const struct h2_req *, vtim_real);
void h2_del_req(struct worker *, const struct h2_req *);
void h2_kill_req(struct worker *, struct h2_sess *, struct h2_req *, h2_error);
int h2_rxframe(struct worker *, struct h2_sess *);
h2_error h2_set_setting(struct h2_sess *, const uint8_t *);
void h2_req_body(struct req*);
task_func_t h2_do_req;

vtr_req_fail_f h2_req_fail;

