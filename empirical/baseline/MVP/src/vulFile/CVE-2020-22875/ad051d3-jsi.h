











































typedef int64_t Jsi_Wide;
typedef uint64_t Jsi_UWide;
typedef long double ldouble;

typedef ldouble Jsi_Number;


typedef double Jsi_Number;


typedef double time_d;
typedef int64_t time_w;
typedef uint32_t Jsi_Sig; 

typedef unsigned int uint;
typedef unsigned char uchar;
typedef unsigned long ulong;
typedef unsigned short ushort;







typedef enum {
    
    JSI_OK=0, JSI_ERROR=1, JSI_RETURN=2, JSI_BREAK=3, JSI_CONTINUE=4, JSI_SIGNAL=5, JSI_EXIT=6, JSI_EVAL=7, } Jsi_RC;


typedef enum {
    JSI_MAP_NONE, JSI_MAP_HASH, JSI_MAP_TREE, JSI_MAP_LIST  } Jsi_Map_Type;

typedef enum {
    JSI_KEYS_STRING = 0,     JSI_KEYS_STRINGKEY = 1, JSI_KEYS_ONEWORD = 2, JSI_KEYS_RESERVED = 3, JSI_KEYS_STRUCT_MINSIZE = 4 } Jsi_Key_Type;





typedef enum {
    JSI_OT_UNDEF,        JSI_OT_BOOL, JSI_OT_NUMBER, JSI_OT_STRING, JSI_OT_OBJECT, JSI_OT_ARRAY, JSI_OT_FUNCTION, JSI_OT_REGEXP, JSI_OT_ITER, JSI_OT_USEROBJ, JSI_OT__MAX = JSI_OT_USEROBJ } Jsi_otype;











typedef enum {          
    JSI_VT_UNDEF,        JSI_VT_BOOL, JSI_VT_NUMBER, JSI_VT_STRING, JSI_VT_OBJECT, JSI_VT_NULL, JSI_VT_VARIABLE, JSI_VT__MAX = JSI_VT_VARIABLE } Jsi_vtype;








typedef enum {
    JSI_TT_UNDEFINED= (1<<JSI_OT_UNDEF),     JSI_TT_BOOLEAN  = (1<<JSI_OT_BOOL), JSI_TT_NUMBER   = (1<<JSI_OT_NUMBER), JSI_TT_STRING   = (1<<JSI_OT_STRING), JSI_TT_OBJECT   = (1<<JSI_OT_OBJECT), JSI_TT_ARRAY    = (1<<JSI_OT_ARRAY), JSI_TT_FUNCTION = (1<<JSI_OT_FUNCTION), JSI_TT_REGEXP   = (1<<JSI_OT_REGEXP), JSI_TT_ITEROBJ  = (1<<JSI_OT_ITER), JSI_TT_USEROBJ  = (1<<JSI_OT_USEROBJ), JSI_TT_NULL     = (1<<(JSI_OT_USEROBJ+1)), JSI_TT_ANY      = (1<<(JSI_OT_USEROBJ+2)), JSI_TT_VOID     = (1<<(JSI_OT_USEROBJ+3))











} Jsi_ttype;

typedef enum {
    
    JSI_NONE=0, JSI_NO_ERRMSG=1,  JSI_CMP_NOCASE=1, JSI_CMP_CHARSET_SCAN=2, JSI_CMP_EXACT=0x4, JSI_EVAL_ARGV0=0x1, JSI_EVAL_GLOBAL=0x2, JSI_EVAL_NOSKIPBANG=0x4, JSI_EVAL_AUTOINDEX=0x8, JSI_EVAL_RETURN         =0x10, JSI_EVAL_ONCE           =0x20, JSI_EVAL_ISMAIN         =0x40, JSI_EVAL_EXISTS         =0x80, JSI_EVAL_ERRIGNORE      =0x100,   JSI_CALL_CONSTRUCTOR    =0x1, JSI_CALL_BUILTIN        =0x2,  JSI_CMDSPEC_ISOBJ       = 0x1, JSI_CMDSPEC_PROTO       = 0x2, JSI_CMDSPEC_NONTHIS     = 0x4, JSI_CMDSPEC_SUBCMDS     = 0x8,  JSI_CMD_HAS_ATTR        = 0x100, JSI_CMD_IS_CONSTRUCTOR  = 0x200, JSI_CMD_IS_OBJ          = 0x400, JSI_CMD_LOG_TEST        = 0x1000, JSI_CMD_LOG_DEBUG       = 0x2000, JSI_CMD_LOG_TRACE       = 0x4000, JSI_CMD_MASK            = 0xffff,  JSI_OM_READONLY         = 0x01, JSI_OM_DONTENUM         = 0x02, JSI_OM_DONTDEL          = 0x04, JSI_OM_INNERSHARED      = 0x08, JSI_OM_ISARRAYLIST      = 0x10, JSI_OM_ISSTRKEY         = 0x20, JSI_OM_UNUSED           = 0x40, JSI_OM_ISSTATIC         = 0x80,  JSI_INTACCESS_READ      = 0x0, JSI_INTACCESS_WRITE     = 0x1, JSI_INTACCESS_NETWORK   = 0x2, JSI_INTACCESS_SETSSL    = 0x3, JSI_INTACCESS_MAININTERP= 0x4, JSI_INTACCESS_CREATE    = 0x5,  JSI_LOG_BUG=0,   JSI_LOG_ERROR,   JSI_LOG_WARN, JSI_LOG_INFO,    JSI_LOG_UNUSED,  JSI_LOG_PARSE, JSI_LOG_TEST,    JSI_LOG_DEBUG,   JSI_LOG_TRACE, JSI__LOGLAST=JSI_LOG_TRACE,  JSI_SORT_NOCASE = 0x1, JSI_SORT_DESCEND = 0x2, JSI_SORT_DICT = 0x4,  JSI_NAME_FUNCTIONS = 0x1, JSI_NAME_DATA = 0x2,  JSI_TREE_ORDER_IN=0, JSI_TREE_ORDER_PRE=0x10, JSI_TREE_ORDER_POST=0x20, JSI_TREE_ORDER_LEVEL=0x30, JSI_TREE_ORDER_MASK=0x30, JSI_TREE_SEARCH_KEY=0x10, JSI_TREE_USERFLAG_MASK=0x7f, JSI_LIST_REVERSE=0x8, JSI_MUTEX_RECURSIVE=2,  JSI_FS_NOCLOSE=0x1, JSI_FS_READONLY=0x2, JSI_FS_WRITEONLY=0x4, JSI_FS_APPEND=0x8, JSI_FS_COMPRESS=0x100, JSI_FSMODESIZE=15, JSI_FILE_TYPE_FILES=0x1, JSI_FILE_TYPE_DIRS=0x2,    JSI_FILE_TYPE_MOUNT=0x4, JSI_FILE_TYPE_LINK=0x8,  JSI_FILE_TYPE_PIPE=0x10,   JSI_FILE_TYPE_BLOCK=0x20, JSI_FILE_TYPE_CHAR=0x40, JSI_FILE_TYPE_SOCKET=0x80, JSI_FILE_TYPE_HIDDEN=0x100,  JSI_OUTPUT_QUOTE = 0x1, JSI_OUTPUT_JSON = 0x2, JSI_OUTPUT_NEWLINES = 0x4, JSI_OUTPUT_STDERR = 0x8, JSI_JSON_STATIC_DEFAULT =100, JSI_JSON_STRICT   = 0x101, JSI_STUBS_STRICT  = 0x1, JSI_STUBS_SIG = 0xdeadaa00, JSI_SIG_TYPEDEF, JSI_SIG_OPTS = 0xdeadab00, JSI_SIG_OPTS_STRUCT, JSI_SIG_OPTS_ENUM, JSI_SIG_OPTS_VARDEF, JSI_SIG_OPTS_FIELD, JSI_SIG_OPTS_USER1=0xdeadab20,  JSI_EVENT_TIMER=0, JSI_EVENT_SIGNAL=1, JSI_EVENT_ALWAYS=2, JSI_ZIP_MAIN=0x1,  JSI_ZIP_INDEX=0x2,  JSI_DBI_READONLY     =0x0001, JSI_DBI_NOCREATE     =0x0002, JSI_DBI_NO_MUTEX     =0x0004, JSI_DBI_FULL_MUTEX   =0x0008,  JSI_MAX_NUMBER_STRING=50, JSI_BUFSIZ=8192  } Jsi_Enums;





























































































typedef struct Jsi_Interp Jsi_Interp;
typedef struct Jsi_Obj Jsi_Obj;
typedef struct Jsi_Value Jsi_Value;
typedef struct Jsi_Func Jsi_Func;
typedef struct Jsi_IterObj Jsi_IterObj;
typedef struct Jsi_FuncObj Jsi_FuncObj;
typedef struct Jsi_UserObjReg Jsi_UserObjReg;
typedef struct Jsi_UserObj Jsi_UserObj;
typedef struct Jsi_HashEntry Jsi_HashEntry;
typedef struct Jsi_Hash Jsi_Hash;
typedef struct Jsi_HashSearch Jsi_HashSearch;
typedef struct Jsi_TreeEntry Jsi_TreeEntry;
typedef struct Jsi_Tree Jsi_Tree;
typedef struct Jsi_TreeSearch Jsi_TreeSearch;
typedef struct Jsi_List Jsi_List;
typedef struct Jsi_ListEntry Jsi_ListEntry;
typedef struct Jsi_ListSearch Jsi_ListSearch;
typedef struct Jsi_Map Jsi_Map;
typedef struct Jsi_MapEntry Jsi_MapEntry;
typedef struct Jsi_MapSearch Jsi_MapSearch;
typedef struct Jsi_Regex_ Jsi_Regex;
typedef struct Jsi_Db Jsi_Db;
typedef struct Jsi_DbBinds Jsi_DbBinds;
typedef struct Jsi_Mutex Jsi_Mutex;
typedef struct Jsi_ScopeStrs Jsi_ScopeStrs;
typedef struct Jsi_OpCodes Jsi_OpCodes;
typedef struct Jsi_Chan* Jsi_Channel;
typedef struct Jsi_CS_Ctx Jsi_CS_Ctx;
typedef struct Jsi_OptionSpec Jsi_OptionSpec;

typedef struct Jsi_OptionSpec Jsi_StructSpec;
typedef struct Jsi_OptionSpec Jsi_FieldSpec;
typedef struct Jsi_OptionSpec Jsi_EnumSpec;
typedef struct Jsi_OptionSpec Jsi_VarSpec;

typedef Jsi_RC (Jsi_InitProc)(Jsi_Interp *interp, int release); 
typedef Jsi_RC (Jsi_DeleteProc)(Jsi_Interp *interp, void *data);
typedef Jsi_RC (Jsi_EventHandlerProc)(Jsi_Interp *interp, void *data);
typedef Jsi_RC (Jsi_ValueHandlerProc)(Jsi_Interp *interp, Jsi_Value *v, struct Jsi_OptionSpec* spec, void *record);
typedef void (Jsi_DeleteVoidProc)(void *data);
typedef Jsi_RC (Jsi_csgset)(Jsi_Interp *interp, void *data, Jsi_Wide *s, Jsi_OptionSpec *spec, int idx, bool isSet);
typedef int (Jsi_IterProc)(Jsi_IterObj *iterObj, Jsi_Value *val, Jsi_Value *var, int index);







typedef struct {
    int argc;                   
    char **argv;                
    Jsi_InitProc* initProc;     
    uint mem_debug:2;           
    bool no_interactive:1;      
    bool auto_delete:1;         
    bool no_exit:1;             
    uint reserved:11;           
    int exitCode:16;            
    Jsi_Interp* interp;         
    void *reserved2[8];         
} Jsi_InterpOpts;

JSI_EXTERN Jsi_Interp* Jsi_InterpNew(Jsi_InterpOpts *opts); 
JSI_EXTERN void Jsi_InterpDelete( Jsi_Interp* interp); 
JSI_EXTERN void Jsi_InterpOnDelete(Jsi_Interp *interp, Jsi_DeleteProc *freeProc, void *ptr);  
JSI_EXTERN Jsi_RC Jsi_Interactive(Jsi_Interp* interp, int flags); 
JSI_EXTERN bool Jsi_InterpGone( Jsi_Interp* interp); 
JSI_EXTERN Jsi_Value* Jsi_InterpResult(Jsi_Interp *interp); 
JSI_EXTERN const char* Jsi_InterpLastError(Jsi_Interp *interp, const char **errFilePtr, int *errLinePtr); 
JSI_EXTERN void* Jsi_InterpGetData(Jsi_Interp *interp, const char *key, Jsi_DeleteProc **proc); 
JSI_EXTERN void Jsi_InterpSetData(Jsi_Interp *interp, const char *key, void *data, Jsi_DeleteProc *proc); 
JSI_EXTERN void Jsi_InterpFreeData(Jsi_Interp *interp, const char *key); 
JSI_EXTERN bool Jsi_InterpSafe(Jsi_Interp *interp); 
JSI_EXTERN Jsi_RC Jsi_InterpAccess(Jsi_Interp *interp, Jsi_Value* resource, int aflag); 
JSI_EXTERN Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts); 




JSI_EXTERN void* Jsi_Malloc(uint size); 
JSI_EXTERN void* Jsi_Calloc(uint n, uint size); 
JSI_EXTERN void* Jsi_Realloc(void *m, uint size); 
JSI_EXTERN void  Jsi_Free(void *m); 
JSI_EXTERN int Jsi_ObjIncrRefCount(Jsi_Interp* interp, Jsi_Obj *obj); 
JSI_EXTERN int Jsi_ObjDecrRefCount(Jsi_Interp* interp, Jsi_Obj *obj); 
JSI_EXTERN int Jsi_IncrRefCount(Jsi_Interp* interp, Jsi_Value *v); 
JSI_EXTERN int Jsi_DecrRefCount(Jsi_Interp* interp, Jsi_Value *v); 
JSI_EXTERN bool Jsi_IsShared(Jsi_Interp* interp, Jsi_Value *v); 
JSI_EXTERN Jsi_RC Jsi_DeleteData(Jsi_Interp* interp, void *m); 




JSI_EXTERN uint Jsi_Strlen(const char *str); 
JSI_EXTERN uint Jsi_StrlenSet(const char *str, uint len); 
JSI_EXTERN int Jsi_Strcmp(const char *str1, const char *str2); 
JSI_EXTERN int Jsi_Strncmp(const char *str1, const char *str2, int n); 
JSI_EXTERN int Jsi_Strncasecmp(const char *str1, const char *str2, int n); 
JSI_EXTERN int Jsi_StrcmpDict(const char *str1, const char *str2, int nocase, int dict); 
JSI_EXTERN char* Jsi_Strcpy(char *dst, const char *src); 
JSI_EXTERN char* Jsi_Strncpy(char *dst, const char *src, int len); 
JSI_EXTERN char* Jsi_Strdup(const char *n); 
JSI_EXTERN char* Jsi_StrdupLen(const char *str, int len); 
JSI_EXTERN char* Jsi_Strrchr(const char *str, int c); 
JSI_EXTERN char* Jsi_Strstr(const char *str, const char *sub); 
JSI_EXTERN char* Jsi_Strrstr(const char *str, const char *sub);  
JSI_EXTERN char* Jsi_Strchr(const char *str, int c); 
JSI_EXTERN int Jsi_Strpos(const char *str, int start, const char *nid, int nocase); 
JSI_EXTERN int Jsi_Strrpos(const char *str, int start, const char *nid, int nocase); 
JSI_EXTERN bool Jsi_StrIsAlnum(const char *cp); 







typedef struct {





    JSI_DSTRING_DECL_FIELDS(JSI_DSTRING_STATIC_SIZE)
} Jsi_DString;







JSI_EXTERN char*   Jsi_DSAppendLen(Jsi_DString *dsPtr,const char *bytes, int length);  
JSI_EXTERN char*   Jsi_DSAppend(Jsi_DString *dsPtr, const char *str, ...)    __attribute__((sentinel));
JSI_EXTERN void    Jsi_DSFree(Jsi_DString *dsPtr);  
JSI_EXTERN char*   Jsi_DSFreeDup(Jsi_DString *dsPtr);  
JSI_EXTERN void    Jsi_DSInit(Jsi_DString *dsPtr);  
JSI_EXTERN uint    Jsi_DSLength(Jsi_DString *dsPtr);  
JSI_EXTERN char*   Jsi_DSPrintf(Jsi_DString *dsPtr, const char *fmt, ...)   __attribute__((format (printf,2,3)));
JSI_EXTERN char*   Jsi_DSSet(Jsi_DString *dsPtr, const char *str);  
JSI_EXTERN uint    Jsi_DSSetLength(Jsi_DString *dsPtr, uint length);  
JSI_EXTERN char*   Jsi_DSValue(Jsi_DString *dsPtr);  




typedef void (Jsi_DelCmdProc)(Jsi_Interp *interp, void *privData);
typedef Jsi_RC (Jsi_CmdProc)(Jsi_Interp *interp, Jsi_Value *args,  Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr);


typedef struct Jsi_CmdSpec {
    const char *name;       
    Jsi_CmdProc *proc;      
    int minArgs;
    int maxArgs;            
    const char *argStr;     
    const char *help;       
    uint retType;           
    int flags;              
    const char *info;       
    Jsi_OptionSpec *opts;   
    Jsi_DelCmdProc *delProc;
    void *reserved[4];      
} Jsi_CmdSpec;

typedef struct {
    bool Test;
    bool Debug;
    bool Trace;
    int traceCall;
    bool coverage;
    bool profile;
} Jsi_ModuleConf;

typedef struct {
    struct Jsi_OptionSpec *spec;
    void *data;
    Jsi_CmdSpec *cmdSpec;
    Jsi_Value *info;
    void *reserved[3]; 
    Jsi_ModuleConf modConf;
    void *reserved2[3]; 
} Jsi_PkgOpts;

typedef struct {
    char *str;
    int32_t len;
    uint32_t flags;
} Jsi_String;

JSI_EXTERN Jsi_Value* Jsi_CommandCreate(Jsi_Interp *interp, const char *name, Jsi_CmdProc *cmdProc, void *privData); 
JSI_EXTERN Jsi_Value* Jsi_CommandCreateSpecs(Jsi_Interp *interp, const char *name, Jsi_CmdSpec *cmdSpecs, void *privData, int flags); 
JSI_EXTERN void* Jsi_CommandNewObj(Jsi_Interp *interp, const char *name, const char *arg1, const char *opts, const char *var);  
JSI_EXTERN Jsi_RC Jsi_CommandInvokeJSON(Jsi_Interp *interp, const char *cmd, const char *json, Jsi_Value **ret); 
JSI_EXTERN Jsi_RC Jsi_CommandInvoke(Jsi_Interp *interp, const char *cmdstr, Jsi_Value *args, Jsi_Value **ret); 
JSI_EXTERN Jsi_RC Jsi_CommandDelete(Jsi_Interp *interp, const char *name); 
JSI_EXTERN Jsi_CmdSpec* Jsi_FunctionGetSpecs(Jsi_Func *funcPtr); 
JSI_EXTERN bool Jsi_FunctionIsConstructor(Jsi_Func *funcPtr); 
JSI_EXTERN bool Jsi_FunctionReturnIgnored(Jsi_Interp *interp, Jsi_Func *funcPtr); 
JSI_EXTERN void* Jsi_FunctionPrivData(Jsi_Func *funcPtr); 
JSI_EXTERN Jsi_RC Jsi_FunctionArguments(Jsi_Interp *interp, Jsi_Value *func, int *argcPtr); 
JSI_EXTERN Jsi_RC Jsi_FunctionApply(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret); 
JSI_EXTERN Jsi_RC Jsi_FunctionInvoke(Jsi_Interp *interp, Jsi_Value *tocall, Jsi_Value *args, Jsi_Value **ret, Jsi_Value *_this); 
JSI_EXTERN Jsi_RC Jsi_FunctionInvokeJSON(Jsi_Interp *interp, Jsi_Value *tocall, const char *json, Jsi_Value **ret); 
JSI_EXTERN int Jsi_FunctionInvokeBool(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg); 
JSI_EXTERN Jsi_RC Jsi_FunctionInvokeString(Jsi_Interp *interp, Jsi_Value *func, Jsi_Value *arg, Jsi_DString *dStr); 
JSI_EXTERN Jsi_Value* Jsi_VarLookup(Jsi_Interp *interp, const char *varname); 
JSI_EXTERN Jsi_Value* Jsi_NameLookup(Jsi_Interp *interp, const char *varname); 
JSI_EXTERN Jsi_Value* Jsi_NameLookup2(Jsi_Interp *interp, const char *name, const char *inObj); 
JSI_EXTERN Jsi_RC Jsi_PkgProvideEx(Jsi_Interp *interp, const char *name, Jsi_Number version, Jsi_InitProc *initProc, Jsi_PkgOpts* popts); 
JSI_EXTERN Jsi_Number Jsi_PkgRequireEx(Jsi_Interp *interp, const char *name, Jsi_Number version, Jsi_PkgOpts **poptsPtr); 
JSI_EXTERN Jsi_Number Jsi_PkgVersion(Jsi_Interp *interp, const char *name, const char **filePtr); 





typedef int32_t Jsi_UniChar;
JSI_EXTERN uint Jsi_NumUtfBytes(char c); 
JSI_EXTERN uint Jsi_NumUtfChars(const char *utf, int length); 
JSI_EXTERN uint Jsi_UtfGetIndex(const char *utf, int index, char outbuf[5]); 
JSI_EXTERN const char* Jsi_UtfAtIndex(const char *utf, int index); 
JSI_EXTERN uint Jsi_UniCharToUtf(Jsi_UniChar uc, char *dest); 
JSI_EXTERN uint Jsi_UtfToUniChar(const char *utf, Jsi_UniChar *ch); 
JSI_EXTERN uint Jsi_UtfToUniCharCase(const char *utf, Jsi_UniChar *ch, int upper); 
JSI_EXTERN uint Jsi_UtfDecode(const char *str, char* oututf); 
JSI_EXTERN uint Jsi_UtfEncode(const char *utf, char *outstr); 
JSI_EXTERN char* Jsi_UtfSubstr(const char *str, int n, int len, Jsi_DString *dStr); 
JSI_EXTERN int Jsi_UtfIndexToOffset(const char *utf, int index); 




JSI_EXTERN Jsi_Obj* Jsi_ObjNew(Jsi_Interp* interp); 
JSI_EXTERN Jsi_Obj* Jsi_ObjNewType(Jsi_Interp* interp, Jsi_otype type); 
JSI_EXTERN void Jsi_ObjFree(Jsi_Interp* interp, Jsi_Obj *obj); 
JSI_EXTERN Jsi_Obj* Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count); 
JSI_EXTERN Jsi_Obj* Jsi_ObjNewArray(Jsi_Interp *interp, Jsi_Value **items, int count, int copy); 

JSI_EXTERN bool      Jsi_ObjIsArray(Jsi_Interp *interp, Jsi_Obj *o); 
JSI_EXTERN void     Jsi_ObjSetLength(Jsi_Interp *interp, Jsi_Obj *obj, uint len); 
JSI_EXTERN int      Jsi_ObjGetLength(Jsi_Interp *interp, Jsi_Obj *obj); 
JSI_EXTERN const char* Jsi_ObjTypeStr(Jsi_Interp *interp, Jsi_Obj *obj); 
JSI_EXTERN Jsi_otype Jsi_ObjTypeGet(Jsi_Obj *obj); 
JSI_EXTERN void     Jsi_ObjListifyArray(Jsi_Interp *interp, Jsi_Obj *obj); 
JSI_EXTERN Jsi_RC      Jsi_ObjArraySet(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex); 
JSI_EXTERN Jsi_RC      Jsi_ObjArrayAdd(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v); 
JSI_EXTERN Jsi_TreeEntry* Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags); 
JSI_EXTERN void    Jsi_ObjFromDS(Jsi_DString *dsPtr, Jsi_Obj *obj);  
JSI_EXTERN Jsi_IterObj* Jsi_IterObjNew(Jsi_Interp *interp, Jsi_IterProc *iterProc); 
JSI_EXTERN void Jsi_IterObjFree(Jsi_IterObj *iobj); 
JSI_EXTERN void Jsi_IterGetKeys(Jsi_Interp *interp, Jsi_Value *target, Jsi_IterObj *iterobj, int depth); 
JSI_EXTERN int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint n); 

struct Jsi_IterObj {
    Jsi_Interp *interp;
    const char **keys;
    uint size; 
    uint count;
    uint iter;
    bool isArrayList;            
    bool isof;
    Jsi_Obj *obj;
    uint cur;                    
    int depth;                  
    Jsi_IterProc *iterCmd;
};





JSI_EXTERN Jsi_Value* Jsi_ValueNew(Jsi_Interp *interp); 
JSI_EXTERN Jsi_Value* Jsi_ValueNew1(Jsi_Interp *interp); 
JSI_EXTERN void Jsi_ValueFree(Jsi_Interp *interp, Jsi_Value* v); 

JSI_EXTERN Jsi_Value* Jsi_ValueNewNull(Jsi_Interp *interp); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewBoolean(Jsi_Interp *interp, int bval); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewNumber(Jsi_Interp *interp, Jsi_Number n); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewBlob(Jsi_Interp *interp, uchar *s, uint len); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewString(Jsi_Interp *interp, const char *s, int len); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewStringKey(Jsi_Interp *interp, const char *s); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewStringConst(Jsi_Interp *interp, const char *s, int len); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewStringDup(Jsi_Interp *interp, const char *s); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewArray(Jsi_Interp *interp, const char **items, int count); 
JSI_EXTERN Jsi_Value* Jsi_ValueNewObj(Jsi_Interp *interp, Jsi_Obj *o) ; 



JSI_EXTERN Jsi_RC Jsi_GetStringFromValue(Jsi_Interp* interp, Jsi_Value *value, const char **s); 
JSI_EXTERN Jsi_RC Jsi_GetNumberFromValue(Jsi_Interp* interp, Jsi_Value *value, Jsi_Number *n); 
JSI_EXTERN Jsi_RC Jsi_GetBoolFromValue(Jsi_Interp* interp, Jsi_Value *value, bool *n); 
JSI_EXTERN Jsi_RC Jsi_GetIntFromValue(Jsi_Interp* interp, Jsi_Value *value, int *n); 
JSI_EXTERN Jsi_RC Jsi_GetLongFromValue(Jsi_Interp* interp, Jsi_Value *value, long *n); 
JSI_EXTERN Jsi_RC Jsi_GetWideFromValue(Jsi_Interp* interp, Jsi_Value *value, Jsi_Wide *n); 
JSI_EXTERN Jsi_RC Jsi_GetDoubleFromValue(Jsi_Interp* interp, Jsi_Value *value, Jsi_Number *n); 
JSI_EXTERN Jsi_RC Jsi_GetIntFromValueBase(Jsi_Interp* interp, Jsi_Value *value, int *n, int base, int flags); 
JSI_EXTERN Jsi_RC Jsi_ValueGetBoolean(Jsi_Interp *interp, Jsi_Value *pv, bool *val); 
JSI_EXTERN Jsi_RC Jsi_ValueGetNumber(Jsi_Interp *interp, Jsi_Value *pv, Jsi_Number *val); 

JSI_EXTERN bool Jsi_ValueIsType(Jsi_Interp *interp, Jsi_Value *pv, Jsi_vtype vtype); 
JSI_EXTERN bool Jsi_ValueIsObjType(Jsi_Interp *interp, Jsi_Value *v, Jsi_otype otype); 
JSI_EXTERN bool Jsi_ValueIsTrue(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN bool Jsi_ValueIsFalse(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN bool Jsi_ValueIsNumber(Jsi_Interp *interp, Jsi_Value *pv); 
JSI_EXTERN bool Jsi_ValueIsArray(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN bool Jsi_ValueIsBoolean(Jsi_Interp *interp, Jsi_Value *pv); 
JSI_EXTERN bool Jsi_ValueIsNull(Jsi_Interp *interp, Jsi_Value *pv); 
JSI_EXTERN bool Jsi_ValueIsUndef(Jsi_Interp *interp, Jsi_Value *pv); 
JSI_EXTERN bool Jsi_ValueIsFunction(Jsi_Interp *interp, Jsi_Value *pv); 
JSI_EXTERN bool Jsi_ValueIsString(Jsi_Interp *interp, Jsi_Value *pv); 

JSI_EXTERN Jsi_Value* Jsi_ValueMakeObject(Jsi_Interp *interp, Jsi_Value **v, Jsi_Obj *o); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeArrayObject(Jsi_Interp *interp, Jsi_Value **v, Jsi_Obj *o); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeNumber(Jsi_Interp *interp, Jsi_Value **v, Jsi_Number n); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeBool(Jsi_Interp *interp, Jsi_Value **v, int b); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeString(Jsi_Interp *interp, Jsi_Value **v, const char *s); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeStringKey(Jsi_Interp *interp, Jsi_Value **v, const char *s); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeBlob(Jsi_Interp *interp, Jsi_Value **v, uchar *s, int len); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeNull(Jsi_Interp *interp, Jsi_Value **v); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeUndef(Jsi_Interp *interp, Jsi_Value **v); 
JSI_EXTERN Jsi_Value* Jsi_ValueMakeDStringObject(Jsi_Interp *interp, Jsi_Value **v, Jsi_DString *dsPtr); 
JSI_EXTERN bool Jsi_ValueIsStringKey(Jsi_Interp* interp, Jsi_Value *key); 


JSI_EXTERN const char*  Jsi_ValueToString(Jsi_Interp *interp, Jsi_Value *v, int *lenPtr); 
JSI_EXTERN Jsi_RC       Jsi_ValueToBool(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_RC       Jsi_ValueToNumber(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_Number   Jsi_ValueToNumberInt(Jsi_Interp *interp, Jsi_Value *v, int isInt); 
JSI_EXTERN Jsi_RC       Jsi_ValueToObject(Jsi_Interp *interp, Jsi_Value *v); 

JSI_EXTERN void     Jsi_ValueReset(Jsi_Interp *interp, Jsi_Value **v); 
JSI_EXTERN const char* Jsi_ValueGetDString(Jsi_Interp* interp, Jsi_Value* v, Jsi_DString *dStr, int quote); 
JSI_EXTERN char*    Jsi_ValueString(Jsi_Interp* interp, Jsi_Value* v, int *lenPtr); 
JSI_EXTERN uchar*   Jsi_ValueBlob(Jsi_Interp *interp, Jsi_Value* v, int *lenPtr); 
JSI_EXTERN char*    Jsi_ValueGetStringLen(Jsi_Interp *interp, Jsi_Value *pv, int *lenPtr); 
JSI_EXTERN int      Jsi_ValueStrlen(Jsi_Value* v); 
JSI_EXTERN void     Jsi_ValueFromDS(Jsi_Interp *interp, Jsi_DString *dsPtr, Jsi_Value **ret);  
JSI_EXTERN int      Jsi_ValueInstanceOf( Jsi_Interp *interp, Jsi_Value* v1, Jsi_Value* v2); 
JSI_EXTERN Jsi_Obj* Jsi_ValueGetObj(Jsi_Interp* interp, Jsi_Value* v); 
JSI_EXTERN Jsi_vtype Jsi_ValueTypeGet(Jsi_Value *pv); 
JSI_EXTERN const char* Jsi_ValueTypeStr(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN int      Jsi_ValueCmp(Jsi_Interp *interp, Jsi_Value *v1, Jsi_Value* v2, int cmpFlags); 
JSI_EXTERN Jsi_RC Jsi_ValueGetIndex( Jsi_Interp *interp, Jsi_Value *valPtr, const char **tablePtr, const char *msg, int flags, int *indexPtr); 

JSI_EXTERN Jsi_RC Jsi_ValueArraySort(Jsi_Interp *interp, Jsi_Value *val, int sortFlags); 
JSI_EXTERN Jsi_Value* Jsi_ValueArrayConcat(Jsi_Interp *interp, Jsi_Value *arg1, Jsi_Value *arg2); 
JSI_EXTERN Jsi_RC Jsi_ValueArrayPush(Jsi_Interp *interp, Jsi_Value *arg1, Jsi_Value *arg2); 
JSI_EXTERN Jsi_Value* Jsi_ValueArrayPop(Jsi_Interp *interp, Jsi_Value *arg1); 
JSI_EXTERN void Jsi_ValueArrayShift(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_Value* Jsi_ValueArrayUnshift(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_Value* Jsi_ValueArrayIndex(Jsi_Interp *interp, Jsi_Value *args, int index); 
JSI_EXTERN char* Jsi_ValueArrayIndexToStr(Jsi_Interp *interp, Jsi_Value *args, int index, int *lenPtr); 



JSI_EXTERN Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags); 
JSI_EXTERN Jsi_RC Jsi_ValueInsertArray(Jsi_Interp *interp, Jsi_Value *target, int index, Jsi_Value *val, int flags); 
JSI_EXTERN int Jsi_ValueGetLength(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_Value* Jsi_ValueObjLookup(Jsi_Interp *interp, Jsi_Value *target, const char *key, int iskeystr); 
JSI_EXTERN bool Jsi_ValueKeyPresent(Jsi_Interp *interp, Jsi_Value *target, const char *k, int isstrkey); 
JSI_EXTERN Jsi_RC Jsi_ValueGetKeys(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *ret); 

JSI_EXTERN void Jsi_ValueCopy(Jsi_Interp *interp, Jsi_Value *to, Jsi_Value *from ); 
JSI_EXTERN void Jsi_ValueReplace(Jsi_Interp *interp, Jsi_Value **to, Jsi_Value *from ); 
JSI_EXTERN void Jsi_ValueDup2(Jsi_Interp *interp, Jsi_Value **to, Jsi_Value *from); 
JSI_EXTERN Jsi_Value* Jsi_ValueDupJSON(Jsi_Interp *interp, Jsi_Value *val); 
JSI_EXTERN void Jsi_ValueMove(Jsi_Interp *interp, Jsi_Value *to, Jsi_Value *from); 
JSI_EXTERN bool  Jsi_ValueIsEqual(Jsi_Interp *interp, Jsi_Value *v1, Jsi_Value* v2); 




typedef bool (Jsi_UserObjIsTrueProc)(void *data);
typedef bool (Jsi_UserObjIsEquProc)(void *data1, void *data2);
typedef Jsi_Obj* (Jsi_UserGetObjProc)(Jsi_Interp *interp, void *data);

typedef struct Jsi_UserObjReg {
    const char *name;
    Jsi_CmdSpec *spec;
    Jsi_DeleteProc *freefun;
    Jsi_UserObjIsTrueProc *istrue;
    Jsi_UserObjIsEquProc *isequ;
} Jsi_UserObjReg;

JSI_EXTERN Jsi_Hash* Jsi_UserObjRegister    (Jsi_Interp *interp, Jsi_UserObjReg *reg); 
JSI_EXTERN Jsi_RC Jsi_UserObjUnregister  (Jsi_Interp *interp, Jsi_UserObjReg *reg); 
JSI_EXTERN int Jsi_UserObjNew    (Jsi_Interp *interp, Jsi_UserObjReg* reg, Jsi_Obj *obj, void *data); 
JSI_EXTERN void* Jsi_UserObjGetData(Jsi_Interp *interp, Jsi_Value* value, Jsi_Func *funcPtr); 
JSI_EXTERN Jsi_RC Jsi_UserObjName(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);  





JSI_EXTERN char* Jsi_NumberToString(Jsi_Interp *interp, Jsi_Number d, char *buf, int bsiz); 
JSI_EXTERN Jsi_Number Jsi_Version(void); 
JSI_EXTERN Jsi_Value* Jsi_ReturnValue(Jsi_Interp *interp); 
JSI_EXTERN Jsi_RC Jsi_Mount( Jsi_Interp *interp, Jsi_Value *archive, Jsi_Value *mount, Jsi_Value **ret); 
JSI_EXTERN Jsi_Value* Jsi_Executable(Jsi_Interp *interp); 
JSI_EXTERN Jsi_Regex* Jsi_RegExpNew(Jsi_Interp *interp, const char *regtxt, int flag); 
JSI_EXTERN void Jsi_RegExpFree(Jsi_Regex* re); 
JSI_EXTERN Jsi_RC Jsi_RegExpMatch( Jsi_Interp *interp,  Jsi_Value *pattern, const char *str, int *rc, Jsi_DString *dStr); 
JSI_EXTERN Jsi_RC Jsi_RegExpMatches(Jsi_Interp *interp, Jsi_Value *pattern, const char *str, int slen, Jsi_Value *ret); 
JSI_EXTERN bool Jsi_GlobMatch(const char *pattern, const char *string, int nocase); 
JSI_EXTERN char* Jsi_FileRealpath(Jsi_Interp *interp, Jsi_Value *path, char *newpath); 
JSI_EXTERN char* Jsi_FileRealpathStr(Jsi_Interp *interp, const char *path, char *newpath); 
JSI_EXTERN char* Jsi_NormalPath(Jsi_Interp *interp, const char *path, Jsi_DString *dStr); 
JSI_EXTERN char* Jsi_ValueNormalPath(Jsi_Interp *interp, Jsi_Value *path, Jsi_DString *dStr); 
JSI_EXTERN Jsi_RC Jsi_PathNormalize(Jsi_Interp *interp, Jsi_Value **pathPtr); 
JSI_EXTERN Jsi_RC Jsi_JSONParse(Jsi_Interp *interp, const char *js, Jsi_Value **ret, int flags); 
JSI_EXTERN Jsi_RC Jsi_JSONParseFmt(Jsi_Interp *interp, Jsi_Value **ret, const char *fmt, ...)  __attribute__((format (printf,3,4)));
JSI_EXTERN char* Jsi_JSONQuote(Jsi_Interp *interp, const char *str, int len, Jsi_DString *dStr); 
JSI_EXTERN Jsi_RC Jsi_EvalString(Jsi_Interp* interp, const char *str, int flags); 
JSI_EXTERN Jsi_RC Jsi_EvalFile(Jsi_Interp* interp, Jsi_Value *fname, int flags); 
JSI_EXTERN Jsi_RC Jsi_EvalCmdJSON(Jsi_Interp *interp, const char *cmd, const char *jsonArgs, Jsi_DString *dStr, int flags); 
JSI_EXTERN Jsi_RC Jsi_EvalZip(Jsi_Interp *interp, const char *exeFile, const char *mntDir, int *jsFound); 
JSI_EXTERN int Jsi_DictionaryCompare(const char *left, const char *right); 
JSI_EXTERN Jsi_RC Jsi_GetBool(Jsi_Interp* interp, const char *string, bool *n); 
JSI_EXTERN Jsi_RC Jsi_GetInt(Jsi_Interp* interp, const char *string, int *n, int base); 
JSI_EXTERN Jsi_RC Jsi_GetWide(Jsi_Interp* interp, const char *string, Jsi_Wide *n, int base); 
JSI_EXTERN Jsi_RC Jsi_GetDouble(Jsi_Interp* interp, const char *string, Jsi_Number *n); 
JSI_EXTERN Jsi_RC Jsi_FormatString(Jsi_Interp *interp, Jsi_Value *args, Jsi_DString *dStr); 
JSI_EXTERN void Jsi_SplitStr(const char *str, int *argcPtr, char ***argvPtr,  const char *splitCh, Jsi_DString *dStr); 
JSI_EXTERN Jsi_RC Jsi_Sleep(Jsi_Interp *interp, Jsi_Number dtim); 
JSI_EXTERN void Jsi_Preserve(Jsi_Interp* interp, void *data); 
JSI_EXTERN void Jsi_Release(Jsi_Interp* interp, void *data); 
JSI_EXTERN void Jsi_EventuallyFree(Jsi_Interp* interp, void *data, Jsi_DeleteProc* proc); 
JSI_EXTERN void Jsi_ShiftArgs(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_Value* Jsi_StringSplit(Jsi_Interp *interp, const char *str, const char *spliton); 
JSI_EXTERN Jsi_RC Jsi_GetIndex( Jsi_Interp *interp, const char *str, const char **tablePtr, const char *msg, int flags, int *indexPtr); 
JSI_EXTERN void* Jsi_PrototypeGet(Jsi_Interp *interp, const char *key); 
JSI_EXTERN Jsi_RC  Jsi_PrototypeDefine(Jsi_Interp *interp, const char *key, Jsi_Value *proto); 
JSI_EXTERN Jsi_RC Jsi_PrototypeObjSet(Jsi_Interp *interp, const char *key, Jsi_Obj *obj); 
JSI_EXTERN Jsi_RC Jsi_ThisDataSet(Jsi_Interp *interp, Jsi_Value *_this, void *value); 
JSI_EXTERN void* Jsi_ThisDataGet(Jsi_Interp *interp, Jsi_Value *_this); 
JSI_EXTERN Jsi_RC Jsi_FuncObjToString(Jsi_Interp *interp, Jsi_Func *f, Jsi_DString *dStr, int flags); 
JSI_EXTERN void* Jsi_UserObjDataFromVar(Jsi_Interp *interp, const char *var); 
JSI_EXTERN const char* Jsi_KeyAdd(Jsi_Interp *interp, const char *str); 
JSI_EXTERN const char* Jsi_KeyLookup(Jsi_Interp *interp, const char *str); 
JSI_EXTERN bool Jsi_IsReserved(Jsi_Interp *interp, const char* str, bool sql); 
JSI_EXTERN Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults); 
JSI_EXTERN Jsi_RC Jsi_DatetimeFormat(Jsi_Interp *interp, Jsi_Number date, const char *fmt, int isUtc, Jsi_DString *dStr);  
JSI_EXTERN Jsi_RC Jsi_DatetimeParse(Jsi_Interp *interp, const char *str, const char *fmt, int isUtc, Jsi_Number *datePtr, bool noMsg); 
JSI_EXTERN Jsi_Number Jsi_DateTime(void); 



typedef enum { Jsi_CHash_SHA2_256, Jsi_CHash_SHA1, Jsi_CHash_MD5, Jsi_CHash_SHA3_224,  Jsi_CHash_SHA3_384, Jsi_CHash_SHA3_512, Jsi_CHash_SHA3_256 } Jsi_CryptoHashType;

JSI_EXTERN Jsi_RC Jsi_Encrypt(Jsi_Interp *interp, Jsi_DString *inout, const char *key, uint keyLen, bool decrypt); 
JSI_EXTERN Jsi_RC Jsi_CryptoHash(char *outbuf, const char *str, int len, Jsi_CryptoHashType type, uint strength, bool noHex, int *sizPtr); 
JSI_EXTERN Jsi_RC Jsi_Base64(const char *str, int len, Jsi_DString *buf, bool decode); 
JSI_EXTERN int Jsi_HexStr(const uchar *data, int len, Jsi_DString *dStr, bool decode); 
JSI_EXTERN uint32_t Jsi_Crc32(uint32_t crc, const void *ptr, size_t buf_len); 
JSI_EXTERN Jsi_RC Jsi_FileRead(Jsi_Interp *interp, Jsi_Value *name, Jsi_DString *dStr); 

JSI_EXTERN int Jsi_NumberIsInfinity(Jsi_Number a);  
JSI_EXTERN bool Jsi_NumberIsEqual(Jsi_Number n1, Jsi_Number n2);  
JSI_EXTERN bool Jsi_NumberIsFinite(Jsi_Number value);  
JSI_EXTERN bool Jsi_NumberIsInteger(Jsi_Number n);  
JSI_EXTERN bool Jsi_NumberIsNaN(Jsi_Number a);  
JSI_EXTERN bool Jsi_NumberIsNormal(Jsi_Number a);  
JSI_EXTERN bool Jsi_NumberIsSubnormal(Jsi_Number a);  
JSI_EXTERN bool Jsi_NumberIsWide(Jsi_Number n);  
JSI_EXTERN Jsi_Number Jsi_NumberInfinity(int i);  
JSI_EXTERN Jsi_Number Jsi_NumberNaN(void);  
JSI_EXTERN void Jsi_NumberDtoA(Jsi_Interp *interp, Jsi_Number value, char* buf, int bsiz, int prec);  
JSI_EXTERN void Jsi_NumberItoA10(Jsi_Wide value, char* buf, int bsiz);  
JSI_EXTERN void Jsi_NumberUtoA10(Jsi_UWide, char* buf, int bsiz);  





struct Jsi_MapOpts;

typedef Jsi_RC (Jsi_HashDeleteProc)(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *data);
typedef Jsi_RC (Jsi_TreeDeleteProc)(Jsi_Interp *interp, Jsi_TreeEntry *hPtr, void *data);
typedef Jsi_RC (Jsi_MapDeleteProc)(Jsi_Interp *interp, Jsi_MapEntry *hPtr, void *data);
typedef Jsi_Value *(Jsi_MapFmtKeyProc)(Jsi_MapEntry* hPtr, struct Jsi_MapOpts *opts, int flags);
typedef Jsi_RC (Jsi_TreeWalkProc)(Jsi_Tree* treePtr, Jsi_TreeEntry* hPtr, void *data);
typedef int (Jsi_RBCompareProc)(Jsi_Tree *treePtr, const void *key1, const void *key2);

typedef struct Jsi_MapOpts {
    Jsi_Map_Type mapType; 
    Jsi_Key_Type keyType; 
    Jsi_Interp *interp;
    Jsi_Wide flags;
    void *user, *user2;
    Jsi_MapFmtKeyProc *fmtKeyProc;
    Jsi_RBCompareProc *compareTreeProc;
    union {
        Jsi_RC (*freeHashProc)(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *data);
        Jsi_RC (*freeTreeProc)(Jsi_Interp *interp, Jsi_TreeEntry *hPtr, void *data);
        Jsi_RC (*freeListProc)(Jsi_Interp *interp, Jsi_ListEntry *hPtr, void *data);
    };
    union {
        Jsi_RC (*lockHashProc) (Jsi_Hash *tablePtr, int lock);
        Jsi_RC (*lockTreeProc) (Jsi_Tree *tablePtr, int lock);
    };
} Jsi_MapOpts;


typedef struct Jsi_HashSearch {
    Jsi_Hash *tablePtr;
    unsigned long nextIndex; 
    Jsi_HashEntry *nextEntryPtr;
} Jsi_HashSearch;

JSI_EXTERN Jsi_Hash* Jsi_HashNew(Jsi_Interp *interp, uint keyType, Jsi_HashDeleteProc *freeProc); 
JSI_EXTERN Jsi_RC Jsi_HashConf(Jsi_Hash *hashPtr, Jsi_MapOpts *opts, bool set); 
JSI_EXTERN void Jsi_HashDelete(Jsi_Hash *hashPtr); 
JSI_EXTERN void Jsi_HashClear(Jsi_Hash *hashPtr); 
JSI_EXTERN Jsi_HashEntry* Jsi_HashSet(Jsi_Hash *hashPtr, const void *key, void *value); 
JSI_EXTERN void* Jsi_HashGet(Jsi_Hash *hashPtr, const void *key, int flags); 
JSI_EXTERN bool Jsi_HashUnset(Jsi_Hash *tbl, const void *key); 
JSI_EXTERN void* Jsi_HashKeyGet(Jsi_HashEntry *h); 
JSI_EXTERN Jsi_RC Jsi_HashKeysDump(Jsi_Interp *interp, Jsi_Hash *hashPtr, Jsi_Value **ret, int flags); 
JSI_EXTERN void* Jsi_HashValueGet(Jsi_HashEntry *h); 
JSI_EXTERN void Jsi_HashValueSet(Jsi_HashEntry *h, void *value); 
JSI_EXTERN Jsi_HashEntry* Jsi_HashEntryFind (Jsi_Hash *hashPtr, const void *key); 
JSI_EXTERN Jsi_HashEntry* Jsi_HashEntryNew (Jsi_Hash *hashPtr, const void *key, bool *isNew); 
JSI_EXTERN int Jsi_HashEntryDelete (Jsi_HashEntry *entryPtr); 
JSI_EXTERN Jsi_HashEntry* Jsi_HashSearchFirst (Jsi_Hash *hashPtr, Jsi_HashSearch *searchPtr); 
JSI_EXTERN Jsi_HashEntry* Jsi_HashSearchNext (Jsi_HashSearch *searchPtr); 
JSI_EXTERN uint Jsi_HashSize(Jsi_Hash *hashPtr); 





typedef struct Jsi_TreeSearch {
    Jsi_Tree *treePtr;
    uint top, max, left, epoch; 
    int flags;
    Jsi_TreeEntry *staticPtrs[200], *current;
    Jsi_TreeEntry **Ptrs;
} Jsi_TreeSearch;

JSI_EXTERN Jsi_Tree* Jsi_TreeNew(Jsi_Interp *interp, uint keyType, Jsi_TreeDeleteProc *freeProc); 
JSI_EXTERN Jsi_RC Jsi_TreeConf(Jsi_Tree *treePtr, Jsi_MapOpts *opts, bool set); 
JSI_EXTERN void Jsi_TreeDelete(Jsi_Tree *treePtr); 
JSI_EXTERN void Jsi_TreeClear(Jsi_Tree *treePtr); 
JSI_EXTERN Jsi_TreeEntry* Jsi_TreeObjSetValue(Jsi_Obj* obj, const char *key, Jsi_Value *val, int isstrkey); 
JSI_EXTERN Jsi_Value*     Jsi_TreeObjGetValue(Jsi_Obj* obj, const char *key, int isstrkey); 
JSI_EXTERN void* Jsi_TreeValueGet(Jsi_TreeEntry *hPtr); 
JSI_EXTERN void Jsi_TreeValueSet(Jsi_TreeEntry *hPtr, void *value); 
JSI_EXTERN void* Jsi_TreeKeyGet(Jsi_TreeEntry *hPtr); 
JSI_EXTERN Jsi_TreeEntry* Jsi_TreeEntryFind(Jsi_Tree *treePtr, const void *key); 
JSI_EXTERN Jsi_TreeEntry* Jsi_TreeEntryNew(Jsi_Tree *treePtr, const void *key, bool *isNew); 
JSI_EXTERN int Jsi_TreeEntryDelete(Jsi_TreeEntry *entryPtr); 
JSI_EXTERN Jsi_TreeEntry* Jsi_TreeSearchFirst(Jsi_Tree *treePtr, Jsi_TreeSearch *searchPtr, int flags, const void *startKey); 
JSI_EXTERN Jsi_TreeEntry* Jsi_TreeSearchNext(Jsi_TreeSearch *searchPtr); 
JSI_EXTERN void Jsi_TreeSearchDone(Jsi_TreeSearch *searchPtr); 
JSI_EXTERN int Jsi_TreeWalk(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags); 
JSI_EXTERN Jsi_TreeEntry* Jsi_TreeSet(Jsi_Tree *treePtr, const void *key, void *value); 
JSI_EXTERN void* Jsi_TreeGet(Jsi_Tree *treePtr, void *key, int flags); 
JSI_EXTERN bool Jsi_TreeUnset(Jsi_Tree *treePtr, void *key); 
JSI_EXTERN uint Jsi_TreeSize(Jsi_Tree *treePtr);  
JSI_EXTERN Jsi_Tree* Jsi_TreeFromValue(Jsi_Interp *interp, Jsi_Value *v); 
JSI_EXTERN Jsi_RC Jsi_TreeKeysDump(Jsi_Interp *interp, Jsi_Tree *hashPtr, Jsi_Value **ret, int flags); 




typedef struct Jsi_List {
    uint sig;
    int numEntries;
    Jsi_ListEntry *head;
    Jsi_ListEntry *tail;
    Jsi_MapOpts opts;
} Jsi_List;

typedef struct Jsi_ListEntry {
    uint sig;
    Jsi_Map_Type typ;    
    struct Jsi_ListEntry *next;
    struct Jsi_ListEntry *prev;
    Jsi_List *list;
    void *value;
} Jsi_ListEntry;

typedef struct Jsi_ListSearch {
    int flags;
    Jsi_List *tablePtr;
    unsigned long nextIndex; 
    Jsi_ListEntry *nextEntryPtr;
} Jsi_ListSearch;

JSI_EXTERN Jsi_List* Jsi_ListNew(Jsi_Interp *interp, Jsi_Wide flags, Jsi_HashDeleteProc *freeProc); 
JSI_EXTERN Jsi_RC Jsi_ListConf(Jsi_List *list, Jsi_MapOpts *opts, bool set); 
JSI_EXTERN void Jsi_ListDelete(Jsi_List *list); 
JSI_EXTERN void Jsi_ListClear(Jsi_List *list); 




JSI_EXTERN void* Jsi_ListValueGet(Jsi_ListEntry *list); 
JSI_EXTERN void Jsi_ListValueSet(Jsi_ListEntry *list, const void *value); 

JSI_EXTERN Jsi_ListEntry* Jsi_ListEntryNew(Jsi_List *list, const void *value, Jsi_ListEntry *before); 
JSI_EXTERN int Jsi_ListEntryDelete(Jsi_ListEntry *entry); 
JSI_EXTERN Jsi_ListEntry* Jsi_ListSearchFirst (Jsi_List *list, Jsi_ListSearch *search, int flags); 
JSI_EXTERN Jsi_ListEntry* Jsi_ListSearchNext (Jsi_ListSearch *search); 
JSI_EXTERN uint Jsi_ListSize(Jsi_List *list); 


JSI_EXTERN Jsi_ListEntry* Jsi_ListPush(Jsi_List *list, Jsi_ListEntry *entry, Jsi_ListEntry *before); 
JSI_EXTERN Jsi_ListEntry* Jsi_ListPop(Jsi_List *list, Jsi_ListEntry *entry); 















typedef struct {
    int len;
    int maxlen;
    void **vector;
} Jsi_Stack;

JSI_EXTERN Jsi_Stack* Jsi_StackNew(void); 
JSI_EXTERN void Jsi_StackFree(Jsi_Stack *stack); 
JSI_EXTERN int Jsi_StackSize(Jsi_Stack *stack); 
JSI_EXTERN void Jsi_StackPush(Jsi_Stack *stack, void *element); 
JSI_EXTERN void* Jsi_StackPop(Jsi_Stack *stack); 
JSI_EXTERN void* Jsi_StackPeek(Jsi_Stack *stack); 
JSI_EXTERN void* Jsi_StackUnshift(Jsi_Stack *stack); 
JSI_EXTERN void* Jsi_StackHead(Jsi_Stack *stack); 
JSI_EXTERN void Jsi_StackFreeElements(Jsi_Interp *interp, Jsi_Stack *stack, Jsi_DeleteProc *freeFunc); 



typedef struct Jsi_MapSearch {
    Jsi_Map_Type typ;
    union {
        Jsi_TreeSearch tree;
        Jsi_HashSearch hash;
        Jsi_ListSearch list;
    } v;
} Jsi_MapSearch;

JSI_EXTERN Jsi_Map* Jsi_MapNew(Jsi_Interp *interp, Jsi_Map_Type mapType, Jsi_Key_Type keyType, Jsi_MapDeleteProc *freeProc); 
JSI_EXTERN Jsi_RC Jsi_MapConf(Jsi_Map *mapPtr, Jsi_MapOpts *opts, bool set); 
JSI_EXTERN void Jsi_MapDelete (Jsi_Map *mapPtr); 
JSI_EXTERN void Jsi_MapClear (Jsi_Map *mapPtr); 
JSI_EXTERN Jsi_MapEntry* Jsi_MapSet(Jsi_Map *mapPtr, const void *key, const void *value); 
JSI_EXTERN void* Jsi_MapGet(Jsi_Map *mapPtr, const void *key, int flags); 
JSI_EXTERN void* Jsi_MapKeyGet(Jsi_MapEntry *h, int flags); 
JSI_EXTERN Jsi_RC Jsi_MapKeysDump(Jsi_Interp *interp, Jsi_Map *mapPtr, Jsi_Value **ret, int flags); 
JSI_EXTERN void* Jsi_MapValueGet(Jsi_MapEntry *h); 
JSI_EXTERN void Jsi_MapValueSet(Jsi_MapEntry *h, const void *value); 
JSI_EXTERN Jsi_MapEntry* Jsi_MapEntryFind (Jsi_Map *mapPtr, const void *key); 
JSI_EXTERN Jsi_MapEntry* Jsi_MapEntryNew (Jsi_Map *mapPtr, const void *key, bool *isNew); 
JSI_EXTERN int Jsi_MapEntryDelete (Jsi_MapEntry *entryPtr); 
JSI_EXTERN Jsi_MapEntry* Jsi_MapSearchFirst (Jsi_Map *mapPtr, Jsi_MapSearch *searchPtr, int flags); 
JSI_EXTERN Jsi_MapEntry* Jsi_MapSearchNext (Jsi_MapSearch *srchPtr); 
JSI_EXTERN void Jsi_MapSearchDone (Jsi_MapSearch *searchPtr);  
JSI_EXTERN uint Jsi_MapSize(Jsi_Map *mapPtr); 














   




typedef Jsi_RC (Jsi_OptionParseProc) ( Jsi_Interp *interp, Jsi_OptionSpec *spec, Jsi_Value *value, const char *str, void *record, Jsi_Wide flags);
typedef Jsi_RC (Jsi_OptionFormatProc) ( Jsi_Interp *interp, Jsi_OptionSpec *spec, Jsi_Value **retValue, Jsi_DString *retStr, void *record, Jsi_Wide flags);
typedef Jsi_RC (Jsi_OptionFormatStringProc) ( Jsi_Interp *interp, Jsi_OptionSpec *spec, Jsi_DString **retValue, void *record);
typedef void (Jsi_OptionFreeProc) (Jsi_Interp *interp, Jsi_OptionSpec *spec, void *ptr);

typedef Jsi_RC (Jsi_OptionBitOp)(Jsi_Interp *interp, Jsi_OptionSpec *spec, void *data, Jsi_Wide *s, int isSet);

typedef struct {
    const char *name;
    Jsi_OptionParseProc *parseProc;
    Jsi_OptionFormatProc *formatProc;
    Jsi_OptionFreeProc *freeProc;
    const char *help;
    const char *info;
    void* data;
} Jsi_OptionCustom;

typedef enum {
    JSI_OPTION_BOOL=1, JSI_OPTION_INT8,  JSI_OPTION_INT16,  JSI_OPTION_INT32,  JSI_OPTION_INT64, JSI_OPTION_UINT8, JSI_OPTION_UINT16, JSI_OPTION_UINT32, JSI_OPTION_UINT64, JSI_OPTION_FLOAT, JSI_OPTION_DOUBLE, JSI_OPTION_LDOUBLE, JSI_OPTION_STRBUF, JSI_OPTION_TIME_W, JSI_OPTION_TIME_D,  JSI_OPTION_TIME_T, JSI_OPTION_SIZE_T, JSI_OPTION_SSIZE_T, JSI_OPTION_INTPTR_T, JSI_OPTION_UINTPTR_T, JSI_OPTION_NUMBER, JSI_OPTION_INT, JSI_OPTION_UINT, JSI_OPTION_LONG, JSI_OPTION_ULONG, JSI_OPTION_SHORT, JSI_OPTION_USHORT, JSI_OPTION_STRING, JSI_OPTION_DSTRING, JSI_OPTION_STRKEY, JSI_OPTION_VALUE, JSI_OPTION_VAR, JSI_OPTION_OBJ, JSI_OPTION_ARRAY, JSI_OPTION_REGEXP, JSI_OPTION_FUNC, JSI_OPTION_USEROBJ, JSI_OPTION_CUSTOM, JSI_OPTION_END } Jsi_OptionId;
























typedef const char* Jsi_Strkey;

typedef void* Jsi_Strbuf;

typedef char Jsi_Strbuf[];


typedef union {
    bool           BOOL;
    int8_t         INT8;
    int16_t        INT16;
    int32_t        INT32;
    int64_t        INT64;
    uint8_t        UINT8;
    uint16_t       UINT16;
    uint32_t       UINT32;
    uint64_t       UINT64;
    float          FLOAT;
    double         DOUBLE;
    ldouble        LDOUBLE;
    Jsi_Number     NUMBER;
    char*          STRBUF;
    time_d         TIME_D;
    time_w         TIME_W;
    time_t         TIME_T;
    size_t         SIZE_T;
    ssize_t        SSIZE_T;
    intptr_t       INTPTR_T;
    uintptr_t      UINTPTR_T;
    int            INT;
    uint           UINT;
    long           LONG;
    ulong          ULONG;
    short          SHORT;
    ushort         USHORT;
    Jsi_DString    DSTRING;
    const char*    STRKEY;
    Jsi_Value*     STRING;
    Jsi_Value*     VALUE;
    Jsi_Value*     VAR;
    Jsi_Value*     OBJ;
    Jsi_Value*     ARRAY;
    Jsi_Value*     REGEXP;
    Jsi_Value*     FUNC;
    Jsi_Value*     USEROBJ;
    void*          CUSTOM;
    Jsi_csgset*    OPT_BITS;
    struct Jsi_OptionSpec* OPT_CARRAY;
} Jsi_OptionValue;

typedef union { 
    bool           *BOOL;
    int8_t         *INT8;
    int16_t        *INT16;
    int32_t        *INT32;
    int64_t        *INT64;
    uint8_t        *UINT8;
    uint16_t       *UINT16;
    uint32_t       *UINT32;
    uint64_t       *UINT64;
    float          *FLOAT;
    double         *DOUBLE;
    ldouble        *LDOUBLE;
    Jsi_Number     *NUMBER;

    Jsi_Strbuf      STRBUF;

    Jsi_Strbuf      *STRBUF;

    time_t         *TIME_T;
    time_w         *TIME_W;
    time_d         *TIME_D;
    size_t         *SIZE_T;
    ssize_t        *SSIZE_T;
    intptr_t       *INTPTR_T;
    uintptr_t      *UINTPTR_T;
    int            *INT;
    uint           *UINT;
    long           *LONG;
    ulong          *ULONG;
    short          *SHORT;
    ushort         *USHORT;
    Jsi_DString    *DSTRING;
    const char*    *STRKEY;
    Jsi_Value*     *VALUE;
    Jsi_Value*     *STRING;
    Jsi_Value*     *VAR;
    Jsi_Value*     *OBJ;
    Jsi_Value*     *ARRAY;
    Jsi_Value*     *REGEXP;
    Jsi_Value*     *FUNC;
    Jsi_Value*     *USEROBJ;
    void           *CUSTOM;
    Jsi_csgset     *OPT_BITS;
    struct Jsi_OptionSpec *OPT_CARRAY;
} Jsi_OptionInitVal;

typedef struct {
    Jsi_Sig sig;
    Jsi_OptionId id;
    const char *idName, *cName;
    int size;
    const char *fmt, *xfmt, *sfmt, *help;
    Jsi_OptionInitVal init;
    Jsi_Wide flags;
    Jsi_Wide user;
    const char *userData;         uchar *extData;
    uchar *extra;
    Jsi_HashEntry *hPtr;
} Jsi_OptionTypedef;

struct Jsi_OptionSpec {
    Jsi_Sig sig;                
    Jsi_OptionId id;
    const char *name;           
    uint offset;                
    uint size;                  
    Jsi_OptionInitVal init;     
    const char *help;           
    Jsi_Wide flags;             
    Jsi_OptionCustom *custom;   
    void *data;                 
    const char *info;           
    const char *tname;          
    Jsi_Wide value;             
    uint32_t bits;              
    uint32_t boffset;           
    uint32_t idx;               
    uint32_t ssig;              
    uint32_t crc;               
    uint32_t arrSize;           
    const char *userData;       
    uchar *extData;             
    uchar *extra;               
    const Jsi_OptionTypedef *type;
};





































enum {
    
    JSI_OPTS_PREFIX         =   (1<<27),  JSI_OPTS_IS_UPDATE      =   (1<<28), JSI_OPTS_IGNORE_EXTRA   =   (1<<29), JSI_OPTS_FORCE_STRICT   =   (1<<30), JSI_OPTS_VERBOSE        =   (1<<31), JSI_OPTS_INCR           =   (1<<7),   JSI_OPT_IS_SPECIFIED    =   (1<<0), JSI_OPT_INIT_ONLY       =   (1<<1), JSI_OPT_READ_ONLY       =   (1<<2), JSI_OPT_NO_DUPVALUE     =   (1<<3), JSI_OPT_NO_CLEAR        =   (1<<4), JSI_OPT_REQUIRED        =   (1<<5), JSI_OPT_PASS2           =   (1<<6), JSI_OPT_DB_DIRTY        =   (1<<8), JSI_OPT_DB_IGNORE       =   (1<<9), JSI_OPT_DB_ROWID        =   (1<<10), JSI_OPT_CUST_NOCASE     =   (1<<11), JSI_OPT_FORCE_INT       =   (1<<12), JSI_OPT_BITSET_ENUM     =   (1<<13), JSI_OPT_TIME_DATEONLY   =   (1<<14), JSI_OPT_TIME_TIMEONLY   =   (1<<15), JSI_OPT_IS_BITS         =   (1<<16), JSI_OPT_FMT_STRING      =   (1<<17), JSI_OPT_FMT_NUMBER      =   (1<<18), JSI_OPT_FMT_HEX         =   (1<<19), JSI_OPT_STRICT          =   (1<<20), JSI_OPT_LOCKSAFE        =   (1<<21), JSI_OPT_COERCE          =   (1<<22), JSI_OPT_NO_SIG          =   (1<<23), JSI_OPT_ENUM_SPEC       =   (1<<24), JSI_OPT_ENUM_UNSIGNED   =   (1<<25), JSI_OPT_ENUM_EXACT      =   (1<<26), JSI_OPTIONS_USER_FIRSTBIT  =   48, };



































JSI_EXTERN const Jsi_OptionTypedef* Jsi_OptionTypeInfo(Jsi_OptionId typ); 
JSI_EXTERN Jsi_OptionTypedef* Jsi_TypeLookup(Jsi_Interp* interp, const char *typ); 
JSI_EXTERN int Jsi_OptionsProcess(Jsi_Interp *interp, Jsi_OptionSpec *specs, void *data, Jsi_Value *value, Jsi_Wide flags); 
JSI_EXTERN int Jsi_OptionsProcessJSON(Jsi_Interp *interp, Jsi_OptionSpec *opts, void *data, const char *json, Jsi_Wide flags); 
JSI_EXTERN Jsi_RC Jsi_OptionsConf(Jsi_Interp *interp, Jsi_OptionSpec *specs, void *data, Jsi_Value *value, Jsi_Value **ret, Jsi_Wide flags); 
JSI_EXTERN void Jsi_OptionsFree(Jsi_Interp *interp, Jsi_OptionSpec *specs, void *data, Jsi_Wide flags); 
JSI_EXTERN Jsi_RC Jsi_OptionsGet(Jsi_Interp *interp, Jsi_OptionSpec *specs, void *data, const char *option, Jsi_Value** valuePtr, Jsi_Wide flags); 
JSI_EXTERN Jsi_RC Jsi_OptionsSet(Jsi_Interp *interp, Jsi_OptionSpec *specs, void* data, const char *option, Jsi_Value *valuePtr, Jsi_Wide flags); 
JSI_EXTERN Jsi_RC Jsi_OptionsDump(Jsi_Interp *interp, Jsi_OptionSpec *specs, void *data, Jsi_Value** ret, Jsi_Wide flags); 
JSI_EXTERN int Jsi_OptionsChanged(Jsi_Interp *interp, Jsi_OptionSpec *specs, const char *pattern, ...)  __attribute__((sentinel));
JSI_EXTERN bool Jsi_OptionsValid(Jsi_Interp *interp, Jsi_OptionSpec* spec);  
JSI_EXTERN const char* Jsi_OptionsData(Jsi_Interp *interp, Jsi_OptionSpec *specs, Jsi_DString *dStr, bool schema);
JSI_EXTERN Jsi_OptionSpec* Jsi_OptionsFind(Jsi_Interp *interp, Jsi_OptionSpec *specs, const char *name, Jsi_Wide flags); 
JSI_EXTERN Jsi_Value* Jsi_OptionsCustomPrint(void* clientData, Jsi_Interp *interp, const char *optionName, void *data, int offset); 
JSI_EXTERN Jsi_OptionCustom* Jsi_OptionCustomBuiltin(Jsi_OptionCustom* cust); 

JSI_EXTERN Jsi_OptionSpec* Jsi_OptionsDup(Jsi_Interp *interp, const Jsi_OptionSpec *staticSpecs); 
JSI_EXTERN const Jsi_OptionSpec* Jsi_OptionSpecsCached(Jsi_Interp *interp, const Jsi_OptionSpec *staticSpecs);  




JSI_EXTERN Jsi_RC Jsi_MutexLock(Jsi_Interp *interp, Jsi_Mutex *mtx); 
JSI_EXTERN void Jsi_MutexUnlock(Jsi_Interp *interp, Jsi_Mutex *mtx); 
JSI_EXTERN void Jsi_MutexDelete(Jsi_Interp *interp, Jsi_Mutex *mtx); 
JSI_EXTERN Jsi_Mutex* Jsi_MutexNew(Jsi_Interp *interp, int timeout, int flags); 
JSI_EXTERN void* Jsi_CurrentThread(void); 
JSI_EXTERN void* Jsi_InterpThread(Jsi_Interp *interp); 













JSI_EXTERN Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint level, const char *format,...)   __attribute__((format (printf,3,4)));



typedef struct {
    Jsi_Sig sig;
    uint id;
    int evType;                 
    int sigNum;
    int once;                   
    long initialms;             
    long when_sec;              
    long when_ms;               
    bool busy;                  
    uint count;                 
    Jsi_HashEntry *hPtr;
    Jsi_Value *funcVal;         
    Jsi_EventHandlerProc *handler;  
    void *data;
} Jsi_Event;

JSI_EXTERN Jsi_Event* Jsi_EventNew(Jsi_Interp *interp, Jsi_EventHandlerProc *callback, void* data); 
JSI_EXTERN void Jsi_EventFree(Jsi_Interp *interp, Jsi_Event* event); 
JSI_EXTERN int Jsi_EventProcess(Jsi_Interp *interp, int maxEvents); 








typedef enum {
    JSI_JTYPE_PRIMITIVE = 0, JSI_JTYPE_OBJECT = 1, JSI_JTYPE_ARRAY = 2, JSI_JTYPE_STRING = 3, JSI_JTYPE_INVALID=-1 } Jsi_JsonTypeEnum;





typedef enum {
    JSI_JSON_ERR_NOMEM = -1, JSI_JSON_ERR_INVAL = -2, JSI_JSON_ERR_PART = -3, JSI_JSON_ERR_NONE = 0 } Jsi_JsonErrEnum;




typedef struct {
    Jsi_JsonTypeEnum type;
    int start;
    int end;
    uint size;
    int parent;
} Jsi_JsonTok;

typedef struct {
    uint pos;           
    uint toknext;       
    int toksuper;       
    Jsi_JsonTok *tokens, *static_tokens;
    uint num_tokens;
    int no_malloc;      
    bool strict;
    Jsi_Wide flags;
    const char *errStr;
    void *reserved[4];     
} Jsi_JsonParser;


JSI_EXTERN void Jsi_JsonInit(Jsi_JsonParser *parser, Jsi_JsonTok *static_tokens, uint num_tokens); 
JSI_EXTERN void Jsi_JsonReset(Jsi_JsonParser *parser); 
JSI_EXTERN void Jsi_JsonFree(Jsi_JsonParser *parser); 
JSI_EXTERN Jsi_JsonErrEnum Jsi_JsonParse(Jsi_JsonParser *parser, const char *js); 
JSI_EXTERN Jsi_JsonTok* Jsi_JsonGetToken(Jsi_JsonParser *parser, uint index); 
JSI_EXTERN Jsi_JsonTypeEnum Jsi_JsonGetType(Jsi_JsonParser *parser, uint index); 
JSI_EXTERN int Jsi_JsonTokLen(Jsi_JsonParser *parser, uint index); 
JSI_EXTERN const char* Jsi_JsonGetTokstr(Jsi_JsonParser *parser, const char *js, uint index, uint *len); 
JSI_EXTERN const char* Jsi_JsonGetTypename(int type); 
JSI_EXTERN const char* Jsi_JsonGetErrname(int code); 
JSI_EXTERN void Jsi_JsonDump(Jsi_JsonParser *parser, const char *js); 




struct Jsi_LoadHandle; struct Jsi_LoadHandle;

typedef struct Jsi_LoadHandle Jsi_LoadHandle;
typedef struct stat Jsi_StatBuf;
typedef struct dirent Jsi_Dirent;

typedef int (Jsi_FSStatProc) (Jsi_Interp *interp, Jsi_Value* path, Jsi_StatBuf *buf);
typedef int (Jsi_FSAccessProc) (Jsi_Interp *interp, Jsi_Value* path, int mode);
typedef int (Jsi_FSChmodProc) (Jsi_Interp *interp, Jsi_Value* path, int mode);
typedef Jsi_Channel (Jsi_FSOpenProc) (Jsi_Interp *interp, Jsi_Value* path, const char* modes);
typedef int (Jsi_FSLstatProc) (Jsi_Interp *interp, Jsi_Value* path, Jsi_StatBuf *buf);
typedef int (Jsi_FSCreateDirectoryProc) (Jsi_Interp *interp, Jsi_Value* path);
typedef int (Jsi_FSRemoveProc) (Jsi_Interp *interp, Jsi_Value* path, int flags);
typedef int (Jsi_FSCopyDirectoryProc) (Jsi_Interp *interp, Jsi_Value *srcPathPtr, Jsi_Value *destPathPtr, Jsi_Value **errorPtr);
typedef int (Jsi_FSCopyFileProc) (Jsi_Interp *interp, Jsi_Value *srcPathPtr, Jsi_Value *destPathPtr);
typedef int (Jsi_FSRemoveDirectoryProc) (Jsi_Interp *interp, Jsi_Value* path, int recursive, Jsi_Value **errorPtr);
typedef int (Jsi_FSRenameProc) (Jsi_Interp *interp, Jsi_Value *srcPathPtr, Jsi_Value *destPathPtr);
typedef Jsi_Value * (Jsi_FSListVolumesProc) (Jsi_Interp *interp);
typedef char* (Jsi_FSRealPathProc) (Jsi_Interp *interp, Jsi_Value* path, char *newPath);
typedef int (Jsi_FSLinkProc) (Jsi_Interp *interp, Jsi_Value* path, Jsi_Value *toPath, int linkType);
typedef int (Jsi_FSReadlinkProc)(Jsi_Interp *interp, Jsi_Value *path, char *buf, int size);
typedef int (Jsi_FSReadProc)(Jsi_Channel chan, char *buf, int size);
typedef int (Jsi_FSGetcProc)(Jsi_Channel chan);
typedef int (Jsi_FSEofProc)(Jsi_Channel chan);
typedef int (Jsi_FSTruncateProc)(Jsi_Channel chan, uint len);
typedef int (Jsi_FSUngetcProc)(Jsi_Channel chan, int ch);
typedef char *(Jsi_FSGetsProc)(Jsi_Channel chan, char *s, int size);
typedef int (Jsi_FSPutsProc)(Jsi_Channel chan, const char* str);
typedef int (Jsi_FSWriteProc)(Jsi_Channel chan, const char *buf, int size);
typedef int (Jsi_FSFlushProc)(Jsi_Channel chan);
typedef int (Jsi_FSSeekProc)(Jsi_Channel chan, Jsi_Wide offset, int mode);
typedef int (Jsi_FSTellProc)(Jsi_Channel chan);
typedef int (Jsi_FSCloseProc)(Jsi_Channel chan);
typedef int (Jsi_FSRewindProc)(Jsi_Channel chan);
typedef bool (Jsi_FSPathInFilesystemProc) (Jsi_Interp *interp, Jsi_Value* path,void* *clientDataPtr);
typedef int (Jsi_FSScandirProc)(Jsi_Interp *interp, Jsi_Value *path, Jsi_Dirent ***namelist, int (*filter)(const Jsi_Dirent *), int (*compar)(const Jsi_Dirent **, const Jsi_Dirent**));

typedef struct Jsi_Filesystem {
    const char *typeName;
    int structureLength;    
    int version;
    Jsi_FSPathInFilesystemProc *pathInFilesystemProc;
    Jsi_FSRealPathProc *realpathProc;
    Jsi_FSStatProc *statProc;
    Jsi_FSLstatProc *lstatProc;
    Jsi_FSAccessProc *accessProc;
    Jsi_FSChmodProc *chmodProc;
    Jsi_FSOpenProc *openProc;
    Jsi_FSScandirProc *scandirProc;
    Jsi_FSReadProc *readProc;
    Jsi_FSWriteProc *writeProc;
    Jsi_FSGetsProc *getsProc;
    Jsi_FSGetcProc *getcProc;
    Jsi_FSUngetcProc *ungetcProc;
    Jsi_FSPutsProc *putsProc;
    
    Jsi_FSFlushProc *flushProc;
    Jsi_FSSeekProc *seekProc;
    Jsi_FSTellProc *tellProc;
    Jsi_FSEofProc *eofProc;
    Jsi_FSTruncateProc *truncateProc;
    Jsi_FSRewindProc *rewindProc;
    Jsi_FSCloseProc *closeProc;
    Jsi_FSLinkProc *linkProc;
    Jsi_FSReadlinkProc *readlinkProc;
    Jsi_FSListVolumesProc *listVolumesProc;
    Jsi_FSCreateDirectoryProc *createDirectoryProc;
    Jsi_FSRemoveProc *removeProc;
    Jsi_FSRenameProc *renameProc;
    void *reserved[10];     
} Jsi_Filesystem;

typedef struct Jsi_Chan {
    FILE *fp;
    const char *fname;  
    Jsi_Filesystem *fsPtr;
    int isNative;
    int flags;
    char modes[JSI_FSMODESIZE];
    void *data;
    void *reserved[4];     
    ssize_t resInt[2];
} Jsi_Chan;

JSI_EXTERN Jsi_RC Jsi_FSRegister(Jsi_Filesystem *fsPtr, void *data); 
JSI_EXTERN Jsi_RC Jsi_FSUnregister(Jsi_Filesystem *fsPtr); 
JSI_EXTERN Jsi_Channel Jsi_FSNameToChannel(Jsi_Interp *interp, const char *name); 
JSI_EXTERN char* Jsi_GetCwd(Jsi_Interp *interp, Jsi_DString *cwdPtr); 
JSI_EXTERN int Jsi_Lstat(Jsi_Interp *interp, Jsi_Value* path, Jsi_StatBuf *buf); 
JSI_EXTERN int Jsi_Stat(Jsi_Interp *interp, Jsi_Value* path, Jsi_StatBuf *buf); 
JSI_EXTERN int Jsi_Access(Jsi_Interp *interp, Jsi_Value* path, int mode); 
JSI_EXTERN int Jsi_Remove(Jsi_Interp *interp, Jsi_Value* path, int flags); 
JSI_EXTERN int Jsi_Rename(Jsi_Interp *interp, Jsi_Value *src, Jsi_Value *dst); 
JSI_EXTERN int Jsi_Chdir(Jsi_Interp *interp, Jsi_Value* path); 
JSI_EXTERN Jsi_Channel Jsi_Open(Jsi_Interp *interp, Jsi_Value *file, const char *modeString); 
JSI_EXTERN int Jsi_Eof(Jsi_Interp *interp, Jsi_Channel chan); 
JSI_EXTERN int Jsi_Close(Jsi_Interp *interp, Jsi_Channel chan); 
JSI_EXTERN int Jsi_Read(Jsi_Interp *interp, Jsi_Channel chan, char *bufPtr, int toRead); 
JSI_EXTERN int Jsi_Write(Jsi_Interp *interp, Jsi_Channel chan, const char *bufPtr, int slen); 
JSI_EXTERN Jsi_Wide Jsi_Seek(Jsi_Interp *interp, Jsi_Channel chan, Jsi_Wide offset, int mode); 
JSI_EXTERN Jsi_Wide Jsi_Tell(Jsi_Interp *interp, Jsi_Channel chan); 
JSI_EXTERN int Jsi_Truncate(Jsi_Interp *interp, Jsi_Channel chan, uint len); 
JSI_EXTERN Jsi_Wide Jsi_Rewind(Jsi_Interp *interp, Jsi_Channel chan); 
JSI_EXTERN int Jsi_Flush(Jsi_Interp *interp, Jsi_Channel chan); 
JSI_EXTERN int Jsi_Getc(Jsi_Interp *interp, Jsi_Channel chan); 
JSI_EXTERN int Jsi_Printf(Jsi_Interp *interp, Jsi_Channel chan, const char *fmt, ...)  __attribute__((format (printf,3,4))); 
JSI_EXTERN int Jsi_Ungetc(Jsi_Interp *interp, Jsi_Channel chan, int ch); 
JSI_EXTERN char* Jsi_Gets(Jsi_Interp *interp, Jsi_Channel chan, char *s, int size); 
JSI_EXTERN int Jsi_Puts(Jsi_Interp *interp, Jsi_Channel chan, const char *str, int size); 

typedef int (Jsi_ScandirFilter)(const Jsi_Dirent *);
typedef int (Jsi_ScandirCompare)(const Jsi_Dirent **, const Jsi_Dirent**);
JSI_EXTERN int Jsi_Scandir(Jsi_Interp *interp, Jsi_Value *path, Jsi_Dirent ***namelist, Jsi_ScandirFilter *filter, Jsi_ScandirCompare *compare ); 
JSI_EXTERN int Jsi_SetChannelOption(Jsi_Interp *interp, Jsi_Channel chan, const char *optionName, const char *newValue); 
JSI_EXTERN char* Jsi_Realpath(Jsi_Interp *interp, Jsi_Value *path, char *newname); 
JSI_EXTERN int Jsi_Readlink(Jsi_Interp *interp, Jsi_Value* path, char *ret, int len); 
JSI_EXTERN Jsi_Channel Jsi_GetStdChannel(Jsi_Interp *interp, int id); 
JSI_EXTERN bool Jsi_FSNative(Jsi_Interp *interp, Jsi_Value* path); 
JSI_EXTERN int Jsi_Link(Jsi_Interp *interp, Jsi_Value* src, Jsi_Value *dest, int typ); 
JSI_EXTERN int Jsi_Chmod(Jsi_Interp *interp, Jsi_Value* path, int mode); 

JSI_EXTERN Jsi_RC Jsi_StubLookup(Jsi_Interp *interp, const char *name, void **ptr); 
JSI_EXTERN Jsi_RC Jsi_DllLookup(Jsi_Interp *interp, const char *module, const char *name, void **ptr); 
JSI_EXTERN Jsi_RC Jsi_LoadLibrary(Jsi_Interp *interp, const char *pathName, bool noInit); 
JSI_EXTERN int Jsi_AddAutoFiles(Jsi_Interp *interp, const char *dir);  







JSI_EXTERN Jsi_Db* Jsi_DbNew(const char *zFile, int inFlags); 
JSI_EXTERN void* Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* db); 








 
typedef struct Jsi_CData_Static {
    const char* name;
    Jsi_StructSpec* structs;
    Jsi_EnumSpec* enums;
    Jsi_VarSpec *vars;
    Jsi_OptionTypedef* types;
    struct Jsi_CData_Static* nextPtr;
} Jsi_CData_Static;


typedef struct Jsi_CDataDb {


















JSI_DBDATA_FIELDS } Jsi_CDataDb;

JSI_EXTERN int Jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *cd, const char *query); 
JSI_EXTERN Jsi_CDataDb* Jsi_CDataLookup(Jsi_Interp *interp, const char *name); 
JSI_EXTERN Jsi_RC Jsi_CDataRegister(Jsi_Interp *interp, Jsi_CData_Static *statics); 
JSI_EXTERN Jsi_RC Jsi_CDataStructInit(Jsi_Interp *interp, uchar* data, const char *sname); 
JSI_EXTERN Jsi_StructSpec* Jsi_CDataStruct(Jsi_Interp *interp, const char *name); 




typedef char STRING1[(1<<0)+1]; 
typedef char STRING2[(1<<1)+1];
typedef char STRING4[(1<<2)+1];
typedef char STRING8[(1<<3)+1];
typedef char STRING16[(1<<4)+1];
typedef char STRING32[(1<<5)+1];
typedef char STRING64[(1<<6)+1];
typedef char STRING128[(1<<7)+1];
typedef char STRING256[(1<<8)+1];
typedef char STRING512[(1<<9)+1];
typedef char STRING1024[(1<<10)+1];
typedef char STRING2048[(1<<11)+1];
typedef char STRING4096[(1<<12)+1];
typedef char STRING8192[(1<<13)+1];
typedef char STRING16384[(1<<14)+1];
typedef char STRING32768[(1<<15)+1];
typedef char STRING65536[(1<<16)+1];
































