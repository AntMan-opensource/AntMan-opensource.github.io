























namespace HPHP {


struct AccessLogFileData;
struct ErrorLogFileData;
struct VirtualHost;
struct IpBlockMap;
struct SatelliteServerInfo;
struct FilesMatch;
struct Hdf;
struct IniSettingMap;

constexpr int kDefaultInitialStaticStringTableSize = 500000;

enum class JitSerdesMode {
  
  
  
  
  
  Off                   = 0x0, Serialize             = 0x1, SerializeAndExit      = 0x5, Deserialize           = 0x2, DeserializeOrFail     = 0x6, DeserializeOrGenerate = 0xa, DeserializeAndDelete  = 0xe, DeserializeAndExit    = 0x12, };








enum class RepoMode {
  Closed    = 0, ReadOnly  = 1, ReadWrite = 2, };



struct RepoOptions {
  RepoOptions(const RepoOptions&) = default;
  RepoOptions(RepoOptions&&) = default;

  using StringMap = std::map<std::string, std::string>;


























  





  std::string path() const { return m_path; }
  std::string cacheKeyRaw() const;
  std::string cacheKeySha1() const;
  std::string toJSON() const;
  folly::dynamic toDynamic() const;
  struct stat stat() const { return m_stat; }
  std::string autoloadQuery() const noexcept { return Query; }
  std::string trustedDBPath() const noexcept { return TrustedDBPath; }

  bool operator==(const RepoOptions& o) const;

  static const RepoOptions& defaults();
  static void setDefaults(const Hdf& hdf, const IniSettingMap& ini);

  static const RepoOptions& forFile(const char* path);

private:
  RepoOptions() = default;
  explicit RepoOptions(const char* file);

  void filterNamespaces();
  void initDefaults(const Hdf& hdf, const IniSettingMap& ini);





PARSERFLAGS()
AUTOLOADFLAGS()





  std::string m_path;
  struct stat m_stat;

  static bool s_init;
  static RepoOptions s_defaults;
};


struct RuntimeOption {
  static void Load( IniSettingMap &ini, Hdf& config, const std::vector<std::string>& iniClis = std::vector<std::string>(), const std::vector<std::string>& hdfClis = std::vector<std::string>(), std::vector<std::string>* messages = nullptr, std::string cmd = "");





  static bool ServerExecutionMode() {
    return ServerMode;
  }

  static bool GcSamplingEnabled() {
    return EvalGCSampleRate > 0;
  }

  static bool JitSamplingEnabled() {
    return EvalJit && EvalJitSampleRate > 0;
  }

  static void ReadSatelliteInfo( const IniSettingMap& ini, const Hdf& hdf, std::vector<std::shared_ptr<SatelliteServerInfo>>& infos, std::string& xboxPassword, std::set<std::string>& xboxPasswords );






  static folly::Optional<folly::fs::path> GetHomePath( const folly::StringPiece user);

  static std::string GetDefaultUser();

  
  static bool ReadPerUserSettings(const folly::fs::path& confFileName, IniSettingMap& ini, Hdf& config);

  static std::string getTraceOutputFile();

  static bool ServerMode;
  static std::string BuildId;
  static std::string InstanceId;
  static std::string DeploymentId; 
  static int64_t ConfigId; 
  static std::string PidFile;

  static std::map<std::string, ErrorLogFileData> ErrorLogs;
  static std::string LogFile;
  static std::string LogFileSymLink;
  static uint16_t LogFilePeriodMultiplier;

  static int LogHeaderMangle;
  static bool AlwaysEscapeLog;
  static bool AlwaysLogUnhandledExceptions;
  static bool NoSilencer;
  static int ErrorUpgradeLevel; 
  static bool CallUserHandlerOnFatals;
  static bool ThrowExceptionOnBadMethodCall;
  static bool LogNativeStackOnOOM;
  static int RuntimeErrorReportingLevel;
  static int ForceErrorReportingLevel; 

  static std::string ServerUser; 
  static bool AllowRunAsRoot; 

  static int  MaxSerializedStringSize;
  static bool NoInfiniteRecursionDetection;
  static bool AssertEmitted;
  static int64_t NoticeFrequency; 
  static int64_t WarningFrequency;
  static int RaiseDebuggingFrequency;
  static int64_t SerializationSizeLimit;

  static std::string AccessLogDefaultFormat;
  static std::map<std::string, AccessLogFileData> AccessLogs;

  static std::string AdminLogFormat;
  static std::string AdminLogFile;
  static std::string AdminLogSymLink;

  static std::map<std::string, AccessLogFileData> RPCLogs;

  static std::string Host;
  static std::string DefaultServerNameSuffix;
  static std::string ServerType;
  static std::string ServerIP;
  static std::string ServerFileSocket;
  static const std::string& GetServerPrimaryIPv4();
  static const std::string& GetServerPrimaryIPv6();
  static int ServerPort;
  static int ServerPortFd;
  static int ServerBacklog;
  static int ServerConnectionLimit;
  static int ServerThreadCount;
  static int ServerQueueCount;
  static int ServerIOThreadCount;
  static int ServerHighQueueingThreshold;
  static bool ServerLegacyBehavior;
  
  static int ServerHugeThreadCount;
  static int ServerHugeStackKb;
  static uint32_t ServerLoopSampleRate;
  static int ServerWarmupThrottleRequestCount;
  static int ServerWarmupThrottleThreadCount;
  static int ServerThreadDropCacheTimeoutSeconds;
  static int ServerThreadJobLIFOSwitchThreshold;
  static int ServerThreadJobMaxQueuingMilliSeconds;
  static bool AlwaysDecodePostDataDefault;
  static bool ServerThreadDropStack;
  static bool ServerHttpSafeMode;
  static bool ServerStatCache;
  static bool ServerFixPathInfo;
  static bool ServerAddVaryEncoding;
  static bool ServerLogSettingsOnStartup;
  static bool ServerLogReorderProps;
  static bool ServerForkEnabled;
  static bool ServerForkLogging;
  static bool ServerWarmupConcurrently;
  static bool ServerDedupeWarmupRequests;
  static int ServerWarmupThreadCount;
  static int ServerExtendedWarmupThreadCount;
  static unsigned ServerExtendedWarmupRepeat;
  static unsigned ServerExtendedWarmupDelaySeconds;
  static std::vector<std::string> ServerWarmupRequests;
  static std::vector<std::string> ServerExtendedWarmupRequests;
  static std::string ServerCleanupRequest;
  static int ServerInternalWarmupThreads;
  static boost::container::flat_set<std::string> ServerHighPriorityEndPoints;
  static bool ServerExitOnBindFail;
  static int PageletServerThreadCount;
  static int PageletServerHugeThreadCount;
  static int PageletServerThreadDropCacheTimeoutSeconds;
  static int PageletServerQueueLimit;
  static bool PageletServerThreadDropStack;

  static int RequestTimeoutSeconds;
  static int PspTimeoutSeconds;
  static int PspCpuTimeoutSeconds;
  static int64_t MaxRequestAgeFactor;
  static int64_t RequestMemoryMaxBytes;
  
  
  static int64_t RequestHugeMaxBytes;
  static int64_t ImageMemoryMaxBytes;
  static int ServerGracefulShutdownWait;
  static bool ServerHarshShutdown;
  static bool ServerEvilShutdown;
  static bool ServerKillOnTimeout;
  static bool Server503OnShutdownAbort;
  static int ServerPreShutdownWait;
  static int ServerShutdownListenWait;
  static int ServerShutdownEOMWait;
  static int ServerPrepareToStopTimeout;
  static int ServerPartialPostStatusCode;
  
  
  
  
  
  
  static bool StopOldServer;
  static int64_t ServerRSSNeededMb;
  
  
  static int64_t ServerCriticalFreeMb;
  static int OldServerWait;
  
  
  static int CacheFreeFactor;
  static std::vector<std::string> ServerNextProtocols;
  static bool ServerEnableH2C;
  static int BrotliCompressionEnabled;
  static int BrotliChunkedCompressionEnabled;
  static int BrotliCompressionMode;
  
  static int BrotliCompressionLgWindowSize;
  static int BrotliCompressionQuality;
  static int ZstdCompressionEnabled;
  static int ZstdCompressionLevel;
  static int ZstdChecksumRate;
  static int GzipCompressionLevel;
  static int GzipMaxCompressionLevel;
  static bool EnableKeepAlive;
  static bool ExposeHPHP;
  static bool ExposeXFBServer;
  static bool ExposeXFBDebug;
  static std::string XFBDebugSSLKey;
  static int ConnectionTimeoutSeconds;
  static bool EnableOutputBuffering;
  static std::string OutputHandler;
  static bool ImplicitFlush;
  static bool EnableEarlyFlush;
  static bool ForceChunkedEncoding;
  static int64_t MaxPostSize;
  static int64_t LowestMaxPostSize;
  static bool AlwaysPopulateRawPostData;
  static int64_t UploadMaxFileSize;
  static std::string UploadTmpDir;
  static bool EnableFileUploads;
  static bool EnableUploadProgress;
  static int64_t MaxFileUploads;
  static int Rfc1867Freq;
  static std::string Rfc1867Prefix;
  static std::string Rfc1867Name;
  static bool ExpiresActive;
  static int ExpiresDefault;
  static std::string DefaultCharsetName;
  static bool ForceServerNameToHeader;
  static bool PathDebug;
  static std::vector<std::shared_ptr<VirtualHost>> VirtualHosts;
  static std::shared_ptr<IpBlockMap> IpBlocks;
  static std::vector<std::shared_ptr<SatelliteServerInfo>> SatelliteServerInfos;

  
  
  static int64_t RequestBodyReadLimit;

  static bool EnableSSL;
  static int SSLPort;
  static int SSLPortFd;
  static std::string SSLCertificateFile;
  static std::string SSLCertificateKeyFile;
  static std::string SSLCertificateDir;
  static std::string SSLTicketSeedFile;
  static bool TLSDisableTLS1_2;
  static std::string TLSClientCipherSpec;
  static bool EnableSSLWithPlainText;
  
  
  
  
  static int SSLClientAuthLevel;
  
  static std::string SSLClientCAFile;
  
  
  static uint32_t SSLClientAuthLoggingSampleRatio;

  
  static std::string ClientAuthAclIdentity;
  static std::string ClientAuthAclAction;
  
  
  static bool ClientAuthFailClose;

  
  
  
  
  
  
  
  
  static uint32_t ClientAuthLogSampleBase;
  static uint32_t ClientAuthSuccessLogSampleRatio;
  static uint32_t ClientAuthFailureLogSampleRatio;

  static int XboxServerThreadCount;
  static int XboxServerMaxQueueLength;
  static int XboxServerInfoMaxRequest;
  static int XboxServerInfoDuration;
  static std::string XboxServerInfoReqInitFunc;
  static std::string XboxServerInfoReqInitDoc;
  static bool XboxServerInfoAlwaysReset;
  static bool XboxServerLogInfo;
  static std::string XboxProcessMessageFunc;
  static std::string XboxPassword;
  static std::set<std::string> XboxPasswords;

  static std::string SourceRoot;
  static std::vector<std::string> IncludeSearchPaths;

  
  static std::map<std::string, std::string> IncludeRoots;
  static std::map<std::string, std::string> AutoloadRoots;

  static bool AutoloadEnabled;
  static std::string AutoloadDBPath;

  static std::string FileCache;
  static std::string DefaultDocument;
  static std::string GlobalDocument;
  static std::string ErrorDocument404;
  static bool ForbiddenAs404;
  static std::string ErrorDocument500;
  static std::string FatalErrorMessage;
  static std::string FontPath;
  static bool EnableStaticContentFromDisk;
  static bool EnableOnDemandUncompress;
  static bool EnableStaticContentMMap;

  static bool Utf8izeReplace;

  static std::string RequestInitFunction;
  static std::string RequestInitDocument;
  static std::string AutoPrependFile;
  static std::string AutoAppendFile;

  static bool SafeFileAccess;
  static std::vector<std::string> AllowedDirectories;
  static std::set<std::string> AllowedFiles;
  static hphp_string_imap<std::string> StaticFileExtensions;
  static hphp_string_imap<std::string> PhpFileExtensions;
  static std::set<std::string> ForbiddenFileExtensions;
  static std::set<std::string> StaticFileGenerators;
  static std::vector<std::shared_ptr<FilesMatch>> FilesMatches;

  static bool WhitelistExec;
  static bool WhitelistExecWarningOnly;
  static std::vector<std::string> AllowedExecCmds;

  static bool UnserializationWhitelistCheck;
  static bool UnserializationWhitelistCheckWarningOnly;
  static int64_t UnserializationBigMapThreshold;

  static std::string TakeoverFilename;
  static std::string AdminServerIP;
  static int AdminServerPort;
  static int AdminThreadCount;
  static bool AdminServerEnableSSLWithPlainText;
  static bool AdminServerStatsNeedPassword;
  static std::string AdminPassword;
  static std::set<std::string> AdminPasswords;
  static std::set<std::string> HashedAdminPasswords;

  
  static std::string ProxyOriginRaw;
  static int ProxyPercentageRaw;
  static int ProxyRetry;
  static bool UseServeURLs;
  static std::set<std::string> ServeURLs;
  static bool UseProxyURLs;
  static std::set<std::string> ProxyURLs;
  static std::vector<std::string> ProxyPatterns;
  static bool AlwaysUseRelativePath;

  static int  HttpDefaultTimeout;
  static int  HttpSlowQueryThreshold;

  static bool NativeStackTrace;
  static bool ServerErrorMessage;
  static bool RecordInput;
  static bool ClearInputOnSuccess;
  static std::string ProfilerOutputDir;
  static std::string CoreDumpEmail;
  static bool CoreDumpReport;
  static std::string CoreDumpReportDirectory;
  static std::string StackTraceFilename;
  static int StackTraceTimeout;
  static std::string RemoteTraceOutputDir;
  static std::set<std::string, stdltistr> TraceFunctions;

  static bool EnableStats;
  static bool EnableAPCStats;
  static bool EnableWebStats;
  static bool EnableMemoryStats;
  static bool EnableSQLStats;
  static bool EnableSQLTableStats;
  static bool EnableNetworkIOStatus;
  static std::string StatsXSL;
  static std::string StatsXSLProxy;
  static uint32_t StatsSlotDuration;
  static uint32_t StatsMaxSlot;

  static bool EnableHotProfiler;
  static int32_t ProfilerTraceBuffer;
  static double ProfilerTraceExpansion;
  static int32_t ProfilerMaxTraceBuffer;

  static int64_t MaxSQLRowCount;
  static int64_t SocketDefaultTimeout;
  static bool LockCodeMemory;
  static int MaxArrayChain;
  static bool WarnOnCollectionToArray;
  static bool UseDirectCopy;

  static bool DisableSmallAllocator;

  static std::map<std::string, std::string> ServerVariables;

  static std::map<std::string, std::string> EnvVariables;

  
  
  static std::string LightProcessFilePrefix;
  static int LightProcessCount;

  
  static bool EnableHipHopSyntax;
  static bool EnableShortTags;
  static bool EnableXHP;
  static bool EnableIntrinsicsExtension;
  static bool CheckSymLink;
  static bool TrustAutoloaderPath;
  static bool EnableArgsInBacktraces;
  static bool EnableZendIniCompat;
  static bool TimeoutsUseWallTime;
  static bool CheckFlushOnUserClose;
  static bool EvalAuthoritativeMode;
  static int CheckCLIClientCommands;
  static int CheckIntOverflow;
  static HackStrictOption StrictArrayFillKeys;
  static bool LookForTypechecker;
  static bool AutoTypecheck;
  static uint32_t EvalInitialStaticStringTableSize;
  static uint32_t EvalInitialNamedEntityTableSize;
  static JitSerdesMode EvalJitSerdesMode;
  static int ProfDataTTLHours;
  static std::string EvalJitSerdesFile;
  static std::string ProfDataTag;
  static bool DumpPreciseProfData;

  
  static bool PHP7_NoHexNumerics;
  static bool PHP7_Builtins;
  static bool PHP7_EngineExceptions;
  static bool PHP7_Substr;
  static bool PHP7_DisallowUnsafeCurlUploads;

  static int64_t HeapSizeMB;
  static int64_t HeapResetCountBase;
  static int64_t HeapResetCountMultiple;
  static int64_t HeapLowWaterMark;
  static int64_t HeapHighWaterMark;

  
  
  
  static uint64_t DisableCallUserFunc;
  
  
  
  static uint64_t DisableCallUserFuncArray;
  
  
  
  static uint64_t DisableConstant;
  
  
  
  static uint64_t DisableAssert;
  
  
  static bool DisableNontoplevelDeclarations;
  
  
  static bool DisableStaticClosures;
  
  
  static bool EnableClassLevelWhereClauses;

  static int GetScannerType();

  static hphp_string_imap<TypedValue> ConstantFunctions;

  static const uint32_t kPCREInitialTableSize = 96 * 1024;

  static std::string ExtensionDir;
  static std::vector<std::string> Extensions;
  static std::string DynamicExtensionPath;
  static std::vector<std::string> DynamicExtensions;

  static std::vector<std::string> TzdataSearchPaths;



















































































































































































































































































































































































































































































































































private:
  using string = std::string;

  
  
  static std::map<std::string, std::string> CustomSettings;

public:

  EVALFLAGS()


  static bool RecordCodeCoverage;
  static std::string CodeCoverageOutputFile;

  
  static RepoMode RepoLocalMode;
  static std::string RepoLocalPath;
  static RepoMode RepoCentralMode;
  static std::string RepoCentralPath;
  static int32_t RepoCentralFileMode;
  static std::string RepoCentralFileUser;
  static std::string RepoCentralFileGroup;
  static bool RepoAllowFallbackPath;
  static std::string RepoJournal;
  static bool RepoCommit;
  static bool RepoDebugInfo;
  static bool RepoAuthoritative;
  static int64_t RepoLocalReadaheadRate;
  static bool RepoLitstrLazyLoad;
  static bool RepoLocalReadaheadConcurrent;
  static uint32_t RepoBusyTimeoutMS;

  
  static bool HHProfEnabled;
  static bool HHProfActive;
  static bool HHProfAccum;
  static bool HHProfRequest;
  static bool TrackPerUnitMemory;

  
  static bool SandboxMode;
  static std::string SandboxPattern;
  static std::string SandboxHome;
  static std::string SandboxFallback;
  static std::string SandboxConfFile;
  static std::map<std::string, std::string> SandboxServerVariables;
  static bool SandboxFromCommonRoot;
  static std::string SandboxDirectoriesRoot;
  static std::string SandboxLogsRoot;
  static std::string SandboxDefaultUserFile;
  static std::string SandboxHostAlias;

  
  static bool EnableHphpdDebugger;
  static bool EnableVSDebugger;
  static int VSDebuggerListenPort;
  static std::string VSDebuggerDomainSocketPath;
  static bool VSDebuggerNoWait;
  static bool EnableDebuggerColor;
  static bool EnableDebuggerPrompt;
  static bool EnableDebuggerServer;
  static bool EnableDebuggerUsageLog;
  static bool DebuggerDisableIPv6;
  static std::string DebuggerServerIP;
  static int DebuggerServerPort;
  static int DebuggerDefaultRpcPort;
  static std::string DebuggerDefaultRpcAuth;
  static std::string DebuggerRpcHostDomain;
  static int DebuggerDefaultRpcTimeout;
  static std::string DebuggerDefaultSandboxPath;
  static std::string DebuggerStartupDocument;
  static int DebuggerSignalTimeout;
  static std::string DebuggerAuthTokenScriptBin;
  static std::string DebuggerSessionAuthScriptBin;

  
  static std::string SendmailPath;
  static std::string MailForceExtraParameters;

  
  static int64_t PregBacktraceLimit;
  static int64_t PregRecursionLimit;
  static bool EnablePregErrorLog;

  
  static bool SimpleXMLEmptyNamespaceMatchesAll;

  
  static bool AllowDuplicateCookies;


  
  static bool EnableFb303Server;
  static int Fb303ServerPort;
  static std::string Fb303ServerIP;
  static int Fb303ServerThreadStackSizeMb;
  static int Fb303ServerWorkerThreads;
  static int Fb303ServerPoolThreads;


  
  static double XenonPeriodSeconds;
  static uint32_t XenonRequestFreq;
  static bool XenonForceAlwaysOn;

  
  static bool StrobelightEnabled;

  static bool SetProfileNullThisObject;
};
static_assert(sizeof(RuntimeOption) == 1, "no instance variables");

using RO = RuntimeOption;

inline bool isJitDeserializing() {
  auto const m = RuntimeOption::EvalJitSerdesMode;
  return static_cast<std::underlying_type<JitSerdesMode>::type>(m) & 0x2;
}

inline bool isJitSerializing() {
  auto const m = RuntimeOption::EvalJitSerdesMode;
  return static_cast<std::underlying_type<JitSerdesMode>::type>(m) & 0x1;
}

inline bool unitPrefetchingEnabled() {
  return RO::EvalUnitPrefetcherMaxThreads > 0;
}


}
