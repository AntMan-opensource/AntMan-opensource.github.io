













namespace HPHP {


Variant HHVM_FUNCTION(dom_import_simplexml, const Object& node);

Variant php_dom_create_object(xmlNodePtr obj, req::ptr<XMLDocumentData> doc);

Object newDOMDocument(bool construct = true);




struct DOMNode {
  ~DOMNode() {
    if (m_node && m_node->getCache()) {
      assertx(Native::data<DOMNode>(m_node->getCache()) == this);
      m_node->clearCache();
    }
  }

  
  DOMNode& operator=(const DOMNode& copy);

  req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }
  XMLNode node() const { return m_node; }
  xmlNodePtr nodep() const {
    return m_node ? m_node->nodep() : nullptr;
  }

  void setDoc(req::ptr<XMLDocumentData>&& doc) {
    assertx(m_node);
    m_node->setDoc(std::move(doc));
  }

  void setNode(XMLNode n) {
    if (m_node) {
      assertx(m_node->getCache() && Native::data<DOMNode>(m_node->getCache()) == this);
      m_node->clearCache();
    }

    m_node = n;
    m_node->setCache(toObject());
  }

  void setNode(xmlNodePtr n) { setNode(libxml_register_node(n)); }

private:
  ObjectData* toObject() {
    return reinterpret_cast<ObjectData*>(this + 1);
  }
  XMLNode m_node {nullptr};
};

Variant save_html_or_xml(DOMNode* obj, bool as_xml, const Object& node = null_object);




struct DOMElement : DOMNode {
  
  Variant sleep() const { return init_null(); }
  void wakeup(const Variant&, ObjectData*) {}
};



struct DOMIterable {
  DOMNode* getBaseNodeData() {
    if (!m_baseobj) {
      throw_null_pointer_exception();
    }

    return Native::data<DOMNode>(m_baseobj);
  }

  req::ptr<XMLDocumentData> m_doc {nullptr};
  Object m_baseobj;
  int m_nodetype;
  xmlHashTable* m_ht {nullptr};
  String m_local;
  String m_ns;
  Array m_baseobjptr;
};




struct DOMNodeIterator {
  void reset_iterator();
  void set_iterator(ObjectData* o, DOMIterable* objmap);
  void setKeyIsNamed() { m_keyIsNamed = true; }

  Object m_o;
  Object m_curobj;
  DOMIterable* m_objmap {nullptr};
  ArrayIter m_iter;
  int m_index {-1};
  bool m_keyIsNamed {false};
};




struct DOMXPath {
  ~DOMXPath() { sweep(); }
  void sweep();
  xmlXPathContextPtr m_node {nullptr};
  Object m_doc;
  Array m_node_list;
  int m_registerPhpFunctions {0};
  Array m_registered_phpfunctions;
};


}

