


 





extern "C" {








	










typedef uint8_t device_name_t[DEVICE_NAME_LEN+1]; 




uint32_t btstack_min(uint32_t a, uint32_t b);


uint32_t btstack_max(uint32_t a, uint32_t b);


int32_t btstack_time_delta(uint32_t time_a, uint32_t time_b);


int16_t btstack_time16_delta(uint16_t time_a, uint16_t time_b);


uint16_t little_endian_read_16(const uint8_t * buffer, int position);
uint32_t little_endian_read_24(const uint8_t * buffer, int position);
uint32_t little_endian_read_32(const uint8_t * buffer, int position);


void little_endian_store_16(uint8_t * buffer, uint16_t position, uint16_t value);
void little_endian_store_24(uint8_t * buffer, uint16_t position, uint32_t value);
void little_endian_store_32(uint8_t * buffer, uint16_t position, uint32_t value);


uint32_t big_endian_read_16(const uint8_t * buffer, int position);
uint32_t big_endian_read_24(const uint8_t * buffer, int position);
uint32_t big_endian_read_32(const uint8_t * buffer, int position);


void big_endian_store_16(uint8_t * buffer, uint16_t position, uint16_t value);
void big_endian_store_24(uint8_t * buffer, uint16_t position, uint32_t value);
void big_endian_store_32(uint8_t * buffer, uint16_t position, uint32_t value);



static inline uint16_t btstack_flip_16(uint16_t value){
    return (uint16_t)((value & 0xffu) << 8) | (value >> 8);
}


static inline int btstack_is_big_endian(void){
	uint16_t sample = 0x0100;
	return (int) *(uint8_t*) &sample;
}


static inline int btstack_is_little_endian(void){
	uint16_t sample = 0x0001;
	return (int) *(uint8_t*) &sample;
}


void reverse_bytes(const uint8_t * src, uint8_t * dest, int len);


void reverse_24 (const uint8_t * src, uint8_t * dest);
void reverse_48 (const uint8_t * src, uint8_t * dest);
void reverse_56 (const uint8_t * src, uint8_t * dest);
void reverse_64 (const uint8_t * src, uint8_t * dest);
void reverse_128(const uint8_t * src, uint8_t * dest);
void reverse_256(const uint8_t * src, uint8_t * dest);

void reverse_bd_addr(const bd_addr_t src, bd_addr_t dest);


bool btstack_is_null(const uint8_t * buffer, uint16_t size);


bool btstack_is_null_bd_addr( const bd_addr_t addr );


char char_for_nibble(int nibble);


int nibble_for_char(char c);


int bd_addr_cmp(const bd_addr_t a, const bd_addr_t b);


void bd_addr_copy(bd_addr_t dest, const bd_addr_t src);


void printf_hexdump(const void * data, int size);


char * uuid128_to_str(const uint8_t * uuid);


char * bd_addr_to_str_with_delimiter(const bd_addr_t addr, char delimiter);


char * bd_addr_to_str(const bd_addr_t addr);


void btstack_replace_bd_addr_placeholder(uint8_t * buffer, uint16_t size, const bd_addr_t address);


int sscanf_bd_addr(const char * addr_string, bd_addr_t addr);


void uuid_add_bluetooth_prefix(uint8_t * uuid128, uint32_t short_uuid);


int  uuid_has_bluetooth_prefix(const uint8_t * uuid128);


uint32_t btstack_atoi(const char * str);


int string_len_for_uint32(uint32_t i);


int count_set_bits_uint32(uint32_t x);


uint8_t btstack_crc8_check(uint8_t * data, uint16_t len, uint8_t check_sum);


uint8_t btstack_crc8_calc(uint8_t * data, uint16_t len);


uint16_t btstack_next_cid_ignoring_zero(uint16_t current_cid);


uint16_t btstack_strcpy(char * dst, uint16_t dst_size, const char * src);


void btstack_strcat(char * dst, uint16_t dst_size, const char * src);


uint8_t btstack_clz(uint32_t value);


uint16_t btstack_virtual_memcpy( const uint8_t * field_data, uint16_t field_len, uint16_t field_offset, uint8_t * buffer, uint16_t buffer_size, uint16_t buffer_offset);






}

		

