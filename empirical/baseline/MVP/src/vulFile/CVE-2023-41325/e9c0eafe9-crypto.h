










TEE_Result crypto_init(void);


TEE_Result crypto_hash_alloc_ctx(void **ctx, uint32_t algo);
TEE_Result crypto_hash_init(void *ctx);
TEE_Result crypto_hash_update(void *ctx, const uint8_t *data, size_t len);
TEE_Result crypto_hash_final(void *ctx, uint8_t *digest, size_t len);
void crypto_hash_free_ctx(void *ctx);
void crypto_hash_copy_state(void *dst_ctx, void *src_ctx);


TEE_Result crypto_cipher_alloc_ctx(void **ctx, uint32_t algo);
TEE_Result crypto_cipher_init(void *ctx, TEE_OperationMode mode, const uint8_t *key1, size_t key1_len, const uint8_t *key2, size_t key2_len, const uint8_t *iv, size_t iv_len);


TEE_Result crypto_cipher_update(void *ctx, TEE_OperationMode mode, bool last_block, const uint8_t *data, size_t len, uint8_t *dst);

void crypto_cipher_final(void *ctx);
TEE_Result crypto_cipher_get_block_size(uint32_t algo, size_t *size);
void crypto_cipher_free_ctx(void *ctx);
void crypto_cipher_copy_state(void *dst_ctx, void *src_ctx);


TEE_Result crypto_mac_alloc_ctx(void **ctx, uint32_t algo);
TEE_Result crypto_mac_init(void *ctx, const uint8_t *key, size_t len);
TEE_Result crypto_mac_update(void *ctx, const uint8_t *data, size_t len);
TEE_Result crypto_mac_final(void *ctx, uint8_t *digest, size_t digest_len);
void crypto_mac_free_ctx(void *ctx);
void crypto_mac_copy_state(void *dst_ctx, void *src_ctx);


TEE_Result crypto_authenc_alloc_ctx(void **ctx, uint32_t algo);
TEE_Result crypto_authenc_init(void *ctx, TEE_OperationMode mode, const uint8_t *key, size_t key_len, const uint8_t *nonce, size_t nonce_len, size_t tag_len, size_t aad_len, size_t payload_len);



TEE_Result crypto_authenc_update_aad(void *ctx, TEE_OperationMode mode, const uint8_t *data, size_t len);
TEE_Result crypto_authenc_update_payload(void *ctx, TEE_OperationMode mode, const uint8_t *src_data, size_t src_len, uint8_t *dst_data, size_t *dst_len);


TEE_Result crypto_authenc_enc_final(void *ctx, const uint8_t *src_data, size_t src_len, uint8_t *dst_data, size_t *dst_len, uint8_t *dst_tag, size_t *dst_tag_len);


TEE_Result crypto_authenc_dec_final(void *ctx, const uint8_t *src_data, size_t src_len, uint8_t *dst_data, size_t *dst_len, const uint8_t *tag, size_t tag_len);


void crypto_authenc_final(void *ctx);
void crypto_authenc_free_ctx(void *ctx);
void crypto_authenc_copy_state(void *dst_ctx, void *src_ctx);


TEE_Result crypto_storage_obj_del(struct tee_obj *obj);




struct bignum *crypto_bignum_allocate(size_t size_bits);
TEE_Result crypto_bignum_bin2bn(const uint8_t *from, size_t fromsize, struct bignum *to);
size_t crypto_bignum_num_bytes(struct bignum *a);
size_t crypto_bignum_num_bits(struct bignum *a);
void crypto_bignum_bn2bin(const struct bignum *from, uint8_t *to);
void crypto_bignum_copy(struct bignum *to, const struct bignum *from);
void crypto_bignum_free(struct bignum *a);
void crypto_bignum_clear(struct bignum *a);


int32_t crypto_bignum_compare(struct bignum *a, struct bignum *b);



struct rsa_keypair {
	struct bignum *e;	
	struct bignum *d;	
	struct bignum *n;	

	
	struct bignum *p;	
	struct bignum *q;
	struct bignum *qp;	
	struct bignum *dp;	
	struct bignum *dq;	
};

struct rsa_public_key {
	struct bignum *e;	
	struct bignum *n;	
};

struct dsa_keypair {
	struct bignum *g;	
	struct bignum *p;	
	struct bignum *q;	
	struct bignum *y;	
	struct bignum *x;	
};

struct dsa_public_key {
	struct bignum *g;	
	struct bignum *p;	
	struct bignum *q;	
	struct bignum *y;	
};

struct dh_keypair {
	struct bignum *g;	
	struct bignum *p;	
	struct bignum *x;	
	struct bignum *y;	

	
	struct bignum *q;	
	uint32_t xbits;		
};

struct ecc_public_key {
	struct bignum *x;	
	struct bignum *y;	
	uint32_t curve;	        
	const struct crypto_ecc_public_ops *ops; 
};

struct ecc_keypair {
	struct bignum *d;	
	struct bignum *x;	
	struct bignum *y;	
	uint32_t curve;	        
	const struct crypto_ecc_keypair_ops *ops; 
};

struct x25519_keypair {
	uint8_t *priv;	
	uint8_t *pub;	
};

struct ed25519_keypair {
	uint8_t *priv;
	uint8_t *pub;
	uint32_t curve;
};

struct ed25519_public_key {
	uint8_t *pub;
	uint32_t curve;
};


TEE_Result crypto_acipher_alloc_rsa_keypair(struct rsa_keypair *s, size_t key_size_bits);
TEE_Result crypto_acipher_alloc_rsa_public_key(struct rsa_public_key *s, size_t key_size_bits);
void crypto_acipher_free_rsa_public_key(struct rsa_public_key *s);
void crypto_acipher_free_rsa_keypair(struct rsa_keypair *s);
TEE_Result crypto_acipher_alloc_dsa_keypair(struct dsa_keypair *s, size_t key_size_bits);
TEE_Result crypto_acipher_alloc_dsa_public_key(struct dsa_public_key *s, size_t key_size_bits);
TEE_Result crypto_acipher_alloc_dh_keypair(struct dh_keypair *s, size_t key_size_bits);
TEE_Result crypto_acipher_alloc_ecc_public_key(struct ecc_public_key *s, uint32_t key_type, size_t key_size_bits);

TEE_Result crypto_acipher_alloc_ecc_keypair(struct ecc_keypair *s, uint32_t key_type, size_t key_size_bits);

void crypto_acipher_free_ecc_public_key(struct ecc_public_key *s);
TEE_Result crypto_acipher_alloc_x25519_keypair(struct x25519_keypair *s, size_t key_size_bits);
TEE_Result crypto_acipher_alloc_ed25519_keypair(struct ed25519_keypair *s, size_t key_size_bits);
TEE_Result crypto_acipher_alloc_ed25519_public_key(struct ed25519_public_key *key, size_t key_size);



TEE_Result crypto_acipher_gen_rsa_key(struct rsa_keypair *key, size_t key_size);
TEE_Result crypto_acipher_gen_dsa_key(struct dsa_keypair *key, size_t key_size);
TEE_Result crypto_acipher_gen_dh_key(struct dh_keypair *key, struct bignum *q, size_t xbits, size_t key_size);
TEE_Result crypto_acipher_gen_ecc_key(struct ecc_keypair *key, size_t key_size);
TEE_Result crypto_acipher_gen_x25519_key(struct x25519_keypair *key, size_t key_size);
TEE_Result crypto_acipher_gen_ed25519_key(struct ed25519_keypair *key, size_t key_size);
TEE_Result crypto_acipher_ed25519_sign(struct ed25519_keypair *key, const uint8_t *msg, size_t msg_len, uint8_t *sig, size_t *sig_len);

TEE_Result crypto_acipher_ed25519ctx_sign(struct ed25519_keypair *key, const uint8_t *msg, size_t msg_len, uint8_t *sig, size_t *sig_len, bool ph_flag, const uint8_t *ctx, size_t ctxlen);



TEE_Result crypto_acipher_ed25519_verify(struct ed25519_public_key *key, const uint8_t *msg, size_t msg_len, const uint8_t *sig, size_t sig_len);

TEE_Result crypto_acipher_ed25519ctx_verify(struct ed25519_public_key *key, const uint8_t *msg, size_t msg_len, const uint8_t *sig, size_t sig_len, bool ph_flag, const uint8_t *ctx, size_t ctxlen);




TEE_Result crypto_acipher_dh_shared_secret(struct dh_keypair *private_key, struct bignum *public_key, struct bignum *secret);


TEE_Result crypto_acipher_rsanopad_decrypt(struct rsa_keypair *key, const uint8_t *src, size_t src_len, uint8_t *dst, size_t *dst_len);

TEE_Result crypto_acipher_rsanopad_encrypt(struct rsa_public_key *key, const uint8_t *src, size_t src_len, uint8_t *dst, size_t *dst_len);

TEE_Result crypto_acipher_rsaes_decrypt(uint32_t algo, struct rsa_keypair *key, const uint8_t *label, size_t label_len, const uint8_t *src, size_t src_len, uint8_t *dst, size_t *dst_len);


TEE_Result crypto_acipher_rsaes_encrypt(uint32_t algo, struct rsa_public_key *key, const uint8_t *label, size_t label_len, const uint8_t *src, size_t src_len, uint8_t *dst, size_t *dst_len);




TEE_Result crypto_acipher_rsassa_sign(uint32_t algo, struct rsa_keypair *key, int salt_len, const uint8_t *msg, size_t msg_len, uint8_t *sig, size_t *sig_len);


TEE_Result crypto_acipher_rsassa_verify(uint32_t algo, struct rsa_public_key *key, int salt_len, const uint8_t *msg, size_t msg_len, const uint8_t *sig, size_t sig_len);



TEE_Result crypto_acipher_dsa_sign(uint32_t algo, struct dsa_keypair *key, const uint8_t *msg, size_t msg_len, uint8_t *sig, size_t *sig_len);

TEE_Result crypto_acipher_dsa_verify(uint32_t algo, struct dsa_public_key *key, const uint8_t *msg, size_t msg_len, const uint8_t *sig, size_t sig_len);

TEE_Result crypto_acipher_ecc_sign(uint32_t algo, struct ecc_keypair *key, const uint8_t *msg, size_t msg_len, uint8_t *sig, size_t *sig_len);

TEE_Result crypto_acipher_ecc_verify(uint32_t algo, struct ecc_public_key *key, const uint8_t *msg, size_t msg_len, const uint8_t *sig, size_t sig_len);

TEE_Result crypto_acipher_ecc_shared_secret(struct ecc_keypair *private_key, struct ecc_public_key *public_key, void *secret, unsigned long *secret_len);


TEE_Result crypto_acipher_sm2_pke_decrypt(struct ecc_keypair *key, const uint8_t *src, size_t src_len, uint8_t *dst, size_t *dst_len);

TEE_Result crypto_acipher_sm2_pke_encrypt(struct ecc_public_key *key, const uint8_t *src, size_t src_len, uint8_t *dst, size_t *dst_len);

TEE_Result crypto_acipher_x25519_shared_secret(struct x25519_keypair *private_key, void *public_key, void *secret, unsigned long *secret_len);



struct sm2_kep_parms {
	uint8_t *out;
	size_t out_len;
	bool is_initiator;
	const uint8_t *initiator_id;
	size_t initiator_id_len;
	const uint8_t *responder_id;
	size_t responder_id_len;
	const uint8_t *conf_in;
	size_t conf_in_len;
	uint8_t *conf_out;
	size_t conf_out_len;
};

TEE_Result crypto_acipher_sm2_kep_derive(struct ecc_keypair *my_key, struct ecc_keypair *my_eph_key, struct ecc_public_key *peer_key, struct ecc_public_key *peer_eph_key, struct sm2_kep_parms *p);





TEE_Result hash_sha256_check(const uint8_t *hash, const uint8_t *data, size_t data_size);


TEE_Result hash_sha512_256_compute(uint8_t *digest, const uint8_t *data, size_t data_size);




enum crypto_rng_src {
	CRYPTO_RNG_SRC_JITTER_SESSION	= (0 << 1 | 0), CRYPTO_RNG_SRC_JITTER_RPC	= (1 << 1 | 1), CRYPTO_RNG_SRC_NONSECURE	= (1 << 1 | 0), };




TEE_Result crypto_rng_init(const void *data, size_t dlen);


void crypto_rng_add_event(enum crypto_rng_src sid, unsigned int *pnum, const void *data, size_t dlen);


TEE_Result crypto_rng_read(void *buf, size_t len);


TEE_Result crypto_aes_expand_enc_key(const void *key, size_t key_len, void *enc_key, size_t enc_keylen, unsigned int *rounds);



void crypto_aes_enc_block(const void *enc_key, size_t enc_keylen, unsigned int rounds, const void *src, void *dst);


