













struct Account;
struct ConnAccount;
struct Email;
struct Mailbox;
struct Message;
struct Progress;




















typedef uint8_t ImapOpenFlags;         







typedef uint8_t ImapCmdFlags;          






enum ImapExecResult {
  IMAP_EXEC_SUCCESS = 0,  IMAP_EXEC_ERROR, IMAP_EXEC_FATAL, };







enum ImapFlags {
  IMAP_FATAL = 1,  IMAP_BYE, };



enum ImapState {
  
  IMAP_DISCONNECTED = 0,  IMAP_CONNECTED, IMAP_AUTHENTICATED, IMAP_SELECTED,   IMAP_IDLE, };








typedef uint32_t ImapCapFlags;              
























struct ImapList {
  char *name;
  char delim;
  bool noselect;
  bool noinferiors;
};


struct ImapCommand {
  char seq[SEQ_LEN + 1]; 
  int state;            
};


struct ImapAccountData {
  struct Connection *conn;
  bool recovering;
  bool closing; 
  unsigned char state;  
  unsigned char status; 
  
  char *capstr;
  ImapCapFlags capabilities;
  unsigned char seqid; 
  unsigned int seqno; 
  time_t lastread; 
  char *buf;
  size_t blen;

  bool unicode; 
  bool qresync; 

  
  struct ImapList *cmdresult;

  
  struct ImapCommand *cmds;
  int cmdslots;
  int nextcmd;
  int lastcmd;
  struct Buffer cmdbuf;

  char delim;
  struct Mailbox *mailbox;      
  struct Mailbox *prev_mailbox; 
  struct Account *account;      
};


struct ImapMboxData {
  char *name;        
  char *munge_name;  
  char *real_name;   

  ImapOpenFlags reopen;        
  ImapOpenFlags check_status;  
  unsigned int new_mail_count; 

  
  struct ListHead flags;
  uint32_t uidvalidity;
  unsigned int uid_next;
  unsigned long long modseq;
  unsigned int messages;
  unsigned int recent;
  unsigned int unseen;

  
  struct HashTable *uid_hash;
  struct Email **msn_index;   
  size_t msn_index_size;       
  unsigned int max_msn;        
  struct BodyCache *bcache;

  header_cache_t *hcache;
};


struct SeqsetIterator {
  char *full_seqset;
  char *eostr;
  int in_range;
  int down;
  unsigned int range_cur;
  unsigned int range_end;
  char *substr_cur;
  char *substr_end;
};



int imap_create_mailbox(struct ImapAccountData *adata, char *mailbox);
int imap_rename_mailbox(struct ImapAccountData *adata, char *oldname, const char *newname);
int imap_exec_msgset(struct Mailbox *m, const char *pre, const char *post, int flag, bool changed, bool invert);
int imap_open_connection(struct ImapAccountData *adata);
void imap_close_connection(struct ImapAccountData *adata);
int imap_read_literal(FILE *fp, struct ImapAccountData *adata, unsigned long bytes, struct Progress *pbar);
void imap_expunge_mailbox(struct Mailbox *m);
int imap_login(struct ImapAccountData *adata);
int imap_sync_message_for_copy(struct Mailbox *m, struct Email *e, struct Buffer *cmd, enum QuadOption *err_continue);
bool imap_has_flag(struct ListHead *flag_list, const char *flag);
int imap_adata_find(const char *path, struct ImapAccountData **adata, struct ImapMboxData **mdata);


int imap_authenticate(struct ImapAccountData *adata);


int imap_cmd_start(struct ImapAccountData *adata, const char *cmdstr);
int imap_cmd_step(struct ImapAccountData *adata);
void imap_cmd_finish(struct ImapAccountData *adata);
bool imap_code(const char *s);
const char *imap_cmd_trailer(struct ImapAccountData *adata);
int imap_exec(struct ImapAccountData *adata, const char *cmdstr, ImapCmdFlags flags);
int imap_cmd_idle(struct ImapAccountData *adata);


void imap_edata_free(void **ptr);
struct ImapEmailData *imap_edata_get(struct Email *e);
int imap_read_headers(struct Mailbox *m, unsigned int msn_begin, unsigned int msn_end, bool initial_download);
char *imap_set_flags(struct Mailbox *m, struct Email *e, char *s, bool *server_changes);
int imap_cache_del(struct Mailbox *m, struct Email *e);
int imap_cache_clean(struct Mailbox *m);
int imap_append_message(struct Mailbox *m, struct Message *msg);

int imap_msg_open(struct Mailbox *m, struct Message *msg, int msgno);
int imap_msg_close(struct Mailbox *m, struct Message *msg);
int imap_msg_commit(struct Mailbox *m, struct Message *msg);
int imap_msg_save_hcache(struct Mailbox *m, struct Email *e);


struct ImapAccountData *imap_adata_get(struct Mailbox *m);
struct ImapMboxData *imap_mdata_get(struct Mailbox *m);

header_cache_t *imap_hcache_open(struct ImapAccountData *adata, struct ImapMboxData *mdata);
void imap_hcache_close(struct ImapMboxData *mdata);
struct Email *imap_hcache_get(struct ImapMboxData *mdata, unsigned int uid);
int imap_hcache_put(struct ImapMboxData *mdata, struct Email *e);
int imap_hcache_del(struct ImapMboxData *mdata, unsigned int uid);
int imap_hcache_store_uid_seqset(struct ImapMboxData *mdata);
int imap_hcache_clear_uid_seqset(struct ImapMboxData *mdata);
char *imap_hcache_get_uid_seqset(struct ImapMboxData *mdata);


enum QuadOption imap_continue(const char *msg, const char *resp);
void imap_error(const char *where, const char *msg);
struct ImapAccountData *imap_adata_new(struct Account *a);
void imap_adata_free(void **ptr);
struct ImapMboxData *imap_mdata_new(struct ImapAccountData *adata, const char* name);
void imap_mdata_free(void **ptr);
void imap_mdata_cache_reset(struct ImapMboxData *mdata);
char *imap_fix_path(char delim, const char *mailbox, char *path, size_t plen);
void imap_cachepath(char delim, const char *mailbox, struct Buffer *dest);
int imap_get_literal_count(const char *buf, unsigned int *bytes);
char *imap_get_qualifier(char *buf);
char *imap_next_word(char *s);
void imap_qualify_path(char *buf, size_t buflen, struct ConnAccount *conn_account, char *path);
void imap_quote_string(char *dest, size_t dlen, const char *src, bool quote_backtick);
void imap_unquote_string(char *s);
void imap_munge_mbox_name(bool unicode, char *dest, size_t dlen, const char *src);
void imap_unmunge_mbox_name(bool unicode, char *s);
struct SeqsetIterator *mutt_seqset_iterator_new(const char *seqset);
int mutt_seqset_iterator_next(struct SeqsetIterator *iter, unsigned int *next);
void mutt_seqset_iterator_free(struct SeqsetIterator **ptr);
bool imap_account_match(const struct ConnAccount *a1, const struct ConnAccount *a2);
void imap_get_parent(const char *mbox, char delim, char *buf, size_t buflen);
bool  mutt_account_match(const struct ConnAccount *a1, const struct ConnAccount *a2);


void imap_utf_encode(bool unicode, char **s);
void imap_utf_decode(bool unicode, char **s);
void imap_allow_reopen(struct Mailbox *m);
void imap_disallow_reopen(struct Mailbox *m);


void cmd_parse_search(struct ImapAccountData *adata, const char *s);


