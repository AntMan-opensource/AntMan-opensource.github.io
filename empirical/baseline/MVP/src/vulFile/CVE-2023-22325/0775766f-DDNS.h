














































































struct DDNS_CLIENT {
	CEDAR *Cedar;							
	THREAD *Thread;							
	UCHAR Key[SHA1_SIZE];					
	LOCK *Lock;								
	volatile bool Halt;						
	EVENT *Event;							
	char CurrentHostName[DDNS_MAX_HOSTNAME + 1];	
	char CurrentFqdn[MAX_SIZE];				
	char DnsSuffix[MAX_SIZE];				
	char CurrentIPv4[MAX_SIZE];				
	char CurrentIPv6[MAX_SIZE];				
	UINT Err_IPv4, Err_IPv6;				
	UINT Err_IPv4_GetMyIp, Err_IPv6_GetMyIp;	
	bool KeyChanged;						
	char LastMyIPv4[MAX_SIZE];				
	char LastMyIPv6[MAX_SIZE];				
	char CurrentAzureIp[MAX_SIZE];			
	UINT64 CurrentAzureTimestamp;			
	char CurrentAzureSignature[MAX_SIZE];	
	char AzureCertHash[MAX_SIZE];			
	INTERNET_SETTING InternetSetting;		

	UINT64 NextRegisterTick_IPv4, NextRegisterTick_IPv6;		
	UINT64 NextGetMyIpTick_IPv4, NextGetMyIpTick_IPv6;			
};


struct DDNS_REGISTER_PARAM {
	char NewHostname[DDNS_MAX_HOSTNAME + 1];	
};


struct DDNS_CLIENT_STATUS {
	UINT Err_IPv4, Err_IPv6;				
	wchar_t ErrStr_IPv4[MAX_SIZE];
	wchar_t ErrStr_IPv6[MAX_SIZE];
	char CurrentHostName[DDNS_MAX_HOSTNAME + 1];	
	char CurrentFqdn[MAX_SIZE];				
	char DnsSuffix[MAX_SIZE];				
	char CurrentIPv4[MAX_SIZE];				
	char CurrentIPv6[MAX_SIZE];				
	char CurrentAzureIp[MAX_SIZE];			
	UINT64 CurrentAzureTimestamp;			
	char CurrentAzureSignature[MAX_SIZE];	
	char AzureCertHash[MAX_SIZE];			
	INTERNET_SETTING InternetSetting;		
};


DDNS_CLIENT *NewDDNSClient(CEDAR *cedar, UCHAR *key, INTERNET_SETTING *t);
void FreeDDNSClient(DDNS_CLIENT *c);
void DCGenNewKey(UCHAR *key);
void DCThread(THREAD *thread, void *param);
UINT DCRegister(DDNS_CLIENT *c, bool ipv6, DDNS_REGISTER_PARAM *p, char *replace_v6);
UINT DCGetMyIpMain(DDNS_CLIENT *c, bool ipv6, char *dst, UINT dst_size, bool use_ssl, char *replace_v6);
UINT DCGetMyIp(DDNS_CLIENT *c, bool ipv6, char *dst, UINT dst_size, char *replace_v6);
void DCGetStatus(DDNS_CLIENT *c, DDNS_CLIENT_STATUS *st);
UINT DCChangeHostName(DDNS_CLIENT *c, char *hostname);
void DCSetInternetSetting(DDNS_CLIENT *c, INTERNET_SETTING *t);
void DCGetInternetSetting(DDNS_CLIENT *c, INTERNET_SETTING *t);






