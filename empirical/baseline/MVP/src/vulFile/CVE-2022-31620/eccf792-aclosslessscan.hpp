













class Frame;
class LineCtrl;
class ByteStream;
class LineBitmapRequester;
class LineBuffer;
class BitmaCtrl;
class Scan;





class ACLosslessScan : public PredictiveScan {
  

  
  class LineBuffer          *m_pLineCtrl;
  
  
  UBYTE                      m_ucSmall[4];
  
  
  UBYTE                      m_ucLarge[4];
  
  
  UBYTE                      m_ucContext[4];
  
  
  
  LONG                      *m_plDa[4];
  LONG                      *m_plDb[4];
  
  
  class QMCoder              m_Coder;
  
  
  struct QMContextSet {
    
    
    struct ContextZeroSet {
      QMContext S0,SS,SP,SN;
      
      void Init(void)
      {
        S0.Init();
        SS.Init();
        SP.Init();
        SN.Init();
      }
    } SignZeroCoding[5][5];
    
    
    struct MagnitudeSet {
      QMContext X[15];
      QMContext M[15];
      
      void Init(void)
      {
        for(int i = 0;i < 15;i++) {
          X[i].Init();
          M[i].Init();
        }
      }
    } MagnitudeLow,MagnitudeHigh;
    
    void Init(void)
    {
      for(int i = 0;i <5;i++) {
        for(int j = 0;j < 5;j++) {
          SignZeroCoding[i][j].Init();
        }
      }
      MagnitudeLow.Init();
      MagnitudeHigh.Init();
    }
    
    
    
    struct ContextZeroSet &ClassifySignZero(LONG Da,LONG Db,UBYTE l,UBYTE u)
    {
      return SignZeroCoding[Classify(Da,l,u) + 2][Classify(Db,l,u) + 2];
    }
    
    
    struct MagnitudeSet &ClassifyMagnitude(LONG Db,UBYTE u)
    {
      if (Db > (1 << u) || -Db > (1 << u)) {
        return MagnitudeHigh;
      } else {
        return MagnitudeLow;
      }
    }
    
    
    static int Classify(LONG diff,UBYTE l,UBYTE u)
    {
      LONG abs = (diff > 0)?(diff):(-diff);
  
      if (abs <= ((1 << l) >> 1)) {
        
        return 0;
      }
      if (abs <= (1 << u)) {
        if (diff < 0) {
          return -1;
        } else {
          return 1;
        }
      }
      if (diff < 0) {
        return -2;
      } else {
        return 2;
      }
    }
    
  } m_Context[4];
  
  
  void FindComponentDimensions(void);
  

  
  
  void ParseMCU(struct Line **prev,struct Line **top);
  
  
  
  void WriteMCU(struct Line **prev,struct Line **top);
  
  
  virtual void Flush(bool final); 
  
  
  virtual void Restart(void);
  
  
public:
  ACLosslessScan(class Frame *frame,class Scan *scan,UBYTE predictor,UBYTE lobit, bool differential = false);
  
  virtual ~ACLosslessScan(void);
  
  
  virtual void WriteFrameType(class ByteStream *io);
  
  
  virtual void StartParseScan(class ByteStream *io,class Checksum *chk,class BufferCtrl *ctrl);
  
  
  virtual void StartWriteScan(class ByteStream *io,class Checksum *chk,class BufferCtrl *ctrl);
  
  
  virtual void StartMeasureScan(class BufferCtrl *ctrl);
  
  
  
  
  
  virtual bool StartMCURow(void);
  
  
  
  virtual bool ParseMCU(void);
  
  
  virtual bool WriteMCU(void);  
};





