













class Tables;
class ByteStream;
class DCT;
class Frame;
struct RectangleRequest;
class BitmapCtrl;
class LineAdapter;
class BufferCtrl;
class BlockBuffer;
class BlockCtrl;



class ACSequentialScan : public EntropyParser {
  

  
  
  class QMCoder            m_Coder;
  
  
  LONG                     m_lDC[4];
  
  
  
  LONG                     m_lDiff[4];
  
  
  struct QMContextSet {
    
    
    struct DCContextZeroSet {
      QMContext S0,SS,SP,SN;
      
      

      void Init(const char *base)
      {
        char string[5] = "Z0S0";
        memcpy(string,base,2);
        S0.Init(string);
        string[3] = 'S';
        SS.Init(string);
        string[3] = 'P';
        SP.Init(string);
        string[3] = 'N';
        SN.Init(string);
      }

      void Init(void)
      {
        S0.Init();
        SS.Init();
        SP.Init();
        SN.Init();
      }

      
    } DCZero,DCSmallPositive,DCSmallNegative,DCLargePositive,DCLargeNegative;
    
    
    struct DCContextMagnitudeSet {
      QMContext X[19];
      QMContext M[19];
      
      
      void Init(void)
      {
        for(int i = 0;i < 19;i++) {

          char string[5] = "X0  ";
          string[1] = (i / 10) + '0';
          string[2] = (i % 10) + '0';
          X[i].Init(string);
          string[0] = 'M';
          M[i].Init(string);

          X[i].Init();
          M[i].Init();

        }
      }
    } DCMagnitude;
    
    
    struct ACContextZeroSet {
      QMContext SE,S0,SP;
      
      

      void Init(int i)
      {
        char string[5] = "se00";
        string[2] = (i / 10) + '0';
        string[3] = (i % 10) + '0';
        SE.Init(string);
        string[1] = '0';
        S0.Init(string);
        string[1] = 'p';
        SP.Init(string);
      }

      void Init(void)
      {
        SE.Init();
        S0.Init();
        SP.Init();
      }

    } ACZero[63];
    
    
    struct ACContextMagnitudeSet {
      QMContext X[18];
      QMContext M[18];
      


      void Init(bool hi) 
      {
        for(int i = 0;i < 18;i++) {
          char string[5] = "xl00";
          string[1] = (hi)?('h'):('l');
          string[2] = (i / 10) + '0';
          string[3] = (i % 10) + '0';
          X[i].Init(string);
          string[0] = 'm';
          M[i].Init(string);
        }
      }

      void Init(void)
      {
        for(int i = 0;i < 18;i++) {
          X[i].Init();
          M[i].Init();
        }
      }

    } ACMagnitudeLow,ACMagnitudeHigh; 
    
    
    QMContext Uniform;
    
    
    void Init(void)
    {

      DCZero.Init("Z0");
      DCSmallPositive.Init("L+");
      DCSmallNegative.Init("L-");
      DCLargePositive.Init("U+");
      DCLargeNegative.Init("U-");      

      DCZero.Init();
      DCSmallPositive.Init();
      DCSmallNegative.Init();
      DCLargePositive.Init();
      DCLargeNegative.Init();

      DCMagnitude.Init();
      DCMagnitude.Init();
      for(int i = 0;i < 63;i++) {

        ACZero[i].Init(i);

        ACZero[i].Init();

      }

      ACMagnitudeLow.Init(false);
      ACMagnitudeHigh.Init(true);

      ACMagnitudeLow.Init();
      ACMagnitudeHigh.Init();


      Uniform.Init(QMCoder::Uniform_State,"uni ");

      Uniform.Init(QMCoder::Uniform_State);

    }  
    
    
    struct DCContextZeroSet &Classify(LONG diff,UBYTE l,UBYTE u);
    
  } m_Context[4];
  
  
protected:
  
  
  
  class BlockCtrl            *m_pBlockCtrl;
  
  
  ULONG                       m_ulX[4];
  
  
  UBYTE                       m_ucScanStart;
  UBYTE                       m_ucScanStop;
  UBYTE                       m_ucLowBit; 
  
  
  
  
  UBYTE                       m_ucDCContext[4];
  UBYTE                       m_ucACContext[4];
  
  
  UBYTE                       m_ucSmall[4];
  
  
  UBYTE                       m_ucLarge[4];
  
  
  UBYTE                       m_ucBlockEnd[4]; 
  
  
  
  
  bool                        m_bMeasure;
  
  
  bool                        m_bDifferential;
  
  
  bool                        m_bResidual;
  
  
  bool                        m_bLargeRange;
  
  
  void EncodeBlock(const LONG *block, LONG &prevdc,LONG &prevdiff, UBYTE small,UBYTE large,UBYTE blockup, UBYTE dctable,UBYTE actable);


  
  
  void DecodeBlock(LONG *block, LONG &prevdc,LONG &prevdiff, UBYTE small,UBYTE large,UBYTE blockup, UBYTE dctable,UBYTE actable);


  

  
  
  virtual void Flush(bool final);
  
  
  virtual void Restart(void);
  
private:
  
  
  virtual void WriteFrameType(class ByteStream *io);
  
  
public:
  
  
  ACSequentialScan(class Frame *frame,class Scan *scan,UBYTE start,UBYTE stop, UBYTE lowbit,UBYTE highbit, bool differential = false,bool residual = false,bool largerange = false);

  
  ~ACSequentialScan(void);
  
  
  virtual void StartParseScan(class ByteStream *io,class Checksum *chk,class BufferCtrl *ctrl);
  
  
  virtual void StartWriteScan(class ByteStream *io,class Checksum *chk,class BufferCtrl *ctrl);
  
  
  
  virtual void StartMeasureScan(class BufferCtrl *ctrl);
  
  
  virtual void StartOptimizeScan(class BufferCtrl *ctrl);
  
  
  virtual bool StartMCURow(void);
  
  
  
  virtual bool ParseMCU(void);  
  
  
  virtual bool WriteMCU(void);
  
  
  
  virtual void OptimizeBlock(LONG bx,LONG by,UBYTE component,double critical, class DCT *dct,LONG quantized[64]);
  
  
  
  
  virtual void OptimizeDC(void);
};





