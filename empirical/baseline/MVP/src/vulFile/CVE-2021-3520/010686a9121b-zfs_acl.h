
















extern "C" {


struct znode_phys;









typedef struct zfs_ace_hdr {
	uint16_t z_type;
	uint16_t z_flags;
	uint32_t z_access_mask;
} zfs_ace_hdr_t;

typedef zfs_ace_hdr_t zfs_ace_abstract_t;


typedef struct zfs_ace {
	zfs_ace_hdr_t	z_hdr;
	uint64_t	z_fuid;
} zfs_ace_t;



typedef struct zfs_object_ace {
	zfs_ace_t	z_ace;
	uint8_t		z_object_type[16]; 
	uint8_t		z_inherit_type[16]; 
} zfs_object_ace_t;

typedef struct zfs_oldace {
	uint32_t	z_fuid;		
	uint32_t	z_access_mask;  
	uint16_t	z_flags;	
	uint16_t	z_type;		
} zfs_oldace_t;

typedef struct zfs_acl_phys_v0 {
	uint64_t	z_acl_extern_obj;	
	uint32_t	z_acl_count;		
	uint16_t	z_acl_version;		
	uint16_t	z_acl_pad;		
	zfs_oldace_t	z_ace_data[ACE_SLOT_CNT]; 
} zfs_acl_phys_v0_t;






typedef struct zfs_acl_phys {
	uint64_t	z_acl_extern_obj;	  
	uint32_t	z_acl_size;		  
	uint16_t	z_acl_version;		  
	uint16_t	z_acl_count;		  
	uint8_t	z_ace_data[ZFS_ACE_SPACE]; 
} zfs_acl_phys_t;

typedef struct acl_ops {
	uint32_t	(*ace_mask_get) (void *acep); 
	void 		(*ace_mask_set) (void *acep, uint32_t mask);
	uint16_t	(*ace_flags_get) (void *acep);	
	void		(*ace_flags_set) (void *acep, uint16_t flags);
	uint16_t	(*ace_type_get)(void *acep); 
	void		(*ace_type_set)(void *acep, uint16_t type);
	uint64_t	(*ace_who_get)(void *acep); 
	void		(*ace_who_set)(void *acep, uint64_t who);
	size_t		(*ace_size)(void *acep); 
	size_t		(*ace_abstract_size)(void); 
	int		(*ace_mask_off)(void); 
	
	int		(*ace_data)(void *acep, void **datap);
} acl_ops_t;


typedef struct zfs_acl_node {
	list_node_t	z_next;		
	void		*z_acldata;	
	void		*z_allocdata;	
	size_t		z_allocsize;	
	size_t		z_size;		
	uint64_t	z_ace_count;	
	int		z_ace_idx;	
} zfs_acl_node_t;

typedef struct zfs_acl {
	uint64_t	z_acl_count;	
	size_t		z_acl_bytes;	
	uint_t		z_version;	
	void		*z_next_ace;	
	uint64_t	z_hints;	
	zfs_acl_node_t	*z_curr_node;	
	list_t		z_acl;		
	acl_ops_t	*z_ops;		
} zfs_acl_t;

typedef struct acl_locator_cb {
	zfs_acl_t *cb_aclp;
	zfs_acl_node_t *cb_acl_node;
} zfs_acl_locator_cb_t;




struct zfs_fuid_info;

typedef struct zfs_acl_ids {
	uint64_t		z_fuid;		
	uint64_t		z_fgid;		
	uint64_t		z_mode;		
	zfs_acl_t		*z_aclp;	
	struct zfs_fuid_info 	*z_fuidp;	
} zfs_acl_ids_t;










struct znode;
struct zfsvfs;


int zfs_acl_ids_create(struct znode *, int, vattr_t *, cred_t *, vsecattr_t *, zfs_acl_ids_t *);
void zfs_acl_ids_free(zfs_acl_ids_t *);
boolean_t zfs_acl_ids_overquota(struct zfsvfs *, zfs_acl_ids_t *, uint64_t);
int zfs_getacl(struct znode *, vsecattr_t *, boolean_t, cred_t *);
int zfs_setacl(struct znode *, vsecattr_t *, boolean_t, cred_t *);
void zfs_acl_rele(void *);
void zfs_oldace_byteswap(ace_t *, int);
void zfs_ace_byteswap(void *, size_t, boolean_t);
extern boolean_t zfs_has_access(struct znode *zp, cred_t *cr);
extern int zfs_zaccess(struct znode *, int, int, boolean_t, cred_t *);
int zfs_fastaccesschk_execute(struct znode *, cred_t *);
extern int zfs_zaccess_rwx(struct znode *, mode_t, int, cred_t *);
extern int zfs_zaccess_unix(struct znode *, mode_t, cred_t *);
extern int zfs_acl_access(struct znode *, int, cred_t *);
int zfs_acl_chmod_setattr(struct znode *, zfs_acl_t **, uint64_t);
int zfs_zaccess_delete(struct znode *, struct znode *, cred_t *);
int zfs_zaccess_rename(struct znode *, struct znode *, struct znode *, struct znode *, cred_t *cr);
void zfs_acl_free(zfs_acl_t *);
int zfs_vsec_2_aclp(struct zfsvfs *, umode_t, vsecattr_t *, cred_t *, struct zfs_fuid_info **, zfs_acl_t **);
int zfs_aclset_common(struct znode *, zfs_acl_t *, cred_t *, dmu_tx_t *);
uint64_t zfs_external_acl(struct znode *);
int zfs_znode_acl_version(struct znode *);
int zfs_acl_size(struct znode *, int *);
zfs_acl_t *zfs_acl_alloc(int);
zfs_acl_node_t *zfs_acl_node_alloc(size_t);
void zfs_acl_xform(struct znode *, zfs_acl_t *, cred_t *);
void zfs_acl_data_locator(void **, uint32_t *, uint32_t, boolean_t, void *);
uint64_t zfs_mode_compute(uint64_t, zfs_acl_t *, uint64_t *, uint64_t, uint64_t);
int zfs_acl_node_read(struct znode *, boolean_t, zfs_acl_t **, boolean_t);
int zfs_acl_chown_setattr(struct znode *);




}


