








extern "C" {









typedef void (kcf_func_t)(void *, int);

typedef enum kcf_req_status {
	REQ_ALLOCATED = 1, REQ_WAITING, REQ_INPROGRESS, REQ_DONE, REQ_CANCELED } kcf_req_status_t;





typedef enum kcf_call_type {
	CRYPTO_SYNCH = 1, CRYPTO_ASYNCH } kcf_call_type_t;












extern ulong_t kcf_swprov_hndl;







					


typedef struct kcf_prov_tried {
	kcf_provider_desc_t	*pt_pd;
	struct kcf_prov_tried	*pt_next;
} kcf_prov_tried_t;
















typedef struct kcf_sreq_node {
	
	kcf_call_type_t		sn_type;
	
	kcondvar_t		sn_cv;
	kmutex_t		sn_lock;
	kcf_req_status_t	sn_state;

	
	int			sn_rv;

	
	struct kcf_req_params	*sn_params;

	
	struct kcf_context	*sn_context;

	
	kcf_provider_desc_t	*sn_provider;
} kcf_sreq_node_t;


typedef struct kcf_areq_node {
	
	kcf_call_type_t		an_type;

	
	kmutex_t		an_lock;
	kcf_req_status_t	an_state;
	crypto_call_req_t	an_reqarg;

	
	struct kcf_req_params	an_params;

	
	
	struct kcf_context	*an_context;

	
	struct kcf_areq_node	*an_ctxchain_next;

	kcondvar_t		an_turn_cv;
	boolean_t		an_is_my_turn;
	boolean_t		an_isdual;	

	
	struct kcf_areq_node	*an_next;
	struct kcf_areq_node	*an_prev;

	
	kcf_provider_desc_t	*an_provider;
	kcf_prov_tried_t	*an_tried_plist;

	struct kcf_areq_node	*an_idnext;	
	struct kcf_areq_node	*an_idprev;	
	kcondvar_t		an_done;	
	uint_t			an_refcnt;
} kcf_areq_node_t;
















typedef	struct kcf_call_req {
	crypto_call_req_t	kr_callreq;	
	kcf_req_params_t	kr_params;	
	kcf_areq_node_t		*kr_areq;	
	off_t			kr_saveoffset;
	size_t			kr_savelen;
} kcf_dual_req_t;
















typedef struct kcf_reqid_table {
	kmutex_t		rt_lock;
	crypto_req_id_t		rt_curid;
	kcf_areq_node_t		*rt_idhash[REQID_BUCKETS];
} kcf_reqid_table_t;


typedef struct kcf_global_swq {
	
	kcondvar_t		gs_cv;
	kmutex_t		gs_lock;
	uint_t			gs_njobs;
	uint_t			gs_maxjobs;
	kcf_areq_node_t		*gs_first;
	kcf_areq_node_t		*gs_last;
} kcf_global_swq_t;



typedef struct kcf_context {
	crypto_ctx_t		kc_glbl_ctx;
	uint_t			kc_refcnt;
	kmutex_t		kc_in_use_lock;
	
	kcf_areq_node_t		*kc_req_chain_first;
	kcf_areq_node_t		*kc_req_chain_last;
	kcf_provider_desc_t	*kc_prov_desc;	
	kcf_provider_desc_t	*kc_sw_prov_desc;	
	kcf_mech_entry_t	*kc_mech;
	struct kcf_context	*kc_secondctx;	
} kcf_context_t;























typedef	struct kcf_ctx_template {
	crypto_kcf_provider_handle_t	ct_prov_handle;	
	uint_t				ct_generation;	
	size_t				ct_size;	
	crypto_spi_ctx_template_t	ct_prov_tmpl;	
							
} kcf_ctx_template_t;


typedef struct kcf_pool {
	uint32_t	kp_threads;		
	uint32_t	kp_idlethreads;		
	uint32_t	kp_blockedthreads;	

	
	kcondvar_t	kp_nothr_cv;
	kmutex_t	kp_thread_lock;

	
	boolean_t	kp_signal_create_thread; 
	int		kp_nthrs;		
	boolean_t	kp_user_waiting;	

	
	kcondvar_t	kp_user_cv;		
	kmutex_t	kp_user_lock;		
} kcf_pool_t;



typedef enum cbuf_state {
	CBUF_FREE = 1, CBUF_WAITING, CBUF_RUNNING } cbuf_state_t;




typedef struct kcf_cbuf_elem {
	
	kmutex_t		kc_lock;
	kcondvar_t		kc_cv;
	cbuf_state_t		kc_state;

	struct kcf_cbuf_elem	*kc_next;
	struct kcf_cbuf_elem	*kc_prev;

	void			(*kc_func)(void *arg);
	void			*kc_arg;
} kcf_cbuf_elem_t;


typedef enum ntfy_elem_state {
	NTFY_WAITING = 1, NTFY_RUNNING } ntfy_elem_state_t;



typedef struct kcf_ntfy_elem {
	
	kmutex_t			kn_lock;
	kcondvar_t			kn_cv;
	ntfy_elem_state_t		kn_state;

	struct kcf_ntfy_elem		*kn_next;
	struct kcf_ntfy_elem		*kn_prev;

	crypto_notify_callback_t	kn_func;
	uint32_t			kn_event_mask;
} kcf_ntfy_elem_t;







extern int crypto_taskq_threads;
extern int crypto_taskq_minalloc;
extern int crypto_taskq_maxalloc;
extern kcf_global_swq_t *gswq;
extern int kcf_maxthreads;
extern int kcf_minthreads;


extern kmutex_t cbuf_list_lock;
extern kcondvar_t cbuf_list_cv;


extern kmutex_t ntfy_list_lock;
extern kcondvar_t ntfy_list_cv;

boolean_t kcf_get_next_logical_provider_member(kcf_provider_desc_t *, kcf_provider_desc_t *, kcf_provider_desc_t **);
extern int kcf_get_hardware_provider(crypto_mech_type_t, crypto_mech_type_t, boolean_t, kcf_provider_desc_t *, kcf_provider_desc_t **, crypto_func_group_t);

extern int kcf_get_hardware_provider_nomech(offset_t, offset_t, boolean_t, kcf_provider_desc_t *, kcf_provider_desc_t **);
extern void kcf_free_triedlist(kcf_prov_tried_t *);
extern kcf_prov_tried_t *kcf_insert_triedlist(kcf_prov_tried_t **, kcf_provider_desc_t *, int);
extern kcf_provider_desc_t *kcf_get_mech_provider(crypto_mech_type_t, kcf_mech_entry_t **, int *, kcf_prov_tried_t *, crypto_func_group_t, boolean_t, size_t);

extern kcf_provider_desc_t *kcf_get_dual_provider(crypto_mechanism_t *, crypto_mechanism_t *, kcf_mech_entry_t **, crypto_mech_type_t *, crypto_mech_type_t *, int *, kcf_prov_tried_t *, crypto_func_group_t, crypto_func_group_t, boolean_t, size_t);


extern crypto_ctx_t *kcf_new_ctx(crypto_call_req_t  *, kcf_provider_desc_t *, crypto_session_id_t);
extern int kcf_submit_request(kcf_provider_desc_t *, crypto_ctx_t *, crypto_call_req_t *, kcf_req_params_t *, boolean_t);
extern void kcf_sched_destroy(void);
extern void kcf_sched_init(void);
extern void kcf_sched_start(void);
extern void kcf_sop_done(kcf_sreq_node_t *, int);
extern void kcf_aop_done(kcf_areq_node_t *, int);
extern int common_submit_request(kcf_provider_desc_t *, crypto_ctx_t *, kcf_req_params_t *, crypto_req_handle_t);
extern void kcf_free_context(kcf_context_t *);

extern int kcf_svc_wait(int *);
extern int kcf_svc_do_run(void);
extern int kcf_need_signature_verification(kcf_provider_desc_t *);
extern void kcf_verify_signature(void *);
extern struct modctl *kcf_get_modctl(crypto_provider_info_t *);
extern void verify_unverified_providers(void);
extern void kcf_free_req(kcf_areq_node_t *areq);
extern void crypto_bufcall_service(void);

extern void kcf_walk_ntfylist(uint32_t, void *);
extern void kcf_do_notify(kcf_provider_desc_t *, boolean_t);

extern kcf_dual_req_t *kcf_alloc_req(crypto_call_req_t *);
extern void kcf_next_req(void *, int);
extern void kcf_last_req(void *, int);


}



