




typedef enum qat_compress_dir {
	QAT_DECOMPRESS = 0, QAT_COMPRESS = 1, } qat_compress_dir_t;


typedef enum qat_encrypt_dir {
	QAT_DECRYPT = 0, QAT_ENCRYPT = 1, } qat_encrypt_dir_t;















typedef struct qat_stats {
	
	kstat_named_t comp_requests;
	
	kstat_named_t comp_total_in_bytes;
	
	kstat_named_t comp_total_out_bytes;
	
	kstat_named_t decomp_requests;
	
	kstat_named_t decomp_total_in_bytes;
	
	kstat_named_t decomp_total_out_bytes;
	
	kstat_named_t dc_fails;

	
	kstat_named_t encrypt_requests;
	
	kstat_named_t encrypt_total_in_bytes;
	
	kstat_named_t encrypt_total_out_bytes;
	
	kstat_named_t decrypt_requests;
	
	kstat_named_t decrypt_total_in_bytes;
	
	kstat_named_t decrypt_total_out_bytes;
	
	kstat_named_t crypt_fails;

	
	kstat_named_t cksum_requests;
	
	kstat_named_t cksum_total_in_bytes;
	
	kstat_named_t cksum_fails;
} qat_stats_t;




extern qat_stats_t qat_stats;
extern int zfs_qat_compress_disable;
extern int zfs_qat_checksum_disable;
extern int zfs_qat_encrypt_disable;


static inline struct page * qat_mem_to_page(void *addr)
{
	if (!is_vmalloc_addr(addr))
		return (virt_to_page(addr));

	return (vmalloc_to_page(addr));
}

CpaStatus qat_mem_alloc_contig(void **pp_mem_addr, Cpa32U size_bytes);
void qat_mem_free_contig(void **pp_mem_addr);



extern int qat_dc_init(void);
extern void qat_dc_fini(void);
extern int qat_cy_init(void);
extern void qat_cy_fini(void);
extern int qat_init(void);
extern void qat_fini(void);




extern boolean_t qat_dc_use_accel(size_t s_len);
extern boolean_t qat_crypt_use_accel(size_t s_len);
extern boolean_t qat_checksum_use_accel(size_t s_len);
extern int qat_compress(qat_compress_dir_t dir, char *src, int src_len, char *dst, int dst_len, size_t *c_len);
extern int qat_crypt(qat_encrypt_dir_t dir, uint8_t *src_buf, uint8_t *dst_buf, uint8_t *aad_buf, uint32_t aad_len, uint8_t *iv_buf, uint8_t *digest_buf, crypto_key_t *key, uint64_t crypt, uint32_t enc_len);

extern int qat_checksum(uint64_t cksum, uint8_t *buf, uint64_t size, zio_cksum_t *zcp);














