














extern "C" {










typedef struct draid_map {
	uint64_t dm_children;	
	uint64_t dm_nperms;	
	uint64_t dm_seed;	
	uint64_t dm_checksum;	
	uint8_t *dm_perms;	
} draid_map_t;


typedef struct vdev_draid_config {
	
	uint64_t vdc_ndata;		
	uint64_t vdc_nparity;		
	uint64_t vdc_nspares;		
	uint64_t vdc_children;		
	uint64_t vdc_ngroups;		

	
	uint8_t *vdc_perms;		
	uint64_t vdc_nperms;		
	uint64_t vdc_groupwidth;	
	uint64_t vdc_ndisks;		
	uint64_t vdc_groupsz;		
	uint64_t vdc_devslicesz;	
} vdev_draid_config_t;


extern uint64_t vdev_draid_rand(uint64_t *);
extern int vdev_draid_lookup_map(uint64_t, const draid_map_t **);
extern int vdev_draid_generate_perms(const draid_map_t *, uint8_t **);


extern boolean_t vdev_draid_readable(vdev_t *, uint64_t);
extern boolean_t vdev_draid_missing(vdev_t *, uint64_t, uint64_t, uint64_t);
extern uint64_t vdev_draid_asize_to_psize(vdev_t *, uint64_t);
extern void vdev_draid_map_alloc_empty(zio_t *, struct raidz_row *);
extern nvlist_t *vdev_draid_read_config_spare(vdev_t *);


extern vdev_t *vdev_draid_spare_get_child(vdev_t *, uint64_t);
extern vdev_t *vdev_draid_spare_get_parent(vdev_t *);
extern int vdev_draid_spare_create(nvlist_t *, vdev_t *, uint64_t *, uint64_t);


}



