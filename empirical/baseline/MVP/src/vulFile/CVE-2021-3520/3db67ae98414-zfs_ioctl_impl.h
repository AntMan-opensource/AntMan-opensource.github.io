





extern kmutex_t zfsdev_state_lock;
extern zfsdev_state_t *zfsdev_state_list;
extern unsigned long zfs_max_nvlist_src_size;

typedef int zfs_ioc_legacy_func_t(zfs_cmd_t *);
typedef int zfs_ioc_func_t(const char *, nvlist_t *, nvlist_t *);
typedef int zfs_secpolicy_func_t(zfs_cmd_t *, nvlist_t *, cred_t *);

typedef enum {
	POOL_CHECK_NONE		= 1 << 0, POOL_CHECK_SUSPENDED	= 1 << 1, POOL_CHECK_READONLY	= 1 << 2, } zfs_ioc_poolcheck_t;



typedef enum {
	NO_NAME, POOL_NAME, DATASET_NAME, ENTITY_NAME } zfs_ioc_namecheck_t;





typedef enum {
	ZK_OPTIONAL = 1 << 0,		 ZK_WILDCARDLIST = 1 << 1, } ioc_key_flag_t;


typedef struct zfs_ioc_key {
	const char	*zkey_name;
	data_type_t	zkey_type;
	ioc_key_flag_t	zkey_flags;
} zfs_ioc_key_t;

int zfs_secpolicy_config(zfs_cmd_t *, nvlist_t *, cred_t *);

void zfs_ioctl_register_dataset_nolog(zfs_ioc_t, zfs_ioc_legacy_func_t *, zfs_secpolicy_func_t *, zfs_ioc_poolcheck_t);

void zfs_ioctl_register(const char *, zfs_ioc_t, zfs_ioc_func_t *, zfs_secpolicy_func_t *, zfs_ioc_namecheck_t, zfs_ioc_poolcheck_t, boolean_t, boolean_t, const zfs_ioc_key_t *, size_t);


uint64_t zfs_max_nvlist_src_size_os(void);
void zfs_ioctl_update_mount_cache(const char *dsname);
void zfs_ioctl_init_os(void);

boolean_t zfs_vfs_held(zfsvfs_t *);
int zfs_vfs_ref(zfsvfs_t **);
void zfs_vfs_rele(zfsvfs_t *);

long zfsdev_ioctl_common(uint_t, zfs_cmd_t *, int);
int zfsdev_attach(void);
void zfsdev_detach(void);
void zfsdev_private_set_state(void *, zfsdev_state_t *);
zfsdev_state_t *zfsdev_private_get_state(void *);
int zfsdev_state_init(void *);
void zfsdev_state_destroy(void *);
int zfs_kmod_init(void);
void zfs_kmod_fini(void);


