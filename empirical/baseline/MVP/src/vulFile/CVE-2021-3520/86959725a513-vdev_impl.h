





















extern "C" {





typedef struct vdev_queue vdev_queue_t;
typedef struct vdev_cache vdev_cache_t;
typedef struct vdev_cache_entry vdev_cache_entry_t;
struct abd;

extern int zfs_vdev_queue_depth_pct;
extern int zfs_vdev_def_queue_depth;
extern uint32_t zfs_vdev_async_write_max_active;


typedef int	vdev_init_func_t(spa_t *spa, nvlist_t *nv, void **tsd);
typedef void	vdev_fini_func_t(vdev_t *vd);
typedef int	vdev_open_func_t(vdev_t *vd, uint64_t *size, uint64_t *max_size, uint64_t *ashift, uint64_t *pshift);
typedef void	vdev_close_func_t(vdev_t *vd);
typedef uint64_t vdev_asize_func_t(vdev_t *vd, uint64_t psize);
typedef uint64_t vdev_min_asize_func_t(vdev_t *vd);
typedef uint64_t vdev_min_alloc_func_t(vdev_t *vd);
typedef void	vdev_io_start_func_t(zio_t *zio);
typedef void	vdev_io_done_func_t(zio_t *zio);
typedef void	vdev_state_change_func_t(vdev_t *vd, int, int);
typedef boolean_t vdev_need_resilver_func_t(vdev_t *vd, const dva_t *dva, size_t psize, uint64_t phys_birth);
typedef void	vdev_hold_func_t(vdev_t *vd);
typedef void	vdev_rele_func_t(vdev_t *vd);

typedef void	vdev_remap_cb_t(uint64_t inner_offset, vdev_t *vd, uint64_t offset, uint64_t size, void *arg);
typedef void	vdev_remap_func_t(vdev_t *vd, uint64_t offset, uint64_t size, vdev_remap_cb_t callback, void *arg);

typedef void vdev_xlation_func_t(vdev_t *cvd, const range_seg64_t *logical, range_seg64_t *physical, range_seg64_t *remain);
typedef uint64_t vdev_rebuild_asize_func_t(vdev_t *vd, uint64_t start, uint64_t size, uint64_t max_segment);
typedef void vdev_metaslab_init_func_t(vdev_t *vd, uint64_t *startp, uint64_t *sizep);
typedef void vdev_config_generate_func_t(vdev_t *vd, nvlist_t *nv);
typedef uint64_t vdev_nparity_func_t(vdev_t *vd);
typedef uint64_t vdev_ndisks_func_t(vdev_t *vd);

typedef const struct vdev_ops {
	vdev_init_func_t		*vdev_op_init;
	vdev_fini_func_t		*vdev_op_fini;
	vdev_open_func_t		*vdev_op_open;
	vdev_close_func_t		*vdev_op_close;
	vdev_asize_func_t		*vdev_op_asize;
	vdev_min_asize_func_t		*vdev_op_min_asize;
	vdev_min_alloc_func_t		*vdev_op_min_alloc;
	vdev_io_start_func_t		*vdev_op_io_start;
	vdev_io_done_func_t		*vdev_op_io_done;
	vdev_state_change_func_t	*vdev_op_state_change;
	vdev_need_resilver_func_t	*vdev_op_need_resilver;
	vdev_hold_func_t		*vdev_op_hold;
	vdev_rele_func_t		*vdev_op_rele;
	vdev_remap_func_t		*vdev_op_remap;
	vdev_xlation_func_t		*vdev_op_xlate;
	vdev_rebuild_asize_func_t	*vdev_op_rebuild_asize;
	vdev_metaslab_init_func_t	*vdev_op_metaslab_init;
	vdev_config_generate_func_t	*vdev_op_config_generate;
	vdev_nparity_func_t		*vdev_op_nparity;
	vdev_ndisks_func_t		*vdev_op_ndisks;
	char				vdev_op_type[16];
	boolean_t			vdev_op_leaf;
} vdev_ops_t;


struct vdev_cache_entry {
	struct abd	*ve_abd;
	uint64_t	ve_offset;
	clock_t		ve_lastused;
	avl_node_t	ve_offset_node;
	avl_node_t	ve_lastused_node;
	uint32_t	ve_hits;
	uint16_t	ve_missed_update;
	zio_t		*ve_fill_io;
};

struct vdev_cache {
	avl_tree_t	vc_offset_tree;
	avl_tree_t	vc_lastused_tree;
	kmutex_t	vc_lock;
};

typedef struct vdev_queue_class {
	uint32_t	vqc_active;

	
	avl_tree_t	vqc_queued_tree;
} vdev_queue_class_t;

struct vdev_queue {
	vdev_t		*vq_vdev;
	vdev_queue_class_t vq_class[ZIO_PRIORITY_NUM_QUEUEABLE];
	avl_tree_t	vq_active_tree;
	avl_tree_t	vq_read_offset_tree;
	avl_tree_t	vq_write_offset_tree;
	avl_tree_t	vq_trim_offset_tree;
	uint64_t	vq_last_offset;
	zio_priority_t	vq_last_prio;	
	uint32_t	vq_ia_active;	
	uint32_t	vq_nia_credit;	
	hrtime_t	vq_io_complete_ts; 
	hrtime_t	vq_io_delta_ts;
	zio_t		vq_io_search; 
	kmutex_t	vq_lock;
};

typedef enum vdev_alloc_bias {
	VDEV_BIAS_NONE, VDEV_BIAS_LOG, VDEV_BIAS_SPECIAL, VDEV_BIAS_DEDUP } vdev_alloc_bias_t;






typedef struct vdev_indirect_config {
	
	uint64_t	vic_mapping_object;

	
	uint64_t	vic_births_object;

	
	uint64_t	vic_prev_indirect_vdev;
} vdev_indirect_config_t;


struct vdev {
	
	uint64_t	vdev_id;	
	uint64_t	vdev_guid;	
	uint64_t	vdev_guid_sum;	
	uint64_t	vdev_orig_guid;	
	uint64_t	vdev_asize;	
	uint64_t	vdev_min_asize;	
	uint64_t	vdev_max_asize;	
	uint64_t	vdev_ashift;	

	
	uint64_t	vdev_logical_ashift;
	
	uint64_t	vdev_physical_ashift;
	uint64_t	vdev_state;	
	uint64_t	vdev_prevstate;	
	vdev_ops_t	*vdev_ops;	
	spa_t		*vdev_spa;	
	void		*vdev_tsd;	
	vdev_t		*vdev_top;	
	vdev_t		*vdev_parent;	
	vdev_t		**vdev_child;	
	uint64_t	vdev_children;	
	vdev_stat_t	vdev_stat;	
	vdev_stat_ex_t	vdev_stat_ex;	
	boolean_t	vdev_expanding;	
	boolean_t	vdev_reopening;	
	boolean_t	vdev_nonrot;	
	int		vdev_load_error; 
	int		vdev_open_error; 
	int		vdev_validate_error; 
	kthread_t	*vdev_open_thread; 
	kthread_t	*vdev_validate_thread; 
	uint64_t	vdev_crtxg;	

	
	uint64_t	vdev_ms_array;	
	uint64_t	vdev_ms_shift;	
	uint64_t	vdev_ms_count;	
	metaslab_group_t *vdev_mg;	
	metaslab_group_t *vdev_log_mg;	
	metaslab_t	**vdev_ms;	
	uint64_t	vdev_pending_fastwrite; 
	txg_list_t	vdev_ms_list;	
	txg_list_t	vdev_dtl_list;	
	txg_node_t	vdev_txg_node;	
	boolean_t	vdev_remove_wanted; 
	boolean_t	vdev_probe_wanted; 
	list_node_t	vdev_config_dirty_node; 
	list_node_t	vdev_state_dirty_node; 
	uint64_t	vdev_deflate_ratio; 
	uint64_t	vdev_islog;	
	uint64_t	vdev_noalloc;	
	uint64_t	vdev_removing;	
	boolean_t	vdev_ishole;	
	uint64_t	vdev_top_zap;
	vdev_alloc_bias_t vdev_alloc_bias; 

	
	space_map_t	*vdev_checkpoint_sm;	

	
	boolean_t	vdev_initialize_exit_wanted;
	vdev_initializing_state_t	vdev_initialize_state;
	list_node_t	vdev_initialize_node;
	kthread_t	*vdev_initialize_thread;
	
	kmutex_t	vdev_initialize_lock;
	kcondvar_t	vdev_initialize_cv;
	uint64_t	vdev_initialize_offset[TXG_SIZE];
	uint64_t	vdev_initialize_last_offset;
	range_tree_t	*vdev_initialize_tree;	
	uint64_t	vdev_initialize_bytes_est;
	uint64_t	vdev_initialize_bytes_done;
	uint64_t	vdev_initialize_action_time;	

	
	boolean_t	vdev_trim_exit_wanted;
	boolean_t	vdev_autotrim_exit_wanted;
	vdev_trim_state_t	vdev_trim_state;
	list_node_t	vdev_trim_node;
	kmutex_t	vdev_autotrim_lock;
	kcondvar_t	vdev_autotrim_cv;
	kthread_t	*vdev_autotrim_thread;
	
	kmutex_t	vdev_trim_lock;
	kcondvar_t	vdev_trim_cv;
	kthread_t	*vdev_trim_thread;
	uint64_t	vdev_trim_offset[TXG_SIZE];
	uint64_t	vdev_trim_last_offset;
	uint64_t	vdev_trim_bytes_est;
	uint64_t	vdev_trim_bytes_done;
	uint64_t	vdev_trim_rate;		
	uint64_t	vdev_trim_partial;	
	uint64_t	vdev_trim_secure;	
	uint64_t	vdev_trim_action_time;	

	
	boolean_t	vdev_rebuilding;
	boolean_t	vdev_rebuild_exit_wanted;
	boolean_t	vdev_rebuild_cancel_wanted;
	boolean_t	vdev_rebuild_reset_wanted;
	kmutex_t	vdev_rebuild_lock;
	kcondvar_t	vdev_rebuild_cv;
	kthread_t	*vdev_rebuild_thread;
	vdev_rebuild_t	vdev_rebuild_config;

	
	kmutex_t	vdev_initialize_io_lock;
	kcondvar_t	vdev_initialize_io_cv;
	uint64_t	vdev_initialize_inflight;
	kmutex_t	vdev_trim_io_lock;
	kcondvar_t	vdev_trim_io_cv;
	uint64_t	vdev_trim_inflight[3];

	
	vdev_indirect_config_t	vdev_indirect_config;

	
	krwlock_t vdev_indirect_rwlock;
	vdev_indirect_mapping_t *vdev_indirect_mapping;
	vdev_indirect_births_t *vdev_indirect_births;

	
	kmutex_t	vdev_obsolete_lock;
	range_tree_t	*vdev_obsolete_segments;
	space_map_t	*vdev_obsolete_sm;

	
	kmutex_t			vdev_scan_io_queue_lock;
	struct dsl_scan_io_queue	*vdev_scan_io_queue;

	
	range_tree_t	*vdev_dtl[DTL_TYPES]; 
	space_map_t	*vdev_dtl_sm;	
	txg_node_t	vdev_dtl_node;	
	uint64_t	vdev_dtl_object; 
	uint64_t	vdev_psize;	
	uint64_t	vdev_wholedisk;	
	uint64_t	vdev_offline;	
	uint64_t	vdev_faulted;	
	uint64_t	vdev_degraded;	
	uint64_t	vdev_removed;	
	uint64_t	vdev_resilver_txg; 
	uint64_t	vdev_rebuild_txg; 
	char		*vdev_path;	
	char		*vdev_devid;	
	char		*vdev_physpath;	
	char		*vdev_enc_sysfs_path;	
	char		*vdev_fru;	
	uint64_t	vdev_not_present; 
	uint64_t	vdev_unspare;	
	boolean_t	vdev_nowritecache; 
	boolean_t	vdev_has_trim;	
	boolean_t	vdev_has_securetrim; 
	boolean_t	vdev_checkremove; 
	boolean_t	vdev_forcefault; 
	boolean_t	vdev_splitting;	
	boolean_t	vdev_delayed_close; 
	boolean_t	vdev_tmpoffline; 
	boolean_t	vdev_detached;	
	boolean_t	vdev_cant_read;	
	boolean_t	vdev_cant_write; 
	boolean_t	vdev_isspare;	
	boolean_t	vdev_isl2cache;	
	boolean_t	vdev_copy_uberblocks;  
	boolean_t	vdev_resilver_deferred;  
	vdev_queue_t	vdev_queue;	
	vdev_cache_t	vdev_cache;	
	spa_aux_vdev_t	*vdev_aux;	
	zio_t		*vdev_probe_zio; 
	vdev_aux_t	vdev_label_aux;	
	uint64_t	vdev_leaf_zap;
	hrtime_t	vdev_mmp_pending; 
	uint64_t	vdev_mmp_kstat_id;	
	uint64_t	vdev_expansion_time;	
	list_node_t	vdev_leaf_node;		

	
	kmutex_t	vdev_dtl_lock;	
	kmutex_t	vdev_stat_lock;	
	kmutex_t	vdev_probe_lock; 

	
	zfs_ratelimit_t vdev_delay_rl;
	zfs_ratelimit_t vdev_deadman_rl;
	zfs_ratelimit_t vdev_checksum_rl;
};


















typedef struct vdev_phys {
	char		vp_nvlist[VDEV_PHYS_SIZE - sizeof (zio_eck_t)];
	zio_eck_t	vp_zbt;
} vdev_phys_t;

typedef enum vbe_vers {
	
	VB_RAW = 0,   VB_NVLIST = 1 } vbe_vers_t;




typedef struct vdev_boot_envblock {
	uint64_t	vbe_version;
	char		vbe_bootenv[VDEV_PAD_SIZE - sizeof (uint64_t) - sizeof (zio_eck_t)];
	zio_eck_t	vbe_zbt;
} vdev_boot_envblock_t;

CTASSERT_GLOBAL(sizeof (vdev_boot_envblock_t) == VDEV_PAD_SIZE);

typedef struct vdev_label {
	char		vl_pad1[VDEV_PAD_SIZE];			
	vdev_boot_envblock_t	vl_be;				
	vdev_phys_t	vl_vdev_phys;				
	char		vl_uberblock[VDEV_UBERBLOCK_RING];	
} vdev_label_t;						



























extern vdev_t *vdev_alloc_common(spa_t *spa, uint_t id, uint64_t guid, vdev_ops_t *ops);
extern int vdev_alloc(spa_t *spa, vdev_t **vdp, nvlist_t *config, vdev_t *parent, uint_t id, int alloctype);
extern void vdev_free(vdev_t *vd);


extern void vdev_add_child(vdev_t *pvd, vdev_t *cvd);
extern void vdev_remove_child(vdev_t *pvd, vdev_t *cvd);
extern void vdev_compact_children(vdev_t *pvd);
extern vdev_t *vdev_add_parent(vdev_t *cvd, vdev_ops_t *ops);
extern void vdev_remove_parent(vdev_t *cvd);


extern boolean_t vdev_log_state_valid(vdev_t *vd);
extern int vdev_load(vdev_t *vd);
extern int vdev_dtl_load(vdev_t *vd);
extern void vdev_sync(vdev_t *vd, uint64_t txg);
extern void vdev_sync_done(vdev_t *vd, uint64_t txg);
extern void vdev_dirty(vdev_t *vd, int flags, void *arg, uint64_t txg);
extern void vdev_dirty_leaves(vdev_t *vd, int flags, uint64_t txg);


extern vdev_ops_t vdev_root_ops;
extern vdev_ops_t vdev_mirror_ops;
extern vdev_ops_t vdev_replacing_ops;
extern vdev_ops_t vdev_raidz_ops;
extern vdev_ops_t vdev_draid_ops;
extern vdev_ops_t vdev_draid_spare_ops;
extern vdev_ops_t vdev_disk_ops;
extern vdev_ops_t vdev_file_ops;
extern vdev_ops_t vdev_missing_ops;
extern vdev_ops_t vdev_hole_ops;
extern vdev_ops_t vdev_spare_ops;
extern vdev_ops_t vdev_indirect_ops;


extern void vdev_default_xlate(vdev_t *vd, const range_seg64_t *logical_rs, range_seg64_t *physical_rs, range_seg64_t *remain_rs);
extern uint64_t vdev_default_asize(vdev_t *vd, uint64_t psize);
extern uint64_t vdev_default_min_asize(vdev_t *vd);
extern uint64_t vdev_get_min_asize(vdev_t *vd);
extern void vdev_set_min_asize(vdev_t *vd);
extern uint64_t vdev_get_min_alloc(vdev_t *vd);
extern uint64_t vdev_get_nparity(vdev_t *vd);
extern uint64_t vdev_get_ndisks(vdev_t *vd);


extern int zfs_vdev_standard_sm_blksz;

extern int zfs_vdev_cache_size;


extern void vdev_indirect_sync_obsolete(vdev_t *vd, dmu_tx_t *tx);
extern boolean_t vdev_indirect_should_condense(vdev_t *vd);
extern void spa_condense_indirect_start_sync(vdev_t *vd, dmu_tx_t *tx);
extern int vdev_obsolete_sm_object(vdev_t *vd, uint64_t *sm_obj);
extern int vdev_obsolete_counts_are_precise(vdev_t *vd, boolean_t *are_precise);


int vdev_checkpoint_sm_object(vdev_t *vd, uint64_t *sm_obj);
void vdev_metaslab_group_create(vdev_t *vd);


extern uint64_t zfs_vdev_min_auto_ashift;
extern uint64_t zfs_vdev_max_auto_ashift;
int param_set_min_auto_ashift(ZFS_MODULE_PARAM_ARGS);
int param_set_max_auto_ashift(ZFS_MODULE_PARAM_ARGS);


}



