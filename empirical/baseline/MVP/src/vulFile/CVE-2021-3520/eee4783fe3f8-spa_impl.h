



























extern "C" {


typedef struct spa_alloc {
	kmutex_t	spaa_lock;
	avl_tree_t	spaa_tree;
} ____cacheline_aligned spa_alloc_t;

typedef struct spa_error_entry {
	zbookmark_phys_t	se_bookmark;
	char			*se_name;
	avl_node_t		se_avl;
} spa_error_entry_t;

typedef struct spa_history_phys {
	uint64_t sh_pool_create_len;	
	uint64_t sh_phys_max_off;	
	uint64_t sh_bof;		
	uint64_t sh_eof;		
	uint64_t sh_records_lost;	
} spa_history_phys_t;


typedef struct spa_removing_phys {
	uint64_t sr_state; 

	
	uint64_t sr_removing_vdev;

	
	uint64_t sr_prev_indirect_vdev;

	uint64_t sr_start_time;
	uint64_t sr_end_time;

	
	uint64_t sr_to_copy; 
	uint64_t sr_copied; 
} spa_removing_phys_t;


typedef struct spa_condensing_indirect_phys {
	
	uint64_t	scip_vdev;

	
	uint64_t	scip_prev_obsolete_sm_object;

	
	uint64_t	scip_next_mapping_object;
} spa_condensing_indirect_phys_t;

struct spa_aux_vdev {
	uint64_t	sav_object;		
	nvlist_t	*sav_config;		
	vdev_t		**sav_vdevs;		
	int		sav_count;		
	boolean_t	sav_sync;		
	nvlist_t	**sav_pending;		
	uint_t		sav_npending;		
};

typedef struct spa_config_lock {
	kmutex_t	scl_lock;
	kthread_t	*scl_writer;
	int		scl_write_wanted;
	int		scl_count;
	kcondvar_t	scl_cv;
} ____cacheline_aligned spa_config_lock_t;

typedef struct spa_config_dirent {
	list_node_t	scd_link;
	char		*scd_path;
} spa_config_dirent_t;

typedef enum zio_taskq_type {
	ZIO_TASKQ_ISSUE = 0, ZIO_TASKQ_ISSUE_HIGH, ZIO_TASKQ_INTERRUPT, ZIO_TASKQ_INTERRUPT_HIGH, ZIO_TASKQ_TYPES } zio_taskq_type_t;






typedef enum spa_proc_state {
	SPA_PROC_NONE,		 SPA_PROC_CREATED, SPA_PROC_ACTIVE, SPA_PROC_DEACTIVATE, SPA_PROC_GONE } spa_proc_state_t;





typedef struct spa_taskqs {
	uint_t stqs_count;
	taskq_t **stqs_taskq;
} spa_taskqs_t;

typedef enum spa_all_vdev_zap_action {
	AVZ_ACTION_NONE = 0, AVZ_ACTION_DESTROY, AVZ_ACTION_REBUILD, AVZ_ACTION_INITIALIZE } spa_avz_action_t;




typedef enum spa_config_source {
	SPA_CONFIG_SRC_NONE = 0, SPA_CONFIG_SRC_SCAN, SPA_CONFIG_SRC_CACHEFILE, SPA_CONFIG_SRC_TRYIMPORT, SPA_CONFIG_SRC_SPLIT, SPA_CONFIG_SRC_MOS } spa_config_source_t;






struct spa {
	
	char		spa_name[ZFS_MAX_DATASET_NAME_LEN];	
	char		*spa_comment;		
	avl_node_t	spa_avl;		
	nvlist_t	*spa_config;		
	nvlist_t	*spa_config_syncing;	
	nvlist_t	*spa_config_splitting;	
	nvlist_t	*spa_load_info;		
	uint64_t	spa_config_txg;		
	int		spa_sync_pass;		
	pool_state_t	spa_state;		
	int		spa_inject_ref;		
	uint8_t		spa_sync_on;		
	spa_load_state_t spa_load_state;	
	boolean_t	spa_indirect_vdevs_loaded; 
	boolean_t	spa_trust_config;	
	boolean_t	spa_is_splitting;	
	spa_config_source_t spa_config_source;	
	uint64_t	spa_import_flags;	
	spa_taskqs_t	spa_zio_taskq[ZIO_TYPES][ZIO_TASKQ_TYPES];
	dsl_pool_t	*spa_dsl_pool;
	boolean_t	spa_is_initializing;	
	boolean_t	spa_is_exporting;	
	metaslab_class_t *spa_normal_class;	
	metaslab_class_t *spa_log_class;	
	metaslab_class_t *spa_embedded_log_class; 
	metaslab_class_t *spa_special_class;	
	metaslab_class_t *spa_dedup_class;	
	uint64_t	spa_first_txg;		
	uint64_t	spa_final_txg;		
	uint64_t	spa_freeze_txg;		
	uint64_t	spa_load_max_txg;	
	uint64_t	spa_claim_max_txg;	
	inode_timespec_t spa_loaded_ts;		
	objset_t	*spa_meta_objset;	
	kmutex_t	spa_evicting_os_lock;	
	list_t		spa_evicting_os_list;	
	kcondvar_t	spa_evicting_os_cv;	
	txg_list_t	spa_vdev_txg_list;	
	vdev_t		*spa_root_vdev;		
	uint64_t	spa_min_ashift;		
	uint64_t	spa_max_ashift;		
	uint64_t	spa_min_alloc;		
	uint64_t	spa_config_guid;	
	uint64_t	spa_load_guid;		
	uint64_t	spa_last_synced_guid;	
	list_t		spa_config_dirty_list;	
	list_t		spa_state_dirty_list;	
	
	spa_alloc_t	*spa_allocs;
	int		spa_alloc_count;

	spa_aux_vdev_t	spa_spares;		
	spa_aux_vdev_t	spa_l2cache;		
	nvlist_t	*spa_label_features;	
	uint64_t	spa_config_object;	
	uint64_t	spa_config_generation;	
	uint64_t	spa_syncing_txg;	
	bpobj_t		spa_deferred_bpobj;	
	bplist_t	spa_free_bplist[TXG_SIZE]; 
	zio_cksum_salt_t spa_cksum_salt;	
	
	kmutex_t	spa_cksum_tmpls_lock;
	void		*spa_cksum_tmpls[ZIO_CHECKSUM_FUNCTIONS];
	uberblock_t	spa_ubsync;		
	uberblock_t	spa_uberblock;		
	boolean_t	spa_extreme_rewind;	
	kmutex_t	spa_scrub_lock;		
	uint64_t	spa_scrub_inflight;	

	
	uint64_t	spa_load_verify_bytes;
	kcondvar_t	spa_scrub_io_cv;	
	uint8_t		spa_scrub_active;	
	uint8_t		spa_scrub_type;		
	uint8_t		spa_scrub_finished;	
	uint8_t		spa_scrub_started;	
	uint8_t		spa_scrub_reopen;	
	uint64_t	spa_scan_pass_start;	
	uint64_t	spa_scan_pass_scrub_pause; 
	uint64_t	spa_scan_pass_scrub_spent_paused; 
	uint64_t	spa_scan_pass_exam;	
	uint64_t	spa_scan_pass_issued;	

	
	boolean_t	spa_resilver_deferred;
	kmutex_t	spa_async_lock;		
	kthread_t	*spa_async_thread;	
	int		spa_async_suspended;	
	kcondvar_t	spa_async_cv;		
	uint16_t	spa_async_tasks;	
	uint64_t	spa_missing_tvds;	
	uint64_t	spa_missing_tvds_allowed; 

	uint64_t	spa_nonallocating_dspace;
	spa_removing_phys_t spa_removing_phys;
	spa_vdev_removal_t *spa_vdev_removal;

	spa_condensing_indirect_phys_t	spa_condensing_indirect_phys;
	spa_condensing_indirect_t	*spa_condensing_indirect;
	zthr_t		*spa_condense_zthr;	

	uint64_t	spa_checkpoint_txg;	
	spa_checkpoint_info_t spa_checkpoint_info; 
	zthr_t		*spa_checkpoint_discard_zthr;

	space_map_t	*spa_syncing_log_sm;	
	avl_tree_t	spa_sm_logs_by_txg;
	kmutex_t	spa_flushed_ms_lock;	
	avl_tree_t	spa_metaslabs_by_flushed;
	spa_unflushed_stats_t	spa_unflushed_stats;
	list_t		spa_log_summary;
	uint64_t	spa_log_flushall_txg;

	zthr_t		*spa_livelist_delete_zthr; 
	zthr_t		*spa_livelist_condense_zthr; 
	uint64_t	spa_livelists_to_delete; 
	livelist_condense_entry_t	spa_to_condense; 

	char		*spa_root;		
	uint64_t	spa_ena;		
	int		spa_last_open_failed;	
	uint64_t	spa_last_ubsync_txg;	
	uint64_t	spa_last_ubsync_txg_ts;	
	uint64_t	spa_load_txg;		
	uint64_t	spa_load_txg_ts;	
	uint64_t	spa_load_meta_errors;	
	uint64_t	spa_load_data_errors;	
	uint64_t	spa_verify_min_txg;	
	kmutex_t	spa_errlog_lock;	
	uint64_t	spa_errlog_last;	
	uint64_t	spa_errlog_scrub;	
	kmutex_t	spa_errlist_lock;	
	avl_tree_t	spa_errlist_last;	
	avl_tree_t	spa_errlist_scrub;	
	uint64_t	spa_deflate;		
	uint64_t	spa_history;		
	kmutex_t	spa_history_lock;	
	vdev_t		*spa_pending_vdev;	
	kmutex_t	spa_props_lock;		
	uint64_t	spa_pool_props_object;	
	uint64_t	spa_bootfs;		
	uint64_t	spa_failmode;		
	uint64_t	spa_deadman_failmode;	
	uint64_t	spa_delegation;		
	list_t		spa_config_list;	
	
	zio_t		**spa_async_zio_root;
	zio_t		*spa_suspend_zio_root;	
	zio_t		*spa_txg_zio[TXG_SIZE]; 
	kmutex_t	spa_suspend_lock;	
	kcondvar_t	spa_suspend_cv;		
	zio_suspend_reason_t	spa_suspended;	
	uint8_t		spa_claiming;		
	boolean_t	spa_is_root;		
	int		spa_minref;		
	spa_mode_t	spa_mode;		
	boolean_t	spa_read_spacemaps;	
	spa_log_state_t spa_log_state;		
	uint64_t	spa_autoexpand;		
	ddt_t		*spa_ddt[ZIO_CHECKSUM_FUNCTIONS]; 
	uint64_t	spa_ddt_stat_object;	
	uint64_t	spa_dedup_dspace;	
	uint64_t	spa_dedup_checksum;	
	uint64_t	spa_dspace;		
	kmutex_t	spa_vdev_top_lock;	
	kmutex_t	spa_proc_lock;		
	kcondvar_t	spa_proc_cv;		
	spa_proc_state_t spa_proc_state;	
	proc_t		*spa_proc;		
	uintptr_t	spa_did;		
	boolean_t	spa_autoreplace;	
	int		spa_vdev_locks;		
	uint64_t	spa_creation_version;	
	uint64_t	spa_prev_software_version; 
	uint64_t	spa_feat_for_write_obj;	
	uint64_t	spa_feat_for_read_obj;	
	uint64_t	spa_feat_desc_obj;	
	uint64_t	spa_feat_enabled_txg_obj; 
	kmutex_t	spa_feat_stats_lock;	
	nvlist_t	*spa_feat_stats;	
	
	uint64_t	spa_feat_refcount_cache[SPA_FEATURES];
	taskqid_t	spa_deadman_tqid;	
	uint64_t	spa_deadman_calls;	
	hrtime_t	spa_sync_starttime;	
	uint64_t	spa_deadman_synctime;	
	uint64_t	spa_deadman_ziotime;	
	uint64_t	spa_all_vdev_zaps;	
	spa_avz_action_t	spa_avz_action;	
	uint64_t	spa_autotrim;		
	uint64_t	spa_errata;		
	spa_stats_t	spa_stats;		
	spa_keystore_t	spa_keystore;		

	
	uint64_t	spa_lowmem_page_load;	
	uint64_t	spa_lowmem_last_txg;	

	hrtime_t	spa_ccw_fail_time;	
	taskq_t		*spa_zvol_taskq;	
	taskq_t		*spa_prefetch_taskq;	
	uint64_t	spa_multihost;		
	mmp_thread_t	spa_mmp;		
	list_t		spa_leaf_list;		
	uint64_t	spa_leaf_list_gen;	
	uint32_t	spa_hostid;		

	
	kmutex_t	spa_activities_lock;
	kcondvar_t	spa_activities_cv;
	kcondvar_t	spa_waiters_cv;
	int		spa_waiters;		
	boolean_t	spa_waiters_cancel;	

	char		*spa_compatibility;	

	
	spa_config_lock_t spa_config_lock[SCL_LOCKS]; 
	zfs_refcount_t	spa_refcount;		

	taskq_t		*spa_upgrade_taskq;	
};

extern char *spa_config_path;
extern char *zfs_deadman_failmode;
extern int spa_slop_shift;
extern void spa_taskq_dispatch_ent(spa_t *spa, zio_type_t t, zio_taskq_type_t q, task_func_t *func, void *arg, uint_t flags, taskq_ent_t *ent);
extern void spa_taskq_dispatch_sync(spa_t *, zio_type_t t, zio_taskq_type_t q, task_func_t *func, void *arg, uint_t flags);
extern void spa_load_spares(spa_t *spa);
extern void spa_load_l2cache(spa_t *spa);
extern sysevent_t *spa_event_create(spa_t *spa, vdev_t *vd, nvlist_t *hist_nvl, const char *name);
extern void spa_event_post(sysevent_t *ev);
extern int param_set_deadman_failmode_common(const char *val);
extern void spa_set_deadman_synctime(hrtime_t ns);
extern void spa_set_deadman_ziotime(hrtime_t ns);
extern const char *spa_history_zone(void);


}



