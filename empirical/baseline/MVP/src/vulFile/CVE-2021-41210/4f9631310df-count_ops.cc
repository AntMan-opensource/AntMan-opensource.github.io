





namespace tensorflow {

using shape_inference::InferenceContext;
using shape_inference::ShapeHandle;

Status DenseCountSparseOutputShapeFn(InferenceContext *c) {
  auto values = c->input(0);
  auto weights = c->input(1);
  ShapeHandle output;
  auto num_weights = c->NumElements(weights);
  if (c->ValueKnown(num_weights) && c->Value(num_weights) == 0) {
    output = values;
  } else {
    TF_RETURN_IF_ERROR(c->Merge(weights, values, &output));
  }
  auto rank = c->Rank(output);
  auto nvals = c->UnknownDim();
  c->set_output(0, c->Matrix(nvals, rank));  
  c->set_output(1, c->Vector(nvals));        
  c->set_output(2, c->Vector(rank));         
  return Status::OK();
}

Status SparseCountSparseOutputShapeFn(InferenceContext *c) {
  auto rank = c->Dim(c->input(0), 1);
  auto nvals = c->UnknownDim();
  c->set_output(0, c->Matrix(nvals, rank));  
  c->set_output(1, c->Vector(nvals));        
  c->set_output(2, c->Vector(rank));         
  return Status::OK();
}

Status RaggedCountSparseOutputShapeFn(InferenceContext *c) {
  int32_t rank = c->Rank(c->input(1));
  if (rank != c->kUnknownRank) {
    ++rank;  
  }
  auto nvals = c->UnknownDim();
  c->set_output(0, c->Matrix(nvals, rank));  
  c->set_output(1, c->Vector(nvals));        
  c->set_output(2, c->Vector(rank));         
  return Status::OK();
}

REGISTER_OP("DenseCountSparseOutput")
    .Input("values: T")
    .Input("weights: output_type")
    .Attr("T: {int32, int64}")
    .Attr("minlength: int >= -1 = -1")
    .Attr("maxlength: int >= -1 = -1")
    .Attr("binary_output: bool")
    .Attr("output_type: {int32, int64, float, double}")
    .SetShapeFn(DenseCountSparseOutputShapeFn)
    .Output("output_indices: int64")
    .Output("output_values: output_type")
    .Output("output_dense_shape: int64");

REGISTER_OP("SparseCountSparseOutput")
    .Input("indices: int64")
    .Input("values: T")
    .Input("dense_shape: int64")
    .Input("weights: output_type")
    .Attr("T: {int32, int64}")
    .Attr("minlength: int >= -1 = -1")
    .Attr("maxlength: int >= -1 = -1")
    .Attr("binary_output: bool")
    .Attr("output_type: {int32, int64, float, double}")
    .SetShapeFn(SparseCountSparseOutputShapeFn)
    .Output("output_indices: int64")
    .Output("output_values: output_type")
    .Output("output_dense_shape: int64");

REGISTER_OP("RaggedCountSparseOutput")
    .Input("splits: int64")
    .Input("values: T")
    .Input("weights: output_type")
    .Attr("T: {int32, int64}")
    .Attr("minlength: int >= -1 = -1")
    .Attr("maxlength: int >= -1 = -1")
    .Attr("binary_output: bool")
    .Attr("output_type: {int32, int64, float, double}")
    .SetShapeFn(RaggedCountSparseOutputShapeFn)
    .Output("output_indices: int64")
    .Output("output_values: output_type")
    .Output("output_dense_shape: int64");

}  
