








extern "C" {







CMARK_GFM_EXPORT char *cmark_markdown_to_html(const char *text, size_t len, int options);









typedef enum {
  
  CMARK_NODE_NONE = 0x0000,   CMARK_NODE_DOCUMENT       = CMARK_NODE_TYPE_BLOCK | 0x0001, CMARK_NODE_BLOCK_QUOTE    = CMARK_NODE_TYPE_BLOCK | 0x0002, CMARK_NODE_LIST           = CMARK_NODE_TYPE_BLOCK | 0x0003, CMARK_NODE_ITEM           = CMARK_NODE_TYPE_BLOCK | 0x0004, CMARK_NODE_CODE_BLOCK     = CMARK_NODE_TYPE_BLOCK | 0x0005, CMARK_NODE_HTML_BLOCK     = CMARK_NODE_TYPE_BLOCK | 0x0006, CMARK_NODE_CUSTOM_BLOCK   = CMARK_NODE_TYPE_BLOCK | 0x0007, CMARK_NODE_PARAGRAPH      = CMARK_NODE_TYPE_BLOCK | 0x0008, CMARK_NODE_HEADING        = CMARK_NODE_TYPE_BLOCK | 0x0009, CMARK_NODE_THEMATIC_BREAK = CMARK_NODE_TYPE_BLOCK | 0x000a, CMARK_NODE_FOOTNOTE_DEFINITION = CMARK_NODE_TYPE_BLOCK | 0x000b,   CMARK_NODE_TEXT          = CMARK_NODE_TYPE_INLINE | 0x0001, CMARK_NODE_SOFTBREAK     = CMARK_NODE_TYPE_INLINE | 0x0002, CMARK_NODE_LINEBREAK     = CMARK_NODE_TYPE_INLINE | 0x0003, CMARK_NODE_CODE          = CMARK_NODE_TYPE_INLINE | 0x0004, CMARK_NODE_HTML_INLINE   = CMARK_NODE_TYPE_INLINE | 0x0005, CMARK_NODE_CUSTOM_INLINE = CMARK_NODE_TYPE_INLINE | 0x0006, CMARK_NODE_EMPH          = CMARK_NODE_TYPE_INLINE | 0x0007, CMARK_NODE_STRONG        = CMARK_NODE_TYPE_INLINE | 0x0008, CMARK_NODE_LINK          = CMARK_NODE_TYPE_INLINE | 0x0009, CMARK_NODE_IMAGE         = CMARK_NODE_TYPE_INLINE | 0x000a, CMARK_NODE_FOOTNOTE_REFERENCE = CMARK_NODE_TYPE_INLINE | 0x000b, } cmark_node_type;



























extern cmark_node_type CMARK_NODE_LAST_BLOCK;
extern cmark_node_type CMARK_NODE_LAST_INLINE;







typedef enum {
  CMARK_NO_LIST, CMARK_BULLET_LIST, CMARK_ORDERED_LIST } cmark_list_type;



typedef enum {
  CMARK_NO_DELIM, CMARK_PERIOD_DELIM, CMARK_PAREN_DELIM } cmark_delim_type;



typedef struct cmark_node cmark_node;
typedef struct cmark_parser cmark_parser;
typedef struct cmark_iter cmark_iter;
typedef struct cmark_syntax_extension cmark_syntax_extension;




typedef struct cmark_mem {
  void *(*calloc)(size_t, size_t);
  void *(*realloc)(void *, size_t);
  void (*free)(void *);
} cmark_mem;


CMARK_GFM_EXPORT cmark_mem *cmark_get_default_mem_allocator(void);


CMARK_GFM_EXPORT cmark_mem *cmark_get_arena_mem_allocator(void);


CMARK_GFM_EXPORT void cmark_arena_reset(void);


typedef void (*cmark_free_func) (cmark_mem *mem, void *user_data);







typedef struct _cmark_llist {
  struct _cmark_llist *next;
  void         *data;
} cmark_llist;


CMARK_GFM_EXPORT cmark_llist * cmark_llist_append    (cmark_mem         * mem, cmark_llist       * head, void              * data);




CMARK_GFM_EXPORT void          cmark_llist_free_full (cmark_mem         * mem, cmark_llist       * head, cmark_free_func     free_func);




CMARK_GFM_EXPORT void          cmark_llist_free      (cmark_mem         * mem, cmark_llist       * head);





CMARK_GFM_EXPORT cmark_node *cmark_node_new(cmark_node_type type);


CMARK_GFM_EXPORT cmark_node *cmark_node_new_with_mem(cmark_node_type type, cmark_mem *mem);

CMARK_GFM_EXPORT cmark_node *cmark_node_new_with_ext(cmark_node_type type, cmark_syntax_extension *extension);

CMARK_GFM_EXPORT cmark_node *cmark_node_new_with_mem_and_ext(cmark_node_type type, cmark_mem *mem, cmark_syntax_extension *extension);



CMARK_GFM_EXPORT void cmark_node_free(cmark_node *node);




CMARK_GFM_EXPORT cmark_node *cmark_node_next(cmark_node *node);


CMARK_GFM_EXPORT cmark_node *cmark_node_previous(cmark_node *node);


CMARK_GFM_EXPORT cmark_node *cmark_node_parent(cmark_node *node);


CMARK_GFM_EXPORT cmark_node *cmark_node_first_child(cmark_node *node);


CMARK_GFM_EXPORT cmark_node *cmark_node_last_child(cmark_node *node);


CMARK_GFM_EXPORT cmark_node *cmark_node_parent_footnote_def(cmark_node *node);



typedef enum {
  CMARK_EVENT_NONE, CMARK_EVENT_DONE, CMARK_EVENT_ENTER, CMARK_EVENT_EXIT } cmark_event_type;





CMARK_GFM_EXPORT cmark_iter *cmark_iter_new(cmark_node *root);


CMARK_GFM_EXPORT void cmark_iter_free(cmark_iter *iter);


CMARK_GFM_EXPORT cmark_event_type cmark_iter_next(cmark_iter *iter);


CMARK_GFM_EXPORT cmark_node *cmark_iter_get_node(cmark_iter *iter);


CMARK_GFM_EXPORT cmark_event_type cmark_iter_get_event_type(cmark_iter *iter);


CMARK_GFM_EXPORT cmark_node *cmark_iter_get_root(cmark_iter *iter);


CMARK_GFM_EXPORT void cmark_iter_reset(cmark_iter *iter, cmark_node *current, cmark_event_type event_type);





CMARK_GFM_EXPORT void *cmark_node_get_user_data(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_user_data(cmark_node *node, void *user_data);


CMARK_GFM_EXPORT int cmark_node_set_user_data_free_func(cmark_node *node, cmark_free_func free_func);



CMARK_GFM_EXPORT cmark_node_type cmark_node_get_type(cmark_node *node);


CMARK_GFM_EXPORT const char *cmark_node_get_type_string(cmark_node *node);


CMARK_GFM_EXPORT const char *cmark_node_get_literal(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_literal(cmark_node *node, const char *content);


CMARK_GFM_EXPORT int cmark_node_get_heading_level(cmark_node *node);






CMARK_GFM_EXPORT int cmark_node_set_heading_level(cmark_node *node, int level);


CMARK_GFM_EXPORT cmark_list_type cmark_node_get_list_type(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_list_type(cmark_node *node, cmark_list_type type);


CMARK_GFM_EXPORT cmark_delim_type cmark_node_get_list_delim(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_list_delim(cmark_node *node, cmark_delim_type delim);


CMARK_GFM_EXPORT int cmark_node_get_list_start(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_list_start(cmark_node *node, int start);


CMARK_GFM_EXPORT int cmark_node_get_list_tight(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_list_tight(cmark_node *node, int tight);


CMARK_GFM_EXPORT const char *cmark_node_get_fence_info(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_fence_info(cmark_node *node, const char *info);


CMARK_GFM_EXPORT int cmark_node_set_fenced(cmark_node * node, int fenced, int length, int offset, char character);


CMARK_GFM_EXPORT int cmark_node_get_fenced(cmark_node *node, int *length, int *offset, char *character);


CMARK_GFM_EXPORT const char *cmark_node_get_url(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_url(cmark_node *node, const char *url);


CMARK_GFM_EXPORT const char *cmark_node_get_title(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_title(cmark_node *node, const char *title);


CMARK_GFM_EXPORT const char *cmark_node_get_on_enter(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_on_enter(cmark_node *node, const char *on_enter);


CMARK_GFM_EXPORT const char *cmark_node_get_on_exit(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_set_on_exit(cmark_node *node, const char *on_exit);


CMARK_GFM_EXPORT int cmark_node_get_start_line(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_get_start_column(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_get_end_line(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_get_end_column(cmark_node *node);




CMARK_GFM_EXPORT void cmark_node_unlink(cmark_node *node);


CMARK_GFM_EXPORT int cmark_node_insert_before(cmark_node *node, cmark_node *sibling);


CMARK_GFM_EXPORT int cmark_node_insert_after(cmark_node *node, cmark_node *sibling);


CMARK_GFM_EXPORT int cmark_node_replace(cmark_node *oldnode, cmark_node *newnode);


CMARK_GFM_EXPORT int cmark_node_prepend_child(cmark_node *node, cmark_node *child);


CMARK_GFM_EXPORT int cmark_node_append_child(cmark_node *node, cmark_node *child);


CMARK_GFM_EXPORT void cmark_consolidate_text_nodes(cmark_node *root);


CMARK_GFM_EXPORT void cmark_node_own(cmark_node *root);




CMARK_GFM_EXPORT cmark_parser *cmark_parser_new(int options);


CMARK_GFM_EXPORT cmark_parser *cmark_parser_new_with_mem(int options, cmark_mem *mem);


CMARK_GFM_EXPORT void cmark_parser_free(cmark_parser *parser);


CMARK_GFM_EXPORT void cmark_parser_feed(cmark_parser *parser, const char *buffer, size_t len);


CMARK_GFM_EXPORT cmark_node *cmark_parser_finish(cmark_parser *parser);


CMARK_GFM_EXPORT cmark_node *cmark_parse_document(const char *buffer, size_t len, int options);


CMARK_GFM_EXPORT cmark_node *cmark_parse_file(FILE *f, int options);




CMARK_GFM_EXPORT char *cmark_render_xml(cmark_node *root, int options);


CMARK_GFM_EXPORT char *cmark_render_xml_with_mem(cmark_node *root, int options, cmark_mem *mem);


CMARK_GFM_EXPORT char *cmark_render_html(cmark_node *root, int options, cmark_llist *extensions);


CMARK_GFM_EXPORT char *cmark_render_html_with_mem(cmark_node *root, int options, cmark_llist *extensions, cmark_mem *mem);


CMARK_GFM_EXPORT char *cmark_render_man(cmark_node *root, int options, int width);


CMARK_GFM_EXPORT char *cmark_render_man_with_mem(cmark_node *root, int options, int width, cmark_mem *mem);


CMARK_GFM_EXPORT char *cmark_render_commonmark(cmark_node *root, int options, int width);


CMARK_GFM_EXPORT char *cmark_render_commonmark_with_mem(cmark_node *root, int options, int width, cmark_mem *mem);


CMARK_GFM_EXPORT char *cmark_render_plaintext(cmark_node *root, int options, int width);


CMARK_GFM_EXPORT char *cmark_render_plaintext_with_mem(cmark_node *root, int options, int width, cmark_mem *mem);


CMARK_GFM_EXPORT char *cmark_render_latex(cmark_node *root, int options, int width);


CMARK_GFM_EXPORT char *cmark_render_latex_with_mem(cmark_node *root, int options, int width, cmark_mem *mem);























































CMARK_GFM_EXPORT int cmark_version(void);


CMARK_GFM_EXPORT const char *cmark_version_string(void);
































typedef int32_t bufsize_t;


}



