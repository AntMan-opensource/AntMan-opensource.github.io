















PJ_BEGIN_DECL    typedef struct pjmedia_transport pjmedia_transport;





typedef struct pjmedia_transport_info pjmedia_transport_info;


typedef struct pjmedia_transport_attach_param pjmedia_transport_attach_param;


typedef enum pjmedia_tranport_media_option {
    
    PJMEDIA_TPMED_NO_TRANSPORT_CHECKING = 1,   PJMEDIA_TPMED_RTCP_MUX = 2  } pjmedia_tranport_media_option;







typedef struct pjmedia_sock_info {
    
    pj_sock_t       rtp_sock;

    
    pj_sockaddr     rtp_addr_name;

    
    pj_sock_t       rtcp_sock;

    
    pj_sockaddr     rtcp_addr_name;

} pjmedia_sock_info;



struct pjmedia_transport_op {
    
    pj_status_t (*get_info)(pjmedia_transport *tp, pjmedia_transport_info *info);

    
    pj_status_t (*attach)(pjmedia_transport *tp, void *user_data, const pj_sockaddr_t *rem_addr, const pj_sockaddr_t *rem_rtcp, unsigned addr_len, void (*rtp_cb)(void *user_data, void *pkt, pj_ssize_t size), void (*rtcp_cb)(void *user_data, void *pkt, pj_ssize_t size));










    
    void (*detach)(pjmedia_transport *tp, void *user_data);

    
    pj_status_t (*send_rtp)(pjmedia_transport *tp, const void *pkt, pj_size_t size);


    
    pj_status_t (*send_rtcp)(pjmedia_transport *tp, const void *pkt, pj_size_t size);


    
    pj_status_t (*send_rtcp2)(pjmedia_transport *tp, const pj_sockaddr_t *addr, unsigned addr_len, const void *pkt, pj_size_t size);




    
    pj_status_t (*media_create)(pjmedia_transport *tp, pj_pool_t *sdp_pool, unsigned options, const pjmedia_sdp_session *remote_sdp, unsigned media_index);




    
    pj_status_t (*encode_sdp)(pjmedia_transport *tp, pj_pool_t *sdp_pool, pjmedia_sdp_session *sdp_local, const pjmedia_sdp_session *rem_sdp, unsigned media_index);




    
    pj_status_t (*media_start) (pjmedia_transport *tp, pj_pool_t *tmp_pool, const pjmedia_sdp_session *sdp_local, const pjmedia_sdp_session *sdp_remote, unsigned media_index);




    
    pj_status_t (*media_stop)  (pjmedia_transport *tp);

    
    pj_status_t (*simulate_lost)(pjmedia_transport *tp, pjmedia_dir dir, unsigned pct_lost);


    
    pj_status_t (*destroy)(pjmedia_transport *tp);

    
    pj_status_t (*attach2)(pjmedia_transport *tp, pjmedia_transport_attach_param *att_param);
};



typedef struct pjmedia_transport_op pjmedia_transport_op;



typedef enum pjmedia_transport_type {
    
    PJMEDIA_TRANSPORT_TYPE_UDP,   PJMEDIA_TRANSPORT_TYPE_ICE,   PJMEDIA_TRANSPORT_TYPE_SRTP,   PJMEDIA_TRANSPORT_TYPE_LOOP,   PJMEDIA_TRANSPORT_TYPE_USER  } pjmedia_transport_type;
















struct pjmedia_transport {
    
    char                     name[PJ_MAX_OBJ_NAME];

    
    pjmedia_transport_type   type;

    
    pjmedia_transport_op    *op;

    
    void                    *user_data;
};


typedef struct pjmedia_transport_specific_info {
    
    pjmedia_transport_type   type;

    
    int                      cbsize;

    
    char                     buffer[PJMEDIA_TRANSPORT_SPECIFIC_INFO_MAXSIZE];

    
    pjmedia_transport       *tp;

} pjmedia_transport_specific_info;



struct pjmedia_transport_info {
    
    pjmedia_sock_info sock_info;

    
    pj_sockaddr     src_rtp_name;
    pj_sockaddr     src_rtcp_name;

    
    unsigned specific_info_cnt;

    
    pjmedia_transport_specific_info spc_info[PJMEDIA_TRANSPORT_SPECIFIC_INFO_MAXCNT];

};


typedef struct pjmedia_tp_cb_param {
    
    void               *user_data;

    
    void               *pkt;

    
    pj_ssize_t          size;

    
    pj_sockaddr        *src_addr;

    
    pj_bool_t           rem_switch;

} pjmedia_tp_cb_param;


struct pjmedia_transport_attach_param {
    
    void *stream;

    
    pjmedia_type media_type;

    
    pj_sockaddr rem_addr;

    
    pj_sockaddr rem_rtcp;

    
    unsigned addr_len;

    
    void *user_data;

    
    void (*rtp_cb)(void *user_data, void *pkt, pj_ssize_t);

    
    void (*rtcp_cb)(void *user_data, void *pkt, pj_ssize_t);

    
    void (*rtp_cb2)(pjmedia_tp_cb_param *param);

};


PJ_INLINE(void) pjmedia_transport_info_init(pjmedia_transport_info *info)
{
    pj_bzero(info, sizeof(pjmedia_transport_info));
    info->sock_info.rtp_sock = info->sock_info.rtcp_sock = PJ_INVALID_SOCKET;
}



PJ_INLINE(pj_status_t) pjmedia_transport_get_info(pjmedia_transport *tp, pjmedia_transport_info *info)
{
    if (tp && tp->op && tp->op->get_info)
        return (*tp->op->get_info)(tp, info);
    
    return PJ_ENOTSUP;
}



PJ_INLINE(void*) pjmedia_transport_info_get_spc_info( pjmedia_transport_info *info, pjmedia_transport_type type)

{
    unsigned i;
    for (i = 0; i < info->specific_info_cnt; ++i) {
        if (info->spc_info[i].type == type)
            return (void*)info->spc_info[i].buffer;
    }
    return NULL;
}



PJ_INLINE(pjmedia_transport*) pjmedia_transport_info_get_transport( pjmedia_transport_info *info, pjmedia_transport_type type)

{
    unsigned i;
    for (i = 0; i < info->specific_info_cnt; ++i) {
        if (info->spc_info[i].type == type)
            return info->spc_info[i].tp;
    }
    return NULL;
}



PJ_INLINE(pj_status_t) pjmedia_transport_attach2(pjmedia_transport *tp, pjmedia_transport_attach_param *att_param)
{
    if (tp->op->attach2) {
        return (*tp->op->attach2)(tp, att_param);
    } else {
        return (*tp->op->attach)(tp, att_param->user_data,  (pj_sockaddr_t*)&att_param->rem_addr, (pj_sockaddr_t*)&att_param->rem_rtcp, att_param->addr_len, att_param->rtp_cb, att_param->rtcp_cb);



    }
}



PJ_INLINE(pj_status_t) pjmedia_transport_attach(pjmedia_transport *tp, void *user_data, const pj_sockaddr_t *rem_addr, const pj_sockaddr_t *rem_rtcp, unsigned addr_len, void (*rtp_cb)(void *user_data, void *pkt, pj_ssize_t), void (*rtcp_cb)(void *usr_data, void*pkt, pj_ssize_t))









{
    if (tp->op->attach2) {
        pjmedia_transport_attach_param param;

        pj_bzero(&param, sizeof(param));
        param.user_data = user_data;
        pj_sockaddr_cp(&param.rem_addr, rem_addr);
        if (rem_rtcp && pj_sockaddr_has_addr(rem_rtcp)) {
            pj_sockaddr_cp(&param.rem_rtcp, rem_rtcp);
        } else {
            
            pj_memcpy(&param.rem_rtcp, rem_addr, addr_len);
            pj_sockaddr_set_port(&param.rem_rtcp, pj_sockaddr_get_port(rem_addr) + 1);
        }
        param.addr_len = addr_len;
        param.rtp_cb = rtp_cb;
        param.rtcp_cb = rtcp_cb;

        return (*tp->op->attach2)(tp, &param);
    } else {
        return (*tp->op->attach)(tp, user_data, rem_addr, rem_rtcp, addr_len, rtp_cb, rtcp_cb);
    }
}



PJ_INLINE(void) pjmedia_transport_detach(pjmedia_transport *tp, void *user_data)
{
    (*tp->op->detach)(tp, user_data);
}



PJ_INLINE(pj_status_t) pjmedia_transport_send_rtp(pjmedia_transport *tp, const void *pkt, pj_size_t size)

{
    return (*tp->op->send_rtp)(tp, pkt, size);
}



PJ_INLINE(pj_status_t) pjmedia_transport_send_rtcp(pjmedia_transport *tp, const void *pkt, pj_size_t size)

{
    return (*tp->op->send_rtcp)(tp, pkt, size);
}



PJ_INLINE(pj_status_t) pjmedia_transport_send_rtcp2(pjmedia_transport *tp, const pj_sockaddr_t *addr, unsigned addr_len, const void *pkt, pj_size_t size)



{
    return (*tp->op->send_rtcp2)(tp, addr, addr_len, pkt, size);
}



PJ_INLINE(pj_status_t) pjmedia_transport_media_create(pjmedia_transport *tp, pj_pool_t *sdp_pool, unsigned options, const pjmedia_sdp_session *rem_sdp, unsigned media_index)



{
    return (*tp->op->media_create)(tp, sdp_pool, options, rem_sdp,  media_index);
}



PJ_INLINE(pj_status_t) pjmedia_transport_encode_sdp(pjmedia_transport *tp, pj_pool_t *sdp_pool, pjmedia_sdp_session *sdp, const pjmedia_sdp_session *rem_sdp, unsigned media_index)



{
    return (*tp->op->encode_sdp)(tp, sdp_pool, sdp, rem_sdp, media_index);
}



PJ_INLINE(pj_status_t) pjmedia_transport_media_start(pjmedia_transport *tp, pj_pool_t *tmp_pool, const pjmedia_sdp_session *sdp_local, const pjmedia_sdp_session *sdp_remote, unsigned media_index)



{
    return (*tp->op->media_start)(tp, tmp_pool, sdp_local, sdp_remote,  media_index);
}



PJ_INLINE(pj_status_t) pjmedia_transport_media_stop(pjmedia_transport *tp)
{
    return (*tp->op->media_stop)(tp);
}


PJ_INLINE(pj_status_t) pjmedia_transport_close(pjmedia_transport *tp)
{
    if (tp->op->destroy)
        return (*tp->op->destroy)(tp);
    else return PJ_SUCCESS;
}


PJ_INLINE(pj_status_t) pjmedia_transport_simulate_lost(pjmedia_transport *tp, pjmedia_dir dir, unsigned pct_lost)

{
    return (*tp->op->simulate_lost)(tp, dir, pct_lost);
}


PJ_END_DECL      





