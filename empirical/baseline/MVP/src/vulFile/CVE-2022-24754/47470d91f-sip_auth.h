









PJ_BEGIN_DECL              typedef enum pjsip_cred_data_type {














    PJSIP_CRED_DATA_PLAIN_PASSWD=0,  PJSIP_CRED_DATA_DIGEST	=1,  PJSIP_CRED_DATA_EXT_AKA	=16  } pjsip_cred_data_type;






typedef enum pjsip_auth_qop_type {
    PJSIP_AUTH_QOP_NONE,	     PJSIP_AUTH_QOP_AUTH, PJSIP_AUTH_QOP_AUTH_INT, PJSIP_AUTH_QOP_UNKNOWN } pjsip_auth_qop_type;






typedef pj_status_t (*pjsip_cred_cb)(pj_pool_t *pool, const pjsip_digest_challenge *chal, const pjsip_cred_info *cred, const pj_str_t *method, pjsip_digest_credential *auth);






struct pjsip_cred_info {
    pj_str_t    realm;		
    pj_str_t	scheme;		
    pj_str_t	username;	
    int		data_type;	
    pj_str_t	data;		

    
    union {
	
	struct {
	    pj_str_t	  k;	
	    pj_str_t	  op;	
	    pj_str_t	  amf;	
	    pjsip_cred_cb cb;	
	} aka;

    } ext;
};


typedef struct pjsip_cached_auth_hdr {
    
    PJ_DECL_LIST_MEMBER(struct pjsip_cached_auth_hdr);

    pjsip_method	     method;	
    pjsip_authorization_hdr *hdr;	

} pjsip_cached_auth_hdr;



typedef struct pjsip_cached_auth {
    
    PJ_DECL_LIST_MEMBER(struct pjsip_cached_auth);

    pj_pool_t			*pool;      
    pj_str_t			 realm;	    
    pj_bool_t			 is_proxy;  
    pjsip_auth_qop_type		 qop_value; 
    unsigned			 stale_cnt; 

    pj_uint32_t			 nc;	    
    pj_str_t			 cnonce;    

    pjsip_www_authenticate_hdr	*last_chal; 

    pjsip_cached_auth_hdr	 cached_hdr;


} pjsip_cached_auth;



typedef struct pjsip_auth_clt_pref {
    
    pj_bool_t	initial_auth;

    
    pj_str_t	algorithm;

} pjsip_auth_clt_pref;



PJ_DECL(void) pjsip_auth_clt_pref_dup(pj_pool_t *pool, pjsip_auth_clt_pref *dst, const pjsip_auth_clt_pref *src);




typedef struct pjsip_auth_clt_sess {
    pj_pool_t		*pool;		
    pjsip_endpoint	*endpt;		
    pjsip_auth_clt_pref  pref;		
    unsigned		 cred_cnt;	
    pjsip_cred_info	*cred_info;	
    pjsip_cached_auth	 cached_auth;	

} pjsip_auth_clt_sess;



PJ_DECL(void) pjsip_cred_info_dup(pj_pool_t *pool, pjsip_cred_info *dst, const pjsip_cred_info *src);



PJ_DECL(int) pjsip_cred_info_cmp(const pjsip_cred_info *cred1, const pjsip_cred_info *cred2);



typedef pj_status_t pjsip_auth_lookup_cred( pj_pool_t *pool, const pj_str_t *realm, const pj_str_t *acc_name, pjsip_cred_info *cred_info );





typedef struct pjsip_auth_lookup_cred_param {
    pj_str_t realm;	    
    pj_str_t acc_name;	    
    pjsip_rx_data *rdata;   

} pjsip_auth_lookup_cred_param;



typedef pj_status_t pjsip_auth_lookup_cred2( pj_pool_t *pool, const pjsip_auth_lookup_cred_param *param, pjsip_cred_info *cred_info );








typedef struct pjsip_auth_srv {
    pj_str_t		     realm;	
    pj_bool_t		     is_proxy;	
    pjsip_auth_lookup_cred  *lookup;	
    pjsip_auth_lookup_cred2 *lookup2;	
} pjsip_auth_srv;



PJ_DECL(pj_status_t) pjsip_auth_clt_init( pjsip_auth_clt_sess *sess, pjsip_endpoint *endpt, pj_pool_t *pool, unsigned options);





PJ_DECL(pj_status_t) pjsip_auth_clt_deinit( pjsip_auth_clt_sess *sess);



PJ_DECL(pj_status_t) pjsip_auth_clt_clone( pj_pool_t *pool, pjsip_auth_clt_sess *sess, const pjsip_auth_clt_sess *rhs);



PJ_DECL(pj_status_t) pjsip_auth_clt_set_credentials( pjsip_auth_clt_sess *sess, int cred_cnt, const pjsip_cred_info *c);




PJ_DECL(pj_status_t) pjsip_auth_clt_set_prefs(pjsip_auth_clt_sess *sess, const pjsip_auth_clt_pref *p);



PJ_DECL(pj_status_t) pjsip_auth_clt_get_prefs(pjsip_auth_clt_sess *sess, pjsip_auth_clt_pref *p);


PJ_DECL(pj_status_t) pjsip_auth_clt_init_req( pjsip_auth_clt_sess *sess, pjsip_tx_data *tdata );



PJ_DECL(pj_status_t) pjsip_auth_clt_reinit_req(	pjsip_auth_clt_sess *sess, const pjsip_rx_data *rdata, pjsip_tx_data *old_request, pjsip_tx_data **new_request );




PJ_DECL(pj_status_t) pjsip_auth_srv_init( pj_pool_t *pool, pjsip_auth_srv *auth_srv, const pj_str_t *realm, pjsip_auth_lookup_cred *lookup, unsigned options );






typedef struct pjsip_auth_srv_init_param {
    
    const pj_str_t		*realm;

    
    pjsip_auth_lookup_cred2	*lookup2;

    
    unsigned			 options;

} pjsip_auth_srv_init_param;



PJ_DECL(pj_status_t) pjsip_auth_srv_init2( pj_pool_t *pool, pjsip_auth_srv *auth_srv, const pjsip_auth_srv_init_param *param);




PJ_DECL(pj_status_t) pjsip_auth_srv_verify( pjsip_auth_srv *auth_srv, pjsip_rx_data *rdata, int *status_code );




PJ_DECL(pj_status_t) pjsip_auth_srv_challenge( pjsip_auth_srv *auth_srv, const pj_str_t *qop, const pj_str_t *nonce, const pj_str_t *opaque, pj_bool_t stale, pjsip_tx_data *tdata);






PJ_DECL(void) pjsip_auth_create_digest(pj_str_t *result, const pj_str_t *nonce, const pj_str_t *nc, const pj_str_t *cnonce, const pj_str_t *qop, const pj_str_t *uri, const pj_str_t *realm, const pjsip_cred_info *cred_info, const pj_str_t *method);












PJ_END_DECL    



