












namespace hermes {
namespace hbc {


using param_t = int64_t;



using offset_t = uint32_t;




using opcode_atom_t = uint8_t;

enum Operator {






};

class BytecodeInstructionGenerator {
 protected:
  
  std::vector<opcode_atom_t> opcodes_{};

 public:
  
  offset_t getCurrentLocation() {
    return opcodes_.size();
  }

  offset_t emitOpcode(Operator op) {
    auto loc = getCurrentLocation();
    emitUInt8(op);
    return loc;
  }
  
  void emitOperand(param_t t, int size) {
    while (size--) {
      opcodes_.push_back((opcode_atom_t)t);
      t >>= 8;
    }
  }

  
  std::vector<opcode_atom_t> acquireBytecode() {
    return std::move(opcodes_);
  }















































































  
  
  
  offset_t emitLoadConstDoubleDirect(param_t dst, double value) {
    return emitLoadConstDouble(dst, llvh::DoubleToBits(value));
  }
};
} 
} 



