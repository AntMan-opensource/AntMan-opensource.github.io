

namespace juce {



class JUCE_API  ZipFile {
public:
    
    explicit ZipFile (const File& file);

    
    
    ZipFile (InputStream* inputStream, bool deleteStreamWhenDestroyed);

    
    explicit ZipFile (InputStream& inputStream);

    
    explicit ZipFile (InputSource* inputSource);

    
    ~ZipFile();

    
    
    struct ZipEntry {
        
        String filename;

        
        int64 uncompressedSize;

        
        Time fileTime;

        
        bool isSymbolicLink;

        
        uint32 externalFileAttributes;
    };

    
    
    int getNumEntries() const noexcept;

    
    const ZipEntry* getEntry (int index) const noexcept;

    
    int getIndexOfFileName (const String& fileName, bool ignoreCase = false) const noexcept;

    
    const ZipEntry* getEntry (const String& fileName, bool ignoreCase = false) const noexcept;

    
    void sortEntriesByFilename();

    
    
    InputStream* createStreamForEntry (int index);

    
    InputStream* createStreamForEntry (const ZipEntry& entry);

    
    
    Result uncompressTo (const File& targetDirectory, bool shouldOverwriteFiles = true);

    
    Result uncompressEntry (int index, const File& targetDirectory, bool shouldOverwriteFiles = true);



    
    
    class JUCE_API  Builder {
    public:
        
        Builder();

        
        ~Builder();

        
        void addFile (const File& fileToAdd, int compressionLevel, const String& storedPathName = String());

        
        void addEntry (InputStream* streamToRead, int compressionLevel, const String& storedPathName, Time fileModificationTime);

        
        bool writeToStream (OutputStream& target, double* progress) const;

        
    private:
        struct Item;
        OwnedArray<Item> items;

        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Builder)
    };

private:
    
    struct ZipInputStream;
    struct ZipEntryHolder;

    OwnedArray<ZipEntryHolder> entries;
    CriticalSection lock;
    InputStream* inputStream = nullptr;
    std::unique_ptr<InputStream> streamToDelete;
    std::unique_ptr<InputSource> inputSource;

   #if JUCE_DEBUG
    struct OpenStreamCounter {
        OpenStreamCounter() = default;
        ~OpenStreamCounter();

        int numOpenStreams = 0;
    };

    OpenStreamCounter streamCounter;
   #endif

    void init();

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ZipFile)
};

} 
