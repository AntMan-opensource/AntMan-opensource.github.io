





































































extern   "C" {




































































































































































































































typedef struct UX_HOST_CLASS_AUDIO_INTERFACE_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bDescriptorSubType;
    ULONG           bFormatType;
    ULONG           bNrChannels;
    ULONG           bSubframeSize;
    ULONG           bBitResolution;
    ULONG           bSamFreqType;
} UX_HOST_CLASS_AUDIO_INTERFACE_DESCRIPTOR;




typedef struct UX_HOST_CLASS_AUDIO_INPUT_TERMINAL_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bDescriptorSubType;
    ULONG           bTerminalID;
    ULONG           wTerminalType;
    ULONG           bAssocTerminal;
    ULONG           bNrChannels;
    ULONG           wChannelConfig;
    ULONG           iChannelNames;
    ULONG           iTerminal;
} UX_HOST_CLASS_AUDIO_INPUT_TERMINAL_DESCRIPTOR;




typedef struct UX_HOST_CLASS_AUDIO_OUTPUT_TERMINAL_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bDescriptorSubType;
    ULONG           bTerminalID;
    ULONG           wTerminalType;
    ULONG           bAssocTerminal;
    ULONG           bSourceID;
    ULONG           iTerminal;
} UX_HOST_CLASS_AUDIO_OUTPUT_TERMINAL_DESCRIPTOR;




typedef struct UX_HOST_CLASS_AUDIO_FEATURE_UNIT_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bDescriptorSubType;
    ULONG           bUnitID;
    ULONG           bSourceID;
    ULONG           bControlSize;
    ULONG           bmaControls;
} UX_HOST_CLASS_AUDIO_FEATURE_UNIT_DESCRIPTOR;




typedef struct UX_HOST_CLASS_AUDIO_STREAMING_INTERFACE_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bDescriptorSubtype;
    ULONG           bTerminalLink;
    ULONG           bDelay;
    ULONG           wFormatTag;
} UX_HOST_CLASS_AUDIO_STREAMING_INTERFACE_DESCRIPTOR;




typedef struct UX_HOST_CLASS_AUDIO_STREAMING_ENDPOINT_DESCRIPTOR_STRUCT {

    ULONG           bLength;
    ULONG           bDescriptorType;
    ULONG           bDescriptorSubtype;
    ULONG           bmAttributes;
    ULONG           bLockDelayUnits;
    ULONG           wLockDelay;
} UX_HOST_CLASS_AUDIO_STREAMING_ENDPOINT_DESCRIPTOR;



typedef struct UX_HOST_CLASS_AUDIO_AC_STRUCT {

    
    struct UX_HOST_CLASS_AUDIO_STRUCT *ux_host_class_audio_next_instance;
    UX_HOST_CLASS   *ux_host_class_audio_class;
    UX_INTERFACE    *ux_host_class_audio_interface;

    UX_DEVICE       *ux_host_class_audio_device;
    UCHAR *         ux_host_class_audio_configuration_descriptor;
    ULONG           ux_host_class_audio_configuration_descriptor_length;

    
    UX_ENDPOINT     *ux_host_class_audio_interrupt_endpoint;
    VOID            (*ux_host_class_audio_interrupt_callback)(struct UX_HOST_CLASS_AUDIO_AC_STRUCT*ac, UCHAR*msg, ULONG len, VOID*arg);
    VOID            *ux_host_class_audio_interrupt_callback_arg;
    UINT            ux_host_class_audio_interrupt_started;

    UINT            ux_host_class_audio_as_count;
    struct UX_HOST_CLASS_AUDIO_STRUCT *ux_host_class_audio_as[2];
} UX_HOST_CLASS_AUDIO_AC;



typedef struct UX_HOST_CLASS_AUDIO_STRUCT {

    
    struct UX_HOST_CLASS_AUDIO_STRUCT *ux_host_class_audio_next_instance;
    UX_HOST_CLASS   *ux_host_class_audio_class;
    UX_INTERFACE    *ux_host_class_audio_streaming_interface;

    UX_DEVICE       *ux_host_class_audio_device;
    UCHAR *         ux_host_class_audio_configuration_descriptor;
    ULONG           ux_host_class_audio_configuration_descriptor_length;

    
    ULONG           ux_host_class_audio_control_interface_number;
    UCHAR           *ux_host_class_audio_sampling_descriptor;   
    UX_ENDPOINT     *ux_host_class_audio_isochronous_endpoint;

    UX_ENDPOINT     *ux_host_class_audio_feedback_endpoint;
    UCHAR           ux_host_class_audio_feedback_buffer[4];     


    UX_HOST_CLASS_AUDIO_AC *ux_host_class_audio_ac;

    struct UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST_STRUCT *ux_host_class_audio_head_transfer_request;
    struct UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST_STRUCT *ux_host_class_audio_tail_transfer_request;
    UINT            ux_host_class_audio_state;
    ULONG           ux_host_class_audio_terminal_link;
    ULONG           ux_host_class_audio_type;
    ULONG           ux_host_class_audio_packet_size;
    ULONG           ux_host_class_audio_packet_freq;
    ULONG           ux_host_class_audio_packet_fraction;

    ULONG           ux_host_class_audio_feature_unit_id;
    UINT            ux_host_class_audio_channels;
    ULONG           ux_host_class_audio_channel_control[UX_HOST_CLASS_AUDIO_MAX_CHANNEL];

    UX_MUTEX        ux_host_class_audio_mutex;
} UX_HOST_CLASS_AUDIO;






















typedef struct UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST_STRUCT {

    ULONG           ux_host_class_audio_transfer_request_status;
    UCHAR           *ux_host_class_audio_transfer_request_data_pointer;
    ULONG           ux_host_class_audio_transfer_request_requested_length;
    ULONG           ux_host_class_audio_transfer_request_packet_size;    
    ULONG           ux_host_class_audio_transfer_request_actual_length;
    VOID            (*ux_host_class_audio_transfer_request_completion_function) (struct UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST_STRUCT *);
    UX_SEMAPHORE    ux_host_class_audio_transfer_request_semaphore;
    VOID            *ux_host_class_audio_transfer_request_class_instance;
    UINT            ux_host_class_audio_transfer_request_completion_code;
    struct UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST_STRUCT *ux_host_class_audio_transfer_request_next_audio_transfer_request;
    UX_TRANSFER     ux_host_class_audio_transfer_request;
} UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST;




typedef struct UX_HOST_CLASS_AUDIO_CONTROL_STRUCT {

    ULONG           ux_host_class_audio_control;
    ULONG           ux_host_class_audio_control_channel;
    ULONG           ux_host_class_audio_control_min;
    ULONG           ux_host_class_audio_control_max;
    ULONG           ux_host_class_audio_control_res;
    ULONG           ux_host_class_audio_control_cur;

    ULONG           ux_host_class_audio_control_entity; 
    ULONG           ux_host_class_audio_control_size;   
} UX_HOST_CLASS_AUDIO_CONTROL;


typedef struct UX_HOST_CLASS_AUDIO_CHANNEL_STRUCT {

    ULONG           ux_host_class_audio_channel_control;
    ULONG           ux_host_class_audio_channel;
} UX_HOST_CLASS_AUDIO_CHANNEL;




typedef struct UX_HOST_CLASS_AUDIO_SAMPLING_STRUCT {

    ULONG           ux_host_class_audio_sampling_channels;
    ULONG           ux_host_class_audio_sampling_frequency;
    ULONG           ux_host_class_audio_sampling_resolution;
} UX_HOST_CLASS_AUDIO_SAMPLING;




typedef struct UX_HOST_CLASS_AUDIO_SAMPLING_CHARACTERISTICS_STRUCT {

    ULONG           ux_host_class_audio_sampling_characteristics_channels;
    ULONG           ux_host_class_audio_sampling_characteristics_frequency_low;
    ULONG           ux_host_class_audio_sampling_characteristics_frequency_high;
    ULONG           ux_host_class_audio_sampling_characteristics_resolution;

    
    ULONG           ux_host_class_audio_sampling_characteristics_clock_mul;
    ULONG           ux_host_class_audio_sampling_characteristics_clock_div;

    
    
    UCHAR           *ux_host_class_audio_sampling_characteristics_descriptor;
} UX_HOST_CLASS_AUDIO_SAMPLING_CHARACTERISTICS;




UINT    _ux_host_class_audio_activate(UX_HOST_CLASS_COMMAND *command);
UINT    _ux_host_class_audio_alternate_setting_locate(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_SAMPLING *audio_sampling, UINT *alternate_setting);
UINT    _ux_host_class_audio_configure(UX_HOST_CLASS_AUDIO *audio);
UINT    _ux_host_class_audio_control_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control);
UINT    _ux_host_class_audio_control_value_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control);
UINT    _ux_host_class_audio_control_value_set(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control);
UINT    _ux_host_class_audio_deactivate(UX_HOST_CLASS_COMMAND *command);
UINT    _ux_host_class_audio_descriptor_get(UX_HOST_CLASS_AUDIO *audio);
UINT    _ux_host_class_audio_device_controls_list_get(UX_HOST_CLASS_AUDIO *audio);
UINT    _ux_host_class_audio_device_type_get(UX_HOST_CLASS_AUDIO *audio);
UINT    _ux_host_class_audio_endpoints_get(UX_HOST_CLASS_AUDIO *audio);
UINT    _ux_host_class_audio_entry(UX_HOST_CLASS_COMMAND *command);
UINT    _ux_host_class_audio_read(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST *audio_transfer_request);
UINT    _ux_host_class_audio_streaming_sampling_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_SAMPLING_CHARACTERISTICS *audio_sampling);
UINT    _ux_host_class_audio_streaming_sampling_set(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_SAMPLING *audio_sampling);
UINT    _ux_host_class_audio_streaming_terminal_get(UX_HOST_CLASS_AUDIO *audio);
UINT    _ux_host_class_audio_transfer_request(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST *audio_transfer_request);
VOID    _ux_host_class_audio_transfer_request_completed(UX_TRANSFER *transfer_request);
UINT    _ux_host_class_audio_write(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_TRANSFER_REQUEST *audio_transfer_request);

UINT    _ux_host_class_audio_control_request(UX_HOST_CLASS_AUDIO *audio, UINT streaming_control, UINT request_type, UINT request, UINT request_value, UINT spec_id, UCHAR *parameter, ULONG parameter_size, ULONG *actual_size);





UINT    _ux_host_class_audio_descriptors_parse(UX_HOST_CLASS_AUDIO *audio, UINT(*parse_function)(VOID  *arg, UCHAR *packed_interface_descriptor, UCHAR *packed_endpoint_descriptor, UCHAR *packed_audio_descriptor), VOID* arg);





UINT    _ux_host_class_audio_raw_sampling_parse(UX_HOST_CLASS_AUDIO *audio, UINT(*parse_function)(VOID  *arg, UCHAR *packed_interface_descriptor, UX_HOST_CLASS_AUDIO_SAMPLING_CHARACTERISTICS *sam_attr), VOID* arg);




UINT    _ux_host_class_audio_stop(UX_HOST_CLASS_AUDIO *audio);

VOID    _ux_host_class_audio_feedback_transfer_completed(UX_TRANSFER *transfer_request);

UINT    _ux_host_class_audio_feedback_get(UX_HOST_CLASS_AUDIO *audio, UCHAR *feedback);
UINT    _ux_host_class_audio_feedback_set(UX_HOST_CLASS_AUDIO *audio, UCHAR *feedback);

UINT    _ux_host_class_audio_entity_control_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control);
UINT    _ux_host_class_audio_entity_control_value_get(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control);
UINT    _ux_host_class_audio_entity_control_value_set(UX_HOST_CLASS_AUDIO *audio, UX_HOST_CLASS_AUDIO_CONTROL *audio_control);

UINT    _ux_host_class_audio_interrupt_start(UX_HOST_CLASS_AUDIO_AC *audio, VOID(*callback_function)(UX_HOST_CLASS_AUDIO_AC *audio, UCHAR *message, ULONG length, VOID *arg), VOID *arg);



VOID    _ux_host_class_audio_interrupt_notification(UX_TRANSFER *transfer_request);
















































}





