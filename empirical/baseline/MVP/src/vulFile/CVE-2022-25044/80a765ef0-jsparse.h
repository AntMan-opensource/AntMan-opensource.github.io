






void jspInit();
void jspKill();


void jspSoftInit(); 
void jspSoftKill(); 

bool jspIsConstructor(JsVar *constructor, const char *constructorName);

JsVar *jspGetPrototype(JsVar *object);

JsVar *jspGetConstructor(JsVar *object);


bool jspCheckStackPosition();


JsVar *jspNewBuiltin(const char *name);


NO_INLINE JsVar *jspNewPrototype(const char *instanceOf);


JsVar *jspNewObject(const char *name, const char *instanceOf);


bool jspIsInterrupted();

void jspSetInterrupted(bool interrupt);

bool jspHasError();

void jspSetError(bool lineReported);

void jspSetException(JsVar *value);

JsVar *jspGetException();

JsVar *jspGetStackTrace();


JsVar *jspEvaluateExpressionVar(JsVar *str);

JsVar *jspEvaluateVar(JsVar *str, JsVar *scope, uint16_t lineNumberOffset);

JsVar *jspEvaluate(const char *str, bool stringIsStatic);

JsVar *jspExecuteJSFunction(const char *jsCode, JsVar *thisArg, int argCount, JsVar **argPtr);

JsVar *jspExecuteFunction(JsVar *func, JsVar *thisArg, int argCount, JsVar **argPtr);


JsVar *jspEvaluateModule(JsVar *moduleContents);


JsVar *jspGetPrototypeOwner(JsVar *proto);


typedef enum  {
  EXEC_NO = 0, EXEC_YES = 1, EXEC_BREAK = 2, EXEC_CONTINUE = 4, EXEC_RETURN = 8,  EXEC_INTERRUPTED = 16, EXEC_EXCEPTION = 32, EXEC_ERROR = 64, EXEC_ERROR_LINE_REPORTED = 128,  EXEC_FOR_INIT = 256, EXEC_IN_LOOP = 512, EXEC_IN_SWITCH = 1024,   EXEC_CTRL_C = 2048, EXEC_CTRL_C_WAIT = 4096,    EXEC_DEBUGGER_NEXT_LINE = 8192,  EXEC_DEBUGGER_STEP_INTO = 16384,  EXEC_DEBUGGER_FINISH_FUNCTION = 32768, EXEC_DEBUGGER_MASK = EXEC_DEBUGGER_NEXT_LINE | EXEC_DEBUGGER_STEP_INTO | EXEC_DEBUGGER_FINISH_FUNCTION,   EXEC_RUN_MASK = EXEC_YES|EXEC_BREAK|EXEC_CONTINUE|EXEC_RETURN|EXEC_INTERRUPTED|EXEC_EXCEPTION, EXEC_ERROR_MASK = EXEC_INTERRUPTED|EXEC_ERROR|EXEC_EXCEPTION, EXEC_NO_PARSE_MASK = EXEC_INTERRUPTED|EXEC_ERROR, EXEC_SAVE_RESTORE_MASK = EXEC_YES|EXEC_BREAK|EXEC_CONTINUE|EXEC_RETURN|EXEC_IN_LOOP|EXEC_IN_SWITCH|EXEC_ERROR_MASK, EXEC_CTRL_C_MASK = EXEC_CTRL_C | EXEC_CTRL_C_WAIT, EXEC_PERSIST = EXEC_ERROR_MASK|EXEC_CTRL_C_MASK, } JsExecFlags;




































typedef struct {
  JsVar  *root;       
  JsVar  *hiddenRoot; 

  
  JsVar *scopesVar;
  
  JsVar *thisVar;

  volatile JsExecFlags execute;
} JsExecInfo;


extern JsExecInfo execInfo;


typedef enum {
  JSP_NOSKIP_A = 1, JSP_NOSKIP_B = 2, JSP_NOSKIP_C = 4, JSP_NOSKIP_D = 8, JSP_NOSKIP_E = 16, JSP_NOSKIP_F = 32, JSP_NOSKIP_G = 64, JSP_NOSKIP_H = 128, } JspSkipFlags;








bool jspParseEmptyFunction();    


JsVar *jspParse();


JsVar *jspeFunctionCall(JsVar *function, JsVar *functionName, JsVar *thisArg, bool isParsing, int argCount, JsVar **argPtr);



JsVar *jspGetNamedVariable(const char *tokenName);


JsVar *jspGetNamedField(JsVar *object, const char* name, bool returnName);
JsVar *jspGetVarNamedField(JsVar *object, JsVar *nameVar, bool returnName);


JsVar *jspCallNamedFunction(JsVar *object, char* name, int argCount, JsVar **argPtr);



JsVar *jspeiFindInScopes(const char *name);


JsVar *jspeiGetTopScope();


