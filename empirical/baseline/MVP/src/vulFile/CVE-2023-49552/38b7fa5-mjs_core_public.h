







typedef unsigned __int64 uint64_t;
typedef int int32_t;
typedef unsigned char uint8_t;






extern "C" {






typedef uint64_t mjs_val_t;




struct mjs {
  
};


struct mjs;

typedef enum mjs_err {
  MJS_OK, MJS_SYNTAX_ERROR, MJS_REFERENCE_ERROR, MJS_TYPE_ERROR, MJS_OUT_OF_MEMORY, MJS_INTERNAL_ERROR, MJS_NOT_IMPLEMENTED_ERROR, MJS_FILE_READ_ERROR, MJS_BAD_ARGS_ERROR,  MJS_ERRS_CNT } mjs_err_t;










struct mjs;


struct mjs *mjs_create();

struct mjs_create_opts {
  
  const struct bf_code *code;
};


struct mjs *mjs_create_opt(struct mjs_create_opts opts);


void mjs_destroy(struct mjs *mjs);

mjs_val_t mjs_get_global(struct mjs *mjs);


void mjs_own(struct mjs *mjs, mjs_val_t *v);


int mjs_disown(struct mjs *mjs, mjs_val_t *v);

mjs_err_t mjs_set_errorf(struct mjs *mjs, mjs_err_t err, const char *fmt, ...);


mjs_err_t mjs_prepend_errorf(struct mjs *mjs, mjs_err_t err, const char *fmt, ...);


void mjs_print_error(struct mjs *mjs, FILE *fp, const char *msg, int print_stack_trace);


const char *mjs_strerror(struct mjs *mjs, enum mjs_err err);


void mjs_set_generate_jsc(struct mjs *mjs, int generate_jsc);


int mjs_nargs(struct mjs *mjs);


mjs_val_t mjs_arg(struct mjs *mjs, int n);


void mjs_return(struct mjs *mjs, mjs_val_t v);


}



