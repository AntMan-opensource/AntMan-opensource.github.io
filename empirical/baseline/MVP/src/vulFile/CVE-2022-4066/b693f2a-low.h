











extern "C" {




  void *onion_low_malloc(size_t sz);


  void *onion_low_scalar_malloc(size_t sz);



  void *onion_low_calloc(size_t nmemb, size_t size);



  void *onion_low_realloc(void *ptr, size_t size);



  char *onion_low_strdup(const char *str);







  void *onion_low_try_malloc(size_t sz);



  void *onion_low_try_scalar_malloc(size_t sz);



  void *onion_low_try_calloc(size_t nmemb, size_t size);



  void *onion_low_try_realloc(void *ptr, size_t size);



  char *onion_low_try_strdup(const char *str);

  


  void onion_low_free(void *ptr);





  typedef void *onion_low_malloc_sigt(size_t sz);
  typedef void *onion_low_scalar_malloc_sigt(size_t sz);
  typedef void *onion_low_calloc_sigt(size_t nmemb, size_t size);
  typedef void *onion_low_realloc_sigt(void *ptr, size_t size);
  typedef char *onion_low_strdup_sigt(const char *ptr);
  typedef void onion_low_free_sigt(void *ptr);


  typedef void onion_low_memoryfailure_sigt(const char *msg);



  void onion_low_initialize_memory_allocation (onion_low_malloc_sigt * mallocrout, onion_low_scalar_malloc_sigt * scalarmallocrout, onion_low_calloc_sigt * callocrout, onion_low_realloc_sigt * reallocrout, onion_low_strdup_sigt * strduprout, onion_low_free_sigt * freerout, onion_low_memoryfailure_sigt * memoryfailurerout);









  int onion_low_pthread_create(pthread_t * thread, const pthread_attr_t * attr, void *(*start_routine) (void *), void *arg);

  typedef int onion_low_pthread_create_sigt(pthread_t * thread, const pthread_attr_t * attr, void *(*start_routine) (void *), void *arg);



  int onion_low_pthread_join(pthread_t thread, void **retval);
  typedef int onion_low_pthread_join_sigt(pthread_t thread, void **retval);

  int onion_low_pthread_cancel(pthread_t thread);
  typedef int onion_low_pthread_cancel_sigt(pthread_t thread);

  int onion_low_pthread_detach(pthread_t thread);
  typedef int onion_low_pthread_detach_sigt(pthread_t thread);

  void onion_low_pthread_exit(void *retval);
  typedef void onion_low_pthread_exit_sigt(void *retval);

  int onion_low_pthread_sigmask(int how, const sigset_t * set, sigset_t * oldset);
  typedef int onion_low_pthread_sigmask_sigt(int how, const sigset_t * set, sigset_t * oldset);


  void onion_low_initialize_threads (onion_low_pthread_create_sigt * thrcreator, onion_low_pthread_join_sigt * thrjoiner, onion_low_pthread_cancel_sigt * thrcanceler, onion_low_pthread_detach_sigt * thrdetacher, onion_low_pthread_exit_sigt * threxiter, onion_low_pthread_sigmask_sigt * thrsigmasker);









}                               


