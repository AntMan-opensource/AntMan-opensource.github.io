













namespace Envoy {
namespace Ssl {

class CertificateValidationContextConfig {
public:
  virtual ~CertificateValidationContextConfig() = default;

  
  virtual const std::string& caCert() const PURE;

  
  virtual const std::string& caCertPath() const PURE;

  
  virtual const std::string& certificateRevocationList() const PURE;

  
  virtual const std::string& certificateRevocationListPath() const PURE;

  
  virtual const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>& subjectAltNameMatchers() const PURE;

  
  virtual const std::vector<std::string>& verifyCertificateHashList() const PURE;

  
  virtual const std::vector<std::string>& verifyCertificateSpkiList() const PURE;

  
  virtual bool allowExpiredCertificate() const PURE;

  
  virtual envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext::
      TrustChainVerification trustChainVerification() const PURE;

  
  virtual const absl::optional<envoy::config::core::v3::TypedExtensionConfig>& customValidatorConfig() const PURE;

  
  virtual Api::Api& api() const PURE;

  
  virtual bool onlyVerifyLeafCertificateCrl() const PURE;
};

using CertificateValidationContextConfigPtr = std::unique_ptr<CertificateValidationContextConfig>;

} 
} 
