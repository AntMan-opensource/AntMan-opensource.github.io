


















namespace tflite {





constexpr int kDefaultTensorAlignment = 64;





constexpr char kFlexCustomCodePrefix[] = "Flex";



bool IsFlexOp(const char* custom_name);



TfLiteIntArray* ConvertVectorToTfLiteIntArray(const std::vector<int>& input);




TfLiteIntArray* ConvertArrayToTfLiteIntArray(const int rank, const int* dims);



bool EqualArrayAndTfLiteIntArray(const TfLiteIntArray* a, const int b_size, const int* b);

size_t CombineHashes(std::initializer_list<size_t> hashes);

struct TfLiteIntArrayDeleter {
  void operator()(TfLiteIntArray* a) {
    if (a) TfLiteIntArrayFree(a);
  }
};



std::unique_ptr<TfLiteIntArray, TfLiteIntArrayDeleter> BuildTfLiteIntArray( const std::vector<int>& data);



TfLiteStatus GetSizeOfType(TfLiteContext* context, const TfLiteType type, size_t* bytes);





TfLiteRegistration CreateUnresolvedCustomOp(const char* custom_op_name);


bool IsUnresolvedCustomOp(const TfLiteRegistration& registration);


std::string GetOpNameByRegistration(const TfLiteRegistration& registration);



constexpr char kValidationSubgraphNamePrefix[] = "VALIDATION:";



bool IsValidationSubgraph(const char* name);
}  


