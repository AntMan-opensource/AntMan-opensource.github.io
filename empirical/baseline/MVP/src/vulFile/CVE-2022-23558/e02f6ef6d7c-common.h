































extern "C" {






typedef enum TfLiteExternalContextType {
  kTfLiteEigenContext = 0,        kTfLiteGemmLowpContext = 1, kTfLiteEdgeTpuContext = 2, kTfLiteCpuBackendContext = 3, kTfLiteMaxExternalContexts = 4 } TfLiteExternalContextType;







struct TfLiteContext;
struct TfLiteDelegate;
struct TfLiteRegistration;






typedef struct TfLiteExternalContext {
  TfLiteExternalContextType type;
  TfLiteStatus (*Refresh)(struct TfLiteContext* context);
} TfLiteExternalContext;





typedef struct TfLiteIntArray {
  int size;


  
  int data[1];



  
  
  int data[0];

  int data[];

} TfLiteIntArray;



int TfLiteIntArrayGetSizeInBytes(int size);




TfLiteIntArray* TfLiteIntArrayCreate(int size);



int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b);


int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size, const int b_data[]);




TfLiteIntArray* TfLiteIntArrayCopy(const TfLiteIntArray* src);


void TfLiteIntArrayFree(TfLiteIntArray* a);



typedef struct TfLiteFloatArray {
  int size;

  
  float data[1];



  
  
  float data[0];

  float data[];

} TfLiteFloatArray;



int TfLiteFloatArrayGetSizeInBytes(int size);




TfLiteFloatArray* TfLiteFloatArrayCreate(int size);


void TfLiteFloatArrayFree(TfLiteFloatArray* a);


























































































typedef struct TfLiteComplex64 {
  float re, im;  
} TfLiteComplex64;


typedef struct TfLiteComplex128 {
  double re, im;  
} TfLiteComplex128;


typedef struct TfLiteFloat16 {
  uint16_t data;
} TfLiteFloat16;


const char* TfLiteTypeGetName(TfLiteType type);


typedef enum TfLiteQuantizationType {
  
  kTfLiteNoQuantization = 0,   kTfLiteAffineQuantization = 1, } TfLiteQuantizationType;





typedef struct TfLiteQuantization {
  
  TfLiteQuantizationType type;
  
  
  
  void* params;
} TfLiteQuantization;








typedef struct TfLiteAffineQuantization {
  TfLiteFloatArray* scale;
  TfLiteIntArray* zero_point;
  int32_t quantized_dimension;
} TfLiteAffineQuantization;


typedef union TfLitePtrUnion {
  
  int32_t* i32;
  uint32_t* u32;
  int64_t* i64;
  uint64_t* u64;
  float* f;
  TfLiteFloat16* f16;
  double* f64;
  char* raw;
  const char* raw_const;
  uint8_t* uint8;
  bool* b;
  int16_t* i16;
  TfLiteComplex64* c64;
  TfLiteComplex128* c128;
  int8_t* int8;
  
  void* data;
} TfLitePtrUnion;













typedef enum TfLiteAllocationType {
  kTfLiteMemNone = 0, kTfLiteMmapRo, kTfLiteArenaRw, kTfLiteArenaRwPersistent, kTfLiteDynamic, kTfLitePersistentRo, kTfLiteCustom, } TfLiteAllocationType;









typedef int TfLiteBufferHandle;
enum {
  kTfLiteNullBufferHandle = -1, };


typedef enum TfLiteDimensionType {
  kTfLiteDimDense = 0, kTfLiteDimSparseCSR, } TfLiteDimensionType;



typedef struct TfLiteDimensionMetadata {
  TfLiteDimensionType format;
  int dense_size;
  TfLiteIntArray* array_segments;
  TfLiteIntArray* array_indices;
} TfLiteDimensionMetadata;



typedef struct TfLiteSparsity {
  TfLiteIntArray* traversal_order;
  TfLiteIntArray* block_map;
  TfLiteDimensionMetadata* dim_metadata;
  int dim_metadata_size;
} TfLiteSparsity;





typedef struct TfLiteCustomAllocation {
  void* data;
  size_t bytes;
} TfLiteCustomAllocation;



typedef enum TfLiteCustomAllocationFlags {
  kTfLiteCustomAllocationFlagsNone = 0,     kTfLiteCustomAllocationFlagsSkipAlignCheck = 1, } TfLiteCustomAllocationFlags;









typedef struct TfLiteTensor {
  
  
  TfLiteType type;
  
  
  TfLitePtrUnion data;
  
  
  
  TfLiteIntArray* dims;
  
  TfLiteQuantizationParams params;
  
  
  
  
  
  TfLiteAllocationType allocation_type;
  
  
  
  
  size_t bytes;

  
  const void* allocation;

  
  const char* name;

  
  
  struct TfLiteDelegate* delegate;

  
  
  
  TfLiteBufferHandle buffer_handle;

  
  
  
  
  
  bool data_is_stale;

  
  bool is_variable;

  
  TfLiteQuantization quantization;

  
  
  
  TfLiteSparsity* sparsity;

  
  
  
  
  const TfLiteIntArray* dims_signature;
} TfLiteTensor;




typedef struct TfLiteNode {
  
  TfLiteIntArray* inputs;

  
  TfLiteIntArray* outputs;

  
  
  TfLiteIntArray* intermediates;

  
  
  
  TfLiteIntArray* temporaries;

  
  void* user_data;

  
  
  void* builtin_data;

  
  
  const void* custom_initial_data;
  int custom_initial_data_size;

  
  
  
  struct TfLiteDelegate* delegate;

  
  bool might_have_side_effect;
} TfLiteNode;
















typedef struct TfLiteTensor {
  
  
  TfLiteQuantization quantization;

  
  TfLiteQuantizationParams params;

  
  
  TfLitePtrUnion data;

  
  
  
  TfLiteIntArray* dims;

  
  
  
  
  size_t bytes;

  
  
  TfLiteType type;

  
  
  
  
  
  TfLiteAllocationType allocation_type;

  
  bool is_variable;
} TfLiteTensor;








typedef struct TfLiteNode {
  
  TfLiteIntArray* inputs;

  
  TfLiteIntArray* outputs;

  
  
  TfLiteIntArray* intermediates;

  
  void* user_data;

  
  
  void* builtin_data;

  
  
  const void* custom_initial_data;
  int custom_initial_data_size;
} TfLiteNode;






typedef struct TfLiteEvalTensor {
  
  
  TfLitePtrUnion data;

  
  
  TfLiteIntArray* dims;

  
  
  TfLiteType type;
} TfLiteEvalTensor;



void TfLiteTensorDataFree(TfLiteTensor* t);


void TfLiteQuantizationFree(TfLiteQuantization* quantization);


void TfLiteSparsityFree(TfLiteSparsity* sparsity);


void TfLiteTensorFree(TfLiteTensor* t);


void TfLiteTensorReset(TfLiteType type, const char* name, TfLiteIntArray* dims, TfLiteQuantizationParams quantization, char* buffer, size_t size, TfLiteAllocationType allocation_type, const void* allocation, bool is_variable, TfLiteTensor* tensor);












TfLiteStatus TfLiteTensorCopy(const TfLiteTensor* src, TfLiteTensor* dst);



void TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor);









typedef struct TfLiteDelegateParams {
  struct TfLiteDelegate* delegate;
  TfLiteIntArray* nodes_to_replace;
  TfLiteIntArray* input_tensors;
  TfLiteIntArray* output_tensors;
} TfLiteDelegateParams;

typedef struct TfLiteContext {
  
  size_t tensors_size;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  TfLiteStatus (*GetExecutionPlan)(struct TfLiteContext* context, TfLiteIntArray** execution_plan);

  
  TfLiteTensor* tensors;

  
  void* impl_;

  
  
  TfLiteStatus (*ResizeTensor)(struct TfLiteContext*, TfLiteTensor* tensor, TfLiteIntArray* new_size);
  
  void (*ReportError)(struct TfLiteContext*, const char* msg, ...);

  
  
  
  TfLiteStatus (*AddTensors)(struct TfLiteContext*, int tensors_to_add, int* first_new_tensor_index);

  
  
  TfLiteStatus (*GetNodeAndRegistration)( struct TfLiteContext*, int node_index, TfLiteNode** node, struct TfLiteRegistration** registration);


  
  
  TfLiteStatus (*ReplaceNodeSubsetsWithDelegateKernels)( struct TfLiteContext*, struct TfLiteRegistration registration, const TfLiteIntArray* nodes_to_replace, struct TfLiteDelegate* delegate);


  
  
  int recommended_num_threads;

  
  
  TfLiteExternalContext* (*GetExternalContext)(struct TfLiteContext*, TfLiteExternalContextType);
  
  
  
  void (*SetExternalContext)(struct TfLiteContext*, TfLiteExternalContextType, TfLiteExternalContext*);

  
  
  
  bool allow_fp32_relax_to_fp16;

  
  void* profiler;

  
  
  
  
  
  void* (*AllocatePersistentBuffer)(struct TfLiteContext* ctx, size_t bytes);

  
  
  
  
  
  
  TfLiteStatus (*AllocateBufferForEval)(struct TfLiteContext* ctx, size_t bytes, void** ptr);

  
  
  
  
  
  TfLiteStatus (*RequestScratchBufferInArena)(struct TfLiteContext* ctx, size_t bytes, int* buffer_idx);

  
  
  
  void* (*GetScratchBuffer)(struct TfLiteContext* ctx, int buffer_idx);

  
  
  
  
  TfLiteStatus (*ResizeTensorExplicit)(struct TfLiteContext* ctx, TfLiteTensor* tensor, int dims, const int* shape);


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  TfLiteStatus (*PreviewDelegatePartitioning)( struct TfLiteContext* context, const TfLiteIntArray* nodes_to_replace, TfLiteDelegateParams** partition_params_array, int* num_partitions);


  
  
  
  TfLiteTensor* (*GetTensor)(const struct TfLiteContext* context, int tensor_idx);

  
  
  
  TfLiteEvalTensor* (*GetEvalTensor)(const struct TfLiteContext* context, int tensor_idx);

  
  
  
  
  
  
  
  
  TfLiteStatus (*GetModelMetadata)(const struct TfLiteContext* context, const char* name, const char** ptr, size_t* bytes);

} TfLiteContext;

typedef struct TfLiteRegistration {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  void* (*init)(TfLiteContext* context, const char* buffer, size_t length);

  
  void (*free)(TfLiteContext* context, void* buffer);

  
  
  
  
  
  
  TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node);

  
  
  TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node);

  
  
  
  
  
  const char* (*profiling_string)(const TfLiteContext* context, const TfLiteNode* node);

  
  
  
  
  
  int32_t builtin_code;

  
  
  
  
  const char* custom_name;

  
  
  
  int version;
} TfLiteRegistration;



typedef enum TfLiteDelegateFlags {
  kTfLiteDelegateFlagsNone = 0,          kTfLiteDelegateFlagsAllowDynamicTensors = 1,                   kTfLiteDelegateFlagsRequirePropagatedShapes = 2 } TfLiteDelegateFlags;































typedef struct TfLiteDelegate {
  
  
  
  void* data_;

  
  
  
  
  
  TfLiteStatus (*Prepare)(TfLiteContext* context, struct TfLiteDelegate* delegate);

  
  
  
  
  TfLiteStatus (*CopyFromBufferHandle)(TfLiteContext* context, struct TfLiteDelegate* delegate, TfLiteBufferHandle buffer_handle, TfLiteTensor* tensor);



  
  
  TfLiteStatus (*CopyToBufferHandle)(TfLiteContext* context, struct TfLiteDelegate* delegate, TfLiteBufferHandle buffer_handle, TfLiteTensor* tensor);



  
  
  
  
  void (*FreeBufferHandle)(TfLiteContext* context, struct TfLiteDelegate* delegate, TfLiteBufferHandle* handle);


  
  int64_t flags;
} TfLiteDelegate;



TfLiteDelegate TfLiteDelegateCreate(void);


}  


