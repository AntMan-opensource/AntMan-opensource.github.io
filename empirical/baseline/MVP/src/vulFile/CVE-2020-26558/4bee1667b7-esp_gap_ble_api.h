























extern "C" {





















typedef uint8_t esp_ble_key_type_t;










typedef uint8_t   esp_ble_auth_req_t;         









































































typedef uint8_t esp_ble_io_cap_t;               


typedef enum {
    ESP_GAP_BLE_ADV_DATA_SET_COMPLETE_EVT        = 0,        ESP_GAP_BLE_SCAN_RSP_DATA_SET_COMPLETE_EVT, ESP_GAP_BLE_SCAN_PARAM_SET_COMPLETE_EVT, ESP_GAP_BLE_SCAN_RESULT_EVT, ESP_GAP_BLE_ADV_DATA_RAW_SET_COMPLETE_EVT, ESP_GAP_BLE_SCAN_RSP_DATA_RAW_SET_COMPLETE_EVT, ESP_GAP_BLE_ADV_START_COMPLETE_EVT, ESP_GAP_BLE_SCAN_START_COMPLETE_EVT, ESP_GAP_BLE_AUTH_CMPL_EVT, ESP_GAP_BLE_KEY_EVT, ESP_GAP_BLE_SEC_REQ_EVT, ESP_GAP_BLE_PASSKEY_NOTIF_EVT, ESP_GAP_BLE_PASSKEY_REQ_EVT, ESP_GAP_BLE_OOB_REQ_EVT, ESP_GAP_BLE_LOCAL_IR_EVT, ESP_GAP_BLE_LOCAL_ER_EVT, ESP_GAP_BLE_NC_REQ_EVT, ESP_GAP_BLE_ADV_STOP_COMPLETE_EVT, ESP_GAP_BLE_SCAN_STOP_COMPLETE_EVT, ESP_GAP_BLE_SET_STATIC_RAND_ADDR_EVT, ESP_GAP_BLE_UPDATE_CONN_PARAMS_EVT, ESP_GAP_BLE_SET_PKT_LENGTH_COMPLETE_EVT, ESP_GAP_BLE_SET_LOCAL_PRIVACY_COMPLETE_EVT, ESP_GAP_BLE_REMOVE_BOND_DEV_COMPLETE_EVT, ESP_GAP_BLE_CLEAR_BOND_DEV_COMPLETE_EVT, ESP_GAP_BLE_GET_BOND_DEV_COMPLETE_EVT, ESP_GAP_BLE_READ_RSSI_COMPLETE_EVT, ESP_GAP_BLE_UPDATE_WHITELIST_COMPLETE_EVT, ESP_GAP_BLE_UPDATE_DUPLICATE_EXCEPTIONAL_LIST_COMPLETE_EVT, ESP_GAP_BLE_SET_CHANNELS_EVT, ESP_GAP_BLE_EVT_MAX, } esp_gap_ble_cb_event_t;
































typedef uint8_t esp_gap_ble_channels[ESP_GAP_BLE_CHANNELS_LEN];











typedef enum {
    ESP_BLE_AD_TYPE_FLAG                     = 0x01,     ESP_BLE_AD_TYPE_16SRV_PART               = 0x02, ESP_BLE_AD_TYPE_16SRV_CMPL               = 0x03, ESP_BLE_AD_TYPE_32SRV_PART               = 0x04, ESP_BLE_AD_TYPE_32SRV_CMPL               = 0x05, ESP_BLE_AD_TYPE_128SRV_PART              = 0x06, ESP_BLE_AD_TYPE_128SRV_CMPL              = 0x07, ESP_BLE_AD_TYPE_NAME_SHORT               = 0x08, ESP_BLE_AD_TYPE_NAME_CMPL                = 0x09, ESP_BLE_AD_TYPE_TX_PWR                   = 0x0A, ESP_BLE_AD_TYPE_DEV_CLASS                = 0x0D, ESP_BLE_AD_TYPE_SM_TK                    = 0x10, ESP_BLE_AD_TYPE_SM_OOB_FLAG              = 0x11, ESP_BLE_AD_TYPE_INT_RANGE                = 0x12, ESP_BLE_AD_TYPE_SOL_SRV_UUID             = 0x14, ESP_BLE_AD_TYPE_128SOL_SRV_UUID          = 0x15, ESP_BLE_AD_TYPE_SERVICE_DATA             = 0x16, ESP_BLE_AD_TYPE_PUBLIC_TARGET            = 0x17, ESP_BLE_AD_TYPE_RANDOM_TARGET            = 0x18, ESP_BLE_AD_TYPE_APPEARANCE               = 0x19, ESP_BLE_AD_TYPE_ADV_INT                  = 0x1A, ESP_BLE_AD_TYPE_LE_DEV_ADDR              = 0x1b, ESP_BLE_AD_TYPE_LE_ROLE                  = 0x1c, ESP_BLE_AD_TYPE_SPAIR_C256               = 0x1d, ESP_BLE_AD_TYPE_SPAIR_R256               = 0x1e, ESP_BLE_AD_TYPE_32SOL_SRV_UUID           = 0x1f, ESP_BLE_AD_TYPE_32SERVICE_DATA           = 0x20, ESP_BLE_AD_TYPE_128SERVICE_DATA          = 0x21, ESP_BLE_AD_TYPE_LE_SECURE_CONFIRM        = 0x22, ESP_BLE_AD_TYPE_LE_SECURE_RANDOM         = 0x23, ESP_BLE_AD_TYPE_URI                      = 0x24, ESP_BLE_AD_TYPE_INDOOR_POSITION          = 0x25, ESP_BLE_AD_TYPE_TRANS_DISC_DATA          = 0x26, ESP_BLE_AD_TYPE_LE_SUPPORT_FEATURE       = 0x27, ESP_BLE_AD_TYPE_CHAN_MAP_UPDATE          = 0x28, ESP_BLE_AD_MANUFACTURER_SPECIFIC_TYPE    = 0xFF, } esp_ble_adv_data_type;





































typedef enum {
    ADV_TYPE_IND                = 0x00, ADV_TYPE_DIRECT_IND_HIGH    = 0x01, ADV_TYPE_SCAN_IND           = 0x02, ADV_TYPE_NONCONN_IND        = 0x03, ADV_TYPE_DIRECT_IND_LOW     = 0x04, } esp_ble_adv_type_t;






typedef enum {
    ADV_CHNL_37     = 0x01, ADV_CHNL_38     = 0x02, ADV_CHNL_39     = 0x04, ADV_CHNL_ALL    = 0x07, } esp_ble_adv_channel_t;




typedef enum {
    
    ADV_FILTER_ALLOW_SCAN_ANY_CON_ANY  = 0x00,  ADV_FILTER_ALLOW_SCAN_WLST_CON_ANY,  ADV_FILTER_ALLOW_SCAN_ANY_CON_WLST,  ADV_FILTER_ALLOW_SCAN_WLST_CON_WLST,  } esp_ble_adv_filter_t;










typedef enum {
    ESP_BLE_SEC_ENCRYPT = 1,             ESP_BLE_SEC_ENCRYPT_NO_MITM, ESP_BLE_SEC_ENCRYPT_MITM, }esp_ble_sec_act_t;



typedef enum {
    ESP_BLE_SM_PASSKEY = 0,  ESP_BLE_SM_AUTHEN_REQ_MODE,  ESP_BLE_SM_IOCAP_MODE,  ESP_BLE_SM_SET_INIT_KEY,  ESP_BLE_SM_SET_RSP_KEY,  ESP_BLE_SM_MAX_KEY_SIZE,  ESP_BLE_SM_MIN_KEY_SIZE,  ESP_BLE_SM_SET_STATIC_PASSKEY,  ESP_BLE_SM_CLEAR_STATIC_PASSKEY,  ESP_BLE_SM_ONLY_ACCEPT_SPECIFIED_SEC_AUTH,  ESP_BLE_SM_OOB_SUPPORT,  ESP_BLE_APP_ENC_KEY_SIZE, ESP_BLE_SM_MAX_PARAM, } esp_ble_sm_param_t;

























typedef struct {
    uint16_t                adv_int_min;        
    uint16_t                adv_int_max;        
    esp_ble_adv_type_t      adv_type;           
    esp_ble_addr_type_t     own_addr_type;      
    esp_bd_addr_t           peer_addr;          
    esp_ble_addr_type_t     peer_addr_type;     
    esp_ble_adv_channel_t   channel_map;        
    esp_ble_adv_filter_t    adv_filter_policy;  
} esp_ble_adv_params_t;


typedef struct {
    bool                    set_scan_rsp;           
    bool                    include_name;           
    bool                    include_txpower;        
    int                     min_interval;           

    int                     max_interval;           

    int                     appearance;             
    uint16_t                manufacturer_len;       
    uint8_t                 *p_manufacturer_data;   
    uint16_t                service_data_len;       
    uint8_t                 *p_service_data;        
    uint16_t                service_uuid_len;       
    uint8_t                 *p_service_uuid;        
    uint8_t                 flag;                   
} esp_ble_adv_data_t;


typedef enum {
    BLE_SCAN_TYPE_PASSIVE   =   0x0,             BLE_SCAN_TYPE_ACTIVE    =   0x1, } esp_ble_scan_type_t;



typedef enum {
    BLE_SCAN_FILTER_ALLOW_ALL           = 0x0,   BLE_SCAN_FILTER_ALLOW_ONLY_WLST     = 0x1, BLE_SCAN_FILTER_ALLOW_UND_RPA_DIR   = 0x2, BLE_SCAN_FILTER_ALLOW_WLIST_PRA_DIR = 0x3, } esp_ble_scan_filter_t;





typedef enum {
    BLE_SCAN_DUPLICATE_DISABLE           = 0x0,   BLE_SCAN_DUPLICATE_ENABLE            = 0x1, BLE_SCAN_DUPLICATE_MAX               = 0x2, } esp_ble_scan_duplicate_t;




typedef struct {
    esp_ble_scan_type_t     scan_type;              
    esp_ble_addr_type_t     own_addr_type;          
    esp_ble_scan_filter_t   scan_filter_policy;     
    uint16_t                scan_interval;          
    uint16_t                scan_window;            
    esp_ble_scan_duplicate_t  scan_duplicate;       
} esp_ble_scan_params_t;


typedef struct {
    uint16_t             interval;                  
    uint16_t             latency;                   
    uint16_t             timeout;                   
} esp_gap_conn_params_t;


typedef struct {
    esp_bd_addr_t bda;                              
    uint16_t min_int;                               
    uint16_t max_int;                               
    uint16_t latency;                               
    uint16_t timeout;                               
} esp_ble_conn_update_params_t;


typedef struct {
    uint16_t rx_len;                   
    uint16_t tx_len;                   
}esp_ble_pkt_data_length_params_t;


typedef struct {
    esp_bt_octet16_t     ltk;          
    esp_bt_octet8_t      rand;         
    uint16_t             ediv;         
    uint8_t              sec_level;    
    uint8_t              key_size;     
} esp_ble_penc_keys_t;                 


typedef struct {
    uint32_t            counter;      
    esp_bt_octet16_t    csrk;         
    uint8_t             sec_level;    
} esp_ble_pcsrk_keys_t;               


typedef struct {
    esp_bt_octet16_t          irk;           
    esp_ble_addr_type_t       addr_type;     
    esp_bd_addr_t             static_addr;   
} esp_ble_pid_keys_t;                        


typedef struct {
    esp_bt_octet16_t  ltk;                  
    uint16_t          div;                  
    uint8_t           key_size;             
    uint8_t           sec_level;            
} esp_ble_lenc_keys_t;                      


typedef struct {
    uint32_t          counter;              
    uint16_t          div;                  
    uint8_t           sec_level;            
    esp_bt_octet16_t  csrk;                 
} esp_ble_lcsrk_keys;                       


typedef struct {
    esp_bd_addr_t  bd_addr;        
    uint32_t       passkey;        
} esp_ble_sec_key_notif_t;         


typedef struct {
    esp_bd_addr_t  bd_addr;        
} esp_ble_sec_req_t;               


typedef union {
    esp_ble_penc_keys_t   penc_key;       
    esp_ble_pcsrk_keys_t  pcsrk_key;      
    esp_ble_pid_keys_t    pid_key;        
    esp_ble_lenc_keys_t   lenc_key;       
    esp_ble_lcsrk_keys    lcsrk_key;      
} esp_ble_key_value_t;                    


typedef struct {
    esp_ble_key_mask_t    key_mask;       
    esp_ble_penc_keys_t   penc_key;       
    esp_ble_pcsrk_keys_t  pcsrk_key;      
    esp_ble_pid_keys_t    pid_key;        
} esp_ble_bond_key_info_t;                


typedef struct {
    esp_bd_addr_t  bd_addr;               
    esp_ble_bond_key_info_t bond_key;     
} esp_ble_bond_dev_t;                     



typedef struct {
    esp_bd_addr_t               bd_addr;        
    esp_ble_key_type_t          key_type;       
    esp_ble_key_value_t         p_key_value;    
} esp_ble_key_t;                                


typedef struct {
    esp_bt_octet16_t       ir;                  
    esp_bt_octet16_t       irk;                 
    esp_bt_octet16_t       dhk;                 
} esp_ble_local_id_keys_t;                      



typedef struct {
    esp_bd_addr_t         bd_addr;               
    bool                  key_present;           
    esp_link_key          key;                   
    uint8_t               key_type;              
    bool                  success;               
    uint8_t               fail_reason;           
    esp_ble_addr_type_t   addr_type;             
    esp_bt_dev_type_t     dev_type;              
    esp_ble_auth_req_t    auth_mode;             
} esp_ble_auth_cmpl_t;                           


typedef union {
    esp_ble_sec_key_notif_t    key_notif;      
    esp_ble_sec_req_t          ble_req;        
    esp_ble_key_t              ble_key;        
    esp_ble_local_id_keys_t    ble_id_keys;    
    esp_ble_auth_cmpl_t        auth_cmpl;      
} esp_ble_sec_t;                               


typedef enum {
    ESP_GAP_SEARCH_INQ_RES_EVT             = 0,       ESP_GAP_SEARCH_INQ_CMPL_EVT            = 1, ESP_GAP_SEARCH_DISC_RES_EVT            = 2, ESP_GAP_SEARCH_DISC_BLE_RES_EVT        = 3, ESP_GAP_SEARCH_DISC_CMPL_EVT           = 4, ESP_GAP_SEARCH_DI_DISC_CMPL_EVT        = 5, ESP_GAP_SEARCH_SEARCH_CANCEL_CMPL_EVT  = 6, ESP_GAP_SEARCH_INQ_DISCARD_NUM_EVT     = 7, } esp_gap_search_evt_t;









typedef enum {
    ESP_BLE_EVT_CONN_ADV         = 0x00,         ESP_BLE_EVT_CONN_DIR_ADV     = 0x01, ESP_BLE_EVT_DISC_ADV         = 0x02, ESP_BLE_EVT_NON_CONN_ADV     = 0x03, ESP_BLE_EVT_SCAN_RSP         = 0x04, } esp_ble_evt_type_t;





typedef enum{
    ESP_BLE_WHITELIST_REMOVE     = 0X00,     ESP_BLE_WHITELIST_ADD        = 0X01, }esp_ble_wl_opration_t;


typedef enum {
    ESP_BLE_DUPLICATE_EXCEPTIONAL_LIST_ADD      = 0,   ESP_BLE_DUPLICATE_EXCEPTIONAL_LIST_REMOVE, ESP_BLE_DUPLICATE_EXCEPTIONAL_LIST_CLEAN, } esp_bt_duplicate_exceptional_subcode_type_t;





typedef enum {
    ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_INFO_ADV_ADDR       = 0,   ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_INFO_MESH_LINK_ID, ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_INFO_MESH_BEACON_TYPE, ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_INFO_MESH_PROV_SRV_ADV, ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_INFO_MESH_PROXY_SRV_ADV, } esp_ble_duplicate_exceptional_info_type_t;





typedef enum {
    ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_ADDR_LIST                  = BLE_BIT(0),              ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_MESH_LINK_ID_LIST          = BLE_BIT(1), ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_MESH_BEACON_TYPE_LIST      = BLE_BIT(2), ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_MESH_PROV_SRV_ADV_LIST     = BLE_BIT(3), ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_MESH_PROXY_SRV_ADV_LIST    = BLE_BIT(4), ESP_BLE_DUPLICATE_SCAN_EXCEPTIONAL_ALL_LIST                   = 0xFFFF, } esp_duplicate_scan_exceptional_list_type_t;






typedef uint8_t esp_duplicate_info_t[ESP_BD_ADDR_LEN];


typedef union {
    
    struct ble_adv_data_cmpl_evt_param {
        esp_bt_status_t status;                     
    } adv_data_cmpl;                                
    
    struct ble_scan_rsp_data_cmpl_evt_param {
        esp_bt_status_t status;                     
    } scan_rsp_data_cmpl;                           
    
    struct ble_scan_param_cmpl_evt_param {
        esp_bt_status_t status;                     
    } scan_param_cmpl;                              
    
    struct ble_scan_result_evt_param {
        esp_gap_search_evt_t search_evt;            
        esp_bd_addr_t bda;                          
        esp_bt_dev_type_t dev_type;                 
        esp_ble_addr_type_t ble_addr_type;          
        esp_ble_evt_type_t ble_evt_type;            
        int rssi;                                   
        uint8_t  ble_adv[ESP_BLE_ADV_DATA_LEN_MAX + ESP_BLE_SCAN_RSP_DATA_LEN_MAX];     
        int flag;                                   
        int num_resps;                              
        uint8_t adv_data_len;                       
        uint8_t scan_rsp_len;                       
        uint32_t num_dis;                          
    } scan_rst;                                     
    
    struct ble_adv_data_raw_cmpl_evt_param {
        esp_bt_status_t status;                     
    } adv_data_raw_cmpl;                            
    
    struct ble_scan_rsp_data_raw_cmpl_evt_param {
        esp_bt_status_t status;                     
    } scan_rsp_data_raw_cmpl;                       
    
    struct ble_adv_start_cmpl_evt_param {
        esp_bt_status_t status;                     
    } adv_start_cmpl;                               
    
    struct ble_scan_start_cmpl_evt_param {
        esp_bt_status_t status;                     
    } scan_start_cmpl;                              

    esp_ble_sec_t ble_security;                     
    
    struct ble_scan_stop_cmpl_evt_param {
        esp_bt_status_t status;                     
    } scan_stop_cmpl;                               
    
    struct ble_adv_stop_cmpl_evt_param {
        esp_bt_status_t status;                     
    } adv_stop_cmpl;                                
    
    struct ble_set_rand_cmpl_evt_param {
        esp_bt_status_t status;                     
    } set_rand_addr_cmpl;                           
    
    struct ble_update_conn_params_evt_param {
        esp_bt_status_t status;                    
        esp_bd_addr_t bda;                         
        uint16_t min_int;                          
        uint16_t max_int;                          
        uint16_t latency;                          
        uint16_t conn_int;                         
        uint16_t timeout;                          
    }update_conn_params;                           
    
    struct ble_pkt_data_length_cmpl_evt_param {
        esp_bt_status_t status;                     
        esp_ble_pkt_data_length_params_t params;    
    } pkt_data_lenth_cmpl;                          
    
    struct ble_local_privacy_cmpl_evt_param {
        esp_bt_status_t status;                     
    } local_privacy_cmpl;                           
    
    struct ble_remove_bond_dev_cmpl_evt_param {
        esp_bt_status_t status;                     
        esp_bd_addr_t bd_addr;                      
    }remove_bond_dev_cmpl;                          
    
    struct ble_clear_bond_dev_cmpl_evt_param {
        esp_bt_status_t status;                     
    }clear_bond_dev_cmpl;                           
    
    struct ble_get_bond_dev_cmpl_evt_param {
        esp_bt_status_t status;                     
        uint8_t dev_num;                            
        esp_ble_bond_dev_t *bond_dev;               
    }get_bond_dev_cmpl;                             
    
    struct ble_read_rssi_cmpl_evt_param {
        esp_bt_status_t status;                     
        int8_t rssi;                                
        esp_bd_addr_t remote_addr;                  
    } read_rssi_cmpl;                               
    
    struct ble_update_whitelist_cmpl_evt_param {
        esp_bt_status_t status;                     
        esp_ble_wl_opration_t wl_opration;          
    } update_whitelist_cmpl;                        
    
    struct ble_update_duplicate_exceptional_list_cmpl_evt_param {
        esp_bt_status_t status;                     
        uint8_t         subcode;                    
        uint16_t         length;                     
        esp_duplicate_info_t device_info;           
    } update_duplicate_exceptional_list_cmpl;       
    
    struct ble_set_channels_evt_param {
        esp_bt_status_t stat;                       
    } ble_set_channels;                             
} esp_ble_gap_cb_param_t;


typedef void (* esp_gap_ble_cb_t)(esp_gap_ble_cb_event_t event, esp_ble_gap_cb_param_t *param);


esp_err_t esp_ble_gap_register_callback(esp_gap_ble_cb_t callback);



esp_err_t esp_ble_gap_config_adv_data (esp_ble_adv_data_t *adv_data);




esp_err_t esp_ble_gap_set_scan_params(esp_ble_scan_params_t *scan_params);



esp_err_t esp_ble_gap_start_scanning(uint32_t duration);



esp_err_t esp_ble_gap_stop_scanning(void);


esp_err_t esp_ble_gap_start_advertising (esp_ble_adv_params_t *adv_params);




esp_err_t esp_ble_gap_stop_advertising(void);




esp_err_t esp_ble_gap_update_conn_params(esp_ble_conn_update_params_t *params);



esp_err_t esp_ble_gap_set_pkt_data_len(esp_bd_addr_t remote_device, uint16_t tx_data_length);


esp_err_t esp_ble_gap_set_rand_addr(esp_bd_addr_t rand_addr);


esp_err_t esp_ble_gap_clear_rand_addr(void);




esp_err_t esp_ble_gap_config_local_privacy (bool privacy_enable);


esp_err_t esp_ble_gap_config_local_icon (uint16_t icon);


esp_err_t esp_ble_gap_update_whitelist(bool add_remove, esp_bd_addr_t remote_bda, esp_ble_wl_addr_type_t wl_addr_type);


esp_err_t esp_ble_gap_clear_whitelist(void);


esp_err_t esp_ble_gap_get_whitelist_size(uint16_t *length);


esp_err_t esp_ble_gap_set_prefer_conn_params(esp_bd_addr_t bd_addr, uint16_t min_conn_int, uint16_t max_conn_int, uint16_t slave_latency, uint16_t supervision_tout);



esp_err_t esp_ble_gap_set_device_name(const char *name);


esp_err_t esp_ble_gap_get_local_used_addr(esp_bd_addr_t local_used_addr, uint8_t * addr_type);

uint8_t *esp_ble_resolve_adv_data(uint8_t *adv_data, uint8_t type, uint8_t *length);


esp_err_t esp_ble_gap_config_adv_data_raw(uint8_t *raw_data, uint32_t raw_data_len);


esp_err_t esp_ble_gap_config_scan_rsp_data_raw(uint8_t *raw_data, uint32_t raw_data_len);


esp_err_t esp_ble_gap_read_rssi(esp_bd_addr_t remote_addr);


esp_err_t esp_ble_gap_add_duplicate_scan_exceptional_device(esp_ble_duplicate_exceptional_info_type_t type, esp_duplicate_info_t device_info);


esp_err_t esp_ble_gap_remove_duplicate_scan_exceptional_device(esp_ble_duplicate_exceptional_info_type_t type, esp_duplicate_info_t device_info);


esp_err_t esp_ble_gap_clean_duplicate_scan_exceptional_list(esp_duplicate_scan_exceptional_list_type_t list_type);



esp_err_t esp_ble_gap_set_security_param(esp_ble_sm_param_t param_type, void *value, uint8_t len);


esp_err_t esp_ble_gap_security_rsp(esp_bd_addr_t bd_addr,  bool accept);



esp_err_t esp_ble_set_encryption(esp_bd_addr_t bd_addr, esp_ble_sec_act_t sec_act);


esp_err_t esp_ble_passkey_reply(esp_bd_addr_t bd_addr, bool accept, uint32_t passkey);



esp_err_t esp_ble_confirm_reply(esp_bd_addr_t bd_addr, bool accept);


esp_err_t esp_ble_remove_bond_device(esp_bd_addr_t bd_addr);


int esp_ble_get_bond_device_num(void);



esp_err_t esp_ble_get_bond_device_list(int *dev_num, esp_ble_bond_dev_t *dev_list);


esp_err_t esp_ble_oob_req_reply(esp_bd_addr_t bd_addr, uint8_t *TK, uint8_t len);




esp_err_t esp_ble_gap_disconnect(esp_bd_addr_t remote_device);


esp_err_t esp_ble_get_current_conn_params(esp_bd_addr_t bd_addr, esp_gap_conn_params_t *conn_params);


esp_err_t esp_gap_ble_set_channels(esp_gap_ble_channels channels);


esp_err_t esp_gap_ble_set_authorization(esp_bd_addr_t bd_addr, bool authorize);

}



