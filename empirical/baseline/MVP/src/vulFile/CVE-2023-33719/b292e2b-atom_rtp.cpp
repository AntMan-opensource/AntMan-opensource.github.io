



namespace mp4v2 {
namespace impl {



MP4RtpAtom::MP4RtpAtom(MP4File &file)
        : MP4Atom(file, "rtp ")
{
    
    
    
    
    
}

void MP4RtpAtom::AddPropertiesStsdType()
{
    AddReserved(*this, "reserved1", 6); 

    AddProperty(  new MP4Integer16Property(*this, "dataReferenceIndex"));

    AddProperty(  new MP4Integer16Property(*this, "hintTrackVersion"));
    AddProperty(  new MP4Integer16Property(*this, "highestCompatibleVersion"));
    AddProperty(  new MP4Integer32Property(*this, "maxPacketSize"));

    ExpectChildAtom("tims", Required, OnlyOne);
    ExpectChildAtom("tsro", Optional, OnlyOne);
    ExpectChildAtom("snro", Optional, OnlyOne);
}

void MP4RtpAtom::AddPropertiesHntiType()
{
    MP4StringProperty* pProp = new MP4StringProperty(*this, "descriptionFormat");
    pProp->SetFixedLength(4);
    AddProperty(pProp); 

    AddProperty(  new MP4StringProperty(*this, "sdpText"));
}

void MP4RtpAtom::Generate()
{
    ASSERT(m_pParentAtom);
    if (strequal(m_pParentAtom->GetType(), "stsd")) {
        AddPropertiesStsdType();
        GenerateStsdType();
    } else if (strequal(m_pParentAtom->GetType(), "hnti")) {
        AddPropertiesHntiType();
        GenerateHntiType();
    } else {
        log.warningf("%s: \"%s\": rtp atom in unexpected context, can not generate", __FUNCTION__, GetFile().GetFilename().c_str() );
    }
}

void MP4RtpAtom::GenerateStsdType()
{
    
    MP4Atom::Generate();

    ((MP4Integer16Property*)m_pProperties[1])->SetValue(1);
    ((MP4Integer16Property*)m_pProperties[2])->SetValue(1);
    ((MP4Integer16Property*)m_pProperties[3])->SetValue(1);
}

void MP4RtpAtom::GenerateHntiType()
{
    MP4Atom::Generate();

    ((MP4StringProperty*)m_pProperties[0])->SetValue("sdp ");
}

void MP4RtpAtom::Read()
{
    ASSERT(m_pParentAtom);
    if (strequal(m_pParentAtom->GetType(), "stsd")) {
        AddPropertiesStsdType();
        ReadStsdType();
    } else if (strequal(m_pParentAtom->GetType(), "hnti")) {
        AddPropertiesHntiType();
        ReadHntiType();
    } else {
        log.verbose1f("rtp atom in unexpected context, can not read");
    }

    Skip(); 
}

void MP4RtpAtom::ReadStsdType()
{
    MP4Atom::Read();
}

void MP4RtpAtom::ReadHntiType()
{
    ReadProperties(0, 1);

    
    uint64_t size = GetEnd() - m_File.GetPosition();
    char* data = (char*)MP4Malloc(size + 1);
    ASSERT(data != NULL);
    m_File.ReadBytes((uint8_t*)data, size);
    data[size] = '\0';
    ((MP4StringProperty*)m_pProperties[1])->SetValue(data);
    MP4Free(data);
}

void MP4RtpAtom::Write()
{
    if (strequal(m_pParentAtom->GetType(), "hnti")) {
        WriteHntiType();
    } else {
        MP4Atom::Write();
    }
}

void MP4RtpAtom::WriteHntiType()
{
    
    
    MP4StringProperty* pSdp = (MP4StringProperty*)m_pProperties[1];
    pSdp->SetFixedLength((uint32_t)strlen(pSdp->GetValue()));
    MP4Atom::Write();
    pSdp->SetFixedLength(0);
}



}
} 
