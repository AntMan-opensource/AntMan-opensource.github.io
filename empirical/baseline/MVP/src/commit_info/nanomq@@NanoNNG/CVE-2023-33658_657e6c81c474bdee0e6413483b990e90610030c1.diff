commit 657e6c81c474bdee0e6413483b990e90610030c1
Author: Jaylin <jaylin@emqx.io>
Date:   Sat Apr 15 15:35:17 2023 +0800

    * FIX [transport] fix #1153 https://github.com/emqx/nanomq/issues/1153 for other transport

diff --git a/src/mqtt/transport/tls/mqtt_tls.c b/src/mqtt/transport/tls/mqtt_tls.c
index 5178d413..75568759 100644
--- a/src/mqtt/transport/tls/mqtt_tls.c
+++ b/src/mqtt/transport/tls/mqtt_tls.c
@@ -695,8 +695,15 @@ mqtts_tcptran_pipe_recv_cb(void *arg)
 				ack_cmd = CMD_PUBACK;
 			} else if (qos_pac == 2) {
 				ack_cmd = CMD_PUBREC;
+			} else {
+				log_warn("Wrong QoS level!");
+				rv = PROTOCOL_ERROR;
+				goto recv_error;
+			}
+			if ((packet_id = nni_msg_get_pub_pid(msg)) == 0) {
+				rv = PROTOCOL_ERROR;
+				goto recv_error;
 			}
-			packet_id = nni_msg_get_pub_pid(msg);
 			ack = true;
 		}
 		break;
diff --git a/src/sp/transport/mqtts/broker_tls.c b/src/sp/transport/mqtts/broker_tls.c
index e7adcb4a..c37a9636 100644
--- a/src/sp/transport/mqtts/broker_tls.c
+++ b/src/sp/transport/mqtts/broker_tls.c
@@ -717,8 +717,15 @@ tlstran_pipe_recv_cb(void *arg)
 				ack_cmd = CMD_PUBACK;
 			} else if (qos_pac == 2) {
 				ack_cmd = CMD_PUBREC;
+			} else {
+				log_warn("Wrong QoS level!");
+				rv = PROTOCOL_ERROR;
+				goto recv_error;
+			}
+			if ((packet_id = nni_msg_get_pub_pid(msg)) == 0) {
+				rv = PROTOCOL_ERROR;
+				goto recv_error;
 			}
-			packet_id = nni_msg_get_pub_pid(msg);
 			ack       = true;
 		}
 	} else if (type == CMD_PUBREC) {
diff --git a/src/sp/transport/mqttws/nmq_websocket.c b/src/sp/transport/mqttws/nmq_websocket.c
index 768397ba..28503f34 100644
--- a/src/sp/transport/mqttws/nmq_websocket.c
+++ b/src/sp/transport/mqttws/nmq_websocket.c
@@ -250,9 +250,17 @@ done:
 					ack_cmd = CMD_PUBACK;
 				} else if (qos_pac == 2) {
 					ack_cmd = CMD_PUBREC;
+				} else {
+					log_warn("Wrong QoS level!");
+					rv = PROTOCOL_ERROR;
+					goto recv_error;
+				}
+				if ((packet_id = nni_msg_get_pub_pid(msg)) ==
+				    0) {
+					rv = PROTOCOL_ERROR;
+					goto recv_error;
 				}
-				packet_id = nni_msg_get_pub_pid(smsg);
-				ack       = true;
+				ack = true;
 			}
 		} else if (cmd == CMD_PUBREC) {
 			if (nni_mqtt_pubres_decode(smsg, &packet_id, &reason_code, &prop,
