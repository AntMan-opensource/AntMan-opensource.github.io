commit 728616b28df659cf0bdde6e58a471f6ef25d023c
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Wed Aug 31 11:10:58 2022 +0200

    core: tee_entry: fix array out of bounds check in cleanup_shm_refs()
    
    cleanup_shm_refs() can be called with num_params larger than what has
    been used by copy_in_params(). If num_params is larger than
    TEE_NUM_PARAMS copy_in_params() will return an error and
    cleanup_shm_refs() is called to clean up.
    
    This leads to accessing uint64_t saved_attr[TEE_NUM_PARAMS] in
    entry_invoke_command() or entry_open_session() out of bounds and
    possibly also the u[TEE_NUM_PARAMS] array in struct tee_ta_param.
    
    So fix this by capping num_params TEE_NUM_PARAMS in cleanup_shm_refs().
    
    Fixes: b05cd886e06d ("core: enable non-contiguous temporary reference parameters")
    Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

diff --git a/core/tee/entry_std.c b/core/tee/entry_std.c
index 0ec47e427..d933d54d5 100644
--- a/core/tee/entry_std.c
+++ b/core/tee/entry_std.c
@@ -254,7 +254,7 @@ static void cleanup_shm_refs(const uint64_t *saved_attr,
 {
 	size_t n;
 
-	for (n = 0; n < num_params; n++) {
+	for (n = 0; n < MIN((unsigned int)TEE_NUM_PARAMS, num_params); n++) {
 		switch (saved_attr[n]) {
 		case OPTEE_MSG_ATTR_TYPE_TMEM_INPUT:
 		case OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT:
