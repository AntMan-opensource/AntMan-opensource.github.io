commit a2bfda31b157b5acfe9ffefc4b8b079277bf5dd7
Author: Ted Yu <yuzhihong@gmail.com>
Date:   Fri Sep 23 12:16:27 2022 -0700

    [#14139] yql: Import Ignore attempts to \gset into specially treated variables
    
    Summary:
    Upstream commit was 098fb00799ffb026ff12c64bd21635f963cfc609
    
    Commit message was:
    
        If an interactive psql session used \gset when querying a compromised
        server, the attacker could execute arbitrary code as the operating
        system account running psql.  Using a prefix not found among specially
        treated variables, e.g. every lowercase string, precluded the attack.
        Fix by issuing a warning and setting no variable for the column in
        question.  Users wanting the old behavior can use a prefix and then a
        meta-command like "\set HISTSIZE :prefix_HISTSIZE".  Back-patch to 9.5
        (all supported versions).
    
        Reviewed by Robert Haas.  Reported by Nick Cleaton.
    
        Security: CVE-2020-25696
    
    The call to pg_log_warning() is omitted since it fails compilation:
    ```
    [2022-09-22T15:26:00.821Z] src/postgres/src/bin/psql/common.c:935:5: error: implicit declaration of function 'pg_log_warning' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
    [2022-09-22T15:26:00.821Z]                                 pg_log_warning("attempt to \\gset into specially treated variable \"%s\" ignored",
    ```
    Porting over pg_log_warning would require several other commits.
    
    Test Plan:
    ```
    yugabyte=# select 97 as "EOF", 'ok' as _foo \gset IGNORE
    yugabyte=# \echo :IGNORE_foo :IGNOREEOF
    ok 0
    ```
    
    Reviewers: plee, smishra, myang
    
    Reviewed By: myang
    
    Subscribers: yql
    
    Differential Revision: https://phabricator.dev.yugabyte.com/D19723

diff --git a/src/postgres/src/bin/psql/common.c b/src/postgres/src/bin/psql/common.c
index 9760010fe5..8c5feee900 100644
--- a/src/postgres/src/bin/psql/common.c
+++ b/src/postgres/src/bin/psql/common.c
@@ -930,6 +930,17 @@ StoreQueryTuple(const PGresult *result)
 			/* concatenate prefix and column name */
 			varname = psprintf("%s%s", pset.gset_prefix, colname);
 
+			if (VariableHasHook(pset.vars, varname))
+			{
+				/* YB: the following code is commented out since we don't have pg_log_warning macro.
+				 * Porting over pg_log_warning would require other commits which can be done later.
+
+				pg_log_warning("attempt to \\gset into specially treated variable \"%s\" ignored",
+								varname);
+				*/
+				continue;
+			}
+
 			if (!PQgetisnull(result, 0, i))
 				value = PQgetvalue(result, 0, i);
 			else
diff --git a/src/postgres/src/bin/psql/variables.c b/src/postgres/src/bin/psql/variables.c
index f093442644..9fde5d86b1 100644
--- a/src/postgres/src/bin/psql/variables.c
+++ b/src/postgres/src/bin/psql/variables.c
@@ -360,6 +360,32 @@ SetVariableHooks(VariableSpace space, const char *name,
 		(void) (*ahook) (current->value);
 }
 
+/*
+ * Return true iff the named variable has substitute and/or assign hook
+ * functions.
+ */
+bool
+VariableHasHook(VariableSpace space, const char *name)
+{
+	struct _variable *current;
+
+	Assert(space);
+	Assert(name);
+
+	for (current = space->next; current; current = current->next)
+	{
+		int			cmp = strcmp(current->name, name);
+
+		if (cmp == 0)
+			return (current->substitute_hook != NULL ||
+					current->assign_hook != NULL);
+		if (cmp > 0)
+			break;				/* it's not there */
+	}
+
+	return false;
+}
+
 /*
  * Convenience function to set a variable's value to "on".
  */
diff --git a/src/postgres/src/bin/psql/variables.h b/src/postgres/src/bin/psql/variables.h
index 03af11197c..383ee1dffb 100644
--- a/src/postgres/src/bin/psql/variables.h
+++ b/src/postgres/src/bin/psql/variables.h
@@ -90,6 +90,7 @@ bool		DeleteVariable(VariableSpace space, const char *name);
 void SetVariableHooks(VariableSpace space, const char *name,
 				 VariableSubstituteHook shook,
 				 VariableAssignHook ahook);
+bool		VariableHasHook(VariableSpace space, const char *name);
 
 void		PsqlVarEnumError(const char *name, const char *value, const char *suggestions);
 
diff --git a/src/postgres/src/test/regress/expected/psql.out b/src/postgres/src/test/regress/expected/psql.out
index 3818cfea7e..9c389c8f04 100644
--- a/src/postgres/src/test/regress/expected/psql.out
+++ b/src/postgres/src/test/regress/expected/psql.out
@@ -84,6 +84,10 @@ select 10 as test01, 20 as test02, 'Hello' as test03 \gset pref01_
 select 10 as "bad name"
 \gset
 invalid variable name: "bad name"
+select 97 as "EOF", 'ok' as _foo \gset IGNORE
+attempt to \gset into specially treated variable "IGNOREEOF" ignored
+\echo :IGNORE_foo :IGNOREEOF
+ok 0
 -- multiple backslash commands in one line
 select 1 as x, 2 as y \gset pref01_ \\ \echo :pref01_x
 1
diff --git a/src/postgres/src/test/regress/sql/psql.sql b/src/postgres/src/test/regress/sql/psql.sql
index b45da9bb8d..7279b98470 100644
--- a/src/postgres/src/test/regress/sql/psql.sql
+++ b/src/postgres/src/test/regress/sql/psql.sql
@@ -48,6 +48,9 @@ select 10 as test01, 20 as test02, 'Hello' as test03 \gset pref01_
 select 10 as "bad name"
 \gset
 
+select 97 as "EOF", 'ok' as _foo \gset IGNORE
+\echo :IGNORE_foo :IGNOREEOF
+
 -- multiple backslash commands in one line
 select 1 as x, 2 as y \gset pref01_ \\ \echo :pref01_x
 select 3 as x, 4 as y \gset pref01_ \echo :pref01_x \echo :pref01_y
