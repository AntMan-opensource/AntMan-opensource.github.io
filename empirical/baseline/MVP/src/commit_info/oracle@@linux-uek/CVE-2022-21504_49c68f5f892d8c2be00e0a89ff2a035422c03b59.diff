commit 49c68f5f892d8c2be00e0a89ff2a035422c03b59
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Dec 11 14:10:35 2019 -0700

    fs: move filp_close() outside of __close_fd_get_file()
    
    Just one caller of this, and just use filp_close() there manually.
    This is important to allow async close/removal of the fd.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    (cherry picked from commit 6e802a4ba056a6f2f51ac9d54eead3ed6f9829a2)
    Conflicts:
        drivers/android/binder.c: no real conflict but code base difference
    Orabug: 33413846
    Signed-off-by: Prasad Singamsetty <prasad.singamsetty@oracle.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Brian Maly <brian.maly@oracle.com>

diff --git a/drivers/android/binder.c b/drivers/android/binder.c
index d0a285f8f5c1..6d76fff32367 100644
--- a/drivers/android/binder.c
+++ b/drivers/android/binder.c
@@ -2236,10 +2236,12 @@ static void binder_deferred_fd_close(int fd)
 		return;
 	init_task_work(&twcb->twork, binder_do_fd_close);
 	__close_fd_get_file(fd, &twcb->file);
-	if (twcb->file)
+	if (twcb->file) {
+		filp_close(twcb->file, current->files);
 		task_work_add(current, &twcb->twork, TWA_RESUME);
-	else
+	} else {
 		kfree(twcb);
+	}
 }
 
 static void binder_transaction_buffer_release(struct binder_proc *proc,
diff --git a/fs/file.c b/fs/file.c
index b953b9ae32e3..4684aafb5c1e 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -650,7 +650,9 @@ out_unlock:
 EXPORT_SYMBOL(__close_fd); /* for ksys_close() */
 
 /*
- * variant of __close_fd that gets a ref on the file for later fput
+ * variant of __close_fd that gets a ref on the file for later fput.
+ * The caller must ensure that filp_close() called on the file, and then
+ * an fput().
  */
 int __close_fd_get_file(unsigned int fd, struct file **res)
 {
@@ -670,7 +672,7 @@ int __close_fd_get_file(unsigned int fd, struct file **res)
 	spin_unlock(&files->file_lock);
 	get_file(file);
 	*res = file;
-	return filp_close(file, files);
+	return 0;
 
 out_unlock:
 	spin_unlock(&files->file_lock);
