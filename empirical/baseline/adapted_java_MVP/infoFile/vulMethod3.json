{
    "CVE-2023-51445": {
        "b897697434-ResourceController.java": {
            "org.geoserver.rest.resources.ResourceController.getMediaType(Resource resource, HttpServletRequest request)": {
                "lineStart": 112,
                "lineEnd": 133
            },
            "org.geoserver.rest.resources.ResourceController.resourceGet(HttpServletRequest request, HttpServletResponse response, @RequestParam(name = \"operation\", required = false, defaultValue = \"default\") String operationName, @RequestParam(required = false, defaultValue = MediaType.TEXT_HTML_VALUE) String format)": {
                "lineStart": 207,
                "lineEnd": 247
            }
        }
    },
    "CVE-2020-2143": {
        "f8b877e-LogstashConfiguration.java": {
            "jenkins.plugins.logstash.LogstashConfiguration.migrateData()": {
                "lineStart": 112,
                "lineEnd": 192
            }
        },
        "196c086-ElasticSearch.java": {
            "jenkins.plugins.logstash.configuration.ElasticSearch.getPassword()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "jenkins.plugins.logstash.configuration.ElasticSearch.setPassword(String password)": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "jenkins.plugins.logstash.configuration.ElasticSearch.equals(Object obj)": {
                "lineStart": 95,
                "lineEnd": 145
            }
        },
        "d3c5372-RabbitMq.java": {
            "jenkins.plugins.logstash.configuration.RabbitMq.getPassword()": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "jenkins.plugins.logstash.configuration.RabbitMq.setPassword(String password)": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "jenkins.plugins.logstash.configuration.RabbitMq.equals(Object obj)": {
                "lineStart": 92,
                "lineEnd": 130
            }
        },
        "ebcc982-Redis.java": {
            "jenkins.plugins.logstash.configuration.Redis.getPassword()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "jenkins.plugins.logstash.configuration.Redis.setPassword(String password)": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "jenkins.plugins.logstash.configuration.Redis.equals(Object obj)": {
                "lineStart": 34,
                "lineEnd": 60
            }
        }
    },
    "CVE-2022-42126": {
        "9585b72871e2f-DepotEntryServiceImpl.java": {
            "com.liferay.depot.service.impl.DepotEntryServiceImpl.getGroupConnectedDepotEntries(long groupId, int start, int end)": {
                "lineStart": 50,
                "lineEnd": 56
            }
        }
    },
    "CVE-2021-40111": {
        "5207b71e11-DecoderUtils.java": {
            "org.apache.james.imap.decode.DecoderUtils.isDateTime(CharSequence chars)": {
                "lineStart": 102,
                "lineEnd": 115
            }
        }
    },
    "CVE-2022-23457": {
        "530e2efa-DefaultValidator.java": {
            "org.owasp.esapi.reference.DefaultValidator.getValidDirectoryPath(String context, String input, File parent, boolean allowNull)": {
                "lineStart": 287,
                "lineEnd": 327
            }
        }
    },
    "CVE-2023-0869": {
        "a84d63222be-Util.java": {
            "org.opennms.web.api.Util.makeQueryString(final HttpServletRequest request, final Map<String, Object> additions, final String[] ignores, final IgnoreType ignoreType)": {
                "lineStart": 203,
                "lineEnd": 257
            }
        }
    },
    "CVE-2021-44140": {
        "db0a98ae8-Engine.java": {
            "org.apache.wiki.api.core.Engine.findConfigFile(final String name)": {
                "lineStart": 58,
                "lineEnd": 114
            }
        },
        "e0629d9e7-AttachmentManager.java": {
            "org.apache.wiki.attachment.AttachmentManager.storeAttachment(final Attachment att, final File source)": {
                "lineStart": 64,
                "lineEnd": 68
            }
        },
        "f004b8765-XMLGroupDatabase.java": {
            "org.apache.wiki.auth.authorize.XMLGroupDatabase.saveDOM()": {
                "lineStart": 220,
                "lineEnd": 275
            }
        },
        "45f1be5c9-CookieAuthenticationLoginModule.java": {
            "org.apache.wiki.auth.login.CookieAuthenticationLoginModule.login()": {
                "lineStart": 36,
                "lineEnd": 77
            },
            "org.apache.wiki.auth.login.CookieAuthenticationLoginModule.setLoginCookie(final Engine engine, final HttpServletResponse response, final String username)": {
                "lineStart": 108,
                "lineEnd": 128
            }
        },
        "3fa5c622f-XMLUserDatabase.java": {
            "org.apache.wiki.auth.user.XMLUserDatabase.saveDOM()": {
                "lineStart": 185,
                "lineEnd": 256
            }
        },
        "01aa68b37-DefaultFilterManager.java": {
            "org.apache.wiki.filters.DefaultFilterManager.initialize(final Properties props)": {
                "lineStart": 76,
                "lineEnd": 130
            }
        },
        "6a38f20ab-PageViewPlugin.java": {
            "org.apache.wiki.plugin.PageViewPlugin$PageViewManager.loadCounters()": {
                "lineStart": 349,
                "lineEnd": 368
            },
            "org.apache.wiki.plugin.PageViewPlugin$PageViewManager.storeCounters()": {
                "lineStart": 370,
                "lineEnd": 386
            }
        },
        "7376757d5-AbstractFileProvider.java": {
            "org.apache.wiki.providers.AbstractFileProvider.getPageText(final String page)": {
                "lineStart": 141,
                "lineEnd": 163
            },
            "org.apache.wiki.providers.AbstractFileProvider.putPageText(final Page page, final String text)": {
                "lineStart": 165,
                "lineEnd": 173
            },
            "org.apache.wiki.providers.AbstractFileProvider.findPages(final QueryItem[] query)": {
                "lineStart": 210,
                "lineEnd": 236
            }
        },
        "22c138ce1-BasicAttachmentProvider.java": {
            "org.apache.wiki.providers.BasicAttachmentProvider.putPageProperties(final Attachment att, final Properties properties)": {
                "lineStart": 141,
                "lineEnd": 147
            },
            "org.apache.wiki.providers.BasicAttachmentProvider.getPageProperties(final Attachment att)": {
                "lineStart": 149,
                "lineEnd": 159
            },
            "org.apache.wiki.providers.BasicAttachmentProvider.putAttachmentData(final Attachment att, final InputStream data)": {
                "lineStart": 161,
                "lineEnd": 192
            },
            "org.apache.wiki.providers.BasicAttachmentProvider.getAttachmentData(final Attachment att)": {
                "lineStart": 224,
                "lineEnd": 235
            }
        },
        "a5c96cd99-FileSystemProvider.java": {
            "org.apache.wiki.providers.FileSystemProvider.putPageProperties(final Page page)": {
                "lineStart": 27,
                "lineEnd": 49
            },
            "org.apache.wiki.providers.FileSystemProvider.getPageProperties(final Page page)": {
                "lineStart": 51,
                "lineEnd": 72
            }
        },
        "9f9dbcb5b-VersioningFileProvider.java": {
            "org.apache.wiki.providers.VersioningFileProvider.getPageProperties(final String page)": {
                "lineStart": 97,
                "lineEnd": 116
            },
            "org.apache.wiki.providers.VersioningFileProvider.putPageProperties(final String page, final Properties properties)": {
                "lineStart": 118,
                "lineEnd": 125
            },
            "org.apache.wiki.providers.VersioningFileProvider.readFile(final File pagedata)": {
                "lineStart": 158,
                "lineEnd": 181
            },
            "org.apache.wiki.providers.VersioningFileProvider.putPageText(final Page page, final String text)": {
                "lineStart": 183,
                "lineEnd": 233
            },
            "org.apache.wiki.providers.VersioningFileProvider.getHeritagePageProperties(final String page)": {
                "lineStart": 319,
                "lineEnd": 343
            },
            "org.apache.wiki.providers.VersioningFileProvider.deleteVersion(final String page, final int version)": {
                "lineStart": 364,
                "lineEnd": 406
            }
        },
        "d8f51ee95-DefaultReferenceManager.java": {
            "org.apache.wiki.references.DefaultReferenceManager.unserializeFromDisk()": {
                "lineStart": 105,
                "lineEnd": 125
            },
            "org.apache.wiki.references.DefaultReferenceManager.serializeToDisk()": {
                "lineStart": 127,
                "lineEnd": 142
            },
            "org.apache.wiki.references.DefaultReferenceManager.unserializeAttrsFromDisk(final Page p)": {
                "lineStart": 161,
                "lineEnd": 203
            },
            "org.apache.wiki.references.DefaultReferenceManager.serializeAttrsToDisk(final Page p)": {
                "lineStart": 205,
                "lineEnd": 245
            }
        },
        "a9d92e699-RSSThread.java": {
            "org.apache.wiki.rss.RSSThread.backgroundTask()": {
                "lineStart": 35,
                "lineEnd": 52
            }
        },
        "9f90a6c92-Installer.java": {
            "org.apache.wiki.ui.Installer.saveProperties()": {
                "lineStart": 140,
                "lineEnd": 153
            }
        },
        "a166efa1a-DefaultWorkflowManager.java": {
            "org.apache.wiki.workflow.DefaultWorkflowManager.unserializeFromDisk(final File f)": {
                "lineStart": 71,
                "lineEnd": 96
            },
            "org.apache.wiki.workflow.DefaultWorkflowManager.serializeToDisk(final File f)": {
                "lineStart": 98,
                "lineEnd": 113
            }
        },
        "2219b4704-FileUtil.java": {
            "org.apache.wiki.util.FileUtil.newTmpFile(final String content, final Charset encoding)": {
                "lineStart": 29,
                "lineEnd": 35
            }
        },
        "50170e3c0-PropertyReader.java": {
            "org.apache.wiki.util.PropertyReader.loadCustomPropertiesFile(final ServletContext context, final String propertyFile)": {
                "lineStart": 53,
                "lineEnd": 65
            }
        }
    },
    "CVE-2023-40315": {
        "7842d4eba6b-FilesystemRestService.java": {
            "org.opennms.web.rest.v1.FilesystemRestService.getFiles(@QueryParam(\"changedFilesOnly\") boolean changedFilesOnly, @Context SecurityContext securityContext)": {
                "lineStart": 50,
                "lineEnd": 62
            },
            "org.opennms.web.rest.v1.FilesystemRestService.doesFileExistAndMatchContentsWithEtcPristine(String file)": {
                "lineStart": 64,
                "lineEnd": 78
            },
            "org.opennms.web.rest.v1.FilesystemRestService.getFileHelp(@QueryParam(\"f\") String fileName, @Context SecurityContext securityContext)": {
                "lineStart": 80,
                "lineEnd": 87
            },
            "org.opennms.web.rest.v1.FilesystemRestService.getFileContents(@QueryParam(\"f\") String fileName, @Context SecurityContext securityContext)": {
                "lineStart": 97,
                "lineEnd": 103
            },
            "org.opennms.web.rest.v1.FilesystemRestService.uploadFile(@QueryParam(\"f\") String fileName, @Multipart(\"upload\") Attachment attachment, @Context SecurityContext securityContext)": {
                "lineStart": 105,
                "lineEnd": 127
            },
            "org.opennms.web.rest.v1.FilesystemRestService.deleteFile(@QueryParam(\"f\") String fileName, @Context SecurityContext securityContext)": {
                "lineStart": 129,
                "lineEnd": 137
            },
            "org.opennms.web.rest.v1.FilesystemRestService.ensureFileIsAllowed(String fileName)": {
                "lineStart": 158,
                "lineEnd": 170
            }
        }
    },
    "CVE-2023-37471": {
        "7e78b60e41-SAMLUtils.java": {
            "com.sun.identity.saml.common.SAMLUtils.processResponse(Response samlResponse, String target)": {
                "lineStart": 1217,
                "lineEnd": 1259
            },
            "com.sun.identity.saml.common.SAMLUtils.verifyResponse(Response response, String requestUrl, HttpServletRequest request)": {
                "lineStart": 729,
                "lineEnd": 747
            }
        }
    },
    "CVE-2023-1436": {
        "11acd9a-JSONArray.java": {
            "org.codehaus.jettison.json.JSONArray.<init>(Collection collection)": {
                "lineStart": 87,
                "lineEnd": 101
            }
        }
    },
    "CVE-2020-2104": {
        "1ba648eb38-MemoryUsageMonitor.java": {
            "hudson.diagnosis.MemoryUsageMonitor$MemoryGroup.doGraph(@QueryParameter String type)": {
                "lineStart": 49,
                "lineEnd": 51
            }
        }
    },
    "CVE-2024-31863": {
        "2e9803183-NotebookService.java": {
            "org.apache.zeppelin.service.NotebookService.<init>(Notebook notebook, AuthorizationService authorizationService, ZeppelinConfiguration zeppelinConfiguration, SchedulerService schedulerService)": {
                "lineStart": 54,
                "lineEnd": 59
            },
            "org.apache.zeppelin.service.NotebookService.getHomeNote(ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 61,
                "lineEnd": 80
            },
            "org.apache.zeppelin.service.NotebookService.getNote(String noteId, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "org.apache.zeppelin.service.NotebookService.getNote(String noteId, boolean reload, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 86,
                "lineEnd": 111
            },
            "org.apache.zeppelin.service.NotebookService.getNoteByPath(String notePath, boolean reload, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 113,
                "lineEnd": 123
            },
            "org.apache.zeppelin.service.NotebookService.createNote(String notePath, String defaultInterpreterGroup, boolean addingEmptyParagraph, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 125,
                "lineEnd": 150
            },
            "org.apache.zeppelin.service.NotebookService.normalizeNotePath(String notePath)": {
                "lineStart": 152,
                "lineEnd": 172
            },
            "org.apache.zeppelin.service.NotebookService.removeNote(String noteId, ServiceContext context, ServiceCallback<String> callback)": {
                "lineStart": 174,
                "lineEnd": 194
            },
            "org.apache.zeppelin.service.NotebookService.listNotesInfo(boolean needsReload, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 196,
                "lineEnd": 210
            },
            "org.apache.zeppelin.service.NotebookService.renameNote(String noteId, String newNotePath, boolean isRelative, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 212,
                "lineEnd": 246
            },
            "org.apache.zeppelin.service.NotebookService.cloneNote(String noteId, String newNotePath, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 248,
                "lineEnd": 250
            },
            "org.apache.zeppelin.service.NotebookService.cloneNote(String noteId, String revisionId, String newNotePath, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 252,
                "lineEnd": 275
            },
            "org.apache.zeppelin.service.NotebookService.importNote(String notePath, String noteJson, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 277,
                "lineEnd": 292
            },
            "org.apache.zeppelin.service.NotebookService.runParagraph(Note note, String paragraphId, String title, String text, Map<String, Object> params, Map<String, Object> config, String sessionId, boolean failIfDisabled, boolean blocking, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 294,
                "lineEnd": 354
            },
            "org.apache.zeppelin.service.NotebookService.runAllParagraphs(String noteId, List<Map<String, Object>> paragraphs, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 356,
                "lineEnd": 425
            },
            "org.apache.zeppelin.service.NotebookService.cancelParagraph(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 427,
                "lineEnd": 448
            },
            "org.apache.zeppelin.service.NotebookService.moveParagraph(String noteId, String paragraphId, int newIndex, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 450,
                "lineEnd": 476
            },
            "org.apache.zeppelin.service.NotebookService.removeParagraph(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 478,
                "lineEnd": 499
            },
            "org.apache.zeppelin.service.NotebookService.insertParagraph(String noteId, int index, Map<String, Object> config, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 501,
                "lineEnd": 519
            },
            "org.apache.zeppelin.service.NotebookService.restoreNote(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 521,
                "lineEnd": 550
            },
            "org.apache.zeppelin.service.NotebookService.restoreFolder(String folderPath, ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 552,
                "lineEnd": 567
            },
            "org.apache.zeppelin.service.NotebookService.restoreAll(ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 569,
                "lineEnd": 578
            },
            "org.apache.zeppelin.service.NotebookService.updateParagraph(String noteId, String paragraphId, String title, String text, Map<String, Object> params, Map<String, Object> config, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 580,
                "lineEnd": 615
            },
            "org.apache.zeppelin.service.NotebookService.getNextSessionParagraphId(String noteId, int maxParagraph, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 617,
                "lineEnd": 652
            },
            "org.apache.zeppelin.service.NotebookService.clearParagraphOutput(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 654,
                "lineEnd": 685
            },
            "org.apache.zeppelin.service.NotebookService.clearAllParagraphOutput(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 687,
                "lineEnd": 705
            },
            "org.apache.zeppelin.service.NotebookService.updateNote(String noteId, String name, Map<String, Object> config, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 707,
                "lineEnd": 738
            },
            "org.apache.zeppelin.service.NotebookService.isCronUpdated(Map<String, Object> configA, Map<String, Object> configB)": {
                "lineStart": 740,
                "lineEnd": 750
            },
            "org.apache.zeppelin.service.NotebookService.saveNoteForms(String noteId, Map<String, Object> noteParams, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 752,
                "lineEnd": 770
            },
            "org.apache.zeppelin.service.NotebookService.removeNoteForms(String noteId, String formName, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 772,
                "lineEnd": 791
            },
            "org.apache.zeppelin.service.NotebookService.checkpointNote(String noteId, String commitMessage, ServiceContext context, ServiceCallback<NotebookRepoWithVersionControl.Revision> callback)": {
                "lineStart": 793,
                "lineEnd": 810
            },
            "org.apache.zeppelin.service.NotebookService.listRevisionHistory(String noteId, ServiceContext context, ServiceCallback<List<NotebookRepoWithVersionControl.Revision>> callback)": {
                "lineStart": 812,
                "lineEnd": 825
            },
            "org.apache.zeppelin.service.NotebookService.setNoteRevision(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 827,
                "lineEnd": 850
            },
            "org.apache.zeppelin.service.NotebookService.getNotebyRevision(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 852,
                "lineEnd": 869
            },
            "org.apache.zeppelin.service.NotebookService.getNoteByRevisionForCompare(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 871,
                "lineEnd": 895
            },
            "org.apache.zeppelin.service.NotebookService.completion(String noteId, String paragraphId, String buffer, int cursor, ServiceContext context, ServiceCallback<List<InterpreterCompletion>> callback)": {
                "lineStart": 897,
                "lineEnd": 921
            },
            "org.apache.zeppelin.service.NotebookService.getEditorSetting(String noteId, String paragraphText, ServiceContext context, ServiceCallback<Map<String, Object>> callback)": {
                "lineStart": 923,
                "lineEnd": 941
            },
            "org.apache.zeppelin.service.NotebookService.updatePersonalizedMode(String noteId, boolean isPersonalized, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 943,
                "lineEnd": 961
            },
            "org.apache.zeppelin.service.NotebookService.moveNoteToTrash(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 963,
                "lineEnd": 993
            },
            "org.apache.zeppelin.service.NotebookService.moveFolderToTrash(String folderPath, ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 995,
                "lineEnd": 1004
            },
            "org.apache.zeppelin.service.NotebookService.emptyTrash(ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 1006,
                "lineEnd": 1015
            },
            "org.apache.zeppelin.service.NotebookService.removeFolder(String folderPath, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 1017,
                "lineEnd": 1029
            },
            "org.apache.zeppelin.service.NotebookService.renameFolder(String folderPath, String newFolderPath, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 1031,
                "lineEnd": 1043
            },
            "org.apache.zeppelin.service.NotebookService.spell(String noteId, Message message, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 1045,
                "lineEnd": 1095
            },
            "org.apache.zeppelin.service.NotebookService.addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p)": {
                "lineStart": 1097,
                "lineEnd": 1103
            },
            "org.apache.zeppelin.service.NotebookService.setParagraphUsingMessage(Note note, Message fromMessage, String paragraphId, String text, String title, Map<String, Object> params, Map<String, Object> config)": {
                "lineStart": 1105,
                "lineEnd": 1123
            },
            "org.apache.zeppelin.service.NotebookService.updateAngularObject(String noteId, String paragraphId, String interpreterGroupId, String varName, Object varValue, ServiceContext context, ServiceCallback<AngularObject> callback)": {
                "lineStart": 1125,
                "lineEnd": 1178
            },
            "org.apache.zeppelin.service.NotebookService.patchParagraph(final String noteId, final String paragraphId, String patchText, ServiceContext context, ServiceCallback<String> callback)": {
                "lineStart": 1180,
                "lineEnd": 1222
            },
            "org.apache.zeppelin.service.NotebookService.checkPermission(String noteId, Permission permission, Message.OP op, ServiceContext context, ServiceCallback<T> callback)": {
                "lineStart": 1226,
                "lineEnd": 1257
            }
        }
    },
    "CVE-2021-33609": {
        "0c1dafe09e-DataCommunicator.java": {
            "com.vaadin.data.provider.DataCommunicator.onRequestRows(int firstRowIndex, int numberOfRows, int firstCachedRowIndex, int cacheSize)": {
                "lineStart": 142,
                "lineEnd": 145
            }
        }
    },
    "CVE-2023-29216": {
        "2e77a14c0-SecurityUtils.java": {
            "org.apache.linkis.common.utils.SecurityUtils.checkJdbcSecurity(String url)": {
                "lineStart": 47,
                "lineEnd": 77
            },
            "org.apache.linkis.common.utils.SecurityUtils.checkJdbcSecurity(Map<String, Object> paramsMap)": {
                "lineStart": 79,
                "lineEnd": 119
            },
            "org.apache.linkis.common.utils.SecurityUtils.parseParamsMapToMysqlParamUrl(Map<String, Object> forceParams)": {
                "lineStart": 121,
                "lineEnd": 127
            },
            "org.apache.linkis.common.utils.SecurityUtils.appendMysqlForceParams(String url)": {
                "lineStart": 24,
                "lineEnd": 41
            },
            "org.apache.linkis.common.utils.SecurityUtils.appendMysqlForceParams(Map<String, Object> extraParams)": {
                "lineStart": 43,
                "lineEnd": 45
            }
        },
        "73fdf1ada-ConnectionManager.java": {
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.getJdbcUrl(Map<String, String> properties)": {
                "lineStart": 224,
                "lineEnd": 234
            },
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.getJdbcAuthType(Map<String, String> properties)": {
                "lineStart": 253,
                "lineEnd": 257
            }
        },
        "d4ddee737-JdbcParamUtils.java": {
            "org.apache.linkis.manager.engineplugin.jdbc.utils.JdbcParamUtils.validateJdbcUrl(String url)": {
                "lineStart": 34,
                "lineEnd": 39
            },
            "org.apache.linkis.manager.engineplugin.jdbc.utils.JdbcParamUtils.filterJdbcUrl(String url)": {
                "lineStart": 41,
                "lineEnd": 55
            }
        },
        "b5a3a54fa-SqlConnection.java": {
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.<init>(String host, Integer port, String username, String password, String database, Map<String, Object> extraParams)": {
                "lineStart": 22,
                "lineEnd": 28
            },
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.validateParams(Map<String, Object> extraParams)": {
                "lineStart": 30,
                "lineEnd": 39
            },
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.getDBConnection(ConnectMessage connectMessage, String database)": {
                "lineStart": 157,
                "lineEnd": 170
            }
        }
    },
    "CVE-2021-21606": {
        "d67c744e95-FingerprintMap.java": {
            "hudson.model.FingerprintMap.toByteArray(String md5sum)": {
                "lineStart": 33,
                "lineEnd": 37
            },
            "hudson.model.FingerprintMap.create(@NonNull String md5sum, @NonNull FingerprintParams createParams)": {
                "lineStart": 39,
                "lineEnd": 41
            }
        },
        "045a40d934-FileFingerprintStorage.java": {
            "jenkins.fingerprints.FileFingerprintStorage.load(@NonNull String id)": {
                "lineStart": 35,
                "lineEnd": 37
            }
        }
    },
    "CVE-2023-47797": {
        "da44588baabc3-LayoutsAdminDisplayContext.java": {
            "com.liferay.layout.admin.web.internal.display.context.LayoutsAdminDisplayContext._getDraftLayoutURL(Layout layout)": {
                "lineStart": 1452,
                "lineEnd": 1455
            }
        },
        "36f3afbd25325-LayoutUtilityPageEntryVerticalCard.java": {
            "com.liferay.layout.admin.web.internal.frontend.taglib.clay.servlet.taglib.LayoutUtilityPageEntryVerticalCard.getHref()": {
                "lineStart": 40,
                "lineEnd": 54
            }
        },
        "e42db0a3d8b4e-LayoutUtilityPageEntryActionDropdownItemsProvider.java": {
            "com.liferay.layout.admin.web.internal.servlet.taglib.util.LayoutUtilityPageEntryActionDropdownItemsProvider._getEditLayoutUtilityPageEntryActionUnsafeConsumer()": {
                "lineStart": 119,
                "lineEnd": 126
            }
        },
        "734a816f4a332-DisplayPageVerticalCard.java": {
            "com.liferay.layout.page.template.admin.web.internal.frontend.taglib.clay.servlet.taglib.DisplayPageVerticalCard.getHref()": {
                "lineStart": 61,
                "lineEnd": 75
            }
        },
        "a392c64ef32c1-LayoutPageTemplateEntryVerticalCard.java": {
            "com.liferay.layout.page.template.admin.web.internal.frontend.taglib.clay.servlet.taglib.LayoutPageTemplateEntryVerticalCard.getHref()": {
                "lineStart": 56,
                "lineEnd": 84
            }
        },
        "52fd8f69e7307-MasterLayoutVerticalCard.java": {
            "com.liferay.layout.page.template.admin.web.internal.frontend.taglib.clay.servlet.taglib.MasterLayoutVerticalCard.getHref()": {
                "lineStart": 64,
                "lineEnd": 83
            }
        },
        "737e94a060d95-DisplayPageActionDropdownItemsProvider.java": {
            "com.liferay.layout.page.template.admin.web.internal.servlet.taglib.util.DisplayPageActionDropdownItemsProvider._getEditDisplayPageActionUnsafeConsumer()": {
                "lineStart": 135,
                "lineEnd": 142
            }
        },
        "2b1841c5c9703-LayoutPageTemplateEntryActionDropdownItemsProvider.java": {
            "com.liferay.layout.page.template.admin.web.internal.servlet.taglib.util.LayoutPageTemplateEntryActionDropdownItemsProvider._getEditLayoutPageTemplateEntryActionUnsafeConsumer()": {
                "lineStart": 136,
                "lineEnd": 157
            }
        },
        "db71805877785-MasterLayoutActionDropdownItemsProvider.java": {
            "com.liferay.layout.page.template.admin.web.internal.servlet.taglib.util.MasterLayoutActionDropdownItemsProvider._getEditMasterLayoutActionUnsafeConsumer()": {
                "lineStart": 126,
                "lineEnd": 137
            }
        }
    },
    "CVE-2023-28671": {
        "8184ccd-OctoperfCredentialImpl.java": {
            "org.jenkinsci.plugins.octoperf.OctoperfCredentialImpl$DescriptorImpl.doTestLogin(@QueryParameter(\"username\") final String username, @QueryParameter(\"password\") final Secret password)": {
                "lineStart": 30,
                "lineEnd": 41
            }
        }
    },
    "CVE-2021-44521": {
        "f676260a64-Config.java": {
            "org.apache.cassandra.config.Config.getOutboundBindAny()": {
                "lineStart": 193,
                "lineEnd": 195
            },
            "org.apache.cassandra.config.Config.setOutboundBindAny(boolean value)": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "org.apache.cassandra.config.Config.isClientMode()": {
                "lineStart": 205,
                "lineEnd": 207
            },
            "org.apache.cassandra.config.Config.setClientMode(boolean clientMode)": {
                "lineStart": 209,
                "lineEnd": 211
            },
            "org.apache.cassandra.config.Config.getOverrideLoadConfig()": {
                "lineStart": 213,
                "lineEnd": 215
            },
            "org.apache.cassandra.config.Config.setOverrideLoadConfig(Supplier<Config> loadConfig)": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "org.apache.cassandra.config.Config.log(Config config)": {
                "lineStart": 243,
                "lineEnd": 268
            }
        },
        "867cf5922f-DatabaseDescriptor.java": {
            "org.apache.cassandra.config.DatabaseDescriptor.applyConfig(Config config)": {
                "lineStart": 254,
                "lineEnd": 684
            }
        },
        "13d1945f43-ThreadAwareSecurityManager.java": {
            "org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPermission(Permission perm)": {
                "lineStart": 150,
                "lineEnd": 158
            }
        }
    },
    "CVE-2021-3312": {
        "b6f92e05fa-CmsResourceTypeImage.java": {
            "org.opencms.file.types.CmsResourceTypeImage.tryAddImageSizeFromSvg(byte[] content, List<CmsProperty> properties)": {
                "lineStart": 305,
                "lineEnd": 354
            }
        },
        "dee3380086-CmsXmlEntityResolver.java": {
            "org.opencms.xml.CmsXmlEntityResolver.resolveEntity(String publicId, String systemId)": {
                "lineStart": 184,
                "lineEnd": 270
            }
        }
    },
    "CVE-2022-36895": {
        "a13c18e-JclDescriptorImpl.java": {
            "com.compuware.jenkins.build.JclDescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 71,
                "lineEnd": 86
            },
            "com.compuware.jenkins.build.JclDescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 88,
                "lineEnd": 109
            }
        }
    },
    "CVE-2024-39460": {
        "88f3dd2-BitbucketSCMSource.java": {
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.build(SCMHead head, SCMRevision revision)": {
                "lineStart": 732,
                "lineEnd": 771
            }
        },
        "b8d5452-BitbucketAuthenticator.java": {
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.<init>(StandardCredentials credentials)": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.getId()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.configureBuilder(HttpClientBuilder builder)": {
                "lineStart": 24,
                "lineEnd": 25
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.configureContext(HttpClientContext context, HttpHost host)": {
                "lineStart": 27,
                "lineEnd": 28
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.configureRequest(HttpRequest request)": {
                "lineStart": 30,
                "lineEnd": 31
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.addAuthToken(BitbucketHref bitbucketHref)": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.BitbucketAuthenticator.authenticationContext(String serverUrl)": {
                "lineStart": 37,
                "lineEnd": 45
            }
        },
        "2dbc943-BitbucketAccessTokenAuthenticator.java": {
            "com.cloudbees.jenkins.plugins.bitbucket.api.credentials.BitbucketAccessTokenAuthenticator.<init>(StringCredentials credentials)": {
                "lineStart": 9,
                "lineEnd": 12
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.credentials.BitbucketAccessTokenAuthenticator.configureRequest(HttpRequest request)": {
                "lineStart": 14,
                "lineEnd": 16
            }
        },
        "0a8d650-BitbucketOAuthAuthenticator.java": {
            "com.cloudbees.jenkins.plugins.bitbucket.api.credentials.BitbucketOAuthAuthenticator.addAuthToken(BitbucketHref bitbucketHref)": {
                "lineStart": 24,
                "lineEnd": 40
            }
        },
        "9d1a317-BitbucketUsernamePasswordAuthenticator.java": {
            "com.cloudbees.jenkins.plugins.bitbucket.api.credentials.BitbucketUsernamePasswordAuthenticator.<init>(StandardUsernamePasswordCredentials credentials)": {
                "lineStart": 18,
                "lineEnd": 21
            },
            "com.cloudbees.jenkins.plugins.bitbucket.api.credentials.BitbucketUsernamePasswordAuthenticator.configureContext(HttpClientContext context, HttpHost host)": {
                "lineStart": 23,
                "lineEnd": 31
            }
        }
    },
    "CVE-2024-25145": {
        "4ca9a45cdf33f-SummaryBuilderImpl.java": {
            "com.liferay.portal.search.internal.summary.SummaryBuilderImpl._buildContent()": {
                "lineStart": 40,
                "lineEnd": 50
            },
            "com.liferay.portal.search.internal.summary.SummaryBuilderImpl._buildContentPlain()": {
                "lineStart": 56,
                "lineEnd": 62
            },
            "com.liferay.portal.search.internal.summary.SummaryBuilderImpl._buildTitle()": {
                "lineStart": 64,
                "lineEnd": 74
            }
        }
    },
    "CVE-2020-5397": {
        "d24594cef0-CorsUtils.java": {
            "org.springframework.web.cors.CorsUtils.isPreFlightRequest(HttpServletRequest request)": {
                "lineStart": 38,
                "lineEnd": 40
            }
        },
        "006f32f684-CorsUtils.java": {
            "org.springframework.web.cors.reactive.CorsUtils.isPreFlightRequest(ServerHttpRequest request)": {
                "lineStart": 15,
                "lineEnd": 17
            }
        },
        "848249f976-AbstractHandlerMapping.java": {
            "org.springframework.web.reactive.handler.AbstractHandlerMapping.getHandler(ServerWebExchange exchange)": {
                "lineStart": 87,
                "lineEnd": 108
            }
        },
        "bc7b46e416-AbstractHandlerMethodMapping.java": {
            "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.hasCorsConfigurationSource(Object handler)": {
                "lineStart": 238,
                "lineEnd": 240
            }
        },
        "df7096c523-AbstractHandlerMapping.java": {
            "org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(HttpServletRequest request)": {
                "lineStart": 211,
                "lineEnd": 243
            }
        },
        "5a1c7ece04-AbstractHandlerMethodMapping.java": {
            "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.hasCorsConfigurationSource(Object handler)": {
                "lineStart": 278,
                "lineEnd": 280
            }
        }
    },
    "CVE-2022-27199": {
        "9603223-AWSCredentialsImpl.java": {
            "com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl$DescriptorImpl.doCheckSecretKey(@QueryParameter(\"accessKey\") final String accessKey, @QueryParameter(\"iamRoleArn\") final String iamRoleArn, @QueryParameter(\"iamExternalId\") final String iamExternalId, @QueryParameter(\"iamMfaSerialNumber\") final String iamMfaSerialNumber, @QueryParameter(\"iamMfaToken\") final String iamMfaToken, @QueryParameter(\"stsTokenDuration\") final Integer stsTokenDuration, @QueryParameter final String secretKey)": {
                "lineStart": 198,
                "lineEnd": 256
            }
        }
    },
    "CVE-2023-2196": {
        "5880869-CodeDxPublisher.java": {
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckSourceAndBinaryFiles(@QueryParameter final String value, @QueryParameter final boolean gitFetchConfiguration, @QueryParameter final String toolOutputFiles, @AncestorInPath AbstractProject project)": {
                "lineStart": 633,
                "lineEnd": 651
            },
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckExcludedSourceAndBinaryFiles(@QueryParameter final String value, @AncestorInPath AbstractProject project)": {
                "lineStart": 653,
                "lineEnd": 661
            },
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckToolOutputFiles(@QueryParameter final String value, @QueryParameter final String sourceAndBinaryFiles, @QueryParameter final boolean gitFetchConfiguration, @AncestorInPath AbstractProject project)": {
                "lineStart": 663,
                "lineEnd": 673
            }
        },
        "ef156ea-Util.java": {
            "org.jenkinsci.plugins.codedx.Util.checkCSVFileMatches(final String value, final FilePath workspace)": {
                "lineStart": 41,
                "lineEnd": 61
            }
        }
    },
    "CVE-2022-4566": {
        "246a9cfc-SqlUtil.java": {
            "com.ruoyi.common.utils.sql.SqlUtil.escapeOrderBySql(String value)": {
                "lineStart": 7,
                "lineEnd": 13
            },
            "com.ruoyi.common.utils.sql.SqlUtil.isValidOrderBySql(String value)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.ruoyi.common.utils.sql.SqlUtil.filterKeyword(String value)": {
                "lineStart": 19,
                "lineEnd": 32
            }
        },
        "d482c225-GenController.java": {
            "com.ruoyi.generator.controller.GenController.create(String sql)": {
                "lineStart": 120,
                "lineEnd": 148
            }
        }
    },
    "CVE-2020-13925": {
        "eda3c5eb81-CliCommandExecutor.java": {
            "org.apache.kylin.common.util.CliCommandExecutor.checkParameter(String commandParameter)": {
                "lineStart": 149,
                "lineEnd": 156
            }
        },
        "7a8cc0ae55-CubeService.java": {
            "org.apache.kylin.rest.service.CubeService.migrateCube(CubeInstance cube, String projectName)": {
                "lineStart": 964,
                "lineEnd": 993
            }
        }
    },
    "CVE-2021-27582": {
        "d8946469-OAuthConfirmationController.java": {
            "org.mitre.oauth2.web.OAuthConfirmationController.confimAccess(Map<String, Object> model, @ModelAttribute(\"authorizationRequest\") AuthorizationRequest authRequest, Principal p)": {
                "lineStart": 54,
                "lineEnd": 149
            }
        }
    },
    "CVE-2020-2100": {
        "aa71b2e23b-DNSMultiCast.java": {
            "hudson.DNSMultiCast.<init>(final Jenkins jenkins)": {
                "lineStart": 17,
                "lineEnd": 63
            },
            "hudson.DNSMultiCast.close()": {
                "lineStart": 65,
                "lineEnd": 71
            }
        },
        "03bdbc3bba-UDPBroadcastThread.java": {
            "hudson.UDPBroadcastThread.<init>(Hudson jenkins)": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "hudson.UDPBroadcastThread.<init>(Jenkins jenkins)": {
                "lineStart": 27,
                "lineEnd": 31
            },
            "hudson.UDPBroadcastThread.run()": {
                "lineStart": 33,
                "lineEnd": 73
            },
            "hudson.UDPBroadcastThread.tag(StringBuilder buf, String tag, Object value)": {
                "lineStart": 75,
                "lineEnd": 78
            },
            "hudson.UDPBroadcastThread.shutdown()": {
                "lineStart": 80,
                "lineEnd": 84
            }
        }
    },
    "CVE-2020-17521": {
        "f6776371fe-DefaultGroovyStaticMethods.java": {
            "org.codehaus.groovy.runtime.DefaultGroovyStaticMethods.createTempDir(File self)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "org.codehaus.groovy.runtime.DefaultGroovyStaticMethods.createTempDir(File self, final String prefix, final String suffix)": {
                "lineStart": 96,
                "lineEnd": 134
            }
        }
    },
    "CVE-2023-26471": {
        "3edb17a2ffe-BlockAsyncRendererConfiguration.java": {
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.<init>(List<?> idElements, Block block)": {
                "lineStart": 29,
                "lineEnd": 40
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.addElements(Iterable<?> elements)": {
                "lineStart": 42,
                "lineEnd": 53
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getId()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setId(List<String> id)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getBlock()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getXDOM()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setXDOM(XDOM xdom)": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.isAsyncAllowed()": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setAsyncAllowed(boolean asyncAllowed)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.isCacheAllowed()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setCacheAllowed(boolean cacheAllowed)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getDefaultSyntax()": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setDefaultSyntax(Syntax defaultSyntax)": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getTransformationId()": {
                "lineStart": 99,
                "lineEnd": 101
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setTransformationId(String transformationId)": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getTargetSyntax()": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setTargetSyntax(Syntax targetSyntax)": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.isInline()": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setInline(boolean inline)": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getDecorator()": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setDecorator(BlockAsyncRendererDecorator decorator)": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getReferences()": {
                "lineStart": 131,
                "lineEnd": 133
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setReferences(Set<EntityReference> references)": {
                "lineStart": 135,
                "lineEnd": 137
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.useEntity(EntityReference reference)": {
                "lineStart": 139,
                "lineEnd": 145
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.getRoles()": {
                "lineStart": 147,
                "lineEnd": 149
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.setRoles(Set<ComponentRole<?>> roles)": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.useComponent(Type roleType)": {
                "lineStart": 155,
                "lineEnd": 161
            },
            "org.xwiki.rendering.async.internal.block.BlockAsyncRendererConfiguration.useComponent(Type roleType, String roleHint)": {
                "lineStart": 163,
                "lineEnd": 169
            }
        },
        "d9e1328a268-DefaultBlockAsyncRenderer.java": {
            "org.xwiki.rendering.async.internal.block.DefaultBlockAsyncRenderer.tranform(XDOM xdom, Block block)": {
                "lineStart": 86,
                "lineEnd": 96
            }
        },
        "8a40f51ca5e-AbstractExecutedContentMacro.java": {
            "org.xwiki.rendering.async.internal.AbstractExecutedContentMacro.createBlockAsyncRendererConfiguration(List<?> idElements, Block content, String source, MacroTransformationContext context)": {
                "lineStart": 57,
                "lineEnd": 70
            }
        }
    },
    "CVE-2023-2585": {
        "7327efd8d0-OAuth2DeviceCodeModel.java": {
            "org.keycloak.models.OAuth2DeviceCodeModel.toMap()": {
                "lineStart": 162,
                "lineEnd": 201
            }
        },
        "d1da7a0dc0-CibaGrantType.java": {
            "org.keycloak.protocol.oidc.grants.ciba.CibaGrantType.cibaGrant()": {
                "lineStart": 85,
                "lineEnd": 160
            }
        },
        "12e9cc5e80-DeviceGrantType.java": {
            "org.keycloak.protocol.oidc.grants.device.DeviceGrantType.getDeviceByDeviceCode(KeycloakSession session, RealmModel realm, String deviceCode)": {
                "lineStart": 107,
                "lineEnd": 111
            },
            "org.keycloak.protocol.oidc.grants.device.DeviceGrantType.oauth2DeviceFlow()": {
                "lineStart": 167,
                "lineEnd": 267
            }
        }
    },
    "CVE-2021-35515": {
        "7bf705e9f-TarArchiveInputStream.java": {
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders()": {
                "lineStart": 297,
                "lineEnd": 304
            },
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders()": {
                "lineStart": 306,
                "lineEnd": 325
            }
        },
        "af87df570-TarFile.java": {
            "org.apache.commons.compress.archivers.tar.TarFile.paxHeaders()": {
                "lineStart": 220,
                "lineEnd": 247
            },
            "org.apache.commons.compress.archivers.tar.TarFile.readGlobalPaxHeaders()": {
                "lineStart": 249,
                "lineEnd": 259
            }
        },
        "1476bba3b-TarUtils.java": {
            "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(final InputStream inputStream, final List<TarArchiveStructSparse> sparseHeaders, final Map<String, String> globalPaxHeaders)": {
                "lineStart": 371,
                "lineEnd": 476
            }
        }
    },
    "CVE-2022-41881": {
        "5a79ee7891-HAProxyMessage.java": {
            "io.netty.handler.codec.haproxy.HAProxyMessage.readTlvs(final ByteBuf header)": {
                "lineStart": 162,
                "lineEnd": 178
            },
            "io.netty.handler.codec.haproxy.HAProxyMessage.readNextTLV(final ByteBuf header)": {
                "lineStart": 180,
                "lineEnd": 219
            }
        }
    },
    "CVE-2020-5413": {
        "7026617eb0-AbstractKryoCodec.java": {
            "org.springframework.integration.codec.kryo.AbstractKryoCodec.<init>()": {
                "lineStart": 15,
                "lineEnd": 22
            }
        },
        "3ccb81c1ba-KryoClassListRegistrar.java": {
            "org.springframework.integration.codec.kryo.KryoClassListRegistrar.<init>(List<Class<?>> classes)": {
                "lineStart": 11,
                "lineEnd": 13
            },
            "org.springframework.integration.codec.kryo.KryoClassListRegistrar.setInitialValue(int initialValue)": {
                "lineStart": 15,
                "lineEnd": 18
            },
            "org.springframework.integration.codec.kryo.KryoClassListRegistrar.getRegistrations()": {
                "lineStart": 20,
                "lineEnd": 30
            }
        }
    },
    "CVE-2021-21292": {
        "831cd3ebc-WindowsService.java": {
            "org.traccar.WindowsService.install(String displayName, String description, String[] dependencies, String account, String password, String config)": {
                "lineStart": 26,
                "lineEnd": 54
            }
        }
    },
    "CVE-2020-5408": {
        "c59246320d-BCryptPasswordEncoder.java": {
            "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence rawPassword)": {
                "lineStart": 48,
                "lineEnd": 58
            },
            "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence rawPassword, String encodedPassword)": {
                "lineStart": 60,
                "lineEnd": 72
            }
        }
    },
    "CVE-2020-1963": {
        "02e15f6d69-DecisionTreeClassificationTrainerSQLInferenceExample.java": {
            "org.apache.ignite.examples.ml.sql.DecisionTreeClassificationTrainerSQLInferenceExample.main(String[] args)": {
                "lineStart": 20,
                "lineEnd": 67
            }
        },
        "dff2977756-DecisionTreeClassificationTrainerSQLTableExample.java": {
            "org.apache.ignite.examples.ml.sql.DecisionTreeClassificationTrainerSQLTableExample.main(String[] args)": {
                "lineStart": 20,
                "lineEnd": 67
            }
        },
        "a27e582373-DistributedBaselineConfiguration.java": {
            "org.apache.ignite.internal.cluster.DistributedBaselineConfiguration.<init>(GridInternalSubscriptionProcessor isp, GridKernalContext ctx, IgniteLogger log)": {
                "lineStart": 31,
                "lineEnd": 50
            },
            "org.apache.ignite.internal.cluster.DistributedBaselineConfiguration.setDefaultValue(DistributedProperty<T> property, T value, IgniteLogger log)": {
                "lineStart": 52,
                "lineEnd": 70
            },
            "org.apache.ignite.internal.cluster.DistributedBaselineConfiguration.makeUpdateListener()": {
                "lineStart": 72,
                "lineEnd": 75
            }
        },
        "2fa69865fc-IgniteH2Indexing.java": {
            "org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.start(GridKernalContext ctx, GridSpinBusyLock busyLock)": {
                "lineStart": 1214,
                "lineEnd": 1260
            }
        }
    },
    "CVE-2020-2307": {
        "f8fcebe9-PodTemplateUtils.java": {
            "org.csanchez.jenkins.plugins.kubernetes.PodTemplateUtils.substituteEnv(String s)": {
                "lineStart": 337,
                "lineEnd": 339
            },
            "org.csanchez.jenkins.plugins.kubernetes.PodTemplateUtils.substituteEnv(String s, String defaultValue)": {
                "lineStart": 341,
                "lineEnd": 343
            }
        }
    },
    "CVE-2023-34602": {
        "b8e60c3d-AbstractQueryBlackListHandler.java": {
            "org.jeecg.common.util.security.AbstractQueryBlackListHandler.isPass(String sql)": {
                "lineStart": 11,
                "lineEnd": 45
            }
        }
    },
    "CVE-2023-23612": {
        "48727b5c84b-NoOpEngine.java": {
            "org.opensearch.index.engine.NoOpEngine.translogManager()": {
                "lineStart": 105,
                "lineEnd": 167
            }
        },
        "34a8aa996bf-InternalTranslogManager.java": {
            "org.opensearch.index.translog.InternalTranslogManager.getPendingTranslogRecovery()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.opensearch.index.translog.InternalTranslogManager.<init>(TranslogConfig translogConfig, LongSupplier primaryTermSupplier, LongSupplier globalCheckpointSupplier, TranslogDeletionPolicy translogDeletionPolicy, ShardId shardId, ReleasableLock readLock, Supplier<LocalCheckpointTracker> localCheckpointTrackerSupplier, String translogUUID, TranslogEventListener translogEventListener, LifecycleAware engineLifeCycleAware, TranslogFactory translogFactory)": {
                "lineStart": 32,
                "lineEnd": 50
            },
            "org.opensearch.index.translog.InternalTranslogManager.rollTranslogGeneration()": {
                "lineStart": 52,
                "lineEnd": 73
            },
            "org.opensearch.index.translog.InternalTranslogManager.recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long localCheckpoint, long recoverUpToSeqNo)": {
                "lineStart": 75,
                "lineEnd": 102
            },
            "org.opensearch.index.translog.InternalTranslogManager.recoverFromTranslogInternal(TranslogRecoveryRunner translogRecoveryRunner, long localCheckpoint, long recoverUpToSeqNo)": {
                "lineStart": 104,
                "lineEnd": 124
            },
            "org.opensearch.index.translog.InternalTranslogManager.isTranslogSyncNeeded()": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "org.opensearch.index.translog.InternalTranslogManager.ensureTranslogSynced(Stream<Translog.Location> locations)": {
                "lineStart": 130,
                "lineEnd": 137
            },
            "org.opensearch.index.translog.InternalTranslogManager.syncTranslog()": {
                "lineStart": 139,
                "lineEnd": 142
            },
            "org.opensearch.index.translog.InternalTranslogManager.getTranslogStats()": {
                "lineStart": 144,
                "lineEnd": 146
            },
            "org.opensearch.index.translog.InternalTranslogManager.getTranslogLastWriteLocation()": {
                "lineStart": 148,
                "lineEnd": 150
            },
            "org.opensearch.index.translog.InternalTranslogManager.trimUnreferencedTranslogFiles()": {
                "lineStart": 152,
                "lineEnd": 172
            },
            "org.opensearch.index.translog.InternalTranslogManager.shouldRollTranslogGeneration()": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "org.opensearch.index.translog.InternalTranslogManager.trimOperationsFromTranslog(long belowTerm, long aboveSeqNo)": {
                "lineStart": 178,
                "lineEnd": 198
            },
            "org.opensearch.index.translog.InternalTranslogManager.restoreLocalHistoryFromTranslog(long processedCheckpoint, TranslogRecoveryRunner translogRecoveryRunner)": {
                "lineStart": 200,
                "lineEnd": 209
            },
            "org.opensearch.index.translog.InternalTranslogManager.ensureCanFlush()": {
                "lineStart": 211,
                "lineEnd": 216
            },
            "org.opensearch.index.translog.InternalTranslogManager.readOperation(Translog.Location location)": {
                "lineStart": 218,
                "lineEnd": 220
            },
            "org.opensearch.index.translog.InternalTranslogManager.add(Translog.Operation operation)": {
                "lineStart": 222,
                "lineEnd": 224
            },
            "org.opensearch.index.translog.InternalTranslogManager.skipTranslogRecovery()": {
                "lineStart": 226,
                "lineEnd": 229
            },
            "org.opensearch.index.translog.InternalTranslogManager.getTranslog()": {
                "lineStart": 231,
                "lineEnd": 233
            },
            "org.opensearch.index.translog.InternalTranslogManager.getTranslog(boolean ensureOpen)": {
                "lineStart": 235,
                "lineEnd": 241
            },
            "org.opensearch.index.translog.InternalTranslogManager.openTranslog(TranslogConfig translogConfig, LongSupplier primaryTermSupplier, TranslogDeletionPolicy translogDeletionPolicy, LongSupplier globalCheckpointSupplier, LongConsumer persistedSequenceNumberConsumer, String translogUUID, TranslogFactory translogFactory)": {
                "lineStart": 243,
                "lineEnd": 245
            },
            "org.opensearch.index.translog.InternalTranslogManager.getLastSyncedGlobalCheckpoint()": {
                "lineStart": 247,
                "lineEnd": 249
            },
            "org.opensearch.index.translog.InternalTranslogManager.getMaxSeqNo()": {
                "lineStart": 251,
                "lineEnd": 253
            },
            "org.opensearch.index.translog.InternalTranslogManager.trimUnreferencedReaders()": {
                "lineStart": 255,
                "lineEnd": 257
            },
            "org.opensearch.index.translog.InternalTranslogManager.getDeletionPolicy()": {
                "lineStart": 259,
                "lineEnd": 261
            },
            "org.opensearch.index.translog.InternalTranslogManager.getTragicExceptionIfClosed()": {
                "lineStart": 263,
                "lineEnd": 265
            },
            "org.opensearch.index.translog.InternalTranslogManager.getTranslogUUID()": {
                "lineStart": 267,
                "lineEnd": 269
            },
            "org.opensearch.index.translog.InternalTranslogManager.shouldPeriodicallyFlush(long localCheckpointOfLastCommit, long flushThreshold)": {
                "lineStart": 271,
                "lineEnd": 279
            },
            "org.opensearch.index.translog.InternalTranslogManager.close()": {
                "lineStart": 281,
                "lineEnd": 283
            }
        },
        "328edad51b5-NoOpTranslogManager.java": {
            "org.opensearch.index.translog.NoOpTranslogManager.<init>(ShardId shardId, ReleasableLock readLock, Runnable ensureOpen, TranslogStats translogStats, Translog.Snapshot emptyTranslogSnapshot)": {
                "lineStart": 12,
                "lineEnd": 18
            },
            "org.opensearch.index.translog.NoOpTranslogManager.rollTranslogGeneration()": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "org.opensearch.index.translog.NoOpTranslogManager.recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long localCheckpoint, long recoverUpToSeqNo)": {
                "lineStart": 21,
                "lineEnd": 34
            },
            "org.opensearch.index.translog.NoOpTranslogManager.isTranslogSyncNeeded()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.opensearch.index.translog.NoOpTranslogManager.ensureTranslogSynced(Stream<Translog.Location> locations)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "org.opensearch.index.translog.NoOpTranslogManager.syncTranslog()": {
                "lineStart": 44,
                "lineEnd": 44
            },
            "org.opensearch.index.translog.NoOpTranslogManager.getTranslogStats()": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "org.opensearch.index.translog.NoOpTranslogManager.getTranslogLastWriteLocation()": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "org.opensearch.index.translog.NoOpTranslogManager.trimUnreferencedTranslogFiles()": {
                "lineStart": 53,
                "lineEnd": 53
            },
            "org.opensearch.index.translog.NoOpTranslogManager.shouldRollTranslogGeneration()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "org.opensearch.index.translog.NoOpTranslogManager.trimOperationsFromTranslog(long belowTerm, long aboveSeqNo)": {
                "lineStart": 58,
                "lineEnd": 58
            },
            "org.opensearch.index.translog.NoOpTranslogManager.ensureCanFlush()": {
                "lineStart": 59,
                "lineEnd": 59
            },
            "org.opensearch.index.translog.NoOpTranslogManager.restoreLocalHistoryFromTranslog(long processedCheckpoint, TranslogRecoveryRunner translogRecoveryRunner)": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "org.opensearch.index.translog.NoOpTranslogManager.skipTranslogRecovery()": {
                "lineStart": 64,
                "lineEnd": 64
            },
            "org.opensearch.index.translog.NoOpTranslogManager.readOperation(Translog.Location location)": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.opensearch.index.translog.NoOpTranslogManager.add(Translog.Operation operation)": {
                "lineStart": 69,
                "lineEnd": 71
            }
        },
        "629b1bebcca-RemoteFsTranslog.java": {
            "org.opensearch.index.translog.RemoteFsTranslog.<init>(TranslogConfig config, String translogUUID, TranslogDeletionPolicy deletionPolicy, LongSupplier globalCheckpointSupplier, LongSupplier primaryTermSupplier, LongConsumer persistedSequenceNumberConsumer, BlobStoreRepository blobStoreRepository, ExecutorService executorService)": {
                "lineStart": 29,
                "lineEnd": 62
            },
            "org.opensearch.index.translog.RemoteFsTranslog.download(TranslogTransferManager translogTransferManager, Path location)": {
                "lineStart": 64,
                "lineEnd": 84
            },
            "org.opensearch.index.translog.RemoteFsTranslog.buildTranslogTransferManager(BlobStoreRepository blobStoreRepository, ExecutorService executorService, ShardId shardId, FileTransferTracker fileTransferTracker)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "org.opensearch.index.translog.RemoteFsTranslog.ensureSynced(Location location)": {
                "lineStart": 90,
                "lineEnd": 105
            },
            "org.opensearch.index.translog.RemoteFsTranslog.rollGeneration()": {
                "lineStart": 107,
                "lineEnd": 114
            },
            "org.opensearch.index.translog.RemoteFsTranslog.prepareAndUpload(Long primaryTerm, Long generation)": {
                "lineStart": 116,
                "lineEnd": 155
            },
            "org.opensearch.index.translog.RemoteFsTranslog.upload(Long primaryTerm, Long generation)": {
                "lineStart": 157,
                "lineEnd": 186
            },
            "org.opensearch.index.translog.RemoteFsTranslog.allUploaded()": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "org.opensearch.index.translog.RemoteFsTranslog.syncToDisk()": {
                "lineStart": 192,
                "lineEnd": 201
            },
            "org.opensearch.index.translog.RemoteFsTranslog.sync()": {
                "lineStart": 203,
                "lineEnd": 216
            },
            "org.opensearch.index.translog.RemoteFsTranslog.syncNeeded()": {
                "lineStart": 218,
                "lineEnd": 223
            },
            "org.opensearch.index.translog.RemoteFsTranslog.close()": {
                "lineStart": 225,
                "lineEnd": 238
            }
        },
        "f5a9faff8bf-Translog.java": {
            "org.opensearch.index.translog.Translog.minGenerationForSeqNo(long seqNo, TranslogWriter writer, List<TranslogReader> readers)": {
                "lineStart": 1233,
                "lineEnd": 1243
            },
            "org.opensearch.index.translog.Translog.getMinReferencedGen()": {
                "lineStart": 1317,
                "lineEnd": 1323
            }
        },
        "f82434f40b0-TranslogManager.java": {
            "org.opensearch.index.translog.TranslogManager.rollTranslogGeneration()": {
                "lineStart": 5,
                "lineEnd": 5
            },
            "org.opensearch.index.translog.TranslogManager.recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long localCheckpoint, long recoverUpToSeqNo)": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "org.opensearch.index.translog.TranslogManager.isTranslogSyncNeeded()": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "org.opensearch.index.translog.TranslogManager.ensureTranslogSynced(Stream<Translog.Location> locations)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.opensearch.index.translog.TranslogManager.syncTranslog()": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.opensearch.index.translog.TranslogManager.getTranslogStats()": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "org.opensearch.index.translog.TranslogManager.getTranslogLastWriteLocation()": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "org.opensearch.index.translog.TranslogManager.trimUnreferencedTranslogFiles()": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.opensearch.index.translog.TranslogManager.shouldRollTranslogGeneration()": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.opensearch.index.translog.TranslogManager.trimOperationsFromTranslog(long belowTerm, long aboveSeqNo)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.opensearch.index.translog.TranslogManager.restoreLocalHistoryFromTranslog(long processedCheckpoint, TranslogRecoveryRunner translogRecoveryRunner)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.opensearch.index.translog.TranslogManager.skipTranslogRecovery()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.opensearch.index.translog.TranslogManager.readOperation(Translog.Location location)": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.opensearch.index.translog.TranslogManager.add(Translog.Operation operation)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.opensearch.index.translog.TranslogManager.ensureCanFlush()": {
                "lineStart": 19,
                "lineEnd": 19
            }
        },
        "178cdc110ec-TranslogWriter.java": {
            "org.opensearch.index.translog.TranslogWriter.<init>(final ShardId shardId, final Checkpoint initialCheckpoint, final FileChannel channel, final FileChannel checkpointChannel, final Path path, final Path checkpointPath, final ByteSizeValue bufferSize, final LongSupplier globalCheckpointSupplier, LongSupplier minTranslogGenerationSupplier, TranslogHeader header, final TragicExceptionHolder tragedy, final LongConsumer persistedSequenceNumberConsumer, final BigArrays bigArrays)": {
                "lineStart": 58,
                "lineEnd": 78
            },
            "org.opensearch.index.translog.TranslogWriter.create(ShardId shardId, String translogUUID, long fileGeneration, Path file, ChannelFactory channelFactory, ByteSizeValue bufferSize, final long initialMinTranslogGen, long initialGlobalCheckpoint, final LongSupplier globalCheckpointSupplier, final LongSupplier minTranslogGenerationSupplier, final long primaryTerm, TragicExceptionHolder tragedy, final LongConsumer persistedSequenceNumberConsumer, final BigArrays bigArrays)": {
                "lineStart": 80,
                "lineEnd": 109
            },
            "org.opensearch.index.translog.TranslogWriter.closeWithTragicEvent(final Exception ex)": {
                "lineStart": 111,
                "lineEnd": 120
            },
            "org.opensearch.index.translog.TranslogWriter.add(final BytesReference data, final long seqNo)": {
                "lineStart": 122,
                "lineEnd": 151
            },
            "org.opensearch.index.translog.TranslogWriter.assertNoSeqNumberConflict(long seqNo, BytesReference data)": {
                "lineStart": 153,
                "lineEnd": 188
            },
            "org.opensearch.index.translog.TranslogWriter.assertNoSeqAbove(long belowTerm, long aboveSeqNo)": {
                "lineStart": 190,
                "lineEnd": 210
            },
            "org.opensearch.index.translog.TranslogWriter.sync()": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "org.opensearch.index.translog.TranslogWriter.syncNeeded()": {
                "lineStart": 216,
                "lineEnd": 218
            },
            "org.opensearch.index.translog.TranslogWriter.totalOperations()": {
                "lineStart": 220,
                "lineEnd": 222
            },
            "org.opensearch.index.translog.TranslogWriter.getCheckpoint()": {
                "lineStart": 224,
                "lineEnd": 227
            },
            "org.opensearch.index.translog.TranslogWriter.sizeInBytes()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "org.opensearch.index.translog.TranslogWriter.closeIntoReader()": {
                "lineStart": 233,
                "lineEnd": 269
            },
            "org.opensearch.index.translog.TranslogWriter.newSnapshot()": {
                "lineStart": 271,
                "lineEnd": 293
            },
            "org.opensearch.index.translog.TranslogWriter.getWrittenOffset()": {
                "lineStart": 295,
                "lineEnd": 297
            },
            "org.opensearch.index.translog.TranslogWriter.syncUpTo(long offset)": {
                "lineStart": 299,
                "lineEnd": 345
            },
            "org.opensearch.index.translog.TranslogWriter.writeBufferedOps(long offset, boolean blockOnExistingWriter)": {
                "lineStart": 347,
                "lineEnd": 362
            },
            "org.opensearch.index.translog.TranslogWriter.pollOpsToWrite()": {
                "lineStart": 364,
                "lineEnd": 376
            },
            "org.opensearch.index.translog.TranslogWriter.writeAndReleaseOps(ReleasableBytesReference toWrite)": {
                "lineStart": 378,
                "lineEnd": 404
            },
            "org.opensearch.index.translog.TranslogWriter.writeToFile(ByteBuffer ioBuffer)": {
                "lineStart": 406,
                "lineEnd": 412
            },
            "org.opensearch.index.translog.TranslogWriter.readBytes(ByteBuffer targetBuffer, long position)": {
                "lineStart": 414,
                "lineEnd": 427
            },
            "org.opensearch.index.translog.TranslogWriter.writeCheckpoint(final FileChannel fileChannel, final Path checkpointFile, final Checkpoint checkpoint)": {
                "lineStart": 429,
                "lineEnd": 431
            },
            "org.opensearch.index.translog.TranslogWriter.getLastSyncedCheckpoint()": {
                "lineStart": 433,
                "lineEnd": 435
            },
            "org.opensearch.index.translog.TranslogWriter.ensureOpen()": {
                "lineStart": 437,
                "lineEnd": 442
            },
            "org.opensearch.index.translog.TranslogWriter.checkChannelPositionWhileHandlingException(long expectedOffset)": {
                "lineStart": 444,
                "lineEnd": 452
            },
            "org.opensearch.index.translog.TranslogWriter.close()": {
                "lineStart": 454,
                "lineEnd": 465
            },
            "org.opensearch.index.translog.TranslogWriter.isClosed()": {
                "lineStart": 467,
                "lineEnd": 469
            }
        },
        "3a8e77d4cc1-BlobStoreTransferService.java": {
            "org.opensearch.index.translog.transfer.BlobStoreTransferService.<init>(BlobStore blobStore, ExecutorService executorService)": {
                "lineStart": 18,
                "lineEnd": 21
            },
            "org.opensearch.index.translog.transfer.BlobStoreTransferService.uploadBlobAsync(final TransferFileSnapshot fileSnapshot, Iterable<String> remoteTransferPath, ActionListener<TransferFileSnapshot> listener)": {
                "lineStart": 23,
                "lineEnd": 39
            },
            "org.opensearch.index.translog.transfer.BlobStoreTransferService.uploadBlob(final TransferFileSnapshot fileSnapshot, Iterable<String> remoteTransferPath)": {
                "lineStart": 41,
                "lineEnd": 51
            },
            "org.opensearch.index.translog.transfer.BlobStoreTransferService.downloadBlob(Iterable<String> path, String fileName)": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "org.opensearch.index.translog.transfer.BlobStoreTransferService.listAll(Iterable<String> path)": {
                "lineStart": 57,
                "lineEnd": 59
            }
        },
        "e950be0993e-FileTransferTracker.java": {
            "org.opensearch.index.translog.transfer.FileTransferTracker.<init>(ShardId shardId)": {
                "lineStart": 13,
                "lineEnd": 16
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker.onSuccess(TransferFileSnapshot fileSnapshot)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker.add(String file, boolean success)": {
                "lineStart": 22,
                "lineEnd": 25
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker.add(String file, TransferState targetState)": {
                "lineStart": 27,
                "lineEnd": 37
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker.onFailure(TransferFileSnapshot fileSnapshot, Exception e)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker.exclusionFilter(Set<TransferFileSnapshot> original)": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker.allUploaded()": {
                "lineStart": 47,
                "lineEnd": 58
            },
            "org.opensearch.index.translog.transfer.FileTransferTracker$TransferState.validateNextState(TransferState target)": {
                "lineStart": 62,
                "lineEnd": 71
            }
        },
        "6a67de99287-TransferService.java": {
            "org.opensearch.index.translog.transfer.TransferService.uploadBlobAsync(final TransferFileSnapshot fileSnapshot, Iterable<String> remotePath, ActionListener<TransferFileSnapshot> listener)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.opensearch.index.translog.transfer.TransferService.uploadBlob(final TransferFileSnapshot fileSnapshot, Iterable<String> remotePath)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.opensearch.index.translog.transfer.TransferService.listAll(Iterable<String> path)": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "org.opensearch.index.translog.transfer.TransferService.downloadBlob(Iterable<String> path, String fileName)": {
                "lineStart": 11,
                "lineEnd": 11
            }
        },
        "6750eedd861-TranslogTransferManager.java": {
            "org.opensearch.index.translog.transfer.TranslogTransferManager.<init>(TransferService transferService, BlobPath remoteBaseTransferPath, FileTransferTracker fileTransferTracker)": {
                "lineStart": 36,
                "lineEnd": 41
            },
            "org.opensearch.index.translog.transfer.TranslogTransferManager.transferSnapshot(TransferSnapshot transferSnapshot, TranslogTransferListener translogTransferListener)": {
                "lineStart": 43,
                "lineEnd": 96
            },
            "org.opensearch.index.translog.transfer.TranslogTransferManager.downloadTranslog(String primaryTerm, String generation, Path location)": {
                "lineStart": 98,
                "lineEnd": 105
            },
            "org.opensearch.index.translog.transfer.TranslogTransferManager.downloadToFS(String fileName, Path location, String primaryTerm)": {
                "lineStart": 107,
                "lineEnd": 118
            },
            "org.opensearch.index.translog.transfer.TranslogTransferManager.readMetadata()": {
                "lineStart": 120,
                "lineEnd": 133
            },
            "org.opensearch.index.translog.transfer.TranslogTransferManager.prepareMetadata(TransferSnapshot transferSnapshot)": {
                "lineStart": 135,
                "lineEnd": 144
            }
        },
        "939b56f109a-FileTransferListener.java": {
            "org.opensearch.index.translog.transfer.listener.FileTransferListener.onSuccess(TransferFileSnapshot fileSnapshot)": {
                "lineStart": 4,
                "lineEnd": 4
            },
            "org.opensearch.index.translog.transfer.listener.FileTransferListener.onFailure(TransferFileSnapshot fileSnapshot, Exception e)": {
                "lineStart": 5,
                "lineEnd": 5
            }
        }
    },
    "CVE-2023-44310": {
        "92efbc4f3b290-LayoutsTreeImpl.java": {
            "com.liferay.layout.internal.util.LayoutsTreeImpl._toJSONObject(Layout afterDeleteSelectedLayout, long childLayoutsCount, JSONArray childLayoutsJSONArray, HttpServletRequest httpServletRequest, boolean includeActions, Layout layout, ThemeDisplay themeDisplay)": {
                "lineStart": 196,
                "lineEnd": 274
            }
        }
    },
    "CVE-2022-28144": {
        "3ef6a30-Datacenter.java": {
            "org.jenkinsci.plugins.proxmox.Datacenter.<init>(String hostname, String username, String realm, Secret password, Boolean ignoreSSL)": {
                "lineStart": 32,
                "lineEnd": 40
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.provision(Label label, int excessWorkload)": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.canProvision(Label label)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getHostname()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getUsername()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getRealm()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getPassword()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getIgnoreSSL()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getDatacenterDescription()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getDescriptor()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.proxmoxInstance()": {
                "lineStart": 78,
                "lineEnd": 84
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getNodes()": {
                "lineStart": 86,
                "lineEnd": 95
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getQemuMachines(String node)": {
                "lineStart": 97,
                "lineEnd": 110
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getQemuMachineSnapshots(String node, Integer vmid)": {
                "lineStart": 112,
                "lineEnd": 125
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.getDisplayName()": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.configure(StaplerRequest req, JSONObject o)": {
                "lineStart": 132,
                "lineEnd": 135
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.fieldNotSpecifiedError(String fieldName)": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.emptyStringValidation(String fieldName, String value)": {
                "lineStart": 141,
                "lineEnd": 144
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckHostname(@QueryParameter String value)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckUsername(@QueryParameter String value)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckRealm(@QueryParameter String value)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckPassword(@QueryParameter Secret value)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doTestConnection(@QueryParameter String hostname, @QueryParameter String username, @QueryParameter String realm, @QueryParameter Secret password, @QueryParameter Boolean ignoreSSL)": {
                "lineStart": 162,
                "lineEnd": 190
            }
        },
        "6e469aa-VirtualMachineSlave.java": {
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doFillDatacenterNodeItems(@QueryParameter(\"datacenterDescription\") String datacenterDescription)": {
                "lineStart": 114,
                "lineEnd": 126
            },
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doFillVirtualMachineIdItems(@QueryParameter(\"datacenterDescription\") String datacenterDescription, @QueryParameter(\"datacenterNode\") String datacenterNode)": {
                "lineStart": 128,
                "lineEnd": 141
            },
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doFillSnapshotNameItems(@QueryParameter(\"datacenterDescription\") String datacenterDescription, @QueryParameter(\"datacenterNode\") String datacenterNode, @QueryParameter(\"virtualMachineId\") String virtualMachineId)": {
                "lineStart": 143,
                "lineEnd": 155
            },
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doTestRollback(@QueryParameter String datacenterDescription, @QueryParameter String datacenterNode, @QueryParameter Integer virtualMachineId, @QueryParameter String snapshotName)": {
                "lineStart": 181,
                "lineEnd": 195
            }
        }
    },
    "CVE-2022-28367": {
        "eb7ffaa-AntiSamyDOMScanner.java": {
            "org.owasp.validator.html.scan.AntiSamyDOMScanner.processStyleTag(Element ele, Node parentNode)": {
                "lineStart": 271,
                "lineEnd": 297
            }
        }
    },
    "CVE-2020-2110": {
        "a0307a6-RejectASTTransformsCustomizer.java": {
            "org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.RejectASTTransformsCustomizer$RejectASTTransformsVisitor.visitImports(ModuleNode node)": {
                "lineStart": 44,
                "lineEnd": 56
            },
            "org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.RejectASTTransformsCustomizer$RejectASTTransformsVisitor.visitAnnotations(AnnotatedNode node)": {
                "lineStart": 71,
                "lineEnd": 82
            }
        }
    },
    "CVE-2022-47105": {
        "53f2e7c1-DictQueryBlackListHandler.java": {
            "org.jeecg.modules.system.security.DictQueryBlackListHandler.getTableName(String str)": {
                "lineStart": 33,
                "lineEnd": 36
            }
        }
    },
    "CVE-2022-25192": {
        "f4c3c7c-VCommanderConfig.java": {
            "com.embotics.vlm.plugin.VCommanderConfig.<init>()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "com.embotics.vlm.plugin.VCommanderConfig.get()": {
                "lineStart": 41,
                "lineEnd": 52
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getVCommanderClient()": {
                "lineStart": 54,
                "lineEnd": 66
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setvCommanderClient(VCommanderClient vCommanderClient)": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "com.embotics.vlm.plugin.VCommanderConfig.configure(StaplerRequest req, JSONObject json)": {
                "lineStart": 72,
                "lineEnd": 76
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getCredential(String id, String address)": {
                "lineStart": 78,
                "lineEnd": 81
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getCredentialWithoutDomainAndTypeFiltering(String id)": {
                "lineStart": 83,
                "lineEnd": 86
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doFillCredentialsIdItems(@AncestorInPath Item item, @QueryParameter String credentialsId, @QueryParameter String address)": {
                "lineStart": 88,
                "lineEnd": 112
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doCheckAddress(@QueryParameter String value)": {
                "lineStart": 114,
                "lineEnd": 119
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doCheckCredentialsId(@AncestorInPath Item item, @QueryParameter String address, @QueryParameter String credentialsId)": {
                "lineStart": 121,
                "lineEnd": 145
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doTestConnection(@QueryParameter(\"address\") final String address, @QueryParameter(\"credentialsId\") final String credentialsId, @QueryParameter(\"orgName\") final String orgName)": {
                "lineStart": 147,
                "lineEnd": 173
            },
            "com.embotics.vlm.plugin.VCommanderConfig.findCredentialProblem(String id)": {
                "lineStart": 175,
                "lineEnd": 185
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getAddress()": {
                "lineStart": 187,
                "lineEnd": 189
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setAddress(String address)": {
                "lineStart": 191,
                "lineEnd": 193
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getCredentialsId()": {
                "lineStart": 195,
                "lineEnd": 197
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setCredentialsId(String credentialsId)": {
                "lineStart": 199,
                "lineEnd": 201
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getOrgName()": {
                "lineStart": 203,
                "lineEnd": 205
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setOrgName(String orgName)": {
                "lineStart": 207,
                "lineEnd": 209
            }
        },
        "fcd32c3-AbstractVCommanderAction.java": {
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.<init>(boolean sync, Long timeout, Long polling)": {
                "lineStart": 17,
                "lineEnd": 21
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getDefault(Long value, long minValue, long defaultValue)": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getSync()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getTimeout()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getPolling()": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction$AbstractVCommanderActionDescriptor.doCheckTimeout(@QueryParameter Long value)": {
                "lineStart": 40,
                "lineEnd": 46
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction$AbstractVCommanderActionDescriptor.doCheckPolling(@QueryParameter Long polling, @QueryParameter Long timeout)": {
                "lineStart": 48,
                "lineEnd": 58
            }
        },
        "36d32b8-VCommanderRunWorkflowAction.java": {
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.<init>(String targetType, String targetName, String workflowName, Boolean sync, Long timeout, Long polling)": {
                "lineStart": 27,
                "lineEnd": 32
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getTargetType()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getTargetName()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getWorkflowName()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.perform(Run<?, ?> run, TaskListener listener)": {
                "lineStart": 46,
                "lineEnd": 85
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.waitForWorkflowToBeCompleted(VCommanderClient client, String taskId, long timeout, long polling, Run<?, ?> run, TaskListener listener)": {
                "lineStart": 87,
                "lineEnd": 97
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getDescriptor()": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.getDisplayName()": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doFillTargetTypeItems()": {
                "lineStart": 109,
                "lineEnd": 116
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doCheckTargetType(@QueryParameter String targetType)": {
                "lineStart": 118,
                "lineEnd": 128
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doCheckTargetName(@QueryParameter String targetType, @QueryParameter String targetName)": {
                "lineStart": 130,
                "lineEnd": 140
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doCheckWorkflowName(@QueryParameter String targetType, @QueryParameter String workflowName)": {
                "lineStart": 142,
                "lineEnd": 188
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.isTargetTypeValid(String resolvedTargetType)": {
                "lineStart": 190,
                "lineEnd": 199
            }
        }
    },
    "CVE-2023-34434": {
        "1b63e046f-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 138,
                "lineEnd": 164
            }
        }
    },
    "CVE-2022-3952": {
        "5e8ea8c8e-WarFileLauncher.java": {
            "com.manydesigns.portofino.microservices.launcher.WarFileLauncher.createTempDir(int port)": {
                "lineStart": 80,
                "lineEnd": 86
            }
        }
    },
    "CVE-2020-10968": {
        "dee36a14e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type)": {
                "lineStart": 75,
                "lineEnd": 107
            }
        }
    },
    "CVE-2020-13921": {
        "0f4ff85086-H2AlarmQueryDAO.java": {
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2AlarmQueryDAO.getAlarm(Integer scopeId, String keyword, int limit, int from, long startTB, long endTB)": {
                "lineStart": 22,
                "lineEnd": 73
            }
        },
        "2566ab2b5e-H2MetadataQueryDAO.java": {
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetadataQueryDAO.searchServices(long startTimestamp, long endTimestamp, String keyword)": {
                "lineStart": 99,
                "lineEnd": 120
            },
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetadataQueryDAO.searchEndpoint(String keyword, String serviceId, int limit)": {
                "lineStart": 149,
                "lineEnd": 178
            }
        },
        "1928ef398e-H2TraceQueryDAO.java": {
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2TraceQueryDAO.queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration, String endpointName, String serviceId, String serviceInstanceId, String endpointId, String traceId, int limit, int from, TraceState traceState, QueryOrder queryOrder)": {
                "lineStart": 28,
                "lineEnd": 126
            }
        },
        "aea77c845d-MySQLAlarmQueryDAO.java": {
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.mysql.MySQLAlarmQueryDAO.getAlarm(Integer scopeId, String keyword, int limit, int from, long startTB, long endTB)": {
                "lineStart": 22,
                "lineEnd": 73
            }
        }
    },
    "CVE-2020-36634": {
        "061ed38-Variable.java": {
            "com.indeed.util.varexport.Variable.buildIndexableName(final String name)": {
                "lineStart": 19,
                "lineEnd": 25
            },
            "com.indeed.util.varexport.Variable.<init>(String name, Set<String> tags, String doc, boolean expand, String namespace)": {
                "lineStart": 27,
                "lineEnd": 34
            },
            "com.indeed.util.varexport.Variable.getName()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.indeed.util.varexport.Variable.getIndexableNames()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "com.indeed.util.varexport.Variable.getDoc()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "com.indeed.util.varexport.Variable.getTags()": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "com.indeed.util.varexport.Variable.getNamespace()": {
                "lineStart": 52,
                "lineEnd": 52
            },
            "com.indeed.util.varexport.Variable.getLastUpdated()": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "com.indeed.util.varexport.Variable.isExpandable()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "com.indeed.util.varexport.Variable.expand()": {
                "lineStart": 61,
                "lineEnd": 67
            },
            "com.indeed.util.varexport.Variable.hasDoc()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "com.indeed.util.varexport.Variable.isLive()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.indeed.util.varexport.Variable.canExpand()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.indeed.util.varexport.Variable.getValue()": {
                "lineStart": 75,
                "lineEnd": 75
            },
            "com.indeed.util.varexport.Variable.getNamespaceAndName()": {
                "lineStart": 76,
                "lineEnd": 82
            },
            "com.indeed.util.varexport.Variable.write(PrintWriter out, boolean includeDoc)": {
                "lineStart": 84,
                "lineEnd": 105
            },
            "com.indeed.util.varexport.Variable.writeValue(PrintWriter out)": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "com.indeed.util.varexport.Variable.getValueString()": {
                "lineStart": 111,
                "lineEnd": 114
            },
            "com.indeed.util.varexport.Variable.getSafeValue()": {
                "lineStart": 116,
                "lineEnd": 118
            },
            "com.indeed.util.varexport.Variable.getSafeName()": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "com.indeed.util.varexport.Variable.toString()": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "com.indeed.util.varexport.Variable.makePropertiesSafe(Object in, Set<Character> toEscape)": {
                "lineStart": 128,
                "lineEnd": 161
            },
            "com.indeed.util.varexport.Variable$JavaSourceEscaper.escape(String input)": {
                "lineStart": 164,
                "lineEnd": 178
            },
            "com.indeed.util.varexport.Variable$JavaSourceEscaper.escapeChar(char c)": {
                "lineStart": 180,
                "lineEnd": 192
            }
        },
        "da9a119-ViewExportedVariablesServlet.java": {
            "com.indeed.util.varexport.servlet.ViewExportedVariablesServlet.showUsingTemplate(final VariableHost exporter, final String uri, final String namespace, final boolean includeDoc, final Template template, final boolean withIndex, final PrintWriter out, final String... vars)": {
                "lineStart": 190,
                "lineEnd": 248
            },
            "com.indeed.util.varexport.servlet.ViewExportedVariablesServlet.buildIndex(final List<Variable> varList)": {
                "lineStart": 250,
                "lineEnd": 264
            },
            "com.indeed.util.varexport.servlet.ViewExportedVariablesServlet.buildNGramIndex(final List<Variable> varList, final int n)": {
                "lineStart": 288,
                "lineEnd": 304
            }
        }
    },
    "CVE-2022-30946": {
        "f0a3814-ScriptApproval.java": {
            "org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval.checking(@NonNull ClasspathEntry entry)": {
                "lineStart": 453,
                "lineEnd": 475
            }
        }
    },
    "CVE-2020-2105": {
        "024d66869d-Api.java": {
            "hudson.model.Api.setHeaders(StaplerResponse rsp)": {
                "lineStart": 184,
                "lineEnd": 187
            }
        }
    },
    "CVE-2021-25646": {
        "319c0d1f1d-DruidSecondaryModule.java": {
            "org.apache.druid.guice.DruidSecondaryModule.setupJackson(Injector injector, final ObjectMapper mapper)": {
                "lineStart": 48,
                "lineEnd": 52
            }
        },
        "7862c977ee-GuiceAnnotationIntrospector.java": {
            "org.apache.druid.guice.GuiceAnnotationIntrospector.findInjectableValueId(AnnotatedMember m)": {
                "lineStart": 11,
                "lineEnd": 34
            }
        }
    },
    "CVE-2023-28708": {
        "b943bfe0e8-Request.java": {
            "org.apache.catalina.connector.Request.<init>(Connector connector)": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "org.apache.catalina.connector.Request.setCoyoteRequest(org.apache.coyote.Request coyoteRequest)": {
                "lineStart": 110,
                "lineEnd": 113
            },
            "org.apache.catalina.connector.Request.getCoyoteRequest()": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "org.apache.catalina.connector.Request.addPathParameter(String name, String value)": {
                "lineStart": 161,
                "lineEnd": 163
            },
            "org.apache.catalina.connector.Request.getPathParameter(String name)": {
                "lineStart": 165,
                "lineEnd": 167
            },
            "org.apache.catalina.connector.Request.setAsyncSupported(boolean asyncSupported)": {
                "lineStart": 169,
                "lineEnd": 171
            },
            "org.apache.catalina.connector.Request.recycle()": {
                "lineStart": 173,
                "lineEnd": 247
            },
            "org.apache.catalina.connector.Request.recycleSessionInfo()": {
                "lineStart": 249,
                "lineEnd": 266
            },
            "org.apache.catalina.connector.Request.recycleCookieInfo(boolean recycleCoyote)": {
                "lineStart": 268,
                "lineEnd": 276
            },
            "org.apache.catalina.connector.Request.getConnector()": {
                "lineStart": 279,
                "lineEnd": 281
            },
            "org.apache.catalina.connector.Request.getContext()": {
                "lineStart": 283,
                "lineEnd": 285
            },
            "org.apache.catalina.connector.Request.getDiscardFacades()": {
                "lineStart": 287,
                "lineEnd": 289
            },
            "org.apache.catalina.connector.Request.getFilterChain()": {
                "lineStart": 292,
                "lineEnd": 294
            },
            "org.apache.catalina.connector.Request.setFilterChain(FilterChain filterChain)": {
                "lineStart": 296,
                "lineEnd": 298
            },
            "org.apache.catalina.connector.Request.getHost()": {
                "lineStart": 300,
                "lineEnd": 302
            },
            "org.apache.catalina.connector.Request.getMappingData()": {
                "lineStart": 306,
                "lineEnd": 308
            },
            "org.apache.catalina.connector.Request.getRequest()": {
                "lineStart": 311,
                "lineEnd": 321
            },
            "org.apache.catalina.connector.Request.setRequest(HttpServletRequest applicationRequest)": {
                "lineStart": 323,
                "lineEnd": 334
            },
            "org.apache.catalina.connector.Request.getResponse()": {
                "lineStart": 337,
                "lineEnd": 339
            },
            "org.apache.catalina.connector.Request.setResponse(org.apache.catalina.connector.Response response)": {
                "lineStart": 341,
                "lineEnd": 343
            },
            "org.apache.catalina.connector.Request.getStream()": {
                "lineStart": 345,
                "lineEnd": 351
            },
            "org.apache.catalina.connector.Request.getURIConverter()": {
                "lineStart": 354,
                "lineEnd": 356
            },
            "org.apache.catalina.connector.Request.setURIConverter(B2CConverter URIConverter)": {
                "lineStart": 358,
                "lineEnd": 360
            },
            "org.apache.catalina.connector.Request.getWrapper()": {
                "lineStart": 362,
                "lineEnd": 364
            },
            "org.apache.catalina.connector.Request.createInputStream()": {
                "lineStart": 366,
                "lineEnd": 372
            },
            "org.apache.catalina.connector.Request.finishRequest()": {
                "lineStart": 374,
                "lineEnd": 379
            },
            "org.apache.catalina.connector.Request.getNote(String name)": {
                "lineStart": 381,
                "lineEnd": 383
            },
            "org.apache.catalina.connector.Request.removeNote(String name)": {
                "lineStart": 385,
                "lineEnd": 387
            },
            "org.apache.catalina.connector.Request.setLocalPort(int port)": {
                "lineStart": 389,
                "lineEnd": 391
            },
            "org.apache.catalina.connector.Request.setNote(String name, Object value)": {
                "lineStart": 393,
                "lineEnd": 395
            },
            "org.apache.catalina.connector.Request.setRemoteAddr(String remoteAddr)": {
                "lineStart": 397,
                "lineEnd": 399
            },
            "org.apache.catalina.connector.Request.setRemoteHost(String remoteHost)": {
                "lineStart": 401,
                "lineEnd": 403
            },
            "org.apache.catalina.connector.Request.setSecure(boolean secure)": {
                "lineStart": 405,
                "lineEnd": 407
            },
            "org.apache.catalina.connector.Request.setServerPort(int port)": {
                "lineStart": 409,
                "lineEnd": 411
            },
            "org.apache.catalina.connector.Request.getAttribute(String name)": {
                "lineStart": 413,
                "lineEnd": 476
            },
            "org.apache.catalina.connector.Request.getContentLengthLong()": {
                "lineStart": 478,
                "lineEnd": 480
            },
            "org.apache.catalina.connector.Request.getAttributeNames()": {
                "lineStart": 482,
                "lineEnd": 489
            },
            "org.apache.catalina.connector.Request.getCharacterEncoding()": {
                "lineStart": 491,
                "lineEnd": 502
            },
            "org.apache.catalina.connector.Request.getCharset()": {
                "lineStart": 504,
                "lineEnd": 519
            },
            "org.apache.catalina.connector.Request.getContentLength()": {
                "lineStart": 521,
                "lineEnd": 523
            },
            "org.apache.catalina.connector.Request.getContentType()": {
                "lineStart": 525,
                "lineEnd": 527
            },
            "org.apache.catalina.connector.Request.setContentType(String contentType)": {
                "lineStart": 529,
                "lineEnd": 531
            },
            "org.apache.catalina.connector.Request.getInputStream()": {
                "lineStart": 533,
                "lineEnd": 544
            },
            "org.apache.catalina.connector.Request.getLocale()": {
                "lineStart": 546,
                "lineEnd": 556
            },
            "org.apache.catalina.connector.Request.getLocales()": {
                "lineStart": 558,
                "lineEnd": 570
            },
            "org.apache.catalina.connector.Request.getParameter(String name)": {
                "lineStart": 572,
                "lineEnd": 578
            },
            "org.apache.catalina.connector.Request.getParameterMap()": {
                "lineStart": 580,
                "lineEnd": 594
            },
            "org.apache.catalina.connector.Request.getParameterNames()": {
                "lineStart": 596,
                "lineEnd": 602
            },
            "org.apache.catalina.connector.Request.getParameterValues(String name)": {
                "lineStart": 604,
                "lineEnd": 610
            },
            "org.apache.catalina.connector.Request.getProtocol()": {
                "lineStart": 612,
                "lineEnd": 614
            },
            "org.apache.catalina.connector.Request.getReader()": {
                "lineStart": 616,
                "lineEnd": 640
            },
            "org.apache.catalina.connector.Request.getRemoteAddr()": {
                "lineStart": 642,
                "lineEnd": 649
            },
            "org.apache.catalina.connector.Request.getPeerAddr()": {
                "lineStart": 651,
                "lineEnd": 658
            },
            "org.apache.catalina.connector.Request.getRemoteHost()": {
                "lineStart": 660,
                "lineEnd": 673
            },
            "org.apache.catalina.connector.Request.getRemotePort()": {
                "lineStart": 675,
                "lineEnd": 682
            },
            "org.apache.catalina.connector.Request.getLocalName()": {
                "lineStart": 684,
                "lineEnd": 691
            },
            "org.apache.catalina.connector.Request.getLocalAddr()": {
                "lineStart": 693,
                "lineEnd": 700
            },
            "org.apache.catalina.connector.Request.getLocalPort()": {
                "lineStart": 702,
                "lineEnd": 709
            },
            "org.apache.catalina.connector.Request.getRequestDispatcher(String path)": {
                "lineStart": 711,
                "lineEnd": 767
            },
            "org.apache.catalina.connector.Request.getScheme()": {
                "lineStart": 769,
                "lineEnd": 771
            },
            "org.apache.catalina.connector.Request.getServerName()": {
                "lineStart": 773,
                "lineEnd": 775
            },
            "org.apache.catalina.connector.Request.getServerPort()": {
                "lineStart": 777,
                "lineEnd": 779
            },
            "org.apache.catalina.connector.Request.isSecure()": {
                "lineStart": 781,
                "lineEnd": 783
            },
            "org.apache.catalina.connector.Request.removeAttribute(String name)": {
                "lineStart": 785,
                "lineEnd": 797
            },
            "org.apache.catalina.connector.Request.setAttribute(String name, Object value)": {
                "lineStart": 799,
                "lineEnd": 821
            },
            "org.apache.catalina.connector.Request.notifyAttributeAssigned(String name, Object value, Object oldValue)": {
                "lineStart": 823,
                "lineEnd": 866
            },
            "org.apache.catalina.connector.Request.notifyAttributeRemoved(String name, Object value)": {
                "lineStart": 868,
                "lineEnd": 893
            },
            "org.apache.catalina.connector.Request.setCharacterEncoding(String enc)": {
                "lineStart": 895,
                "lineEnd": 903
            },
            "org.apache.catalina.connector.Request.setCharacterEncoding(Charset charset)": {
                "lineStart": 905,
                "lineEnd": 911
            },
            "org.apache.catalina.connector.Request.getServletContext()": {
                "lineStart": 913,
                "lineEnd": 915
            },
            "org.apache.catalina.connector.Request.startAsync()": {
                "lineStart": 917,
                "lineEnd": 919
            },
            "org.apache.catalina.connector.Request.startAsync(ServletRequest request, ServletResponse response)": {
                "lineStart": 921,
                "lineEnd": 935
            },
            "org.apache.catalina.connector.Request.getNonAsyncClassNames()": {
                "lineStart": 937,
                "lineEnd": 959
            },
            "org.apache.catalina.connector.Request.isAsyncStarted()": {
                "lineStart": 961,
                "lineEnd": 967
            },
            "org.apache.catalina.connector.Request.isAsyncDispatching()": {
                "lineStart": 969,
                "lineEnd": 977
            },
            "org.apache.catalina.connector.Request.isAsyncCompleting()": {
                "lineStart": 979,
                "lineEnd": 987
            },
            "org.apache.catalina.connector.Request.isAsync()": {
                "lineStart": 989,
                "lineEnd": 997
            },
            "org.apache.catalina.connector.Request.isAsyncSupported()": {
                "lineStart": 999,
                "lineEnd": 1005
            },
            "org.apache.catalina.connector.Request.getAsyncContext()": {
                "lineStart": 1007,
                "lineEnd": 1013
            },
            "org.apache.catalina.connector.Request.getAsyncContextInternal()": {
                "lineStart": 1015,
                "lineEnd": 1017
            },
            "org.apache.catalina.connector.Request.getDispatcherType()": {
                "lineStart": 1019,
                "lineEnd": 1025
            },
            "org.apache.catalina.connector.Request.getRequestId()": {
                "lineStart": 1027,
                "lineEnd": 1029
            },
            "org.apache.catalina.connector.Request.getProtocolRequestId()": {
                "lineStart": 1031,
                "lineEnd": 1033
            },
            "org.apache.catalina.connector.Request.getServletConnection()": {
                "lineStart": 1035,
                "lineEnd": 1037
            },
            "org.apache.catalina.connector.Request.addCookie(Cookie cookie)": {
                "lineStart": 1039,
                "lineEnd": 1056
            },
            "org.apache.catalina.connector.Request.addLocale(Locale locale)": {
                "lineStart": 1058,
                "lineEnd": 1060
            },
            "org.apache.catalina.connector.Request.clearCookies()": {
                "lineStart": 1062,
                "lineEnd": 1066
            },
            "org.apache.catalina.connector.Request.clearLocales()": {
                "lineStart": 1068,
                "lineEnd": 1070
            },
            "org.apache.catalina.connector.Request.setAuthType(String type)": {
                "lineStart": 1072,
                "lineEnd": 1074
            },
            "org.apache.catalina.connector.Request.setPathInfo(String path)": {
                "lineStart": 1076,
                "lineEnd": 1078
            },
            "org.apache.catalina.connector.Request.setRequestedSessionCookie(boolean flag)": {
                "lineStart": 1080,
                "lineEnd": 1082
            },
            "org.apache.catalina.connector.Request.setRequestedSessionId(String id)": {
                "lineStart": 1084,
                "lineEnd": 1086
            },
            "org.apache.catalina.connector.Request.setRequestedSessionURL(boolean flag)": {
                "lineStart": 1088,
                "lineEnd": 1090
            },
            "org.apache.catalina.connector.Request.setRequestedSessionSSL(boolean flag)": {
                "lineStart": 1092,
                "lineEnd": 1094
            },
            "org.apache.catalina.connector.Request.getDecodedRequestURI()": {
                "lineStart": 1096,
                "lineEnd": 1098
            },
            "org.apache.catalina.connector.Request.getDecodedRequestURIMB()": {
                "lineStart": 1100,
                "lineEnd": 1102
            },
            "org.apache.catalina.connector.Request.setUserPrincipal(final Principal principal)": {
                "lineStart": 1104,
                "lineEnd": 1106
            },
            "org.apache.catalina.connector.Request.isTrailerFieldsReady()": {
                "lineStart": 1108,
                "lineEnd": 1110
            },
            "org.apache.catalina.connector.Request.getTrailerFields()": {
                "lineStart": 1112,
                "lineEnd": 1119
            },
            "org.apache.catalina.connector.Request.newPushBuilder()": {
                "lineStart": 1121,
                "lineEnd": 1123
            },
            "org.apache.catalina.connector.Request.newPushBuilder(HttpServletRequest request)": {
                "lineStart": 1125,
                "lineEnd": 1135
            },
            "org.apache.catalina.connector.Request.upgrade(Class<T> httpUpgradeHandlerClass)": {
                "lineStart": 1137,
                "lineEnd": 1158
            },
            "org.apache.catalina.connector.Request.getUpgradeProtocolName(Class<? extends HttpUpgradeHandler> httpUpgradeHandlerClass)": {
                "lineStart": 1160,
                "lineEnd": 1175
            },
            "org.apache.catalina.connector.Request.getAuthType()": {
                "lineStart": 1177,
                "lineEnd": 1179
            },
            "org.apache.catalina.connector.Request.getContextPath()": {
                "lineStart": 1181,
                "lineEnd": 1249
            },
            "org.apache.catalina.connector.Request.removePathParameters(String input)": {
                "lineStart": 1251,
                "lineEnd": 1277
            },
            "org.apache.catalina.connector.Request.nextSlash(char[] uri, int startPos)": {
                "lineStart": 1279,
                "lineEnd": 1294
            },
            "org.apache.catalina.connector.Request.getCookies()": {
                "lineStart": 1296,
                "lineEnd": 1302
            },
            "org.apache.catalina.connector.Request.getServerCookies()": {
                "lineStart": 1304,
                "lineEnd": 1307
            },
            "org.apache.catalina.connector.Request.getDateHeader(String name)": {
                "lineStart": 1309,
                "lineEnd": 1321
            },
            "org.apache.catalina.connector.Request.getHeader(String name)": {
                "lineStart": 1323,
                "lineEnd": 1325
            },
            "org.apache.catalina.connector.Request.getHeaders(String name)": {
                "lineStart": 1327,
                "lineEnd": 1329
            },
            "org.apache.catalina.connector.Request.getHeaderNames()": {
                "lineStart": 1331,
                "lineEnd": 1333
            },
            "org.apache.catalina.connector.Request.getIntHeader(String name)": {
                "lineStart": 1335,
                "lineEnd": 1342
            },
            "org.apache.catalina.connector.Request.getHttpServletMapping()": {
                "lineStart": 1344,
                "lineEnd": 1346
            },
            "org.apache.catalina.connector.Request.getMethod()": {
                "lineStart": 1348,
                "lineEnd": 1350
            },
            "org.apache.catalina.connector.Request.getPathInfo()": {
                "lineStart": 1352,
                "lineEnd": 1354
            },
            "org.apache.catalina.connector.Request.getPathTranslated()": {
                "lineStart": 1356,
                "lineEnd": 1367
            },
            "org.apache.catalina.connector.Request.getQueryString()": {
                "lineStart": 1369,
                "lineEnd": 1371
            },
            "org.apache.catalina.connector.Request.getRemoteUser()": {
                "lineStart": 1373,
                "lineEnd": 1379
            },
            "org.apache.catalina.connector.Request.getRequestPathMB()": {
                "lineStart": 1381,
                "lineEnd": 1383
            },
            "org.apache.catalina.connector.Request.getRequestedSessionId()": {
                "lineStart": 1385,
                "lineEnd": 1387
            },
            "org.apache.catalina.connector.Request.getRequestURI()": {
                "lineStart": 1389,
                "lineEnd": 1391
            },
            "org.apache.catalina.connector.Request.getRequestURL()": {
                "lineStart": 1393,
                "lineEnd": 1395
            },
            "org.apache.catalina.connector.Request.getServletPath()": {
                "lineStart": 1397,
                "lineEnd": 1399
            },
            "org.apache.catalina.connector.Request.getSession()": {
                "lineStart": 1401,
                "lineEnd": 1408
            },
            "org.apache.catalina.connector.Request.getSession(boolean create)": {
                "lineStart": 1410,
                "lineEnd": 1417
            },
            "org.apache.catalina.connector.Request.isRequestedSessionIdFromCookie()": {
                "lineStart": 1419,
                "lineEnd": 1425
            },
            "org.apache.catalina.connector.Request.isRequestedSessionIdFromURL()": {
                "lineStart": 1427,
                "lineEnd": 1433
            },
            "org.apache.catalina.connector.Request.isRequestedSessionIdValid()": {
                "lineStart": 1435,
                "lineEnd": 1481
            },
            "org.apache.catalina.connector.Request.isUserInRole(String role)": {
                "lineStart": 1483,
                "lineEnd": 1507
            },
            "org.apache.catalina.connector.Request.getPrincipal()": {
                "lineStart": 1509,
                "lineEnd": 1511
            },
            "org.apache.catalina.connector.Request.getUserPrincipal()": {
                "lineStart": 1513,
                "lineEnd": 1541
            },
            "org.apache.catalina.connector.Request.getSessionInternal()": {
                "lineStart": 1543,
                "lineEnd": 1545
            },
            "org.apache.catalina.connector.Request.changeSessionId(String newSessionId)": {
                "lineStart": 1547,
                "lineEnd": 1562
            },
            "org.apache.catalina.connector.Request.changeSessionId()": {
                "lineStart": 1564,
                "lineEnd": 1574
            },
            "org.apache.catalina.connector.Request.getSessionInternal(boolean create)": {
                "lineStart": 1576,
                "lineEnd": 1578
            },
            "org.apache.catalina.connector.Request.isParametersParsed()": {
                "lineStart": 1580,
                "lineEnd": 1582
            },
            "org.apache.catalina.connector.Request.isFinished()": {
                "lineStart": 1584,
                "lineEnd": 1586
            },
            "org.apache.catalina.connector.Request.checkSwallowInput()": {
                "lineStart": 1588,
                "lineEnd": 1594
            },
            "org.apache.catalina.connector.Request.authenticate(HttpServletResponse response)": {
                "lineStart": 1596,
                "lineEnd": 1602
            },
            "org.apache.catalina.connector.Request.login(String username, String password)": {
                "lineStart": 1604,
                "lineEnd": 1610
            },
            "org.apache.catalina.connector.Request.logout()": {
                "lineStart": 1612,
                "lineEnd": 1614
            },
            "org.apache.catalina.connector.Request.getParts()": {
                "lineStart": 1616,
                "lineEnd": 1632
            },
            "org.apache.catalina.connector.Request.parseParts(boolean explicit)": {
                "lineStart": 1634,
                "lineEnd": 1773
            },
            "org.apache.catalina.connector.Request.getPart(String name)": {
                "lineStart": 1775,
                "lineEnd": 1784
            },
            "org.apache.catalina.connector.Request.doGetSession(boolean create)": {
                "lineStart": 1786,
                "lineEnd": 1886
            },
            "org.apache.catalina.connector.Request.unescape(String s)": {
                "lineStart": 1888,
                "lineEnd": 1915
            },
            "org.apache.catalina.connector.Request.getCookieProcessor()": {
                "lineStart": 1917,
                "lineEnd": 1926
            },
            "org.apache.catalina.connector.Request.parseCookies()": {
                "lineStart": 1928,
                "lineEnd": 1937
            },
            "org.apache.catalina.connector.Request.convertCookies()": {
                "lineStart": 1939,
                "lineEnd": 1973
            },
            "org.apache.catalina.connector.Request.parseParameters()": {
                "lineStart": 1975,
                "lineEnd": 2107
            },
            "org.apache.catalina.connector.Request.readPostBody(byte[] body, int len)": {
                "lineStart": 2109,
                "lineEnd": 2121
            },
            "org.apache.catalina.connector.Request.readChunkedPostBody()": {
                "lineStart": 2123,
                "lineEnd": 2152
            },
            "org.apache.catalina.connector.Request.parseLocales()": {
                "lineStart": 2154,
                "lineEnd": 2170
            },
            "org.apache.catalina.connector.Request.parseLocalesHeader(String value, TreeMap<Double, ArrayList<Locale>> locales)": {
                "lineStart": 2172,
                "lineEnd": 2186
            },
            "org.apache.catalina.connector.Request$SpecialAttributeAdapter.get(Request request, String name)": {
                "lineStart": 2189,
                "lineEnd": 2189
            },
            "org.apache.catalina.connector.Request$SpecialAttributeAdapter.set(Request request, String name, Object value)": {
                "lineStart": 2190,
                "lineEnd": 2190
            }
        },
        "95dac6e85f-RemoteIpFilter.java": {
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.isSecure()": {
                "lineStart": 149,
                "lineEnd": 151
            },
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setSecure(boolean secure)": {
                "lineStart": 193,
                "lineEnd": 195
            }
        }
    },
    "CVE-2023-6927": {
        "c931ac469d-HttpPostRedirect.java": {
            "org.keycloak.common.util.HttpPostRedirect.buildHtml(String title, String actionUrl, Map<String, String> params)": {
                "lineStart": 4,
                "lineEnd": 18
            }
        },
        "e09e4ba789-OIDCRedirectUriBuilder.java": {
            "org.keycloak.protocol.oidc.utils.OIDCRedirectUriBuilder$JWTRedirectUriBuilder.buildFormPostResponse()": {
                "lineStart": 192,
                "lineEnd": 210
            }
        },
        "3b95404aba-RedirectUtils.java": {
            "org.keycloak.protocol.oidc.utils.RedirectUtils.decodeRedirectUri(String redirectUri)": {
                "lineStart": 161,
                "lineEnd": 189
            }
        }
    },
    "CVE-2022-30955": {
        "6af24f6-GitLabConnectionProperty.java": {
            "com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty$DescriptorImpl.doFillJobCredentialIdItems(@AncestorInPath Item item, @QueryParameter String url, @QueryParameter String jobCredentialId)": {
                "lineStart": 113,
                "lineEnd": 116
            }
        }
    },
    "CVE-2022-33140": {
        "4339907624-NssShellCommands.java": {
            "org.apache.nifi.authorization.NssShellCommands.getUserById(String userId)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.apache.nifi.authorization.NssShellCommands.getUserByName(String userName)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.apache.nifi.authorization.NssShellCommands.getGroupById(String groupId)": {
                "lineStart": 23,
                "lineEnd": 25
            }
        },
        "85dca066c2-OsxShellCommands.java": {
            "org.apache.nifi.authorization.OsxShellCommands.getUserById(String userId)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.apache.nifi.authorization.OsxShellCommands.getUserByName(String userName)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.apache.nifi.authorization.OsxShellCommands.getGroupById(String groupId)": {
                "lineStart": 23,
                "lineEnd": 25
            }
        },
        "3c26ba71b7-RemoteShellCommands.java": {
            "org.apache.nifi.authorization.RemoteShellCommands.getUserById(String userId)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.apache.nifi.authorization.RemoteShellCommands.getUserByName(String userName)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.apache.nifi.authorization.RemoteShellCommands.getGroupById(String groupId)": {
                "lineStart": 40,
                "lineEnd": 42
            }
        },
        "14c7de4dbc-ShellCommandsProvider.java": {
            "org.apache.nifi.authorization.ShellCommandsProvider.getUsersList()": {
                "lineStart": 3,
                "lineEnd": 3
            },
            "org.apache.nifi.authorization.ShellCommandsProvider.getGroupsList()": {
                "lineStart": 4,
                "lineEnd": 4
            },
            "org.apache.nifi.authorization.ShellCommandsProvider.getGroupMembers(String groupName)": {
                "lineStart": 5,
                "lineEnd": 5
            },
            "org.apache.nifi.authorization.ShellCommandsProvider.getUserById(String userId)": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "org.apache.nifi.authorization.ShellCommandsProvider.getUserByName(String userName)": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "org.apache.nifi.authorization.ShellCommandsProvider.getGroupById(String groupId)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.apache.nifi.authorization.ShellCommandsProvider.getSystemCheck()": {
                "lineStart": 9,
                "lineEnd": 9
            }
        },
        "e8e793c325-ShellUserGroupProvider.java": {
            "org.apache.nifi.authorization.ShellUserGroupProvider.getUserByIdentity(String identity)": {
                "lineStart": 71,
                "lineEnd": 90
            },
            "org.apache.nifi.authorization.ShellUserGroupProvider.getGroup(String identifier)": {
                "lineStart": 100,
                "lineEnd": 119
            },
            "org.apache.nifi.authorization.ShellUserGroupProvider.onConfigured(AuthorizerConfigurationContext configurationContext)": {
                "lineStart": 171,
                "lineEnd": 211
            },
            "org.apache.nifi.authorization.ShellUserGroupProvider.refreshOneUser(String command, String description)": {
                "lineStart": 318,
                "lineEnd": 351
            },
            "org.apache.nifi.authorization.ShellUserGroupProvider.refreshOneGroup(String command, String description)": {
                "lineStart": 353,
                "lineEnd": 381
            },
            "org.apache.nifi.authorization.ShellUserGroupProvider.rebuildGroups(List<String> groupLines, Map<String, Group> groupsById)": {
                "lineStart": 479,
                "lineEnd": 538
            }
        },
        "819640de76-ShellRunner.java": {
            "org.apache.nifi.authorization.util.ShellRunner.runShell(String command)": {
                "lineStart": 35,
                "lineEnd": 37
            }
        },
        "eef58b0558-NssShellCommands.java": {
            "org.apache.nifi.registry.security.authorization.shell.NssShellCommands.getUserById(String userId)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.apache.nifi.registry.security.authorization.shell.NssShellCommands.getUserByName(String userName)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.apache.nifi.registry.security.authorization.shell.NssShellCommands.getGroupById(String groupId)": {
                "lineStart": 23,
                "lineEnd": 25
            }
        },
        "059166235a-OsxShellCommands.java": {
            "org.apache.nifi.registry.security.authorization.shell.OsxShellCommands.getUserById(String userId)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.apache.nifi.registry.security.authorization.shell.OsxShellCommands.getUserByName(String userName)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.apache.nifi.registry.security.authorization.shell.OsxShellCommands.getGroupById(String groupId)": {
                "lineStart": 23,
                "lineEnd": 25
            }
        },
        "f622409bc7-RemoteShellCommands.java": {
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.<init>()": {
                "lineStart": 8,
                "lineEnd": 9
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.wrapOtherProvider(ShellCommandsProvider otherProvider, String keyPath, String host, Integer port)": {
                "lineStart": 11,
                "lineEnd": 18
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getUsersList()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getGroupsList()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getGroupMembers(String groupName)": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getUserById(String userId)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getUserByName(String userName)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getGroupById(String groupId)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "org.apache.nifi.registry.security.authorization.shell.RemoteShellCommands.getSystemCheck()": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "ce3e6a4d38-ShellCommandsProvider.java": {
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getUsersList()": {
                "lineStart": 3,
                "lineEnd": 3
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getGroupsList()": {
                "lineStart": 4,
                "lineEnd": 4
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getGroupMembers(String groupName)": {
                "lineStart": 5,
                "lineEnd": 5
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getUserById(String userId)": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getUserByName(String userName)": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getGroupById(String groupId)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellCommandsProvider.getSystemCheck()": {
                "lineStart": 9,
                "lineEnd": 9
            }
        },
        "de38b631f6-ShellRunner.java": {
            "org.apache.nifi.registry.security.authorization.shell.ShellRunner.runShell(String command)": {
                "lineStart": 35,
                "lineEnd": 37
            }
        },
        "4e201d2fe3-ShellUserGroupProvider.java": {
            "org.apache.nifi.registry.security.authorization.shell.ShellUserGroupProvider.getUserByIdentity(String identity)": {
                "lineStart": 73,
                "lineEnd": 92
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellUserGroupProvider.getGroup(String identifier)": {
                "lineStart": 102,
                "lineEnd": 121
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellUserGroupProvider.onConfigured(AuthorizerConfigurationContext configurationContext)": {
                "lineStart": 157,
                "lineEnd": 196
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellUserGroupProvider.refreshOneUser(String command, String description)": {
                "lineStart": 303,
                "lineEnd": 336
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellUserGroupProvider.refreshOneGroup(String command, String description)": {
                "lineStart": 338,
                "lineEnd": 362
            },
            "org.apache.nifi.registry.security.authorization.shell.ShellUserGroupProvider.rebuildGroups(List<String> groupLines, Map<String, Group> groupsById)": {
                "lineStart": 454,
                "lineEnd": 513
            }
        }
    },
    "CVE-2022-30945": {
        "7bca1d4f-GroovySourceFileAllowlist.java": {
            "org.jenkinsci.plugins.workflow.cps.GroovySourceFileAllowlist$DefaultAllowlist.<init>()": {
                "lineStart": 108,
                "lineEnd": 130
            }
        }
    },
    "CVE-2024-30172": {
        "8018ad4f1-Scalar25519.java": {
            "org.bouncycastle.math.ec.rfc8032.Scalar25519.reduceBasisVar(int[] k, int[] z0, int[] z1)": {
                "lineStart": 239,
                "lineEnd": 275
            }
        },
        "5272e4eba-Scalar448.java": {
            "org.bouncycastle.math.ec.rfc8032.Scalar448.reduceBasisVar(int[] k, int[] z0, int[] z1)": {
                "lineStart": 476,
                "lineEnd": 512
            }
        },
        "81d8fd963-ScalarUtil.java": {
            "org.bouncycastle.math.ec.rfc8032.ScalarUtil.addShifted_NP(int last, int s, int[] Nu, int[] Nv, int[] _p)": {
                "lineStart": 5,
                "lineEnd": 47
            },
            "org.bouncycastle.math.ec.rfc8032.ScalarUtil.subShifted_NP(int last, int s, int[] Nu, int[] Nv, int[] _p)": {
                "lineStart": 121,
                "lineEnd": 163
            }
        }
    },
    "CVE-2022-45462": {
        "6302dc9d46-ScriptSender.java": {
            "org.apache.dolphinscheduler.plugin.alert.script.ScriptSender.executeShellScript(String title, String content)": {
                "lineStart": 29,
                "lineEnd": 48
            }
        }
    },
    "CVE-2020-6950": {
        "9a81ee1a-ClasspathResourceHelper.java": {
            "com.sun.faces.application.resource.ClasspathResourceHelper.findPathConsideringContracts(ClassLoader loader, LibraryInfo library, String resourceName, String localePrefix, ContractInfo[] outContract, String[] outBasePath, FacesContext ctx)": {
                "lineStart": 242,
                "lineEnd": 298
            }
        },
        "53e0d645-ResourceManager.java": {
            "com.sun.faces.application.resource.ResourceManager.nameContainsForbiddenSequence(String name)": {
                "lineStart": 221,
                "lineEnd": 229
            },
            "com.sun.faces.application.resource.ResourceManager.getLocalePrefix(FacesContext context)": {
                "lineStart": 308,
                "lineEnd": 339
            }
        },
        "1c858079-WebappResourceHelper.java": {
            "com.sun.faces.application.resource.WebappResourceHelper.findPathConsideringContracts(LibraryInfo library, String resourceName, String localePrefix, ContractInfo[] outContract, FacesContext ctx)": {
                "lineStart": 176,
                "lineEnd": 236
            }
        }
    },
    "CVE-2021-44791": {
        "9df3b66942-DruidViewMacro.java": {
            "org.apache.druid.sql.calcite.view.DruidViewMacro.<init>(@Assisted final PlannerFactory plannerFactory, @Assisted final Escalator escalator, @Assisted final String viewSql, @DruidSchemaName String druidSchemaName)": {
                "lineStart": 21,
                "lineEnd": 26
            }
        },
        "c805b5a335-DruidViewMacroFactory.java": {
            "org.apache.druid.sql.calcite.view.DruidViewMacroFactory.create(PlannerFactory plannerFactory, Escalator escalator, String viewSql)": {
                "lineStart": 5,
                "lineEnd": 5
            }
        },
        "f6fe9af909-InProcessViewManager.java": {
            "org.apache.druid.sql.calcite.view.InProcessViewManager.<init>(final Escalator escalator, final DruidViewMacroFactory druidViewMacroFactory)": {
                "lineStart": 15,
                "lineEnd": 19
            },
            "org.apache.druid.sql.calcite.view.InProcessViewManager.createView(final PlannerFactory plannerFactory, final String viewName, final String viewSql)": {
                "lineStart": 21,
                "lineEnd": 27
            },
            "org.apache.druid.sql.calcite.view.InProcessViewManager.alterView(final PlannerFactory plannerFactory, final String viewName, final String viewSql)": {
                "lineStart": 29,
                "lineEnd": 35
            }
        }
    },
    "CVE-2022-23111": {
        "4a41eaf-BapSshHostConfigurationDescriptor.java": {
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.<init>()": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.getDisplayName()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.getDefaultJumpHost()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.getDefaultPort()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.getDefaultTimeout()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doCheckName(@QueryParameter final String value)": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doCheckHostname(@QueryParameter final String value)": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doCheckUsername(@QueryParameter final String value)": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doCheckPort(@QueryParameter final String value)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doCheckTimeout(@QueryParameter final String value)": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doCheckKeyPath(@QueryParameter final String value)": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.doTestConnection(final StaplerRequest request, final StaplerResponse response)": {
                "lineStart": 58,
                "lineEnd": 70
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshHostConfigurationDescriptor.getCommonFieldNames()": {
                "lineStart": 72,
                "lineEnd": 74
            }
        },
        "7984ab7-BapSshPublisherPluginDescriptor.java": {
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.<init>()": {
                "lineStart": 39,
                "lineEnd": 45
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getCommonConfig()": {
                "lineStart": 47,
                "lineEnd": 47
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.setCommonConfig(final BapSshCommonConfiguration commonConfig)": {
                "lineStart": 48,
                "lineEnd": 48
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getDefaults()": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getDisplayName()": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.isApplicable(final Class<? extends AbstractProject> aClass)": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getHostConfigurations()": {
                "lineStart": 61,
                "lineEnd": 77
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getConfiguration(final String name)": {
                "lineStart": 79,
                "lineEnd": 88
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.addHostConfiguration(final BapSshHostConfiguration configuration)": {
                "lineStart": 90,
                "lineEnd": 93
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.removeHostConfiguration(final String name)": {
                "lineStart": 95,
                "lineEnd": 101
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.configure(final StaplerRequest request, final JSONObject formData)": {
                "lineStart": 103,
                "lineEnd": 116
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.canSetMasterNodeName()": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getDefaultMasterNodeName()": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.isEnableOverrideDefaults()": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getPublisherDescriptor()": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getHostConfigurationDescriptor()": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getPluginDefaultsDescriptor()": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getCommonFieldNames()": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.getCommonManageMessages()": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.doTestConnection(final StaplerRequest request, final StaplerResponse response)": {
                "lineStart": 150,
                "lineEnd": 154
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.validateConnection(BapSshHostConfiguration hostConfig, BPBuildInfo buildInfo)": {
                "lineStart": 156,
                "lineEnd": 168
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.connectionError(final String description, final Exception exception)": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.createDummyBuildInfo()": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "jenkins.plugins.publish_over_ssh.descriptor.BapSshPublisherPluginDescriptor.readResolve()": {
                "lineStart": 178,
                "lineEnd": 186
            }
        }
    },
    "CVE-2021-21409": {
        "7fe74de3c1-DefaultHttp2ConnectionDecoder.java": {
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers headers, int streamDependency, short weight, boolean exclusive, int padding, boolean endOfStream)": {
                "lineStart": 242,
                "lineEnd": 304
            }
        }
    },
    "CVE-2022-4903": {
        "18b5334ce-AndroidImplementation.java": {
            "com.codename1.impl.android.AndroidImplementation.addActionsToNotification(PushActionsProvider provider, String categoryId, NotificationCompat.Builder builder, Intent targetIntent, Context context)": {
                "lineStart": 706,
                "lineEnd": 763
            },
            "com.codename1.impl.android.AndroidImplementation.notifyStatusBar(String tickerText, String contentTitle, String contentBody, boolean vibrate, boolean flashLights, Hashtable args)": {
                "lineStart": 6621,
                "lineEnd": 6655
            },
            "com.codename1.impl.android.AndroidImplementation.scheduleLocalNotification(LocalNotification notif, long firstTime, int repeat)": {
                "lineStart": 9850,
                "lineEnd": 9907
            },
            "com.codename1.impl.android.AndroidImplementation.cancelLocalNotification(String notificationId)": {
                "lineStart": 9909,
                "lineEnd": 9915
            }
        },
        "a8eadf78d-CodenameOneActivity.java": {
            "com.codename1.impl.android.CodenameOneActivity.registerForPush(String key)": {
                "lineStart": 370,
                "lineEnd": 376
            },
            "com.codename1.impl.android.CodenameOneActivity.stopReceivingPush()": {
                "lineStart": 378,
                "lineEnd": 383
            }
        },
        "7d0a6b4b5-PushNotificationService.java": {
            "com.codename1.impl.android.PushNotificationService.push(final String value)": {
                "lineStart": 73,
                "lineEnd": 95
            }
        },
        "d1a2c1134-AndroidLocationPlayServiceManager.java": {
            "com.codename1.location.AndroidLocationPlayServiceManager.bindListener()": {
                "lineStart": 104,
                "lineEnd": 166
            },
            "com.codename1.location.AndroidLocationPlayServiceManager.createBackgroundPendingIntent(boolean forceService)": {
                "lineStart": 176,
                "lineEnd": 197
            },
            "com.codename1.location.AndroidLocationPlayServiceManager.clearListener()": {
                "lineStart": 226,
                "lineEnd": 270
            },
            "com.codename1.location.AndroidLocationPlayServiceManager.createGeofencePendingIntent(Class geofenceListenerClass, com.codename1.location.Geofence gf, boolean forceService)": {
                "lineStart": 435,
                "lineEnd": 456
            }
        },
        "5e62bdf9a-BackgroundAudioService.java": {
            "com.codename1.media.BackgroundAudioService.initMediaSession()": {
                "lineStart": 189,
                "lineEnd": 199
            }
        }
    },
    "CVE-2021-21610": {
        "5bec9ab0a3-MarkupFormatter.java": {
            "hudson.markup.MarkupFormatter.doPreviewDescription(@QueryParameter String text)": {
                "lineStart": 28,
                "lineEnd": 32
            }
        }
    },
    "CVE-2022-34917": {
        "9838e7dc8f-ConsumerCoordinator.java": {
            "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.onJoinPrepare(Timer timer, int generation, String memberId)": {
                "lineStart": 534,
                "lineEnd": 620
            }
        },
        "416468d945-SubscriptionState.java": {
            "org.apache.kafka.clients.consumer.internals.SubscriptionState$TopicPartitionState.isFetchable()": {
                "lineStart": 845,
                "lineEnd": 847
            },
            "org.apache.kafka.clients.consumer.internals.SubscriptionState$TopicPartitionState.<init>()": {
                "lineStart": 638,
                "lineEnd": 649
            }
        }
    },
    "CVE-2024-23897": {
        "e779afbc34-CLICommand.java": {
            "hudson.cli.CLICommand.getCmdLineParser()": {
                "lineStart": 140,
                "lineEnd": 142
            }
        },
        "8b2f2348c5-CLIRegisterer.java": {
            "hudson.cli.declarative.CLIRegisterer.discover(@NonNull final Jenkins jenkins)": {
                "lineStart": 67,
                "lineEnd": 221
            }
        }
    },
    "CVE-2023-5379": {
        "8f9c94abb-AjpReadListener.java": {
            "io.undertow.server.protocol.ajp.AjpReadListener.handleEvent(final StreamSourceChannel channel)": {
                "lineStart": 79,
                "lineEnd": 245
            }
        }
    },
    "CVE-2020-28865": {
        "5c448653-AppInfoController.java": {
            "com.github.kfcfans.powerjob.server.web.controller.AppInfoController.saveAppInfo(@RequestBody ModifyAppInfoRequest req)": {
                "lineStart": 24,
                "lineEnd": 40
            }
        },
        "bd007626-ModifyAppInfoRequest.java": {
            "com.github.kfcfans.powerjob.server.web.request.ModifyAppInfoRequest.valid()": {
                "lineStart": 10,
                "lineEnd": 16
            }
        }
    },
    "CVE-2022-43410": {
        "a58998d-MercurialStatus.java": {
            "hudson.plugins.mercurial.MercurialStatus.doNotifyCommit(@QueryParameter(required = true) final String url, @QueryParameter String branch, @QueryParameter String changesetId)": {
                "lineStart": 71,
                "lineEnd": 85
            },
            "hudson.plugins.mercurial.MercurialStatus.handleNotifyCommit(String origin, URI url)": {
                "lineStart": 87,
                "lineEnd": 186
            }
        }
    },
    "CVE-2023-0872": {
        "6121e90c1fc-UserRestService.java": {
            "org.opennms.web.rest.v1.UserRestService.hasEditRights(SecurityContext securityContext)": {
                "lineStart": 266,
                "lineEnd": 274
            }
        }
    },
    "CVE-2023-24441": {
        "64bc326-XslTransformer.java": {
            "hudson.plugins.mstest.XslTransformer.<init>()": {
                "lineStart": 15,
                "lineEnd": 18
            },
            "hudson.plugins.mstest.XslTransformer.<init>(String xslTransform)": {
                "lineStart": 20,
                "lineEnd": 23
            }
        }
    },
    "CVE-2022-25842": {
        "fb42dc1-IOUtils.java": {
            "com.alibaba.oneagent.utils.IOUtils.unzip(String zipFile, String extractFolder)": {
                "lineStart": 103,
                "lineEnd": 147
            }
        }
    },
    "CVE-2023-50380": {
        "c0459c6a7d-Utils.java": {
            "org.apache.oozie.ambari.view.Utils.formatXml(String xml)": {
                "lineStart": 42,
                "lineEnd": 59
            },
            "org.apache.oozie.ambari.view.Utils.generateXml(Document doc)": {
                "lineStart": 61,
                "lineEnd": 84
            },
            "org.apache.oozie.ambari.view.Utils.getHeaders(HttpHeaders headers)": {
                "lineStart": 86,
                "lineEnd": 97
            },
            "org.apache.oozie.ambari.view.Utils.strJoin(List<String> strings, String separator)": {
                "lineStart": 99,
                "lineEnd": 110
            },
            "org.apache.oozie.ambari.view.Utils.deduceType(String stringResponse)": {
                "lineStart": 112,
                "lineEnd": 123
            },
            "org.apache.oozie.ambari.view.Utils.convertParamsToUrl(MultivaluedMap<String, String> parameters)": {
                "lineStart": 125,
                "lineEnd": 153
            },
            "org.apache.oozie.ambari.view.Utils.isXml(String postBody)": {
                "lineStart": 155,
                "lineEnd": 167
            },
            "org.apache.oozie.ambari.view.Utils.streamResponse(final InputStream is)": {
                "lineStart": 169,
                "lineEnd": 198
            }
        }
    },
    "CVE-2024-29868": {
        "18d29f1e8-ElementIdGenerator.java": {
            "org.apache.streampipes.model.util.ElementIdGenerator.makeRecoveryToken()": {
                "lineStart": 21,
                "lineEnd": 23
            }
        },
        "719ea614c-UserResourceManager.java": {
            "org.apache.streampipes.resource.management.UserResourceManager.registerUser(RegistrationData data)": {
                "lineStart": 55,
                "lineEnd": 75
            },
            "org.apache.streampipes.resource.management.UserResourceManager.createTokenAndSendActivationMail(String username)": {
                "lineStart": 94,
                "lineEnd": 97
            },
            "org.apache.streampipes.resource.management.UserResourceManager.sendPasswordRecoveryLink(String username)": {
                "lineStart": 105,
                "lineEnd": 112
            }
        },
        "c16a12693-TokenUtil.java": {
            "org.apache.streampipes.user.management.util.TokenUtil.generateToken()": {
                "lineStart": 30,
                "lineEnd": 32
            }
        }
    },
    "CVE-2022-34180": {
        "40a5ee0-PublicBuildStatusAction.java": {
            "org.jenkinsci.plugins.badge.actions.PublicBuildStatusAction.getProject(String job, Boolean throwErrorWhenNotFound)": {
                "lineStart": 86,
                "lineEnd": 115
            },
            "org.jenkinsci.plugins.badge.actions.PublicBuildStatusAction.getRun(Job<?, ?> project, String build, Boolean throwErrorWhenNotFound)": {
                "lineStart": 117,
                "lineEnd": 165
            }
        }
    },
    "CVE-2022-48114": {
        "246a9cfc-SqlUtil.java": {
            "com.ruoyi.common.utils.sql.SqlUtil.escapeOrderBySql(String value)": {
                "lineStart": 7,
                "lineEnd": 13
            },
            "com.ruoyi.common.utils.sql.SqlUtil.isValidOrderBySql(String value)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.ruoyi.common.utils.sql.SqlUtil.filterKeyword(String value)": {
                "lineStart": 19,
                "lineEnd": 32
            }
        }
    },
    "CVE-2024-25151": {
        "ee00179b8f965-EmailNotificationSender.java": {
            "com.liferay.calendar.internal.notification.EmailNotificationSender._sendNotification(NotificationRecipient notificationRecipient, NotificationTemplateContext notificationTemplateContext)": {
                "lineStart": 36,
                "lineEnd": 70
            }
        }
    },
    "CVE-2023-39410": {
        "d937851eb-Schema.java": {
            "org.apache.avro.Schema$FixedSchema.<init>(Name name, String doc, int size)": {
                "lineStart": 1216,
                "lineEnd": 1222
            }
        },
        "12c6e080d-BinaryDecoder.java": {
            "org.apache.avro.io.BinaryDecoder.<init>()": {
                "lineStart": 43,
                "lineEnd": 58
            },
            "org.apache.avro.io.BinaryDecoder.readString(Utf8 old)": {
                "lineStart": 248,
                "lineEnd": 265
            },
            "org.apache.avro.io.BinaryDecoder.readBytes(ByteBuffer old)": {
                "lineStart": 276,
                "lineEnd": 302
            },
            "org.apache.avro.io.BinaryDecoder.readArrayStart()": {
                "lineStart": 373,
                "lineEnd": 375
            },
            "org.apache.avro.io.BinaryDecoder.arrayNext()": {
                "lineStart": 377,
                "lineEnd": 379
            },
            "org.apache.avro.io.BinaryDecoder.readMapStart()": {
                "lineStart": 385,
                "lineEnd": 387
            },
            "org.apache.avro.io.BinaryDecoder.mapNext()": {
                "lineStart": 389,
                "lineEnd": 391
            }
        },
        "1e01f6f96-DirectBinaryDecoder.java": {
            "org.apache.avro.io.DirectBinaryDecoder$ByteReader.read(ByteBuffer old, long length)": {
                "lineStart": 12,
                "lineEnd": 26
            },
            "org.apache.avro.io.DirectBinaryDecoder$ByteReader.checkLength(long length)": {
                "lineStart": 28,
                "lineEnd": 41
            },
            "org.apache.avro.io.DirectBinaryDecoder$ReuseByteReader.read(ByteBuffer old, long length)": {
                "lineStart": 51,
                "lineEnd": 60
            },
            "org.apache.avro.io.DirectBinaryDecoder.readBytes(ByteBuffer old)": {
                "lineStart": 144,
                "lineEnd": 147
            }
        },
        "f54b6e206-Utf8.java": {
            "org.apache.avro.util.Utf8.<init>(String string)": {
                "lineStart": 39,
                "lineEnd": 46
            },
            "org.apache.avro.util.Utf8.<init>(byte[] bytes)": {
                "lineStart": 55,
                "lineEnd": 60
            },
            "org.apache.avro.util.Utf8.setByteLength(int newLength)": {
                "lineStart": 78,
                "lineEnd": 88
            },
            "org.apache.avro.util.Utf8.set(String string)": {
                "lineStart": 90,
                "lineEnd": 99
            },
            "org.apache.avro.util.Utf8.checkLength(int length)": {
                "lineStart": 175,
                "lineEnd": 180
            }
        }
    },
    "CVE-2023-48795": {
        "fd7cc38-KexManager.java": {
            "com.trilead.ssh2.transport.KexManager.addExtraKexAlgorithms(CryptoWishList cwl)": {
                "lineStart": 244,
                "lineEnd": 255
            },
            "com.trilead.ssh2.transport.KexManager.mergeKexParameters(KexParameters client, KexParameters server)": {
                "lineStart": 182,
                "lineEnd": 227
            }
        },
        "19f9cd7-TransportConnection.java": {
            "com.trilead.ssh2.transport.TransportConnection.<init>(InputStream is, OutputStream os, SecureRandom rnd)": {
                "lineStart": 40,
                "lineEnd": 44
            },
            "com.trilead.ssh2.transport.TransportConnection.changeRecvCipher(BlockCipher bc, MAC mac)": {
                "lineStart": 46,
                "lineEnd": 55
            },
            "com.trilead.ssh2.transport.TransportConnection.changeSendCipher(BlockCipher bc, MAC mac)": {
                "lineStart": 57,
                "lineEnd": 69
            },
            "com.trilead.ssh2.transport.TransportConnection.changeRecvCompression(ICompressor comp)": {
                "lineStart": 71,
                "lineEnd": 78
            },
            "com.trilead.ssh2.transport.TransportConnection.changeSendCompression(ICompressor comp)": {
                "lineStart": 80,
                "lineEnd": 87
            },
            "com.trilead.ssh2.transport.TransportConnection.sendMessage(byte[] message)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "com.trilead.ssh2.transport.TransportConnection.sendMessage(byte[] message, int off, int len)": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "com.trilead.ssh2.transport.TransportConnection.getPacketOverheadEstimate()": {
                "lineStart": 97,
                "lineEnd": 99
            },
            "com.trilead.ssh2.transport.TransportConnection.sendMessage(byte[] message, int off, int len, int padd)": {
                "lineStart": 101,
                "lineEnd": 184
            },
            "com.trilead.ssh2.transport.TransportConnection.receiveMessage(byte[] buffer, int off, int len)": {
                "lineStart": 186,
                "lineEnd": 243
            },
            "com.trilead.ssh2.transport.TransportConnection.calculatePayloadLength(int bufferLength, int packetLength, int paddingLength)": {
                "lineStart": 245,
                "lineEnd": 254
            },
            "com.trilead.ssh2.transport.TransportConnection.checkMacMatches(byte[] buf1, byte[] buf2)": {
                "lineStart": 256,
                "lineEnd": 265
            },
            "com.trilead.ssh2.transport.TransportConnection.getPacketLength(byte[] packetHeader, boolean isEtm)": {
                "lineStart": 267,
                "lineEnd": 273
            },
            "com.trilead.ssh2.transport.TransportConnection.startCompression()": {
                "lineStart": 275,
                "lineEnd": 278
            }
        },
        "ce33608-TransportManager.java": {
            "com.trilead.ssh2.transport.TransportManager.receiveLoop()": {
                "lineStart": 383,
                "lineEnd": 470
            },
            "com.trilead.ssh2.transport.TransportManager.kexFinished()": {
                "lineStart": 293,
                "lineEnd": 299
            },
            "com.trilead.ssh2.transport.TransportManager.changeRecvCipher(BlockCipher bc, MAC mac)": {
                "lineStart": 305,
                "lineEnd": 307
            },
            "com.trilead.ssh2.transport.TransportManager.changeSendCipher(BlockCipher bc, MAC mac)": {
                "lineStart": 309,
                "lineEnd": 311
            }
        }
    },
    "CVE-2022-21363": {
        "41da76e9-MysqlSQLXML.java": {
            "com.mysql.cj.jdbc.MysqlSQLXML.getSource(Class<T> clazz)": {
                "lineStart": 133,
                "lineEnd": 201
            }
        }
    },
    "CVE-2023-40191": {
        "c9eaae4801a41-AccountEntryEmailDomainsConfigurationModelListener.java": {
            "com.liferay.account.internal.configuration.persistence.listener.AccountEntryEmailDomainsConfigurationModelListener.onBeforeSave(String pid, Dictionary<String, Object> properties)": {
                "lineStart": 54,
                "lineEnd": 79
            }
        }
    },
    "CVE-2023-44483": {
        "6d464a1c-DOMRSAPSSSignatureMethod.java": {
            "org.apache.jcp.xml.dsig.internal.dom.DOMRSAPSSSignatureMethod.sign(Key key, SignedInfo si, XMLSignContext context)": {
                "lineStart": 196,
                "lineEnd": 235
            }
        },
        "ef8c9f07-DOMSignatureMethod.java": {
            "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.sign(Key key, SignedInfo si, XMLSignContext context)": {
                "lineStart": 197,
                "lineEnd": 229
            }
        }
    },
    "CVE-2021-41042": {
        "2bde1ef7-JenaModelHelper.java": {
            "org.eclipse.lyo.oslc4j.provider.jena.JenaModelHelper.fromResource(final Map<Class<?>, Map<String, Method>> classPropertyDefinitionsToSetMethods, final Class<?> beanClass, final Object bean, final Resource resource, Map<String, Object> visitedResources, HashSet<String> rdfTypes)": {
                "lineStart": 330,
                "lineEnd": 680
            },
            "org.eclipse.lyo.oslc4j.provider.jena.JenaModelHelper.createTransformer()": {
                "lineStart": 1474,
                "lineEnd": 1484
            }
        }
    },
    "CVE-2021-21698": {
        "b604ff2-SubversionSCM.java": {
            "hudson.scm.SubversionSCM$DescriptorImpl$SshPublicKeyCredential.getKeyFile()": {
                "lineStart": 1499,
                "lineEnd": 1506
            }
        }
    },
    "CVE-2022-24613": {
        "c5a5d86c-CanonThumbnailAtom.java": {
            "com.drew.metadata.mov.atoms.canon.CanonThumbnailAtom.addMetadata(QuickTimeDirectory directory)": {
                "lineStart": 66,
                "lineEnd": 68
            }
        }
    },
    "CVE-2022-42127": {
        "feefa8a88f90b-FriendlyURLServlet.java": {
            "com.liferay.friendly.url.web.internal.servlet.FriendlyURLServlet.doGet(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)": {
                "lineStart": 66,
                "lineEnd": 84
            }
        }
    },
    "CVE-2023-28673": {
        "4788cbe-OctoperfBuilderDescriptor.java": {
            "org.jenkinsci.plugins.octoperf.OctoperfBuilderDescriptor.doFillCredentialsIdItems(@QueryParameter(\"credentialsId\") final String credentialsId, final Object scope)": {
                "lineStart": 57,
                "lineEnd": 71
            },
            "org.jenkinsci.plugins.octoperf.OctoperfBuilderDescriptor.doFillWorkspaceIdItems(@QueryParameter(\"credentialsId\") final String credentialsId, @QueryParameter(\"workspaceId\") final String workspaceId)": {
                "lineStart": 73,
                "lineEnd": 94
            },
            "org.jenkinsci.plugins.octoperf.OctoperfBuilderDescriptor.doFillProjectIdItems(@QueryParameter(\"credentialsId\") final String credentialsId, @QueryParameter(\"workspaceId\") final String workspaceId, @QueryParameter(\"projectId\") final String projectId)": {
                "lineStart": 96,
                "lineEnd": 117
            },
            "org.jenkinsci.plugins.octoperf.OctoperfBuilderDescriptor.doFillScenarioIdItems(@QueryParameter final String credentialsId, @QueryParameter final String projectId, @QueryParameter final String scenarioId)": {
                "lineStart": 119,
                "lineEnd": 140
            }
        }
    },
    "CVE-2020-2253": {
        "e2f06227-ExtendedEmailPublisherDescriptor.java": {
            "hudson.plugins.emailext.ExtendedEmailPublisherDescriptor.createSession(String from)": {
                "lineStart": 172,
                "lineEnd": 228
            }
        }
    },
    "CVE-2023-24830": {
        "a4e707a6d5-PublishHandler.java": {
            "org.apache.iotdb.db.protocol.mqtt.PublishHandler.getID()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "org.apache.iotdb.db.protocol.mqtt.PublishHandler.onConnect(InterceptConnectMessage msg)": {
                "lineStart": 41,
                "lineEnd": 50
            },
            "org.apache.iotdb.db.protocol.mqtt.PublishHandler.onDisconnect(InterceptDisconnectMessage msg)": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "org.apache.iotdb.db.protocol.mqtt.PublishHandler.onPublish(InterceptPublishMessage msg)": {
                "lineStart": 56,
                "lineEnd": 97
            }
        }
    },
    "CVE-2023-26479": {
        "36d116698ee-DefaultContentParser.java": {
            "org.xwiki.rendering.internal.parser.DefaultContentParser.parse(String content, Syntax syntax)": {
                "lineStart": 22,
                "lineEnd": 24
            }
        }
    },
    "CVE-2021-36152": {
        "9d30d8669-LdapUtils.java": {
            "org.apache.gobblin.util.LdapUtils.<init>(Config config)": {
                "lineStart": 34,
                "lineEnd": 42
            },
            "org.apache.gobblin.util.LdapUtils.getDirContext(String username, String password)": {
                "lineStart": 44,
                "lineEnd": 54
            }
        }
    },
    "CVE-2023-35157": {
        "50fd11677ef-XWikiAction.java": {
            "com.xpn.xwiki.web.XWikiAction.localizePlainOrKey(String key, Object... parameters)": {
                "lineStart": 122,
                "lineEnd": 124
            }
        }
    },
    "CVE-2021-21684": {
        "66f33a90-GitStatus.java": {
            "hudson.plugins.git.GitStatus.doNotifyCommit(HttpServletRequest request, @QueryParameter(required = true) String url, @QueryParameter(required = false) String branches, @QueryParameter(required = false) String sha1)": {
                "lineStart": 99,
                "lineEnd": 163
            },
            "hudson.plugins.git.GitStatus$CommitHookCause.<init>(String sha1)": {
                "lineStart": 423,
                "lineEnd": 425
            },
            "hudson.plugins.git.GitStatus$CommitHookCause.getShortDescription()": {
                "lineStart": 427,
                "lineEnd": 429
            },
            "hudson.plugins.git.GitStatus$JenkinsAbstractProjectListener.onNotifyCommit(String origin, URIish uri, String sha1, List<ParameterValue> buildParameters, String... branches)": {
                "lineStart": 209,
                "lineEnd": 350
            }
        }
    },
    "CVE-2022-20617": {
        "19b925f-DockerRegistryEndpoint.java": {
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.imageName(@Nonnull String userAndRepo)": {
                "lineStart": 171,
                "lineEnd": 191
            }
        },
        "0000000-ImageNameValidator.java": {
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.<init>(String url, String credentialsId)": {
                "lineStart": 47,
                "lineEnd": 50
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.fromImageName(String s, @CheckForNull String credentialsId)": {
                "lineStart": 52,
                "lineEnd": 67
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.getEffectiveUrl()": {
                "lineStart": 69,
                "lineEnd": 77
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.getUrl()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.getCredentialsId()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.getToken(Item context)": {
                "lineStart": 87,
                "lineEnd": 101
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.getToken(@CheckForNull Run context)": {
                "lineStart": 103,
                "lineEnd": 113
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.newKeyMaterialFactory(@Nonnull AbstractBuild build)": {
                "lineStart": 115,
                "lineEnd": 122
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.newKeyMaterialFactory(Item context, @Nonnull VirtualChannel target)": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.newKeyMaterialFactory(@CheckForNull Item context, @Nonnull VirtualChannel target, @CheckForNull Launcher launcher, @Nonnull TaskListener listener)": {
                "lineStart": 128,
                "lineEnd": 139
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.newKeyMaterialFactory(@CheckForNull Item context, @Nonnull FilePath workspace, @Nonnull Launcher launcher, @Nonnull TaskListener listener, @Nonnull String dockerExecutable)": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.newKeyMaterialFactory(@CheckForNull Item context, @Nonnull FilePath workspace, @Nonnull Launcher launcher, @Nonnull EnvVars env, @Nonnull TaskListener listener, @Nonnull String dockerExecutable)": {
                "lineStart": 145,
                "lineEnd": 156
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.newKeyMaterialFactory(@CheckForNull Run context, @Nonnull FilePath workspace, @Nonnull Launcher launcher, @Nonnull EnvVars env, @Nonnull TaskListener listener, @Nonnull String dockerExecutable)": {
                "lineStart": 158,
                "lineEnd": 169
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.imageName(@Nonnull String userAndRepo)": {
                "lineStart": 171,
                "lineEnd": 191
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.toString()": {
                "lineStart": 193,
                "lineEnd": 195
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.hashCode()": {
                "lineStart": 197,
                "lineEnd": 202
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint.equals(Object obj)": {
                "lineStart": 204,
                "lineEnd": 223
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint$DescriptorImpl.getDisplayName()": {
                "lineStart": 226,
                "lineEnd": 228
            },
            "org.jenkinsci.plugins.docker.commons.credentials.DockerRegistryEndpoint$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Item item)": {
                "lineStart": 230,
                "lineEnd": 236
            }
        }
    },
    "CVE-2020-2090": {
        "950706c-AmazonEC2Cloud.java": {
            "hudson.plugins.ec2.AmazonEC2Cloud.<init>(String cloudName, boolean useInstanceProfileForCredentials, String credentialsId, String region, String privateKey, String instanceCapStr, List<? extends SlaveTemplate> templates, String roleArn, String roleSessionName)": {
                "lineStart": 31,
                "lineEnd": 34
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getCloudName()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getDisplayName()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.createCloudId(String cloudName)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getRegion()": {
                "lineStart": 48,
                "lineEnd": 56
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getEc2EndpointUrl(String region)": {
                "lineStart": 58,
                "lineEnd": 66
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getEc2EndpointUrl()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getS3EndpointUrl()": {
                "lineStart": 72,
                "lineEnd": 80
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.isNoDelayProvisioning()": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.setNoDelayProvisioning(boolean noDelayProvisioning)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.createCredentialsProvider()": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.getDisplayName()": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doCheckCloudName(@QueryParameter String value)": {
                "lineStart": 99,
                "lineEnd": 121
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doFillRegionItems(@QueryParameter String altEC2Endpoint, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId)": {
                "lineStart": 123,
                "lineEnd": 140
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.determineEC2EndpointURL(@Nullable String altEC2Endpoint)": {
                "lineStart": 142,
                "lineEnd": 149
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doTestConnection(@QueryParameter String region, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String privateKey, @QueryParameter String roleArn, @QueryParameter String roleSessionName)": {
                "lineStart": 151,
                "lineEnd": 157
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doGenerateKey(StaplerResponse rsp, @QueryParameter String region, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String roleArn, @QueryParameter String roleSessionName)": {
                "lineStart": 159,
                "lineEnd": 161
            }
        },
        "9c45d2d-EC2Cloud.java": {
            "hudson.plugins.ec2.EC2Cloud$DescriptorImpl.doTestConnection(URL ec2endpoint, boolean useInstanceProfileForCredentials, String credentialsId, String privateKey, String roleArn, String roleSessionName, String region)": {
                "lineStart": 843,
                "lineEnd": 865
            },
            "hudson.plugins.ec2.EC2Cloud$DescriptorImpl.doGenerateKey(StaplerResponse rsp, URL ec2EndpointUrl, boolean useInstanceProfileForCredentials, String credentialsId, String roleArn, String roleSessionName, String region)": {
                "lineStart": 867,
                "lineEnd": 897
            }
        },
        "e6bc0d0-Eucalyptus.java": {
            "hudson.plugins.ec2.Eucalyptus.<init>(URL ec2endpoint, URL s3endpoint, boolean useInstanceProfileForCredentials, String credentialsId, String privateKey, String instanceCapStr, List<SlaveTemplate> templates, String roleArn, String roleSessionName)": {
                "lineStart": 14,
                "lineEnd": 18
            },
            "hudson.plugins.ec2.Eucalyptus.getEc2EndpointUrl()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "hudson.plugins.ec2.Eucalyptus.getS3EndpointUrl()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "hudson.plugins.ec2.Eucalyptus$DescriptorImpl.getDisplayName()": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "hudson.plugins.ec2.Eucalyptus$DescriptorImpl.doTestConnection(@QueryParameter URL ec2endpoint, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String privateKey, @QueryParameter String roleArn, @QueryParameter String roleSessionName, @QueryParameter String region)": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "hudson.plugins.ec2.Eucalyptus$DescriptorImpl.doGenerateKey(StaplerResponse rsp, @QueryParameter URL url, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String roleArn, @QueryParameter String roleSessionName, @QueryParameter String region)": {
                "lineStart": 37,
                "lineEnd": 39
            }
        }
    },
    "CVE-2023-49733": {
        "06f008e7be-StreamGenerator.java": {
            "org.apache.cocoon.generation.StreamGenerator.generate()": {
                "lineStart": 20,
                "lineEnd": 106
            }
        }
    },
    "CVE-2023-51441": {
        "73e89ee1b-ServiceFactory.java": {
            "org.apache.axis.client.ServiceFactory.getService(Map environment)": {
                "lineStart": 42,
                "lineEnd": 88
            }
        }
    },
    "CVE-2020-36640": {
        "7215800-SecureWSConnector.java": {
            "org.bonitasoft.connectors.ws.SecureWSConnector.executeBusinessLogic()": {
                "lineStart": 137,
                "lineEnd": 259
            },
            "org.bonitasoft.connectors.ws.SecureWSConnector.configureProxy()": {
                "lineStart": 279,
                "lineEnd": 321
            },
            "org.bonitasoft.connectors.ws.SecureWSConnector.buildResponseDocumentBody(Document responseDocumentEnvelope)": {
                "lineStart": 354,
                "lineEnd": 372
            },
            "org.bonitasoft.connectors.ws.SecureWSConnector.printRequestAndResponse(Source sourceResponse, boolean buildResponseDocumentEnvelope, boolean buildResponseDocumentBody, Document responseDocumentEnvelope, Document responseDocumentBody)": {
                "lineStart": 374,
                "lineEnd": 390
            },
            "org.bonitasoft.connectors.ws.SecureWSConnector.getTransformer()": {
                "lineStart": 425,
                "lineEnd": 433
            }
        }
    },
    "CVE-2020-9479": {
        "d07b648ea2-DeploymentUtils.java": {
            "org.apache.hyracks.control.common.deployment.DeploymentUtils.unzip(String sourceFile, String outputDir)": {
                "lineStart": 161,
                "lineEnd": 191
            }
        }
    },
    "CVE-2021-40146": {
        "972012fa-YAMLExtractor.java": {
            "org.apache.any23.extractor.yaml.YAMLExtractor.setStopAtFirstError(boolean f)": {
                "lineStart": 25,
                "lineEnd": 26
            },
            "org.apache.any23.extractor.yaml.YAMLExtractor.run(ExtractionParameters extractionParameters, ExtractionContext context, InputStream in, ExtractionResult out)": {
                "lineStart": 28,
                "lineEnd": 58
            },
            "org.apache.any23.extractor.yaml.YAMLExtractor.getDescription()": {
                "lineStart": 60,
                "lineEnd": 62
            }
        }
    },
    "CVE-2020-26282": {
        "1ff0ff32-LongPositiveConstraint.java": {
            "com.browserup.bup.rest.validation.LongPositiveConstraint$LongPositiveValidator.isValid(String value, ConstraintValidatorContext context)": {
                "lineStart": 22,
                "lineEnd": 46
            }
        },
        "6505d867-NotBlankConstraint.java": {
            "com.browserup.bup.rest.validation.NotBlankConstraint$NotBlankValidator.isValid(Object value, ConstraintValidatorContext context)": {
                "lineStart": 22,
                "lineEnd": 31
            }
        },
        "cf68ee31-PatternConstraint.java": {
            "com.browserup.bup.rest.validation.PatternConstraint$PatternValidator.isValid(String value, ConstraintValidatorContext context)": {
                "lineStart": 23,
                "lineEnd": 39
            }
        },
        "6468936f-PortWithExistingProxyConstraint.java": {
            "com.browserup.bup.rest.validation.PortWithExistingProxyConstraint$PortWithExistingProxyConstraintValidator.isValid(Integer value, ConstraintValidatorContext context)": {
                "lineStart": 29,
                "lineEnd": 38
            }
        }
    },
    "CVE-2020-2311": {
        "ab82e89-AwsManagementLink.java": {
            "io.jenkins.plugins.aws.global_configuration.AwsManagementLink.doConfigure(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 46,
                "lineEnd": 58
            }
        }
    },
    "CVE-2020-11980": {
        "a25558738d-KarafMBeanServerGuard.java": {
            "org.apache.karaf.management.KarafMBeanServerGuard.invoke(Object proxy, Method method, Object[] args)": {
                "lineStart": 54,
                "lineEnd": 88
            },
            "org.apache.karaf.management.KarafMBeanServerGuard.handleInvoke(ObjectName objectName, String operationName, Object[] params, String[] signature)": {
                "lineStart": 276,
                "lineEnd": 277
            },
            "org.apache.karaf.management.KarafMBeanServerGuard.handleInvoke(BulkRequestContext context, ObjectName objectName, String operationName, Object[] params, String[] signature)": {
                "lineStart": 279,
                "lineEnd": 302
            }
        }
    },
    "CVE-2021-25924": {
        "e0f509a7cb-BackupConfigControllerV1.java": {
            "com.thoughtworks.go.apiv1.backupconfig.BackupConfigControllerV1.setupRoutes()": {
                "lineStart": 40,
                "lineEnd": 51
            }
        }
    },
    "CVE-2022-4963": {
        "dbf4af3-HibernateSchemaService.java": {
            "org.folio.spring.tenant.hibernate.HibernateSchemaService.schemaExists(Connection connection, String schema)": {
                "lineStart": 173,
                "lineEnd": 184
            }
        },
        "32eee78-SchemaService.java": {
            "org.folio.spring.tenant.service.SchemaService.getSchema(String tenant)": {
                "lineStart": 7,
                "lineEnd": 9
            }
        }
    },
    "CVE-2023-41329": {
        "b898db4c8-HttpClientFactory.java": {
            "com.github.tomakehurst.wiremock.http.HttpClientFactory.createClient(int maxConnections, int timeoutMilliseconds, ProxySettings proxySettings, KeyStoreSettings trustStoreSettings, boolean trustSelfSignedCertificates, final List<String> trustedHosts, boolean useSystemProperties)": {
                "lineStart": 40,
                "lineEnd": 63
            },
            "com.github.tomakehurst.wiremock.http.HttpClientFactory.createClient(int maxConnections, int timeoutMilliseconds, ProxySettings proxySettings, KeyStoreSettings trustStoreSettings, boolean useSystemProperties)": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "com.github.tomakehurst.wiremock.http.HttpClientFactory.createClient(int maxConnections, int timeoutMilliseconds)": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "com.github.tomakehurst.wiremock.http.HttpClientFactory.createClient(ProxySettings proxySettings)": {
                "lineStart": 160,
                "lineEnd": 162
            }
        },
        "32b24665c-ProxyResponseRenderer.java": {
            "com.github.tomakehurst.wiremock.http.ProxyResponseRenderer.<init>(ProxySettings proxySettings, KeyStoreSettings trustStoreSettings, boolean preserveHostHeader, String hostHeaderValue, SettingsStore settingsStore, boolean trustAllProxyTargets, List<String> trustedProxyTargets, boolean stubCorsEnabled, NetworkAddressRules targetAddressRules, int proxyTimeout)": {
                "lineStart": 42,
                "lineEnd": 50
            },
            "com.github.tomakehurst.wiremock.http.ProxyResponseRenderer.render(ServeEvent serveEvent)": {
                "lineStart": 52,
                "lineEnd": 77
            },
            "com.github.tomakehurst.wiremock.http.ProxyResponseRenderer.targetAddressProhibited(String proxyUrl)": {
                "lineStart": 79,
                "lineEnd": 89
            }
        }
    },
    "CVE-2020-11620": {
        "dee36a14e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type)": {
                "lineStart": 75,
                "lineEnd": 107
            }
        }
    },
    "CVE-2020-36321": {
        "f1b22dcbee-DevModeHandler.java": {
            "com.vaadin.flow.server.DevModeHandler.serveDevModeRequest(HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 159,
                "lineEnd": 200
            }
        },
        "caa553a374-HandlerHelper.java": {
            "com.vaadin.flow.server.HandlerHelper$RequestType.<init>(String identifier)": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "com.vaadin.flow.server.HandlerHelper$RequestType.getIdentifier()": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "com.vaadin.flow.server.HandlerHelper.<init>()": {
                "lineStart": 22,
                "lineEnd": 23
            },
            "com.vaadin.flow.server.HandlerHelper.isRequestType(VaadinRequest request, RequestType requestType)": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "com.vaadin.flow.server.HandlerHelper.findLocale(VaadinSession session, VaadinRequest request)": {
                "lineStart": 29,
                "lineEnd": 55
            },
            "com.vaadin.flow.server.HandlerHelper.setResponseNoCacheHeaders(BiConsumer<String, String> headerSetter, BiConsumer<String, Long> longHeaderSetter)": {
                "lineStart": 57,
                "lineEnd": 61
            },
            "com.vaadin.flow.server.HandlerHelper.getCancelingRelativePath(String pathToCancel)": {
                "lineStart": 63,
                "lineEnd": 73
            }
        },
        "dc97dd7cad-StaticFileServer.java": {
            "com.vaadin.flow.server.StaticFileServer.serveStaticResource(HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 51,
                "lineEnd": 86
            },
            "com.vaadin.flow.server.StaticFileServer.isPathSafe(String path)": {
                "lineStart": 100,
                "lineEnd": 109
            }
        }
    },
    "CVE-2023-0264": {
        "db98a183bf-OIDCLoginProtocol.java": {
            "org.keycloak.protocol.oidc.OIDCLoginProtocol.authenticated(AuthenticationSessionModel authSession, UserSessionModel userSession, ClientSessionContext clientSessionCtx)": {
                "lineStart": 148,
                "lineEnd": 225
            }
        },
        "83050aaec1-OAuth2Code.java": {
            "org.keycloak.protocol.oidc.utils.OAuth2Code.<init>(String id, int expiration, String nonce, String scope, String redirectUriParam, String codeChallenge, String codeChallengeMethod)": {
                "lineStart": 19,
                "lineEnd": 27
            },
            "org.keycloak.protocol.oidc.utils.OAuth2Code.<init>(Map<String, String> data)": {
                "lineStart": 29,
                "lineEnd": 37
            },
            "org.keycloak.protocol.oidc.utils.OAuth2Code.serializeCode()": {
                "lineStart": 43,
                "lineEnd": 53
            }
        },
        "1c4c59daed-OAuth2CodeParser.java": {
            "org.keycloak.protocol.oidc.utils.OAuth2CodeParser.parseCode(KeycloakSession session, String code, RealmModel realm, EventBuilder event)": {
                "lineStart": 30,
                "lineEnd": 76
            }
        }
    },
    "CVE-2022-39367": {
        "09cf3e24-AssessmentPackageFileImporter.java": {
            "uk.ac.ed.ph.qtiworks.services.AssessmentPackageFileImporter.tryUnpackZipFile(final File importSandboxDirectory, final MultipartFile multipartFile)": {
                "lineStart": 82,
                "lineEnd": 128
            }
        }
    },
    "CVE-2023-40167": {
        "990e53adcd-HttpParser.java": {
            "org.eclipse.jetty.http.HttpParser.quickStart(ByteBuffer buffer)": {
                "lineStart": 314,
                "lineEnd": 367
            },
            "org.eclipse.jetty.http.HttpParser.parsedHeader()": {
                "lineStart": 717,
                "lineEnd": 834
            },
            "org.eclipse.jetty.http.HttpParser.convertContentLength(String valueString)": {
                "lineStart": 845,
                "lineEnd": 855
            },
            "org.eclipse.jetty.http.HttpParser.parseNext(ByteBuffer buffer)": {
                "lineStart": 1159,
                "lineEnd": 1287
            }
        }
    },
    "CVE-2022-28140": {
        "1ec9018-FlakySuiteResult.java": {
            "com.google.jenkins.flakyTestHandler.junit.FlakySuiteResult.parse(File xmlReport, boolean keepLongStdio)": {
                "lineStart": 60,
                "lineEnd": 68
            }
        }
    },
    "CVE-2022-30948": {
        "e11cd3b-MercurialSCM.java": {
            "hudson.plugins.mercurial.MercurialSCM.checkout(Run<?, ?> build, Launcher launcher, FilePath workspace, final TaskListener listener, File changelogFile, SCMRevisionState baseline)": {
                "lineStart": 484,
                "lineEnd": 525
            }
        }
    },
    "CVE-2021-27568": {
        "047a003-JSONParserBase.java": {
            "net.minidev.json.parser.JSONParserBase.extractFloat()": {
                "lineStart": 107,
                "lineEnd": 118
            }
        }
    },
    "CVE-2020-2235": {
        "f655c4e-GlobalPipelineMavenConfig.java": {
            "org.jenkinsci.plugins.pipeline.maven.GlobalPipelineMavenConfig.doFillJdbcCredentialsIdItems()": {
                "lineStart": 370,
                "lineEnd": 372
            },
            "org.jenkinsci.plugins.pipeline.maven.GlobalPipelineMavenConfig.doValidateJdbcConnection(@QueryParameter String jdbcUrl, @QueryParameter String properties, @QueryParameter String jdbcCredentialsId)": {
                "lineStart": 374,
                "lineEnd": 566
            }
        },
        "e3245ce-WithMavenStep.java": {
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillMavenItems()": {
                "lineStart": 174,
                "lineEnd": 182
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillJdkItems()": {
                "lineStart": 188,
                "lineEnd": 196
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillMavenSettingsConfigItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 198,
                "lineEnd": 206
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillGlobalMavenSettingsConfigItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 208,
                "lineEnd": 216
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillPublisherStrategyItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 218,
                "lineEnd": 225
            }
        }
    },
    "CVE-2022-42125": {
        "10f8fd38191d0-FileImpl.java": {
            "com.liferay.portal.util.FileImpl.unzip(File source, File destination)": {
                "lineStart": 619,
                "lineEnd": 645
            }
        }
    },
    "CVE-2023-22043": {
        "7d560c6af7-Window.java": {
            "com.sun.glass.ui.Window.<init>(Window owner, Screen screen, int styleMask)": {
                "lineStart": 101,
                "lineEnd": 143
            }
        },
        "93d103bb0c-WinWindow.java": {
            "com.sun.glass.ui.win.WinWindow.notifyMoving(int x, int y, int w, int h, float fx_x, float fx_y, int anchorX, int anchorY, int resizeMode, int iLft, int iTop, int iRgt, int iBot)": {
                "lineStart": 99,
                "lineEnd": 168
            }
        }
    },
    "CVE-2024-29025": {
        "09bd880d84-HttpPostMultipartRequestDecoder.java": {
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.<init>(HttpDataFactory factory, HttpRequest request, Charset charset)": {
                "lineStart": 55,
                "lineEnd": 97
            },
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.offer(HttpContent content)": {
                "lineStart": 151,
                "lineEnd": 180
            },
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder.addHttpData(InterfaceHttpData data)": {
                "lineStart": 225,
                "lineEnd": 238
            }
        },
        "eb6bd792de-HttpPostRequestDecoder.java": {
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.<init>(HttpRequest request)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.<init>(HttpDataFactory factory, HttpRequest request)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.<init>(HttpDataFactory factory, HttpRequest request, Charset charset)": {
                "lineStart": 23,
                "lineEnd": 34
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.isMultipart(HttpRequest request)": {
                "lineStart": 38,
                "lineEnd": 45
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.getMultipartDataBoundary(String contentType)": {
                "lineStart": 47,
                "lineEnd": 93
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.isMultipart()": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.setDiscardThreshold(int discardThreshold)": {
                "lineStart": 99,
                "lineEnd": 101
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.getDiscardThreshold()": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.getBodyHttpDatas()": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.getBodyHttpDatas(String name)": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.getBodyHttpData(String name)": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.offer(HttpContent content)": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.hasNext()": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.next()": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.currentPartialHttpData()": {
                "lineStart": 131,
                "lineEnd": 133
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.destroy()": {
                "lineStart": 135,
                "lineEnd": 137
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.cleanFiles()": {
                "lineStart": 139,
                "lineEnd": 141
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.removeHttpDataFromClean(InterfaceHttpData data)": {
                "lineStart": 143,
                "lineEnd": 145
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.splitHeaderContentType(String sb)": {
                "lineStart": 147,
                "lineEnd": 178
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$NotEnoughDataDecoderException.<init>()": {
                "lineStart": 182,
                "lineEnd": 183
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$NotEnoughDataDecoderException.<init>(String msg)": {
                "lineStart": 185,
                "lineEnd": 187
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$NotEnoughDataDecoderException.<init>(Throwable cause)": {
                "lineStart": 189,
                "lineEnd": 191
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$NotEnoughDataDecoderException.<init>(String msg, Throwable cause)": {
                "lineStart": 193,
                "lineEnd": 195
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$ErrorDataDecoderException.<init>()": {
                "lineStart": 205,
                "lineEnd": 206
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$ErrorDataDecoderException.<init>(String msg)": {
                "lineStart": 208,
                "lineEnd": 210
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$ErrorDataDecoderException.<init>(Throwable cause)": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$ErrorDataDecoderException.<init>(String msg, Throwable cause)": {
                "lineStart": 216,
                "lineEnd": 218
            }
        },
        "817f828145-HttpPostStandardRequestDecoder.java": {
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder.<init>(HttpDataFactory factory, HttpRequest request, Charset charset)": {
                "lineStart": 45,
                "lineEnd": 63
            },
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder.offer(HttpContent content)": {
                "lineStart": 117,
                "lineEnd": 146
            },
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder.addHttpData(InterfaceHttpData data)": {
                "lineStart": 185,
                "lineEnd": 198
            }
        }
    },
    "CVE-2022-29253": {
        "046339d1400-AbstractResourceSkin.java": {
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.<init>(String id, InternalSkinManager skinManager, InternalSkinConfiguration configuration, Logger logger)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.createResource(String resourcePath, String resourceName)": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getResourceURL(String resourcePath)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getOutputSyntaxString()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.createParent()": {
                "lineStart": 28,
                "lineEnd": 45
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getLocalResource(String resourceName)": {
                "lineStart": 47,
                "lineEnd": 54
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getPropertiesPath()": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getSkinFolder()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getProperties()": {
                "lineStart": 64,
                "lineEnd": 85
            },
            "com.xpn.xwiki.internal.skin.AbstractResourceSkin.getSkinResourcePath(String resource)": {
                "lineStart": 87,
                "lineEnd": 97
            }
        },
        "770cbf17d7c-InternalTemplateManager.java": {
            "com.xpn.xwiki.internal.template.InternalTemplateManager.getClassloaderTemplate(String suffixPath, String templateName)": {
                "lineStart": 628,
                "lineEnd": 630
            },
            "com.xpn.xwiki.internal.template.InternalTemplateManager.getClassloaderTemplate(ClassLoader classloader, String suffixPath, String templateName)": {
                "lineStart": 632,
                "lineEnd": 636
            }
        }
    },
    "CVE-2021-27807": {
        "fa589396d-RandomAccessBuffer.java": {
            "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": {
                "lineStart": 148,
                "lineEnd": 164
            },
            "org.apache.pdfbox.io.RandomAccessBuffer.readRemainingBytes(byte[] b, int offset, int length)": {
                "lineStart": 166,
                "lineEnd": 191
            },
            "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": {
                "lineStart": 329,
                "lineEnd": 337
            }
        },
        "4957d9ca5-RandomAccessBufferedFileInputStream.java": {
            "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": {
                "lineStart": 208,
                "lineEnd": 216
            }
        },
        "c076798aa-ScratchFileBuffer.java": {
            "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int len)": {
                "lineStart": 194,
                "lineEnd": 207
            }
        },
        "7eb06441b-InputStreamSource.java": {
            "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": {
                "lineStart": 73,
                "lineEnd": 91
            }
        }
    },
    "CVE-2023-41887": {
        "c9b8976bd-DatabaseConfiguration.java": {
            "com.google.refine.extension.database.DatabaseConfiguration.getConnectionName()": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setConnectionName(String connectionName)": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseType()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseType(String databaseType)": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseHost()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost(String databaseServer)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabasePort()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabasePort(int databasePort)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseUser()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseUser(String databaseUser)": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabasePassword()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabasePassword(String databasePassword)": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseName()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseName(String initialDatabase)": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseSchema()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseSchema(String initialSchema)": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "com.google.refine.extension.database.DatabaseConfiguration.isUseSSL()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setUseSSL(boolean useSSL)": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "com.google.refine.extension.database.DatabaseConfiguration.toString()": {
                "lineStart": 84,
                "lineEnd": 86
            }
        },
        "422735d1c-MariaDBConnectionManager.java": {
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getInstance()": {
                "lineStart": 19,
                "lineEnd": 25
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getType()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.testConnection(DatabaseConfiguration databaseConfiguration)": {
                "lineStart": 31,
                "lineEnd": 47
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection)": {
                "lineStart": 49,
                "lineEnd": 81
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.shutdown()": {
                "lineStart": 83,
                "lineEnd": 94
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getDatabaseUrl(DatabaseConfiguration dbConfig)": {
                "lineStart": 96,
                "lineEnd": 99
            }
        },
        "f4a7ce5dd-MySQLConnectionManager.java": {
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getInstance()": {
                "lineStart": 19,
                "lineEnd": 26
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getType()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.testConnection(DatabaseConfiguration databaseConfiguration)": {
                "lineStart": 32,
                "lineEnd": 48
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection)": {
                "lineStart": 50,
                "lineEnd": 82
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.shutdown()": {
                "lineStart": 84,
                "lineEnd": 95
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getDatabaseUrl(DatabaseConfiguration dbConfig)": {
                "lineStart": 97,
                "lineEnd": 100
            }
        },
        "bea76d091-PgSQLConnectionManager.java": {
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getInstance()": {
                "lineStart": 19,
                "lineEnd": 29
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getType()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.testConnection(DatabaseConfiguration databaseConfiguration)": {
                "lineStart": 35,
                "lineEnd": 51
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection)": {
                "lineStart": 53,
                "lineEnd": 82
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.shutdown()": {
                "lineStart": 84,
                "lineEnd": 95
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getDatabaseUrl(DatabaseConfiguration dbConfig)": {
                "lineStart": 97,
                "lineEnd": 100
            }
        }
    },
    "CVE-2020-5428": {
        "0b8fde33-JdbcTaskExecutionDao.java": {
            "org.springframework.cloud.task.repository.dao.JdbcTaskExecutionDao.queryForPageableResults(Pageable pageable, String selectClause, String fromClause, String whereClause, MapSqlParameterSource queryParameters, long totalCount)": {
                "lineStart": 294,
                "lineEnd": 333
            }
        }
    },
    "CVE-2023-31469": {
        "6abed4191-UserResource.java": {
            "org.apache.streampipes.rest.impl.UserResource.updateAppearanceMode(@PathParam(\"darkMode\") boolean darkMode)": {
                "lineStart": 90,
                "lineEnd": 102
            },
            "org.apache.streampipes.rest.impl.UserResource.createNewApiToken(@PathParam(\"userId\") String userId, RawUserApiToken rawToken)": {
                "lineStart": 143,
                "lineEnd": 146
            },
            "org.apache.streampipes.rest.impl.UserResource.updateUserAccountDetails(@PathParam(\"principalId\") String principalId, UserAccount user)": {
                "lineStart": 148,
                "lineEnd": 161
            },
            "org.apache.streampipes.rest.impl.UserResource.updateUsername(@PathParam(\"principalId\") String principalId, UserAccount user)": {
                "lineStart": 163,
                "lineEnd": 192
            },
            "org.apache.streampipes.rest.impl.UserResource.updatePassword(@PathParam(\"principalId\") String principalId, ChangePasswordRequest passwordRequest)": {
                "lineStart": 194,
                "lineEnd": 220
            },
            "org.apache.streampipes.rest.impl.UserResource.updateServiceAccountDetails(@PathParam(\"principalId\") String principalId, ServiceAccount user)": {
                "lineStart": 222,
                "lineEnd": 243
            }
        }
    },
    "CVE-2023-33940": {
        "10742cf15924e-BaseCETImpl.java": {
            "com.liferay.client.extension.type.internal.BaseCETImpl._transform(String baseURL, UnicodeProperties unicodeProperties)": {
                "lineStart": 156,
                "lineEnd": 169
            }
        }
    },
    "CVE-2024-25148": {
        "8fc8a06bc37e6-SelectLayoutTag.java": {
            "com.liferay.layout.taglib.servlet.taglib.react.SelectLayoutTag._getLayoutsJSONArray(long groupId, boolean privateLayout, long parentLayoutId, String[] selectedLayoutUuid)": {
                "lineStart": 199,
                "lineEnd": 228
            }
        }
    },
    "CVE-2022-22965": {
        "7b7a67d91c-CachedIntrospectionResults.java": {
            "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": {
                "lineStart": 123,
                "lineEnd": 169
            },
            "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": {
                "lineStart": 171,
                "lineEnd": 193
            }
        }
    },
    "CVE-2024-22257": {
        "eec33f2d53-AuthenticatedVoter.java": {
            "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": {
                "lineStart": 14,
                "lineEnd": 16
            }
        }
    },
    "CVE-2020-2123": {
        "358e21d-YamlNodeConfigParser.java": {
            "org.jenkinsci.plugins.radargun.yaml.YamlNodeConfigParser.<init>()": {
                "lineStart": 34,
                "lineEnd": 36
            }
        }
    },
    "CVE-2022-45931": {
        "7dc4acd4-UserStore.java": {
            "org.opendaylight.aaa.datastore.h2.UserStore.deleteUser(final String userid)": {
                "lineStart": 183,
                "lineEnd": 202
            }
        }
    },
    "CVE-2022-4772": {
        "1053376-WidocoUtils.java": {
            "widoco.WidocoUtils.unZipIt(String resourceName, String outputFolder)": {
                "lineStart": 150,
                "lineEnd": 191
            }
        }
    },
    "CVE-2023-20866": {
        "c510559b-HeaderHttpSessionIdResolver.java": {
            "org.springframework.session.web.http.HeaderHttpSessionIdResolver.resolveSessionIds(HttpServletRequest request)": {
                "lineStart": 26,
                "lineEnd": 30
            }
        }
    },
    "CVE-2021-21479": {
        "58ca9bc-ValidationUtil.java": {
            "com.sap.scimono.entity.schema.validation.ValidationUtil.interpolateErrorMessage(ConstraintValidatorContext context, String errorMessage)": {
                "lineStart": 4,
                "lineEnd": 7
            }
        }
    },
    "CVE-2023-41886": {
        "c9b8976bd-DatabaseConfiguration.java": {
            "com.google.refine.extension.database.DatabaseConfiguration.getConnectionName()": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setConnectionName(String connectionName)": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseType()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseType(String databaseType)": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseHost()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost(String databaseServer)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabasePort()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabasePort(int databasePort)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseUser()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseUser(String databaseUser)": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabasePassword()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabasePassword(String databasePassword)": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseName()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseName(String initialDatabase)": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "com.google.refine.extension.database.DatabaseConfiguration.getDatabaseSchema()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseSchema(String initialSchema)": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "com.google.refine.extension.database.DatabaseConfiguration.isUseSSL()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "com.google.refine.extension.database.DatabaseConfiguration.setUseSSL(boolean useSSL)": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "com.google.refine.extension.database.DatabaseConfiguration.toString()": {
                "lineStart": 84,
                "lineEnd": 86
            }
        },
        "422735d1c-MariaDBConnectionManager.java": {
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getInstance()": {
                "lineStart": 19,
                "lineEnd": 25
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getType()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.testConnection(DatabaseConfiguration databaseConfiguration)": {
                "lineStart": 31,
                "lineEnd": 47
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection)": {
                "lineStart": 49,
                "lineEnd": 81
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.shutdown()": {
                "lineStart": 83,
                "lineEnd": 94
            },
            "com.google.refine.extension.database.mariadb.MariaDBConnectionManager.getDatabaseUrl(DatabaseConfiguration dbConfig)": {
                "lineStart": 96,
                "lineEnd": 99
            }
        },
        "f4a7ce5dd-MySQLConnectionManager.java": {
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getInstance()": {
                "lineStart": 19,
                "lineEnd": 26
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getType()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.testConnection(DatabaseConfiguration databaseConfiguration)": {
                "lineStart": 32,
                "lineEnd": 48
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection)": {
                "lineStart": 50,
                "lineEnd": 82
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.shutdown()": {
                "lineStart": 84,
                "lineEnd": 95
            },
            "com.google.refine.extension.database.mysql.MySQLConnectionManager.getDatabaseUrl(DatabaseConfiguration dbConfig)": {
                "lineStart": 97,
                "lineEnd": 100
            }
        },
        "bea76d091-PgSQLConnectionManager.java": {
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getInstance()": {
                "lineStart": 19,
                "lineEnd": 29
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getType()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.testConnection(DatabaseConfiguration databaseConfiguration)": {
                "lineStart": 35,
                "lineEnd": 51
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getConnection(DatabaseConfiguration databaseConfiguration, boolean forceNewConnection)": {
                "lineStart": 53,
                "lineEnd": 82
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.shutdown()": {
                "lineStart": 84,
                "lineEnd": 95
            },
            "com.google.refine.extension.database.pgsql.PgSQLConnectionManager.getDatabaseUrl(DatabaseConfiguration dbConfig)": {
                "lineStart": 97,
                "lineEnd": 100
            }
        }
    },
    "CVE-2020-2202": {
        "392da08-FodGlobalDescriptor.java": {
            "org.jenkinsci.plugins.fodupload.FodGlobalDescriptor.doFillClientIdItems()": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "org.jenkinsci.plugins.fodupload.FodGlobalDescriptor.doFillClientSecretItems()": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "org.jenkinsci.plugins.fodupload.FodGlobalDescriptor.doFillUsernameItems()": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "org.jenkinsci.plugins.fodupload.FodGlobalDescriptor.doFillPersonalAccessTokenItems()": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "org.jenkinsci.plugins.fodupload.FodGlobalDescriptor.doFillTenantIdItems()": {
                "lineStart": 182,
                "lineEnd": 184
            }
        },
        "76212e8-PollingBuildStep.java": {
            "org.jenkinsci.plugins.fodupload.PollingBuildStep$PollingStepDescriptor.doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username, @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken, @QueryParameter(TENANT_ID) final String tenantId)": {
                "lineStart": 113,
                "lineEnd": 117
            },
            "org.jenkinsci.plugins.fodupload.PollingBuildStep$PollingStepDescriptor.doFillUsernameItems()": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "org.jenkinsci.plugins.fodupload.PollingBuildStep$PollingStepDescriptor.doFillPersonalAccessTokenItems()": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "org.jenkinsci.plugins.fodupload.PollingBuildStep$PollingStepDescriptor.doFillTenantIdItems()": {
                "lineStart": 131,
                "lineEnd": 133
            }
        },
        "792c282-SharedPollingBuildStep.java": {
            "org.jenkinsci.plugins.fodupload.SharedPollingBuildStep.doTestPersonalAccessTokenConnection(final String username, final String personalAccessToken, final String tenantId)": {
                "lineStart": 110,
                "lineEnd": 133
            },
            "org.jenkinsci.plugins.fodupload.SharedPollingBuildStep.doFillStringCredentialsItems()": {
                "lineStart": 144,
                "lineEnd": 147
            }
        },
        "16a1ce6-SharedUploadBuildStep.java": {
            "org.jenkinsci.plugins.fodupload.SharedUploadBuildStep.doTestPersonalAccessTokenConnection(final String username, final String personalAccessToken, final String tenantId)": {
                "lineStart": 91,
                "lineEnd": 114
            },
            "org.jenkinsci.plugins.fodupload.SharedUploadBuildStep.doFillStringCredentialsItems()": {
                "lineStart": 134,
                "lineEnd": 137
            }
        },
        "d5e66e7-StaticAssessmentBuildStep.java": {
            "org.jenkinsci.plugins.fodupload.StaticAssessmentBuildStep$StaticAssessmentStepDescriptor.doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username, @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken, @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId)": {
                "lineStart": 122,
                "lineEnd": 126
            },
            "org.jenkinsci.plugins.fodupload.StaticAssessmentBuildStep$StaticAssessmentStepDescriptor.doFillUsernameItems()": {
                "lineStart": 136,
                "lineEnd": 138
            },
            "org.jenkinsci.plugins.fodupload.StaticAssessmentBuildStep$StaticAssessmentStepDescriptor.doFillPersonalAccessTokenItems()": {
                "lineStart": 140,
                "lineEnd": 142
            },
            "org.jenkinsci.plugins.fodupload.StaticAssessmentBuildStep$StaticAssessmentStepDescriptor.doFillTenantIdItems()": {
                "lineStart": 144,
                "lineEnd": 146
            }
        },
        "41c8a20-FortifyPollResults.java": {
            "org.jenkinsci.plugins.fodupload.steps.FortifyPollResults$DescriptorImpl.doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username, @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken, @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId)": {
                "lineStart": 142,
                "lineEnd": 146
            },
            "org.jenkinsci.plugins.fodupload.steps.FortifyPollResults$DescriptorImpl.doFillUsernameItems()": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "org.jenkinsci.plugins.fodupload.steps.FortifyPollResults$DescriptorImpl.doFillPersonalAccessTokenItems()": {
                "lineStart": 156,
                "lineEnd": 158
            },
            "org.jenkinsci.plugins.fodupload.steps.FortifyPollResults$DescriptorImpl.doFillTenantIdItems()": {
                "lineStart": 160,
                "lineEnd": 162
            }
        },
        "cdce791-FortifyStaticAssessment.java": {
            "org.jenkinsci.plugins.fodupload.steps.FortifyStaticAssessment$DescriptorImpl.doTestPersonalAccessTokenConnection(@QueryParameter(SharedUploadBuildStep.USERNAME) final String username, @QueryParameter(SharedUploadBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken, @QueryParameter(SharedUploadBuildStep.TENANT_ID) final String tenantId)": {
                "lineStart": 154,
                "lineEnd": 158
            },
            "org.jenkinsci.plugins.fodupload.steps.FortifyStaticAssessment$DescriptorImpl.doFillUsernameItems()": {
                "lineStart": 168,
                "lineEnd": 170
            },
            "org.jenkinsci.plugins.fodupload.steps.FortifyStaticAssessment$DescriptorImpl.doFillPersonalAccessTokenItems()": {
                "lineStart": 172,
                "lineEnd": 174
            },
            "org.jenkinsci.plugins.fodupload.steps.FortifyStaticAssessment$DescriptorImpl.doFillTenantIdItems()": {
                "lineStart": 176,
                "lineEnd": 178
            }
        }
    },
    "CVE-2020-11979": {
        "5cf2fa8fa-MagicNames.java": {
            "org.apache.tools.ant.MagicNames.<init>()": {
                "lineStart": 4,
                "lineEnd": 5
            }
        },
        "46671848c-FileUtils.java": {
            "org.apache.tools.ant.util.FileUtils.createTempFile(final Project project, String prefix, String suffix, final File parentDir, final boolean deleteOnExit, final boolean createFile)": {
                "lineStart": 357,
                "lineEnd": 405
            }
        }
    },
    "CVE-2020-10727": {
        "d55952693b-ActiveMQServerControl.java": {
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getVersion()": {
                "lineStart": 9,
                "lineEnd": 10
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getConnectionCount()": {
                "lineStart": 11,
                "lineEnd": 12
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTotalConnectionCount()": {
                "lineStart": 13,
                "lineEnd": 14
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTotalMessageCount()": {
                "lineStart": 15,
                "lineEnd": 16
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTotalMessagesAdded()": {
                "lineStart": 17,
                "lineEnd": 18
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTotalMessagesAcknowledged()": {
                "lineStart": 19,
                "lineEnd": 20
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTotalConsumerCount()": {
                "lineStart": 21,
                "lineEnd": 22
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isStarted()": {
                "lineStart": 23,
                "lineEnd": 24
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getIncomingInterceptorClassNames()": {
                "lineStart": 25,
                "lineEnd": 26
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getOutgoingInterceptorClassNames()": {
                "lineStart": 27,
                "lineEnd": 28
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isClustered()": {
                "lineStart": 29,
                "lineEnd": 30
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getScheduledThreadPoolMaxSize()": {
                "lineStart": 31,
                "lineEnd": 32
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getThreadPoolMaxSize()": {
                "lineStart": 33,
                "lineEnd": 34
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getSecurityInvalidationInterval()": {
                "lineStart": 35,
                "lineEnd": 36
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isSecurityEnabled()": {
                "lineStart": 37,
                "lineEnd": 38
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getBindingsDirectory()": {
                "lineStart": 39,
                "lineEnd": 40
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalDirectory()": {
                "lineStart": 41,
                "lineEnd": 42
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalType()": {
                "lineStart": 43,
                "lineEnd": 44
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isJournalSyncTransactional()": {
                "lineStart": 45,
                "lineEnd": 46
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isJournalSyncNonTransactional()": {
                "lineStart": 47,
                "lineEnd": 48
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalFileSize()": {
                "lineStart": 49,
                "lineEnd": 50
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalMinFiles()": {
                "lineStart": 51,
                "lineEnd": 52
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalMaxIO()": {
                "lineStart": 53,
                "lineEnd": 54
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalBufferSize()": {
                "lineStart": 55,
                "lineEnd": 56
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalBufferTimeout()": {
                "lineStart": 57,
                "lineEnd": 58
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.setFailoverOnServerShutdown(boolean failoverOnServerShutdown)": {
                "lineStart": 59,
                "lineEnd": 60
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isFailoverOnServerShutdown()": {
                "lineStart": 61,
                "lineEnd": 62
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalCompactMinFiles()": {
                "lineStart": 63,
                "lineEnd": 64
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getJournalCompactPercentage()": {
                "lineStart": 65,
                "lineEnd": 66
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isPersistenceEnabled()": {
                "lineStart": 67,
                "lineEnd": 68
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isCreateBindingsDir()": {
                "lineStart": 69,
                "lineEnd": 70
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isCreateJournalDir()": {
                "lineStart": 71,
                "lineEnd": 72
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isMessageCounterEnabled()": {
                "lineStart": 73,
                "lineEnd": 74
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getMessageCounterMaxDayCount()": {
                "lineStart": 75,
                "lineEnd": 76
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.setMessageCounterMaxDayCount(int count)": {
                "lineStart": 77,
                "lineEnd": 78
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getMessageCounterSamplePeriod()": {
                "lineStart": 79,
                "lineEnd": 80
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.setMessageCounterSamplePeriod(long newPeriod)": {
                "lineStart": 81,
                "lineEnd": 82
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isBackup()": {
                "lineStart": 83,
                "lineEnd": 84
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isSharedStore()": {
                "lineStart": 85,
                "lineEnd": 86
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getPagingDirectory()": {
                "lineStart": 87,
                "lineEnd": 88
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isPersistDeliveryCountBeforeDelivery()": {
                "lineStart": 89,
                "lineEnd": 90
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getConnectionTTLOverride()": {
                "lineStart": 91,
                "lineEnd": 92
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getManagementAddress()": {
                "lineStart": 93,
                "lineEnd": 94
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getNodeID()": {
                "lineStart": 95,
                "lineEnd": 96
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getManagementNotificationAddress()": {
                "lineStart": 97,
                "lineEnd": 98
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getIDCacheSize()": {
                "lineStart": 99,
                "lineEnd": 100
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isPersistIDCache()": {
                "lineStart": 101,
                "lineEnd": 102
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getLargeMessagesDirectory()": {
                "lineStart": 103,
                "lineEnd": 104
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isWildcardRoutingEnabled()": {
                "lineStart": 105,
                "lineEnd": 106
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTransactionTimeout()": {
                "lineStart": 107,
                "lineEnd": 108
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getTransactionTimeoutScanPeriod()": {
                "lineStart": 109,
                "lineEnd": 110
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getMessageExpiryScanPeriod()": {
                "lineStart": 111,
                "lineEnd": 112
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getMessageExpiryThreadPriority()": {
                "lineStart": 113,
                "lineEnd": 114
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isAsyncConnectionExecutionEnabled()": {
                "lineStart": 115,
                "lineEnd": 116
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getConnectors()": {
                "lineStart": 117,
                "lineEnd": 118
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getConnectorsAsJSON()": {
                "lineStart": 119,
                "lineEnd": 120
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getAddressNames()": {
                "lineStart": 121,
                "lineEnd": 122
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getQueueNames()": {
                "lineStart": 123,
                "lineEnd": 124
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getUptime()": {
                "lineStart": 125,
                "lineEnd": 126
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getUptimeMillis()": {
                "lineStart": 127,
                "lineEnd": 128
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.isReplicaSync()": {
                "lineStart": 129,
                "lineEnd": 130
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getDiskScanPeriod()": {
                "lineStart": 131,
                "lineEnd": 132
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getMaxDiskUsage()": {
                "lineStart": 133,
                "lineEnd": 134
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getGlobalMaxSize()": {
                "lineStart": 135,
                "lineEnd": 136
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getAddressMemoryUsage()": {
                "lineStart": 137,
                "lineEnd": 138
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getAddressMemoryUsagePercentage()": {
                "lineStart": 139,
                "lineEnd": 140
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.freezeReplication()": {
                "lineStart": 141,
                "lineEnd": 142
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createAddress(@Parameter(name = \"name\", desc = \"The name of the address\") String name, @Parameter(name = \"routingTypes\", desc = \"Comma separated list of Routing Types (anycast/multicast)\") String routingTypes)": {
                "lineStart": 143,
                "lineEnd": 144
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateAddress(@Parameter(name = \"name\", desc = \"The name of the address\") String name, @Parameter(name = \"routingTypes\", desc = \"Comma separated list of Routing Types (anycast/multicast)\") String routingTypes)": {
                "lineStart": 145,
                "lineEnd": 146
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.deleteAddress(@Parameter(name = \"name\", desc = \"The name of the address\") String name)": {
                "lineStart": 147,
                "lineEnd": 148
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.deleteAddress(@Parameter(name = \"name\", desc = \"The name of the address\") String name, @Parameter(name = \"force\", desc = \"Force consumers and queues out\") boolean force)": {
                "lineStart": 149,
                "lineEnd": 150
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name)": {
                "lineStart": 151,
                "lineEnd": 152
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType)": {
                "lineStart": 153,
                "lineEnd": 154
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable)": {
                "lineStart": 155,
                "lineEnd": 156
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType)": {
                "lineStart": 157,
                "lineEnd": 158
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filter, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable)": {
                "lineStart": 159,
                "lineEnd": 160
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filter, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType)": {
                "lineStart": 161,
                "lineEnd": 162
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filterStr, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") int maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") int groupBuckets, @Parameter(name = \"lastValue\", desc = \"Use last-value semantics\") boolean lastValue, @Parameter(name = \"lastValueKey\", desc = \"Use the specified property key for the last value\") String lastValueKey, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") int consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") long delayBeforeDispatch, @Parameter(name = \"autoCreateAddress\", desc = \"Create an address with default values should a matching address not be found\") boolean autoCreateAddress)": {
                "lineStart": 163,
                "lineEnd": 164
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filterStr, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") int maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") int groupBuckets, @Parameter(name = \"lastValue\", desc = \"Use last-value semantics\") boolean lastValue, @Parameter(name = \"lastValueKey\", desc = \"Use the specified property key for the last value\") String lastValueKey, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") int consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") long delayBeforeDispatch, @Parameter(name = \"autoDelete\", desc = \"If the queue should be deleted once no consumers\") boolean autoDelete, @Parameter(name = \"autoDeleteDelay\", desc = \"How long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers\") long autoDeleteDelay, @Parameter(name = \"autoDeleteMessageCount\", desc = \"The message count the queue must be at or below before it can be evaluated to be auto deleted, 0 waits until empty queue (default) and -1 disables this check\") long autoDeleteMessageCount, @Parameter(name = \"autoCreateAddress\", desc = \"Create an address with default values should a matching address not be found\") boolean autoCreateAddress)": {
                "lineStart": 165,
                "lineEnd": 166
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filterStr, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") int maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") int groupBuckets, @Parameter(name = \"groupFirstKey\", desc = \"Key used to mark a message is first in a group for a consumer\") String groupFirstKey, @Parameter(name = \"lastValue\", desc = \"Use last-value semantics\") boolean lastValue, @Parameter(name = \"lastValueKey\", desc = \"Use the specified property key for the last value\") String lastValueKey, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") int consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") long delayBeforeDispatch, @Parameter(name = \"autoDelete\", desc = \"If the queue should be deleted once no consumers\") boolean autoDelete, @Parameter(name = \"autoDeleteDelay\", desc = \"How long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers\") long autoDeleteDelay, @Parameter(name = \"autoDeleteMessageCount\", desc = \"The message count the queue must be at or below before it can be evaluated to be auto deleted, 0 waits until empty queue (default) and -1 disables this check\") long autoDeleteMessageCount, @Parameter(name = \"autoCreateAddress\", desc = \"Create an address with default values should a matching address not be found\") boolean autoCreateAddress)": {
                "lineStart": 167,
                "lineEnd": 168
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filterStr, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") int maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") int groupBuckets, @Parameter(name = \"groupFirstKey\", desc = \"Key used to mark a message is first in a group for a consumer\") String groupFirstKey, @Parameter(name = \"lastValue\", desc = \"Use last-value semantics\") boolean lastValue, @Parameter(name = \"lastValueKey\", desc = \"Use the specified property key for the last value\") String lastValueKey, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") int consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") long delayBeforeDispatch, @Parameter(name = \"autoDelete\", desc = \"If the queue should be deleted once no consumers\") boolean autoDelete, @Parameter(name = \"autoDeleteDelay\", desc = \"How long to wait (in milliseconds) before deleting auto-created queues after the queue has 0 consumers\") long autoDeleteDelay, @Parameter(name = \"autoDeleteMessageCount\", desc = \"The message count the queue must be at or below before it can be evaluated to be auto deleted, 0 waits until empty queue (default) and -1 disables this check\") long autoDeleteMessageCount, @Parameter(name = \"autoCreateAddress\", desc = \"Create an address with default values should a matching address not be found\") boolean autoCreateAddress, @Parameter(name = \"ringSize\", desc = \"The size this queue should maintain according to ring semantics\") long ringSize)": {
                "lineStart": 169,
                "lineEnd": 170
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filterStr, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") int maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") boolean purgeOnNoConsumers, @Parameter(name = \"autoCreateAddress\", desc = \"Create an address with default values should a matching address not be found\") boolean autoCreateAddress)": {
                "lineStart": 171,
                "lineEnd": 172
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateQueue(@Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") Integer maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") Boolean purgeOnNoConsumers)": {
                "lineStart": 173,
                "lineEnd": 174
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateQueue(@Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") Integer maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") Boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") Boolean exclusive)": {
                "lineStart": 175,
                "lineEnd": 176
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateQueue(@Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") Integer maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") Boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") Boolean exclusive, @Parameter(name = \"user\", desc = \"The user associated with this queue\") String user)": {
                "lineStart": 177,
                "lineEnd": 178
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateQueue(@Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"filter\", desc = \"The filter to use on the queue\") String filter, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") Integer maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") Boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") Boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") Boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") Integer groupBuckets, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") Boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") Integer consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") Long delayBeforeDispatch, @Parameter(name = \"user\", desc = \"The user associated with this queue\") String user)": {
                "lineStart": 179,
                "lineEnd": 180
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateQueue(@Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"filter\", desc = \"The filter to use on the queue\") String filter, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") Integer maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") Boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") Boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") Boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") Integer groupBuckets, @Parameter(name = \"groupFirstKey\", desc = \"Key used to mark a message is first in a group for a consumer\") String groupFirstKey, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") Boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") Integer consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") Long delayBeforeDispatch, @Parameter(name = \"user\", desc = \"The user associated with this queue\") String user)": {
                "lineStart": 181,
                "lineEnd": 182
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.updateQueue(@Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"routingType\", desc = \"The routing type used for this address, MULTICAST or ANYCAST\") String routingType, @Parameter(name = \"filter\", desc = \"The filter to use on the queue\") String filter, @Parameter(name = \"maxConsumers\", desc = \"The maximum number of consumers allowed on this queue at any one time\") Integer maxConsumers, @Parameter(name = \"purgeOnNoConsumers\", desc = \"Delete this queue when the last consumer disconnects\") Boolean purgeOnNoConsumers, @Parameter(name = \"exclusive\", desc = \"If the queue should route exclusively to one consumer\") Boolean exclusive, @Parameter(name = \"groupRebalance\", desc = \"If the queue should rebalance groups when a consumer is added\") Boolean groupRebalance, @Parameter(name = \"groupBuckets\", desc = \"Number of buckets that should be used for message groups, -1 (default) is unlimited, and groups by raw key instead\") Integer groupBuckets, @Parameter(name = \"groupFirstKey\", desc = \"Key used to mark a message is first in a group for a consumer\") String groupFirstKey, @Parameter(name = \"nonDestructive\", desc = \"If the queue is non-destructive\") Boolean nonDestructive, @Parameter(name = \"consumersBeforeDispatch\", desc = \"Number of consumers needed before dispatch can start\") Integer consumersBeforeDispatch, @Parameter(name = \"delayBeforeDispatch\", desc = \"Delay to wait before dispatching if number of consumers before dispatch is not met\") Long delayBeforeDispatch, @Parameter(name = \"user\", desc = \"The user associated with this queue\") String user, @Parameter(name = \"ringSize\", desc = \"the size this queue should maintain according to ring semantics\") Long ringSize)": {
                "lineStart": 183,
                "lineEnd": 184
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.deployQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filter)": {
                "lineStart": 185,
                "lineEnd": 186
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.deployQueue(@Parameter(name = \"address\", desc = \"Address of the queue\") String address, @Parameter(name = \"name\", desc = \"Name of the queue\") String name, @Parameter(name = \"filter\", desc = \"Filter of the queue\") String filter, @Parameter(name = \"durable\", desc = \"Is the queue durable?\") boolean durable)": {
                "lineStart": 187,
                "lineEnd": 188
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.destroyQueue(@Parameter(name = \"name\", desc = \"Name of the queue to destroy\") String name)": {
                "lineStart": 189,
                "lineEnd": 190
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.destroyQueue(@Parameter(name = \"name\", desc = \"Name of the queue to destroy\") String name, @Parameter(name = \"removeConsumers\", desc = \"Remove consumers of this queue\") boolean removeConsumers)": {
                "lineStart": 191,
                "lineEnd": 192
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.destroyQueue(@Parameter(name = \"name\", desc = \"Name of the queue to destroy\") String name, @Parameter(name = \"removeConsumers\", desc = \"Remove consumers of this queue\") boolean removeConsumers, @Parameter(name = \"autoDeleteAddress\", desc = \"Automatically delete the address if this was the last queue\") boolean autoDeleteAddress)": {
                "lineStart": 193,
                "lineEnd": 194
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.enableMessageCounters()": {
                "lineStart": 195,
                "lineEnd": 196
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.disableMessageCounters()": {
                "lineStart": 197,
                "lineEnd": 198
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.resetAllMessageCounters()": {
                "lineStart": 199,
                "lineEnd": 200
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.resetAllMessageCounterHistories()": {
                "lineStart": 201,
                "lineEnd": 202
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listPreparedTransactions()": {
                "lineStart": 203,
                "lineEnd": 204
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listPreparedTransactionDetailsAsJSON()": {
                "lineStart": 205,
                "lineEnd": 206
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listPreparedTransactionDetailsAsHTML()": {
                "lineStart": 207,
                "lineEnd": 208
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listHeuristicCommittedTransactions()": {
                "lineStart": 209,
                "lineEnd": 210
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listHeuristicRolledBackTransactions()": {
                "lineStart": 211,
                "lineEnd": 212
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.commitPreparedTransaction(@Parameter(desc = \"the Base64 representation of a transaction\", name = \"transactionAsBase64\") String transactionAsBase64)": {
                "lineStart": 213,
                "lineEnd": 214
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.rollbackPreparedTransaction(@Parameter(desc = \"the Base64 representation of a transaction\", name = \"transactionAsBase64\") String transactionAsBase64)": {
                "lineStart": 215,
                "lineEnd": 216
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listRemoteAddresses()": {
                "lineStart": 217,
                "lineEnd": 218
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listRemoteAddresses(@Parameter(desc = \"an IP address\", name = \"ipAddress\") String ipAddress)": {
                "lineStart": 219,
                "lineEnd": 220
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.closeConnectionsForAddress(@Parameter(desc = \"an IP address\", name = \"ipAddress\") String ipAddress)": {
                "lineStart": 221,
                "lineEnd": 222
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.closeConsumerConnectionsForAddress(@Parameter(desc = \"a messaging address\", name = \"address\") String address)": {
                "lineStart": 223,
                "lineEnd": 224
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.closeConnectionsForUser(@Parameter(desc = \"a user name\", name = \"userName\") String address)": {
                "lineStart": 225,
                "lineEnd": 226
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.closeConnectionWithID(@Parameter(desc = \"The connection ID\", name = \"ID\") String ID)": {
                "lineStart": 227,
                "lineEnd": 228
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.closeSessionWithID(@Parameter(desc = \"The connection ID\", name = \"connectionID\") String connectionID, @Parameter(desc = \"The session ID\", name = \"ID\") String ID)": {
                "lineStart": 229,
                "lineEnd": 230
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.closeConsumerWithID(@Parameter(desc = \"The session ID\", name = \"sessionID\") String sessionID, @Parameter(desc = \"The consumer ID\", name = \"ID\") String ID)": {
                "lineStart": 231,
                "lineEnd": 232
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listConnectionIDs()": {
                "lineStart": 233,
                "lineEnd": 234
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listProducersInfoAsJSON()": {
                "lineStart": 235,
                "lineEnd": 236
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listConnectionsAsJSON()": {
                "lineStart": 237,
                "lineEnd": 238
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listConsumersAsJSON(@Parameter(desc = \"a connection ID\", name = \"connectionID\") String connectionID)": {
                "lineStart": 239,
                "lineEnd": 240
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listAllConsumersAsJSON()": {
                "lineStart": 241,
                "lineEnd": 242
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listSessionsAsJSON(@Parameter(desc = \"a connection ID\", name = \"connectionID\") String connectionID)": {
                "lineStart": 243,
                "lineEnd": 244
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listAllSessionsAsJSON()": {
                "lineStart": 245,
                "lineEnd": 246
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listSessions(@Parameter(desc = \"a connection ID\", name = \"connectionID\") String connectionID)": {
                "lineStart": 247,
                "lineEnd": 248
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addSecuritySettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"a comma-separated list of roles allowed to send messages\", name = \"send\") String sendRoles, @Parameter(desc = \"a comma-separated list of roles allowed to consume messages\", name = \"consume\") String consumeRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create durable queues\", name = \"createDurableQueueRoles\") String createDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete durable queues\", name = \"deleteDurableQueueRoles\") String deleteDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create non durable queues\", name = \"createNonDurableQueueRoles\") String createNonDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete non durable queues\", name = \"deleteNonDurableQueueRoles\") String deleteNonDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to send management messages messages\", name = \"manage\") String manageRoles)": {
                "lineStart": 249,
                "lineEnd": 250
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addSecuritySettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"a comma-separated list of roles allowed to send messages\", name = \"send\") String sendRoles, @Parameter(desc = \"a comma-separated list of roles allowed to consume messages\", name = \"consume\") String consumeRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create durable queues\", name = \"createDurableQueueRoles\") String createDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete durable queues\", name = \"deleteDurableQueueRoles\") String deleteDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create non durable queues\", name = \"createNonDurableQueueRoles\") String createNonDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete non durable queues\", name = \"deleteNonDurableQueueRoles\") String deleteNonDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to send management messages messages\", name = \"manage\") String manageRoles, @Parameter(desc = \"a comma-separated list of roles allowed to browse queues\", name = \"browse\") String browseRoles)": {
                "lineStart": 251,
                "lineEnd": 252
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addSecuritySettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"a comma-separated list of roles allowed to send messages\", name = \"send\") String sendRoles, @Parameter(desc = \"a comma-separated list of roles allowed to consume messages\", name = \"consume\") String consumeRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create durable queues\", name = \"createDurableQueueRoles\") String createDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete durable queues\", name = \"deleteDurableQueueRoles\") String deleteDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create non durable queues\", name = \"createNonDurableQueueRoles\") String createNonDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete non durable queues\", name = \"deleteNonDurableQueueRoles\") String deleteNonDurableQueueRoles, @Parameter(desc = \"a comma-separated list of roles allowed to send management messages messages\", name = \"manage\") String manageRoles, @Parameter(desc = \"a comma-separated list of roles allowed to browse queues\", name = \"browse\") String browseRoles, @Parameter(desc = \"a comma-separated list of roles allowed to create addresses\", name = \"createAddressRoles\") String createAddressRoles, @Parameter(desc = \"a comma-separated list of roles allowed to delete addresses\", name = \"deleteAddressRoles\") String deleteAddressRoles)": {
                "lineStart": 253,
                "lineEnd": 254
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.removeSecuritySettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch)": {
                "lineStart": 255,
                "lineEnd": 256
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getRoles(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch)": {
                "lineStart": 257,
                "lineEnd": 258
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getRolesAsJSON(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch)": {
                "lineStart": 259,
                "lineEnd": 260
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addAddressSettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"the dead letter address setting\", name = \"DLA\") String DLA, @Parameter(desc = \"the expiry address setting\", name = \"expiryAddress\") String expiryAddress, @Parameter(desc = \"the expiry delay setting\", name = \"expiryDelay\") long expiryDelay, @Parameter(desc = \"are any queues created for this address a last value queue\", name = \"lastValueQueue\") boolean lastValueQueue, @Parameter(desc = \"the delivery attempts\", name = \"deliveryAttempts\") int deliveryAttempts, @Parameter(desc = \"the max size in bytes\", name = \"maxSizeBytes\") long maxSizeBytes, @Parameter(desc = \"the page size in bytes\", name = \"pageSizeBytes\") int pageSizeBytes, @Parameter(desc = \"the max number of pages in the soft memory cache\", name = \"pageMaxCacheSize\") int pageMaxCacheSize, @Parameter(desc = \"the redelivery delay\", name = \"redeliveryDelay\") long redeliveryDelay, @Parameter(desc = \"the redelivery delay multiplier\", name = \"redeliveryMultiplier\") double redeliveryMultiplier, @Parameter(desc = \"the maximum redelivery delay\", name = \"maxRedeliveryDelay\") long maxRedeliveryDelay, @Parameter(desc = \"the redistribution delay\", name = \"redistributionDelay\") long redistributionDelay, @Parameter(desc = \"do we send to the DLA when there is no where to route the message\", name = \"sendToDLAOnNoRoute\") boolean sendToDLAOnNoRoute, @Parameter(desc = \"the policy to use when the address is full\", name = \"addressFullMessagePolicy\") String addressFullMessagePolicy, @Parameter(desc = \"when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'\", name = \"slowConsumerThreshold\") long slowConsumerThreshold, @Parameter(desc = \"how often (in seconds) to check for slow consumers\", name = \"slowConsumerCheckPeriod\") long slowConsumerCheckPeriod, @Parameter(desc = \"the policy to use when a slow consumer is detected\", name = \"slowConsumerPolicy\") String slowConsumerPolicy, @Parameter(desc = \"allow queues to be created automatically\", name = \"autoCreateJmsQueues\") boolean autoCreateJmsQueues, @Parameter(desc = \"allow auto-created queues to be deleted automatically\", name = \"autoDeleteJmsQueues\") boolean autoDeleteJmsQueues, @Parameter(desc = \"allow topics to be created automatically\", name = \"autoCreateJmsTopics\") boolean autoCreateJmsTopics, @Parameter(desc = \"allow auto-created topics to be deleted automatically\", name = \"autoDeleteJmsTopics\") boolean autoDeleteJmsTopics)": {
                "lineStart": 261,
                "lineEnd": 262
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addAddressSettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"the dead letter address setting\", name = \"DLA\") String DLA, @Parameter(desc = \"the expiry address setting\", name = \"expiryAddress\") String expiryAddress, @Parameter(desc = \"the expiry delay setting\", name = \"expiryDelay\") long expiryDelay, @Parameter(desc = \"are any queues created for this address a last value queue\", name = \"lastValueQueue\") boolean lastValueQueue, @Parameter(desc = \"the delivery attempts\", name = \"deliveryAttempts\") int deliveryAttempts, @Parameter(desc = \"the max size in bytes\", name = \"maxSizeBytes\") long maxSizeBytes, @Parameter(desc = \"the page size in bytes\", name = \"pageSizeBytes\") int pageSizeBytes, @Parameter(desc = \"the max number of pages in the soft memory cache\", name = \"pageMaxCacheSize\") int pageMaxCacheSize, @Parameter(desc = \"the redelivery delay\", name = \"redeliveryDelay\") long redeliveryDelay, @Parameter(desc = \"the redelivery delay multiplier\", name = \"redeliveryMultiplier\") double redeliveryMultiplier, @Parameter(desc = \"the maximum redelivery delay\", name = \"maxRedeliveryDelay\") long maxRedeliveryDelay, @Parameter(desc = \"the redistribution delay\", name = \"redistributionDelay\") long redistributionDelay, @Parameter(desc = \"do we send to the DLA when there is no where to route the message\", name = \"sendToDLAOnNoRoute\") boolean sendToDLAOnNoRoute, @Parameter(desc = \"the policy to use when the address is full\", name = \"addressFullMessagePolicy\") String addressFullMessagePolicy, @Parameter(desc = \"when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'\", name = \"slowConsumerThreshold\") long slowConsumerThreshold, @Parameter(desc = \"how often (in seconds) to check for slow consumers\", name = \"slowConsumerCheckPeriod\") long slowConsumerCheckPeriod, @Parameter(desc = \"the policy to use when a slow consumer is detected\", name = \"slowConsumerPolicy\") String slowConsumerPolicy, @Parameter(desc = \"allow jms queues to be created automatically\", name = \"autoCreateJmsQueues\") boolean autoCreateJmsQueues, @Parameter(desc = \"allow auto-created jms queues to be deleted automatically\", name = \"autoDeleteJmsQueues\") boolean autoDeleteJmsQueues, @Parameter(desc = \"allow jms topics to be created automatically\", name = \"autoCreateJmsTopics\") boolean autoCreateJmsTopics, @Parameter(desc = \"allow auto-created jms topics to be deleted automatically\", name = \"autoDeleteJmsTopics\") boolean autoDeleteJmsTopics, @Parameter(desc = \"allow queues to be created automatically\", name = \"autoCreateQueues\") boolean autoCreateQueues, @Parameter(desc = \"allow auto-created queues to be deleted automatically\", name = \"autoDeleteQueues\") boolean autoDeleteQueues, @Parameter(desc = \"allow addresses to be created automatically\", name = \"autoCreateAddresses\") boolean autoCreateAddresses, @Parameter(desc = \"allow auto-created addresses to be deleted automatically\", name = \"autoDeleteAddresses\") boolean autoDeleteAddresses)": {
                "lineStart": 263,
                "lineEnd": 264
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addAddressSettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"the dead letter address setting\", name = \"DLA\") String DLA, @Parameter(desc = \"the expiry address setting\", name = \"expiryAddress\") String expiryAddress, @Parameter(desc = \"the expiry delay setting\", name = \"expiryDelay\") long expiryDelay, @Parameter(desc = \"are any queues created for this address a last value queue\", name = \"lastValueQueue\") boolean lastValueQueue, @Parameter(desc = \"the delivery attempts\", name = \"deliveryAttempts\") int deliveryAttempts, @Parameter(desc = \"the max size in bytes\", name = \"maxSizeBytes\") long maxSizeBytes, @Parameter(desc = \"the page size in bytes\", name = \"pageSizeBytes\") int pageSizeBytes, @Parameter(desc = \"the max number of pages in the soft memory cache\", name = \"pageMaxCacheSize\") int pageMaxCacheSize, @Parameter(desc = \"the redelivery delay\", name = \"redeliveryDelay\") long redeliveryDelay, @Parameter(desc = \"the redelivery delay multiplier\", name = \"redeliveryMultiplier\") double redeliveryMultiplier, @Parameter(desc = \"the maximum redelivery delay\", name = \"maxRedeliveryDelay\") long maxRedeliveryDelay, @Parameter(desc = \"the redistribution delay\", name = \"redistributionDelay\") long redistributionDelay, @Parameter(desc = \"do we send to the DLA when there is no where to route the message\", name = \"sendToDLAOnNoRoute\") boolean sendToDLAOnNoRoute, @Parameter(desc = \"the policy to use when the address is full\", name = \"addressFullMessagePolicy\") String addressFullMessagePolicy, @Parameter(desc = \"when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'\", name = \"slowConsumerThreshold\") long slowConsumerThreshold, @Parameter(desc = \"how often (in seconds) to check for slow consumers\", name = \"slowConsumerCheckPeriod\") long slowConsumerCheckPeriod, @Parameter(desc = \"the policy to use when a slow consumer is detected\", name = \"slowConsumerPolicy\") String slowConsumerPolicy, @Parameter(desc = \"allow jms queues to be created automatically\", name = \"autoCreateJmsQueues\") boolean autoCreateJmsQueues, @Parameter(desc = \"allow auto-created jms queues to be deleted automatically\", name = \"autoDeleteJmsQueues\") boolean autoDeleteJmsQueues, @Parameter(desc = \"allow jms topics to be created automatically\", name = \"autoCreateJmsTopics\") boolean autoCreateJmsTopics, @Parameter(desc = \"allow auto-created jms topics to be deleted automatically\", name = \"autoDeleteJmsTopics\") boolean autoDeleteJmsTopics, @Parameter(desc = \"allow queues to be created automatically\", name = \"autoCreateQueues\") boolean autoCreateQueues, @Parameter(desc = \"allow auto-created queues to be deleted automatically\", name = \"autoDeleteQueues\") boolean autoDeleteQueues, @Parameter(desc = \"allow addresses to be created automatically\", name = \"autoCreateAddresses\") boolean autoCreateAddresses, @Parameter(desc = \"allow auto-created addresses to be deleted automatically\", name = \"autoDeleteAddresses\") boolean autoDeleteAddresses, @Parameter(desc = \"how to deal with queues deleted from XML at runtime\", name = \"configDeleteQueues\") String configDeleteQueues, @Parameter(desc = \"how to deal with addresses deleted from XML at runtime\", name = \"configDeleteAddresses\") String configDeleteAddresses, @Parameter(desc = \"used with `BLOCK`, the max size an address can reach before messages are rejected; works in combination with `max-size-bytes` for AMQP clients only\", name = \"maxSizeBytesRejectThreshold\") long maxSizeBytesRejectThreshold, @Parameter(desc = \"last-value-key value if none is set on the queue\", name = \"defaultLastValueKey\") String defaultLastValueKey, @Parameter(desc = \"non-destructive value if none is set on the queue\", name = \"defaultNonDestructive\") boolean defaultNonDestructive, @Parameter(desc = \"exclusive value if none is set on the queue\", name = \"defaultExclusiveQueue\") boolean defaultExclusiveQueue, @Parameter(desc = \"group-rebalance value if none is set on the queue\", name = \"defaultGroupRebalance\") boolean defaultGroupRebalance, @Parameter(desc = \"group-buckets value if none is set on the queue\", name = \"defaultGroupBuckets\") int defaultGroupBuckets, @Parameter(desc = \"group-first-key value if none is set on the queue\", name = \"defaultGroupFirstKey\") String defaultGroupFirstKey, @Parameter(desc = \"max-consumers value if none is set on the queue\", name = \"defaultMaxConsumers\") int defaultMaxConsumers, @Parameter(desc = \"purge-on-no-consumers value if none is set on the queue\", name = \"defaultPurgeOnNoConsumers\") boolean defaultPurgeOnNoConsumers, @Parameter(desc = \"consumers-before-dispatch value if none is set on the queue\", name = \"defaultConsumersBeforeDispatch\") int defaultConsumersBeforeDispatch, @Parameter(desc = \"delay-before-dispatch value if none is set on the queue\", name = \"defaultDelayBeforeDispatch\") long defaultDelayBeforeDispatch, @Parameter(desc = \"routing-type value if none is set on the queue\", name = \"defaultQueueRoutingType\") String defaultQueueRoutingType, @Parameter(desc = \"routing-type value if none is set on the address\", name = \"defaultAddressRoutingType\") String defaultAddressRoutingType, @Parameter(desc = \"consumer-window-size value if none is set on the queue\", name = \"defaultConsumerWindowSize\") int defaultConsumerWindowSize, @Parameter(desc = \"ring-size value if none is set on the queue\", name = \"defaultRingSize\") long defaultRingSize, @Parameter(desc = \"allow created queues to be deleted automatically\", name = \"autoDeleteCreatedQueues\") boolean autoDeleteCreatedQueues, @Parameter(desc = \"delay for deleting auto-created queues\", name = \"autoDeleteQueuesDelay\") long autoDeleteQueuesDelay, @Parameter(desc = \"the message count the queue must be at or below before it can be auto deleted\", name = \"autoDeleteQueuesMessageCount\") long autoDeleteQueuesMessageCount, @Parameter(desc = \"delay for deleting auto-created addresses\", name = \"autoDeleteAddressesDelay\") long autoDeleteAddressesDelay, @Parameter(desc = \"factor by which to modify the redelivery delay slightly to avoid collisions\", name = \"redeliveryCollisionAvoidanceFactor\") double redeliveryCollisionAvoidanceFactor, @Parameter(desc = \"the number of messages to preserve for future queues created on the matching address\", name = \"retroactiveMessageCount\") long retroactiveMessageCount)": {
                "lineStart": 265,
                "lineEnd": 266
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addAddressSettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch, @Parameter(desc = \"the dead letter address setting\", name = \"DLA\") String DLA, @Parameter(desc = \"the expiry address setting\", name = \"expiryAddress\") String expiryAddress, @Parameter(desc = \"the expiry delay setting\", name = \"expiryDelay\") long expiryDelay, @Parameter(desc = \"are any queues created for this address a last value queue\", name = \"lastValueQueue\") boolean lastValueQueue, @Parameter(desc = \"the delivery attempts\", name = \"deliveryAttempts\") int deliveryAttempts, @Parameter(desc = \"the max size in bytes\", name = \"maxSizeBytes\") long maxSizeBytes, @Parameter(desc = \"the page size in bytes\", name = \"pageSizeBytes\") int pageSizeBytes, @Parameter(desc = \"the max number of pages in the soft memory cache\", name = \"pageMaxCacheSize\") int pageMaxCacheSize, @Parameter(desc = \"the redelivery delay\", name = \"redeliveryDelay\") long redeliveryDelay, @Parameter(desc = \"the redelivery delay multiplier\", name = \"redeliveryMultiplier\") double redeliveryMultiplier, @Parameter(desc = \"the maximum redelivery delay\", name = \"maxRedeliveryDelay\") long maxRedeliveryDelay, @Parameter(desc = \"the redistribution delay\", name = \"redistributionDelay\") long redistributionDelay, @Parameter(desc = \"do we send to the DLA when there is no where to route the message\", name = \"sendToDLAOnNoRoute\") boolean sendToDLAOnNoRoute, @Parameter(desc = \"the policy to use when the address is full\", name = \"addressFullMessagePolicy\") String addressFullMessagePolicy, @Parameter(desc = \"when a consumer falls below this threshold in terms of messages consumed per second it will be considered 'slow'\", name = \"slowConsumerThreshold\") long slowConsumerThreshold, @Parameter(desc = \"how often (in seconds) to check for slow consumers\", name = \"slowConsumerCheckPeriod\") long slowConsumerCheckPeriod, @Parameter(desc = \"the policy to use when a slow consumer is detected\", name = \"slowConsumerPolicy\") String slowConsumerPolicy, @Parameter(desc = \"allow jms queues to be created automatically\", name = \"autoCreateJmsQueues\") boolean autoCreateJmsQueues, @Parameter(desc = \"allow auto-created jms queues to be deleted automatically\", name = \"autoDeleteJmsQueues\") boolean autoDeleteJmsQueues, @Parameter(desc = \"allow jms topics to be created automatically\", name = \"autoCreateJmsTopics\") boolean autoCreateJmsTopics, @Parameter(desc = \"allow auto-created jms topics to be deleted automatically\", name = \"autoDeleteJmsTopics\") boolean autoDeleteJmsTopics, @Parameter(desc = \"allow queues to be created automatically\", name = \"autoCreateQueues\") boolean autoCreateQueues, @Parameter(desc = \"allow auto-created queues to be deleted automatically\", name = \"autoDeleteQueues\") boolean autoDeleteQueues, @Parameter(desc = \"allow addresses to be created automatically\", name = \"autoCreateAddresses\") boolean autoCreateAddresses, @Parameter(desc = \"allow auto-created addresses to be deleted automatically\", name = \"autoDeleteAddresses\") boolean autoDeleteAddresses, @Parameter(desc = \"how to deal with queues deleted from XML at runtime\", name = \"configDeleteQueues\") String configDeleteQueues, @Parameter(desc = \"how to deal with addresses deleted from XML at runtime\", name = \"configDeleteAddresses\") String configDeleteAddresses, @Parameter(desc = \"used with `BLOCK`, the max size an address can reach before messages are rejected; works in combination with `max-size-bytes` for AMQP clients only\", name = \"maxSizeBytesRejectThreshold\") long maxSizeBytesRejectThreshold, @Parameter(desc = \"last-value-key value if none is set on the queue\", name = \"defaultLastValueKey\") String defaultLastValueKey, @Parameter(desc = \"non-destructive value if none is set on the queue\", name = \"defaultNonDestructive\") boolean defaultNonDestructive, @Parameter(desc = \"exclusive value if none is set on the queue\", name = \"defaultExclusiveQueue\") boolean defaultExclusiveQueue, @Parameter(desc = \"group-rebalance value if none is set on the queue\", name = \"defaultGroupRebalance\") boolean defaultGroupRebalance, @Parameter(desc = \"group-buckets value if none is set on the queue\", name = \"defaultGroupBuckets\") int defaultGroupBuckets, @Parameter(desc = \"group-first-key value if none is set on the queue\", name = \"defaultGroupFirstKey\") String defaultGroupFirstKey, @Parameter(desc = \"max-consumers value if none is set on the queue\", name = \"defaultMaxConsumers\") int defaultMaxConsumers, @Parameter(desc = \"purge-on-no-consumers value if none is set on the queue\", name = \"defaultPurgeOnNoConsumers\") boolean defaultPurgeOnNoConsumers, @Parameter(desc = \"consumers-before-dispatch value if none is set on the queue\", name = \"defaultConsumersBeforeDispatch\") int defaultConsumersBeforeDispatch, @Parameter(desc = \"delay-before-dispatch value if none is set on the queue\", name = \"defaultDelayBeforeDispatch\") long defaultDelayBeforeDispatch, @Parameter(desc = \"routing-type value if none is set on the queue\", name = \"defaultQueueRoutingType\") String defaultQueueRoutingType, @Parameter(desc = \"routing-type value if none is set on the address\", name = \"defaultAddressRoutingType\") String defaultAddressRoutingType, @Parameter(desc = \"consumer-window-size value if none is set on the queue\", name = \"defaultConsumerWindowSize\") int defaultConsumerWindowSize, @Parameter(desc = \"ring-size value if none is set on the queue\", name = \"defaultRingSize\") long defaultRingSize, @Parameter(desc = \"allow created queues to be deleted automatically\", name = \"autoDeleteCreatedQueues\") boolean autoDeleteCreatedQueues, @Parameter(desc = \"delay for deleting auto-created queues\", name = \"autoDeleteQueuesDelay\") long autoDeleteQueuesDelay, @Parameter(desc = \"the message count the queue must be at or below before it can be auto deleted\", name = \"autoDeleteQueuesMessageCount\") long autoDeleteQueuesMessageCount, @Parameter(desc = \"delay for deleting auto-created addresses\", name = \"autoDeleteAddressesDelay\") long autoDeleteAddressesDelay, @Parameter(desc = \"factor by which to modify the redelivery delay slightly to avoid collisions\", name = \"redeliveryCollisionAvoidanceFactor\") double redeliveryCollisionAvoidanceFactor, @Parameter(desc = \"the number of messages to preserve for future queues created on the matching address\", name = \"retroactiveMessageCount\") long retroactiveMessageCount, @Parameter(desc = \"allow dead-letter address & queue to be created automatically\", name = \"autoCreateDeadLetterResources\") boolean autoCreateDeadLetterResources, @Parameter(desc = \"prefix to use on auto-create dead-letter queue\", name = \"deadLetterQueuePrefix\") String deadLetterQueuePrefix, @Parameter(desc = \"suffix to use on auto-create dead-letter queue\", name = \"deadLetterQueueSuffix\") String deadLetterQueueSuffix, @Parameter(desc = \"allow expiry address & queue to be created automatically\", name = \"autoCreateExpiryResources\") boolean autoCreateExpiryResources, @Parameter(desc = \"prefix to use on auto-create expiry queue\", name = \"expiryQueuePrefix\") String expiryQueuePrefix, @Parameter(desc = \"suffix to use on auto-create expiry queue\", name = \"expiryQueueSuffix\") String expiryQueueSuffix)": {
                "lineStart": 267,
                "lineEnd": 268
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.removeAddressSettings(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch)": {
                "lineStart": 269,
                "lineEnd": 270
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getAddressSettingsAsJSON(@Parameter(desc = \"an address match\", name = \"addressMatch\") String addressMatch)": {
                "lineStart": 271,
                "lineEnd": 272
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getDivertNames()": {
                "lineStart": 273,
                "lineEnd": 274
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listDivertNames()": {
                "lineStart": 275,
                "lineEnd": 277
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createDivert(@Parameter(name = \"name\", desc = \"Name of the divert\") String name, @Parameter(name = \"routingName\", desc = \"Routing name of the divert\") String routingName, @Parameter(name = \"address\", desc = \"Address to divert from\") String address, @Parameter(name = \"forwardingAddress\", desc = \"Address to divert to\") String forwardingAddress, @Parameter(name = \"exclusive\", desc = \"Is the divert exclusive?\") boolean exclusive, @Parameter(name = \"filterString\", desc = \"Filter of the divert\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the divert's transformer\") String transformerClassName)": {
                "lineStart": 279,
                "lineEnd": 280
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createDivert(@Parameter(name = \"name\", desc = \"Name of the divert\") String name, @Parameter(name = \"routingName\", desc = \"Routing name of the divert\") String routingName, @Parameter(name = \"address\", desc = \"Address to divert from\") String address, @Parameter(name = \"forwardingAddress\", desc = \"Address to divert to\") String forwardingAddress, @Parameter(name = \"exclusive\", desc = \"Is the divert exclusive?\") boolean exclusive, @Parameter(name = \"filterString\", desc = \"Filter of the divert\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the divert's transformer\") String transformerClassName, @Parameter(name = \"routingType\", desc = \"How should the routing-type on the diverted messages be set?\") String routingType)": {
                "lineStart": 281,
                "lineEnd": 282
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createDivert(@Parameter(name = \"name\", desc = \"Name of the divert\") String name, @Parameter(name = \"routingName\", desc = \"Routing name of the divert\") String routingName, @Parameter(name = \"address\", desc = \"Address to divert from\") String address, @Parameter(name = \"forwardingAddress\", desc = \"Address to divert to\") String forwardingAddress, @Parameter(name = \"exclusive\", desc = \"Is the divert exclusive?\") boolean exclusive, @Parameter(name = \"filterString\", desc = \"Filter of the divert\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the divert's transformer\") String transformerClassName, @Parameter(name = \"transformerProperties\", desc = \"Configuration properties of the divert's transformer\") Map<String, String> transformerProperties, @Parameter(name = \"routingType\", desc = \"How should the routing-type on the diverted messages be set?\") String routingType)": {
                "lineStart": 283,
                "lineEnd": 284
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createDivert(@Parameter(name = \"name\", desc = \"Name of the divert\") String name, @Parameter(name = \"routingName\", desc = \"Routing name of the divert\") String routingName, @Parameter(name = \"address\", desc = \"Address to divert from\") String address, @Parameter(name = \"forwardingAddress\", desc = \"Address to divert to\") String forwardingAddress, @Parameter(name = \"exclusive\", desc = \"Is the divert exclusive?\") boolean exclusive, @Parameter(name = \"filterString\", desc = \"Filter of the divert\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the divert's transformer\") String transformerClassName, @Parameter(name = \"transformerPropertiesAsJSON\", desc = \"Configuration properties of the divert's transformer in JSON form\") String transformerPropertiesAsJSON, @Parameter(name = \"routingType\", desc = \"How should the routing-type on the diverted messages be set?\") String routingType)": {
                "lineStart": 285,
                "lineEnd": 286
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.destroyDivert(@Parameter(name = \"name\", desc = \"Name of the divert\") String name)": {
                "lineStart": 287,
                "lineEnd": 288
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getBridgeNames()": {
                "lineStart": 289,
                "lineEnd": 290
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createBridge(@Parameter(name = \"name\", desc = \"Name of the bridge\") String name, @Parameter(name = \"queueName\", desc = \"Name of the source queue\") String queueName, @Parameter(name = \"forwardingAddress\", desc = \"Forwarding address\") String forwardingAddress, @Parameter(name = \"filterString\", desc = \"Filter of the bridge\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the bridge transformer\") String transformerClassName, @Parameter(name = \"retryInterval\", desc = \"Connection retry interval\") long retryInterval, @Parameter(name = \"retryIntervalMultiplier\", desc = \"Connection retry interval multiplier\") double retryIntervalMultiplier, @Parameter(name = \"initialConnectAttempts\", desc = \"Number of initial connection attempts\") int initialConnectAttempts, @Parameter(name = \"reconnectAttempts\", desc = \"Number of reconnection attempts\") int reconnectAttempts, @Parameter(name = \"useDuplicateDetection\", desc = \"Use duplicate detection\") boolean useDuplicateDetection, @Parameter(name = \"confirmationWindowSize\", desc = \"Confirmation window size\") int confirmationWindowSize, @Parameter(name = \"producerWindowSize\", desc = \"Producer window size\") int producerWindowSize, @Parameter(name = \"clientFailureCheckPeriod\", desc = \"Period to check client failure\") long clientFailureCheckPeriod, @Parameter(name = \"staticConnectorNames\", desc = \"comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true\") String connectorNames, @Parameter(name = \"useDiscoveryGroup\", desc = \"use discovery  group\") boolean useDiscoveryGroup, @Parameter(name = \"ha\", desc = \"Is it using HA\") boolean ha, @Parameter(name = \"user\", desc = \"User name\") String user, @Parameter(name = \"password\", desc = \"User password\") String password)": {
                "lineStart": 291,
                "lineEnd": 292
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createBridge(@Parameter(name = \"name\", desc = \"Name of the bridge\") String name, @Parameter(name = \"queueName\", desc = \"Name of the source queue\") String queueName, @Parameter(name = \"forwardingAddress\", desc = \"Forwarding address\") String forwardingAddress, @Parameter(name = \"filterString\", desc = \"Filter of the bridge\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the bridge transformer\") String transformerClassName, @Parameter(name = \"transformerProperties\", desc = \"Configuration properties of the bridge transformer\") Map<String, String> transformerProperties, @Parameter(name = \"retryInterval\", desc = \"Connection retry interval\") long retryInterval, @Parameter(name = \"retryIntervalMultiplier\", desc = \"Connection retry interval multiplier\") double retryIntervalMultiplier, @Parameter(name = \"initialConnectAttempts\", desc = \"Number of initial connection attempts\") int initialConnectAttempts, @Parameter(name = \"reconnectAttempts\", desc = \"Number of reconnection attempts\") int reconnectAttempts, @Parameter(name = \"useDuplicateDetection\", desc = \"Use duplicate detection\") boolean useDuplicateDetection, @Parameter(name = \"confirmationWindowSize\", desc = \"Confirmation window size\") int confirmationWindowSize, @Parameter(name = \"producerWindowSize\", desc = \"Producer window size\") int producerWindowSize, @Parameter(name = \"clientFailureCheckPeriod\", desc = \"Period to check client failure\") long clientFailureCheckPeriod, @Parameter(name = \"staticConnectorNames\", desc = \"comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true\") String connectorNames, @Parameter(name = \"useDiscoveryGroup\", desc = \"use discovery  group\") boolean useDiscoveryGroup, @Parameter(name = \"ha\", desc = \"Is it using HA\") boolean ha, @Parameter(name = \"user\", desc = \"User name\") String user, @Parameter(name = \"password\", desc = \"User password\") String password)": {
                "lineStart": 293,
                "lineEnd": 294
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createBridge(@Parameter(name = \"name\", desc = \"Name of the bridge\") String name, @Parameter(name = \"queueName\", desc = \"Name of the source queue\") String queueName, @Parameter(name = \"forwardingAddress\", desc = \"Forwarding address\") String forwardingAddress, @Parameter(name = \"filterString\", desc = \"Filter of the bridge\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the bridge transformer\") String transformerClassName, @Parameter(name = \"transformerPropertiesAsJSON\", desc = \"Configuration properties of the bridge transformer in JSON form\") String transformerPropertiesAsJSON, @Parameter(name = \"retryInterval\", desc = \"Connection retry interval\") long retryInterval, @Parameter(name = \"retryIntervalMultiplier\", desc = \"Connection retry interval multiplier\") double retryIntervalMultiplier, @Parameter(name = \"initialConnectAttempts\", desc = \"Number of initial connection attempts\") int initialConnectAttempts, @Parameter(name = \"reconnectAttempts\", desc = \"Number of reconnection attempts\") int reconnectAttempts, @Parameter(name = \"useDuplicateDetection\", desc = \"Use duplicate detection\") boolean useDuplicateDetection, @Parameter(name = \"confirmationWindowSize\", desc = \"Confirmation window size\") int confirmationWindowSize, @Parameter(name = \"producerWindowSize\", desc = \"Producer window size\") int producerWindowSize, @Parameter(name = \"clientFailureCheckPeriod\", desc = \"Period to check client failure\") long clientFailureCheckPeriod, @Parameter(name = \"staticConnectorNames\", desc = \"comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true\") String connectorNames, @Parameter(name = \"useDiscoveryGroup\", desc = \"use discovery  group\") boolean useDiscoveryGroup, @Parameter(name = \"ha\", desc = \"Is it using HA\") boolean ha, @Parameter(name = \"user\", desc = \"User name\") String user, @Parameter(name = \"password\", desc = \"User password\") String password)": {
                "lineStart": 295,
                "lineEnd": 296
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createBridge(@Parameter(name = \"name\", desc = \"Name of the bridge\") String name, @Parameter(name = \"queueName\", desc = \"Name of the source queue\") String queueName, @Parameter(name = \"forwardingAddress\", desc = \"Forwarding address\") String forwardingAddress, @Parameter(name = \"filterString\", desc = \"Filter of the bridge\") String filterString, @Parameter(name = \"transformerClassName\", desc = \"Class name of the bridge transformer\") String transformerClassName, @Parameter(name = \"retryInterval\", desc = \"Connection retry interval\") long retryInterval, @Parameter(name = \"retryIntervalMultiplier\", desc = \"Connection retry interval multiplier\") double retryIntervalMultiplier, @Parameter(name = \"initialConnectAttempts\", desc = \"Number of initial connection attempts\") int initialConnectAttempts, @Parameter(name = \"reconnectAttempts\", desc = \"Number of reconnection attempts\") int reconnectAttempts, @Parameter(name = \"useDuplicateDetection\", desc = \"Use duplicate detection\") boolean useDuplicateDetection, @Parameter(name = \"confirmationWindowSize\", desc = \"Confirmation window size\") int confirmationWindowSize, @Parameter(name = \"clientFailureCheckPeriod\", desc = \"Period to check client failure\") long clientFailureCheckPeriod, @Parameter(name = \"staticConnectorNames\", desc = \"comma separated list of connector names or name of discovery group if 'useDiscoveryGroup' is set to true\") String connectorNames, @Parameter(name = \"useDiscoveryGroup\", desc = \"use discovery  group\") boolean useDiscoveryGroup, @Parameter(name = \"ha\", desc = \"Is it using HA\") boolean ha, @Parameter(name = \"user\", desc = \"User name\") String user, @Parameter(name = \"password\", desc = \"User password\") String password)": {
                "lineStart": 297,
                "lineEnd": 298
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.destroyBridge(@Parameter(name = \"name\", desc = \"Name of the bridge\") String name)": {
                "lineStart": 299,
                "lineEnd": 300
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.createConnectorService(@Parameter(name = \"name\", desc = \"Name of the connector service\") String name, @Parameter(name = \"factoryClass\", desc = \"Class name of the connector service factory\") String factoryClass, @Parameter(name = \"parameters\", desc = \"Parameter specific to the connector service\") Map<String, Object> parameters)": {
                "lineStart": 301,
                "lineEnd": 302
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.destroyConnectorService(@Parameter(name = \"name\", desc = \"Name of the connector service\") String name)": {
                "lineStart": 303,
                "lineEnd": 304
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getConnectorServices()": {
                "lineStart": 305,
                "lineEnd": 306
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.forceFailover()": {
                "lineStart": 307,
                "lineEnd": 308
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.scaleDown(@Parameter(name = \"name\", desc = \"The connector to use to scale down, if not provided the first appropriate connector will be used\") String connector)": {
                "lineStart": 309,
                "lineEnd": 310
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listNetworkTopology()": {
                "lineStart": 311,
                "lineEnd": 312
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getAddressInfo(@Parameter(name = \"address\", desc = \"The address\") String address)": {
                "lineStart": 313,
                "lineEnd": 314
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listBindingsForAddress(@Parameter(name = \"address\", desc = \"The address\") String address)": {
                "lineStart": 315,
                "lineEnd": 316
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listAddresses(@Parameter(name = \"separator\", desc = \"Separator used on the string listing\") String separator)": {
                "lineStart": 317,
                "lineEnd": 318
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listConnections(@Parameter(name = \"options\", desc = \"Options\") String options, @Parameter(name = \"pageNumber\", desc = \"Page Number\") int page, @Parameter(name = \"pageSize\", desc = \"Page Size\") int pageSize)": {
                "lineStart": 319,
                "lineEnd": 320
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listSessions(@Parameter(name = \"options\", desc = \"Options\") String options, @Parameter(name = \"pageNumber\", desc = \"Page Number\") int page, @Parameter(name = \"pageSize\", desc = \"Page Size\") int pageSize)": {
                "lineStart": 321,
                "lineEnd": 322
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listConsumers(@Parameter(name = \"options\", desc = \"Options\") String options, @Parameter(name = \"pageNumber\", desc = \"Page Number\") int page, @Parameter(name = \"pageSize\", desc = \"Page Size\") int pageSize)": {
                "lineStart": 323,
                "lineEnd": 324
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listProducers(@Parameter(name = \"options\", desc = \"Options\") String options, @Parameter(name = \"pageNumber\", desc = \"Page Number\") int page, @Parameter(name = \"pageSize\", desc = \"Page Size\") int pageSize)": {
                "lineStart": 325,
                "lineEnd": 326
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listAddresses(@Parameter(name = \"options\", desc = \"Options\") String options, @Parameter(name = \"pageNumber\", desc = \"Page Number\") int page, @Parameter(name = \"pageSize\", desc = \"Page Size\") int pageSize)": {
                "lineStart": 327,
                "lineEnd": 328
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listQueues(@Parameter(name = \"options\", desc = \"Options\") String options, @Parameter(name = \"pageNumber\", desc = \"Page Number\") int page, @Parameter(name = \"pageSize\", desc = \"Page Size\") int pageSize)": {
                "lineStart": 329,
                "lineEnd": 330
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getQueueNames(@Parameter(name = \"routingType\", desc = \"The routing type, MULTICAST or ANYCAST\") String routingType)": {
                "lineStart": 331,
                "lineEnd": 332
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.getClusterConnectionNames()": {
                "lineStart": 333,
                "lineEnd": 334
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.addUser(@Parameter(name = \"username\", desc = \"Name of the user\") String username, @Parameter(name = \"password\", desc = \"User's password\") String password, @Parameter(name = \"roles\", desc = \"User's role (comma separated)\") String roles, @Parameter(name = \"plaintext\", desc = \"whether or not to store the password in plaintext or hash it\") boolean plaintext)": {
                "lineStart": 335,
                "lineEnd": 336
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.listUser(@Parameter(name = \"username\", desc = \"Name of the user; leave null to list all known users\") String username)": {
                "lineStart": 337,
                "lineEnd": 338
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.removeUser(@Parameter(name = \"username\", desc = \"Name of the user\") String username)": {
                "lineStart": 339,
                "lineEnd": 340
            },
            "org.apache.activemq.artemis.api.core.management.ActiveMQServerControl.resetUser(@Parameter(name = \"username\", desc = \"Name of the user\") String username, @Parameter(name = \"password\", desc = \"User's password\") String password, @Parameter(name = \"roles\", desc = \"User's role (comma separated)\") String roles)": {
                "lineStart": 341,
                "lineEnd": 342
            }
        },
        "2f6407c371-ActiveMQServerControlImpl.java": {
            "org.apache.activemq.artemis.core.management.impl.ActiveMQServerControlImpl.resetUser(String username, String password, String roles)": {
                "lineStart": 3247,
                "lineEnd": 3253
            },
            "org.apache.activemq.artemis.core.management.impl.ActiveMQServerControlImpl.internalresetUser(String username, String password, String roles)": {
                "lineStart": 3255,
                "lineEnd": 3259
            }
        }
    },
    "CVE-2020-5427": {
        "fa6c44c92-TaskExecutionController.java": {
            "org.springframework.cloud.dataflow.server.controller.TaskExecutionController.list(Pageable pageable, PagedResourcesAssembler<TaskJobExecutionRel> assembler)": {
                "lineStart": 61,
                "lineEnd": 66
            },
            "org.springframework.cloud.dataflow.server.controller.TaskExecutionController.retrieveTasksByName(@RequestParam(\"name\") String taskName, Pageable pageable, PagedResourcesAssembler<TaskJobExecutionRel> assembler)": {
                "lineStart": 68,
                "lineEnd": 74
            }
        }
    },
    "CVE-2020-2144": {
        "7db2891-WebHookListener.java": {
            "org.jenkinsci.plugins.rundeck.WebHookListener.doIndex(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 14,
                "lineEnd": 31
            }
        },
        "0000000-ParserXML.java": {
            "org.jenkinsci.plugins.rundeck.WebHookListener.doIndex(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 14,
                "lineEnd": 31
            }
        }
    },
    "CVE-2023-28669": {
        "6a9cbe0-AbstractReport.java": {
            "hudson.plugins.jacoco.report.AbstractReport.setName(String name)": {
                "lineStart": 18,
                "lineEnd": 20
            }
        },
        "5064489-ClassReport.java": {
            "hudson.plugins.jacoco.report.ClassReport.setName(String name)": {
                "lineStart": 8,
                "lineEnd": 10
            }
        },
        "fb65011-MethodReport.java": {
            "hudson.plugins.jacoco.report.MethodReport.add(SourceFileReport child)": {
                "lineStart": 22,
                "lineEnd": 26
            }
        },
        "85b9d50-PackageReport.java": {
            "hudson.plugins.jacoco.report.PackageReport.setName(String name)": {
                "lineStart": 8,
                "lineEnd": 10
            },
            "hudson.plugins.jacoco.report.PackageReport.add(ClassReport child)": {
                "lineStart": 12,
                "lineEnd": 16
            }
        },
        "ff41c3e-SourceFileReport.java": {
            "hudson.plugins.jacoco.report.SourceFileReport.setName(String name)": {
                "lineStart": 3,
                "lineEnd": 5
            }
        }
    },
    "CVE-2020-35509": {
        "0a456d2831-ValidateX509CertificateUsername.java": {
            "org.keycloak.authentication.authenticators.x509.ValidateX509CertificateUsername.authenticate(AuthenticationFlowContext context)": {
                "lineStart": 15,
                "lineEnd": 111
            }
        }
    },
    "CVE-2022-45064": {
        "13cfa43-SlingHttpServletRequestImpl.java": {
            "org.apache.sling.engine.impl.SlingHttpServletRequestImpl.getRequestDispatcher(Resource resource, RequestDispatcherOptions options)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.apache.sling.engine.impl.SlingHttpServletRequestImpl.getRequestDispatcher(String path, RequestDispatcherOptions options)": {
                "lineStart": 87,
                "lineEnd": 89
            }
        },
        "564126c-SlingRequestProcessorImpl.java": {
            "org.apache.sling.engine.impl.SlingRequestProcessorImpl.doProcessRequest(final HttpServletRequest servletRequest, final HttpServletResponse servletResponse, final ResourceResolver resourceResolver)": {
                "lineStart": 131,
                "lineEnd": 232
            },
            "org.apache.sling.engine.impl.SlingRequestProcessorImpl.dispatchRequest(final ServletRequest request, final ServletResponse response, final Resource resource, final RequestPathInfo resolvedURL, final boolean include, final boolean protectHeadersOnInclude)": {
                "lineStart": 259,
                "lineEnd": 275
            },
            "org.apache.sling.engine.impl.SlingRequestProcessorImpl.modified(final Config config)": {
                "lineStart": 76,
                "lineEnd": 99
            }
        },
        "3fc1423-SlingServletContext.java": {
            "org.apache.sling.engine.impl.helper.SlingServletContext.getRequestDispatcher(String path)": {
                "lineStart": 237,
                "lineEnd": 244
            },
            "org.apache.sling.engine.impl.helper.SlingServletContext.<init>(final Config config, final BundleContext bundleContext, @Reference final ProductInfoProvider infoProvider)": {
                "lineStart": 51,
                "lineEnd": 55
            }
        },
        "b4e979c-RequestData.java": {
            "org.apache.sling.engine.impl.request.RequestData.<init>(SlingRequestProcessorImpl slingRequestProcessor, HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 65,
                "lineEnd": 88
            }
        },
        "c83ea08-SlingRequestDispatcher.java": {
            "org.apache.sling.engine.impl.request.SlingRequestDispatcher.<init>(String path, RequestDispatcherOptions options)": {
                "lineStart": 22,
                "lineEnd": 26
            },
            "org.apache.sling.engine.impl.request.SlingRequestDispatcher.<init>(Resource resource, RequestDispatcherOptions options)": {
                "lineStart": 28,
                "lineEnd": 32
            },
            "org.apache.sling.engine.impl.request.SlingRequestDispatcher.dispatch(final ServletRequest request, final ServletResponse response, final boolean include)": {
                "lineStart": 100,
                "lineEnd": 126
            }
        }
    },
    "CVE-2022-25647": {
        "3669af7b-LazilyParsedNumber.java": {
            "com.google.gson.internal.LazilyParsedNumber.<init>(String value)": {
                "lineStart": 6,
                "lineEnd": 8
            },
            "com.google.gson.internal.LazilyParsedNumber.intValue()": {
                "lineStart": 10,
                "lineEnd": 24
            },
            "com.google.gson.internal.LazilyParsedNumber.longValue()": {
                "lineStart": 26,
                "lineEnd": 34
            },
            "com.google.gson.internal.LazilyParsedNumber.floatValue()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.google.gson.internal.LazilyParsedNumber.doubleValue()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "com.google.gson.internal.LazilyParsedNumber.toString()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "com.google.gson.internal.LazilyParsedNumber.writeReplace()": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "com.google.gson.internal.LazilyParsedNumber.hashCode()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "com.google.gson.internal.LazilyParsedNumber.equals(Object obj)": {
                "lineStart": 56,
                "lineEnd": 67
            }
        },
        "b2707c50-LinkedHashTreeMap.java": {
            "com.google.gson.internal.LinkedHashTreeMap.<init>()": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "com.google.gson.internal.LinkedHashTreeMap.<init>(Comparator<? super K> comparator)": {
                "lineStart": 29,
                "lineEnd": 35
            },
            "com.google.gson.internal.LinkedHashTreeMap.size()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "com.google.gson.internal.LinkedHashTreeMap.get(Object key)": {
                "lineStart": 41,
                "lineEnd": 44
            },
            "com.google.gson.internal.LinkedHashTreeMap.containsKey(Object key)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "com.google.gson.internal.LinkedHashTreeMap.put(K key, V value)": {
                "lineStart": 50,
                "lineEnd": 59
            },
            "com.google.gson.internal.LinkedHashTreeMap.clear()": {
                "lineStart": 61,
                "lineEnd": 73
            },
            "com.google.gson.internal.LinkedHashTreeMap.remove(Object key)": {
                "lineStart": 75,
                "lineEnd": 78
            },
            "com.google.gson.internal.LinkedHashTreeMap.find(K key, boolean create)": {
                "lineStart": 80,
                "lineEnd": 138
            },
            "com.google.gson.internal.LinkedHashTreeMap.findByObject(Object key)": {
                "lineStart": 140,
                "lineEnd": 149
            },
            "com.google.gson.internal.LinkedHashTreeMap.findByEntry(Entry<?, ?> entry)": {
                "lineStart": 151,
                "lineEnd": 155
            },
            "com.google.gson.internal.LinkedHashTreeMap.equal(Object a, Object b)": {
                "lineStart": 157,
                "lineEnd": 159
            },
            "com.google.gson.internal.LinkedHashTreeMap.secondaryHash(int h)": {
                "lineStart": 161,
                "lineEnd": 164
            },
            "com.google.gson.internal.LinkedHashTreeMap.removeInternal(Node<K, V> node, boolean unlink)": {
                "lineStart": 166,
                "lineEnd": 216
            },
            "com.google.gson.internal.LinkedHashTreeMap.removeInternalByKey(Object key)": {
                "lineStart": 218,
                "lineEnd": 225
            },
            "com.google.gson.internal.LinkedHashTreeMap.replaceInParent(Node<K, V> node, Node<K, V> replacement)": {
                "lineStart": 227,
                "lineEnd": 249
            },
            "com.google.gson.internal.LinkedHashTreeMap.rebalance(Node<K, V> unbalanced, boolean insert)": {
                "lineStart": 251,
                "lineEnd": 316
            },
            "com.google.gson.internal.LinkedHashTreeMap.rotateLeft(Node<K, V> root)": {
                "lineStart": 318,
                "lineEnd": 333
            },
            "com.google.gson.internal.LinkedHashTreeMap.rotateRight(Node<K, V> root)": {
                "lineStart": 335,
                "lineEnd": 350
            },
            "com.google.gson.internal.LinkedHashTreeMap.entrySet()": {
                "lineStart": 354,
                "lineEnd": 357
            },
            "com.google.gson.internal.LinkedHashTreeMap.keySet()": {
                "lineStart": 359,
                "lineEnd": 362
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.<init>()": {
                "lineStart": 374,
                "lineEnd": 378
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.<init>(Node<K, V> parent, K key, int hash, Node<K, V> next, Node<K, V> prev)": {
                "lineStart": 380,
                "lineEnd": 389
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.getKey()": {
                "lineStart": 391,
                "lineEnd": 393
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.getValue()": {
                "lineStart": 395,
                "lineEnd": 397
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.setValue(V value)": {
                "lineStart": 399,
                "lineEnd": 403
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.equals(Object o)": {
                "lineStart": 405,
                "lineEnd": 412
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.hashCode()": {
                "lineStart": 414,
                "lineEnd": 416
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.toString()": {
                "lineStart": 418,
                "lineEnd": 420
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.first()": {
                "lineStart": 422,
                "lineEnd": 431
            },
            "com.google.gson.internal.LinkedHashTreeMap$Node.last()": {
                "lineStart": 433,
                "lineEnd": 442
            },
            "com.google.gson.internal.LinkedHashTreeMap.doubleCapacity()": {
                "lineStart": 446,
                "lineEnd": 449
            },
            "com.google.gson.internal.LinkedHashTreeMap.doubleCapacity(Node<K, V>[] oldTable)": {
                "lineStart": 451,
                "lineEnd": 495
            },
            "com.google.gson.internal.LinkedHashTreeMap$AvlIterator.reset(Node<K, V> root)": {
                "lineStart": 499,
                "lineEnd": 507
            },
            "com.google.gson.internal.LinkedHashTreeMap$AvlIterator.next()": {
                "lineStart": 509,
                "lineEnd": 525
            },
            "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder.reset(int targetSize)": {
                "lineStart": 534,
                "lineEnd": 540
            },
            "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder.add(Node<K, V> node)": {
                "lineStart": 542,
                "lineEnd": 588
            },
            "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder.root()": {
                "lineStart": 590,
                "lineEnd": 597
            },
            "com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.<init>()": {
                "lineStart": 605,
                "lineEnd": 606
            },
            "com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.hasNext()": {
                "lineStart": 608,
                "lineEnd": 610
            },
            "com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.nextNode()": {
                "lineStart": 612,
                "lineEnd": 624
            },
            "com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.remove()": {
                "lineStart": 626,
                "lineEnd": 634
            },
            "com.google.gson.internal.LinkedHashTreeMap$EntrySet.size()": {
                "lineStart": 639,
                "lineEnd": 641
            },
            "com.google.gson.internal.LinkedHashTreeMap$EntrySet.iterator()": {
                "lineStart": 643,
                "lineEnd": 648
            },
            "com.google.gson.internal.LinkedHashTreeMap$EntrySet.contains(Object o)": {
                "lineStart": 650,
                "lineEnd": 652
            },
            "com.google.gson.internal.LinkedHashTreeMap$EntrySet.remove(Object o)": {
                "lineStart": 654,
                "lineEnd": 666
            },
            "com.google.gson.internal.LinkedHashTreeMap$EntrySet.clear()": {
                "lineStart": 668,
                "lineEnd": 670
            },
            "com.google.gson.internal.LinkedHashTreeMap$KeySet.size()": {
                "lineStart": 675,
                "lineEnd": 677
            },
            "com.google.gson.internal.LinkedHashTreeMap$KeySet.iterator()": {
                "lineStart": 679,
                "lineEnd": 684
            },
            "com.google.gson.internal.LinkedHashTreeMap$KeySet.contains(Object o)": {
                "lineStart": 686,
                "lineEnd": 688
            },
            "com.google.gson.internal.LinkedHashTreeMap$KeySet.remove(Object key)": {
                "lineStart": 690,
                "lineEnd": 692
            },
            "com.google.gson.internal.LinkedHashTreeMap$KeySet.clear()": {
                "lineStart": 694,
                "lineEnd": 696
            },
            "com.google.gson.internal.LinkedHashTreeMap.writeReplace()": {
                "lineStart": 700,
                "lineEnd": 702
            }
        },
        "80462742-LinkedTreeMap.java": {
            "com.google.gson.internal.LinkedTreeMap.<init>()": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "com.google.gson.internal.LinkedTreeMap.<init>(Comparator<? super K> comparator)": {
                "lineStart": 27,
                "lineEnd": 30
            },
            "com.google.gson.internal.LinkedTreeMap.size()": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "com.google.gson.internal.LinkedTreeMap.get(Object key)": {
                "lineStart": 36,
                "lineEnd": 39
            },
            "com.google.gson.internal.LinkedTreeMap.containsKey(Object key)": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "com.google.gson.internal.LinkedTreeMap.put(K key, V value)": {
                "lineStart": 45,
                "lineEnd": 54
            },
            "com.google.gson.internal.LinkedTreeMap.clear()": {
                "lineStart": 56,
                "lineEnd": 62
            },
            "com.google.gson.internal.LinkedTreeMap.remove(Object key)": {
                "lineStart": 64,
                "lineEnd": 67
            },
            "com.google.gson.internal.LinkedTreeMap.find(K key, boolean create)": {
                "lineStart": 69,
                "lineEnd": 121
            },
            "com.google.gson.internal.LinkedTreeMap.findByObject(Object key)": {
                "lineStart": 123,
                "lineEnd": 132
            },
            "com.google.gson.internal.LinkedTreeMap.findByEntry(Entry<?, ?> entry)": {
                "lineStart": 134,
                "lineEnd": 138
            },
            "com.google.gson.internal.LinkedTreeMap.equal(Object a, Object b)": {
                "lineStart": 140,
                "lineEnd": 142
            },
            "com.google.gson.internal.LinkedTreeMap.removeInternal(Node<K, V> node, boolean unlink)": {
                "lineStart": 144,
                "lineEnd": 193
            },
            "com.google.gson.internal.LinkedTreeMap.removeInternalByKey(Object key)": {
                "lineStart": 195,
                "lineEnd": 202
            },
            "com.google.gson.internal.LinkedTreeMap.replaceInParent(Node<K, V> node, Node<K, V> replacement)": {
                "lineStart": 204,
                "lineEnd": 225
            },
            "com.google.gson.internal.LinkedTreeMap.rebalance(Node<K, V> unbalanced, boolean insert)": {
                "lineStart": 227,
                "lineEnd": 292
            },
            "com.google.gson.internal.LinkedTreeMap.rotateLeft(Node<K, V> root)": {
                "lineStart": 294,
                "lineEnd": 309
            },
            "com.google.gson.internal.LinkedTreeMap.rotateRight(Node<K, V> root)": {
                "lineStart": 311,
                "lineEnd": 326
            },
            "com.google.gson.internal.LinkedTreeMap.entrySet()": {
                "lineStart": 330,
                "lineEnd": 333
            },
            "com.google.gson.internal.LinkedTreeMap.keySet()": {
                "lineStart": 335,
                "lineEnd": 338
            },
            "com.google.gson.internal.LinkedTreeMap$Node.<init>()": {
                "lineStart": 349,
                "lineEnd": 352
            },
            "com.google.gson.internal.LinkedTreeMap$Node.<init>(Node<K, V> parent, K key, Node<K, V> next, Node<K, V> prev)": {
                "lineStart": 354,
                "lineEnd": 362
            },
            "com.google.gson.internal.LinkedTreeMap$Node.getKey()": {
                "lineStart": 364,
                "lineEnd": 366
            },
            "com.google.gson.internal.LinkedTreeMap$Node.getValue()": {
                "lineStart": 368,
                "lineEnd": 370
            },
            "com.google.gson.internal.LinkedTreeMap$Node.setValue(V value)": {
                "lineStart": 372,
                "lineEnd": 376
            },
            "com.google.gson.internal.LinkedTreeMap$Node.equals(Object o)": {
                "lineStart": 378,
                "lineEnd": 385
            },
            "com.google.gson.internal.LinkedTreeMap$Node.hashCode()": {
                "lineStart": 387,
                "lineEnd": 389
            },
            "com.google.gson.internal.LinkedTreeMap$Node.toString()": {
                "lineStart": 391,
                "lineEnd": 393
            },
            "com.google.gson.internal.LinkedTreeMap$Node.first()": {
                "lineStart": 395,
                "lineEnd": 404
            },
            "com.google.gson.internal.LinkedTreeMap$Node.last()": {
                "lineStart": 406,
                "lineEnd": 415
            },
            "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.<init>()": {
                "lineStart": 423,
                "lineEnd": 424
            },
            "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.hasNext()": {
                "lineStart": 426,
                "lineEnd": 428
            },
            "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.nextNode()": {
                "lineStart": 430,
                "lineEnd": 442
            },
            "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.remove()": {
                "lineStart": 444,
                "lineEnd": 452
            },
            "com.google.gson.internal.LinkedTreeMap$EntrySet.size()": {
                "lineStart": 457,
                "lineEnd": 459
            },
            "com.google.gson.internal.LinkedTreeMap$EntrySet.iterator()": {
                "lineStart": 461,
                "lineEnd": 466
            },
            "com.google.gson.internal.LinkedTreeMap$EntrySet.contains(Object o)": {
                "lineStart": 468,
                "lineEnd": 470
            },
            "com.google.gson.internal.LinkedTreeMap$EntrySet.remove(Object o)": {
                "lineStart": 472,
                "lineEnd": 484
            },
            "com.google.gson.internal.LinkedTreeMap$EntrySet.clear()": {
                "lineStart": 486,
                "lineEnd": 488
            },
            "com.google.gson.internal.LinkedTreeMap$KeySet.size()": {
                "lineStart": 493,
                "lineEnd": 495
            },
            "com.google.gson.internal.LinkedTreeMap$KeySet.iterator()": {
                "lineStart": 497,
                "lineEnd": 502
            },
            "com.google.gson.internal.LinkedTreeMap$KeySet.contains(Object o)": {
                "lineStart": 504,
                "lineEnd": 506
            },
            "com.google.gson.internal.LinkedTreeMap$KeySet.remove(Object key)": {
                "lineStart": 508,
                "lineEnd": 510
            },
            "com.google.gson.internal.LinkedTreeMap$KeySet.clear()": {
                "lineStart": 512,
                "lineEnd": 514
            },
            "com.google.gson.internal.LinkedTreeMap.writeReplace()": {
                "lineStart": 518,
                "lineEnd": 520
            }
        }
    },
    "CVE-2023-39010": {
        "114c63341-CalibrationIO.java": {
            "boofcv.io.calibration.CalibrationIO.createYmlObject()": {
                "lineStart": 90,
                "lineEnd": 94
            }
        }
    },
    "CVE-2021-21629": {
        "1d5cf9c-BuildWithParametersAction.java": {
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.<init>(T project)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getProjectName()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getAvailableParameters()": {
                "lineStart": 40,
                "lineEnd": 74
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getParameterDefinitionValue(ParameterDefinition parameterDefinition)": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getIconFileName()": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getDisplayName()": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getUrlName()": {
                "lineStart": 88,
                "lineEnd": 91
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.doConfigSubmit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 93,
                "lineEnd": 118
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.applyDefaultPassword(PasswordParameterDefinition parameterDefinition, PasswordParameterValue parameterValue)": {
                "lineStart": 120,
                "lineEnd": 130
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getPasswordValue(PasswordParameterValue parameterValue)": {
                "lineStart": 132,
                "lineEnd": 135
            },
            "org.jenkinsci.plugins.buildwithparameters.BuildWithParametersAction.getParameterDefinitions()": {
                "lineStart": 137,
                "lineEnd": 144
            }
        }
    },
    "CVE-2023-24457": {
        "927aeee-KeycloakSecurityRealm.java": {
            "org.jenkinsci.plugins.KeycloakSecurityRealm.doCommenceLogin(StaplerRequest request, StaplerResponse response, @Header(\"Referer\") final String referer)": {
                "lineStart": 87,
                "lineEnd": 102
            },
            "org.jenkinsci.plugins.KeycloakSecurityRealm.doFinishLogin(StaplerRequest request)": {
                "lineStart": 121,
                "lineEnd": 182
            }
        }
    },
    "CVE-2021-32729": {
        "b73867674a9-AuthenticationScriptService.java": {
            "org.xwiki.security.authentication.script.AuthenticationScriptService.resetAuthenticationFailureCounter(String username)": {
                "lineStart": 50,
                "lineEnd": 52
            }
        }
    },
    "CVE-2020-15087": {
        "99c7707dea-InternalAuthenticationManager.java": {
            "io.prestosql.server.InternalAuthenticationManager.isInternalRequest(ContainerRequestContext request)": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "io.prestosql.server.InternalAuthenticationManager.authenticateInternalRequest(ContainerRequestContext request)": {
                "lineStart": 49,
                "lineEnd": 65
            }
        },
        "142f23f2e5-AuthenticationFilter.java": {
            "io.prestosql.server.security.AuthenticationFilter.filter(ContainerRequestContext request)": {
                "lineStart": 41,
                "lineEnd": 91
            }
        }
    },
    "CVE-2023-35088": {
        "0cddccb59-AuditServiceImpl.java": {
            "org.apache.inlong.manager.service.core.impl.AuditServiceImpl.listByCondition(AuditRequest request)": {
                "lineStart": 137,
                "lineEnd": 216
            },
            "org.apache.inlong.manager.service.core.impl.AuditServiceImpl.toAuditCkSql(String groupId, String streamId, String auditId, String dt)": {
                "lineStart": 253,
                "lineEnd": 259
            }
        }
    },
    "CVE-2022-39975": {
        "1e95f0df61bc2-GetPagePreviewMVCResourceCommand.java": {
            "com.liferay.layout.content.page.editor.web.internal.portlet.action.GetPagePreviewMVCResourceCommand.doServeResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)": {
                "lineStart": 43,
                "lineEnd": 90
            }
        }
    },
    "CVE-2020-2192": {
        "e2a7489-Candidate.java": {
            "hudson.plugins.swarm.Candidate.<init>(String url, String secret)": {
                "lineStart": 7,
                "lineEnd": 11
            },
            "hudson.plugins.swarm.Candidate.getSecret()": {
                "lineStart": 17,
                "lineEnd": 19
            }
        },
        "97d561a-Client.java": {
            "hudson.plugins.swarm.Client.run(SwarmClient swarmClient, String... args)": {
                "lineStart": 101,
                "lineEnd": 157
            }
        },
        "60f1e54-LabelFileWatcher.java": {
            "hudson.plugins.swarm.LabelFileWatcher.softLabelUpdate(String sNewLabels)": {
                "lineStart": 106,
                "lineEnd": 205
            }
        },
        "8d2b590-SwarmClient.java": {
            "hudson.plugins.swarm.SwarmClient.discoverFromMasterUrl()": {
                "lineStart": 112,
                "lineEnd": 165
            },
            "hudson.plugins.swarm.SwarmClient.createSwarmSlave(Candidate target)": {
                "lineStart": 326,
                "lineEnd": 407
            },
            "hudson.plugins.swarm.SwarmClient.postLabelRemove(String name, String labels, CloseableHttpClient client, HttpClientContext context, Candidate target)": {
                "lineStart": 409,
                "lineEnd": 427
            },
            "hudson.plugins.swarm.SwarmClient.postLabelAppend(String name, String labels, CloseableHttpClient client, HttpClientContext context, Candidate target)": {
                "lineStart": 429,
                "lineEnd": 447
            }
        },
        "d8919c5-PluginImpl.java": {
            "hudson.plugins.swarm.PluginImpl.doGetSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String secret)": {
                "lineStart": 55,
                "lineEnd": 67
            },
            "hudson.plugins.swarm.PluginImpl.doAddSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String secret, @QueryParameter String labels)": {
                "lineStart": 78,
                "lineEnd": 97
            },
            "hudson.plugins.swarm.PluginImpl.doRemoveSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String secret, @QueryParameter String labels)": {
                "lineStart": 103,
                "lineEnd": 122
            },
            "hudson.plugins.swarm.PluginImpl.doCreateSlave(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String description, @QueryParameter int executors, @QueryParameter String remoteFsRoot, @QueryParameter String labels, @QueryParameter String secret, @QueryParameter Node.Mode mode, @QueryParameter(fixEmpty = true) String hash, @QueryParameter boolean deleteExistingClients)": {
                "lineStart": 124,
                "lineEnd": 188
            },
            "hudson.plugins.swarm.PluginImpl.getSwarmSecret()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "hudson.plugins.swarm.PluginImpl.doSlaveInfo(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 233,
                "lineEnd": 242
            }
        }
    },
    "CVE-2020-15250": {
        "1a6a7706-TemporaryFolder.java": {
            "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": {
                "lineStart": 122,
                "lineEnd": 139
            }
        }
    },
    "CVE-2020-5404": {
        "bb554f9e9-HttpOperations.java": {
            "reactor.netty.http.HttpOperations.send(Publisher<? extends ByteBuf> source)": {
                "lineStart": 61,
                "lineEnd": 89
            },
            "reactor.netty.http.HttpOperations.sendObject(Object message)": {
                "lineStart": 91,
                "lineEnd": 119
            },
            "reactor.netty.http.HttpOperations.then()": {
                "lineStart": 121,
                "lineEnd": 169
            },
            "reactor.netty.http.HttpOperations.markSentHeaders()": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "reactor.netty.http.HttpOperations.markSentHeaderAndBody()": {
                "lineStart": 233,
                "lineEnd": 235
            }
        },
        "4b283f574-HttpClient.java": {
            "reactor.netty.http.client.HttpClient.followRedirect(boolean followRedirect)": {
                "lineStart": 212,
                "lineEnd": 221
            },
            "reactor.netty.http.client.HttpClient.followRedirect(BiPredicate<HttpClientRequest, HttpClientResponse> predicate)": {
                "lineStart": 223,
                "lineEnd": 226
            }
        },
        "958bc4fbd-HttpClientConfiguration.java": {
            "reactor.netty.http.client.HttpClientConfiguration.followRedirectPredicate(Bootstrap b, BiPredicate<HttpClientRequest, HttpClientResponse> predicate)": {
                "lineStart": 228,
                "lineEnd": 231
            },
            "reactor.netty.http.client.HttpClientConfiguration.<init>(HttpClientConfiguration from)": {
                "lineStart": 41,
                "lineEnd": 57
            }
        },
        "f5cea40d0-HttpClientConnect.java": {
            "reactor.netty.http.client.HttpClientConnect$HttpClientHandler.requestWithBody(HttpClientOperations ch)": {
                "lineStart": 414,
                "lineEnd": 480
            },
            "reactor.netty.http.client.HttpClientConnect$HttpClientHandler.<init>(HttpClientConfiguration configuration, @Nullable SocketAddress address, @Nullable SslProvider sslProvider, @Nullable ProxyProvider proxyProvider)": {
                "lineStart": 351,
                "lineEnd": 403
            }
        },
        "dc0f6e8e1-HttpClientOperations.java": {
            "reactor.netty.http.client.HttpClientOperations.send(Publisher<? extends ByteBuf> source)": {
                "lineStart": 298,
                "lineEnd": 347
            },
            "reactor.netty.http.client.HttpClientOperations.preSendHeadersAndStatus()": {
                "lineStart": 401,
                "lineEnd": 402
            }
        },
        "96e30fed3-HttpServerOperations.java": {
            "reactor.netty.http.server.HttpServerOperations.preSendHeadersAndStatus()": {
                "lineStart": 449,
                "lineEnd": 458
            }
        }
    },
    "CVE-2022-26650": {
        "3b8a064a2-RuleConditionDO.java": {
            "org.apache.shenyu.admin.model.entity.RuleConditionDO.buildRuleConditionDO(final RuleConditionDTO ruleConditionDTO)": {
                "lineStart": 70,
                "lineEnd": 85
            }
        },
        "995ca0e94-SelectorConditionDO.java": {
            "org.apache.shenyu.admin.model.entity.SelectorConditionDO.buildSelectorConditionDO(final SelectorConditionDTO selectorConditionDTO)": {
                "lineStart": 70,
                "lineEnd": 85
            }
        },
        "dec42d276-RegexPredicateJudge.java": {
            "org.apache.shenyu.plugin.base.condition.judge.RegexPredicateJudge.judge(final ConditionData conditionData, final String realData)": {
                "lineStart": 6,
                "lineEnd": 8
            }
        },
        "ddbaf2ba4-TimerAfterPredicateJudge.java": {
            "org.apache.shenyu.plugin.base.condition.judge.TimerAfterPredicateJudge.judge(final ConditionData conditionData, final String realData)": {
                "lineStart": 8,
                "lineEnd": 15
            }
        },
        "9c96138c0-TimerBeforePredicateJudge.java": {
            "org.apache.shenyu.plugin.base.condition.judge.TimerBeforePredicateJudge.judge(final ConditionData conditionData, final String realData)": {
                "lineStart": 8,
                "lineEnd": 15
            }
        }
    },
    "CVE-2020-2292": {
        "8430d59-ReleaseWrapper.java": {
            "hudson.plugins.release.ReleaseWrapper$ReleaseBuildBadgeAction.getReleaseVersion()": {
                "lineStart": 595,
                "lineEnd": 597
            }
        }
    },
    "CVE-2022-4375": {
        "9d2ccfe9-CategoryAction.java": {
            "net.mingsoft.cms.action.web.CategoryAction.list(@ModelAttribute @ApiIgnore CategoryEntity category)": {
                "lineStart": 18,
                "lineEnd": 24
            },
            "net.mingsoft.cms.action.web.CategoryAction.get(@ModelAttribute @ApiIgnore CategoryEntity category)": {
                "lineStart": 26,
                "lineEnd": 35
            }
        },
        "a5bd623a-ContentAction.java": {
            "net.mingsoft.cms.action.web.ContentAction.list(@ModelAttribute @ApiIgnore ContentBean content)": {
                "lineStart": 25,
                "lineEnd": 31
            },
            "net.mingsoft.cms.action.web.ContentAction.get(@ModelAttribute @ApiIgnore ContentEntity content)": {
                "lineStart": 33,
                "lineEnd": 42
            }
        }
    },
    "CVE-2021-36151": {
        "c43360dbe-AzkabanJobLauncher.java": {
            "org.apache.gobblin.azkaban.AzkabanJobLauncher.<init>(String jobId, Properties props)": {
                "lineStart": 76,
                "lineEnd": 147
            }
        },
        "1a8c54391-DownloadUtils.java": {
            "org.apache.gobblin.util.DownloadUtils.getIvySettingsFile()": {
                "lineStart": 68,
                "lineEnd": 82
            }
        }
    },
    "CVE-2023-43499": {
        "e76950d-AnnotationHelper.java": {
            "com.sonyericsson.jenkins.plugins.bfa.AnnotationHelper.getBefore()": {
                "lineStart": 7,
                "lineEnd": 15
            }
        },
        "b3bf970-CauseManagement.java": {
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIconFileName()": {
                "lineStart": 34,
                "lineEnd": 42
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDisplayName()": {
                "lineStart": 44,
                "lineEnd": 55
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getUrlName()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getImageUrl(String size, String name)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getShallowCauses()": {
                "lineStart": 65,
                "lineEnd": 77
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.setErrorMessage(String message)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isError(StaplerRequest request)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getErrorMessage(StaplerRequest request)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDynamic(String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 91,
                "lineEnd": 99
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 101,
                "lineEnd": 119
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwner()": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwnerUrl()": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIndicationDescriptors()": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getPermission()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getRemovePermission()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isUnderTest()": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getInstance()": {
                "lineStart": 145,
                "lineEnd": 154
            }
        },
        "5b1e514-MongoDBKnowledgeBase.java": {
            "com.sonyericsson.jenkins.plugins.bfa.db.MongoDBKnowledgeBase$MongoDBKnowledgeBaseDescriptor.doTestConnection(@QueryParameter(\"host\") final String host, @QueryParameter(\"port\") final int port, @QueryParameter(\"dbName\") final String dbName, @QueryParameter(\"userName\") final String userName, @QueryParameter(\"password\") final String password, @QueryParameter(\"tls\") final boolean tls, @QueryParameter(\"retrywrites\") final boolean retryWrites)": {
                "lineStart": 623,
                "lineEnd": 639
            }
        }
    },
    "CVE-2023-43502": {
        "e76950d-AnnotationHelper.java": {
            "com.sonyericsson.jenkins.plugins.bfa.AnnotationHelper.getBefore()": {
                "lineStart": 7,
                "lineEnd": 15
            }
        },
        "b3bf970-CauseManagement.java": {
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIconFileName()": {
                "lineStart": 34,
                "lineEnd": 42
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDisplayName()": {
                "lineStart": 44,
                "lineEnd": 55
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getUrlName()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getImageUrl(String size, String name)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getShallowCauses()": {
                "lineStart": 65,
                "lineEnd": 77
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.setErrorMessage(String message)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isError(StaplerRequest request)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getErrorMessage(StaplerRequest request)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDynamic(String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 91,
                "lineEnd": 99
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 101,
                "lineEnd": 119
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwner()": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwnerUrl()": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIndicationDescriptors()": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getPermission()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getRemovePermission()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isUnderTest()": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getInstance()": {
                "lineStart": 145,
                "lineEnd": 154
            }
        },
        "5b1e514-MongoDBKnowledgeBase.java": {
            "com.sonyericsson.jenkins.plugins.bfa.db.MongoDBKnowledgeBase$MongoDBKnowledgeBaseDescriptor.doTestConnection(@QueryParameter(\"host\") final String host, @QueryParameter(\"port\") final int port, @QueryParameter(\"dbName\") final String dbName, @QueryParameter(\"userName\") final String userName, @QueryParameter(\"password\") final String password, @QueryParameter(\"tls\") final boolean tls, @QueryParameter(\"retrywrites\") final boolean retryWrites)": {
                "lineStart": 623,
                "lineEnd": 639
            }
        }
    },
    "CVE-2023-1664": {
        "ddcfcb15e8-CertificateValidator.java": {
            "org.keycloak.authentication.authenticators.x509.CertificateValidator.validateTrust()": {
                "lineStart": 525,
                "lineEnd": 542
            }
        },
        "911bb5db8f-FileTruststoreProviderFactory.java": {
            "org.keycloak.truststore.FileTruststoreProviderFactory.create(KeycloakSession session)": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory.init(Config.Scope config)": {
                "lineStart": 37,
                "lineEnd": 81
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory.loadStore(String path, String type, char[] password)": {
                "lineStart": 83,
                "lineEnd": 99
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory.postInit(KeycloakSessionFactory factory)": {
                "lineStart": 101,
                "lineEnd": 102
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory.close()": {
                "lineStart": 104,
                "lineEnd": 105
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory.getId()": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory.getConfigMetadata()": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory$TruststoreCertificatesLoader.<init>(KeyStore truststore)": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory$TruststoreCertificatesLoader.readTruststore(KeyStore truststore)": {
                "lineStart": 122,
                "lineEnd": 137
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory$TruststoreCertificatesLoader.readTruststoreEntry(KeyStore truststore, String alias)": {
                "lineStart": 139,
                "lineEnd": 162
            },
            "org.keycloak.truststore.FileTruststoreProviderFactory$TruststoreCertificatesLoader.isSelfSigned(X509Certificate cert)": {
                "lineStart": 164,
                "lineEnd": 179
            }
        }
    },
    "CVE-2023-46227": {
        "b4b485d62-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 147,
                "lineEnd": 188
            }
        }
    },
    "CVE-2020-2153": {
        "500ef0d-BacklogNotifier.java": {
            "hudson.plugins.backlog.BacklogNotifier.perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)": {
                "lineStart": 47,
                "lineEnd": 89
            }
        },
        "df0f585-BacklogProjectProperty.java": {
            "hudson.plugins.backlog.BacklogProjectProperty.getPassword()": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "hudson.plugins.backlog.BacklogProjectProperty.getApiKey()": {
                "lineStart": 55,
                "lineEnd": 57
            }
        },
        "6b3f2c0-BacklogWebdavPublisher.java": {
            "hudson.plugins.backlog.BacklogWebdavPublisher.perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)": {
                "lineStart": 40,
                "lineEnd": 81
            }
        },
        "d433684-BacklogClientFactory.java": {
            "hudson.plugins.backlog.api.v2.BacklogClientFactory.getBacklogClient(BacklogProjectProperty bpp)": {
                "lineStart": 10,
                "lineEnd": 33
            }
        }
    },
    "CVE-2020-7622": {
        "f2fcb0cd1-NettyContext.java": {
            "io.jooby.internal.netty.NettyContext.<init>(ChannelHandlerContext ctx, HttpRequest req, Router router, String path, int bufferSize)": {
                "lineStart": 116,
                "lineEnd": 122
            },
            "io.jooby.internal.netty.NettyContext.getRouter()": {
                "lineStart": 124,
                "lineEnd": 124
            },
            "io.jooby.internal.netty.NettyContext.getAttributes()": {
                "lineStart": 125,
                "lineEnd": 125
            },
            "io.jooby.internal.netty.NettyContext.getMethod()": {
                "lineStart": 126,
                "lineEnd": 126
            },
            "io.jooby.internal.netty.NettyContext.getRoute()": {
                "lineStart": 127,
                "lineEnd": 127
            },
            "io.jooby.internal.netty.NettyContext.setRoute(@Nonnull Route route)": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "io.jooby.internal.netty.NettyContext.pathString()": {
                "lineStart": 132,
                "lineEnd": 132
            },
            "io.jooby.internal.netty.NettyContext.pathMap()": {
                "lineStart": 133,
                "lineEnd": 133
            },
            "io.jooby.internal.netty.NettyContext.setPathMap(@Nonnull Map<String, String> pathMap)": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "io.jooby.internal.netty.NettyContext.isInIoThread()": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "io.jooby.internal.netty.NettyContext.dispatch(@Nonnull Runnable action)": {
                "lineStart": 142,
                "lineEnd": 142
            },
            "io.jooby.internal.netty.NettyContext.dispatch(Executor executor, Runnable action)": {
                "lineStart": 143,
                "lineEnd": 146
            },
            "io.jooby.internal.netty.NettyContext.detach(@Nonnull Route.Handler next)": {
                "lineStart": 148,
                "lineEnd": 150
            },
            "io.jooby.internal.netty.NettyContext.query()": {
                "lineStart": 152,
                "lineEnd": 158
            },
            "io.jooby.internal.netty.NettyContext.form()": {
                "lineStart": 160,
                "lineEnd": 165
            },
            "io.jooby.internal.netty.NettyContext.multipart()": {
                "lineStart": 167,
                "lineEnd": 173
            },
            "io.jooby.internal.netty.NettyContext.header(@Nonnull String name)": {
                "lineStart": 175,
                "lineEnd": 175
            },
            "io.jooby.internal.netty.NettyContext.getRemoteAddress()": {
                "lineStart": 176,
                "lineEnd": 178
            },
            "io.jooby.internal.netty.NettyContext.getProtocol()": {
                "lineStart": 180,
                "lineEnd": 180
            },
            "io.jooby.internal.netty.NettyContext.getScheme()": {
                "lineStart": 181,
                "lineEnd": 181
            },
            "io.jooby.internal.netty.NettyContext.header()": {
                "lineStart": 182,
                "lineEnd": 193
            },
            "io.jooby.internal.netty.NettyContext.body()": {
                "lineStart": 195,
                "lineEnd": 197
            },
            "io.jooby.internal.netty.NettyContext.cookieMap()": {
                "lineStart": 199,
                "lineEnd": 218
            },
            "io.jooby.internal.netty.NettyContext.upgrade(WebSocket.Initializer handler)": {
                "lineStart": 220,
                "lineEnd": 249
            },
            "io.jooby.internal.netty.NettyContext.getResponseCode()": {
                "lineStart": 251,
                "lineEnd": 251
            },
            "io.jooby.internal.netty.NettyContext.setResponseCode(int statusCode)": {
                "lineStart": 252,
                "lineEnd": 254
            },
            "io.jooby.internal.netty.NettyContext.setResponseHeader(@Nonnull String name, @Nonnull String value)": {
                "lineStart": 256,
                "lineEnd": 258
            },
            "io.jooby.internal.netty.NettyContext.removeResponseHeader(@Nonnull String name)": {
                "lineStart": 260,
                "lineEnd": 262
            },
            "io.jooby.internal.netty.NettyContext.removeResponseHeaders()": {
                "lineStart": 264,
                "lineEnd": 266
            },
            "io.jooby.internal.netty.NettyContext.getResponseType()": {
                "lineStart": 268,
                "lineEnd": 268
            },
            "io.jooby.internal.netty.NettyContext.setDefaultResponseType(@Nonnull MediaType contentType)": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "io.jooby.internal.netty.NettyContext.setResponseType(MediaType contentType, Charset charset)": {
                "lineStart": 273,
                "lineEnd": 277
            },
            "io.jooby.internal.netty.NettyContext.setResponseType(@Nonnull String contentType)": {
                "lineStart": 279,
                "lineEnd": 282
            },
            "io.jooby.internal.netty.NettyContext.setResponseLength(long length)": {
                "lineStart": 284,
                "lineEnd": 287
            },
            "io.jooby.internal.netty.NettyContext.getResponseLength()": {
                "lineStart": 289,
                "lineEnd": 291
            },
            "io.jooby.internal.netty.NettyContext.setResponseCookie(@Nonnull Cookie cookie)": {
                "lineStart": 293,
                "lineEnd": 302
            },
            "io.jooby.internal.netty.NettyContext.responseWriter(MediaType type, Charset charset)": {
                "lineStart": 304,
                "lineEnd": 307
            },
            "io.jooby.internal.netty.NettyContext.responseSender()": {
                "lineStart": 309,
                "lineEnd": 313
            },
            "io.jooby.internal.netty.NettyContext.responseStream()": {
                "lineStart": 315,
                "lineEnd": 315
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull String data)": {
                "lineStart": 316,
                "lineEnd": 316
            },
            "io.jooby.internal.netty.NettyContext.send(String data, Charset charset)": {
                "lineStart": 317,
                "lineEnd": 319
            },
            "io.jooby.internal.netty.NettyContext.send(byte[] data)": {
                "lineStart": 321,
                "lineEnd": 323
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull byte[]... data)": {
                "lineStart": 325,
                "lineEnd": 325
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull ByteBuffer[] data)": {
                "lineStart": 326,
                "lineEnd": 326
            },
            "io.jooby.internal.netty.NettyContext.send(ByteBuffer data)": {
                "lineStart": 327,
                "lineEnd": 329
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull ByteBuf data)": {
                "lineStart": 331,
                "lineEnd": 344
            },
            "io.jooby.internal.netty.NettyContext.flush()": {
                "lineStart": 346,
                "lineEnd": 352
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull ReadableByteChannel channel)": {
                "lineStart": 354,
                "lineEnd": 366
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull InputStream in)": {
                "lineStart": 368,
                "lineEnd": 389
            },
            "io.jooby.internal.netty.NettyContext.send(@Nonnull FileChannel file)": {
                "lineStart": 391,
                "lineEnd": 409
            },
            "io.jooby.internal.netty.NettyContext.isResponseStarted()": {
                "lineStart": 411,
                "lineEnd": 413
            },
            "io.jooby.internal.netty.NettyContext.getResetHeadersOnError()": {
                "lineStart": 415,
                "lineEnd": 417
            },
            "io.jooby.internal.netty.NettyContext.setResetHeadersOnError(boolean value)": {
                "lineStart": 419,
                "lineEnd": 422
            },
            "io.jooby.internal.netty.NettyContext.send(StatusCode statusCode)": {
                "lineStart": 424,
                "lineEnd": 432
            },
            "io.jooby.internal.netty.NettyContext.operationComplete(ChannelFuture future)": {
                "lineStart": 434,
                "lineEnd": 446
            },
            "io.jooby.internal.netty.NettyContext.ifSaveSession()": {
                "lineStart": 448,
                "lineEnd": 455
            },
            "io.jooby.internal.netty.NettyContext.newOutputStream()": {
                "lineStart": 457,
                "lineEnd": 460
            },
            "io.jooby.internal.netty.NettyContext.destroy(Throwable cause)": {
                "lineStart": 462,
                "lineEnd": 499
            },
            "io.jooby.internal.netty.NettyContext.register(FileUpload upload)": {
                "lineStart": 501,
                "lineEnd": 508
            },
            "io.jooby.internal.netty.NettyContext.decodeForm(HttpRequest req, Formdata form)": {
                "lineStart": 510,
                "lineEnd": 537
            },
            "io.jooby.internal.netty.NettyContext.release(HttpRequest req)": {
                "lineStart": 539,
                "lineEnd": 548
            },
            "io.jooby.internal.netty.NettyContext.responseLength()": {
                "lineStart": 550,
                "lineEnd": 553
            },
            "io.jooby.internal.netty.NettyContext.prepareChunked()": {
                "lineStart": 555,
                "lineEnd": 565
            },
            "io.jooby.internal.netty.NettyContext.toString()": {
                "lineStart": 567,
                "lineEnd": 569
            }
        }
    },
    "CVE-2022-31684": {
        "13213cc43-AbstractChannelMetricsHandler.java": {
            "reactor.netty.channel.AbstractChannelMetricsHandler.channelActive(ChannelHandlerContext ctx)": {
                "lineStart": 22,
                "lineEnd": 35
            },
            "reactor.netty.channel.AbstractChannelMetricsHandler.channelInactive(ChannelHandlerContext ctx)": {
                "lineStart": 37,
                "lineEnd": 50
            },
            "reactor.netty.channel.AbstractChannelMetricsHandler.channelRead(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 64,
                "lineEnd": 90
            },
            "reactor.netty.channel.AbstractChannelMetricsHandler.write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)": {
                "lineStart": 92,
                "lineEnd": 118
            },
            "reactor.netty.channel.AbstractChannelMetricsHandler.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)": {
                "lineStart": 120,
                "lineEnd": 130
            }
        },
        "fc0b697c4-PooledConnectionProvider.java": {
            "reactor.netty.resources.PooledConnectionProvider.<init>(Builder builder)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "reactor.netty.resources.PooledConnectionProvider.<init>(Builder builder, @Nullable Clock clock)": {
                "lineStart": 65,
                "lineEnd": 79
            },
            "reactor.netty.resources.PooledConnectionProvider.acquire(TransportConfig config, ConnectionObserver connectionObserver, @Nullable Supplier<? extends SocketAddress> remote, @Nullable AddressResolverGroup<?> resolverGroup)": {
                "lineStart": 81,
                "lineEnd": 138
            },
            "reactor.netty.resources.PooledConnectionProvider.disposeLater()": {
                "lineStart": 140,
                "lineEnd": 166
            },
            "reactor.netty.resources.PooledConnectionProvider.disposeWhen(SocketAddress address)": {
                "lineStart": 168,
                "lineEnd": 183
            },
            "reactor.netty.resources.PooledConnectionProvider.isDisposed()": {
                "lineStart": 185,
                "lineEnd": 187
            },
            "reactor.netty.resources.PooledConnectionProvider.maxConnections()": {
                "lineStart": 189,
                "lineEnd": 191
            },
            "reactor.netty.resources.PooledConnectionProvider.maxConnectionsPerHost()": {
                "lineStart": 193,
                "lineEnd": 195
            },
            "reactor.netty.resources.PooledConnectionProvider.mutate()": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "reactor.netty.resources.PooledConnectionProvider.name()": {
                "lineStart": 201,
                "lineEnd": 203
            },
            "reactor.netty.resources.PooledConnectionProvider.onDispose(Mono<Void> disposeMono)": {
                "lineStart": 205,
                "lineEnd": 207
            },
            "reactor.netty.resources.PooledConnectionProvider.createDisposableAcquire(TransportConfig config, ConnectionObserver connectionObserver, long pendingAcquireTimeout, InstrumentedPool<T> pool, MonoSink<Connection> sink)": {
                "lineStart": 209,
                "lineEnd": 209
            },
            "reactor.netty.resources.PooledConnectionProvider.createPool(TransportConfig config, PoolFactory<T> poolFactory, SocketAddress remoteAddress, AddressResolverGroup<?> resolverGroup)": {
                "lineStart": 210,
                "lineEnd": 210
            },
            "reactor.netty.resources.PooledConnectionProvider.poolFactory(SocketAddress remoteAddress)": {
                "lineStart": 211,
                "lineEnd": 213
            },
            "reactor.netty.resources.PooledConnectionProvider.registerDefaultMetrics(String id, SocketAddress remoteAddress, InstrumentedPool.PoolMetrics metrics)": {
                "lineStart": 215,
                "lineEnd": 217
            },
            "reactor.netty.resources.PooledConnectionProvider.compareAddresses(SocketAddress origin, SocketAddress target)": {
                "lineStart": 219,
                "lineEnd": 235
            },
            "reactor.netty.resources.PooledConnectionProvider.logPoolState(Channel channel, InstrumentedPool<? extends Connection> pool, String msg)": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "reactor.netty.resources.PooledConnectionProvider.logPoolState(Channel channel, InstrumentedPool<? extends Connection> pool, String msg, @Nullable Throwable t)": {
                "lineStart": 241,
                "lineEnd": 244
            },
            "reactor.netty.resources.PooledConnectionProvider.scheduleInactivePoolsDisposal()": {
                "lineStart": 246,
                "lineEnd": 251
            },
            "reactor.netty.resources.PooledConnectionProvider.disposeInactivePoolsInBackground()": {
                "lineStart": 253,
                "lineEnd": 272
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.<init>(ConnectionPoolSpec<?> conf, Duration disposeTimeout)": {
                "lineStart": 317,
                "lineEnd": 319
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.<init>(ConnectionPoolSpec<?> conf, Duration disposeTimeout, @Nullable Clock clock)": {
                "lineStart": 321,
                "lineEnd": 335
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.newPool(Publisher<T> allocator, @Nullable reactor.pool.AllocationStrategy allocationStrategy, Function<T, Publisher<Void>> destroyHandler, BiPredicate<T, PooledRefMetadata> evictionPredicate)": {
                "lineStart": 337,
                "lineEnd": 343
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.newPool(Publisher<T> allocator, @Nullable reactor.pool.AllocationStrategy allocationStrategy, Function<T, Publisher<Void>> destroyHandler, BiPredicate<T, PooledRefMetadata> evictionPredicate, Function<PoolConfig<T>, InstrumentedPool<T>> poolFactory)": {
                "lineStart": 345,
                "lineEnd": 351
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.newPoolInternal(Publisher<T> allocator, Function<T, Publisher<Void>> destroyHandler, BiPredicate<T, PooledRefMetadata> evictionPredicate)": {
                "lineStart": 353,
                "lineEnd": 387
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.allocationStrategy()": {
                "lineStart": 389,
                "lineEnd": 391
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.maxIdleTime()": {
                "lineStart": 393,
                "lineEnd": 395
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.maxLifeTime()": {
                "lineStart": 397,
                "lineEnd": 399
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.toString()": {
                "lineStart": 401,
                "lineEnd": 403
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.<init>(AllocationStrategy<?> delegate)": {
                "lineStart": 407,
                "lineEnd": 409
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.estimatePermitCount()": {
                "lineStart": 411,
                "lineEnd": 413
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.getPermits(int desired)": {
                "lineStart": 415,
                "lineEnd": 417
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.permitGranted()": {
                "lineStart": 419,
                "lineEnd": 421
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.permitMinimum()": {
                "lineStart": 423,
                "lineEnd": 425
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.permitMaximum()": {
                "lineStart": 427,
                "lineEnd": 429
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.returnPermits(int returned)": {
                "lineStart": 431,
                "lineEnd": 433
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolKey.<init>(SocketAddress holder, int pipelineKey)": {
                "lineStart": 443,
                "lineEnd": 447
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolKey.equals(Object o)": {
                "lineStart": 449,
                "lineEnd": 460
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolKey.hashCode()": {
                "lineStart": 462,
                "lineEnd": 464
            }
        },
        "efd1f2f09-AddressResolverGroupMetrics.java": {
            "reactor.netty.transport.AddressResolverGroupMetrics.newResolver(EventExecutor executor)": {
                "lineStart": 34,
                "lineEnd": 88
            }
        },
        "ec5c2af63-ServerTransport.java": {
            "reactor.netty.transport.ServerTransport$Acceptor.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)": {
                "lineStart": 236,
                "lineEnd": 250
            },
            "reactor.netty.transport.ServerTransport$Acceptor.forceClose(Channel child, Throwable t)": {
                "lineStart": 256,
                "lineEnd": 259
            }
        },
        "2416bb56a-TransportConfig.java": {
            "reactor.netty.transport.TransportConfig$TransportChannelInitializer.initChannel(Channel channel)": {
                "lineStart": 190,
                "lineEnd": 227
            }
        },
        "284232897-TransportConnector.java": {
            "reactor.netty.transport.TransportConnector.setChannelOptions(Channel channel, Map<ChannelOption<?>, ?> options, boolean isDomainSocket)": {
                "lineStart": 82,
                "lineEnd": 102
            }
        },
        "c16c33763-HttpOperations.java": {
            "reactor.netty.http.HttpOperations.send(Publisher<? extends ByteBuf> source)": {
                "lineStart": 69,
                "lineEnd": 101
            },
            "reactor.netty.http.HttpOperations.sendObject(Object message)": {
                "lineStart": 103,
                "lineEnd": 136
            }
        },
        "19e0b0ca9-AbstractHttpClientMetricsHandler.java": {
            "reactor.netty.http.client.AbstractHttpClientMetricsHandler.write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)": {
                "lineStart": 45,
                "lineEnd": 75
            },
            "reactor.netty.http.client.AbstractHttpClientMetricsHandler.channelRead(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 77,
                "lineEnd": 97
            },
            "reactor.netty.http.client.AbstractHttpClientMetricsHandler.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)": {
                "lineStart": 99,
                "lineEnd": 109
            }
        },
        "16e04bb01-AbstractHttpServerMetricsHandler.java": {
            "reactor.netty.http.server.AbstractHttpServerMetricsHandler.channelActive(ChannelHandlerContext ctx)": {
                "lineStart": 37,
                "lineEnd": 50
            },
            "reactor.netty.http.server.AbstractHttpServerMetricsHandler.channelInactive(ChannelHandlerContext ctx)": {
                "lineStart": 52,
                "lineEnd": 65
            },
            "reactor.netty.http.server.AbstractHttpServerMetricsHandler.write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)": {
                "lineStart": 67,
                "lineEnd": 127
            },
            "reactor.netty.http.server.AbstractHttpServerMetricsHandler.channelRead(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 129,
                "lineEnd": 166
            },
            "reactor.netty.http.server.AbstractHttpServerMetricsHandler.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)": {
                "lineStart": 168,
                "lineEnd": 183
            }
        },
        "a35fa2f3e-WebsocketServerOperations.java": {
            "reactor.netty.http.server.WebsocketServerOperations.<init>(String wsUrl, WebsocketServerSpec websocketServerSpec, HttpServerOperations replaced)": {
                "lineStart": 39,
                "lineEnd": 88
            }
        }
    },
    "CVE-2021-29506": {
        "75c61c5f3-NavigateResource.java": {
            "com.graphhopper.navigation.NavigateResource.getPointsFromRequest(HttpServletRequest httpServletRequest, String profile)": {
                "lineStart": 116,
                "lineEnd": 127
            }
        }
    },
    "CVE-2022-2191": {
        "03237c035e-AbstractByteBufferPool.java": {
            "org.eclipse.jetty.io.AbstractByteBufferPool.<init>(int factor, int maxQueueLength, long maxHeapMemory, long maxDirectMemory)": {
                "lineStart": 17,
                "lineEnd": 22
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getCapacityFactor()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getMaxQueueLength()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.decrementMemory(ByteBuffer buffer)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.incrementMemory(ByteBuffer buffer)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.updateMemory(ByteBuffer buffer, boolean addOrSub)": {
                "lineStart": 40,
                "lineEnd": 44
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.releaseExcessMemory(boolean direct, Consumer<Boolean> clearFn)": {
                "lineStart": 46,
                "lineEnd": 55
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getDirectMemory()": {
                "lineStart": 57,
                "lineEnd": 60
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getHeapMemory()": {
                "lineStart": 62,
                "lineEnd": 65
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getMaxDirectMemory()": {
                "lineStart": 67,
                "lineEnd": 70
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getMaxHeapMemory()": {
                "lineStart": 72,
                "lineEnd": 75
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.getMemory(boolean direct)": {
                "lineStart": 77,
                "lineEnd": 80
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.updateMemory(boolean direct)": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "org.eclipse.jetty.io.AbstractByteBufferPool.clear()": {
                "lineStart": 86,
                "lineEnd": 90
            }
        },
        "0cdb052353-ArrayByteBufferPool.java": {
            "org.eclipse.jetty.io.ArrayByteBufferPool.<init>()": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.<init>(int minCapacity, int factor, int maxCapacity)": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.<init>(int minCapacity, int factor, int maxCapacity, int maxQueueLength)": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.<init>(int minCapacity, int factor, int maxCapacity, int maxQueueLength, long maxHeapMemory, long maxDirectMemory)": {
                "lineStart": 35,
                "lineEnd": 57
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int size, boolean direct)": {
                "lineStart": 59,
                "lineEnd": 70
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.release(ByteBuffer buffer)": {
                "lineStart": 72,
                "lineEnd": 94
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.newBucket(int key, boolean direct)": {
                "lineStart": 96,
                "lineEnd": 98
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.clear()": {
                "lineStart": 100,
                "lineEnd": 107
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.releaseMemory(boolean direct)": {
                "lineStart": 109,
                "lineEnd": 131
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity)": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.capacityFor(int bucket)": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity, boolean direct)": {
                "lineStart": 141,
                "lineEnd": 151
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.getDirectByteBufferCount()": {
                "lineStart": 153,
                "lineEnd": 156
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.getHeapByteBufferCount()": {
                "lineStart": 158,
                "lineEnd": 161
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.getByteBufferCount(boolean direct)": {
                "lineStart": 163,
                "lineEnd": 165
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.bucketsFor(boolean direct)": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.isDetailedDump()": {
                "lineStart": 171,
                "lineEnd": 173
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.setDetailedDump(boolean detailedDump)": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.dump(Appendable out, String indent)": {
                "lineStart": 179,
                "lineEnd": 196
            },
            "org.eclipse.jetty.io.ArrayByteBufferPool.toString()": {
                "lineStart": 198,
                "lineEnd": 200
            }
        },
        "3fe42c147e-ArrayRetainableByteBufferPool.java": {
            "org.eclipse.jetty.io.ArrayRetainableByteBufferPool.<init>()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.eclipse.jetty.io.ArrayRetainableByteBufferPool.<init>(int minCapacity, int factor, int maxCapacity, int maxBucketSize)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.eclipse.jetty.io.ArrayRetainableByteBufferPool.<init>(int minCapacity, int factor, int maxCapacity, int maxBucketSize, long maxHeapMemory, long maxDirectMemory, Function<Integer, Integer> bucketIndexFor, Function<Integer, Integer> bucketCapacity)": {
                "lineStart": 40,
                "lineEnd": 73
            }
        },
        "aeb34eab9c-SslConnection.java": {
            "org.eclipse.jetty.io.ssl.SslConnection.releaseEncryptedInputBuffer()": {
                "lineStart": 264,
                "lineEnd": 270
            },
            "org.eclipse.jetty.io.ssl.SslConnection.releaseDecryptedInputBuffer()": {
                "lineStart": 272,
                "lineEnd": 278
            },
            "org.eclipse.jetty.io.ssl.SslConnection.releaseEncryptedOutputBuffer()": {
                "lineStart": 280,
                "lineEnd": 289
            },
            "org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.fill(ByteBuffer buffer)": {
                "lineStart": 404,
                "lineEnd": 596
            },
            "org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.flush(ByteBuffer... appOuts)": {
                "lineStart": 732,
                "lineEnd": 911
            },
            "org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.doShutdownOutput()": {
                "lineStart": 996,
                "lineEnd": 1054
            },
            "org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.doClose()": {
                "lineStart": 1092,
                "lineEnd": 1096
            },
            "org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint$IncompleteWriteCallback.succeeded()": {
                "lineStart": 1232,
                "lineEnd": 1255
            },
            "org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint$IncompleteWriteCallback.failed(final Throwable x)": {
                "lineStart": 1257,
                "lineEnd": 1280
            }
        }
    },
    "CVE-2022-27207": {
        "8869e8c-AbstractBuildStatChartDimension.java": {
            "hudson.plugins.global_build_stats.model.AbstractBuildStatChartDimension$BuildCounterChartDimension.getRenderer()": {
                "lineStart": 74,
                "lineEnd": 102
            }
        }
    },
    "CVE-2024-22369": {
        "00aac3c59a2-JdbcAggregationRepository.java": {
            "org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.get(final String key, final String repositoryName, final CamelContext camelContext)": {
                "lineStart": 254,
                "lineEnd": 288
            }
        },
        "933e20f5629-JdbcCamelCodec.java": {
            "org.apache.camel.processor.aggregate.jdbc.JdbcCamelCodec.unmarshallExchange(CamelContext camelContext, byte[] buffer)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.apache.camel.processor.aggregate.jdbc.JdbcCamelCodec.unmarshallExchange(CamelContext camelContext, InputStream inputStream)": {
                "lineStart": 43,
                "lineEnd": 57
            },
            "org.apache.camel.processor.aggregate.jdbc.JdbcCamelCodec.decode(CamelContext camelContext, InputStream bytesIn)": {
                "lineStart": 66,
                "lineEnd": 78
            }
        }
    },
    "CVE-2021-29043": {
        "40e67ab50c99c-S3StoreConfiguration.java": {
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.accessKey()": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.secretKey()": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.bucketName()": {
                "lineStart": 9,
                "lineEnd": 10
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.signerOverride()": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.s3PathStyle()": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.s3Endpoint()": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.s3Region()": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.connectionProtocol()": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.s3StorageClass()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.connectionTimeout()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.httpClientMaxConnections()": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.httpClientMaxErrorRetry()": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.corePoolSize()": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.maxPoolSize()": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.cacheDirCleanUpExpunge()": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.cacheDirCleanUpFrequency()": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.minimumUploadPartSize()": {
                "lineStart": 24,
                "lineEnd": 24
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.multipartUploadThreshold()": {
                "lineStart": 25,
                "lineEnd": 25
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.proxyHost()": {
                "lineStart": 26,
                "lineEnd": 26
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.proxyPort()": {
                "lineStart": 27,
                "lineEnd": 27
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.proxyAuthType()": {
                "lineStart": 28,
                "lineEnd": 28
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.proxyUsername()": {
                "lineStart": 29,
                "lineEnd": 29
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.proxyPassword()": {
                "lineStart": 30,
                "lineEnd": 30
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.ntlmProxyDomain()": {
                "lineStart": 31,
                "lineEnd": 31
            },
            "com.liferay.portal.store.s3.configuration.S3StoreConfiguration.ntlmProxyWorkstation()": {
                "lineStart": 32,
                "lineEnd": 32
            }
        }
    },
    "CVE-2023-31064": {
        "2f71b9629-ProcessServiceImpl.java": {
            "org.apache.inlong.manager.workflow.core.impl.ProcessServiceImpl.start(String name, String applicant, ProcessForm form)": {
                "lineStart": 25,
                "lineEnd": 32
            },
            "org.apache.inlong.manager.workflow.core.impl.ProcessServiceImpl.continueProcess(Integer processId, String operator, String remark)": {
                "lineStart": 34,
                "lineEnd": 52
            },
            "org.apache.inlong.manager.workflow.core.impl.ProcessServiceImpl.cancel(Integer processId, String operator, String remark)": {
                "lineStart": 54,
                "lineEnd": 66
            }
        }
    },
    "CVE-2022-21126": {
        "37c200cc5-CoordinateSortedPairInfoMap.java": {
            "htsjdk.samtools.CoordinateSortedPairInfoMap.<init>(final int maxOpenFiles, final Codec<KEY, REC> elementCodec)": {
                "lineStart": 26,
                "lineEnd": 30
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.remove(final int sequenceIndex, final KEY key)": {
                "lineStart": 32,
                "lineEnd": 36
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.ensureSequenceLoaded(final int sequenceIndex)": {
                "lineStart": 38,
                "lineEnd": 99
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.put(final int sequenceIndex, final KEY key, final REC record)": {
                "lineStart": 101,
                "lineEnd": 118
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.makeFileForSequence(final int index)": {
                "lineStart": 120,
                "lineEnd": 124
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.getOutputStreamForSequence(final int mateSequenceIndex)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.size()": {
                "lineStart": 130,
                "lineEnd": 140
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.sizeInRam()": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap.iterator()": {
                "lineStart": 146,
                "lineEnd": 150
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.<init>()": {
                "lineStart": 157,
                "lineEnd": 163
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.advanceToNextNonEmptyReferenceIndex()": {
                "lineStart": 165,
                "lineEnd": 177
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.createIteratorForMapInRam()": {
                "lineStart": 179,
                "lineEnd": 181
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.close()": {
                "lineStart": 183,
                "lineEnd": 186
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.hasNext()": {
                "lineStart": 188,
                "lineEnd": 194
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.next()": {
                "lineStart": 196,
                "lineEnd": 202
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$MapIterator.remove()": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$Codec.setOutputStream(OutputStream os)": {
                "lineStart": 211,
                "lineEnd": 211
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$Codec.setInputStream(InputStream is)": {
                "lineStart": 212,
                "lineEnd": 212
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$Codec.encode(KEY key, REC record)": {
                "lineStart": 213,
                "lineEnd": 213
            },
            "htsjdk.samtools.CoordinateSortedPairInfoMap$Codec.decode()": {
                "lineStart": 214,
                "lineEnd": 214
            }
        },
        "81351e297-IOUtil.java": {
            "htsjdk.samtools.util.IOUtil.createTempDir(final String prefix, final String suffix)": {
                "lineStart": 672,
                "lineEnd": 689
            }
        }
    },
    "CVE-2023-24620": {
        "0000000-SafeYamlConfig.java": {
            "htsjdk.samtools.util.IOUtil.setCompressionLevel(final int compressionLevel)": {
                "lineStart": 73,
                "lineEnd": 79
            },
            "htsjdk.samtools.util.IOUtil.getCompressionLevel()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "htsjdk.samtools.util.IOUtil.toBufferedStream(final InputStream stream)": {
                "lineStart": 85,
                "lineEnd": 93
            },
            "htsjdk.samtools.util.IOUtil.transferByStream(final InputStream in, final OutputStream out, final long bytes)": {
                "lineStart": 95,
                "lineEnd": 111
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferOutputStream(final OutputStream os)": {
                "lineStart": 113,
                "lineEnd": 115
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferOutputStream(final OutputStream os, final int bufferSize)": {
                "lineStart": 117,
                "lineEnd": 120
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferedSeekableStream(final SeekableStream stream, final int bufferSize)": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferedSeekableStream(final SeekableStream stream)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferedSeekableStream(final File file)": {
                "lineStart": 130,
                "lineEnd": 138
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferedSeekableStream(final URL url)": {
                "lineStart": 140,
                "lineEnd": 142
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferInputStream(final InputStream is)": {
                "lineStart": 144,
                "lineEnd": 146
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferInputStream(final InputStream is, final int bufferSize)": {
                "lineStart": 148,
                "lineEnd": 151
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferReader(Reader reader, final int bufferSize)": {
                "lineStart": 153,
                "lineEnd": 156
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferReader(final Reader reader)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferWriter(Writer writer, final int bufferSize)": {
                "lineStart": 162,
                "lineEnd": 165
            },
            "htsjdk.samtools.util.IOUtil.maybeBufferWriter(final Writer writer)": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "htsjdk.samtools.util.IOUtil.deleteFiles(final File... files)": {
                "lineStart": 171,
                "lineEnd": 179
            },
            "htsjdk.samtools.util.IOUtil.deleteFiles(final Iterable<File> files)": {
                "lineStart": 181,
                "lineEnd": 189
            },
            "htsjdk.samtools.util.IOUtil.deletePaths(final Path... paths)": {
                "lineStart": 191,
                "lineEnd": 196
            },
            "htsjdk.samtools.util.IOUtil.deletePaths(final Iterable<Path> paths)": {
                "lineStart": 198,
                "lineEnd": 204
            },
            "htsjdk.samtools.util.IOUtil.deletePath(Path path)": {
                "lineStart": 206,
                "lineEnd": 214
            },
            "htsjdk.samtools.util.IOUtil.isRegularPath(final File file)": {
                "lineStart": 216,
                "lineEnd": 218
            },
            "htsjdk.samtools.util.IOUtil.isRegularPath(final Path path)": {
                "lineStart": 220,
                "lineEnd": 222
            },
            "htsjdk.samtools.util.IOUtil.newTempFile(final String prefix, final String suffix, final File[] tmpDirs, final long minBytesFree)": {
                "lineStart": 224,
                "lineEnd": 236
            },
            "htsjdk.samtools.util.IOUtil.newTempFile(final String prefix, final String suffix, final File[] tmpDirs)": {
                "lineStart": 238,
                "lineEnd": 240
            },
            "htsjdk.samtools.util.IOUtil.getDefaultTmpDir()": {
                "lineStart": 242,
                "lineEnd": 247
            },
            "htsjdk.samtools.util.IOUtil.newTempPath(final String prefix, final String suffix, final Path[] tmpDirs, final long minBytesFree)": {
                "lineStart": 249,
                "lineEnd": 261
            },
            "htsjdk.samtools.util.IOUtil.newTempPath(final String prefix, final String suffix, final Path[] tmpDirs)": {
                "lineStart": 263,
                "lineEnd": 265
            },
            "htsjdk.samtools.util.IOUtil.getDefaultTmpDirPath()": {
                "lineStart": 267,
                "lineEnd": 284
            },
            "htsjdk.samtools.util.IOUtil.deleteOnExit(final Path path)": {
                "lineStart": 286,
                "lineEnd": 288
            },
            "htsjdk.samtools.util.IOUtil.basename(final File f)": {
                "lineStart": 290,
                "lineEnd": 301
            },
            "htsjdk.samtools.util.IOUtil.assertInputIsValid(final String input)": {
                "lineStart": 303,
                "lineEnd": 312
            },
            "htsjdk.samtools.util.IOUtil.isUrl(final String input)": {
                "lineStart": 314,
                "lineEnd": 323
            },
            "htsjdk.samtools.util.IOUtil.assertFileIsReadable(final File file)": {
                "lineStart": 325,
                "lineEnd": 327
            },
            "htsjdk.samtools.util.IOUtil.assertFileIsReadable(final Path path)": {
                "lineStart": 329,
                "lineEnd": 345
            },
            "htsjdk.samtools.util.IOUtil.assertFilesAreReadable(final List<File> files)": {
                "lineStart": 347,
                "lineEnd": 348
            },
            "htsjdk.samtools.util.IOUtil.assertPathsAreReadable(final List<Path> paths)": {
                "lineStart": 348,
                "lineEnd": 349
            },
            "htsjdk.samtools.util.IOUtil.assertInputsAreValid(final List<String> inputs)": {
                "lineStart": 349,
                "lineEnd": 350
            },
            "htsjdk.samtools.util.IOUtil.assertFileIsWritable(final File file)": {
                "lineStart": 350,
                "lineEnd": 378
            },
            "htsjdk.samtools.util.IOUtil.assertFilesAreWritable(final List<File> files)": {
                "lineStart": 380,
                "lineEnd": 381
            },
            "htsjdk.samtools.util.IOUtil.assertDirectoryIsWritable(final File dir)": {
                "lineStart": 381,
                "lineEnd": 384
            },
            "htsjdk.samtools.util.IOUtil.assertDirectoryIsWritable(final Path dir)": {
                "lineStart": 386,
                "lineEnd": 403
            },
            "htsjdk.samtools.util.IOUtil.assertDirectoryIsReadable(final File dir)": {
                "lineStart": 405,
                "lineEnd": 422
            },
            "htsjdk.samtools.util.IOUtil.assertFilesEqual(final File f1, final File f2)": {
                "lineStart": 424,
                "lineEnd": 450
            },
            "htsjdk.samtools.util.IOUtil.assertFileSizeNonZero(final File file)": {
                "lineStart": 452,
                "lineEnd": 457
            },
            "htsjdk.samtools.util.IOUtil.openFileForReading(final File file)": {
                "lineStart": 459,
                "lineEnd": 461
            },
            "htsjdk.samtools.util.IOUtil.openFileForReading(final Path path)": {
                "lineStart": 463,
                "lineEnd": 479
            },
            "htsjdk.samtools.util.IOUtil.openGzipFileForReading(final File file)": {
                "lineStart": 481,
                "lineEnd": 483
            },
            "htsjdk.samtools.util.IOUtil.openGzipFileForReading(final Path path)": {
                "lineStart": 485,
                "lineEnd": 494
            },
            "htsjdk.samtools.util.IOUtil.openFileForWriting(final File file)": {
                "lineStart": 496,
                "lineEnd": 498
            },
            "htsjdk.samtools.util.IOUtil.openFileForWriting(final File file, final boolean append)": {
                "lineStart": 500,
                "lineEnd": 502
            },
            "htsjdk.samtools.util.IOUtil.openFileForWriting(final Path path, OpenOption... openOptions)": {
                "lineStart": 504,
                "lineEnd": 518
            },
            "htsjdk.samtools.util.IOUtil.hasGzipFileExtension(Path path)": {
                "lineStart": 520,
                "lineEnd": 524
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedWriting(final File file, final boolean append)": {
                "lineStart": 526,
                "lineEnd": 528
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedWriting(final Path path, final OpenOption... openOptions)": {
                "lineStart": 530,
                "lineEnd": 532
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedWriting(final File file)": {
                "lineStart": 534,
                "lineEnd": 536
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedUtf8Writing(final File file)": {
                "lineStart": 538,
                "lineEnd": 540
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedUtf8Writing(final Path path)": {
                "lineStart": 542,
                "lineEnd": 544
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedUtf8Reading(final File file)": {
                "lineStart": 546,
                "lineEnd": 548
            },
            "htsjdk.samtools.util.IOUtil.openGzipFileForWriting(final File file, final boolean append)": {
                "lineStart": 550,
                "lineEnd": 552
            },
            "htsjdk.samtools.util.IOUtil.getAppendOpenOption(boolean append)": {
                "lineStart": 554,
                "lineEnd": 556
            },
            "htsjdk.samtools.util.IOUtil.openGzipFileForWriting(final Path path, final OpenOption... openOptions)": {
                "lineStart": 558,
                "lineEnd": 573
            },
            "htsjdk.samtools.util.IOUtil.openFileForMd5CalculatingWriting(final File file)": {
                "lineStart": 575,
                "lineEnd": 577
            },
            "htsjdk.samtools.util.IOUtil.openFileForMd5CalculatingWriting(final Path file)": {
                "lineStart": 579,
                "lineEnd": 581
            },
            "htsjdk.samtools.util.IOUtil.copyStream(final InputStream input, final OutputStream output)": {
                "lineStart": 583,
                "lineEnd": 596
            },
            "htsjdk.samtools.util.IOUtil.copyFile(final File input, final File output)": {
                "lineStart": 598,
                "lineEnd": 610
            },
            "htsjdk.samtools.util.IOUtil.getFilesMatchingRegexp(final File directory, final String regexp)": {
                "lineStart": 612,
                "lineEnd": 615
            },
            "htsjdk.samtools.util.IOUtil.getFilesMatchingRegexp(final File directory, final Pattern regexp)": {
                "lineStart": 617,
                "lineEnd": 626
            },
            "htsjdk.samtools.util.IOUtil.deleteDirectoryTree(final File fileOrDirectory)": {
                "lineStart": 628,
                "lineEnd": 639
            },
            "htsjdk.samtools.util.IOUtil.sizeOfTree(final File fileOrDirectory)": {
                "lineStart": 641,
                "lineEnd": 651
            },
            "htsjdk.samtools.util.IOUtil.copyDirectoryTree(final File fileOrDirectory, final File destination)": {
                "lineStart": 653,
                "lineEnd": 670
            },
            "htsjdk.samtools.util.IOUtil.createTempDir(final String prefix, final String suffix)": {
                "lineStart": 672,
                "lineEnd": 689
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedReading(final File file)": {
                "lineStart": 691,
                "lineEnd": 693
            },
            "htsjdk.samtools.util.IOUtil.openFileForBufferedReading(final Path path)": {
                "lineStart": 695,
                "lineEnd": 697
            },
            "htsjdk.samtools.util.IOUtil.makeFileNameSafe(final String str)": {
                "lineStart": 699,
                "lineEnd": 701
            },
            "htsjdk.samtools.util.IOUtil.fileSuffix(final File f)": {
                "lineStart": 703,
                "lineEnd": 713
            },
            "htsjdk.samtools.util.IOUtil.getFullCanonicalPath(final File file)": {
                "lineStart": 715,
                "lineEnd": 731
            },
            "htsjdk.samtools.util.IOUtil.readFully(final InputStream in)": {
                "lineStart": 733,
                "lineEnd": 750
            },
            "htsjdk.samtools.util.IOUtil.readLines(final File f)": {
                "lineStart": 752,
                "lineEnd": 778
            },
            "htsjdk.samtools.util.IOUtil.slurpLines(final File file)": {
                "lineStart": 780,
                "lineEnd": 782
            },
            "htsjdk.samtools.util.IOUtil.slurpLines(final InputStream is)": {
                "lineStart": 784,
                "lineEnd": 786
            },
            "htsjdk.samtools.util.IOUtil.slurp(final File file)": {
                "lineStart": 788,
                "lineEnd": 790
            },
            "htsjdk.samtools.util.IOUtil.slurp(final InputStream is)": {
                "lineStart": 792,
                "lineEnd": 794
            },
            "htsjdk.samtools.util.IOUtil.slurp(final InputStream is, final Charset charSet)": {
                "lineStart": 796,
                "lineEnd": 799
            },
            "htsjdk.samtools.util.IOUtil.tokenSlurp(final InputStream is, final Charset charSet, final String delimiterPattern)": {
                "lineStart": 801,
                "lineEnd": 815
            },
            "htsjdk.samtools.util.IOUtil.unrollFiles(final Collection<File> inputs, final String... extensions)": {
                "lineStart": 817,
                "lineEnd": 820
            },
            "htsjdk.samtools.util.IOUtil.unrollPaths(final Collection<Path> inputs, final String... extensions)": {
                "lineStart": 822,
                "lineEnd": 864
            },
            "htsjdk.samtools.util.IOUtil.hasScheme(String uriString)": {
                "lineStart": 866,
                "lineEnd": 874
            },
            "htsjdk.samtools.util.IOUtil.getPath(String uriString)": {
                "lineStart": 876,
                "lineEnd": 890
            },
            "htsjdk.samtools.util.IOUtil.getPaths(List<String> uriStrings)": {
                "lineStart": 892,
                "lineEnd": 903
            },
            "htsjdk.samtools.util.IOUtil.toPath(File fileOrNull)": {
                "lineStart": 905,
                "lineEnd": 907
            },
            "htsjdk.samtools.util.IOUtil.filesToPaths(Collection<File> files)": {
                "lineStart": 909,
                "lineEnd": 911
            },
            "htsjdk.samtools.util.IOUtil.isGZIPInputStream(final InputStream stream)": {
                "lineStart": 913,
                "lineEnd": 937
            },
            "htsjdk.samtools.util.IOUtil.addExtension(Path path, String extension)": {
                "lineStart": 939,
                "lineEnd": 941
            },
            "htsjdk.samtools.util.IOUtil.isBlockCompressed(final Path path, final boolean checkExtension)": {
                "lineStart": 943,
                "lineEnd": 952
            },
            "htsjdk.samtools.util.IOUtil.isBlockCompressed(final Path path)": {
                "lineStart": 954,
                "lineEnd": 956
            },
            "htsjdk.samtools.util.IOUtil.hasBlockCompressedExtension(final String fileName)": {
                "lineStart": 958,
                "lineEnd": 967
            },
            "htsjdk.samtools.util.IOUtil.hasBlockCompressedExtension(final Path path)": {
                "lineStart": 969,
                "lineEnd": 971
            },
            "htsjdk.samtools.util.IOUtil.hasBlockCompressedExtension(final File file)": {
                "lineStart": 973,
                "lineEnd": 975
            },
            "htsjdk.samtools.util.IOUtil.hasBlockCompressedExtension(final URI uri)": {
                "lineStart": 977,
                "lineEnd": 980
            },
            "htsjdk.samtools.util.IOUtil.stripQueryStringIfPathIsAnHttpUrl(String path)": {
                "lineStart": 982,
                "lineEnd": 992
            },
            "htsjdk.samtools.util.IOUtil.recursiveDelete(final Path directory)": {
                "lineStart": 994,
                "lineEnd": 1016
            }
        },
        "78edd05-YamlConfig.java": {
            "com.esotericsoftware.yamlbeans.YamlConfig.<init>()": {
                "lineStart": 27,
                "lineEnd": 34
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setAllowDuplicates(boolean allowDuplicates)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setClassTag(String tag, Class type)": {
                "lineStart": 40,
                "lineEnd": 46
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setScalarSerializer(Class type, ScalarSerializer serializer)": {
                "lineStart": 48,
                "lineEnd": 52
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPropertyElementType(Class type, String propertyName, Class elementType)": {
                "lineStart": 54,
                "lineEnd": 67
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPropertyDefaultType(Class type, String propertyName, Class defaultType)": {
                "lineStart": 69,
                "lineEnd": 78
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setBeanProperties(boolean beanProperties)": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPrivateFields(boolean privateFields)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPrivateConstructors(boolean privateConstructors)": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setTagSuffix(String tagSuffix)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.<init>()": {
                "lineStart": 110,
                "lineEnd": 112
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setExplicitFirstDocument(boolean explicitFirstDocument)": {
                "lineStart": 114,
                "lineEnd": 116
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setExplicitEndDocument(boolean explicitEndDocument)": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteRootTags(boolean writeRootTags)": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteRootElementTags(boolean writeRootElementTags)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteDefaultValues(boolean writeDefaultValues)": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setAutoAnchor(boolean autoAnchor)": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setKeepBeanPropertyOrder(boolean keepBeanPropertyOrder)": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setVersion(Version version)": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setTags(Map<String, String> tags)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setCanonical(boolean canonical)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setIndentSize(int indentSize)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWrapColumn(int wrapColumn)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setUseVerbatimTags(boolean useVerbatimTags)": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setEscapeUnicode(boolean escapeUnicode)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteClassname(WriteClassName write)": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setQuoteChar(Quote quote)": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.getQuote()": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setFlowStyle(boolean flowStyle)": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.isFlowStyle()": {
                "lineStart": 186,
                "lineEnd": 188
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setPrettyFlow(boolean prettyFlow)": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.<init>()": {
                "lineStart": 204,
                "lineEnd": 205
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setDefaultVersion(Version defaultVersion)": {
                "lineStart": 207,
                "lineEnd": 210
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setClassLoader(ClassLoader classLoader)": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setConstructorParameters(Class type, Class[] parameterTypes, String[] parameterNames)": {
                "lineStart": 216,
                "lineEnd": 230
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setIgnoreUnknownProperties(boolean allowUnknownProperties)": {
                "lineStart": 232,
                "lineEnd": 234
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setClassTags(boolean classTags)": {
                "lineStart": 236,
                "lineEnd": 238
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setAutoMerge(boolean autoMerge)": {
                "lineStart": 240,
                "lineEnd": 242
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setGuessNumberTypes(boolean guessNumberTypes)": {
                "lineStart": 244,
                "lineEnd": 246
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$Quote.<init>(char c)": {
                "lineStart": 260,
                "lineEnd": 262
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$Quote.getStyle()": {
                "lineStart": 264,
                "lineEnd": 266
            }
        },
        "24c2990-YamlReader.java": {
            "com.esotericsoftware.yamlbeans.YamlReader.readValue(Class type, Class elementType, Class defaultType)": {
                "lineStart": 114,
                "lineEnd": 135
            },
            "com.esotericsoftware.yamlbeans.YamlReader.readValueInternal(Class type, Class elementType, String anchor)": {
                "lineStart": 168,
                "lineEnd": 426
            }
        }
    },
    "CVE-2023-32697": {
        "75b67f2-SQLiteConnection.java": {
            "org.sqlite.SQLiteConnection.extractResource(URL resourceAddr)": {
                "lineStart": 222,
                "lineEnd": 259
            }
        }
    },
    "CVE-2023-23847": {
        "86e5475-SynopsysCoverityCredentialsHelper.java": {
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.<init>(IntLogger logger, JenkinsWrapper jenkinsWrapper)": {
                "lineStart": 29,
                "lineEnd": 33
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.silentHelper(JenkinsWrapper jenkinsWrapper)": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.listSupportedCredentials()": {
                "lineStart": 39,
                "lineEnd": 49
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getAuthenticationKeyFileCredentialsById(String credentialsId)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getCoverityUsernameById(String credentialsId)": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getCoverityPassphraseById(String credentialsId)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getIntegrationCredentialsById(String credentialsId)": {
                "lineStart": 63,
                "lineEnd": 86
            }
        },
        "02a2214-CheckForIssuesInView.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView$DescriptorImpl.doFillViewNameItems(@RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 49,
                "lineEnd": 55
            },
            "com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView$DescriptorImpl.<init>()": {
                "lineStart": 42,
                "lineEnd": 47
            }
        },
        "50dc6c1-CoverityBuildStep.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 192,
                "lineEnd": 194
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 196,
                "lineEnd": 198
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 200,
                "lineEnd": 206
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 208,
                "lineEnd": 217
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 219,
                "lineEnd": 221
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName, @QueryParameter(FIELD_STREAM_NAME) String streamName)": {
                "lineStart": 223,
                "lineEnd": 232
            }
        },
        "f97a88d-CoverityConnectInstance.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.global.CoverityConnectInstance$DescriptorImpl.doFillDefaultCredentialsIdItems()": {
                "lineStart": 143,
                "lineEnd": 145
            }
        },
        "10e6c31-CheckForIssuesStep.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 186,
                "lineEnd": 192
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 194,
                "lineEnd": 196
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillViewNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 198,
                "lineEnd": 204
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckViewName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 206,
                "lineEnd": 208
            }
        },
        "a0c8818-CoverityEnvironmentWrapper.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 201,
                "lineEnd": 203
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 205,
                "lineEnd": 207
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 209,
                "lineEnd": 215
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillViewNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 229,
                "lineEnd": 235
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckViewName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 237,
                "lineEnd": 239
            }
        }
    },
    "CVE-2021-21604": {
        "dddf70fd08-RobustReflectionConverter.java": {
            "hudson.util.RobustReflectionConverter.doUnmarshal(final Object result, final HierarchicalStreamReader reader, final UnmarshallingContext context)": {
                "lineStart": 247,
                "lineEnd": 371
            }
        }
    },
    "CVE-2020-10740": {
        "49c30c44bf-EJBRemoteConnectorService.java": {
            "org.jboss.as.ejb3.remote.EJBRemoteConnectorService.<init>()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.jboss.as.ejb3.remote.EJBRemoteConnectorService.<init>(final OptionMap channelCreationOptions)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.jboss.as.ejb3.remote.EJBRemoteConnectorService.start(StartContext context)": {
                "lineStart": 36,
                "lineEnd": 54
            }
        },
        "44bd3cbb88-EJB3RemoteServiceAdd.java": {
            "org.jboss.as.ejb3.subsystem.EJB3RemoteServiceAdd.installRuntimeServices(final OperationContext context, final ModelNode model)": {
                "lineStart": 48,
                "lineEnd": 85
            }
        }
    },
    "CVE-2022-23553": {
        "cbbbf9c-BlacklistUrlFilter.java": {
            "alpine.filters.BlacklistUrlFilter.doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain)": {
                "lineStart": 28,
                "lineEnd": 52
            }
        },
        "d2d2b8a-WhitelistUrlFilter.java": {
            "alpine.filters.WhitelistUrlFilter.doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain)": {
                "lineStart": 35,
                "lineEnd": 84
            }
        }
    },
    "CVE-2021-21641": {
        "a1f4b20-PromotedBuildAction.java": {
            "hudson.plugins.promoted_builds.PromotedBuildAction.<init>(AbstractBuild<?, ?> owner)": {
                "lineStart": 27,
                "lineEnd": 30
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.<init>(AbstractBuild<?, ?> owner, Status firstStatus)": {
                "lineStart": 32,
                "lineEnd": 35
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getOwner()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getProject()": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.contains(PromotionProcess process)": {
                "lineStart": 45,
                "lineEnd": 50
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.contains(String name)": {
                "lineStart": 52,
                "lineEnd": 57
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.add(Status status)": {
                "lineStart": 59,
                "lineEnd": 67
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getPromotions()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getPromotionBuilds(PromotionProcess promotionProcess)": {
                "lineStart": 73,
                "lineEnd": 83
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getPromotion(String name)": {
                "lineStart": 85,
                "lineEnd": 90
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.hasPromotion()": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.canPromote()": {
                "lineStart": 96,
                "lineEnd": 98
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.canPromote(String processName)": {
                "lineStart": 100,
                "lineEnd": 108
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getPendingPromotions()": {
                "lineStart": 110,
                "lineEnd": 119
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getPromotionProcess(String name)": {
                "lineStart": 121,
                "lineEnd": 131
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getIconFileName()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getDisplayName()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getUrlName()": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.readResolve()": {
                "lineStart": 145,
                "lineEnd": 150
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.getDynamic(String name, StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "hudson.plugins.promoted_builds.PromotedBuildAction.doForcePromotion(@QueryParameter(\"name\") String name)": {
                "lineStart": 156,
                "lineEnd": 165
            }
        },
        "e4493ff-Status.java": {
            "hudson.plugins.promoted_builds.Status.<init>(PromotionProcess process, Collection<? extends PromotionBadge> badges)": {
                "lineStart": 42,
                "lineEnd": 45
            },
            "hudson.plugins.promoted_builds.Status.getName()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "hudson.plugins.promoted_builds.Status.getParent()": {
                "lineStart": 51,
                "lineEnd": 61
            },
            "hudson.plugins.promoted_builds.Status.getProcess()": {
                "lineStart": 63,
                "lineEnd": 70
            },
            "hudson.plugins.promoted_builds.Status.getIcon(String size)": {
                "lineStart": 72,
                "lineEnd": 88
            },
            "hudson.plugins.promoted_builds.Status.getTarget()": {
                "lineStart": 90,
                "lineEnd": 93
            },
            "hudson.plugins.promoted_builds.Status.buildEnvVars(AbstractBuild<?, ?> build, EnvVars env)": {
                "lineStart": 95,
                "lineEnd": 100
            },
            "hudson.plugins.promoted_builds.Status.getTimestampString()": {
                "lineStart": 102,
                "lineEnd": 105
            },
            "hudson.plugins.promoted_builds.Status.getDelayString(AbstractBuild<?, ?> owner)": {
                "lineStart": 107,
                "lineEnd": 110
            },
            "hudson.plugins.promoted_builds.Status.isFor(PromotionProcess process)": {
                "lineStart": 112,
                "lineEnd": 114
            },
            "hudson.plugins.promoted_builds.Status.getSuccessfulPromotion(JobPropertyImpl jp)": {
                "lineStart": 116,
                "lineEnd": 123
            },
            "hudson.plugins.promoted_builds.Status.isPromotionSuccessful()": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "hudson.plugins.promoted_builds.Status.isPromotionAttempted()": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "hudson.plugins.promoted_builds.Status.isInQueue()": {
                "lineStart": 133,
                "lineEnd": 137
            },
            "hudson.plugins.promoted_builds.Status.getBadges()": {
                "lineStart": 139,
                "lineEnd": 141
            },
            "hudson.plugins.promoted_builds.Status.addPromotionAttempt(Promotion p)": {
                "lineStart": 143,
                "lineEnd": 145
            },
            "hudson.plugins.promoted_builds.Status.onSuccessfulPromotion(Promotion p)": {
                "lineStart": 147,
                "lineEnd": 149
            },
            "hudson.plugins.promoted_builds.Status.getLastSuccessful()": {
                "lineStart": 151,
                "lineEnd": 163
            },
            "hudson.plugins.promoted_builds.Status.getLastFailed()": {
                "lineStart": 165,
                "lineEnd": 177
            },
            "hudson.plugins.promoted_builds.Status.getLast()": {
                "lineStart": 179,
                "lineEnd": 191
            },
            "hudson.plugins.promoted_builds.Status.isLastAnError()": {
                "lineStart": 193,
                "lineEnd": 196
            },
            "hudson.plugins.promoted_builds.Status.getPromotionBuilds()": {
                "lineStart": 198,
                "lineEnd": 213
            },
            "hudson.plugins.promoted_builds.Status.getPromotionBuild(int number)": {
                "lineStart": 215,
                "lineEnd": 218
            },
            "hudson.plugins.promoted_builds.Status.isManuallyApproved()": {
                "lineStart": 220,
                "lineEnd": 228
            },
            "hudson.plugins.promoted_builds.Status.canBuild()": {
                "lineStart": 230,
                "lineEnd": 243
            },
            "hudson.plugins.promoted_builds.Status.doBuild(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 245,
                "lineEnd": 304
            }
        },
        "e167cb8-ManualCondition.java": {
            "hudson.plugins.promoted_builds.conditions.ManualCondition.<init>()": {
                "lineStart": 39,
                "lineEnd": 40
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.getUsers()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.setUsers(String users)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.getParameterDefinitions()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.getParameterDefinition(String name)": {
                "lineStart": 54,
                "lineEnd": 65
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.getUsersAsSet()": {
                "lineStart": 67,
                "lineEnd": 80
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.isMet(PromotionProcess promotionProcess, AbstractBuild<?, ?> build)": {
                "lineStart": 82,
                "lineEnd": 91
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.canApprove(PromotionProcess promotionProcess, AbstractBuild<?, ?> build)": {
                "lineStart": 93,
                "lineEnd": 106
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.isInUsersList()": {
                "lineStart": 108,
                "lineEnd": 111
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.isInGroupList()": {
                "lineStart": 113,
                "lineEnd": 123
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.approve(AbstractBuild<?, ?> build, PromotionProcess promotionProcess, List<ParameterValue> paramValues)": {
                "lineStart": 125,
                "lineEnd": 134
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.createDefaultValues()": {
                "lineStart": 136,
                "lineEnd": 146
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.approve(AbstractBuild<?, ?> build, PromotionProcess promotionProcess)": {
                "lineStart": 148,
                "lineEnd": 151
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition.doApprove(StaplerRequest req, StaplerResponse rsp, @AncestorInPath PromotionProcess promotionProcess, @AncestorInPath AbstractBuild<?, ?> build)": {
                "lineStart": 153,
                "lineEnd": 175
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$ManualApproval.<init>(String name, List<ParameterValue> values)": {
                "lineStart": 180,
                "lineEnd": 183
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$Badge.<init>(List<ParameterValue> values)": {
                "lineStart": 190,
                "lineEnd": 193
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$Badge.getUserName()": {
                "lineStart": 195,
                "lineEnd": 201
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$Badge.getUserId()": {
                "lineStart": 203,
                "lineEnd": 209
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$Badge.getParameterValues()": {
                "lineStart": 211,
                "lineEnd": 213
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$Badge.buildEnvVars(AbstractBuild<?, ?> build, EnvVars env)": {
                "lineStart": 215,
                "lineEnd": 228
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$DescriptorImpl.isApplicable(AbstractProject<?, ?> item)": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$DescriptorImpl.getDisplayName()": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "hudson.plugins.promoted_builds.conditions.ManualCondition$DescriptorImpl.newInstance(StaplerRequest req, JSONObject formData)": {
                "lineStart": 241,
                "lineEnd": 246
            }
        }
    },
    "CVE-2023-24425": {
        "f591d93-KubernetesCredentialProvider.java": {
            "com.cloudbees.jenkins.plugins.kubernetes_credentials_provider.KubernetesCredentialProvider.getCredentials(Class<C> type, ItemGroup itemGroup, Authentication authentication)": {
                "lineStart": 154,
                "lineEnd": 174
            }
        }
    },
    "CVE-2020-2304": {
        "03ac4df-SubversionChangeLogParser.java": {
            "hudson.scm.SubversionChangeLogParser.parse(@SuppressWarnings(\"rawtypes\") Run build, RepositoryBrowser<?> browser, File changelogFile)": {
                "lineStart": 21,
                "lineEnd": 47
            }
        }
    },
    "CVE-2021-21621": {
        "d3342e0-AboutUser.java": {
            "com.cloudbees.jenkins.support.impl.AboutUser.addContents(@NonNull Container result)": {
                "lineStart": 26,
                "lineEnd": 57
            }
        }
    },
    "CVE-2022-42117": {
        "fa49845dcb508-LabelTag.java": {
            "com.liferay.frontend.taglib.clay.servlet.taglib.LabelTag.processStartTag()": {
                "lineStart": 86,
                "lineEnd": 114
            }
        }
    },
    "CVE-2023-32310": {
        "143959f23-ShareService.java": {
            "io.dataease.service.panel.ShareService.removeSharesyPanel(String panelId)": {
                "lineStart": 360,
                "lineEnd": 404
            }
        }
    },
    "CVE-2023-34465": {
        "2e6e21aef40-DocumentInitializerRightsManager.java": {
            "org.xwiki.security.internal.DocumentInitializerRightsManager.restrictToAdmin(XWikiDocument document)": {
                "lineStart": 27,
                "lineEnd": 34
            },
            "org.xwiki.security.internal.DocumentInitializerRightsManager.initializeRights(XWikiDocument document, String xwikiAdminGroupDocumentReference, List<Right> rights)": {
                "lineStart": 36,
                "lineEnd": 52
            }
        }
    },
    "CVE-2023-23850": {
        "86e5475-SynopsysCoverityCredentialsHelper.java": {
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.<init>(IntLogger logger, JenkinsWrapper jenkinsWrapper)": {
                "lineStart": 29,
                "lineEnd": 33
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.silentHelper(JenkinsWrapper jenkinsWrapper)": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.listSupportedCredentials()": {
                "lineStart": 39,
                "lineEnd": 49
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getAuthenticationKeyFileCredentialsById(String credentialsId)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getCoverityUsernameById(String credentialsId)": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getCoverityPassphraseById(String credentialsId)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getIntegrationCredentialsById(String credentialsId)": {
                "lineStart": 63,
                "lineEnd": 86
            }
        },
        "02a2214-CheckForIssuesInView.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView$DescriptorImpl.doFillViewNameItems(@RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 49,
                "lineEnd": 55
            },
            "com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView$DescriptorImpl.<init>()": {
                "lineStart": 42,
                "lineEnd": 47
            }
        },
        "50dc6c1-CoverityBuildStep.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 192,
                "lineEnd": 194
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 196,
                "lineEnd": 198
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 200,
                "lineEnd": 206
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 208,
                "lineEnd": 217
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 219,
                "lineEnd": 221
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName, @QueryParameter(FIELD_STREAM_NAME) String streamName)": {
                "lineStart": 223,
                "lineEnd": 232
            }
        },
        "f97a88d-CoverityConnectInstance.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.global.CoverityConnectInstance$DescriptorImpl.doFillDefaultCredentialsIdItems()": {
                "lineStart": 143,
                "lineEnd": 145
            }
        },
        "10e6c31-CheckForIssuesStep.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 186,
                "lineEnd": 192
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 194,
                "lineEnd": 196
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillViewNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 198,
                "lineEnd": 204
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckViewName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 206,
                "lineEnd": 208
            }
        },
        "a0c8818-CoverityEnvironmentWrapper.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 201,
                "lineEnd": 203
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 205,
                "lineEnd": 207
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 209,
                "lineEnd": 215
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillViewNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 229,
                "lineEnd": 235
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckViewName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 237,
                "lineEnd": 239
            }
        }
    },
    "CVE-2023-34462": {
        "148dd6db7f-AbstractSniHandler.java": {
            "io.netty.handler.ssl.AbstractSniHandler.<init>()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "io.netty.handler.ssl.AbstractSniHandler.<init>(long handshakeTimeoutMillis)": {
                "lineStart": 72,
                "lineEnd": 74
            }
        },
        "09d40bf46a-SniHandler.java": {
            "io.netty.handler.ssl.SniHandler.<init>(Mapping<? super String, ? extends SslContext> mapping, long handshakeTimeoutMillis)": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "io.netty.handler.ssl.SniHandler.<init>(AsyncMapping<? super String, ? extends SslContext> mapping)": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "io.netty.handler.ssl.SniHandler.<init>(AsyncMapping<? super String, ? extends SslContext> mapping, long handshakeTimeoutMillis)": {
                "lineStart": 33,
                "lineEnd": 36
            }
        },
        "ee1cd388bd-SslClientHelloHandler.java": {
            "io.netty.handler.ssl.SslClientHelloHandler.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)": {
                "lineStart": 22,
                "lineEnd": 126
            }
        }
    },
    "CVE-2022-29161": {
        "c9b2600834d-RSACryptoScriptService.java": {
            "org.xwiki.crypto.script.RSACryptoScriptService.generateKeyPair()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.generateKeyPair(int strength)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.generateKeyPair(int strength, BigInteger publicExponent, int certainty)": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.createCertifiedKeyPair(PrivateKeyParameters privateKey, CertifiedPublicKey certificate)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueRootCACertificate(AsymmetricKeyPair keyPair, String dn, int validity)": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueIntermediateCertificate(CertifiedKeyPair issuer, AsymmetricKeyPair keyPair, String dn, int validity)": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueIntermediateCertificate(PrivateKeyParameters privateKey, CertifiedPublicKey issuer, PublicKeyParameters publicKey, String dn, int validity)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueIntermediateCertificate(CertifiedKeyPair issuer, PublicKeyParameters publicKey, String dn, int validity)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueCertificate(CertifiedKeyPair issuer, AsymmetricKeyPair keyPair, String dn, int validity, List<X509GeneralName> subjectAltName)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueCertificate(PrivateKeyParameters privateKey, CertifiedPublicKey issuer, PublicKeyParameters publicKey, String dn, int validity, List<X509GeneralName> subjectAltName)": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.issueCertificate(CertifiedKeyPair issuer, PublicKeyParameters publicKey, String dn, int validity, List<X509GeneralName> subjectAltName)": {
                "lineStart": 95,
                "lineEnd": 119
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsSign(byte[] data, CertifiedKeyPair keyPair, boolean embedContent)": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsSign(byte[] data, CertifiedKeyPair keyPair, CertificateProvider certificateProvider, boolean embedContent)": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsSign(byte[] data, CertifiedKeyPair keyPair, CertificateProvider certificateProvider, CMSSignedDataVerified existingSignature, boolean embedContent)": {
                "lineStart": 129,
                "lineEnd": 165
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.addCertificateChain(CertifiedPublicKey certificate, CertificateProvider certificateProvider, Collection<CertifiedPublicKey> certs)": {
                "lineStart": 167,
                "lineEnd": 173
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsVerify(byte[] signature)": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsVerify(byte[] signature, byte[] data)": {
                "lineStart": 179,
                "lineEnd": 181
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsVerify(byte[] signature, CertificateProvider certificateProvider)": {
                "lineStart": 183,
                "lineEnd": 185
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.cmsVerify(byte[] signature, byte[] data, CertificateProvider certificateProvider)": {
                "lineStart": 187,
                "lineEnd": 189
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.checkX509CertificateChainValidity(Collection<CertifiedPublicKey> chain)": {
                "lineStart": 191,
                "lineEnd": 193
            },
            "org.xwiki.crypto.script.RSACryptoScriptService.checkX509CertificateChainValidity(Collection<CertifiedPublicKey> chain, Date date)": {
                "lineStart": 195,
                "lineEnd": 222
            }
        }
    },
    "CVE-2021-21681": {
        "b148e44-NomadApi.java": {
            "org.jenkinsci.plugins.nomad.NomadApi.buildDriverConfig(String name, String secret, NomadCloud cloud, NomadWorkerTemplate template)": {
                "lineStart": 84,
                "lineEnd": 196
            }
        },
        "c43dcd7-NomadWorkerTemplate.java": {
            "org.jenkinsci.plugins.nomad.NomadWorkerTemplate.<init>(String prefix, String cpu, String memory, String disk, String labels, List<? extends NomadConstraintTemplate> constraints, String remoteFs, Boolean useRawExec, String idleTerminationInMinutes, Boolean reusable, String numExecutors, Node.Mode mode, String region, String priority, String image, String datacenters, String username, String password, Boolean privileged, String network, String prefixCmd, Boolean forcePull, String hostVolumes, String switchUser, List<? extends NomadPortTemplate> ports, String extraHosts, String dnsServers, String securityOpt, String capAdd, String capDrop, String vaultPolicies, List<? extends NomadDevicePluginTemplate> devicePlugins)": {
                "lineStart": 53,
                "lineEnd": 111
            },
            "org.jenkinsci.plugins.nomad.NomadWorkerTemplate.getPassword()": {
                "lineStart": 206,
                "lineEnd": 208
            }
        }
    },
    "CVE-2023-31058": {
        "170fe2036-PulsarClusterRequest.java": {
            "org.apache.inlong.manager.pojo.cluster.pulsar.PulsarClusterRequest.<init>()": {
                "lineStart": 20,
                "lineEnd": 22
            }
        },
        "5524a6364-TubeClusterRequest.java": {
            "org.apache.inlong.manager.pojo.cluster.tubemq.TubeClusterRequest.<init>()": {
                "lineStart": 17,
                "lineEnd": 19
            }
        },
        "03bbb957c-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 138,
                "lineEnd": 163
            }
        }
    },
    "CVE-2022-1245": {
        "b9bf6c1e88-DefaultTokenExchangeProvider.java": {
            "org.keycloak.protocol.oidc.DefaultTokenExchangeProvider.tokenExchange()": {
                "lineStart": 97,
                "lineEnd": 213
            },
            "org.keycloak.protocol.oidc.DefaultTokenExchangeProvider.exchangeClientToClient(UserModel targetUser, UserSessionModel targetUserSession)": {
                "lineStart": 241,
                "lineEnd": 286
            },
            "org.keycloak.protocol.oidc.DefaultTokenExchangeProvider.exchangeExternalToken(String issuer, String subjectToken)": {
                "lineStart": 356,
                "lineEnd": 398
            }
        },
        "a456a5ce59-ClientPermissions.java": {
            "org.keycloak.services.resources.admin.permissions.ClientPermissions.canExchangeTo(ClientModel authorizedClient, ClientModel to)": {
                "lineStart": 287,
                "lineEnd": 332
            }
        },
        "c9a7e48f42-UserPermissionEvaluator.java": {
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireManage()": {
                "lineStart": 5,
                "lineEnd": 5
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireManage(UserModel user)": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canManage()": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canManage(UserModel user)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireQuery()": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canQuery()": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireView()": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireView(UserModel user)": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canView()": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canView(UserModel user)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireImpersonate(UserModel user)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canImpersonate()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canImpersonate(UserModel user)": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.isImpersonatable(UserModel user)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.getAccess(UserModel user)": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireMapRoles(UserModel user)": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canMapRoles(UserModel user)": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.requireManageGroupMembership(UserModel user)": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.canManageGroupMembership(UserModel user)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissionEvaluator.grantIfNoPermission(boolean grantIfNoPermission)": {
                "lineStart": 24,
                "lineEnd": 24
            }
        },
        "afdf0bee2d-UserPermissions.java": {
            "org.keycloak.services.resources.admin.permissions.UserPermissions.canImpersonate(UserModel user)": {
                "lineStart": 270,
                "lineEnd": 276
            },
            "org.keycloak.services.resources.admin.permissions.UserPermissions.isImpersonatable(UserModel user)": {
                "lineStart": 278,
                "lineEnd": 300
            }
        },
        "359d30bc41-OAuthClient.java": {
            "org.keycloak.testsuite.util.OAuthClient.doTokenExchange(String realm, String token, String targetAudience, String clientId, String clientSecret, Map<String, String> additionalParams)": {
                "lineStart": 582,
                "lineEnd": 629
            }
        }
    },
    "CVE-2023-33201": {
        "874444267-X509LDAPCertStoreSpi.java": {
            "org.bouncycastle.jce.provider.X509LDAPCertStoreSpi.search(String attributeName, String attributeValue, String[] attrs)": {
                "lineStart": 274,
                "lineEnd": 329
            }
        }
    },
    "CVE-2021-4178": {
        "d68101908-Serialization.java": {
            "io.fabric8.kubernetes.client.utils.Serialization.unmarshalYaml(InputStream is, TypeReference<T> type)": {
                "lineStart": 209,
                "lineEnd": 214
            }
        }
    },
    "CVE-2023-6484": {
        "d1d8e39499-StringUtil.java": {
            "org.keycloak.utils.StringUtil.isBlank(String str)": {
                "lineStart": 4,
                "lineEnd": 6
            },
            "org.keycloak.utils.StringUtil.isNotBlank(String str)": {
                "lineStart": 8,
                "lineEnd": 10
            },
            "org.keycloak.utils.StringUtil.joinValuesWithLogicalCondition(String conditionText, Collection<String> values)": {
                "lineStart": 12,
                "lineEnd": 28
            }
        },
        "b4e3197b5c-JBossLoggingEventListenerProvider.java": {
            "org.keycloak.events.log.JBossLoggingEventListenerProvider.<init>(KeycloakSession session, Logger logger, Logger.Level successLevel, Logger.Level errorLevel)": {
                "lineStart": 21,
                "lineEnd": 27
            },
            "org.keycloak.events.log.JBossLoggingEventListenerProvider.logEvent(Event event)": {
                "lineStart": 37,
                "lineEnd": 93
            },
            "org.keycloak.events.log.JBossLoggingEventListenerProvider.logAdminEvent(AdminEvent adminEvent, boolean includeRepresentation)": {
                "lineStart": 95,
                "lineEnd": 125
            },
            "org.keycloak.events.log.JBossLoggingEventListenerProvider.setKeycloakContext(StringBuilder sb)": {
                "lineStart": 130,
                "lineEnd": 156
            }
        },
        "a57d15672c-JBossLoggingEventListenerProviderFactory.java": {
            "org.keycloak.events.log.JBossLoggingEventListenerProviderFactory.create(KeycloakSession session)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "org.keycloak.events.log.JBossLoggingEventListenerProviderFactory.getConfigMetadata()": {
                "lineStart": 37,
                "lineEnd": 40
            },
            "org.keycloak.events.log.JBossLoggingEventListenerProviderFactory.init(Config.Scope config)": {
                "lineStart": 22,
                "lineEnd": 25
            }
        }
    },
    "CVE-2023-43667": {
        "30ccffde1-DataNodeController.java": {
            "org.apache.inlong.manager.web.controller.DataNodeController.testConnection(@RequestBody DataNodeRequest request)": {
                "lineStart": 97,
                "lineEnd": 100
            }
        },
        "1ce4ee1dd-InlongClusterController.java": {
            "org.apache.inlong.manager.web.controller.InlongClusterController.testConnection(@RequestBody ClusterRequest request)": {
                "lineStart": 243,
                "lineEnd": 246
            }
        }
    },
    "CVE-2023-49068": {
        "5ab493a98b-AbstractAuthenticator.java": {
            "org.apache.dolphinscheduler.api.security.impl.AbstractAuthenticator.authenticate(String userId, String password, String extra)": {
                "lineStart": 24,
                "lineEnd": 65
            }
        }
    },
    "CVE-2023-38905": {
        "604c6de4-SqlInjectionUtil.java": {
            "org.jeecg.common.util.SqlInjectionUtil.checkSqlAnnotation(String str)": {
                "lineStart": 200,
                "lineEnd": 208
            }
        }
    },
    "CVE-2022-25184": {
        "ff20fb7-BuildTriggerStep.java": {
            "org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStep$DescriptorImpl.newInstance(StaplerRequest req, JSONObject formData)": {
                "lineStart": 79,
                "lineEnd": 116
            }
        }
    },
    "CVE-2023-1370": {
        "24d40c2-JSONParserBase.java": {
            "net.minidev.json.parser.JSONParserBase.readObject(JsonReaderI<T> mapper)": {
                "lineStart": 508,
                "lineEnd": 593
            }
        }
    },
    "CVE-2020-9483": {
        "8972d05f0d-H2MetricsQueryDAO.java": {
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricsQueryDAO.getLinearIntValues(String tableName, DownSampling downsampling, List<String> ids, String valueCName)": {
                "lineStart": 87,
                "lineEnd": 115
            },
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricsQueryDAO.getMultipleLinearIntValues(String tableName, DownSampling downsampling, List<String> ids, final List<Integer> linearIndex, String valueCName)": {
                "lineStart": 117,
                "lineEnd": 156
            },
            "org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricsQueryDAO.getThermodynamic(String tableName, DownSampling downsampling, List<String> ids, String valueCName)": {
                "lineStart": 179,
                "lineEnd": 236
            }
        }
    },
    "CVE-2020-11974": {
        "1132147faf-BaseDataSource.java": {
            "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": {
                "lineStart": 57,
                "lineEnd": 81
            }
        },
        "94a4895df9-MySQLDataSource.java": {
            "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.driverClassSelector()": {
                "lineStart": 5,
                "lineEnd": 7
            },
            "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.dbTypeSelector()": {
                "lineStart": 9,
                "lineEnd": 11
            }
        }
    },
    "CVE-2020-26234": {
        "213ead2502-HttpClientImpl.java": {
            "org.opencastproject.kernel.http.impl.HttpClientImpl.makeHttpClient()": {
                "lineStart": 46,
                "lineEnd": 67
            },
            "org.opencastproject.kernel.http.impl.HttpClientImpl.createTrustManager()": {
                "lineStart": 69,
                "lineEnd": 86
            },
            "org.opencastproject.kernel.http.impl.HttpClientImpl.createHostNameVerifier()": {
                "lineStart": 88,
                "lineEnd": 109
            }
        }
    },
    "CVE-2020-17518": {
        "6f60830b94b-FileUploadHandler.java": {
            "org.apache.flink.runtime.rest.FileUploadHandler.channelRead0(final ChannelHandlerContext ctx, final HttpObject msg)": {
                "lineStart": 58,
                "lineEnd": 142
            }
        }
    },
    "CVE-2020-35460": {
        "69e2518945-InputStreamHelper.java": {
            "net.sf.mpxj.common.InputStreamHelper.processZipStream(File dir, InputStream inputStream)": {
                "lineStart": 53,
                "lineEnd": 82
            }
        }
    },
    "CVE-2023-24422": {
        "95770e1-SandboxInterceptor.java": {
            "org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SandboxInterceptor.onNewInstance(GroovyInterceptor.Invoker invoker, Class receiver, Object... args)": {
                "lineStart": 131,
                "lineEnd": 146
            }
        }
    },
    "CVE-2024-41667": {
        "21aec56ba8-RealmOAuth2ProviderSettings.java": {
            "org.forgerock.oauth2.core.RealmOAuth2ProviderSettings.getCustomLoginUrlTemplate()": {
                "lineStart": 910,
                "lineEnd": 924
            }
        }
    },
    "CVE-2022-41704": {
        "1281e7dba-DefaultScriptSecurity.java": {
            "org.apache.batik.bridge.DefaultScriptSecurity.<init>(String scriptType, ParsedURL scriptURL, ParsedURL docURL)": {
                "lineStart": 15,
                "lineEnd": 35
            }
        }
    },
    "CVE-2022-29052": {
        "b30556a-ComputeEngineLinuxLauncher.java": {
            "com.google.jenkins.plugins.computeengine.ComputeEngineLinuxLauncher.bootstrap(GoogleKeyPair kp, ComputeEngineComputer computer, TaskListener listener)": {
                "lineStart": 37,
                "lineEnd": 88
            }
        },
        "d66a43b-GoogleKeyPair.java": {
            "com.google.jenkins.plugins.computeengine.ssh.GoogleKeyPair.<init>(String publicKey, String privateKey, String user)": {
                "lineStart": 8,
                "lineEnd": 12
            },
            "com.google.jenkins.plugins.computeengine.ssh.GoogleKeyPair.generate(String user)": {
                "lineStart": 14,
                "lineEnd": 17
            },
            "com.google.jenkins.plugins.computeengine.ssh.GoogleKeyPair.getPrivateKey()": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "com.google.jenkins.plugins.computeengine.ssh.GoogleKeyPair.toString()": {
                "lineStart": 27,
                "lineEnd": 29
            }
        }
    },
    "CVE-2021-21680": {
        "87e214c-NestedView.java": {
            "hudson.plugins.nested_view.NestedView.updateByXml(Source source)": {
                "lineStart": 383,
                "lineEnd": 415
            }
        }
    },
    "CVE-2023-50764": {
        "264ce4c-ScriptlerManagement.java": {
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doRemoveScript(StaplerRequest res, StaplerResponse rsp, @QueryParameter(\"id\") String id)": {
                "lineStart": 181,
                "lineEnd": 200
            }
        }
    },
    "CVE-2020-2182": {
        "0000000-DollarSecretPatternFactory.java": {
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getScriptlerRunScripts()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getScriptlerConfigure()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.hasAtLeastOneScriptlerPermission()": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.checkAtLeastOneScriptlerPermission()": {
                "lineStart": 50,
                "lineEnd": 55
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getIconFileName()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getCategory()": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getUrlName()": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.disableRemoteCatalog()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getDisplayName()": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getDescription()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getScriptler()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getConfiguration()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getMarkupFormatter()": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doScriptlerSettings(StaplerRequest res, StaplerResponse rsp, @QueryParameter(\"disableRemoteCatalog\") boolean disableRemoteCatalog)": {
                "lineStart": 93,
                "lineEnd": 99
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doDownloadScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String id, @QueryParameter(\"catalog\") String catalogName)": {
                "lineStart": 101,
                "lineEnd": 127
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doScriptAdd(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String id, @QueryParameter(\"name\") String name, @QueryParameter(\"comment\") String comment, @QueryParameter(\"script\") String script, @QueryParameter(\"nonAdministerUsing\") boolean nonAdministerUsing, @QueryParameter(\"onlyMaster\") boolean onlyMaster, String originCatalogName, String originId)": {
                "lineStart": 129,
                "lineEnd": 134
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.saveScriptAndForward(String id, String name, String comment, String script, boolean nonAdministerUsing, boolean onlyMaster, String originCatalogName, String originId, @NonNull List<Parameter> parameters)": {
                "lineStart": 136,
                "lineEnd": 165
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.commitFileToGitRepo(final String finalFileName)": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getGitRepo()": {
                "lineStart": 171,
                "lineEnd": 173
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doHardResetGit()": {
                "lineStart": 175,
                "lineEnd": 179
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doRemoveScript(StaplerRequest res, StaplerResponse rsp, @QueryParameter(\"id\") String id)": {
                "lineStart": 181,
                "lineEnd": 200
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doUploadScript(StaplerRequest req)": {
                "lineStart": 202,
                "lineEnd": 222
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.saveScript(FileItem fileItem, boolean nonAdministerUsing, String fileName)": {
                "lineStart": 224,
                "lineEnd": 249
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doRunScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String id)": {
                "lineStart": 251,
                "lineEnd": 273
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doTriggerScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String id, @QueryParameter(\"script\") String scriptSrc, @QueryParameter(\"node\") String node)": {
                "lineStart": 275,
                "lineEnd": 312
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doRun(StaplerRequest req, StaplerResponse rsp, @QueryParameter(fixEmpty = true) String script, @QueryParameter(fixEmpty = true) String node, @QueryParameter(fixEmpty = true) String contentType)": {
                "lineStart": 314,
                "lineEnd": 351
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.prepareParameters(StaplerRequest req, Script tempScript)": {
                "lineStart": 353,
                "lineEnd": 367
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.resolveSlaveNames(String nameAlias)": {
                "lineStart": 369,
                "lineEnd": 390
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doShowScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String id)": {
                "lineStart": 392,
                "lineEnd": 396
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.doEditScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String id)": {
                "lineStart": 398,
                "lineEnd": 415
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getSlaveAlias(Script script)": {
                "lineStart": 417,
                "lineEnd": 441
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getSlaveNames()": {
                "lineStart": 443,
                "lineEnd": 451
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getCatalogs()": {
                "lineStart": 453,
                "lineEnd": 455
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getCatalogByName(String catalogName)": {
                "lineStart": 457,
                "lineEnd": 470
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getCatalogInfoByName(String catalogName)": {
                "lineStart": 472,
                "lineEnd": 485
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getScriptDirectory()": {
                "lineStart": 487,
                "lineEnd": 489
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.getScriptlerHomeDirectory()": {
                "lineStart": 491,
                "lineEnd": 493
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.checkPermission(Permission permission)": {
                "lineStart": 495,
                "lineEnd": 497
            },
            "org.jenkinsci.plugins.scriptler.ScriptlerManagement.fixFileName(String catalogName, String name)": {
                "lineStart": 499,
                "lineEnd": 511
            }
        }
    },
    "CVE-2023-34189": {
        "8c99be293-WorkflowApproverService.java": {
            "org.apache.inlong.manager.service.core.WorkflowApproverService.save(ApproverRequest request, String operator)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.apache.inlong.manager.service.core.WorkflowApproverService.get(Integer id)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.apache.inlong.manager.service.core.WorkflowApproverService.getApprovers(String processName, String taskName)": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "org.apache.inlong.manager.service.core.WorkflowApproverService.listByCondition(ApproverPageRequest request)": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "org.apache.inlong.manager.service.core.WorkflowApproverService.update(ApproverRequest request, String operator)": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.apache.inlong.manager.service.core.WorkflowApproverService.delete(Integer id, String operator)": {
                "lineStart": 13,
                "lineEnd": 13
            }
        },
        "5d53367ff-WorkflowApproverServiceImpl.java": {
            "org.apache.inlong.manager.service.core.impl.WorkflowApproverServiceImpl.get(Integer id)": {
                "lineStart": 52,
                "lineEnd": 61
            }
        },
        "848b0aedc-WorkflowApproverController.java": {
            "org.apache.inlong.manager.web.controller.WorkflowApproverController.get(@PathVariable Integer id)": {
                "lineStart": 32,
                "lineEnd": 37
            },
            "org.apache.inlong.manager.web.controller.WorkflowApproverController.save(@RequestBody ApproverRequest config)": {
                "lineStart": 26,
                "lineEnd": 30
            },
            "org.apache.inlong.manager.web.controller.WorkflowApproverController.update(@RequestBody ApproverRequest request)": {
                "lineStart": 46,
                "lineEnd": 50
            },
            "org.apache.inlong.manager.web.controller.WorkflowApproverController.delete(@PathVariable Integer id)": {
                "lineStart": 52,
                "lineEnd": 58
            }
        }
    },
    "CVE-2021-21647": {
        "51a8911-ElectricFlowEFRunAPIAction.java": {
            "org.jenkinsci.plugins.electricflow.rest.ElectricFlowEFRunAPIAction.doBuild(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 54,
                "lineEnd": 180
            }
        }
    },
    "CVE-2020-1953": {
        "1593d122-YAMLConfiguration.java": {
            "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": {
                "lineStart": 22,
                "lineEnd": 33
            },
            "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": {
                "lineStart": 35,
                "lineEnd": 46
            },
            "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": {
                "lineStart": 59,
                "lineEnd": 70
            },
            "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": {
                "lineStart": 72,
                "lineEnd": 83
            }
        }
    },
    "CVE-2021-21645": {
        "346de2f-ConfigFilesManagement.java": {
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doSaveConfig(StaplerRequest req)": {
                "lineStart": 84,
                "lineEnd": 100
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doShow(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String configId)": {
                "lineStart": 102,
                "lineEnd": 108
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doEditConfig(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String configId)": {
                "lineStart": 110,
                "lineEnd": 117
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doAddConfig(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"providerId\") String providerId, @QueryParameter(\"configId\") String configId)": {
                "lineStart": 119,
                "lineEnd": 161
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doSelectProvider(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 163,
                "lineEnd": 168
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doRemoveConfig(StaplerRequest res, StaplerResponse rsp, @QueryParameter(\"id\") String configId)": {
                "lineStart": 174,
                "lineEnd": 178
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.getTarget()": {
                "lineStart": 199,
                "lineEnd": 202
            }
        },
        "017c463-ManagedFile.java": {
            "org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile$DescriptorImpl.doFillFileIdItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 64,
                "lineEnd": 72
            },
            "org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile$DescriptorImpl.doCheckFileId(StaplerRequest req, @AncestorInPath Item context, @QueryParameter String fileId)": {
                "lineStart": 74,
                "lineEnd": 83
            }
        },
        "b4b6112-FolderConfigFileAction.java": {
            "org.jenkinsci.plugins.configfiles.folder.FolderConfigFileAction.doCheckConfigId(@QueryParameter(\"configId\") String configId)": {
                "lineStart": 211,
                "lineEnd": 228
            }
        },
        "0d3fca0-MvnGlobalSettingsProvider.java": {
            "org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider$DescriptorImpl.doFillSettingsConfigIdItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 110,
                "lineEnd": 118
            }
        },
        "f740060-MvnSettingsProvider.java": {
            "org.jenkinsci.plugins.configfiles.maven.job.MvnSettingsProvider$DescriptorImpl.doFillSettingsConfigIdItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 113,
                "lineEnd": 121
            }
        }
    },
    "CVE-2021-22572": {
        "586fc8cb-TemporaryPerJobDataStore.java": {
            "org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore.getTempFileFromInputStream(InputStream inputStream, String prefix, String suffix)": {
                "lineStart": 34,
                "lineEnd": 39
            }
        }
    },
    "CVE-2023-29507": {
        "9618a801d7c-Document.java": {
            "com.xpn.xwiki.api.Document.save(String comment, boolean minorEdit)": {
                "lineStart": 1556,
                "lineEnd": 1573
            },
            "com.xpn.xwiki.api.Document.saveAsAuthor(String comment, boolean minorEdit)": {
                "lineStart": 1618,
                "lineEnd": 1638
            },
            "com.xpn.xwiki.api.Document.getAuthors()": {
                "lineStart": 1991,
                "lineEnd": 1993
            }
        }
    },
    "CVE-2022-24839": {
        "fe414a4-HTMLScanner.java": {
            "org.cyberneko.html.HTMLScanner$ContentScanner.scanPI()": {
                "lineStart": 2061,
                "lineEnd": 2192
            }
        }
    },
    "CVE-2022-40150": {
        "bca76aa-JSONTokener.java": {
            "org.codehaus.jettison.json.JSONTokener.nextValue()": {
                "lineStart": 210,
                "lineEnd": 293
            }
        }
    },
    "CVE-2021-36372": {
        "d1a721a476-OmKeyLocationInfo.java": {
            "org.apache.hadoop.ozone.om.helpers.OmKeyLocationInfo.getProtobuf(boolean ignorePipeline, int clientVersion)": {
                "lineStart": 142,
                "lineEnd": 158
            }
        }
    },
    "CVE-2024-23900": {
        "7a89252-MatrixProject.java": {
            "hudson.matrix.MatrixProject.<init>(String name)": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "hudson.matrix.MatrixProject.<init>(ItemGroup parent, String name)": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "hudson.matrix.MatrixProject.readResolve()": {
                "lineStart": 99,
                "lineEnd": 102
            },
            "hudson.matrix.MatrixProject.getPronoun()": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "hudson.matrix.MatrixProject.getChildCustomWorkspace()": {
                "lineStart": 108,
                "lineEnd": 115
            },
            "hudson.matrix.MatrixProject.hasChildCustomWorkspace()": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "hudson.matrix.MatrixProject.setChildCustomWorkspace(String childCustomWorkspace)": {
                "lineStart": 121,
                "lineEnd": 124
            },
            "hudson.matrix.MatrixProject.getRelevantLabels()": {
                "lineStart": 126,
                "lineEnd": 132
            },
            "hudson.matrix.MatrixProject.getSorter()": {
                "lineStart": 134,
                "lineEnd": 142
            },
            "hudson.matrix.MatrixProject.setSorter(MatrixConfigurationSorter sorter)": {
                "lineStart": 144,
                "lineEnd": 152
            },
            "hudson.matrix.MatrixProject.getAxes()": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "hudson.matrix.MatrixProject.setAxes(AxisList axes)": {
                "lineStart": 158,
                "lineEnd": 162
            },
            "hudson.matrix.MatrixProject.getExecutionStrategy()": {
                "lineStart": 164,
                "lineEnd": 166
            },
            "hudson.matrix.MatrixProject.setExecutionStrategy(MatrixExecutionStrategy executionStrategy)": {
                "lineStart": 168,
                "lineEnd": 172
            },
            "hudson.matrix.MatrixProject.isRunSequentially()": {
                "lineStart": 174,
                "lineEnd": 182
            },
            "hudson.matrix.MatrixProject.setRunSequentially(boolean runSequentially)": {
                "lineStart": 184,
                "lineEnd": 192
            },
            "hudson.matrix.MatrixProject.setCombinationFilter(String combinationFilter)": {
                "lineStart": 194,
                "lineEnd": 198
            },
            "hudson.matrix.MatrixProject.getCombinationFilter()": {
                "lineStart": 200,
                "lineEnd": 202
            },
            "hudson.matrix.MatrixProject.getTouchStoneCombinationFilter()": {
                "lineStart": 204,
                "lineEnd": 212
            },
            "hudson.matrix.MatrixProject.setTouchStoneCombinationFilter(String touchStoneCombinationFilter)": {
                "lineStart": 214,
                "lineEnd": 222
            },
            "hudson.matrix.MatrixProject.getTouchStoneResultCondition()": {
                "lineStart": 224,
                "lineEnd": 232
            },
            "hudson.matrix.MatrixProject.setTouchStoneResultCondition(Result touchStoneResultCondition)": {
                "lineStart": 234,
                "lineEnd": 242
            },
            "hudson.matrix.MatrixProject.createTransientActions()": {
                "lineStart": 244,
                "lineEnd": 259
            },
            "hudson.matrix.MatrixProject.updateTransientActions()": {
                "lineStart": 261,
                "lineEnd": 270
            },
            "hudson.matrix.MatrixProject.getUserAxes()": {
                "lineStart": 272,
                "lineEnd": 278
            },
            "hudson.matrix.MatrixProject.getLayouter()": {
                "lineStart": 280,
                "lineEnd": 287
            },
            "hudson.matrix.MatrixProject.onCreatedFromScratch()": {
                "lineStart": 289,
                "lineEnd": 292
            },
            "hudson.matrix.MatrixProject.onLoad(ItemGroup<? extends Item> parent, String name)": {
                "lineStart": 294,
                "lineEnd": 303
            },
            "hudson.matrix.MatrixProject.logRotate()": {
                "lineStart": 305,
                "lineEnd": 311
            },
            "hudson.matrix.MatrixProject.loadConfigurations(File dir, CopyOnWriteMap.Tree<Combination, MatrixConfiguration> result, Map<String, String> combination)": {
                "lineStart": 313,
                "lineEnd": 362
            },
            "hudson.matrix.MatrixProject.rebuildConfigurations(MatrixBuildExecution context)": {
                "lineStart": 364,
                "lineEnd": 433
            },
            "hudson.matrix.MatrixProject.getRunConfiguration(MatrixBuildExecution context)": {
                "lineStart": 440,
                "lineEnd": 452
            },
            "hudson.matrix.MatrixProject.isDynamicFilter(final String filter)": {
                "lineStart": 454,
                "lineEnd": 464
            },
            "hudson.matrix.MatrixProject.getConfigurationsDir()": {
                "lineStart": 466,
                "lineEnd": 468
            },
            "hudson.matrix.MatrixProject.getActiveConfigurations()": {
                "lineStart": 470,
                "lineEnd": 472
            },
            "hudson.matrix.MatrixProject.getItems()": {
                "lineStart": 474,
                "lineEnd": 476
            },
            "hudson.matrix.MatrixProject.getAllJobs()": {
                "lineStart": 478,
                "lineEnd": 482
            },
            "hudson.matrix.MatrixProject.getUrlChildPrefix()": {
                "lineStart": 484,
                "lineEnd": 486
            },
            "hudson.matrix.MatrixProject.getItem(String name)": {
                "lineStart": 488,
                "lineEnd": 496
            },
            "hudson.matrix.MatrixProject.getItem(Combination c)": {
                "lineStart": 498,
                "lineEnd": 504
            },
            "hudson.matrix.MatrixProject.getRootDirFor(@NonNull MatrixConfiguration child)": {
                "lineStart": 506,
                "lineEnd": 508
            },
            "hudson.matrix.MatrixProject.onRenamed(MatrixConfiguration item, String oldName, String newName)": {
                "lineStart": 510,
                "lineEnd": 512
            },
            "hudson.matrix.MatrixProject.onDeleted(MatrixConfiguration item)": {
                "lineStart": 514,
                "lineEnd": 523
            },
            "hudson.matrix.MatrixProject.getRootDirFor(@NonNull Combination combination)": {
                "lineStart": 525,
                "lineEnd": 535
            },
            "hudson.matrix.MatrixProject.getJDK()": {
                "lineStart": 537,
                "lineEnd": 539
            },
            "hudson.matrix.MatrixProject.getJDKs()": {
                "lineStart": 541,
                "lineEnd": 556
            },
            "hudson.matrix.MatrixProject.getLabels()": {
                "lineStart": 558,
                "lineEnd": 569
            },
            "hudson.matrix.MatrixProject.getBuilders()": {
                "lineStart": 571,
                "lineEnd": 573
            },
            "hudson.matrix.MatrixProject.getBuildersList()": {
                "lineStart": 575,
                "lineEnd": 577
            },
            "hudson.matrix.MatrixProject.getPublishers()": {
                "lineStart": 579,
                "lineEnd": 581
            },
            "hudson.matrix.MatrixProject.getPublishersList()": {
                "lineStart": 583,
                "lineEnd": 585
            },
            "hudson.matrix.MatrixProject.getBuildWrappersList()": {
                "lineStart": 587,
                "lineEnd": 589
            },
            "hudson.matrix.MatrixProject.getBuildWrappers()": {
                "lineStart": 591,
                "lineEnd": 593
            },
            "hudson.matrix.MatrixProject.getPublisher(Descriptor<Publisher> descriptor)": {
                "lineStart": 595,
                "lineEnd": 601
            },
            "hudson.matrix.MatrixProject.getBuildClass()": {
                "lineStart": 603,
                "lineEnd": 605
            },
            "hudson.matrix.MatrixProject.isFingerprintConfigured()": {
                "lineStart": 607,
                "lineEnd": 609
            },
            "hudson.matrix.MatrixProject.buildDependencyGraph(DependencyGraph graph)": {
                "lineStart": 611,
                "lineEnd": 616
            },
            "hudson.matrix.MatrixProject.asProject()": {
                "lineStart": 618,
                "lineEnd": 620
            },
            "hudson.matrix.MatrixProject.getDynamic(String token, StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 622,
                "lineEnd": 631
            },
            "hudson.matrix.MatrixProject.submit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 633,
                "lineEnd": 665
            },
            "hudson.matrix.MatrixProject.getAggregatedTestResultAction()": {
                "lineStart": 667,
                "lineEnd": 670
            },
            "hudson.matrix.MatrixProject.checkAxes(Iterable<Axis> newAxes)": {
                "lineStart": 672,
                "lineEnd": 697
            },
            "hudson.matrix.MatrixProject.doDoWipeOutWorkspace()": {
                "lineStart": 699,
                "lineEnd": 705
            },
            "hudson.matrix.MatrixProject.doChildrenContextMenu(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 707,
                "lineEnd": 714
            },
            "hudson.matrix.MatrixProject.getDescriptor()": {
                "lineStart": 716,
                "lineEnd": 718
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getDisplayName()": {
                "lineStart": 722,
                "lineEnd": 724
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getCategoryId()": {
                "lineStart": 726,
                "lineEnd": 728
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getDescription()": {
                "lineStart": 730,
                "lineEnd": 732
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getIconFilePathPattern()": {
                "lineStart": 734,
                "lineEnd": 736
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.newInstance(ItemGroup parent, String name)": {
                "lineStart": 738,
                "lineEnd": 740
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getAxisDescriptors()": {
                "lineStart": 742,
                "lineEnd": 751
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getSorterDescriptors()": {
                "lineStart": 753,
                "lineEnd": 755
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getExecutionStrategyDescriptors()": {
                "lineStart": 757,
                "lineEnd": 759
            },
            "hudson.matrix.MatrixProject$DescriptorImpl.getMatrixRunCheckoutStrategyDescriptors()": {
                "lineStart": 761,
                "lineEnd": 763
            },
            "hudson.matrix.MatrixProject.alias()": {
                "lineStart": 768,
                "lineEnd": 774
            }
        },
        "6b59d5b-TextAxis.java": {
            "hudson.matrix.TextAxis.<init>(String name, List<String> values)": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "hudson.matrix.TextAxis.<init>(String name, String... values)": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "hudson.matrix.TextAxis.<init>(String name, String valueString)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "hudson.matrix.TextAxis$DescriptorImpl.getDisplayName()": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "hudson.matrix.TextAxis$DescriptorImpl.doCheckValueString(@QueryParameter String value)": {
                "lineStart": 27,
                "lineEnd": 29
            }
        }
    },
    "CVE-2023-43498": {
        "5d64485cfa-PluginManager.java": {
            "hudson.PluginManager.doUploadPlugin(StaplerRequest req)": {
                "lineStart": 1549,
                "lineEnd": 1636
            }
        }
    },
    "CVE-2021-43797": {
        "ddd68c74d9-DefaultHttpHeaders.java": {
            "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(byte value)": {
                "lineStart": 294,
                "lineEnd": 314
            },
            "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(char value)": {
                "lineStart": 316,
                "lineEnd": 336
            }
        },
        "cd2b496966-HttpObjectDecoder.java": {
            "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": {
                "lineStart": 570,
                "lineEnd": 608
            },
            "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS)": {
                "lineStart": 642,
                "lineEnd": 655
            }
        }
    },
    "CVE-2024-1722": {
        "15f4288424-UserResource.java": {
            "org.keycloak.services.resources.admin.UserResource.validateUserProfile(UserProfile profile, KeycloakSession session, AdminAuth adminAuth)": {
                "lineStart": 196,
                "lineEnd": 210
            }
        },
        "8ae54e7f0b-UsersResource.java": {
            "org.keycloak.services.resources.admin.UsersResource.createUser(final UserRepresentation rep)": {
                "lineStart": 75,
                "lineEnd": 157
            }
        },
        "4cc112f383-DeclarativeUserProfileProviderFactory.java": {
            "org.keycloak.userprofile.DeclarativeUserProfileProviderFactory.createUserResourceValidation(Config.Scope config)": {
                "lineStart": 307,
                "lineEnd": 322
            }
        },
        "0fd29478a8-DuplicateEmailValidator.java": {
            "org.keycloak.userprofile.validator.DuplicateEmailValidator.validate(Object input, String inputHint, ValidationContext context, ValidatorConfig config)": {
                "lineStart": 20,
                "lineEnd": 43
            }
        },
        "206ec31d16-DuplicateUsernameValidator.java": {
            "org.keycloak.userprofile.validator.DuplicateUsernameValidator.validate(Object input, String inputHint, ValidationContext context, ValidatorConfig config)": {
                "lineStart": 21,
                "lineEnd": 41
            }
        }
    },
    "CVE-2022-24881": {
        "5c51aa3-FreemarkerTemplateEngine.java": {
            "com.hccake.ballcat.codegen.engine.FreemarkerTemplateEngine.<init>()": {
                "lineStart": 12,
                "lineEnd": 15
            }
        },
        "3732859-TemplateEngine.java": {
            "com.hccake.ballcat.codegen.engine.TemplateEngine.type()": {
                "lineStart": 4,
                "lineEnd": 4
            },
            "com.hccake.ballcat.codegen.engine.TemplateEngine.render(String templateContent, Map<String, Object> context)": {
                "lineStart": 5,
                "lineEnd": 5
            }
        },
        "e7d885b-TemplateEngineDelegator.java": {
            "com.hccake.ballcat.codegen.engine.TemplateEngineDelegator.render(TemplateEngineTypeEnum engineType, String templateContent, Map<String, Object> context)": {
                "lineStart": 11,
                "lineEnd": 19
            }
        },
        "e69e23a-VelocityTemplateEngine.java": {
            "com.hccake.ballcat.codegen.engine.VelocityTemplateEngine.render(String templateContent, Map<String, Object> context)": {
                "lineStart": 21,
                "lineEnd": 32
            }
        },
        "b7ecee5-TemplateRenderException.java": {
            "com.hccake.ballcat.codegen.exception.TemplateRenderException.<init>(Exception e)": {
                "lineStart": 3,
                "lineEnd": 5
            }
        },
        "28115e3-GeneratorServiceImpl.java": {
            "com.hccake.ballcat.codegen.service.impl.GeneratorServiceImpl.generatorCode(TableDetails tableDetails, String tablePrefix, Map<String, String> customProperties, List<TemplateFile> templateFiles)": {
                "lineStart": 75,
                "lineEnd": 101
            }
        }
    },
    "CVE-2020-2239": {
        "d7ae9ce-Auth.java": {
            "org.jenkinsci.plugins.ParameterizedRemoteTrigger.Auth.auth2ToAuth(Auth2 auth)": {
                "lineStart": 133,
                "lineEnd": 161
            },
            "org.jenkinsci.plugins.ParameterizedRemoteTrigger.Auth.authToAuth2(Auth oldAuth)": {
                "lineStart": 168,
                "lineEnd": 188
            }
        },
        "d3d25bf-TokenAuth.java": {
            "org.jenkinsci.plugins.ParameterizedRemoteTrigger.auth2.TokenAuth.setApiToken(String apiToken)": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "org.jenkinsci.plugins.ParameterizedRemoteTrigger.auth2.TokenAuth.getApiToken()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "org.jenkinsci.plugins.ParameterizedRemoteTrigger.auth2.TokenAuth.setAuthorizationHeader(URLConnection connection, BuildContext context)": {
                "lineStart": 38,
                "lineEnd": 41
            }
        }
    },
    "CVE-2022-25193": {
        "f4c3c7c-VCommanderConfig.java": {
            "com.embotics.vlm.plugin.VCommanderConfig.<init>()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "com.embotics.vlm.plugin.VCommanderConfig.get()": {
                "lineStart": 41,
                "lineEnd": 52
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getVCommanderClient()": {
                "lineStart": 54,
                "lineEnd": 66
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setvCommanderClient(VCommanderClient vCommanderClient)": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "com.embotics.vlm.plugin.VCommanderConfig.configure(StaplerRequest req, JSONObject json)": {
                "lineStart": 72,
                "lineEnd": 76
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getCredential(String id, String address)": {
                "lineStart": 78,
                "lineEnd": 81
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getCredentialWithoutDomainAndTypeFiltering(String id)": {
                "lineStart": 83,
                "lineEnd": 86
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doFillCredentialsIdItems(@AncestorInPath Item item, @QueryParameter String credentialsId, @QueryParameter String address)": {
                "lineStart": 88,
                "lineEnd": 112
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doCheckAddress(@QueryParameter String value)": {
                "lineStart": 114,
                "lineEnd": 119
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doCheckCredentialsId(@AncestorInPath Item item, @QueryParameter String address, @QueryParameter String credentialsId)": {
                "lineStart": 121,
                "lineEnd": 145
            },
            "com.embotics.vlm.plugin.VCommanderConfig.doTestConnection(@QueryParameter(\"address\") final String address, @QueryParameter(\"credentialsId\") final String credentialsId, @QueryParameter(\"orgName\") final String orgName)": {
                "lineStart": 147,
                "lineEnd": 173
            },
            "com.embotics.vlm.plugin.VCommanderConfig.findCredentialProblem(String id)": {
                "lineStart": 175,
                "lineEnd": 185
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getAddress()": {
                "lineStart": 187,
                "lineEnd": 189
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setAddress(String address)": {
                "lineStart": 191,
                "lineEnd": 193
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getCredentialsId()": {
                "lineStart": 195,
                "lineEnd": 197
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setCredentialsId(String credentialsId)": {
                "lineStart": 199,
                "lineEnd": 201
            },
            "com.embotics.vlm.plugin.VCommanderConfig.getOrgName()": {
                "lineStart": 203,
                "lineEnd": 205
            },
            "com.embotics.vlm.plugin.VCommanderConfig.setOrgName(String orgName)": {
                "lineStart": 207,
                "lineEnd": 209
            }
        },
        "fcd32c3-AbstractVCommanderAction.java": {
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.<init>(boolean sync, Long timeout, Long polling)": {
                "lineStart": 17,
                "lineEnd": 21
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getDefault(Long value, long minValue, long defaultValue)": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getSync()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getTimeout()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction.getPolling()": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction$AbstractVCommanderActionDescriptor.doCheckTimeout(@QueryParameter Long value)": {
                "lineStart": 40,
                "lineEnd": 46
            },
            "com.embotics.vlm.plugin.actions.AbstractVCommanderAction$AbstractVCommanderActionDescriptor.doCheckPolling(@QueryParameter Long polling, @QueryParameter Long timeout)": {
                "lineStart": 48,
                "lineEnd": 58
            }
        },
        "36d32b8-VCommanderRunWorkflowAction.java": {
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.<init>(String targetType, String targetName, String workflowName, Boolean sync, Long timeout, Long polling)": {
                "lineStart": 27,
                "lineEnd": 32
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getTargetType()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getTargetName()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getWorkflowName()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.perform(Run<?, ?> run, TaskListener listener)": {
                "lineStart": 46,
                "lineEnd": 85
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.waitForWorkflowToBeCompleted(VCommanderClient client, String taskId, long timeout, long polling, Run<?, ?> run, TaskListener listener)": {
                "lineStart": 87,
                "lineEnd": 97
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction.getDescriptor()": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.getDisplayName()": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doFillTargetTypeItems()": {
                "lineStart": 109,
                "lineEnd": 116
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doCheckTargetType(@QueryParameter String targetType)": {
                "lineStart": 118,
                "lineEnd": 128
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doCheckTargetName(@QueryParameter String targetType, @QueryParameter String targetName)": {
                "lineStart": 130,
                "lineEnd": 140
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.doCheckWorkflowName(@QueryParameter String targetType, @QueryParameter String workflowName)": {
                "lineStart": 142,
                "lineEnd": 188
            },
            "com.embotics.vlm.plugin.actions.VCommanderRunWorkflowAction$DescriptorImpl.isTargetTypeValid(String resolvedTargetType)": {
                "lineStart": 190,
                "lineEnd": 199
            }
        }
    },
    "CVE-2021-3690": {
        "12ae5bb38-FrameHandler.java": {
            "io.undertow.websockets.jsr.FrameHandler.onFullPongMessage(final WebSocketChannel webSocketChannel, BufferedBinaryMessage bufferedBinaryMessage)": {
                "lineStart": 103,
                "lineEnd": 132
            }
        }
    },
    "CVE-2022-37021": {
        "9c29f53070-AbstractLauncher.java": {
            "org.apache.geode.distributed.AbstractLauncher.<init>()": {
                "lineStart": 53,
                "lineEnd": 65
            },
            "org.apache.geode.distributed.AbstractLauncher.assertPortAvailable(final int port)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.apache.geode.distributed.AbstractLauncher.assertPortAvailable(final InetAddress bindAddress, final int port)": {
                "lineStart": 71,
                "lineEnd": 76
            },
            "org.apache.geode.distributed.AbstractLauncher.isSet(final Properties properties, final String propertyName)": {
                "lineStart": 78,
                "lineEnd": 80
            },
            "org.apache.geode.distributed.AbstractLauncher.loadGemFireProperties(final URL url)": {
                "lineStart": 82,
                "lineEnd": 96
            },
            "org.apache.geode.distributed.AbstractLauncher.loadGemFirePropertiesFromClassPath(Properties properties)": {
                "lineStart": 98,
                "lineEnd": 105
            },
            "org.apache.geode.distributed.AbstractLauncher.isDebugging()": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "org.apache.geode.distributed.AbstractLauncher.setDebug(final boolean debug)": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "org.apache.geode.distributed.AbstractLauncher.isRunning()": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "org.apache.geode.distributed.AbstractLauncher.getDistributedSystemProperties()": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "org.apache.geode.distributed.AbstractLauncher.getDistributedSystemProperties(final Properties defaults)": {
                "lineStart": 123,
                "lineEnd": 134
            },
            "org.apache.geode.distributed.AbstractLauncher.getLogFile()": {
                "lineStart": 136,
                "lineEnd": 138
            },
            "org.apache.geode.distributed.AbstractLauncher.getLogFileCanonicalPath()": {
                "lineStart": 140,
                "lineEnd": 148
            },
            "org.apache.geode.distributed.AbstractLauncher.getLogFileName()": {
                "lineStart": 150,
                "lineEnd": 150
            },
            "org.apache.geode.distributed.AbstractLauncher.getMember()": {
                "lineStart": 151,
                "lineEnd": 161
            },
            "org.apache.geode.distributed.AbstractLauncher.getMemberId()": {
                "lineStart": 163,
                "lineEnd": 166
            },
            "org.apache.geode.distributed.AbstractLauncher.getMemberName()": {
                "lineStart": 168,
                "lineEnd": 171
            },
            "org.apache.geode.distributed.AbstractLauncher.getPid()": {
                "lineStart": 173,
                "lineEnd": 173
            },
            "org.apache.geode.distributed.AbstractLauncher.getServiceName()": {
                "lineStart": 174,
                "lineEnd": 174
            },
            "org.apache.geode.distributed.AbstractLauncher.getWorkingDirectory()": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "org.apache.geode.distributed.AbstractLauncher.debug(final String message, final Object... args)": {
                "lineStart": 179,
                "lineEnd": 190
            },
            "org.apache.geode.distributed.AbstractLauncher.debug(final Throwable t)": {
                "lineStart": 192,
                "lineEnd": 197
            },
            "org.apache.geode.distributed.AbstractLauncher.info(final Object message, final Object... args)": {
                "lineStart": 199,
                "lineEnd": 207
            },
            "org.apache.geode.distributed.AbstractLauncher.redirectOutput(final DistributedSystem distributedSystem)": {
                "lineStart": 209,
                "lineEnd": 214
            },
            "org.apache.geode.distributed.AbstractLauncher.version()": {
                "lineStart": 216,
                "lineEnd": 218
            },
            "org.apache.geode.distributed.AbstractLauncher.identifyPid()": {
                "lineStart": 220,
                "lineEnd": 222
            },
            "org.apache.geode.distributed.AbstractLauncher.identifyPidOrNot()": {
                "lineStart": 224,
                "lineEnd": 232
            },
            "org.apache.geode.distributed.AbstractLauncher.isPidInProcess()": {
                "lineStart": 234,
                "lineEnd": 237
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.format(final Date timestamp)": {
                "lineStart": 278,
                "lineEnd": 280
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.identifyPid()": {
                "lineStart": 282,
                "lineEnd": 290
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toDaysHoursMinutesSeconds(final Long milliseconds)": {
                "lineStart": 292,
                "lineEnd": 319
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.<init>(final Status status, final String statusMessage, final long timestamp, final String serviceLocation, final Integer pid, final Long uptime, final String workingDirectory, final List<String> jvmArguments, final String classpath, final String gemfireVersion, final String javaVersion, final String logFile, final String host, final String port, final String memberName)": {
                "lineStart": 321,
                "lineEnd": 338
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toJson()": {
                "lineStart": 340,
                "lineEnd": 365
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.isStartingNotRespondingOrNull(final ServiceState serviceState)": {
                "lineStart": 367,
                "lineEnd": 369
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.isStartingOrNotResponding()": {
                "lineStart": 371,
                "lineEnd": 373
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.isVmWithProcessIdRunning()": {
                "lineStart": 375,
                "lineEnd": 377
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getClasspath()": {
                "lineStart": 379,
                "lineEnd": 381
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getGemFireVersion()": {
                "lineStart": 383,
                "lineEnd": 385
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getJavaVersion()": {
                "lineStart": 387,
                "lineEnd": 389
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getJvmArguments()": {
                "lineStart": 391,
                "lineEnd": 393
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getMemberName()": {
                "lineStart": 395,
                "lineEnd": 397
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getPid()": {
                "lineStart": 399,
                "lineEnd": 401
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getServiceLocation()": {
                "lineStart": 403,
                "lineEnd": 405
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getServiceName()": {
                "lineStart": 407,
                "lineEnd": 407
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getStatus()": {
                "lineStart": 408,
                "lineEnd": 410
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getStatusMessage()": {
                "lineStart": 412,
                "lineEnd": 414
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getTimestamp()": {
                "lineStart": 416,
                "lineEnd": 418
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getUptime()": {
                "lineStart": 420,
                "lineEnd": 422
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getWorkingDirectory()": {
                "lineStart": 424,
                "lineEnd": 426
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getLogFile()": {
                "lineStart": 428,
                "lineEnd": 430
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getHost()": {
                "lineStart": 432,
                "lineEnd": 434
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.getPort()": {
                "lineStart": 436,
                "lineEnd": 438
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toString()": {
                "lineStart": 440,
                "lineEnd": 468
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toString(final Date dateTime)": {
                "lineStart": 470,
                "lineEnd": 472
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toString(final Number value)": {
                "lineStart": 474,
                "lineEnd": 476
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toString(final Object... values)": {
                "lineStart": 478,
                "lineEnd": 480
            },
            "org.apache.geode.distributed.AbstractLauncher$ServiceState.toString(final String value)": {
                "lineStart": 482,
                "lineEnd": 484
            },
            "org.apache.geode.distributed.AbstractLauncher$Status.<init>(final String description)": {
                "lineStart": 491,
                "lineEnd": 494
            },
            "org.apache.geode.distributed.AbstractLauncher$Status.valueOfDescription(final String description)": {
                "lineStart": 496,
                "lineEnd": 505
            },
            "org.apache.geode.distributed.AbstractLauncher$Status.getDescription()": {
                "lineStart": 507,
                "lineEnd": 509
            },
            "org.apache.geode.distributed.AbstractLauncher$Status.toString()": {
                "lineStart": 511,
                "lineEnd": 513
            }
        },
        "b107161a3a-InternalDataSerializer.java": {
            "org.apache.geode.internal.InternalDataSerializer.processIncomingClassName(String nameArg)": {
                "lineStart": 187,
                "lineEnd": 203
            },
            "org.apache.geode.internal.InternalDataSerializer.processOutgoingClassName(final String nameArg, DataOutput out)": {
                "lineStart": 205,
                "lineEnd": 232
            },
            "org.apache.geode.internal.InternalDataSerializer.initializeSerializationFilter(DistributionConfig distributionConfig)": {
                "lineStart": 234,
                "lineEnd": 236
            },
            "org.apache.geode.internal.InternalDataSerializer.initializeSerializationFilter(DistributionConfig distributionConfig, Collection<SanctionedSerializablesService> services)": {
                "lineStart": 238,
                "lineEnd": 251
            },
            "org.apache.geode.internal.InternalDataSerializer.clearSerializationFilter()": {
                "lineStart": 253,
                "lineEnd": 256
            },
            "org.apache.geode.internal.InternalDataSerializer.calculateSerializationVersion()": {
                "lineStart": 258,
                "lineEnd": 272
            },
            "org.apache.geode.internal.InternalDataSerializer.is662SerializationEnabled()": {
                "lineStart": 274,
                "lineEnd": 276
            },
            "org.apache.geode.internal.InternalDataSerializer.checkSerializationVersion()": {
                "lineStart": 278,
                "lineEnd": 283
            },
            "org.apache.geode.internal.InternalDataSerializer.initializeWellKnownSerializers()": {
                "lineStart": 285,
                "lineEnd": 778
            },
            "org.apache.geode.internal.InternalDataSerializer.ubyteToInt(byte ub)": {
                "lineStart": 780,
                "lineEnd": 782
            },
            "org.apache.geode.internal.InternalDataSerializer.getOldClientSupportService()": {
                "lineStart": 784,
                "lineEnd": 786
            },
            "org.apache.geode.internal.InternalDataSerializer.setOldClientSupportService(final OldClientSupportService svc)": {
                "lineStart": 788,
                "lineEnd": 790
            },
            "org.apache.geode.internal.InternalDataSerializer.newInstance(Class<? extends DataSerializer> c)": {
                "lineStart": 792,
                "lineEnd": 827
            },
            "org.apache.geode.internal.InternalDataSerializer.register(Class<? extends DataSerializer> c, boolean distribute, EventID eventId, ClientProxyMembershipID context)": {
                "lineStart": 829,
                "lineEnd": 834
            },
            "org.apache.geode.internal.InternalDataSerializer.register(Class<? extends DataSerializer> c, boolean distribute)": {
                "lineStart": 836,
                "lineEnd": 839
            },
            "org.apache.geode.internal.InternalDataSerializer._register(DataSerializer s, boolean distribute)": {
                "lineStart": 841,
                "lineEnd": 958
            },
            "org.apache.geode.internal.InternalDataSerializer.getInternalCache()": {
                "lineStart": 960,
                "lineEnd": 962
            },
            "org.apache.geode.internal.InternalDataSerializer.register(String className, boolean distribute, EventID eventId, ClientProxyMembershipID proxyId, int id)": {
                "lineStart": 964,
                "lineEnd": 966
            },
            "org.apache.geode.internal.InternalDataSerializer.register(String className, boolean distribute)": {
                "lineStart": 968,
                "lineEnd": 970
            },
            "org.apache.geode.internal.InternalDataSerializer.register(String className, boolean distribute, SerializerAttributesHolder holder)": {
                "lineStart": 972,
                "lineEnd": 998
            },
            "org.apache.geode.internal.InternalDataSerializer.updateSupportedClassesMap(Map<Integer, List<String>> map)": {
                "lineStart": 1000,
                "lineEnd": 1012
            },
            "org.apache.geode.internal.InternalDataSerializer.updateSupportedClassesMap(String dsClassName, String supportedClassName)": {
                "lineStart": 1014,
                "lineEnd": 1020
            },
            "org.apache.geode.internal.InternalDataSerializer.sendRegistrationMessageToServers(DataSerializer dataSerializer)": {
                "lineStart": 1022,
                "lineEnd": 1024
            },
            "org.apache.geode.internal.InternalDataSerializer.sendRegistrationMessageToServers(SerializerAttributesHolder holder)": {
                "lineStart": 1026,
                "lineEnd": 1028
            },
            "org.apache.geode.internal.InternalDataSerializer.sendRegistrationMessageToClients(DataSerializer dataSerializer)": {
                "lineStart": 1030,
                "lineEnd": 1052
            },
            "org.apache.geode.internal.InternalDataSerializer.generateEventId()": {
                "lineStart": 1054,
                "lineEnd": 1061
            },
            "org.apache.geode.internal.InternalDataSerializer.unregister(int id)": {
                "lineStart": 1063,
                "lineEnd": 1085
            },
            "org.apache.geode.internal.InternalDataSerializer.reinitialize()": {
                "lineStart": 1087,
                "lineEnd": 1094
            },
            "org.apache.geode.internal.InternalDataSerializer.getSerializer(Class c)": {
                "lineStart": 1096,
                "lineEnd": 1122
            },
            "org.apache.geode.internal.InternalDataSerializer.getSerializer(int id)": {
                "lineStart": 1124,
                "lineEnd": 1172
            },
            "org.apache.geode.internal.InternalDataSerializer.getSerializers()": {
                "lineStart": 1174,
                "lineEnd": 1218
            },
            "org.apache.geode.internal.InternalDataSerializer.getSerializersForDistribution()": {
                "lineStart": 1220,
                "lineEnd": 1241
            },
            "org.apache.geode.internal.InternalDataSerializer.addRegistrationListener(RegistrationListener l)": {
                "lineStart": 1243,
                "lineEnd": 1250
            },
            "org.apache.geode.internal.InternalDataSerializer.removeRegistrationListener(RegistrationListener l)": {
                "lineStart": 1252,
                "lineEnd": 1259
            },
            "org.apache.geode.internal.InternalDataSerializer.fireNewDataSerializer(DataSerializer ds)": {
                "lineStart": 1261,
                "lineEnd": 1266
            },
            "org.apache.geode.internal.InternalDataSerializer.fireNewInstantiator(Instantiator instantiator)": {
                "lineStart": 1268,
                "lineEnd": 1273
            },
            "org.apache.geode.internal.InternalDataSerializer.sendRegistrationMessage(DataSerializer s)": {
                "lineStart": 1275,
                "lineEnd": 1282
            },
            "org.apache.geode.internal.InternalDataSerializer.writeDSFIDHeader(int dsfid, DataOutput out)": {
                "lineStart": 1284,
                "lineEnd": 1302
            },
            "org.apache.geode.internal.InternalDataSerializer.writeDSFID(DataSerializableFixedID o, DataOutput out)": {
                "lineStart": 1304,
                "lineEnd": 1328
            },
            "org.apache.geode.internal.InternalDataSerializer.writeWellKnownObject(Object o, DataOutput out, boolean ensurePdxCompatibility)": {
                "lineStart": 1330,
                "lineEnd": 1332
            },
            "org.apache.geode.internal.InternalDataSerializer.writeUserObject(Object o, DataOutput out, boolean ensurePdxCompatibility)": {
                "lineStart": 1334,
                "lineEnd": 1426
            },
            "org.apache.geode.internal.InternalDataSerializer.autoSerialized(Object o, DataOutput out)": {
                "lineStart": 1428,
                "lineEnd": 1491
            },
            "org.apache.geode.internal.InternalDataSerializer.checkPdxCompatible(Object o, boolean ensurePdxCompatibility)": {
                "lineStart": 1493,
                "lineEnd": 1498
            },
            "org.apache.geode.internal.InternalDataSerializer.isGemfireObject(Object o)": {
                "lineStart": 1500,
                "lineEnd": 1502
            },
            "org.apache.geode.internal.InternalDataSerializer.readUserObject(DataInput in, int serializerId)": {
                "lineStart": 1504,
                "lineEnd": 1511
            },
            "org.apache.geode.internal.InternalDataSerializer.checkOut(DataOutput out)": {
                "lineStart": 1513,
                "lineEnd": 1518
            },
            "org.apache.geode.internal.InternalDataSerializer.checkIn(DataInput in)": {
                "lineStart": 1520,
                "lineEnd": 1525
            },
            "org.apache.geode.internal.InternalDataSerializer.writeSet(Collection<?> set, DataOutput out)": {
                "lineStart": 1527,
                "lineEnd": 1549
            },
            "org.apache.geode.internal.InternalDataSerializer.readSet(DataInput in)": {
                "lineStart": 1551,
                "lineEnd": 1553
            },
            "org.apache.geode.internal.InternalDataSerializer.writeSetOfLongs(Set set, boolean hasLongIDs, DataOutput out)": {
                "lineStart": 1555,
                "lineEnd": 1575
            },
            "org.apache.geode.internal.InternalDataSerializer.readSetOfLongs(DataInput in)": {
                "lineStart": 1577,
                "lineEnd": 1593
            },
            "org.apache.geode.internal.InternalDataSerializer.readTimeUnit(DataInput in)": {
                "lineStart": 1595,
                "lineEnd": 1620
            },
            "org.apache.geode.internal.InternalDataSerializer.writeTimestamp(Timestamp o, DataOutput out)": {
                "lineStart": 1622,
                "lineEnd": 1629
            },
            "org.apache.geode.internal.InternalDataSerializer.readTimestamp(DataInput in)": {
                "lineStart": 1631,
                "lineEnd": 1639
            },
            "org.apache.geode.internal.InternalDataSerializer.writeUUID(java.util.UUID o, DataOutput out)": {
                "lineStart": 1641,
                "lineEnd": 1649
            },
            "org.apache.geode.internal.InternalDataSerializer.readUUID(DataInput in)": {
                "lineStart": 1651,
                "lineEnd": 1661
            },
            "org.apache.geode.internal.InternalDataSerializer.writeBigDecimal(BigDecimal o, DataOutput out)": {
                "lineStart": 1663,
                "lineEnd": 1670
            },
            "org.apache.geode.internal.InternalDataSerializer.readBigDecimal(DataInput in)": {
                "lineStart": 1672,
                "lineEnd": 1680
            },
            "org.apache.geode.internal.InternalDataSerializer.writeBigInteger(BigInteger o, DataOutput out)": {
                "lineStart": 1682,
                "lineEnd": 1689
            },
            "org.apache.geode.internal.InternalDataSerializer.readBigInteger(DataInput in)": {
                "lineStart": 1691,
                "lineEnd": 1699
            },
            "org.apache.geode.internal.InternalDataSerializer.writeUserDataSerializableHeader(int classId, DataOutput out)": {
                "lineStart": 1701,
                "lineEnd": 1715
            },
            "org.apache.geode.internal.InternalDataSerializer.writeCharArray(char[] array, DataOutput out)": {
                "lineStart": 1717,
                "lineEnd": 1735
            },
            "org.apache.geode.internal.InternalDataSerializer.isSerializedNull(byte[] serializedForm)": {
                "lineStart": 1737,
                "lineEnd": 1739
            },
            "org.apache.geode.internal.InternalDataSerializer.basicWriteObject(Object o, DataOutput out, boolean ensurePdxCompatibility)": {
                "lineStart": 1741,
                "lineEnd": 1805
            },
            "org.apache.geode.internal.InternalDataSerializer.disallowJavaSerialization()": {
                "lineStart": 1807,
                "lineEnd": 1810
            },
            "org.apache.geode.internal.InternalDataSerializer.writePdxEnum(Enum<?> e, DataOutput out)": {
                "lineStart": 1812,
                "lineEnd": 1820
            },
            "org.apache.geode.internal.InternalDataSerializer.writePdxEnumId(int eId, DataOutput out)": {
                "lineStart": 1822,
                "lineEnd": 1826
            },
            "org.apache.geode.internal.InternalDataSerializer.readPdxEnum(DataInput in)": {
                "lineStart": 1828,
                "lineEnd": 1844
            },
            "org.apache.geode.internal.InternalDataSerializer.writeGemFireEnum(Enum<?> e, DataOutput out)": {
                "lineStart": 1846,
                "lineEnd": 1855
            },
            "org.apache.geode.internal.InternalDataSerializer.readGemFireEnum(DataInput in)": {
                "lineStart": 1857,
                "lineEnd": 1863
            },
            "org.apache.geode.internal.InternalDataSerializer.readPdxInlineEnum(DataInput in)": {
                "lineStart": 1865,
                "lineEnd": 1880
            },
            "org.apache.geode.internal.InternalDataSerializer.writeSerializableObject(Object o, DataOutput out)": {
                "lineStart": 1882,
                "lineEnd": 1933
            },
            "org.apache.geode.internal.InternalDataSerializer.invokeToData(Object serializableObject, DataOutput out)": {
                "lineStart": 1935,
                "lineEnd": 1985
            },
            "org.apache.geode.internal.InternalDataSerializer.invokeFromData(Object deserializableObject, DataInput in)": {
                "lineStart": 1987,
                "lineEnd": 2033
            },
            "org.apache.geode.internal.InternalDataSerializer.readDataSerializable(final DataInput in)": {
                "lineStart": 2035,
                "lineEnd": 2051
            },
            "org.apache.geode.internal.InternalDataSerializer.writeArrayLength(int len, DataOutput out)": {
                "lineStart": 2053,
                "lineEnd": 2069
            },
            "org.apache.geode.internal.InternalDataSerializer.readArrayLength(DataInput in)": {
                "lineStart": 2071,
                "lineEnd": 2094
            },
            "org.apache.geode.internal.InternalDataSerializer.readDSFID(final DataInput in, DSCODE dscode)": {
                "lineStart": 2096,
                "lineEnd": 2113
            },
            "org.apache.geode.internal.InternalDataSerializer.readDSFID(final DataInput in)": {
                "lineStart": 2115,
                "lineEnd": 2118
            },
            "org.apache.geode.internal.InternalDataSerializer.readString(DataInput in, DSCODE dscode)": {
                "lineStart": 2120,
                "lineEnd": 2141
            },
            "org.apache.geode.internal.InternalDataSerializer.readHugeStringFromDataInput(DataInput in)": {
                "lineStart": 2143,
                "lineEnd": 2155
            },
            "org.apache.geode.internal.InternalDataSerializer.readStringUTFFromDataInput(DataInput in)": {
                "lineStart": 2157,
                "lineEnd": 2163
            },
            "org.apache.geode.internal.InternalDataSerializer.readStringBytesFromDataInput(DataInput dataInput, int len)": {
                "lineStart": 2165,
                "lineEnd": 2177
            },
            "org.apache.geode.internal.InternalDataSerializer.readString(DataInput in, byte header)": {
                "lineStart": 2179,
                "lineEnd": 2181
            },
            "org.apache.geode.internal.InternalDataSerializer.readNonPdxInstanceObject(final DataInput in)": {
                "lineStart": 2183,
                "lineEnd": 2199
            },
            "org.apache.geode.internal.InternalDataSerializer.basicReadObject(final DataInput in)": {
                "lineStart": 2201,
                "lineEnd": 2359
            },
            "org.apache.geode.internal.InternalDataSerializer.readSerializable(DataInput in)": {
                "lineStart": 2361,
                "lineEnd": 2409
            },
            "org.apache.geode.internal.InternalDataSerializer.readUserDataSerializable(final DataInput in, int classId)": {
                "lineStart": 2411,
                "lineEnd": 2437
            },
            "org.apache.geode.internal.InternalDataSerializer.isPdxSerializationInProgress()": {
                "lineStart": 2439,
                "lineEnd": 2442
            },
            "org.apache.geode.internal.InternalDataSerializer.setPdxSerializationInProgress(boolean inProgress)": {
                "lineStart": 2444,
                "lineEnd": 2446
            },
            "org.apache.geode.internal.InternalDataSerializer.writePdx(DataOutput out, InternalCache internalCache, Object pdx, PdxSerializer pdxSerializer)": {
                "lineStart": 2448,
                "lineEnd": 2550
            },
            "org.apache.geode.internal.InternalDataSerializer.getDMStats(InternalCache internalCache)": {
                "lineStart": 2552,
                "lineEnd": 2565
            },
            "org.apache.geode.internal.InternalDataSerializer.readPdxSerializable(final DataInput in)": {
                "lineStart": 2567,
                "lineEnd": 2591
            },
            "org.apache.geode.internal.InternalDataSerializer.readPdxInstance(final byte[] dataBytes, InternalCache internalCache)": {
                "lineStart": 2593,
                "lineEnd": 2640
            },
            "org.apache.geode.internal.InternalDataSerializer.getLoadedDataSerializers()": {
                "lineStart": 2642,
                "lineEnd": 2644
            },
            "org.apache.geode.internal.InternalDataSerializer.getDsClassesToHoldersMap()": {
                "lineStart": 2646,
                "lineEnd": 2648
            },
            "org.apache.geode.internal.InternalDataSerializer.getIdsToHoldersMap()": {
                "lineStart": 2650,
                "lineEnd": 2652
            },
            "org.apache.geode.internal.InternalDataSerializer.getSupportedClassesToHoldersMap()": {
                "lineStart": 2654,
                "lineEnd": 2656
            },
            "org.apache.geode.internal.InternalDataSerializer.writeObjectArray(Object[] array, DataOutput out, boolean ensureCompatibility)": {
                "lineStart": 2658,
                "lineEnd": 2678
            },
            "org.apache.geode.internal.InternalDataSerializer.writeVLOld(long data, DataOutput out)": {
                "lineStart": 2680,
                "lineEnd": 2701
            },
            "org.apache.geode.internal.InternalDataSerializer.readVLOld(DataInput in)": {
                "lineStart": 2703,
                "lineEnd": 2722
            },
            "org.apache.geode.internal.InternalDataSerializer.writeUnsignedVL(long data, DataOutput out)": {
                "lineStart": 2724,
                "lineEnd": 2737
            },
            "org.apache.geode.internal.InternalDataSerializer.readUnsignedVL(DataInput in)": {
                "lineStart": 2739,
                "lineEnd": 2753
            },
            "org.apache.geode.internal.InternalDataSerializer.writeSignedVL(long data, DataOutput out)": {
                "lineStart": 2755,
                "lineEnd": 2757
            },
            "org.apache.geode.internal.InternalDataSerializer.readSignedVL(DataInput in)": {
                "lineStart": 2759,
                "lineEnd": 2761
            },
            "org.apache.geode.internal.InternalDataSerializer.decodeZigZag64(final long n)": {
                "lineStart": 2763,
                "lineEnd": 2765
            },
            "org.apache.geode.internal.InternalDataSerializer.encodeZigZag64(final long n)": {
                "lineStart": 2767,
                "lineEnd": 2769
            },
            "org.apache.geode.internal.InternalDataSerializer.calculateBytesForTSandDSID(int dsid)": {
                "lineStart": 2771,
                "lineEnd": 2783
            },
            "org.apache.geode.internal.InternalDataSerializer.getCachedClass(String p_className)": {
                "lineStart": 2785,
                "lineEnd": 2810
            },
            "org.apache.geode.internal.InternalDataSerializer.getExistingCachedClass(String className)": {
                "lineStart": 2812,
                "lineEnd": 2820
            },
            "org.apache.geode.internal.InternalDataSerializer.flushClassCache()": {
                "lineStart": 2822,
                "lineEnd": 2827
            },
            "org.apache.geode.internal.InternalDataSerializer.getDSFIDSerializer()": {
                "lineStart": 2829,
                "lineEnd": 2831
            },
            "org.apache.geode.internal.InternalDataSerializer.createDeserializationContext(DataInput in)": {
                "lineStart": 2833,
                "lineEnd": 2835
            },
            "org.apache.geode.internal.InternalDataSerializer.createSerializationContext(DataOutput out)": {
                "lineStart": 2837,
                "lineEnd": 2839
            },
            "org.apache.geode.internal.InternalDataSerializer.getDSFIDFactory()": {
                "lineStart": 2841,
                "lineEnd": 2843
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationListener.newInstantiator(Instantiator instantiator)": {
                "lineStart": 2848,
                "lineEnd": 2848
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationListener.newDataSerializer(DataSerializer ds)": {
                "lineStart": 2849,
                "lineEnd": 2849
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.<init>()": {
                "lineStart": 2857,
                "lineEnd": 2857
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.<init>(String name, EventID event, ClientProxyMembershipID proxy, int id)": {
                "lineStart": 2858,
                "lineEnd": 2863
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.getClassName()": {
                "lineStart": 2865,
                "lineEnd": 2867
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.getEventId()": {
                "lineStart": 2869,
                "lineEnd": 2871
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.getProxyId()": {
                "lineStart": 2873,
                "lineEnd": 2875
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.getId()": {
                "lineStart": 2877,
                "lineEnd": 2879
            },
            "org.apache.geode.internal.InternalDataSerializer$SerializerAttributesHolder.toString()": {
                "lineStart": 2881,
                "lineEnd": 2883
            },
            "org.apache.geode.internal.InternalDataSerializer$Marker.getSerializer()": {
                "lineStart": 2890,
                "lineEnd": 2890
            },
            "org.apache.geode.internal.InternalDataSerializer$Marker.setSerializer(DataSerializer serializer)": {
                "lineStart": 2891,
                "lineEnd": 2898
            },
            "org.apache.geode.internal.InternalDataSerializer$GetMarker.getSerializer()": {
                "lineStart": 2904,
                "lineEnd": 2936
            },
            "org.apache.geode.internal.InternalDataSerializer$InitMarker.getSerializer()": {
                "lineStart": 2941,
                "lineEnd": 2958
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.<init>()": {
                "lineStart": 2967,
                "lineEnd": 2967
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.<init>(DataSerializer s)": {
                "lineStart": 2968,
                "lineEnd": 2972
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.getFullMessage(Throwable t)": {
                "lineStart": 2974,
                "lineEnd": 2978
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.getFullMessage(StringBuffer sb, Throwable t)": {
                "lineStart": 2980,
                "lineEnd": 2993
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.process(ClusterDistributionManager dm)": {
                "lineStart": 2995,
                "lineEnd": 3034
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.getDSFID()": {
                "lineStart": 3036,
                "lineEnd": 3038
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.toData(DataOutput out, SerializationContext context)": {
                "lineStart": 3040,
                "lineEnd": 3045
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.fromData(DataInput in, DeserializationContext context)": {
                "lineStart": 3047,
                "lineEnd": 3053
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.toString()": {
                "lineStart": 3055,
                "lineEnd": 3057
            },
            "org.apache.geode.internal.InternalDataSerializer$RegistrationMessage.getSerializationVersions()": {
                "lineStart": 3059,
                "lineEnd": 3061
            },
            "org.apache.geode.internal.InternalDataSerializer$DSObjectInputStream.<init>(InputStream stream)": {
                "lineStart": 3066,
                "lineEnd": 3068
            },
            "org.apache.geode.internal.InternalDataSerializer$DSObjectInputStream.resolveClass(ObjectStreamClass desc)": {
                "lineStart": 3070,
                "lineEnd": 3084
            },
            "org.apache.geode.internal.InternalDataSerializer$DSObjectInputStream.resolveProxyClass(String[] interfaces)": {
                "lineStart": 3086,
                "lineEnd": 3123
            },
            "org.apache.geode.internal.InternalDataSerializer$WellKnownDS.getId()": {
                "lineStart": 3128,
                "lineEnd": 3130
            },
            "org.apache.geode.internal.InternalDataSerializer$WellKnownDS.getSupportedClasses()": {
                "lineStart": 3132,
                "lineEnd": 3134
            },
            "org.apache.geode.internal.InternalDataSerializer$WellKnownDS.fromData(DataInput in)": {
                "lineStart": 3136,
                "lineEnd": 3138
            }
        },
        "688d541e7f-DescribeDiskStoreCommand.java": {
            "org.apache.geode.management.internal.cli.commands.DescribeDiskStoreCommand.describeDiskStore(@CliOption(key = CliStrings.MEMBER, mandatory = true, optionContext = ConverterHint.MEMBERIDNAME, help = CliStrings.DESCRIBE_DISK_STORE__MEMBER__HELP) final String memberName, @CliOption(key = CliStrings.DESCRIBE_DISK_STORE__NAME, mandatory = true, optionContext = ConverterHint.DISKSTORE, help = CliStrings.DESCRIBE_DISK_STORE__NAME__HELP) final String diskStoreName)": {
                "lineStart": 28,
                "lineEnd": 33
            },
            "org.apache.geode.management.internal.cli.commands.DescribeDiskStoreCommand.getDiskStoreDescription(final String memberName, final String diskStoreName)": {
                "lineStart": 35,
                "lineEnd": 51
            },
            "org.apache.geode.management.internal.cli.commands.DescribeDiskStoreCommand.toResultModel(final DiskStoreDetails diskStoreDetails)": {
                "lineStart": 53,
                "lineEnd": 103
            }
        },
        "5e404230c8-Gfsh.java": {
            "org.apache.geode.management.internal.cli.shell.Gfsh.<init>()": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.<init>(String[] args)": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.<init>(boolean launchShell, String[] args, GfshConfig gfshConfig)": {
                "lineStart": 125,
                "lineEnd": 172
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getInstance(boolean launchShell, String[] args, GfshConfig gfshConfig)": {
                "lineStart": 174,
                "lineEnd": 190
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isInfoResult()": {
                "lineStart": 192,
                "lineEnd": 198
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.println()": {
                "lineStart": 200,
                "lineEnd": 202
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.println(Object toPrint)": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.print(Object toPrint)": {
                "lineStart": 208,
                "lineEnd": 210
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.printlnErr(Object toPrint)": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.readLine(ConsoleReader reader, String prompt)": {
                "lineStart": 216,
                "lineEnd": 235
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.removeBackslash(String result)": {
                "lineStart": 237,
                "lineEnd": 243
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.redirectInternalJavaLoggers()": {
                "lineStart": 245,
                "lineEnd": 266
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getCurrentInstance()": {
                "lineStart": 268,
                "lineEnd": 270
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.extractKey(String input)": {
                "lineStart": 272,
                "lineEnd": 274
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getConsoleReader()": {
                "lineStart": 276,
                "lineEnd": 279
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.wrapText(final String string, final int indentationLevel, final int terminalWidth)": {
                "lineStart": 281,
                "lineEnd": 331
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.initializeEnvironment()": {
                "lineStart": 333,
                "lineEnd": 357
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getSignalHandler()": {
                "lineStart": 359,
                "lineEnd": 361
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.readPassword(String textToPrompt)": {
                "lineStart": 363,
                "lineEnd": 369
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.readText(String textToPrompt)": {
                "lineStart": 371,
                "lineEnd": 377
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.start()": {
                "lineStart": 379,
                "lineEnd": 382
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getShellName()": {
                "lineStart": 384,
                "lineEnd": 386
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.stop()": {
                "lineStart": 388,
                "lineEnd": 396
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.waitForComplete()": {
                "lineStart": 398,
                "lineEnd": 400
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.executeInitFileIfPresent()": {
                "lineStart": 402,
                "lineEnd": 418
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.findResources(String resourceName)": {
                "lineStart": 420,
                "lineEnd": 422
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getExecutionStrategy()": {
                "lineStart": 424,
                "lineEnd": 426
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getParser()": {
                "lineStart": 428,
                "lineEnd": 430
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getGfshFileLogger()": {
                "lineStart": 432,
                "lineEnd": 434
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.executeCommand(String line)": {
                "lineStart": 436,
                "lineEnd": 438
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.executeScriptLine(final String line)": {
                "lineStart": 440,
                "lineEnd": 475
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.interact(String textToPrompt)": {
                "lineStart": 477,
                "lineEnd": 485
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.readWithMask(String textToPrompt, Character mask)": {
                "lineStart": 487,
                "lineEnd": 495
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.printBannerAndWelcome()": {
                "lineStart": 497,
                "lineEnd": 500
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getBanner()": {
                "lineStart": 502,
                "lineEnd": 510
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getProductName()": {
                "lineStart": 512,
                "lineEnd": 514
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getVersion()": {
                "lineStart": 516,
                "lineEnd": 518
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getVersion(boolean full)": {
                "lineStart": 520,
                "lineEnd": 522
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getShortVersion()": {
                "lineStart": 524,
                "lineEnd": 526
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getFullVersion()": {
                "lineStart": 528,
                "lineEnd": 536
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getGeodeSerializationVersion()": {
                "lineStart": 538,
                "lineEnd": 540
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getWelcomeMessage()": {
                "lineStart": 542,
                "lineEnd": 544
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.handleExecutionResult(Object result)": {
                "lineStart": 546,
                "lineEnd": 592
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.useExternalViewer(Result result)": {
                "lineStart": 594,
                "lineEnd": 605
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isUnix()": {
                "lineStart": 607,
                "lineEnd": 609
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.write(String message, boolean isError)": {
                "lineStart": 611,
                "lineEnd": 619
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.createConsoleReader()": {
                "lineStart": 621,
                "lineEnd": 626
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.logCommandToOutput(String processedLine)": {
                "lineStart": 628,
                "lineEnd": 639
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.versionInfo()": {
                "lineStart": 641,
                "lineEnd": 643
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getTerminalHeight()": {
                "lineStart": 645,
                "lineEnd": 647
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getTerminalWidth()": {
                "lineStart": 649,
                "lineEnd": 661
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getLastExecutionStatus()": {
                "lineStart": 663,
                "lineEnd": 665
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.setLastExecutionStatus(int lastExecutionStatus)": {
                "lineStart": 667,
                "lineEnd": 670
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.printAsInfo(String message)": {
                "lineStart": 672,
                "lineEnd": 680
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.printAsWarning(String message)": {
                "lineStart": 682,
                "lineEnd": 690
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.printAsSevere(String message)": {
                "lineStart": 692,
                "lineEnd": 700
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.logInfo(String message, Throwable t)": {
                "lineStart": 702,
                "lineEnd": 714
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.logWarning(String message, Throwable t)": {
                "lineStart": 716,
                "lineEnd": 728
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.logSevere(String message, Throwable t)": {
                "lineStart": 730,
                "lineEnd": 742
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.logToFile(String message, Throwable t)": {
                "lineStart": 744,
                "lineEnd": 752
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.executeScript(File scriptFile, boolean quiet, boolean continueOnError)": {
                "lineStart": 754,
                "lineEnd": 847
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.setEnvProperty(String propertyName, String propertyValue)": {
                "lineStart": 849,
                "lineEnd": 859
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getEnvProperty(String propertyName)": {
                "lineStart": 861,
                "lineEnd": 863
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getEnvAppContextPath()": {
                "lineStart": 865,
                "lineEnd": 872
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getEnv()": {
                "lineStart": 874,
                "lineEnd": 877
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isQuietMode()": {
                "lineStart": 879,
                "lineEnd": 881
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.promptLoop()": {
                "lineStart": 883,
                "lineEnd": 921
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getDefaultSecondaryPrompt()": {
                "lineStart": 923,
                "lineEnd": 925
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isConnectedAndReady()": {
                "lineStart": 927,
                "lineEnd": 929
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isCurrentInstanceConnectedAndReady()": {
                "lineStart": 931,
                "lineEnd": 933
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getOperationInvoker()": {
                "lineStart": 935,
                "lineEnd": 937
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.setOperationInvoker(final OperationInvoker operationInvoker)": {
                "lineStart": 939,
                "lineEnd": 941
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getGfshConfig()": {
                "lineStart": 943,
                "lineEnd": 945
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getHistoryFileName()": {
                "lineStart": 947,
                "lineEnd": 949
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.clearHistory()": {
                "lineStart": 951,
                "lineEnd": 957
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getLogFilePath()": {
                "lineStart": 959,
                "lineEnd": 961
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isLoggingEnabled()": {
                "lineStart": 963,
                "lineEnd": 965
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getPromptText()": {
                "lineStart": 967,
                "lineEnd": 981
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.notifyDisconnect(String endPoints)": {
                "lineStart": 983,
                "lineEnd": 991
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getDebug()": {
                "lineStart": 993,
                "lineEnd": 995
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.setDebug(boolean flag)": {
                "lineStart": 997,
                "lineEnd": 999
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.isHeadlessMode()": {
                "lineStart": 1001,
                "lineEnd": 1003
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.getGfshHistory()": {
                "lineStart": 1005,
                "lineEnd": 1007
            },
            "org.apache.geode.management.internal.cli.shell.Gfsh.expandProperties(final String input)": {
                "lineStart": 1009,
                "lineEnd": 1020
            }
        },
        "3b2aaa7bf0-CompiledClassUtils.java": {
            "org.apache.geode.codeAnalysis.CompiledClassUtils.loadClassesAndVariables(InputStream stream)": {
                "lineStart": 292,
                "lineEnd": 307
            }
        },
        "72b4d41112-NumberUtils.java": {
            "org.apache.geode.rest.internal.web.util.NumberUtils.isNumeric(String value)": {
                "lineStart": 5,
                "lineEnd": 15
            },
            "org.apache.geode.rest.internal.web.util.NumberUtils.longValue(final Object value)": {
                "lineStart": 17,
                "lineEnd": 23
            },
            "org.apache.geode.rest.internal.web.util.NumberUtils.parseLong(final String value)": {
                "lineStart": 25,
                "lineEnd": 33
            },
            "org.apache.geode.rest.internal.web.util.NumberUtils.isPrimitiveOrWrapper(Class<?> klass)": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "org.apache.geode.rest.internal.web.util.NumberUtils.isPrimitiveOrObject(final String type)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.apache.geode.rest.internal.web.util.NumberUtils.isValuePrimitiveType(final Object value)": {
                "lineStart": 43,
                "lineEnd": 45
            }
        }
    },
    "CVE-2022-42129": {
        "d8395175b3858-DDMFormDisplayContext.java": {
            "com.liferay.dynamic.data.mapping.form.web.internal.display.context.DDMFormDisplayContext.<init>(DDMFormFieldTypeServicesTracker ddmFormFieldTypeServicesTracker, DDMFormInstanceLocalService ddmFormInstanceLocalService, DDMFormInstanceRecordLocalService ddmFormInstanceRecordLocalService, DDMFormInstanceRecordVersionLocalService ddmFormInstanceRecordVersionLocalService, DDMFormInstanceService ddmFormInstanceService, DDMFormInstanceVersionLocalService ddmFormInstanceVersionLocalService, DDMFormRenderer ddmFormRenderer, DDMFormValuesFactory ddmFormValuesFactory, DDMFormValuesMerger ddmFormValuesMerger, DDMFormWebConfiguration ddmFormWebConfiguration, DDMStorageAdapterTracker ddmStorageAdapterTracker, FFSubmissionsSettingsConfigurationActivator ffSubmissionsSettingsConfigurationActivator, GroupLocalService groupLocalService, JSONFactory jsonFactory, ObjectFieldLocalService objectFieldLocalService, ObjectRelationshipLocalService objectRelationshipLocalService, Portal portal, RenderRequest renderRequest, RenderResponse renderResponse, RoleLocalService roleLocalService, UserLocalService userLocalService, WorkflowDefinitionLinkLocalService workflowDefinitionLinkLocalService)": {
                "lineStart": 91,
                "lineEnd": 124
            },
            "com.liferay.dynamic.data.mapping.form.web.internal.display.context.DDMFormDisplayContext.getFormInstanceRecord()": {
                "lineStart": 250,
                "lineEnd": 257
            }
        },
        "becbb1c844797-DDMFormPortlet.java": {
            "com.liferay.dynamic.data.mapping.form.web.internal.portlet.DDMFormPortlet.setRenderRequestAttributes(RenderRequest renderRequest, RenderResponse renderResponse)": {
                "lineStart": 156,
                "lineEnd": 159
            }
        }
    },
    "CVE-2021-33323": {
        "e2a58169fc699-AddFormInstanceRecordMVCResourceCommand.java": {
            "com.liferay.dynamic.data.mapping.form.web.internal.portlet.action.AddFormInstanceRecordMVCResourceCommand.doServeResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)": {
                "lineStart": 53,
                "lineEnd": 77
            }
        }
    },
    "CVE-2022-29237": {
        "f50e7cbefe-IngestServiceImpl.java": {
            "org.opencastproject.ingest.impl.IngestServiceImpl.addContentToRepo(MediaPackage mp, String elementId, URI uri)": {
                "lineStart": 1199,
                "lineEnd": 1265
            }
        }
    },
    "CVE-2022-47894": {
        "13857199e-UniverseClient.java": {
            "org.apache.zeppelin.sap.universe.UniverseClient.getResults(String token, String queryId)": {
                "lineStart": 133,
                "lineEnd": 171
            },
            "org.apache.zeppelin.sap.universe.UniverseClient.getUniverseNodesInfo(String token, String universeName)": {
                "lineStart": 227,
                "lineEnd": 279
            },
            "org.apache.zeppelin.sap.universe.UniverseClient.getParameters(String token, String queryId)": {
                "lineStart": 304,
                "lineEnd": 342
            },
            "org.apache.zeppelin.sap.universe.UniverseClient.loadUniverses(String token, int offset, Map<String, UniverseInfo> universesMap)": {
                "lineStart": 373,
                "lineEnd": 453
            },
            "org.apache.zeppelin.sap.universe.UniverseClient.getValue(String response, String xPathString)": {
                "lineStart": 475,
                "lineEnd": 491
            }
        }
    },
    "CVE-2023-33544": {
        "47e5906fc-Zips.java": {
            "io.hawt.util.Zips.createZipFile(Logger log, File sourceDir, File outputZipFile)": {
                "lineStart": 17,
                "lineEnd": 20
            },
            "io.hawt.util.Zips.createZipFile(Logger log, File sourceDir, File outputZipFile, FileFilter filter)": {
                "lineStart": 22,
                "lineEnd": 34
            },
            "io.hawt.util.Zips.zipDirectory(Logger log, File directory, ZipOutputStream zos, String path, FileFilter filter)": {
                "lineStart": 36,
                "lineEnd": 77
            },
            "io.hawt.util.Zips.matches(FileFilter filter, File f)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "io.hawt.util.Zips.unzip(InputStream in, File toDir)": {
                "lineStart": 83,
                "lineEnd": 116
            }
        }
    },
    "CVE-2020-2303": {
        "9ed61d1-ActiveDirectoryDomain.java": {
            "hudson.plugins.active_directory.ActiveDirectoryDomain$DescriptorImpl.doValidateTest(@QueryParameter(fixEmpty = true) String name, @QueryParameter(fixEmpty = true) String servers, @QueryParameter(fixEmpty = true) String site, @QueryParameter(fixEmpty = true) String bindName, @QueryParameter(fixEmpty = true) String bindPassword, @QueryParameter(fixEmpty = true) TlsConfiguration tlsConfiguration)": {
                "lineStart": 172,
                "lineEnd": 283
            }
        },
        "d5515e8-ActiveDirectorySecurityRealm.java": {
            "hudson.plugins.active_directory.ActiveDirectorySecurityRealm.doAuthTest(StaplerRequest req, StaplerResponse rsp, @QueryParameter String username, @QueryParameter String password)": {
                "lineStart": 230,
                "lineEnd": 281
            }
        }
    },
    "CVE-2023-34455": {
        "24f5976-SnappyInputStream.java": {
            "org.xerial.snappy.SnappyInputStream.hasNextChunk()": {
                "lineStart": 193,
                "lineEnd": 253
            }
        }
    },
    "CVE-2022-40149": {
        "d58c339-DefaultConverter.java": {
            "org.codehaus.jettison.mapped.DefaultConverter.convertToJSONPrimitive(String text)": {
                "lineStart": 10,
                "lineEnd": 50
            }
        }
    },
    "CVE-2022-43396": {
        "0c22c0d94e-KylinConfigBase.java": {
            "org.apache.kylin.common.KylinConfigBase.getSparkSubmitCmd()": {
                "lineStart": 1866,
                "lineEnd": 1868
            }
        },
        "af2314563d-NSparkExecutable.java": {
            "org.apache.kylin.engine.spark.job.NSparkExecutable.generateSparkCmd(KylinConfig config, String hadoopConf, String jars, String kylinJobJar, String appArgs)": {
                "lineStart": 348,
                "lineEnd": 394
            }
        },
        "190ee438d2-DiagnosisController.java": {
            "org.apache.kylin.rest.controller.DiagnosisController.dumpJobDiagnosisInfo(@PathVariable String jobId, final HttpServletRequest request, final HttpServletResponse response)": {
                "lineStart": 51,
                "lineEnd": 61
            }
        }
    },
    "CVE-2021-21656": {
        "09db4c8-XcodeProjectParser.java": {
            "au.com.rayh.XcodeProjectParser.parseXcodeScheme(FilePath schemeFile)": {
                "lineStart": 86,
                "lineEnd": 169
            },
            "au.com.rayh.XcodeProjectParser.parseXcodeWorkspace(FilePath workspaceFileLocation)": {
                "lineStart": 171,
                "lineEnd": 223
            }
        }
    },
    "CVE-2024-31868": {
        "e9995c106-HeliumPackage.java": {
            "org.apache.zeppelin.helium.HeliumPackage.fromJson(String json)": {
                "lineStart": 102,
                "lineEnd": 104
            }
        },
        "519d09d70-SpellPackageInfo.java": {
            "org.apache.zeppelin.helium.SpellPackageInfo.getMagic()": {
                "lineStart": 5,
                "lineEnd": 7
            },
            "org.apache.zeppelin.helium.SpellPackageInfo.getUsage()": {
                "lineStart": 9,
                "lineEnd": 11
            }
        }
    },
    "CVE-2022-34179": {
        "dcf5292-StatusImage.java": {
            "org.jenkinsci.plugins.badge.StatusImage.<init>(String subject, String status, String colorName, String animatedColorName, String style, String link)": {
                "lineStart": 66,
                "lineEnd": 167
            }
        }
    },
    "CVE-2021-38265": {
        "34ae3650dcf55-AddCollectionLayoutMVCActionCommand.java": {
            "com.liferay.layout.admin.web.internal.portlet.action.AddCollectionLayoutMVCActionCommand._getCollectionLayoutDefinitionJSON(String className, String classPK)": {
                "lineStart": 88,
                "lineEnd": 101
            }
        }
    },
    "CVE-2023-51656": {
        "82d24ad417-FileLoaderManager.java": {
            "org.apache.iotdb.db.sync.receiver.load.FileLoaderManager.deSerializeDeviceOwnerMap(File deviceOwnerFile)": {
                "lineStart": 95,
                "lineEnd": 100
            },
            "org.apache.iotdb.db.sync.receiver.load.FileLoaderManager.serializeDeviceOwnerMap(File deviceOwnerFile)": {
                "lineStart": 102,
                "lineEnd": 115
            }
        }
    },
    "CVE-2023-31141": {
        "6a873d45319-OnDemandBlockSnapshotIndexInput.java": {
            "org.opensearch.index.store.remote.file.OnDemandBlockSnapshotIndexInput.fetchBlock(int blockId)": {
                "lineStart": 40,
                "lineEnd": 58
            }
        },
        "002a6d66e62-FileCache.java": {
            "org.opensearch.index.store.remote.filecache.FileCache.putAll(Map<? extends Path, ? extends CachedIndexInput> m)": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.opensearch.index.store.remote.filecache.FileCache.computeIfPresent(Path key, BiFunction<? super Path, ? super CachedIndexInput, ? extends CachedIndexInput> remappingFunction)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.opensearch.index.store.remote.filecache.FileCache.removeAll(Iterable<? extends Path> keys)": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "2b55377bc17-ConcurrentInvocationLinearizer.java": {
            "org.opensearch.index.store.remote.utils.ConcurrentInvocationLinearizer.linearize(METHOD_PARAM_TYPE input, CheckedFunction<METHOD_PARAM_TYPE, RET_TYPE, IOException> function)": {
                "lineStart": 12,
                "lineEnd": 30
            },
            "org.opensearch.index.store.remote.utils.ConcurrentInvocationLinearizer.linearizeInternal(METHOD_PARAM_TYPE input, CheckedFunction<METHOD_PARAM_TYPE, RET_TYPE, IOException> function)": {
                "lineStart": 32,
                "lineEnd": 52
            },
            "org.opensearch.index.store.remote.utils.ConcurrentInvocationLinearizer.getInvokeOnceCache()": {
                "lineStart": 54,
                "lineEnd": 56
            }
        },
        "6f015fe810d-TransferManager.java": {
            "org.opensearch.index.store.remote.utils.TransferManager.<init>(final BlobContainer blobContainer, final FileCache fileCache)": {
                "lineStart": 21,
                "lineEnd": 25
            },
            "org.opensearch.index.store.remote.utils.TransferManager.fetchBlob(BlobFetchRequest blobFetchRequest)": {
                "lineStart": 27,
                "lineEnd": 30
            },
            "org.opensearch.index.store.remote.utils.TransferManager.fetchOriginBlob(BlobFetchRequest blobFetchRequest)": {
                "lineStart": 32,
                "lineEnd": 58
            }
        },
        "b9a9c063fde-LRUCache.java": {
            "org.opensearch.index.store.remote.utils.cache.LRUCache.get(K key)": {
                "lineStart": 76,
                "lineEnd": 98
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.put(K key, V value)": {
                "lineStart": 100,
                "lineEnd": 142
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.putAll(Map<? extends K, ? extends V> m)": {
                "lineStart": 144,
                "lineEnd": 148
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)": {
                "lineStart": 150,
                "lineEnd": 207
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.remove(K key)": {
                "lineStart": 209,
                "lineEnd": 234
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.removeAll(Iterable<? extends K> keys)": {
                "lineStart": 236,
                "lineEnd": 241
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.hasOverflowed()": {
                "lineStart": 366,
                "lineEnd": 368
            },
            "org.opensearch.index.store.remote.utils.cache.LRUCache.evict()": {
                "lineStart": 370,
                "lineEnd": 383
            }
        },
        "7964e41b4f4-RefCountedCache.java": {
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.get(K key)": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.put(K key, V value)": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.putAll(Map<? extends K, ? extends V> m)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.remove(K key)": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.removeAll(Iterable<? extends K> keys)": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.clear()": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.size()": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.incRef(K key)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.decRef(K key)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.prune()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.usage()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.opensearch.index.store.remote.utils.cache.RefCountedCache.stats()": {
                "lineStart": 18,
                "lineEnd": 18
            }
        },
        "04b0581b41f-SegmentedCache.java": {
            "org.opensearch.index.store.remote.utils.cache.SegmentedCache.putAll(Map<? extends K, ? extends V> m)": {
                "lineStart": 60,
                "lineEnd": 64
            },
            "org.opensearch.index.store.remote.utils.cache.SegmentedCache.computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)": {
                "lineStart": 66,
                "lineEnd": 69
            },
            "org.opensearch.index.store.remote.utils.cache.SegmentedCache.removeAll(Iterable<? extends K> keys)": {
                "lineStart": 76,
                "lineEnd": 80
            }
        },
        "680dc441252-StatsCounter.java": {
            "org.opensearch.index.store.remote.utils.cache.stats.StatsCounter.recordHits(K key, int count)": {
                "lineStart": 5,
                "lineEnd": 5
            },
            "org.opensearch.index.store.remote.utils.cache.stats.StatsCounter.recordMisses(K key, int count)": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "org.opensearch.index.store.remote.utils.cache.stats.StatsCounter.recordRemoval(long weight)": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "org.opensearch.index.store.remote.utils.cache.stats.StatsCounter.recordReplacement()": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.opensearch.index.store.remote.utils.cache.stats.StatsCounter.recordEviction(long weight)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.opensearch.index.store.remote.utils.cache.stats.StatsCounter.snapshot()": {
                "lineStart": 10,
                "lineEnd": 10
            }
        }
    },
    "CVE-2022-40664": {
        "70ee06db9-StringUtils.java": {
            "org.apache.shiro.util.StringUtils.clean(String in)": {
                "lineStart": 46,
                "lineEnd": 57
            }
        },
        "a6496f4d6-FormAuthenticationFilter.java": {
            "org.apache.shiro.web.filter.authc.FormAuthenticationFilter.getPassword(ServletRequest request)": {
                "lineStart": 138,
                "lineEnd": 140
            }
        },
        "ea0974f37-WebUtils.java": {
            "org.apache.shiro.web.util.WebUtils.getCleanParam(ServletRequest request, String paramName)": {
                "lineStart": 314,
                "lineEnd": 316
            }
        }
    },
    "CVE-2024-23899": {
        "9eccfce-AbstractGitCommand.java": {
            "org.jenkinsci.plugins.gitserver.ssh.AbstractGitCommand.runCommand()": {
                "lineStart": 16,
                "lineEnd": 25
            }
        }
    },
    "CVE-2023-46673": {
        "1cfbc797402-SimulateDocumentBaseResult.java": {
            "org.elasticsearch.action.ingest.SimulateDocumentBaseResult.<init>(IngestDocument ingestDocument)": {
                "lineStart": 33,
                "lineEnd": 42
            }
        },
        "78a5a3cb4e9-SimulateProcessorResult.java": {
            "org.elasticsearch.action.ingest.SimulateProcessorResult.<init>(String type, String processorTag, String description, IngestDocument ingestDocument, Exception failure, Tuple<String, Boolean> conditionalWithResult)": {
                "lineStart": 86,
                "lineEnd": 93
            }
        },
        "537e459d9a9-WriteableIngestDocument.java": {
            "org.elasticsearch.action.ingest.WriteableIngestDocument.<init>(IngestDocument ingestDocument)": {
                "lineStart": 68,
                "lineEnd": 71
            },
            "org.elasticsearch.action.ingest.WriteableIngestDocument.equals(Object o)": {
                "lineStart": 119,
                "lineEnd": 130
            },
            "org.elasticsearch.action.ingest.WriteableIngestDocument.hashCode()": {
                "lineStart": 132,
                "lineEnd": 134
            }
        },
        "357b85b6cc1-IngestDocument.java": {
            "org.elasticsearch.ingest.IngestDocument.<init>(IngestDocument other)": {
                "lineStart": 59,
                "lineEnd": 61
            }
        },
        "54c8decc3da-TrackingResultProcessor.java": {
            "org.elasticsearch.ingest.TrackingResultProcessor.execute(IngestDocument ingestDocument, BiConsumer<IngestDocument, Exception> handler)": {
                "lineStart": 21,
                "lineEnd": 100
            }
        }
    },
    "CVE-2022-24697": {
        "10c6733687-KylinConfigBase.java": {
            "org.apache.kylin.common.KylinConfigBase.getHiveDatabaseForIntermediateTable()": {
                "lineStart": 979,
                "lineEnd": 981
            }
        },
        "54bab605cb-CliCommandExecutor.java": {
            "org.apache.kylin.common.util.CliCommandExecutor.checkParameter(String commandParameter)": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "org.apache.kylin.common.util.CliCommandExecutor.checkParameterWhiteList(String commandParameter)": {
                "lineStart": 171,
                "lineEnd": 173
            },
            "org.apache.kylin.common.util.CliCommandExecutor.checkHiveProperty(String hiveProperty)": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "org.apache.kylin.common.util.CliCommandExecutor.checkParameter(String commandParameter, String rex)": {
                "lineStart": 179,
                "lineEnd": 186
            }
        },
        "86e234a902-NSparkExecutable.java": {
            "org.apache.kylin.engine.spark.job.NSparkExecutable.doWork(ExecutableContext context)": {
                "lineStart": 79,
                "lineEnd": 139
            }
        },
        "5c60d38f40-JobController.java": {
            "org.apache.kylin.rest.controller.JobController.downloadLogFile(@PathVariable(\"job_id\") String jobId, @PathVariable(\"step_id\") String stepId, @RequestParam(value = \"project\") String project, HttpServletResponse response)": {
                "lineStart": 142,
                "lineEnd": 153
            }
        },
        "07a70bd63d-ProjectController.java": {
            "org.apache.kylin.rest.controller.ProjectController.getProjects(@RequestParam(value = \"limit\", required = false) Integer limit, @RequestParam(value = \"offset\", required = false) Integer offset)": {
                "lineStart": 43,
                "lineEnd": 46
            },
            "org.apache.kylin.rest.controller.ProjectController.getReadableProjects(@RequestParam(value = \"limit\", required = false) Integer limit, @RequestParam(value = \"offset\", required = false) Integer offset)": {
                "lineStart": 48,
                "lineEnd": 75
            },
            "org.apache.kylin.rest.controller.ProjectController.saveProject(@RequestBody ProjectRequest projectRequest)": {
                "lineStart": 77,
                "lineEnd": 97
            },
            "org.apache.kylin.rest.controller.ProjectController.updateProject(@RequestBody ProjectRequest projectRequest)": {
                "lineStart": 99,
                "lineEnd": 128
            },
            "org.apache.kylin.rest.controller.ProjectController.deserializeProjectDesc(ProjectRequest projectRequest)": {
                "lineStart": 130,
                "lineEnd": 142
            },
            "org.apache.kylin.rest.controller.ProjectController.deleteProject(@PathVariable String projectName)": {
                "lineStart": 144,
                "lineEnd": 161
            },
            "org.apache.kylin.rest.controller.ProjectController.updateProjectOwner(@PathVariable String projectName, @RequestBody String owner)": {
                "lineStart": 163,
                "lineEnd": 206
            },
            "org.apache.kylin.rest.controller.ProjectController.setProjectService(ProjectService projectService)": {
                "lineStart": 208,
                "lineEnd": 210
            },
            "org.apache.kylin.rest.controller.ProjectController.setAccessService(AccessService accessService)": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "org.apache.kylin.rest.controller.ProjectController.setCubeService(CubeService cubeService)": {
                "lineStart": 216,
                "lineEnd": 218
            },
            "org.apache.kylin.rest.controller.ProjectController.setValidateUtil(ValidateUtil validateUtil)": {
                "lineStart": 220,
                "lineEnd": 222
            }
        },
        "4fdbf1f0a9-CubeService.java": {
            "org.apache.kylin.rest.service.CubeService.migrateCube(CubeInstance cube, String projectName)": {
                "lineStart": 953,
                "lineEnd": 982
            }
        }
    },
    "CVE-2023-23926": {
        "485127f6-XmlGraphMLReader.java": {
            "apoc.export.graphml.XmlGraphMLReader.parseXML(Reader input)": {
                "lineStart": 195,
                "lineEnd": 311
            }
        }
    },
    "CVE-2023-6236": {
        "496749c97a-Oidc.java": {
            "org.wildfly.security.http.oidc.Oidc.sendJsonHttpRequest(OidcClientConfiguration oidcClientConfiguration, HttpRequestBase httpRequest, Class<T> clazz)": {
                "lineStart": 79,
                "lineEnd": 111
            },
            "org.wildfly.security.http.oidc.Oidc.close(HttpResponse response)": {
                "lineStart": 113,
                "lineEnd": 123
            },
            "org.wildfly.security.http.oidc.Oidc$SSLRequired.isRequired(String address)": {
                "lineStart": 127,
                "lineEnd": 138
            },
            "org.wildfly.security.http.oidc.Oidc$SSLRequired.isLocal(String remoteAddress)": {
                "lineStart": 140,
                "lineEnd": 149
            },
            "org.wildfly.security.http.oidc.Oidc$ClientCredentialsProviderType.<init>(final String value)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "org.wildfly.security.http.oidc.Oidc$ClientCredentialsProviderType.getValue()": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "org.wildfly.security.http.oidc.Oidc$EnvUtil.<init>()": {
                "lineStart": 170,
                "lineEnd": 171
            },
            "org.wildfly.security.http.oidc.Oidc$EnvUtil.replace(String val)": {
                "lineStart": 173,
                "lineEnd": 185
            },
            "org.wildfly.security.http.oidc.Oidc.getJavaAlgorithm(String algorithm)": {
                "lineStart": 189,
                "lineEnd": 212
            },
            "org.wildfly.security.http.oidc.Oidc.getJavaAlgorithmForHash(String algorithm)": {
                "lineStart": 214,
                "lineEnd": 237
            },
            "org.wildfly.security.http.oidc.Oidc.generateId()": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "org.wildfly.security.http.oidc.Oidc.getCurrentTimeInSeconds()": {
                "lineStart": 245,
                "lineEnd": 247
            },
            "org.wildfly.security.http.oidc.Oidc.asInt(Map<String, Object> cfg, String cfgKey, int defaultValue)": {
                "lineStart": 249,
                "lineEnd": 265
            },
            "org.wildfly.security.http.oidc.Oidc.getQueryParamValue(OidcHttpFacade facade, String paramName)": {
                "lineStart": 267,
                "lineEnd": 269
            },
            "org.wildfly.security.http.oidc.Oidc.stripQueryParam(String url, String paramName)": {
                "lineStart": 271,
                "lineEnd": 273
            },
            "org.wildfly.security.http.oidc.Oidc.isOpaqueToken(String token)": {
                "lineStart": 275,
                "lineEnd": 277
            },
            "org.wildfly.security.http.oidc.Oidc.logToken(String name, String token)": {
                "lineStart": 279,
                "lineEnd": 287
            }
        },
        "3039192f0a-OidcCookieTokenStore.java": {
            "org.wildfly.security.http.oidc.OidcCookieTokenStore.isCached(RequestAuthenticator authenticator)": {
                "lineStart": 37,
                "lineEnd": 68
            }
        },
        "c2e6838f7a-OidcSessionTokenStore.java": {
            "org.wildfly.security.http.oidc.OidcSessionTokenStore.isCached(RequestAuthenticator authenticator)": {
                "lineStart": 31,
                "lineEnd": 83
            }
        }
    },
    "CVE-2024-28254": {
        "e1faf1c191-AlertUtil.java": {
            "org.openmetadata.service.events.subscription.AlertUtil.evaluateAlertConditions(ChangeEvent changeEvent, List<EventFilterRule> alertFilterRules)": {
                "lineStart": 153,
                "lineEnd": 168
            }
        },
        "5a0d45053d-EventSubscriptionResource.java": {
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.triggerDataInsightJob(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @Parameter(description = \"Id of the event Subscription\", schema = @Schema(type = \"UUID\")) @PathParam(\"id\") UUID id)": {
                "lineStart": 171,
                "lineEnd": 176
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.listEventSubscriptionFunctions(@Context UriInfo uriInfo, @Context SecurityContext securityContext)": {
                "lineStart": 228,
                "lineEnd": 231
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.listEventSubResources(@Context UriInfo uriInfo, @Context SecurityContext securityContext)": {
                "lineStart": 233,
                "lineEnd": 236
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.validateCondition(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @Parameter(description = \"Expression to validate\", schema = @Schema(type = \"string\")) @PathParam(\"expression\") String expression)": {
                "lineStart": 238,
                "lineEnd": 241
            }
        },
        "27606503c1-JwtFilter.java": {
            "org.openmetadata.service.security.JwtFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 71,
                "lineEnd": 101
            }
        },
        "5fd336372f-CompiledRule.java": {
            "org.openmetadata.service.security.policyevaluator.CompiledRule.validateExpression(String condition, Class<T> clz)": {
                "lineStart": 42,
                "lineEnd": 58
            },
            "org.openmetadata.service.security.policyevaluator.CompiledRule.matchExpression(PolicyContext policyContext, SubjectContext subjectContext, ResourceContextInterface resourceContext)": {
                "lineStart": 181,
                "lineEnd": 190
            }
        }
    },
    "CVE-2024-31214": {
        "a3088a613-Device.java": {
            "org.traccar.model.Device.setUniqueId(String uniqueId)": {
                "lineStart": 30,
                "lineEnd": 36
            }
        }
    },
    "CVE-2021-29048": {
        "f08d7930d24c5-LayoutsAdminManagementToolbarDisplayContext.java": {
            "com.liferay.layout.admin.web.internal.display.context.LayoutsAdminManagementToolbarDisplayContext._getCollectionLayoutLabel(boolean privateLayout)": {
                "lineStart": 173,
                "lineEnd": 188
            },
            "com.liferay.layout.admin.web.internal.display.context.LayoutsAdminManagementToolbarDisplayContext._getLabel(boolean privateLayout)": {
                "lineStart": 190,
                "lineEnd": 205
            }
        }
    },
    "CVE-2023-40337": {
        "4311efd-AbstractFolder.java": {
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.loadJobTotal()": {
                "lineStart": 112,
                "lineEnd": 119
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.scan(File d, int depth)": {
                "lineStart": 121,
                "lineEnd": 143
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.<init>(ItemGroup parent, String name)": {
                "lineStart": 156,
                "lineEnd": 158
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.init()": {
                "lineStart": 160,
                "lineEnd": 231
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.newDefaultViewsTabBar()": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.newFolderViewHolder()": {
                "lineStart": 237,
                "lineEnd": 247
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.newDefaultFolderIcon()": {
                "lineStart": 249,
                "lineEnd": 251
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.initViews(List<View> views)": {
                "lineStart": 253,
                "lineEnd": 256
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.loadChildren(AbstractFolder<V> parent, File modulesDir, Function1<? extends K, ? super V> key)": {
                "lineStart": 258,
                "lineEnd": 470
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.itemsPut(String name, I item)": {
                "lineStart": 472,
                "lineEnd": 503
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onLoad(ItemGroup<? extends Item> parent, String name)": {
                "lineStart": 505,
                "lineEnd": 556
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.childNameGenerator()": {
                "lineStart": 558,
                "lineEnd": 560
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getDescriptor()": {
                "lineStart": 562,
                "lineEnd": 564
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getProperties()": {
                "lineStart": 566,
                "lineEnd": 568
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.addProperty(AbstractFolderProperty p)": {
                "lineStart": 570,
                "lineEnd": 577
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getJobsDir()": {
                "lineStart": 579,
                "lineEnd": 581
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getRootDirFor(String name)": {
                "lineStart": 583,
                "lineEnd": 585
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getRootDirFor(I child)": {
                "lineStart": 587,
                "lineEnd": 599
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getUrlChildPrefix()": {
                "lineStart": 601,
                "lineEnd": 603
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getJob(String name)": {
                "lineStart": 605,
                "lineEnd": 607
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getPronoun()": {
                "lineStart": 609,
                "lineEnd": 611
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getOverrides()": {
                "lineStart": 613,
                "lineEnd": 620
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.addView(View v)": {
                "lineStart": 622,
                "lineEnd": 624
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.canDelete(View view)": {
                "lineStart": 626,
                "lineEnd": 628
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.deleteView(View view)": {
                "lineStart": 630,
                "lineEnd": 632
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getView(String name)": {
                "lineStart": 634,
                "lineEnd": 636
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getViews()": {
                "lineStart": 638,
                "lineEnd": 640
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getFolderViews()": {
                "lineStart": 642,
                "lineEnd": 644
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.resetFolderViews()": {
                "lineStart": 646,
                "lineEnd": 648
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getPrimaryView()": {
                "lineStart": 650,
                "lineEnd": 652
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.setPrimaryView(View v)": {
                "lineStart": 654,
                "lineEnd": 659
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onViewRenamed(View view, String oldName, String newName)": {
                "lineStart": 661,
                "lineEnd": 663
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getViewsTabBar()": {
                "lineStart": 665,
                "lineEnd": 667
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItemGroup()": {
                "lineStart": 669,
                "lineEnd": 671
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getViewActions()": {
                "lineStart": 673,
                "lineEnd": 675
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getStaplerFallback()": {
                "lineStart": 677,
                "lineEnd": 679
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.makeSearchIndex()": {
                "lineStart": 681,
                "lineEnd": 702
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doChildrenContextMenu(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 704,
                "lineEnd": 711
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doCreateView(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 713,
                "lineEnd": 716
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doViewExistsCheck(@QueryParameter String value)": {
                "lineStart": 718,
                "lineEnd": 732
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getBuildHealth()": {
                "lineStart": 734,
                "lineEnd": 737
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.invalidateBuildHealthReports()": {
                "lineStart": 739,
                "lineEnd": 741
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getBuildHealthReports()": {
                "lineStart": 743,
                "lineEnd": 835
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getHealthMetrics()": {
                "lineStart": 837,
                "lineEnd": 839
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doLastBuild(StaplerRequest req)": {
                "lineStart": 841,
                "lineEnd": 843
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getIcon()": {
                "lineStart": 845,
                "lineEnd": 847
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.setIcon(FolderIcon icon)": {
                "lineStart": 849,
                "lineEnd": 852
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getIconColor()": {
                "lineStart": 854,
                "lineEnd": 856
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getAllJobs()": {
                "lineStart": 858,
                "lineEnd": 865
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItems()": {
                "lineStart": 867,
                "lineEnd": 869
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItems(Predicate<I> pred)": {
                "lineStart": 871,
                "lineEnd": 881
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.hasVisibleItems()": {
                "lineStart": 883,
                "lineEnd": 892
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItem(String name)": {
                "lineStart": 894,
                "lineEnd": 913
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onRenamed(I item, String oldName, String newName)": {
                "lineStart": 915,
                "lineEnd": 923
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onDeleted(I item)": {
                "lineStart": 925,
                "lineEnd": 933
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.delete()": {
                "lineStart": 935,
                "lineEnd": 1055
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.isDisabled()": {
                "lineStart": 1057,
                "lineEnd": 1059
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.setDisabled(boolean disabled)": {
                "lineStart": 1061,
                "lineEnd": 1063
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.supportsMakeDisabled()": {
                "lineStart": 1065,
                "lineEnd": 1067
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.makeDisabled(boolean disabled)": {
                "lineStart": 1069,
                "lineEnd": 1085
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doDisable()": {
                "lineStart": 1087,
                "lineEnd": 1091
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doEnable()": {
                "lineStart": 1093,
                "lineEnd": 1097
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.save()": {
                "lineStart": 1099,
                "lineEnd": 1110
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.renameTo(String newName)": {
                "lineStart": 1112,
                "lineEnd": 1114
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doSubmitDescription(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 1116,
                "lineEnd": 1118
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doConfigSubmit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 1120,
                "lineEnd": 1159
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getSuccessfulDestination()": {
                "lineStart": 1161,
                "lineEnd": 1163
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.submit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 1165,
                "lineEnd": 1165
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.isNameEditable()": {
                "lineStart": 1166,
                "lineEnd": 1168
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.checkRename(String newName)": {
                "lineStart": 1170,
                "lineEnd": 1183
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.renameBlocker()": {
                "lineStart": 1185,
                "lineEnd": 1187
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.invalidateBuildHealthReports(Item item)": {
                "lineStart": 1189,
                "lineEnd": 1204
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onCreated(Item item)": {
                "lineStart": 1207,
                "lineEnd": 1209
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onCopied(Item src, Item item)": {
                "lineStart": 1211,
                "lineEnd": 1213
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onDeleted(Item item)": {
                "lineStart": 1215,
                "lineEnd": 1217
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onRenamed(Item item, String oldName, String newName)": {
                "lineStart": 1219,
                "lineEnd": 1221
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onLocationChanged(Item item, String oldFullName, String newFullName)": {
                "lineStart": 1223,
                "lineEnd": 1225
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onUpdated(Item item)": {
                "lineStart": 1227,
                "lineEnd": 1229
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onCompleted(Run run, @NonNull TaskListener listener)": {
                "lineStart": 1234,
                "lineEnd": 1236
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onFinalized(Run run)": {
                "lineStart": 1238,
                "lineEnd": 1240
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onStarted(Run run, TaskListener listener)": {
                "lineStart": 1242,
                "lineEnd": 1244
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onDeleted(Run run)": {
                "lineStart": 1246,
                "lineEnd": 1248
            }
        },
        "64493e3-Folder.java": {
            "com.cloudbees.hudson.plugins.folder.Folder.<init>(ItemGroup parent, String name)": {
                "lineStart": 45,
                "lineEnd": 48
            },
            "com.cloudbees.hudson.plugins.folder.Folder.onLoad(ItemGroup<? extends Item> parent, String name)": {
                "lineStart": 50,
                "lineEnd": 53
            },
            "com.cloudbees.hudson.plugins.folder.Folder.init()": {
                "lineStart": 55,
                "lineEnd": 58
            },
            "com.cloudbees.hudson.plugins.folder.Folder.initViews(List<View> views)": {
                "lineStart": 60,
                "lineEnd": 81
            },
            "com.cloudbees.hudson.plugins.folder.Folder.onCreatedFromScratch()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DeprecatedTransientActions.type()": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DeprecatedTransientActions.createFor(Folder target)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "com.cloudbees.hudson.plugins.folder.Folder.updateTransientActions()": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createTransientActions()": {
                "lineStart": 102,
                "lineEnd": 113
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getNewPronoun()": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getColumns()": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "com.cloudbees.hudson.plugins.folder.Folder.addProperty(FolderProperty<?> p)": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "com.cloudbees.hudson.plugins.folder.Folder.onCopiedFrom(Item _src)": {
                "lineStart": 127,
                "lineEnd": 139
            },
            "com.cloudbees.hudson.plugins.folder.Folder.doCreateItem(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 141,
                "lineEnd": 155
            },
            "com.cloudbees.hudson.plugins.folder.Folder.copy(T src, String name)": {
                "lineStart": 157,
                "lineEnd": 163
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProjectFromXML(String name, InputStream xml)": {
                "lineStart": 165,
                "lineEnd": 179
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProject(Class<T> type, String name)": {
                "lineStart": 181,
                "lineEnd": 183
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProject(TopLevelItemDescriptor type, String name)": {
                "lineStart": 185,
                "lineEnd": 187
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProject(TopLevelItemDescriptor type, String name, boolean notify)": {
                "lineStart": 189,
                "lineEnd": 195
            },
            "com.cloudbees.hudson.plugins.folder.Folder.submit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getItemDescriptors()": {
                "lineStart": 201,
                "lineEnd": 211
            },
            "com.cloudbees.hudson.plugins.folder.Folder.isAllowedChildDescriptor(TopLevelItemDescriptor tid)": {
                "lineStart": 213,
                "lineEnd": 226
            },
            "com.cloudbees.hudson.plugins.folder.Folder.isAllowedChild(TopLevelItem tid)": {
                "lineStart": 228,
                "lineEnd": 237
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getDescriptor()": {
                "lineStart": 239,
                "lineEnd": 241
            },
            "com.cloudbees.hudson.plugins.folder.Folder.canAdd(TopLevelItem item)": {
                "lineStart": 243,
                "lineEnd": 245
            },
            "com.cloudbees.hudson.plugins.folder.Folder.add(I item, String name)": {
                "lineStart": 247,
                "lineEnd": 258
            },
            "com.cloudbees.hudson.plugins.folder.Folder.remove(TopLevelItem item)": {
                "lineStart": 260,
                "lineEnd": 262
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DescriptorImpl.getDescription()": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DescriptorImpl.newInstance(ItemGroup parent, String name)": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "com.cloudbees.hudson.plugins.folder.Folder$MixInImpl.<init>(Folder parent)": {
                "lineStart": 291,
                "lineEnd": 293
            },
            "com.cloudbees.hudson.plugins.folder.Folder$MixInImpl.add(TopLevelItem item)": {
                "lineStart": 295,
                "lineEnd": 297
            },
            "com.cloudbees.hudson.plugins.folder.Folder$MixInImpl.getRootDirFor(String name)": {
                "lineStart": 299,
                "lineEnd": 301
            }
        }
    },
    "CVE-2024-31864": {
        "30f2cb192-JDBCInterpreter.java": {
            "org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(String sql, InterpreterContext context)": {
                "lineStart": 657,
                "lineEnd": 809
            },
            "org.apache.zeppelin.jdbc.JDBCInterpreter.getConnection(InterpreterContext context)": {
                "lineStart": 446,
                "lineEnd": 498
            }
        }
    },
    "CVE-2023-46502": {
        "8fe5570-WebDavMethod.java": {
            "org.opencrx.application.uses.net.sf.webdav.methods.WebDavMethod.getDocumentBuilder()": {
                "lineStart": 77,
                "lineEnd": 90
            }
        }
    },
    "CVE-2024-24809": {
        "d7236fe2a-DeviceResource.java": {
            "org.traccar.api.resource.DeviceResource.imageExtension(String type)": {
                "lineStart": 129,
                "lineEnd": 144
            }
        }
    },
    "CVE-2022-24913": {
        "d2e37fa-StdTempFileProvider.java": {
            "com.fasterxml.sort.std.StdTempFileProvider.provide()": {
                "lineStart": 15,
                "lineEnd": 19
            }
        }
    },
    "CVE-2020-2241": {
        "450d45b-AbstractRemoteDatabaseDescriptor.java": {
            "org.jenkinsci.plugins.database.AbstractRemoteDatabaseDescriptor.doValidate(@QueryParameter String hostname, @QueryParameter String database, @QueryParameter String username, @QueryParameter String password, @QueryParameter String properties)": {
                "lineStart": 18,
                "lineEnd": 32
            }
        },
        "36a51eb-GenericDatabase.java": {
            "org.jenkinsci.plugins.database.GenericDatabase$DescriptorImpl.doValidate(@QueryParameter String driver, @QueryParameter String url, @QueryParameter String username, @QueryParameter String password)": {
                "lineStart": 83,
                "lineEnd": 92
            },
            "org.jenkinsci.plugins.database.GenericDatabase$DescriptorImpl.doCheckDriver(@QueryParameter String value)": {
                "lineStart": 69,
                "lineEnd": 81
            }
        }
    },
    "CVE-2022-36898": {
        "c7cd98b-GitToIspwPublish.java": {
            "com.compuware.ispw.git.GitToIspwPublish$DescriptorImpl.doFillGitCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String gitCredentialsId, @AncestorInPath Item project)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "com.compuware.ispw.git.GitToIspwPublish$DescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "com.compuware.ispw.git.GitToIspwPublish$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 134,
                "lineEnd": 136
            }
        },
        "bdb2522-GitToIspwPublishStep.java": {
            "com.compuware.ispw.git.GitToIspwPublishStep$DescriptorImpl.doFillGitCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String gitCredentialsId, @AncestorInPath Item project)": {
                "lineStart": 235,
                "lineEnd": 237
            },
            "com.compuware.ispw.git.GitToIspwPublishStep$DescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 239,
                "lineEnd": 241
            },
            "com.compuware.ispw.git.GitToIspwPublishStep$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 243,
                "lineEnd": 245
            }
        },
        "c7eff1a-RemoteSystemProperties.java": {
            "com.compuware.ispw.git.RemoteSystemProperties.checkRoles(RoleChecker checker)": {
                "lineStart": 11,
                "lineEnd": 12
            }
        },
        "737170f-IspwRestApiRequest.java": {
            "com.compuware.ispw.restapi.IspwRestApiRequest$DescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 674,
                "lineEnd": 676
            },
            "com.compuware.ispw.restapi.IspwRestApiRequest$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 678,
                "lineEnd": 680
            }
        },
        "1a12d70-IspwRestApiRequestStep.java": {
            "com.compuware.ispw.restapi.IspwRestApiRequestStep$DescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 243,
                "lineEnd": 245
            },
            "com.compuware.ispw.restapi.IspwRestApiRequestStep$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 247,
                "lineEnd": 249
            }
        }
    },
    "CVE-2021-22113": {
        "434ba78e0-SimpleRouteLocator.java": {
            "org.springframework.cloud.netflix.zuul.filters.SimpleRouteLocator.adjustPath(final String path)": {
                "lineStart": 173,
                "lineEnd": 196
            }
        },
        "8e90166d0-PreDecorationFilter.java": {
            "org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter.run()": {
                "lineStart": 69,
                "lineEnd": 137
            }
        }
    },
    "CVE-2023-40345": {
        "db97bf7-CredentialUtil.java": {
            "io.jenkins.plugins.util.CredentialUtil.getAllSystemCredentials(@Nullable final Item item)": {
                "lineStart": 16,
                "lineEnd": 20
            },
            "io.jenkins.plugins.util.CredentialUtil.getAllCredentialsListBoxModel(@Nullable final Item item, final String credentialId)": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "io.jenkins.plugins.util.CredentialUtil.getCredentialsListBoxModel(final String credentialId, final List<StandardCredentials> credentials)": {
                "lineStart": 26,
                "lineEnd": 34
            },
            "io.jenkins.plugins.util.CredentialUtil.getStandardCredentials(@Nullable Item item)": {
                "lineStart": 36,
                "lineEnd": 39
            }
        }
    },
    "CVE-2020-26238": {
        "4dd809b-CronParser.java": {
            "com.cronutils.parser.CronParser.parse(final String expression)": {
                "lineStart": 41,
                "lineEnd": 101
            }
        }
    },
    "CVE-2021-38263": {
        "1c1df1f0d9d47-ManagementToolbarTag.java": {
            "com.liferay.frontend.taglib.clay.servlet.taglib.ManagementToolbarTag.processStartTag()": {
                "lineStart": 557,
                "lineEnd": 882
            }
        }
    },
    "CVE-2022-32287": {
        "f5f430938-FileUtil.java": {
            "org.apache.uima.pear.util.FileUtil$DirFileFilter.<init>(String dirPath, String fileExt)": {
                "lineStart": 58,
                "lineEnd": 66
            },
            "org.apache.uima.pear.util.FileUtil$DirFileFilter.accept(File file)": {
                "lineStart": 68,
                "lineEnd": 81
            },
            "org.apache.uima.pear.util.FileUtil$NameFileFilter.<init>(String fileName)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "org.apache.uima.pear.util.FileUtil$NameFileFilter.accept(File file)": {
                "lineStart": 91,
                "lineEnd": 104
            },
            "org.apache.uima.pear.util.FileUtil.computeRelativePath(File referenceDir, File file)": {
                "lineStart": 209,
                "lineEnd": 236
            },
            "org.apache.uima.pear.util.FileUtil.getRelativePath(File rootDir, String absolutePath)": {
                "lineStart": 484,
                "lineEnd": 494
            },
            "org.apache.uima.pear.util.FileUtil.identifyUtfSignature(int[] prefix, int length)": {
                "lineStart": 496,
                "lineEnd": 521
            },
            "org.apache.uima.pear.util.FileUtil.isAsciiFile(File textFile)": {
                "lineStart": 523,
                "lineEnd": 547
            },
            "org.apache.uima.pear.util.FileUtil.isAsciiStream(InputStream iStream)": {
                "lineStart": 549,
                "lineEnd": 568
            },
            "org.apache.uima.pear.util.FileUtil.loadPropertiesFromJar(String propFilePath, JarFile jarFile)": {
                "lineStart": 609,
                "lineEnd": 622
            },
            "org.apache.uima.pear.util.FileUtil.loadTextFile(BufferedReader iStream)": {
                "lineStart": 624,
                "lineEnd": 650
            },
            "org.apache.uima.pear.util.FileUtil.loadTextFile(File textFile)": {
                "lineStart": 652,
                "lineEnd": 659
            },
            "org.apache.uima.pear.util.FileUtil.loadTextFileFromJar(String filePath, JarFile jarFile)": {
                "lineStart": 682,
                "lineEnd": 694
            },
            "org.apache.uima.pear.util.FileUtil.localPathToFileUrl(String path)": {
                "lineStart": 696,
                "lineEnd": 711
            },
            "org.apache.uima.pear.util.FileUtil.replaceStringInFile(File textFile, String subStringRegex, String replacement)": {
                "lineStart": 726,
                "lineEnd": 811
            },
            "org.apache.uima.pear.util.FileUtil.zipDirectory(File dir2zip)": {
                "lineStart": 819,
                "lineEnd": 823
            },
            "org.apache.uima.pear.util.FileUtil.zipDirectory(File dir2zip, ZipOutputStream zoStream, File referenceDir, File[] excludeFiles)": {
                "lineStart": 835,
                "lineEnd": 880
            },
            "org.apache.uima.pear.util.FileUtil.zipFile(File file2zip)": {
                "lineStart": 882,
                "lineEnd": 888
            },
            "org.apache.uima.pear.util.FileUtil.zipFile(File file2zip, File zippedFile)": {
                "lineStart": 890,
                "lineEnd": 924
            },
            "org.apache.uima.pear.util.FileUtil$ExtFilenameFilter.<init>(String fileExt, boolean ignoreCase)": {
                "lineStart": 115,
                "lineEnd": 121
            },
            "org.apache.uima.pear.util.FileUtil.cleanUpDirectoryContent(File directory)": {
                "lineStart": 130,
                "lineEnd": 159
            },
            "org.apache.uima.pear.util.FileUtil.cleanUpDirectoryFiles(File directory)": {
                "lineStart": 161,
                "lineEnd": 181
            },
            "org.apache.uima.pear.util.FileUtil.cleanUpDirectoryFiles(File directory, int maxLimit)": {
                "lineStart": 183,
                "lineEnd": 207
            },
            "org.apache.uima.pear.util.FileUtil.createDirList(File rootDir, boolean includeSubdirs)": {
                "lineStart": 268,
                "lineEnd": 286
            },
            "org.apache.uima.pear.util.FileUtil.createDirList(JarFile archive)": {
                "lineStart": 288,
                "lineEnd": 314
            },
            "org.apache.uima.pear.util.FileUtil.createFileList(File filesDir, boolean includeSubdirs)": {
                "lineStart": 320,
                "lineEnd": 337
            },
            "org.apache.uima.pear.util.FileUtil.createFileList(JarFile archive)": {
                "lineStart": 339,
                "lineEnd": 354
            },
            "org.apache.uima.pear.util.FileUtil.createTempFile(String prefix, String suffix)": {
                "lineStart": 356,
                "lineEnd": 369
            },
            "org.apache.uima.pear.util.FileUtil.extractFilesFromJar(JarFile jarFile, File targetDir, FileFilter filter)": {
                "lineStart": 406,
                "lineEnd": 435
            },
            "org.apache.uima.pear.util.FileUtil.getFileNameExtension(String fileName)": {
                "lineStart": 442,
                "lineEnd": 460
            },
            "org.apache.uima.pear.util.FileUtil.loadListOfStrings(BufferedReader iStream)": {
                "lineStart": 570,
                "lineEnd": 587
            },
            "org.apache.uima.pear.util.FileUtil.moveFile(File source, File destinationDir)": {
                "lineStart": 713,
                "lineEnd": 724
            }
        }
    },
    "CVE-2023-46243": {
        "25d6ca14bb3-EditAction.java": {
            "com.xpn.xwiki.web.EditAction.prepareEditedDocument(XWikiContext context)": {
                "lineStart": 45,
                "lineEnd": 60
            }
        }
    },
    "CVE-2024-6162": {
        "14c3c215f-AjpRequestParser.java": {
            "io.undertow.server.protocol.ajp.AjpRequestParser.decode(String url, final boolean containsUrlCharacters)": {
                "lineStart": 546,
                "lineEnd": 562
            }
        }
    },
    "CVE-2022-1848": {
        "101e56c7-User.java": {
            "com.erudika.para.core.User.<init>()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "com.erudika.para.core.User.<init>(String id)": {
                "lineStart": 58,
                "lineEnd": 62
            },
            "com.erudika.para.core.User.getTokenSecret()": {
                "lineStart": 64,
                "lineEnd": 70
            },
            "com.erudika.para.core.User.setTokenSecret(String tokenSecret)": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "com.erudika.para.core.User.getPicture()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "com.erudika.para.core.User.setPicture(String picture)": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "com.erudika.para.core.User.getActive()": {
                "lineStart": 84,
                "lineEnd": 90
            },
            "com.erudika.para.core.User.setActive(Boolean active)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "com.erudika.para.core.User.getTwoFA()": {
                "lineStart": 96,
                "lineEnd": 102
            },
            "com.erudika.para.core.User.setTwoFA(Boolean twoFA)": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "com.erudika.para.core.User.getTwoFAkey()": {
                "lineStart": 108,
                "lineEnd": 110
            },
            "com.erudika.para.core.User.setTwoFAkey(String twoFAkey)": {
                "lineStart": 112,
                "lineEnd": 114
            },
            "com.erudika.para.core.User.getTwoFAbackupKeyHash()": {
                "lineStart": 116,
                "lineEnd": 118
            },
            "com.erudika.para.core.User.setTwoFAbackupKeyHash(String twoFAbackupKeyHash)": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "com.erudika.para.core.User.getGroups()": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "com.erudika.para.core.User.setGroups(String groups)": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "com.erudika.para.core.User.getIdentifier()": {
                "lineStart": 132,
                "lineEnd": 134
            },
            "com.erudika.para.core.User.setIdentifier(String identifier)": {
                "lineStart": 136,
                "lineEnd": 138
            },
            "com.erudika.para.core.User.getEmail()": {
                "lineStart": 140,
                "lineEnd": 142
            },
            "com.erudika.para.core.User.setEmail(String email)": {
                "lineStart": 144,
                "lineEnd": 146
            },
            "com.erudika.para.core.User.getCurrency()": {
                "lineStart": 148,
                "lineEnd": 150
            },
            "com.erudika.para.core.User.setCurrency(String currency)": {
                "lineStart": 152,
                "lineEnd": 159
            },
            "com.erudika.para.core.User.resetTokenSecret()": {
                "lineStart": 161,
                "lineEnd": 163
            },
            "com.erudika.para.core.User.canModify(ParaObject obj)": {
                "lineStart": 165,
                "lineEnd": 175
            },
            "com.erudika.para.core.User.create()": {
                "lineStart": 177,
                "lineEnd": 215
            },
            "com.erudika.para.core.User.delete()": {
                "lineStart": 217,
                "lineEnd": 223
            },
            "com.erudika.para.core.User.getIdentifiers()": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "com.erudika.para.core.User.attachIdentifier(String identifier)": {
                "lineStart": 229,
                "lineEnd": 234
            },
            "com.erudika.para.core.User.detachIdentifier(String identifier)": {
                "lineStart": 236,
                "lineEnd": 245
            },
            "com.erudika.para.core.User.isFacebookUser()": {
                "lineStart": 247,
                "lineEnd": 249
            },
            "com.erudika.para.core.User.isGooglePlusUser()": {
                "lineStart": 251,
                "lineEnd": 253
            },
            "com.erudika.para.core.User.isLinkedInUser()": {
                "lineStart": 255,
                "lineEnd": 257
            },
            "com.erudika.para.core.User.isTwitterUser()": {
                "lineStart": 259,
                "lineEnd": 261
            },
            "com.erudika.para.core.User.isGitHubUser()": {
                "lineStart": 263,
                "lineEnd": 265
            },
            "com.erudika.para.core.User.isMicrosoftUser()": {
                "lineStart": 267,
                "lineEnd": 269
            },
            "com.erudika.para.core.User.isSlackUser()": {
                "lineStart": 271,
                "lineEnd": 273
            },
            "com.erudika.para.core.User.isMattermostUser()": {
                "lineStart": 275,
                "lineEnd": 277
            },
            "com.erudika.para.core.User.isAmazonUser()": {
                "lineStart": 279,
                "lineEnd": 281
            },
            "com.erudika.para.core.User.isLDAPUser()": {
                "lineStart": 283,
                "lineEnd": 285
            },
            "com.erudika.para.core.User.isSAMLUser()": {
                "lineStart": 287,
                "lineEnd": 289
            },
            "com.erudika.para.core.User.isOAuth2User()": {
                "lineStart": 291,
                "lineEnd": 293
            },
            "com.erudika.para.core.User.isAdmin()": {
                "lineStart": 295,
                "lineEnd": 297
            },
            "com.erudika.para.core.User.isModerator()": {
                "lineStart": 299,
                "lineEnd": 301
            },
            "com.erudika.para.core.User.getIdentityProvider()": {
                "lineStart": 303,
                "lineEnd": 344
            },
            "com.erudika.para.core.User.getPassword()": {
                "lineStart": 346,
                "lineEnd": 348
            },
            "com.erudika.para.core.User.setPassword(String password)": {
                "lineStart": 350,
                "lineEnd": 352
            },
            "com.erudika.para.core.User.getIdpIdToken()": {
                "lineStart": 354,
                "lineEnd": 356
            },
            "com.erudika.para.core.User.setIdpIdToken(String idpIdToken)": {
                "lineStart": 358,
                "lineEnd": 360
            },
            "com.erudika.para.core.User.getIdpAccessToken()": {
                "lineStart": 362,
                "lineEnd": 364
            },
            "com.erudika.para.core.User.setIdpAccessToken(String idpAccessToken)": {
                "lineStart": 366,
                "lineEnd": 368
            },
            "com.erudika.para.core.User.getIdpRefreshToken()": {
                "lineStart": 370,
                "lineEnd": 372
            },
            "com.erudika.para.core.User.setIdpRefreshToken(String idpRefreshToken)": {
                "lineStart": 374,
                "lineEnd": 376
            },
            "com.erudika.para.core.User.getIdpIdTokenPayload()": {
                "lineStart": 378,
                "lineEnd": 380
            },
            "com.erudika.para.core.User.getIdpAccessTokenPayload()": {
                "lineStart": 382,
                "lineEnd": 384
            },
            "com.erudika.para.core.User.readUserForIdentifier(final User u)": {
                "lineStart": 386,
                "lineEnd": 434
            },
            "com.erudika.para.core.User.passwordMatches(User u)": {
                "lineStart": 436,
                "lineEnd": 460
            },
            "com.erudika.para.core.User.generatePasswordResetToken()": {
                "lineStart": 462,
                "lineEnd": 476
            },
            "com.erudika.para.core.User.resetPassword(String token, String newpass)": {
                "lineStart": 478,
                "lineEnd": 494
            },
            "com.erudika.para.core.User.createIdentifier(String newIdent, String password)": {
                "lineStart": 496,
                "lineEnd": 512
            },
            "com.erudika.para.core.User.deleteIdentifier(String ident)": {
                "lineStart": 514,
                "lineEnd": 519
            },
            "com.erudika.para.core.User.generateEmailConfirmationToken()": {
                "lineStart": 521,
                "lineEnd": 535
            },
            "com.erudika.para.core.User.activateWithEmailToken(String token)": {
                "lineStart": 537,
                "lineEnd": 548
            },
            "com.erudika.para.core.User.isValidPasswordResetToken(String token)": {
                "lineStart": 550,
                "lineEnd": 553
            },
            "com.erudika.para.core.User.isValidEmailConfirmationToken(String token)": {
                "lineStart": 555,
                "lineEnd": 558
            },
            "com.erudika.para.core.User.isValidToken(Sysprop s, String key, String token)": {
                "lineStart": 560,
                "lineEnd": 575
            },
            "com.erudika.para.core.User.setGravatarPicture()": {
                "lineStart": 577,
                "lineEnd": 589
            },
            "com.erudika.para.core.User$Groups.toString()": {
                "lineStart": 593,
                "lineEnd": 595
            },
            "com.erudika.para.core.User$Roles.toString()": {
                "lineStart": 601,
                "lineEnd": 603
            },
            "com.erudika.para.core.User.getId()": {
                "lineStart": 607,
                "lineEnd": 609
            },
            "com.erudika.para.core.User.setId(String id)": {
                "lineStart": 611,
                "lineEnd": 613
            },
            "com.erudika.para.core.User.getType()": {
                "lineStart": 615,
                "lineEnd": 618
            },
            "com.erudika.para.core.User.setType(String type)": {
                "lineStart": 620,
                "lineEnd": 622
            },
            "com.erudika.para.core.User.getAppid()": {
                "lineStart": 624,
                "lineEnd": 627
            },
            "com.erudika.para.core.User.setAppid(String appid)": {
                "lineStart": 629,
                "lineEnd": 631
            },
            "com.erudika.para.core.User.getObjectURI()": {
                "lineStart": 633,
                "lineEnd": 635
            },
            "com.erudika.para.core.User.getTags()": {
                "lineStart": 637,
                "lineEnd": 639
            },
            "com.erudika.para.core.User.setTags(List<String> tags)": {
                "lineStart": 641,
                "lineEnd": 643
            },
            "com.erudika.para.core.User.getStored()": {
                "lineStart": 645,
                "lineEnd": 651
            },
            "com.erudika.para.core.User.setStored(Boolean stored)": {
                "lineStart": 653,
                "lineEnd": 655
            },
            "com.erudika.para.core.User.getIndexed()": {
                "lineStart": 657,
                "lineEnd": 663
            },
            "com.erudika.para.core.User.setIndexed(Boolean indexed)": {
                "lineStart": 665,
                "lineEnd": 667
            },
            "com.erudika.para.core.User.getCached()": {
                "lineStart": 669,
                "lineEnd": 675
            },
            "com.erudika.para.core.User.setCached(Boolean cached)": {
                "lineStart": 677,
                "lineEnd": 679
            },
            "com.erudika.para.core.User.getTimestamp()": {
                "lineStart": 681,
                "lineEnd": 683
            },
            "com.erudika.para.core.User.setTimestamp(Long timestamp)": {
                "lineStart": 685,
                "lineEnd": 687
            },
            "com.erudika.para.core.User.getCreatorid()": {
                "lineStart": 689,
                "lineEnd": 691
            },
            "com.erudika.para.core.User.setCreatorid(String creatorid)": {
                "lineStart": 693,
                "lineEnd": 695
            },
            "com.erudika.para.core.User.getName()": {
                "lineStart": 697,
                "lineEnd": 699
            },
            "com.erudika.para.core.User.setName(String name)": {
                "lineStart": 701,
                "lineEnd": 703
            },
            "com.erudika.para.core.User.getPlural()": {
                "lineStart": 705,
                "lineEnd": 707
            },
            "com.erudika.para.core.User.getParentid()": {
                "lineStart": 709,
                "lineEnd": 711
            },
            "com.erudika.para.core.User.setParentid(String parentid)": {
                "lineStart": 713,
                "lineEnd": 715
            },
            "com.erudika.para.core.User.getUpdated()": {
                "lineStart": 717,
                "lineEnd": 719
            },
            "com.erudika.para.core.User.setUpdated(Long updated)": {
                "lineStart": 721,
                "lineEnd": 723
            },
            "com.erudika.para.core.User.update()": {
                "lineStart": 725,
                "lineEnd": 727
            },
            "com.erudika.para.core.User.exists()": {
                "lineStart": 729,
                "lineEnd": 731
            },
            "com.erudika.para.core.User.voteUp(String userid)": {
                "lineStart": 733,
                "lineEnd": 735
            },
            "com.erudika.para.core.User.voteDown(String userid)": {
                "lineStart": 737,
                "lineEnd": 739
            },
            "com.erudika.para.core.User.getVotes()": {
                "lineStart": 741,
                "lineEnd": 743
            },
            "com.erudika.para.core.User.setVotes(Integer votes)": {
                "lineStart": 745,
                "lineEnd": 747
            },
            "com.erudika.para.core.User.getVersion()": {
                "lineStart": 749,
                "lineEnd": 751
            },
            "com.erudika.para.core.User.setVersion(Long version)": {
                "lineStart": 753,
                "lineEnd": 755
            },
            "com.erudika.para.core.User.countLinks(String type2)": {
                "lineStart": 757,
                "lineEnd": 759
            },
            "com.erudika.para.core.User.getLinks(String type2, Pager... pager)": {
                "lineStart": 761,
                "lineEnd": 763
            },
            "com.erudika.para.core.User.getLinkedObjects(String type, Pager... pager)": {
                "lineStart": 765,
                "lineEnd": 767
            },
            "com.erudika.para.core.User.findLinkedObjects(String type, String field, String query, Pager... pager)": {
                "lineStart": 769,
                "lineEnd": 771
            },
            "com.erudika.para.core.User.isLinked(String type2, String id2)": {
                "lineStart": 773,
                "lineEnd": 775
            },
            "com.erudika.para.core.User.isLinked(ParaObject toObj)": {
                "lineStart": 777,
                "lineEnd": 779
            },
            "com.erudika.para.core.User.link(String id2)": {
                "lineStart": 781,
                "lineEnd": 783
            },
            "com.erudika.para.core.User.unlink(String type, String id2)": {
                "lineStart": 785,
                "lineEnd": 787
            },
            "com.erudika.para.core.User.unlinkAll()": {
                "lineStart": 789,
                "lineEnd": 791
            },
            "com.erudika.para.core.User.countChildren(String type)": {
                "lineStart": 793,
                "lineEnd": 795
            },
            "com.erudika.para.core.User.getChildren(String type, Pager... pager)": {
                "lineStart": 797,
                "lineEnd": 799
            },
            "com.erudika.para.core.User.getChildren(String type, String field, String term, Pager... pager)": {
                "lineStart": 801,
                "lineEnd": 803
            },
            "com.erudika.para.core.User.findChildren(String type, String query, Pager... pager)": {
                "lineStart": 805,
                "lineEnd": 807
            },
            "com.erudika.para.core.User.deleteChildren(String type)": {
                "lineStart": 809,
                "lineEnd": 811
            },
            "com.erudika.para.core.User.hashCode()": {
                "lineStart": 813,
                "lineEnd": 817
            },
            "com.erudika.para.core.User.equals(Object obj)": {
                "lineStart": 819,
                "lineEnd": 834
            },
            "com.erudika.para.core.User.toString()": {
                "lineStart": 836,
                "lineEnd": 838
            }
        },
        "10a3dc20-ValidationUtils.java": {
            "com.erudika.para.core.validation.ValidationUtils.validateObject(ParaObject content)": {
                "lineStart": 72,
                "lineEnd": 90
            }
        }
    },
    "CVE-2020-10672": {
        "dee36a14e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type)": {
                "lineStart": 75,
                "lineEnd": 107
            }
        }
    },
    "CVE-2022-3916": {
        "5bf5aa587e-LogoutEndpoint.java": {
            "org.keycloak.protocol.oidc.endpoints.LogoutEndpoint.doBrowserLogout(AuthenticationSessionModel logoutSession)": {
                "lineStart": 326,
                "lineEnd": 374
            },
            "org.keycloak.protocol.oidc.endpoints.LogoutEndpoint.logoutConfirmAction()": {
                "lineStart": 273,
                "lineEnd": 295
            },
            "org.keycloak.protocol.oidc.endpoints.LogoutEndpoint.logoutConfirmGet()": {
                "lineStart": 297,
                "lineEnd": 324
            }
        },
        "01d6cc4c0d-RedirectUtils.java": {
            "org.keycloak.protocol.oidc.utils.RedirectUtils.verifyRedirectUri(KeycloakSession session, String rootUrl, String redirectUri, Set<String> validRedirects, boolean requireRedirectUri)": {
                "lineStart": 57,
                "lineEnd": 123
            }
        },
        "602ca126b2-AuthenticationSessionManager.java": {
            "org.keycloak.services.managers.AuthenticationSessionManager.getAuthSessionCookies(RealmModel realm)": {
                "lineStart": 112,
                "lineEnd": 124
            }
        },
        "9e3eda42be-UserSessionCrossDCManager.java": {
            "org.keycloak.services.managers.UserSessionCrossDCManager.getUserSessionIfExistsRemotely(AuthenticationSessionManager asm, RealmModel realm)": {
                "lineStart": 30,
                "lineEnd": 45
            }
        },
        "a670dacf3a-SessionCodeChecks.java": {
            "org.keycloak.services.resources.SessionCodeChecks.initialVerifyAuthSession()": {
                "lineStart": 95,
                "lineEnd": 155
            }
        }
    },
    "CVE-2020-2102": {
        "3a83d5e213-HMACConfidentialKey.java": {
            "jenkins.security.HMACConfidentialKey.checkMac(byte[] message, byte[] mac)": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "jenkins.security.HMACConfidentialKey.checkMac(String message, String mac)": {
                "lineStart": 55,
                "lineEnd": 57
            }
        },
        "6edbe924da-DefaultJnlpSlaveReceiver.java": {
            "jenkins.slaves.DefaultJnlpSlaveReceiver.afterProperties(@NonNull JnlpConnectionState event)": {
                "lineStart": 64,
                "lineEnd": 123
            }
        }
    },
    "CVE-2023-30465": {
        "458da63e6-InlongGroupServiceImpl.java": {
            "org.apache.inlong.manager.service.group.InlongGroupServiceImpl.listBrief(InlongGroupPageRequest request, UserInfo opInfo)": {
                "lineStart": 272,
                "lineEnd": 307
            }
        },
        "57b0c8b77-StreamSinkServiceImpl.java": {
            "org.apache.inlong.manager.service.sink.StreamSinkServiceImpl.listByCondition(SinkPageRequest request, UserInfo opInfo)": {
                "lineStart": 244,
                "lineEnd": 279
            }
        },
        "7138636f9-InlongStreamServiceImpl.java": {
            "org.apache.inlong.manager.service.stream.InlongStreamServiceImpl.listBrief(InlongStreamPageRequest request, UserInfo opInfo)": {
                "lineStart": 242,
                "lineEnd": 246
            }
        }
    },
    "CVE-2022-39368": {
        "d5d4b8b86-DTLSConnector.java": {
            "org.eclipse.californium.scandium.DTLSConnector.stop()": {
                "lineStart": 637,
                "lineEnd": 724
            },
            "org.eclipse.californium.scandium.DTLSConnector.processDatagram(DatagramPacket packet, InetSocketAddress router)": {
                "lineStart": 905,
                "lineEnd": 1012
            },
            "org.eclipse.californium.scandium.DTLSConnector.processNewClientHello(final Record record)": {
                "lineStart": 1383,
                "lineEnd": 1496
            },
            "org.eclipse.californium.scandium.DTLSConnector.send(final RawData message)": {
                "lineStart": 1758,
                "lineEnd": 1902
            },
            "org.eclipse.californium.scandium.DTLSConnector.processAsynchronousHandshakeResult(final HandshakeResult handshakeResult)": {
                "lineStart": 2233,
                "lineEnd": 2281
            }
        },
        "3882be82e-InMemoryConnectionStore.java": {
            "org.eclipse.californium.scandium.dtls.InMemoryConnectionStore.remove(final Connection connection, final boolean removeFromSessionCache)": {
                "lineStart": 404,
                "lineEnd": 432
            }
        }
    },
    "CVE-2023-29528": {
        "961b648235-HTMLUtils.java": {
            "org.xwiki.xml.html.HTMLUtils$XWikiXMLOutputter.<init>(Format format, boolean omitDocType)": {
                "lineStart": 24,
                "lineEnd": 27
            },
            "org.xwiki.xml.html.HTMLUtils$XWikiXMLOutputter.escapeElementEntities(String text)": {
                "lineStart": 29,
                "lineEnd": 32
            },
            "org.xwiki.xml.html.HTMLUtils$XWikiXMLOutputter.escapeAttributeEntities(String text)": {
                "lineStart": 34,
                "lineEnd": 37
            },
            "org.xwiki.xml.html.HTMLUtils$XWikiXMLOutputter.cleanAmpersandEscape(String text)": {
                "lineStart": 39,
                "lineEnd": 56
            },
            "org.xwiki.xml.html.HTMLUtils$XWikiXMLOutputter.printDocType(Writer out, DocType docType)": {
                "lineStart": 58,
                "lineEnd": 63
            },
            "org.xwiki.xml.html.HTMLUtils$XWikiXMLOutputter.printElement(Writer out, Element element, int level, NamespaceStack namespaces)": {
                "lineStart": 65,
                "lineEnd": 83
            },
            "org.xwiki.xml.html.HTMLUtils.<init>()": {
                "lineStart": 87,
                "lineEnd": 88
            },
            "org.xwiki.xml.html.HTMLUtils.toString(Document document)": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "org.xwiki.xml.html.HTMLUtils.toString(Document document, boolean omitDeclaration, boolean omitDoctype)": {
                "lineStart": 94,
                "lineEnd": 103
            },
            "org.xwiki.xml.html.HTMLUtils.stripHTMLEnvelope(Document document)": {
                "lineStart": 105,
                "lineEnd": 137
            },
            "org.xwiki.xml.html.HTMLUtils.stripFirstElementInside(Document document, String parentTagName, String elementTagName)": {
                "lineStart": 139,
                "lineEnd": 155
            },
            "org.xwiki.xml.html.HTMLUtils.escapeElementText(String content)": {
                "lineStart": 157,
                "lineEnd": 159
            },
            "org.xwiki.xml.html.HTMLUtils.containsElementText(CharSequence content)": {
                "lineStart": 161,
                "lineEnd": 163
            }
        },
        "10a4db0b71-DefaultHTMLCleaner.java": {
            "org.xwiki.xml.internal.html.DefaultHTMLCleaner.getDefaultCleanerTransformations(HTMLCleanerConfiguration configuration)": {
                "lineStart": 126,
                "lineEnd": 161
            },
            "org.xwiki.xml.internal.html.DefaultHTMLCleaner.getDefaultCleanerProperties(HTMLCleanerConfiguration configuration)": {
                "lineStart": 101,
                "lineEnd": 124
            }
        }
    },
    "CVE-2024-25147": {
        "fe0cd7651c2e1-HtmlImpl.java": {
            "com.liferay.portal.util.HtmlImpl.escapeJSLink(String link)": {
                "lineStart": 345,
                "lineEnd": 360
            }
        }
    },
    "CVE-2022-45047": {
        "f8cb53334-AbstractGeneratorHostKeyProvider.java": {
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.loadKeys(SessionContext session)": {
                "lineStart": 97,
                "lineEnd": 135
            },
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.resolveKeyPairs(SessionContext session, Path keyPath)": {
                "lineStart": 137,
                "lineEnd": 183
            },
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.writeKeyPair(KeyPair kp, Path keyPath, OpenOption... options)": {
                "lineStart": 234,
                "lineEnd": 249
            },
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.generateKeyPair(String algorithm)": {
                "lineStart": 252,
                "lineEnd": 281
            }
        },
        "95c6bb0a1-SimpleGeneratorHostKeyProvider.java": {
            "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider.doReadKeyPairs(SessionContext session, NamedResource resourceKey, InputStream inputStream)": {
                "lineStart": 23,
                "lineEnd": 36
            },
            "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider.doWriteKeyPair(NamedResource resourceKey, KeyPair kp, OutputStream outputStream)": {
                "lineStart": 38,
                "lineEnd": 43
            }
        }
    },
    "CVE-2022-36893": {
        "c33f592-RpmSignPlugin.java": {
            "jenkins.plugins.rpmsign.RpmSignPlugin$GpgSignerDescriptor.doCheckIncludes(@AncestorInPath AbstractProject project, @QueryParameter String value)": {
                "lineStart": 255,
                "lineEnd": 269
            }
        }
    },
    "CVE-2020-17534": {
        "fb001139-UnJarResources.java": {
            "org.netbeans.html.presenters.webkit.UnJarResources.extract(URL url)": {
                "lineStart": 12,
                "lineEnd": 50
            }
        }
    },
    "CVE-2024-36042": {
        "5bc7e2940b-AuthenticationCredential.java": {
            "org.silverpeas.core.security.authentication.AuthenticationCredential.isPasswordSet()": {
                "lineStart": 69,
                "lineEnd": 71
            }
        },
        "aa3e1d86aa-AuthenticationService.java": {
            "org.silverpeas.core.security.authentication.AuthenticationService.checkAuthentication(final AuthenticationCredential userCredential)": {
                "lineStart": 141,
                "lineEnd": 151
            },
            "org.silverpeas.core.security.authentication.AuthenticationService.authenticateByLoginAndPasswordAndDomain(AuthenticationCredential credential)": {
                "lineStart": 153,
                "lineEnd": 172
            }
        },
        "f2b70e5805-AuthenticationServlet.java": {
            "org.silverpeas.core.web.authentication.AuthenticationServlet.authenticate(HttpServletRequest request, AuthenticationParameters authenticationParameters)": {
                "lineStart": 262,
                "lineEnd": 291
            }
        },
        "f42c597dee-CredentialsServlet.java": {
            "org.silverpeas.core.web.authentication.CredentialsServlet.initHandlers()": {
                "lineStart": 28,
                "lineEnd": 48
            },
            "org.silverpeas.core.web.authentication.CredentialsServlet.doGet(HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 50,
                "lineEnd": 89
            },
            "org.silverpeas.core.web.authentication.CredentialsServlet.checkUserState(String destinationPage, final UserCanLoginVerifier userStateVerifier)": {
                "lineStart": 91,
                "lineEnd": 101
            },
            "org.silverpeas.core.web.authentication.CredentialsServlet.getFunction(HttpServletRequest request)": {
                "lineStart": 103,
                "lineEnd": 112
            },
            "org.silverpeas.core.web.authentication.CredentialsServlet.doPost(HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 114,
                "lineEnd": 116
            },
            "org.silverpeas.core.web.authentication.CredentialsServlet.getAuthenticationCredential(@Defined final String login, @Defined final String domain)": {
                "lineStart": 118,
                "lineEnd": 126
            }
        }
    },
    "CVE-2023-37908": {
        "766250a17-XHTMLWikiPrinter.java": {
            "org.xwiki.rendering.renderer.printer.XHTMLWikiPrinter.cleanAttributes(String elementName, Map<String, String> attributes)": {
                "lineStart": 156,
                "lineEnd": 176
            },
            "org.xwiki.rendering.renderer.printer.XHTMLWikiPrinter.cleanAttributes(String elementName, Attributes attributes)": {
                "lineStart": 199,
                "lineEnd": 219
            }
        }
    },
    "CVE-2024-39031": {
        "c353166a81-HttpRequest.java": {
            "org.silverpeas.core.web.http.HttpRequest.<init>(HttpServletRequest request)": {
                "lineStart": 34,
                "lineEnd": 37
            }
        },
        "9aee3ab69f-MassiveWebSecurityFilter.java": {
            "org.silverpeas.core.web.filter.MassiveWebSecurityFilter.doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain)": {
                "lineStart": 71,
                "lineEnd": 84
            },
            "org.silverpeas.core.web.filter.MassiveWebSecurityFilter.checkRequestParametersForInjection(final HttpRequest httpRequest, final boolean isWebSqlInjectionSecurityEnabled, final boolean isWebXssInjectionSecurityEnabled)": {
                "lineStart": 132,
                "lineEnd": 151
            },
            "org.silverpeas.core.web.filter.MassiveWebSecurityFilter.checkParameterValues(final Map.Entry<String, String[]> parameterEntry, final boolean sqlInjectionToVerify, final boolean xssInjectionToVerify)": {
                "lineStart": 153,
                "lineEnd": 174
            },
            "org.silverpeas.core.web.filter.MassiveWebSecurityFilter.checkWebInjection(final HttpRequest httpRequest, final HttpServletResponse httpResponse)": {
                "lineStart": 119,
                "lineEnd": 130
            }
        },
        "7d0d46e03d-CalendarWebManager.java": {
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.<init>()": {
                "lineStart": 75,
                "lineEnd": 76
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.get(final String componentInstanceIdOrComponentName)": {
                "lineStart": 78,
                "lineEnd": 84
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.assertDataConsistency(final String componentInstanceId, final Calendar originalCalendar)": {
                "lineStart": 86,
                "lineEnd": 92
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.assertDataConsistency(final String componentInstanceId, final Calendar originalCalendar, final CalendarEvent event)": {
                "lineStart": 94,
                "lineEnd": 105
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.assertDataConsistency(final String componentInstanceId, final Calendar originalCalendar, final CalendarEvent previousOne, final CalendarEventOccurrence occurrence)": {
                "lineStart": 107,
                "lineEnd": 118
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.assertEntityIsDefined(final IdentifiableEntity entity)": {
                "lineStart": 120,
                "lineEnd": 125
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.createEvent(Calendar calendar, CalendarEvent event, String volatileEventId)": {
                "lineStart": 127,
                "lineEnd": 144
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getLocalizationBundle(String locale)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getCalendarsHandledBy(final String componentInstanceId)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getCalendarsHandledBy(final Collection<String> componentInstanceIds)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.saveCalendar(Calendar calendar)": {
                "lineStart": 158,
                "lineEnd": 169
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.deleteCalendar(Calendar calendar)": {
                "lineStart": 171,
                "lineEnd": 180
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.exportCalendarAsICalendarFormat(final Calendar calendar, final ExportDescriptor descriptor)": {
                "lineStart": 182,
                "lineEnd": 195
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.synchronizeCalendar(final Calendar calendar)": {
                "lineStart": 197,
                "lineEnd": 208
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.importEventsAsICalendarFormat(final Calendar calendar, final InputStream inputStream)": {
                "lineStart": 210,
                "lineEnd": 217
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.saveOccurrence(final CalendarEventOccurrence occurrence, OccurrenceEventActionMethodType updateMethodType, final ZoneId zoneId)": {
                "lineStart": 219,
                "lineEnd": 272
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.deleteOccurrence(CalendarEventOccurrence occurrence, OccurrenceEventActionMethodType deleteMethodType, final ZoneId zoneId)": {
                "lineStart": 274,
                "lineEnd": 312
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.updateOccurrenceAttendeeParticipation(CalendarEventOccurrence occurrence, String attendeeId, ParticipationStatus participationStatus, OccurrenceEventActionMethodType answerMethodType, final ZoneId zoneId)": {
                "lineStart": 314,
                "lineEnd": 337
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.updateEventAttendeeParticipation(final CalendarEventOccurrence occurrence, final String attendeeId, final ParticipationStatus participationStatus)": {
                "lineStart": 339,
                "lineEnd": 359
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.updateSingleOccurrenceAttendeeParticipation(final CalendarEventOccurrence occurrence, final String attendeeId, final ParticipationStatus participationStatus)": {
                "lineStart": 361,
                "lineEnd": 369
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.setAttendeeStatus(final ParticipationStatus participationStatus, final Attendee attendee)": {
                "lineStart": 371,
                "lineEnd": 385
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getFirstCalendarEventOccurrenceFromEventId(final String eventId)": {
                "lineStart": 387,
                "lineEnd": 399
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getEventOccurrencesOf(LocalDate startDate, LocalDate endDate, List<Calendar> calendars)": {
                "lineStart": 401,
                "lineEnd": 403
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getEventOccurrencesOf(LocalDate startDate, LocalDate endDate, List<Calendar> calendars, User currentRequester)": {
                "lineStart": 405,
                "lineEnd": 411
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getAllEventOccurrencesByUserIds(final Pair<List<String>, User> currentUserAndComponentInstanceId, LocalDate startDate, LocalDate endDate, Collection<User> users)": {
                "lineStart": 413,
                "lineEnd": 434
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getNextEventOccurrences(final List<String> componentIds, final Set<String> calendarIdsToExclude, final Set<User> usersToInclude, final Set<String> calendarIdsToInclude, final ZoneId zoneId, final Integer limit)": {
                "lineStart": 436,
                "lineEnd": 472
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getNextEventTimeWindows()": {
                "lineStart": 474,
                "lineEnd": 477
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.successMessage(String messageKey, Object... params)": {
                "lineStart": 479,
                "lineEnd": 483
            },
            "org.silverpeas.core.webapi.calendar.CalendarWebManager.getMessager()": {
                "lineStart": 485,
                "lineEnd": 487
            }
        }
    },
    "CVE-2021-29500": {
        "aa76ab1-DoubleJwt.java": {
            "cn.fxbin.bubble.plugin.token.DoubleJwt.parseToken(String token)": {
                "lineStart": 76,
                "lineEnd": 81
            }
        },
        "32c162b-SingleJwt.java": {
            "cn.fxbin.bubble.plugin.token.SingleJwt.parseToken(String token)": {
                "lineStart": 65,
                "lineEnd": 74
            }
        }
    },
    "CVE-2021-44139": {
        "d11815d2-MachineRegistryController.java": {
            "com.alibaba.csp.sentinel.dashboard.controller.MachineRegistryController.receiveHeartBeat(String app, @RequestParam(value = \"app_type\", required = false, defaultValue = \"0\") Integer appType, Long version, String v, String hostname, String ip, Integer port)": {
                "lineStart": 18,
                "lineEnd": 60
            }
        }
    },
    "CVE-2022-41828": {
        "37029e0-SocketFactoryFactory.java": {
            "com.amazon.redshift.core.SocketFactoryFactory.getSocketFactory(Properties info)": {
                "lineStart": 14,
                "lineEnd": 27
            },
            "com.amazon.redshift.core.SocketFactoryFactory.getSslSocketFactory(Properties info)": {
                "lineStart": 29,
                "lineEnd": 45
            }
        },
        "e3dbbe0-LibPQFactory.java": {
            "com.amazon.redshift.ssl.LibPQFactory.getCallbackHandler(Properties info)": {
                "lineStart": 36,
                "lineEnd": 53
            }
        },
        "43042d4-MakeSSL.java": {
            "com.amazon.redshift.ssl.MakeSSL.verifyPeerName(RedshiftStream stream, Properties info, SSLSocket newConnection)": {
                "lineStart": 40,
                "lineEnd": 62
            }
        },
        "4b9a5d8-ObjectFactory.java": {
            "com.amazon.redshift.util.ObjectFactory.instantiate(String classname, Properties info, boolean tryString, String stringarg)": {
                "lineStart": 6,
                "lineEnd": 31
            }
        }
    },
    "CVE-2020-2093": {
        "c54ef35-AdvisorGlobalConfiguration.java": {
            "com.cloudbees.jenkins.plugins.advisor.AdvisorGlobalConfiguration$DescriptorImpl.doTestSendEmail(@QueryParameter(\"email\") final String value, @QueryParameter(\"acceptToS\") final boolean acceptToS)": {
                "lineStart": 345,
                "lineEnd": 347
            }
        },
        "b04583f-Recipient.java": {
            "com.cloudbees.jenkins.plugins.advisor.client.model.Recipient$DescriptorImpl.doTestSendEmail(@QueryParameter(\"email\") final String value, @RelativePath(\"..\") @QueryParameter(\"acceptToS\") final boolean acceptToS)": {
                "lineStart": 38,
                "lineEnd": 40
            }
        }
    },
    "CVE-2023-33546": {
        "e07acead-Compiler.java": {
            "org.codehaus.commons.compiler.jdk.Compiler.compile(JavaCompiler compiler, List<String> options, Collection<JavaFileObject> sourceFileObjects, JavaFileManager fileManager, @Nullable final ErrorHandler compileErrorHandler, @Nullable final WarningHandler warningHandler, @Nullable final SortedSet<Location> offsets)": {
                "lineStart": 118,
                "lineEnd": 182
            }
        },
        "5cb6f027-ClassBodyEvaluator.java": {
            "org.codehaus.janino.ClassBodyEvaluator.cook(Scanner scanner)": {
                "lineStart": 99,
                "lineEnd": 107
            }
        },
        "40b9e641-Compiler.java": {
            "org.codehaus.janino.Compiler.compile(Resource[] sourceResources)": {
                "lineStart": 115,
                "lineEnd": 163
            }
        },
        "4b3b8149-ExpressionEvaluator.java": {
            "org.codehaus.janino.ExpressionEvaluator.cook(Parser... parsers)": {
                "lineStart": 152,
                "lineEnd": 180
            },
            "org.codehaus.janino.ExpressionEvaluator.guessParameterNames(Scanner scanner)": {
                "lineStart": 289,
                "lineEnd": 311
            }
        },
        "d45f1f4e-ScriptEvaluator.java": {
            "org.codehaus.janino.ScriptEvaluator.cook(Parser[] parsers)": {
                "lineStart": 262,
                "lineEnd": 278
            },
            "org.codehaus.janino.ScriptEvaluator.guessParameterNames(Scanner scanner)": {
                "lineStart": 524,
                "lineEnd": 546
            }
        },
        "8a7eb6c0-SimpleCompiler.java": {
            "org.codehaus.janino.SimpleCompiler.cook(Scanner scanner)": {
                "lineStart": 103,
                "lineEnd": 117
            }
        }
    },
    "CVE-2023-31544": {
        "8ae83a6661-CmsResultItemWidget.java": {
            "org.opencms.ade.galleries.client.ui.CmsResultItemWidget.generateTooltipHtml(CmsListInfoBean infoBean)": {
                "lineStart": 94,
                "lineEnd": 106
            }
        }
    },
    "CVE-2020-2160": {
        "437d220952-CrumbFilter.java": {
            "hudson.security.csrf.CrumbFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)": {
                "lineStart": 39,
                "lineEnd": 87
            }
        }
    },
    "CVE-2023-33947": {
        "0c89683ef3c10-AssetRendererFactoryRegistryUtil.java": {
            "com.liferay.asset.kernel.AssetRendererFactoryRegistryUtil._filterAssetRendererFactories(long companyId, ServiceTrackerMap<String, AssetRendererFactory<?>> assetRendererFactories, boolean filterSelectable)": {
                "lineStart": 66,
                "lineEnd": 77
            }
        }
    },
    "CVE-2020-1758": {
        "74da6f0cbb-DefaultEmailSenderProvider.java": {
            "org.keycloak.email.DefaultEmailSenderProvider.setupTruststore(Properties props)": {
                "lineStart": 150,
                "lineEnd": 161
            },
            "org.keycloak.email.DefaultEmailSenderProvider.send(Map<String, String> config, UserModel user, String subject, String textBody, String htmlBody)": {
                "lineStart": 33,
                "lineEnd": 132
            }
        }
    },
    "CVE-2022-43414": {
        "334b6cb-NUnitPublisher.java": {
            "hudson.plugins.nunit.NUnitPublisher.getTestResult(final String junitFilePattern, Run<?, ?> build, final TestResult existingTestResults, final long buildTime, final FilePath filePath)": {
                "lineStart": 199,
                "lineEnd": 234
            }
        }
    },
    "CVE-2022-38512": {
        "b296de9e082f3-ExportTranslationServlet.java": {
            "com.liferay.translation.web.internal.servlet.ExportTranslationServlet.doGet(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)": {
                "lineStart": 43,
                "lineEnd": 72
            }
        }
    },
    "CVE-2023-42496": {
        "0f2422e0a755c-NavigationBarTag.java": {
            "com.liferay.frontend.taglib.clay.servlet.taglib.NavigationBarTag.processStartTag()": {
                "lineStart": 70,
                "lineEnd": 114
            }
        }
    },
    "CVE-2022-41853": {
        "6237b1c6-HsqlDatabaseProperties.java": {
            "org.hsqldb.persist.HsqlDatabaseProperties.supportsJavaMethod(String name)": {
                "lineStart": 46,
                "lineEnd": 74
            }
        }
    },
    "CVE-2020-1959": {
        "91e55e63e4-SyncopeConsoleRequestCycleListener.java": {
            "org.apache.syncope.client.console.SyncopeConsoleRequestCycleListener.onException(final RequestCycle cycle, final Exception e)": {
                "lineStart": 30,
                "lineEnd": 80
            }
        },
        "74b1db060c-SyncopeConsoleSession.java": {
            "org.apache.syncope.client.console.SyncopeConsoleSession.invalidateNow()": {
                "lineStart": 158,
                "lineEnd": 169
            }
        }
    },
    "CVE-2023-43123": {
        "afffee4cb-TopologySpoutLag.java": {
            "org.apache.storm.utils.TopologySpoutLag.createExtraPropertiesFile(Map<String, Object> jsonConf)": {
                "lineStart": 69,
                "lineEnd": 96
            }
        }
    },
    "CVE-2022-4245": {
        "913b5f27-XmlWriterUtil.java": {
            "org.codehaus.plexus.util.xml.XmlWriterUtil.writeComment(XMLWriter writer, String comment, int indent, int indentSize, int columnSize)": {
                "lineStart": 59,
                "lineEnd": 117
            }
        }
    },
    "CVE-2022-45935": {
        "a3186c3d9b-StoreMessageManager.java": {
            "org.apache.james.mailbox.store.StoreMessageManager.appendMessage(InputStream msgIn, Date internalDate, final MailboxSession mailboxSession, boolean isRecent, Flags flagsToBeSet)": {
                "lineStart": 220,
                "lineEnd": 262
            }
        },
        "b72ecbddc9-StripAttachment.java": {
            "org.apache.james.transport.mailets.StripAttachment.createTempFile(String originalFileName)": {
                "lineStart": 348,
                "lineEnd": 351
            }
        },
        "761f9b1dce-BufferedDeferredFileOutputStream.java": {
            "org.apache.james.server.core.BufferedDeferredFileOutputStream.<init>(final int threshold, final File outputFile)": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "org.apache.james.server.core.BufferedDeferredFileOutputStream.<init>(final int threshold, final String prefix, final String suffix, final File directory)": {
                "lineStart": 24,
                "lineEnd": 30
            },
            "org.apache.james.server.core.BufferedDeferredFileOutputStream.<init>(final int threshold, final File outputFile, final String prefix, final String suffix, final File directory)": {
                "lineStart": 32,
                "lineEnd": 40
            },
            "org.apache.james.server.core.BufferedDeferredFileOutputStream.thresholdReached()": {
                "lineStart": 46,
                "lineEnd": 62
            }
        },
        "376d3d3b30-MimeMessageInputStreamSource.java": {
            "org.apache.james.server.core.MimeMessageInputStreamSource.<init>(String key, InputStream in)": {
                "lineStart": 28,
                "lineEnd": 64
            },
            "org.apache.james.server.core.MimeMessageInputStreamSource.<init>(String key)": {
                "lineStart": 66,
                "lineEnd": 70
            }
        },
        "b70496b6b3-SieveFileRepository.java": {
            "org.apache.james.sieverepository.file.SieveFileRepository.toFile(File file, String content)": {
                "lineStart": 58,
                "lineEnd": 99
            }
        },
        "6dbec4d0b8-ImapRequestFrameDecoder.java": {
            "org.apache.james.imapserver.netty.ImapRequestFrameDecoder.decode(ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer)": {
                "lineStart": 42,
                "lineEnd": 147
            }
        }
    },
    "CVE-2020-27838": {
        "c11822640d-MigrateTo1_2_0.java": {
            "org.keycloak.migration.migrators.MigrateTo1_2_0.setupBrokerService(RealmModel realm)": {
                "lineStart": 16,
                "lineEnd": 32
            }
        },
        "e2b4d0aad0-MigrateTo9_0_0.java": {
            "org.keycloak.migration.migrators.MigrateTo9_0_0.addAccountConsoleClient(RealmModel realm)": {
                "lineStart": 51,
                "lineEnd": 73
            }
        },
        "0023eaf9e7-KeycloakModelUtils.java": {
            "org.keycloak.models.utils.KeycloakModelUtils.createClient(RealmModel realm, String name)": {
                "lineStart": 149,
                "lineEnd": 155
            }
        },
        "b0bbb1939f-RepresentationToModel.java": {
            "org.keycloak.models.utils.RepresentationToModel.createClient(KeycloakSession session, RealmModel realm, ClientRepresentation resourceRep, Map<String, String> mappedFlows)": {
                "lineStart": 1349,
                "lineEnd": 1536
            },
            "org.keycloak.models.utils.RepresentationToModel.updateClient(ClientRepresentation rep, ClientModel resource)": {
                "lineStart": 1549,
                "lineEnd": 1632
            }
        },
        "0b61171068-OIDCLoginProtocolFactory.java": {
            "org.keycloak.protocol.oidc.OIDCLoginProtocolFactory.setupClientDefaults(ClientRepresentation rep, ClientModel newClient)": {
                "lineStart": 264,
                "lineEnd": 305
            }
        },
        "f55e7c7efb-AbstractClientRegistrationProvider.java": {
            "org.keycloak.services.clientregistration.AbstractClientRegistrationProvider.get(ClientModel client)": {
                "lineStart": 63,
                "lineEnd": 78
            },
            "org.keycloak.services.clientregistration.AbstractClientRegistrationProvider.create(ClientRegistrationContext context)": {
                "lineStart": 29,
                "lineEnd": 61
            }
        },
        "7ec4096411-AdapterInstallationClientRegistrationProvider.java": {
            "org.keycloak.services.clientregistration.AdapterInstallationClientRegistrationProvider.get(@PathParam(\"clientId\") String clientId)": {
                "lineStart": 22,
                "lineEnd": 30
            }
        },
        "af1d64a485-ClientRegistrationAuth.java": {
            "org.keycloak.services.clientregistration.ClientRegistrationAuth.requireView(ClientModel client)": {
                "lineStart": 143,
                "lineEnd": 193
            },
            "org.keycloak.services.clientregistration.ClientRegistrationAuth.authenticateClient(ClientModel client)": {
                "lineStart": 344,
                "lineEnd": 373
            }
        },
        "9ef1a467d5-DescriptionConverter.java": {
            "org.keycloak.services.clientregistration.oidc.DescriptionConverter.toInternal(KeycloakSession session, OIDCClientRepresentation clientOIDC)": {
                "lineStart": 36,
                "lineEnd": 138
            }
        },
        "9f3feb4c65-RealmManager.java": {
            "org.keycloak.services.managers.RealmManager.setupAdminConsole(RealmModel realm)": {
                "lineStart": 135,
                "lineEnd": 150
            },
            "org.keycloak.services.managers.RealmManager.setupAdminCli(RealmModel realm)": {
                "lineStart": 165,
                "lineEnd": 179
            },
            "org.keycloak.services.managers.RealmManager.createMasterAdminManagement(RealmModel realm)": {
                "lineStart": 274,
                "lineEnd": 301
            },
            "org.keycloak.services.managers.RealmManager.setupRealmAdminManagement(RealmModel realm)": {
                "lineStart": 318,
                "lineEnd": 340
            },
            "org.keycloak.services.managers.RealmManager.setupAccountManagement(RealmModel realm)": {
                "lineStart": 372,
                "lineEnd": 427
            },
            "org.keycloak.services.managers.RealmManager.setupBrokerService(RealmModel realm)": {
                "lineStart": 433,
                "lineEnd": 449
            }
        }
    },
    "CVE-2023-27025": {
        "100e22ad-ScheduleUtils.java": {
            "com.ruoyi.quartz.util.ScheduleUtils.whiteList(String invokeTarget)": {
                "lineStart": 71,
                "lineEnd": 80
            }
        }
    },
    "CVE-2020-2302": {
        "ef19c3f-ActiveDirectoryStatus.java": {
            "hudson.plugins.active_directory.ActiveDirectoryStatus.getIconFileName()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus.getDisplayName()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus.getUrlName()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus.getDomains()": {
                "lineStart": 32,
                "lineEnd": 40
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus.startDomainHealthChecks(final String domain)": {
                "lineStart": 42,
                "lineEnd": 79
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus.doFillDomainsItems()": {
                "lineStart": 81,
                "lineEnd": 88
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus$ServerHealth.<init>(SocketInfo socketInfo)": {
                "lineStart": 94,
                "lineEnd": 98
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus$ServerHealth.isCanLogin()": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus$ServerHealth.getPingExecutionTime()": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus$ServerHealth.getLoginExecutionTime()": {
                "lineStart": 108,
                "lineEnd": 110
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus$ServerHealth.computeLoginExecutionTime()": {
                "lineStart": 112,
                "lineEnd": 118
            },
            "hudson.plugins.active_directory.ActiveDirectoryStatus$ServerHealth.computePingExecutionTime()": {
                "lineStart": 120,
                "lineEnd": 131
            }
        }
    },
    "CVE-2021-33333": {
        "eed049cf4e204-BaseWorkflowPortlet.java": {
            "com.liferay.portal.workflow.web.internal.portlet.BaseWorkflowPortlet.processAction(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 33,
                "lineEnd": 39
            }
        },
        "989a1cff5f094-MyWorkflowInstancePortletTab.java": {
            "com.liferay.portal.workflow.web.internal.portlet.tab.MyWorkflowInstancePortletTab.getName()": {
                "lineStart": 7,
                "lineEnd": 9
            }
        },
        "404018b1f98e7-WorkflowInstancePortletTab.java": {
            "com.liferay.portal.workflow.web.internal.portlet.tab.WorkflowInstancePortletTab.prepareProcessAction(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 50,
                "lineEnd": 56
            }
        }
    },
    "CVE-2023-46654": {
        "d649447-ElectricFlowClient.java": {
            "org.jenkinsci.plugins.electricflow.ElectricFlowClient.uploadArtifact(List<File> fileList, String uploadWorkspace, String repo, String name, String version, boolean uploadDirectory)": {
                "lineStart": 312,
                "lineEnd": 352
            }
        },
        "d778228-FileHelper.java": {
            "org.jenkinsci.plugins.electricflow.FileHelper.getFilesFromDirectory(final File folder)": {
                "lineStart": 81,
                "lineEnd": 96
            },
            "org.jenkinsci.plugins.electricflow.FileHelper.getFilesFromDirectoryWildcardDirScanner(String includePattern, boolean fullPath, String fullPathValue)": {
                "lineStart": 98,
                "lineEnd": 120
            },
            "org.jenkinsci.plugins.electricflow.FileHelper.__deleteDirectory(File dir)": {
                "lineStart": 174,
                "lineEnd": 184
            }
        }
    },
    "CVE-2020-14297": {
        "af323940-EJBSimpleTransactionControl.java": {
            "org.jboss.ejb.protocol.remote.EJBSimpleTransactionControl.executeSimpleInvocation(int type, boolean withParam)": {
                "lineStart": 42,
                "lineEnd": 93
            }
        },
        "d41c1243-EJBTransactionOperations.java": {
            "org.jboss.ejb.protocol.remote.EJBTransactionOperations.executeSimpleInvocation(final TransactionID transactionID, int type, boolean withAnswer, boolean withParam, boolean param)": {
                "lineStart": 64,
                "lineEnd": 114
            },
            "org.jboss.ejb.protocol.remote.EJBTransactionOperations.recover(final int flag, final String parentName, final ConnectionPeerIdentity peerIdentity)": {
                "lineStart": 159,
                "lineEnd": 209
            }
        }
    },
    "CVE-2020-13931": {
        "1437a95db3-ActiveMQResourceAdapter.java": {
            "org.apache.openejb.resource.activemq.ActiveMQResourceAdapter.setServerUrl(final String url)": {
                "lineStart": 73,
                "lineEnd": 75
            }
        },
        "208ed850a0-URISupport.java": {
            "org.apache.openejb.util.URISupport.relativize(final URI a, URI b)": {
                "lineStart": 15,
                "lineEnd": 58
            },
            "org.apache.openejb.util.URISupport$CompositeData.getComponents()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.apache.openejb.util.URISupport$CompositeData.getFragment()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.apache.openejb.util.URISupport$CompositeData.getParameters()": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "org.apache.openejb.util.URISupport$CompositeData.getScheme()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.apache.openejb.util.URISupport$CompositeData.getPath()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "org.apache.openejb.util.URISupport$CompositeData.getHost()": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "org.apache.openejb.util.URISupport$CompositeData.toURI()": {
                "lineStart": 91,
                "lineEnd": 130
            },
            "org.apache.openejb.util.URISupport.parseQuery(final String uri)": {
                "lineStart": 134,
                "lineEnd": 160
            },
            "org.apache.openejb.util.URISupport.parseParamters(final URI uri)": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "org.apache.openejb.util.URISupport.removeQuery(final URI uri)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "org.apache.openejb.util.URISupport.createURIWithQuery(final URI uri, final String query)": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "org.apache.openejb.util.URISupport.parseComposite(final URI uri)": {
                "lineStart": 174,
                "lineEnd": 181
            },
            "org.apache.openejb.util.URISupport.parseComposite(final URI uri, final CompositeData rc, final String ssp)": {
                "lineStart": 183,
                "lineEnd": 231
            },
            "org.apache.openejb.util.URISupport.splitComponents(final String str)": {
                "lineStart": 233,
                "lineEnd": 265
            },
            "org.apache.openejb.util.URISupport.stripPrefix(final String value, final String prefix)": {
                "lineStart": 267,
                "lineEnd": 273
            },
            "org.apache.openejb.util.URISupport.stripScheme(final URI uri)": {
                "lineStart": 275,
                "lineEnd": 277
            },
            "org.apache.openejb.util.URISupport.createQueryString(final Map options)": {
                "lineStart": 279,
                "lineEnd": 310
            },
            "org.apache.openejb.util.URISupport.createRemainingURI(final URI originalURI, final Map params)": {
                "lineStart": 312,
                "lineEnd": 319
            },
            "org.apache.openejb.util.URISupport.changeScheme(final URI bindAddr, final String scheme)": {
                "lineStart": 321,
                "lineEnd": 323
            },
            "org.apache.openejb.util.URISupport.checkParenthesis(final String str)": {
                "lineStart": 325,
                "lineEnd": 340
            },
            "org.apache.openejb.util.URISupport.indexOfParenthesisMatch(final String str)": {
                "lineStart": 342,
                "lineEnd": 345
            }
        },
        "1474c431d4-SystemInstance.java": {
            "org.apache.openejb.loader.SystemInstance.<init>(final Properties properties)": {
                "lineStart": 24,
                "lineEnd": 109
            }
        }
    },
    "CVE-2021-45458": {
        "566e1cde36-PasswordPlaceholderConfigurer.java": {
            "org.apache.kylin.rest.security.PasswordPlaceholderConfigurer.printUsage()": {
                "lineStart": 56,
                "lineEnd": 59
            }
        }
    },
    "CVE-2020-2290": {
        "f6bf23a-GroovyScript.java": {
            "org.biouno.unochoice.model.GroovyScript.eval(Map<String, String> parameters)": {
                "lineStart": 63,
                "lineEnd": 137
            }
        },
        "ff0ef7d-ScriptlerScript.java": {
            "org.biouno.unochoice.model.ScriptlerScript.toGroovyScript()": {
                "lineStart": 69,
                "lineEnd": 76
            }
        }
    },
    "CVE-2022-42131": {
        "3775195d8cfa0-BaseJSONWebServiceClientImpl.java": {
            "com.liferay.petra.json.web.service.client.BaseJSONWebServiceClientImpl.getSSLIOSessionStrategy()": {
                "lineStart": 620,
                "lineEnd": 636
            }
        },
        "e4bc6c99f3b9e-JSONWebServiceClient.java": {
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.destroy()": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doDelete(String url, List<NameValuePair> parameters)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doDelete(String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doDelete(String url, String... parametersArray)": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doGet(String url, List<NameValuePair> parameters)": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doGet(String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doGet(String url, String... parametersArray)": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doGetToList(Class<T> clazz, String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doGetToList(Class<T> clazz, String url, String... parametersArray)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doGetToObject(Class<T> clazz, String url, String... parametersArray)": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPost(String url, List<NameValuePair> parameters)": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPost(String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPost(String url, String... parametersArray)": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPostAsJSON(String url, Object object)": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPostAsJSON(String url, String json)": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPostAsJSON(String url, String json, List<NameValuePair> headers)": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPostToObject(Class<T> clazz, String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPostToObject(Class<T> clazz, String url, String... parametersArray)": {
                "lineStart": 24,
                "lineEnd": 24
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPut(String url, List<NameValuePair> parameters)": {
                "lineStart": 25,
                "lineEnd": 25
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPut(String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 26,
                "lineEnd": 26
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPut(String url, String... parametersArray)": {
                "lineStart": 27,
                "lineEnd": 27
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPutToObject(Class<T> clazz, String url, List<NameValuePair> parameters)": {
                "lineStart": 28,
                "lineEnd": 28
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPutToObject(Class<T> clazz, String url, List<NameValuePair> parameters, List<NameValuePair> headers)": {
                "lineStart": 29,
                "lineEnd": 29
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.doPutToObject(Class<T> clazz, String url, String... parametersArray)": {
                "lineStart": 30,
                "lineEnd": 30
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.getHostName()": {
                "lineStart": 31,
                "lineEnd": 31
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.getHostPort()": {
                "lineStart": 32,
                "lineEnd": 32
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.getProtocol()": {
                "lineStart": 33,
                "lineEnd": 33
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.registerModule(Module module)": {
                "lineStart": 34,
                "lineEnd": 34
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.resetHttpClient()": {
                "lineStart": 35,
                "lineEnd": 35
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setHostName(String hostName)": {
                "lineStart": 36,
                "lineEnd": 36
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setHostPort(int hostPort)": {
                "lineStart": 37,
                "lineEnd": 37
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setKeyStore(KeyStore keyStore)": {
                "lineStart": 38,
                "lineEnd": 38
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setLogin(String login)": {
                "lineStart": 39,
                "lineEnd": 39
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setMaxAttempts(int maxAttempts)": {
                "lineStart": 40,
                "lineEnd": 40
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setOAuthAccessSecret(String oAuthAccessSecret)": {
                "lineStart": 41,
                "lineEnd": 41
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setOAuthAccessToken(String oAuthAccessToken)": {
                "lineStart": 42,
                "lineEnd": 42
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setOAuthConsumerKey(String oAuthConsumerKey)": {
                "lineStart": 43,
                "lineEnd": 43
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setOAuthConsumerSecret(String oAuthConsumerSecret)": {
                "lineStart": 44,
                "lineEnd": 44
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setPassword(String password)": {
                "lineStart": 45,
                "lineEnd": 45
            },
            "com.liferay.petra.json.web.service.client.JSONWebServiceClient.setProtocol(String protocol)": {
                "lineStart": 46,
                "lineEnd": 46
            }
        },
        "a9a589098defb-JSONWebServiceClientImpl.java": {
            "com.liferay.petra.json.web.service.client.internal.JSONWebServiceClientImpl.activate(Map<String, Object> properties)": {
                "lineStart": 20,
                "lineEnd": 47
            }
        },
        "762df592e2b94-X509TrustManagerImpl.java": {
            "com.liferay.petra.json.web.service.client.internal.X509TrustManagerImpl.<init>()": {
                "lineStart": 9,
                "lineEnd": 29
            },
            "com.liferay.petra.json.web.service.client.internal.X509TrustManagerImpl.checkClientTrusted(X509Certificate[] x509Certificates, String authType)": {
                "lineStart": 31,
                "lineEnd": 36
            },
            "com.liferay.petra.json.web.service.client.internal.X509TrustManagerImpl.checkServerTrusted(X509Certificate[] x509Certificates, String authType)": {
                "lineStart": 38,
                "lineEnd": 43
            },
            "com.liferay.petra.json.web.service.client.internal.X509TrustManagerImpl.getAcceptedIssuers()": {
                "lineStart": 45,
                "lineEnd": 47
            }
        }
    },
    "CVE-2022-36896": {
        "a386bbc-AbstractConfiguration.java": {
            "com.compuware.jenkins.scm.AbstractConfiguration$AbstractConfigurationImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 44,
                "lineEnd": 65
            }
        },
        "c49cd34-EndevorConfiguration.java": {
            "com.compuware.jenkins.scm.EndevorConfiguration$EndevorDescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 98,
                "lineEnd": 113
            }
        },
        "34cc5d9-IspwConfiguration.java": {
            "com.compuware.jenkins.scm.IspwConfiguration$DescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 196,
                "lineEnd": 211
            }
        },
        "4b3c6d1-IspwContainerConfiguration.java": {
            "com.compuware.jenkins.scm.IspwContainerConfiguration$DescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 125,
                "lineEnd": 140
            }
        },
        "c01e6a0-PdsConfiguration.java": {
            "com.compuware.jenkins.scm.PdsConfiguration$PdsDescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 98,
                "lineEnd": 113
            }
        }
    },
    "CVE-2023-45278": {
        "870ab3c4a-FileSystemBucket.java": {
            "org.yamcs.yarch.FileSystemBucket.putObject(String objectName, String contentType, Map<String, String> metadata, byte[] objectData)": {
                "lineStart": 125,
                "lineEnd": 172
            },
            "org.yamcs.yarch.FileSystemBucket.getObject(String objectName)": {
                "lineStart": 174,
                "lineEnd": 183
            },
            "org.yamcs.yarch.FileSystemBucket.deleteObject(String objectName)": {
                "lineStart": 185,
                "lineEnd": 188
            },
            "org.yamcs.yarch.FileSystemBucket.findObject(String objectName)": {
                "lineStart": 190,
                "lineEnd": 200
            }
        }
    },
    "CVE-2021-20323": {
        "a246b383fe-OAuthErrorException.java": {
            "org.keycloak.OAuthErrorException.<init>(String error, String description, String message, Throwable cause)": {
                "lineStart": 27,
                "lineEnd": 31
            },
            "org.keycloak.OAuthErrorException.<init>(String error, String description, String message)": {
                "lineStart": 33,
                "lineEnd": 37
            },
            "org.keycloak.OAuthErrorException.<init>(String error, String description)": {
                "lineStart": 39,
                "lineEnd": 43
            },
            "org.keycloak.OAuthErrorException.<init>(String error, String description, Throwable cause)": {
                "lineStart": 45,
                "lineEnd": 49
            },
            "org.keycloak.OAuthErrorException.<init>(String error)": {
                "lineStart": 51,
                "lineEnd": 54
            },
            "org.keycloak.OAuthErrorException.<init>(String error, Throwable cause)": {
                "lineStart": 56,
                "lineEnd": 59
            },
            "org.keycloak.OAuthErrorException.getError()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "org.keycloak.OAuthErrorException.setError(String error)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.keycloak.OAuthErrorException.getDescription()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.keycloak.OAuthErrorException.setDescription(String description)": {
                "lineStart": 75,
                "lineEnd": 77
            }
        },
        "7ab0dfc4f6-BackchannelAuthenticationEndpoint.java": {
            "org.keycloak.protocol.oidc.grants.ciba.endpoints.BackchannelAuthenticationEndpoint.authorizeClient(MultivaluedMap<String, String> params)": {
                "lineStart": 102,
                "lineEnd": 165
            }
        }
    },
    "CVE-2021-21607": {
        "de98dd99a8-Graph.java": {
            "hudson.util.Graph.render(StaplerRequest req, ChartRenderingInfo info)": {
                "lineStart": 32,
                "lineEnd": 44
            }
        }
    },
    "CVE-2020-7020": {
        "c5e1564b5ee-AbstractSearchAsyncAction.java": {
            "org.elasticsearch.action.search.AbstractSearchAsyncAction.raisePhaseFailure(SearchPhaseExecutionException exception)": {
                "lineStart": 460,
                "lineEnd": 479
            }
        },
        "82e5d002bee-DfsQueryPhase.java": {
            "org.elasticsearch.action.search.DfsQueryPhase.run()": {
                "lineStart": 33,
                "lineEnd": 69
            }
        },
        "613761871f4-FetchSearchPhase.java": {
            "org.elasticsearch.action.search.FetchSearchPhase.releaseIrrelevantSearchContext(QuerySearchResult queryResult)": {
                "lineStart": 150,
                "lineEnd": 163
            }
        },
        "c0d98b434a3-SearchOperationListener.java": {
            "org.elasticsearch.index.shard.SearchOperationListener$CompositeListener.validateSearchContext(ReaderContext readerContext, TransportRequest request)": {
                "lineStart": 159,
                "lineEnd": 172
            }
        },
        "30230d96f9d-SearchService.java": {
            "org.elasticsearch.search.SearchService.executeDfsPhase(ShardSearchRequest request, SearchShardTask task, boolean keepStatesInContext)": {
                "lineStart": 260,
                "lineEnd": 272
            },
            "org.elasticsearch.search.SearchService.executeQueryPhase(ShardSearchRequest request, boolean keepStatesInContext, SearchShardTask task, ActionListener<SearchPhaseResult> listener)": {
                "lineStart": 286,
                "lineEnd": 359
            },
            "org.elasticsearch.search.SearchService.getShard(ShardSearchRequest request)": {
                "lineStart": 361,
                "lineEnd": 369
            },
            "org.elasticsearch.search.SearchService.executeQueryPhase(ShardSearchRequest request, SearchShardTask task, ReaderContext readerContext)": {
                "lineStart": 375,
                "lineEnd": 408
            },
            "org.elasticsearch.search.SearchService.executeQueryPhase(InternalScrollSearchRequest request, SearchShardTask task, ActionListener<ScrollQuerySearchResult> listener)": {
                "lineStart": 424,
                "lineEnd": 450
            },
            "org.elasticsearch.search.SearchService.executeQueryPhase(QuerySearchRequest request, SearchShardTask task, ActionListener<QuerySearchResult> listener)": {
                "lineStart": 452,
                "lineEnd": 479
            },
            "org.elasticsearch.search.SearchService.executeFetchPhase(InternalScrollSearchRequest request, SearchShardTask task, ActionListener<ScrollQueryFetchSearchResult> listener)": {
                "lineStart": 497,
                "lineEnd": 524
            },
            "org.elasticsearch.search.SearchService.executeFetchPhase(ShardFetchRequest request, SearchShardTask task, ActionListener<FetchSearchResult> listener)": {
                "lineStart": 526,
                "lineEnd": 558
            },
            "org.elasticsearch.search.SearchService.findReaderContext(ShardSearchContextId id)": {
                "lineStart": 573,
                "lineEnd": 580
            },
            "org.elasticsearch.search.SearchService.createOrGetReaderContext(ShardSearchRequest request, boolean keepStatesInContext)": {
                "lineStart": 582,
                "lineEnd": 597
            },
            "org.elasticsearch.search.SearchService.processFailure(ShardSearchRequest request, ReaderContext context, Exception e)": {
                "lineStart": 797,
                "lineEnd": 813
            },
            "org.elasticsearch.search.SearchService.canMatch(ShardSearchRequest request)": {
                "lineStart": 1123,
                "lineEnd": 1163
            }
        },
        "1c3c14ab14d-LegacyReaderContext.java": {
            "org.elasticsearch.search.internal.LegacyReaderContext.acquireSearcher(String source)": {
                "lineStart": 31,
                "lineEnd": 43
            },
            "org.elasticsearch.search.internal.LegacyReaderContext.doClose()": {
                "lineStart": 45,
                "lineEnd": 48
            }
        },
        "507a2c1fbb4-ReaderContext.java": {
            "org.elasticsearch.search.internal.ReaderContext.<init>(long id, IndexService indexService, IndexShard indexShard, Engine.SearcherSupplier searcherSupplier, long keepAliveInMillis, boolean singleSession)": {
                "lineStart": 31,
                "lineEnd": 45
            },
            "org.elasticsearch.search.internal.ReaderContext.nowInMillis()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.elasticsearch.search.internal.ReaderContext.close()": {
                "lineStart": 51,
                "lineEnd": 56
            },
            "org.elasticsearch.search.internal.ReaderContext.doClose()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "org.elasticsearch.search.internal.ReaderContext.addOnClose(Releasable releasable)": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "org.elasticsearch.search.internal.ReaderContext.id()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "org.elasticsearch.search.internal.ReaderContext.indexService()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "org.elasticsearch.search.internal.ReaderContext.indexShard()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "org.elasticsearch.search.internal.ReaderContext.acquireSearcher(String source)": {
                "lineStart": 78,
                "lineEnd": 80
            },
            "org.elasticsearch.search.internal.ReaderContext.keepAlive(long keepAlive)": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "org.elasticsearch.search.internal.ReaderContext.markAsUsed()": {
                "lineStart": 86,
                "lineEnd": 94
            },
            "org.elasticsearch.search.internal.ReaderContext.isExpired()": {
                "lineStart": 96,
                "lineEnd": 103
            },
            "org.elasticsearch.search.internal.ReaderContext.getShardSearchRequest(ShardSearchRequest other)": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "org.elasticsearch.search.internal.ReaderContext.scrollContext()": {
                "lineStart": 109,
                "lineEnd": 111
            },
            "org.elasticsearch.search.internal.ReaderContext.getAggregatedDfs(AggregatedDfs other)": {
                "lineStart": 113,
                "lineEnd": 115
            },
            "org.elasticsearch.search.internal.ReaderContext.setAggregatedDfs(AggregatedDfs aggregatedDfs)": {
                "lineStart": 117,
                "lineEnd": 118
            },
            "org.elasticsearch.search.internal.ReaderContext.getRescoreDocIds(RescoreDocIds other)": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "org.elasticsearch.search.internal.ReaderContext.setRescoreDocIds(RescoreDocIds rescoreDocIds)": {
                "lineStart": 124,
                "lineEnd": 125
            },
            "org.elasticsearch.search.internal.ReaderContext.singleSession()": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "org.elasticsearch.search.internal.ReaderContext.getFromContext(String key)": {
                "lineStart": 131,
                "lineEnd": 133
            },
            "org.elasticsearch.search.internal.ReaderContext.putInContext(String key, Object value)": {
                "lineStart": 135,
                "lineEnd": 141
            },
            "org.elasticsearch.search.internal.ReaderContext.getStartTimeInNano()": {
                "lineStart": 143,
                "lineEnd": 145
            }
        },
        "eca53bf802a-SecuritySearchOperationListener.java": {
            "org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener.validateSearchContext(ReaderContext readerContext, TransportRequest request)": {
                "lineStart": 42,
                "lineEnd": 60
            }
        }
    },
    "CVE-2021-21295": {
        "db4904407d-HttpObjectDecoder.java": {
            "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": {
                "lineStart": 391,
                "lineEnd": 483
            }
        },
        "8b9aedc551-HttpUtil.java": {
            "io.netty.handler.codec.http.HttpUtil.<init>()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "io.netty.handler.codec.http.HttpUtil.isOriginForm(URI uri)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "io.netty.handler.codec.http.HttpUtil.isAsteriskForm(URI uri)": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "io.netty.handler.codec.http.HttpUtil.isKeepAlive(HttpMessage message)": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "io.netty.handler.codec.http.HttpUtil.setKeepAlive(HttpMessage message, boolean keepAlive)": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "io.netty.handler.codec.http.HttpUtil.setKeepAlive(HttpHeaders h, HttpVersion httpVersion, boolean keepAlive)": {
                "lineStart": 34,
                "lineEnd": 54
            },
            "io.netty.handler.codec.http.HttpUtil.getContentLength(HttpMessage message)": {
                "lineStart": 56,
                "lineEnd": 68
            },
            "io.netty.handler.codec.http.HttpUtil.getContentLength(HttpMessage message, long defaultValue)": {
                "lineStart": 70,
                "lineEnd": 82
            },
            "io.netty.handler.codec.http.HttpUtil.getContentLength(HttpMessage message, int defaultValue)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "io.netty.handler.codec.http.HttpUtil.getWebSocketContentLength(HttpMessage message)": {
                "lineStart": 88,
                "lineEnd": 106
            },
            "io.netty.handler.codec.http.HttpUtil.setContentLength(HttpMessage message, long length)": {
                "lineStart": 108,
                "lineEnd": 110
            },
            "io.netty.handler.codec.http.HttpUtil.isContentLengthSet(HttpMessage m)": {
                "lineStart": 112,
                "lineEnd": 114
            },
            "io.netty.handler.codec.http.HttpUtil.is100ContinueExpected(HttpMessage message)": {
                "lineStart": 116,
                "lineEnd": 118
            },
            "io.netty.handler.codec.http.HttpUtil.isUnsupportedExpectation(HttpMessage message)": {
                "lineStart": 120,
                "lineEnd": 127
            },
            "io.netty.handler.codec.http.HttpUtil.isExpectHeaderValid(final HttpMessage message)": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "io.netty.handler.codec.http.HttpUtil.set100ContinueExpected(HttpMessage message, boolean expected)": {
                "lineStart": 133,
                "lineEnd": 141
            },
            "io.netty.handler.codec.http.HttpUtil.isTransferEncodingChunked(HttpMessage message)": {
                "lineStart": 143,
                "lineEnd": 145
            },
            "io.netty.handler.codec.http.HttpUtil.setTransferEncodingChunked(HttpMessage m, boolean chunked)": {
                "lineStart": 147,
                "lineEnd": 177
            },
            "io.netty.handler.codec.http.HttpUtil.getCharset(HttpMessage message)": {
                "lineStart": 179,
                "lineEnd": 181
            },
            "io.netty.handler.codec.http.HttpUtil.getCharset(CharSequence contentTypeValue)": {
                "lineStart": 183,
                "lineEnd": 191
            },
            "io.netty.handler.codec.http.HttpUtil.getCharset(HttpMessage message, Charset defaultCharset)": {
                "lineStart": 193,
                "lineEnd": 202
            },
            "io.netty.handler.codec.http.HttpUtil.getCharset(CharSequence contentTypeValue, Charset defaultCharset)": {
                "lineStart": 204,
                "lineEnd": 221
            },
            "io.netty.handler.codec.http.HttpUtil.getCharsetAsString(HttpMessage message)": {
                "lineStart": 223,
                "lineEnd": 225
            },
            "io.netty.handler.codec.http.HttpUtil.getCharsetAsSequence(HttpMessage message)": {
                "lineStart": 227,
                "lineEnd": 236
            },
            "io.netty.handler.codec.http.HttpUtil.getCharsetAsSequence(CharSequence contentTypeValue)": {
                "lineStart": 238,
                "lineEnd": 257
            },
            "io.netty.handler.codec.http.HttpUtil.getMimeType(HttpMessage message)": {
                "lineStart": 259,
                "lineEnd": 268
            },
            "io.netty.handler.codec.http.HttpUtil.getMimeType(CharSequence contentTypeValue)": {
                "lineStart": 270,
                "lineEnd": 280
            },
            "io.netty.handler.codec.http.HttpUtil.formatHostnameForHttp(InetSocketAddress addr)": {
                "lineStart": 282,
                "lineEnd": 293
            }
        },
        "1bbaf632b5-DefaultHttp2ConnectionDecoder.java": {
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf data, int padding, boolean endOfStream)": {
                "lineStart": 141,
                "lineEnd": 207
            },
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.<init>(Http2Connection connection, Http2ConnectionEncoder encoder, Http2FrameReader frameReader, Http2PromisedRequestVerifier requestVerifier, boolean autoAckSettings, boolean autoAckPing)": {
                "lineStart": 46,
                "lineEnd": 68
            },
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers headers, int streamDependency, short weight, boolean exclusive, int padding, boolean endOfStream)": {
                "lineStart": 213,
                "lineEnd": 255
            }
        }
    },
    "CVE-2022-0672": {
        "412f3c92-CacheResourcesManager.java": {
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.<init>(Cache<String, CacheResourceDownloadedException> cache)": {
                "lineStart": 73,
                "lineEnd": 79
            },
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.downloadResource(final String resourceURI, Path resourceCachePath)": {
                "lineStart": 118,
                "lineEnd": 173
            },
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.addProtocolForCahe(String protocol)": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.removeProtocolForCahe(String protocol)": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.isUseCacheFor(String url)": {
                "lineStart": 253,
                "lineEnd": 266
            },
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.addDefaultProtocolsForCache()": {
                "lineStart": 268,
                "lineEnd": 272
            }
        },
        "4d04f8ae-InvalidURIException.java": {
            "org.eclipse.lemminx.uriresolver.InvalidURIException.<init>(String resourceURI, InvalidURIError errorCode)": {
                "lineStart": 25,
                "lineEnd": 28
            }
        }
    },
    "CVE-2020-2252": {
        "d39ac96-Mailer.java": {
            "hudson.tasks.Mailer$DescriptorImpl.createSession(String smtpHost, String smtpPort, boolean useSsl, boolean useTls, String smtpAuthUserName, Secret smtpAuthPassword)": {
                "lineStart": 188,
                "lineEnd": 228
            }
        }
    },
    "CVE-2022-1466": {
        "8769a07f30-KeycloakProcessor.java": {
            "org.keycloak.quarkus.deployment.KeycloakProcessor.configureHibernate(HibernateOrmConfig config, List<PersistenceXmlDescriptorBuildItem> descriptors, List<JdbcDataSourceBuildItem> jdbcDataSources, BuildProducer<AdditionalJpaModelBuildItem> additionalJpaModel, CombinedIndexBuildItem indexBuildItem)": {
                "lineStart": 145,
                "lineEnd": 150
            },
            "org.keycloak.quarkus.deployment.KeycloakProcessor.configureProviders(KeycloakRecorder recorder)": {
                "lineStart": 182,
                "lineEnd": 201
            }
        },
        "c9bc8dd017-KeycloakRecorder.java": {
            "org.keycloak.quarkus.runtime.KeycloakRecorder.configureLiquibase(Map<String, List<String>> services)": {
                "lineStart": 25,
                "lineEnd": 30
            },
            "org.keycloak.quarkus.runtime.KeycloakRecorder.configSessionFactory(Map<Spi, Map<Class<? extends Provider>, Map<String, Class<? extends ProviderFactory>>>> factories, Map<Class<? extends Provider>, String> defaultProviders, Map<String, ProviderFactory> preConfiguredProviders, Boolean reaugmented)": {
                "lineStart": 32,
                "lineEnd": 35
            },
            "org.keycloak.quarkus.runtime.KeycloakRecorder.createCacheInitializer(String config, ShutdownContext shutdownContext)": {
                "lineStart": 37,
                "lineEnd": 58
            },
            "org.keycloak.quarkus.runtime.KeycloakRecorder.registerShutdownHook(ShutdownContext shutdownContext)": {
                "lineStart": 60,
                "lineEnd": 69
            },
            "org.keycloak.quarkus.runtime.KeycloakRecorder.createMetricsHandler(String path)": {
                "lineStart": 71,
                "lineEnd": 75
            }
        },
        "2fe9e119c1-QuarkusKeycloakApplication.java": {
            "org.keycloak.quarkus.runtime.integration.jaxrs.QuarkusKeycloakApplication.startup()": {
                "lineStart": 28,
                "lineEnd": 33
            },
            "org.keycloak.quarkus.runtime.integration.jaxrs.QuarkusKeycloakApplication.forceEntityManagerInitialization()": {
                "lineStart": 48,
                "lineEnd": 50
            }
        },
        "32115025ce-QuarkusJpaConnectionProviderFactory.java": {
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.create(KeycloakSession session)": {
                "lineStart": 65,
                "lineEnd": 68
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.close()": {
                "lineStart": 70,
                "lineEnd": 75
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.init(Config.Scope config)": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.addSpecificNamedQueries(KeycloakSession session, Connection connection)": {
                "lineStart": 85,
                "lineEnd": 101
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.postInit(KeycloakSessionFactory factory)": {
                "lineStart": 103,
                "lineEnd": 133
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.getConnection()": {
                "lineStart": 135,
                "lineEnd": 144
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.getSchema()": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.createMasterRealm(ExportImportManager exportImportManager)": {
                "lineStart": 198,
                "lineEnd": 255
            },
            "org.keycloak.quarkus.runtime.storage.database.jpa.QuarkusJpaConnectionProviderFactory.createEntityManager(KeycloakSession session)": {
                "lineStart": 506,
                "lineEnd": 508
            }
        }
    },
    "CVE-2022-25312": {
        "b2ef8d48-XSLTStylesheet.java": {
            "org.apache.any23.extractor.rdfa.XSLTStylesheet.<init>(InputStream xsltFile)": {
                "lineStart": 19,
                "lineEnd": 27
            }
        }
    },
    "CVE-2022-39944": {
        "a62166058-ConnectionManager.java": {
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.buildDataSource(String dbUrl, Map<String, String> properties)": {
                "lineStart": 94,
                "lineEnd": 157
            },
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.getJdbcUrl(Map<String, String> properties)": {
                "lineStart": 228,
                "lineEnd": 237
            },
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.clearJDBCUrl(String url)": {
                "lineStart": 239,
                "lineEnd": 246
            },
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.validateJDBCUrl(String url)": {
                "lineStart": 248,
                "lineEnd": 257
            }
        }
    },
    "CVE-2022-28143": {
        "3ef6a30-Datacenter.java": {
            "org.jenkinsci.plugins.proxmox.Datacenter.<init>(String hostname, String username, String realm, Secret password, Boolean ignoreSSL)": {
                "lineStart": 32,
                "lineEnd": 40
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.provision(Label label, int excessWorkload)": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.canProvision(Label label)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getHostname()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getUsername()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getRealm()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getPassword()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getIgnoreSSL()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getDatacenterDescription()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getDescriptor()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.proxmoxInstance()": {
                "lineStart": 78,
                "lineEnd": 84
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getNodes()": {
                "lineStart": 86,
                "lineEnd": 95
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getQemuMachines(String node)": {
                "lineStart": 97,
                "lineEnd": 110
            },
            "org.jenkinsci.plugins.proxmox.Datacenter.getQemuMachineSnapshots(String node, Integer vmid)": {
                "lineStart": 112,
                "lineEnd": 125
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.getDisplayName()": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.configure(StaplerRequest req, JSONObject o)": {
                "lineStart": 132,
                "lineEnd": 135
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.fieldNotSpecifiedError(String fieldName)": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.emptyStringValidation(String fieldName, String value)": {
                "lineStart": 141,
                "lineEnd": 144
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckHostname(@QueryParameter String value)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckUsername(@QueryParameter String value)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckRealm(@QueryParameter String value)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doCheckPassword(@QueryParameter Secret value)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "org.jenkinsci.plugins.proxmox.Datacenter$DescriptorImpl.doTestConnection(@QueryParameter String hostname, @QueryParameter String username, @QueryParameter String realm, @QueryParameter Secret password, @QueryParameter Boolean ignoreSSL)": {
                "lineStart": 162,
                "lineEnd": 190
            }
        },
        "6e469aa-VirtualMachineSlave.java": {
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doFillDatacenterNodeItems(@QueryParameter(\"datacenterDescription\") String datacenterDescription)": {
                "lineStart": 114,
                "lineEnd": 126
            },
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doFillVirtualMachineIdItems(@QueryParameter(\"datacenterDescription\") String datacenterDescription, @QueryParameter(\"datacenterNode\") String datacenterNode)": {
                "lineStart": 128,
                "lineEnd": 141
            },
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doFillSnapshotNameItems(@QueryParameter(\"datacenterDescription\") String datacenterDescription, @QueryParameter(\"datacenterNode\") String datacenterNode, @QueryParameter(\"virtualMachineId\") String virtualMachineId)": {
                "lineStart": 143,
                "lineEnd": 155
            },
            "org.jenkinsci.plugins.proxmox.VirtualMachineSlave$DescriptorImpl.doTestRollback(@QueryParameter String datacenterDescription, @QueryParameter String datacenterNode, @QueryParameter Integer virtualMachineId, @QueryParameter String snapshotName)": {
                "lineStart": 181,
                "lineEnd": 195
            }
        }
    },
    "CVE-2023-31454": {
        "c1b06627a-InlongClusterServiceImpl.java": {
            "org.apache.inlong.manager.service.cluster.InlongClusterServiceImpl.bindTag(BindTagRequest request, String operator)": {
                "lineStart": 551,
                "lineEnd": 588
            },
            "org.apache.inlong.manager.service.cluster.InlongClusterServiceImpl.bindTag(BindTagRequest request, UserInfo opInfo)": {
                "lineStart": 590,
                "lineEnd": 629
            }
        }
    },
    "CVE-2023-29055": {
        "a01f545fd2-KylinConfig.java": {
            "org.apache.kylin.common.KylinConfig.exportAllToString()": {
                "lineStart": 472,
                "lineEnd": 499
            }
        }
    },
    "CVE-2023-26513": {
        "5e03120-MergingResourceProvider.java": {
            "org.apache.sling.resourcemerger.impl.MergingResourceProvider.getRelativePath(String path)": {
                "lineStart": 112,
                "lineEnd": 125
            }
        }
    },
    "CVE-2024-34447": {
        "fe2d7138c-ProvSSLSocketDirect.java": {
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect.setHost(String host)": {
                "lineStart": 262,
                "lineEnd": 265
            },
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect.notifyConnected()": {
                "lineStart": 397,
                "lineEnd": 424
            }
        },
        "b31f21528-ProvSSLSocketWrap.java": {
            "org.bouncycastle.jsse.provider.ProvSSLSocketWrap.setHost(String host)": {
                "lineStart": 348,
                "lineEnd": 351
            },
            "org.bouncycastle.jsse.provider.ProvSSLSocketWrap.notifyConnected()": {
                "lineStart": 527,
                "lineEnd": 554
            }
        },
        "63a7db5a0-URLConnectionUtil.java": {
            "org.bouncycastle.jsse.util.URLConnectionUtil.createSSLSocketFactory(SSLSocketFactory delegate, URL url)": {
                "lineStart": 50,
                "lineEnd": 52
            }
        }
    },
    "CVE-2023-43501": {
        "e76950d-AnnotationHelper.java": {
            "com.sonyericsson.jenkins.plugins.bfa.AnnotationHelper.getBefore()": {
                "lineStart": 7,
                "lineEnd": 15
            }
        },
        "b3bf970-CauseManagement.java": {
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIconFileName()": {
                "lineStart": 34,
                "lineEnd": 42
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDisplayName()": {
                "lineStart": 44,
                "lineEnd": 55
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getUrlName()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getImageUrl(String size, String name)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getShallowCauses()": {
                "lineStart": 65,
                "lineEnd": 77
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.setErrorMessage(String message)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isError(StaplerRequest request)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getErrorMessage(StaplerRequest request)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDynamic(String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 91,
                "lineEnd": 99
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 101,
                "lineEnd": 119
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwner()": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwnerUrl()": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIndicationDescriptors()": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getPermission()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getRemovePermission()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isUnderTest()": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getInstance()": {
                "lineStart": 145,
                "lineEnd": 154
            }
        },
        "5b1e514-MongoDBKnowledgeBase.java": {
            "com.sonyericsson.jenkins.plugins.bfa.db.MongoDBKnowledgeBase$MongoDBKnowledgeBaseDescriptor.doTestConnection(@QueryParameter(\"host\") final String host, @QueryParameter(\"port\") final int port, @QueryParameter(\"dbName\") final String dbName, @QueryParameter(\"userName\") final String userName, @QueryParameter(\"password\") final String password, @QueryParameter(\"tls\") final boolean tls, @QueryParameter(\"retrywrites\") final boolean retryWrites)": {
                "lineStart": 623,
                "lineEnd": 639
            }
        }
    },
    "CVE-2023-49250": {
        "b9a7653063-HttpUtils.java": {
            "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": {
                "lineStart": 85,
                "lineEnd": 89
            },
            "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpget, CloseableHttpClient httpClient)": {
                "lineStart": 91,
                "lineEnd": 139
            }
        }
    },
    "CVE-2024-25420": {
        "6782b6db0-AdminManager.java": {
            "org.jivesoftware.openfire.admin.AdminManager.<init>()": {
                "lineStart": 26,
                "lineEnd": 28
            }
        }
    },
    "CVE-2021-25640": {
        "8820f12cc2-InternalThreadLocal.java": {
            "org.apache.dubbo.common.threadlocal.InternalThreadLocal.removeAll()": {
                "lineStart": 12,
                "lineEnd": 34
            }
        },
        "8f16036ee5-CollectionUtils.java": {
            "org.apache.dubbo.common.utils.CollectionUtils.<init>()": {
                "lineStart": 43,
                "lineEnd": 44
            },
            "org.apache.dubbo.common.utils.CollectionUtils.sort(List<T> list)": {
                "lineStart": 46,
                "lineEnd": 53
            },
            "org.apache.dubbo.common.utils.CollectionUtils.sortSimpleName(List<String> list)": {
                "lineStart": 55,
                "lineEnd": 61
            },
            "org.apache.dubbo.common.utils.CollectionUtils.splitAll(Map<String, List<String>> list, String separator)": {
                "lineStart": 63,
                "lineEnd": 74
            },
            "org.apache.dubbo.common.utils.CollectionUtils.joinAll(Map<String, Map<String, String>> map, String separator)": {
                "lineStart": 76,
                "lineEnd": 87
            },
            "org.apache.dubbo.common.utils.CollectionUtils.split(List<String> list, String separator)": {
                "lineStart": 89,
                "lineEnd": 111
            },
            "org.apache.dubbo.common.utils.CollectionUtils.join(Map<String, String> map, String separator)": {
                "lineStart": 113,
                "lineEnd": 136
            },
            "org.apache.dubbo.common.utils.CollectionUtils.join(List<String> list, String separator)": {
                "lineStart": 138,
                "lineEnd": 149
            },
            "org.apache.dubbo.common.utils.CollectionUtils.mapEquals(Map<?, ?> map1, Map<?, ?> map2)": {
                "lineStart": 151,
                "lineEnd": 175
            },
            "org.apache.dubbo.common.utils.CollectionUtils.objectEquals(Object obj1, Object obj2)": {
                "lineStart": 177,
                "lineEnd": 187
            },
            "org.apache.dubbo.common.utils.CollectionUtils.toStringMap(String... pairs)": {
                "lineStart": 189,
                "lineEnd": 207
            },
            "org.apache.dubbo.common.utils.CollectionUtils.toMap(Object... pairs)": {
                "lineStart": 209,
                "lineEnd": 225
            },
            "org.apache.dubbo.common.utils.CollectionUtils.isEmpty(Collection<?> collection)": {
                "lineStart": 227,
                "lineEnd": 229
            },
            "org.apache.dubbo.common.utils.CollectionUtils.isNotEmpty(Collection<?> collection)": {
                "lineStart": 231,
                "lineEnd": 233
            },
            "org.apache.dubbo.common.utils.CollectionUtils.isEmptyMap(Map map)": {
                "lineStart": 235,
                "lineEnd": 237
            },
            "org.apache.dubbo.common.utils.CollectionUtils.isNotEmptyMap(Map map)": {
                "lineStart": 239,
                "lineEnd": 241
            },
            "org.apache.dubbo.common.utils.CollectionUtils.ofSet(T... values)": {
                "lineStart": 243,
                "lineEnd": 260
            },
            "org.apache.dubbo.common.utils.CollectionUtils.size(Collection<?> collection)": {
                "lineStart": 262,
                "lineEnd": 264
            },
            "org.apache.dubbo.common.utils.CollectionUtils.equals(Collection<?> one, Collection<?> another)": {
                "lineStart": 266,
                "lineEnd": 286
            },
            "org.apache.dubbo.common.utils.CollectionUtils.addAll(Collection<T> collection, T... values)": {
                "lineStart": 288,
                "lineEnd": 303
            },
            "org.apache.dubbo.common.utils.CollectionUtils.first(Collection<T> values)": {
                "lineStart": 305,
                "lineEnd": 318
            }
        },
        "d45ada1fe5-UrlUtils.java": {
            "org.apache.dubbo.common.utils.UrlUtils.convertRegister(Map<String, Map<String, String>> register)": {
                "lineStart": 174,
                "lineEnd": 212
            },
            "org.apache.dubbo.common.utils.UrlUtils.revertRegister(Map<String, Map<String, String>> register)": {
                "lineStart": 243,
                "lineEnd": 283
            },
            "org.apache.dubbo.common.utils.UrlUtils.revertNotify(Map<String, Map<String, String>> notify)": {
                "lineStart": 316,
                "lineEnd": 361
            }
        }
    },
    "CVE-2022-29599": {
        "02586af-BourneShell.java": {
            "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": {
                "lineStart": 9,
                "lineEnd": 16
            },
            "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": {
                "lineStart": 18,
                "lineEnd": 24
            },
            "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": {
                "lineStart": 53,
                "lineEnd": 64
            },
            "org.apache.maven.shared.utils.cli.shell.BourneShell.getQuotingTriggerChars()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "org.apache.maven.shared.utils.cli.shell.BourneShell.unifyQuotes(String path)": {
                "lineStart": 70,
                "lineEnd": 80
            }
        },
        "d257304-Shell.java": {
            "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": {
                "lineStart": 44,
                "lineEnd": 82
            },
            "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": {
                "lineStart": 139,
                "lineEnd": 151
            }
        }
    },
    "CVE-2022-36364": {
        "420da0e63-AvaticaHttpClientFactoryImpl.java": {
            "org.apache.calcite.avatica.remote.AvaticaHttpClientFactoryImpl.instantiateClient(String className, URL url)": {
                "lineStart": 102,
                "lineEnd": 113
            }
        }
    },
    "CVE-2020-15232": {
        "fc27e2a51-SLDParserPlugin.java": {
            "org.mapfish.print.map.style.SLDParserPlugin.tryLoadSLD(final byte[] bytes, final Integer styleIndex, final ClientHttpRequestFactory clientHttpRequestFactory)": {
                "lineStart": 60,
                "lineEnd": 119
            }
        }
    },
    "CVE-2023-33948": {
        "2d7eff5468129-DocumentLibraryDDMFormFieldTemplateContextContributor.java": {
            "com.liferay.dynamic.data.mapping.form.field.type.internal.document.library.DocumentLibraryDDMFormFieldTemplateContextContributor.getParameters(DDMFormField ddmFormField, DDMFormFieldRenderingContext ddmFormFieldRenderingContext)": {
                "lineStart": 75,
                "lineEnd": 85
            },
            "com.liferay.dynamic.data.mapping.form.field.type.internal.document.library.DocumentLibraryDDMFormFieldTemplateContextContributor._getFileEntryParameters(HttpServletRequest httpServletRequest, String value)": {
                "lineStart": 249,
                "lineEnd": 269
            }
        },
        "d44dc2866376a-DDMFormFieldTemplateContextFactory.java": {
            "com.liferay.dynamic.data.mapping.form.renderer.internal.DDMFormFieldTemplateContextFactory._createDDDMFormFieldRenderingContext(Map<String, Object> changedProperties, Map<String, Object> ddmFormFieldTemplateContext)": {
                "lineStart": 90,
                "lineEnd": 103
            }
        },
        "91688746e2c20-DDMFormViewFormInstanceRecordDisplayContext.java": {
            "com.liferay.dynamic.data.mapping.form.web.internal.display.context.DDMFormViewFormInstanceRecordDisplayContext.getDDMFormContext(RenderRequest renderRequest, boolean readOnly)": {
                "lineStart": 48,
                "lineEnd": 67
            },
            "com.liferay.dynamic.data.mapping.form.web.internal.display.context.DDMFormViewFormInstanceRecordDisplayContext._createDDMFormRenderingContext(DDMForm ddmForm, DDMFormValues ddmFormValues, boolean readOnly)": {
                "lineStart": 69,
                "lineEnd": 99
            }
        },
        "eeadfe8bc55d8-DownloadFileEntryMVCResourceCommand.java": {
            "com.liferay.dynamic.data.mapping.form.web.internal.portlet.action.DownloadFileEntryMVCResourceCommand.doServeResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)": {
                "lineStart": 16,
                "lineEnd": 19
            }
        }
    },
    "CVE-2022-43411": {
        "e39ef5c-BuildWebHookAction.java": {
            "com.dabsquared.gitlabjenkins.webhook.build.BuildWebHookAction$TriggerNotifier.<init>(Item project, String secretToken, Authentication authentication)": {
                "lineStart": 28,
                "lineEnd": 32
            },
            "com.dabsquared.gitlabjenkins.webhook.build.BuildWebHookAction$TriggerNotifier.run()": {
                "lineStart": 34,
                "lineEnd": 47
            }
        }
    },
    "CVE-2020-11612": {
        "f87344ab59-JZlibDecoder.java": {
            "io.netty.handler.codec.compression.JZlibDecoder.<init>()": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "io.netty.handler.codec.compression.JZlibDecoder.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)": {
                "lineStart": 39,
                "lineEnd": 127
            },
            "io.netty.handler.codec.compression.JZlibDecoder.<init>(ZlibWrapper wrapper)": {
                "lineStart": 16,
                "lineEnd": 23
            },
            "io.netty.handler.codec.compression.JZlibDecoder.<init>(byte[] dictionary)": {
                "lineStart": 25,
                "lineEnd": 33
            }
        },
        "776d1e7816-JdkZlibDecoder.java": {
            "io.netty.handler.codec.compression.JdkZlibDecoder.<init>()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(byte[] dictionary)": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(ZlibWrapper wrapper)": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(ZlibWrapper wrapper, boolean decompressConcatenated)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(boolean decompressConcatenated)": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "io.netty.handler.codec.compression.JdkZlibDecoder.<init>(ZlibWrapper wrapper, byte[] dictionary, boolean decompressConcatenated)": {
                "lineStart": 47,
                "lineEnd": 71
            },
            "io.netty.handler.codec.compression.JdkZlibDecoder.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)": {
                "lineStart": 77,
                "lineEnd": 198
            }
        },
        "d01bc6b4de-ZlibDecoder.java": {
            "io.netty.handler.codec.compression.ZlibDecoder.isClosed()": {
                "lineStart": 5,
                "lineEnd": 5
            }
        }
    },
    "CVE-2022-24827": {
        "b36ab9215-ValueType.java": {
            "com.yahoo.elide.datastores.aggregation.metadata.enums.ValueType.<init>(String regexRestriction)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "com.yahoo.elide.datastores.aggregation.metadata.enums.ValueType.matches(String input)": {
                "lineStart": 22,
                "lineEnd": 35
            },
            "com.yahoo.elide.datastores.aggregation.metadata.enums.ValueType.getScalarType(Type<?> fieldClass)": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "com.yahoo.elide.datastores.aggregation.metadata.enums.ValueType.getType(ValueType valueType)": {
                "lineStart": 42,
                "lineEnd": 61
            }
        }
    },
    "CVE-2023-51770": {
        "997b9c2567-MySQLDataSourceProcessor.java": {
            "org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceProcessor.getJdbcUrl(ConnectionParam connectionParam)": {
                "lineStart": 75,
                "lineEnd": 83
            },
            "org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceProcessor.getConnection(ConnectionParam connectionParam)": {
                "lineStart": 85,
                "lineEnd": 101
            },
            "org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceProcessor.getDbType()": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceProcessor.create()": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceProcessor.splitAndRemoveComment(String sql)": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceProcessor.transformOther(Map<String, String> paramMap)": {
                "lineStart": 115,
                "lineEnd": 137
            }
        }
    },
    "CVE-2022-46683": {
        "104d561-GoogleOAuth2SecurityRealm.java": {
            "org.jenkinsci.plugins.googlelogin.GoogleOAuth2SecurityRealm.doCommenceLogin(StaplerRequest request, @QueryParameter String from, @Header(\"Referer\") final String referer)": {
                "lineStart": 103,
                "lineEnd": 158
            }
        }
    },
    "CVE-2023-38992": {
        "72b426d1-SysDictController.java": {
            "org.jeecg.modules.system.controller.SysDictController.loadTreeData(@RequestParam(name = \"pid\", required = false) String pid, @RequestParam(name = \"pidField\") String pidField, @RequestParam(name = \"tableName\") String tbname, @RequestParam(name = \"text\") String text, @RequestParam(name = \"code\") String code, @RequestParam(name = \"hasChildField\") String hasChildField, @RequestParam(name = \"converIsLeafVal\", defaultValue = \"1\") int converIsLeafVal, @RequestParam(name = \"condition\") String condition, @RequestParam(value = \"sign\", required = false) String sign, HttpServletRequest request)": {
                "lineStart": 246,
                "lineEnd": 260
            }
        }
    },
    "CVE-2023-46242": {
        "09e61111bf4-EditAction.java": {
            "com.xpn.xwiki.web.EditAction.prepareEditedDocument(XWikiContext context)": {
                "lineStart": 50,
                "lineEnd": 76
            }
        }
    },
    "CVE-2022-43413": {
        "9fd8880-JobImportAction.java": {
            "org.jenkins.ci.plugins.jobimport.JobImportAction$JobImportActionDescriptor.doFillCredentialIdItems()": {
                "lineStart": 248,
                "lineEnd": 250
            },
            "org.jenkins.ci.plugins.jobimport.JobImportAction$JobImportActionDescriptor.doFillJenkinsSitesItems()": {
                "lineStart": 252,
                "lineEnd": 256
            }
        }
    },
    "CVE-2024-1735": {
        "4fe3caf6b-HttpRedirectBindingUtil.java": {
            "com.linecorp.armeria.server.saml.HttpRedirectBindingUtil.validateSignature(Credential validationCredential, SamlParameters parameters, String messageParamName)": {
                "lineStart": 73,
                "lineEnd": 102
            },
            "com.linecorp.armeria.server.saml.HttpRedirectBindingUtil.toSamlObject(AggregatedHttpRequest req, String name, Map<String, SamlIdentityProviderConfig> idpConfigs, @Nullable SamlIdentityProviderConfig defaultIdpConfig)": {
                "lineStart": 158,
                "lineEnd": 204
            }
        },
        "f9919d039-SamlAssertionConsumerFunction.java": {
            "com.linecorp.armeria.server.saml.SamlAssertionConsumerFunction.<init>(SamlAssertionConsumerConfig cfg, String entityId, Map<String, SamlIdentityProviderConfig> idpConfigs, @Nullable SamlIdentityProviderConfig defaultIdpConfig, SamlRequestIdManager requestIdManager, SamlSingleSignOnHandler ssoHandler)": {
                "lineStart": 42,
                "lineEnd": 49
            },
            "com.linecorp.armeria.server.saml.SamlAssertionConsumerFunction.serve(ServiceRequestContext ctx, AggregatedHttpRequest req, String defaultHostname, SamlPortConfig portConfig)": {
                "lineStart": 51,
                "lineEnd": 73
            },
            "com.linecorp.armeria.server.saml.SamlAssertionConsumerFunction.getValidatedAssertion(Response response, String endpointUri)": {
                "lineStart": 88,
                "lineEnd": 194
            }
        },
        "f787c7c32-SamlMessageUtil.java": {
            "com.linecorp.armeria.server.saml.SamlMessageUtil.validateSignature(Credential validationCredential, SignableSAMLObject signableObj)": {
                "lineStart": 117,
                "lineEnd": 137
            }
        },
        "32ac13662-SamlService.java": {
            "com.linecorp.armeria.server.saml.SamlService.<init>(SamlServiceProvider sp)": {
                "lineStart": 41,
                "lineEnd": 54
            }
        },
        "5b382f8c0-SamlServiceProvider.java": {
            "com.linecorp.armeria.server.saml.SamlServiceProvider.<init>(Authorizer<HttpRequest> authorizer, String entityId, @Nullable String hostname, Credential signingCredential, Credential encryptionCredential, String signatureAlgorithm, SamlPortConfigAutoFiller portConfigAutoFiller, String metadataPath, Map<String, SamlIdentityProviderConfig> idpConfigs, @Nullable SamlIdentityProviderConfig defaultIdpConfig, SamlIdentityProviderConfigSelector idpConfigSelector, Collection<SamlAssertionConsumerConfig> acsConfigs, Collection<SamlEndpoint> sloEndpoints, SamlRequestIdManager requestIdManager, SamlSingleSignOnHandler ssoHandler, SamlSingleLogoutHandler sloHandler)": {
                "lineStart": 40,
                "lineEnd": 58
            }
        },
        "d3f03a4ca-SamlServiceProviderBuilder.java": {
            "com.linecorp.armeria.server.saml.SamlServiceProviderBuilder.build()": {
                "lineStart": 193,
                "lineEnd": 290
            }
        },
        "7756859ec-SamlSingleLogoutFunction.java": {
            "com.linecorp.armeria.server.saml.SamlSingleLogoutFunction.<init>(SamlEndpoint endpoint, String entityId, Credential signingCredential, String signatureAlgorithm, Map<String, SamlIdentityProviderConfig> idpConfigs, @Nullable SamlIdentityProviderConfig defaultIdpConfig, SamlRequestIdManager requestIdManager, SamlSingleLogoutHandler sloHandler)": {
                "lineStart": 38,
                "lineEnd": 47
            },
            "com.linecorp.armeria.server.saml.SamlSingleLogoutFunction.serve(ServiceRequestContext ctx, AggregatedHttpRequest req, String defaultHostname, SamlPortConfig portConfig)": {
                "lineStart": 49,
                "lineEnd": 87
            },
            "com.linecorp.armeria.server.saml.SamlSingleLogoutFunction.fail(ServiceRequestContext ctx, Throwable cause)": {
                "lineStart": 89,
                "lineEnd": 92
            }
        }
    },
    "CVE-2023-33944": {
        "0aa693b29178c-RenderLayoutStructureTag.java": {
            "com.liferay.layout.taglib.servlet.taglib.RenderLayoutStructureTag._renderContainerStyledLayoutStructureItem(InfoForm infoForm, ContainerStyledLayoutStructureItem containerStyledLayoutStructureItem, RenderLayoutStructureDisplayContext renderLayoutStructureDisplayContext)": {
                "lineStart": 359,
                "lineEnd": 441
            }
        }
    },
    "CVE-2023-50572": {
        "e274102d-DefaultPrinter.java": {
            "org.jline.console.impl.DefaultPrinter.internalPrintln(Map<String, Object> options, Object object)": {
                "lineStart": 267,
                "lineEnd": 325
            },
            "org.jline.console.impl.DefaultPrinter.highlightAndPrint(int width, SyntaxHighlighter highlighter, String object, boolean doValueHighlight)": {
                "lineStart": 434,
                "lineEnd": 444
            },
            "org.jline.console.impl.DefaultPrinter.highlightAndPrint(Map<String, Object> options, Object obj)": {
                "lineStart": 755,
                "lineEnd": 1023
            }
        }
    },
    "CVE-2022-46688": {
        "e257e52-GerritAuthenticationConfig.java": {
            "org.jenkinsci.plugins.sonargerrit.gerrit.GerritAuthenticationConfig$DescriptorImpl.doTestConnection(@AncestorInPath Item item, @QueryParameter(\"httpCredentialsId\") final String httpCredentialsId, @QueryParameter(\"serverName\") final String serverName)": {
                "lineStart": 82,
                "lineEnd": 109
            }
        }
    },
    "CVE-2020-13929": {
        "1444025d7-AuthenticationInfo.java": {
            "org.apache.zeppelin.user.AuthenticationInfo.<init>(String user, String roles, String ticket)": {
                "lineStart": 22,
                "lineEnd": 26
            },
            "org.apache.zeppelin.user.AuthenticationInfo.getRoles()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.apache.zeppelin.user.AuthenticationInfo.setRoles(List<String> roles)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "org.apache.zeppelin.user.AuthenticationInfo.setRoles(String roles)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "org.apache.zeppelin.user.AuthenticationInfo.toJson()": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "org.apache.zeppelin.user.AuthenticationInfo.fromJson(String json)": {
                "lineStart": 94,
                "lineEnd": 96
            }
        },
        "a887e304c-LoginRestApi.java": {
            "org.apache.zeppelin.rest.LoginRestApi.proceedToLogin(Subject currentUser, AuthenticationToken token)": {
                "lineStart": 173,
                "lineEnd": 194
            }
        },
        "11b0cf93f-NotebookRestApi.java": {
            "org.apache.zeppelin.rest.NotebookRestApi.runNoteJobs(@PathParam(\"noteId\") String noteId, @QueryParam(\"blocking\") Boolean blocking, @QueryParam(\"isolated\") Boolean isolated, String message)": {
                "lineStart": 440,
                "lineEnd": 463
            }
        },
        "9d5a6fe30-SecurityRestApi.java": {
            "org.apache.zeppelin.rest.SecurityRestApi.ticket()": {
                "lineStart": 31,
                "lineEnd": 49
            }
        },
        "146e8e993-NotebookServer.java": {
            "org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookSocket conn, String msg)": {
                "lineStart": 194,
                "lineEnd": 410
            },
            "org.apache.zeppelin.socket.NotebookServer.unicastNoteJobInfo(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 431,
                "lineEnd": 449
            },
            "org.apache.zeppelin.socket.NotebookServer.getInterpreterBindings(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 475,
                "lineEnd": 489
            },
            "org.apache.zeppelin.socket.NotebookServer.saveInterpreterBindings(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 491,
                "lineEnd": 511
            },
            "org.apache.zeppelin.socket.NotebookServer.listNotesInfo(NotebookSocket conn, Message message)": {
                "lineStart": 704,
                "lineEnd": 714
            },
            "org.apache.zeppelin.socket.NotebookServer.getNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 736,
                "lineEnd": 753
            },
            "org.apache.zeppelin.socket.NotebookServer.getHomeNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 782,
                "lineEnd": 801
            },
            "org.apache.zeppelin.socket.NotebookServer.updateNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 803,
                "lineEnd": 824
            },
            "org.apache.zeppelin.socket.NotebookServer.updatePersonalizedMode(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 826,
                "lineEnd": 839
            },
            "org.apache.zeppelin.socket.NotebookServer.renameNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 841,
                "lineEnd": 863
            },
            "org.apache.zeppelin.socket.NotebookServer.renameFolder(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 865,
                "lineEnd": 877
            },
            "org.apache.zeppelin.socket.NotebookServer.createNote(NotebookSocket conn, Message message)": {
                "lineStart": 879,
                "lineEnd": 898
            },
            "org.apache.zeppelin.socket.NotebookServer.deleteNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 900,
                "lineEnd": 912
            },
            "org.apache.zeppelin.socket.NotebookServer.removeFolder(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 914,
                "lineEnd": 930
            },
            "org.apache.zeppelin.socket.NotebookServer.moveNoteToTrash(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 932,
                "lineEnd": 944
            },
            "org.apache.zeppelin.socket.NotebookServer.moveFolderToTrash(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 946,
                "lineEnd": 957
            },
            "org.apache.zeppelin.socket.NotebookServer.restoreNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 959,
                "lineEnd": 971
            },
            "org.apache.zeppelin.socket.NotebookServer.restoreFolder(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 973,
                "lineEnd": 985
            },
            "org.apache.zeppelin.socket.NotebookServer.restoreAll(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 987,
                "lineEnd": 997
            },
            "org.apache.zeppelin.socket.NotebookServer.emptyTrash(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 999,
                "lineEnd": 1009
            },
            "org.apache.zeppelin.socket.NotebookServer.updateParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1011,
                "lineEnd": 1038
            },
            "org.apache.zeppelin.socket.NotebookServer.patchParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1040,
                "lineEnd": 1075
            },
            "org.apache.zeppelin.socket.NotebookServer.cloneNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1077,
                "lineEnd": 1091
            },
            "org.apache.zeppelin.socket.NotebookServer.clearAllParagraphOutput(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1093,
                "lineEnd": 1104
            },
            "org.apache.zeppelin.socket.NotebookServer.importNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1119,
                "lineEnd": 1145
            },
            "org.apache.zeppelin.socket.NotebookServer.removeParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1147,
                "lineEnd": 1159
            },
            "org.apache.zeppelin.socket.NotebookServer.clearParagraphOutput(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1161,
                "lineEnd": 1179
            },
            "org.apache.zeppelin.socket.NotebookServer.completion(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1181,
                "lineEnd": 1204
            },
            "org.apache.zeppelin.socket.NotebookServer.angularObjectUpdated(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1206,
                "lineEnd": 1224
            },
            "org.apache.zeppelin.socket.NotebookServer.moveParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1284,
                "lineEnd": 1297
            },
            "org.apache.zeppelin.socket.NotebookServer.insertParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1299,
                "lineEnd": 1320
            },
            "org.apache.zeppelin.socket.NotebookServer.copyParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1322,
                "lineEnd": 1330
            },
            "org.apache.zeppelin.socket.NotebookServer.cancelParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1332,
                "lineEnd": 1336
            },
            "org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1338,
                "lineEnd": 1361
            },
            "org.apache.zeppelin.socket.NotebookServer.broadcastSpellExecution(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1363,
                "lineEnd": 1374
            },
            "org.apache.zeppelin.socket.NotebookServer.runParagraph(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1376,
                "lineEnd": 1402
            },
            "org.apache.zeppelin.socket.NotebookServer.sendAllConfigurations(NotebookSocket conn, Message message)": {
                "lineStart": 1404,
                "lineEnd": 1415
            },
            "org.apache.zeppelin.socket.NotebookServer.checkpointNote(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1417,
                "lineEnd": 1436
            },
            "org.apache.zeppelin.socket.NotebookServer.listRevisionHistory(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1438,
                "lineEnd": 1449
            },
            "org.apache.zeppelin.socket.NotebookServer.setNoteRevision(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1451,
                "lineEnd": 1465
            },
            "org.apache.zeppelin.socket.NotebookServer.getNoteByRevision(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1467,
                "lineEnd": 1479
            },
            "org.apache.zeppelin.socket.NotebookServer.getNoteByRevisionForCompare(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1481,
                "lineEnd": 1494
            },
            "org.apache.zeppelin.socket.NotebookServer.getEditorSetting(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1886,
                "lineEnd": 1906
            },
            "org.apache.zeppelin.socket.NotebookServer.getInterpreterSettings(NotebookSocket conn, Message message)": {
                "lineStart": 1908,
                "lineEnd": 1920
            },
            "org.apache.zeppelin.socket.NotebookServer.saveNoteForms(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 1989,
                "lineEnd": 2000
            },
            "org.apache.zeppelin.socket.NotebookServer.removeNoteForms(NotebookSocket conn, Message fromMessage)": {
                "lineStart": 2002,
                "lineEnd": 2013
            },
            "org.apache.zeppelin.socket.NotebookServer.getServiceContext(Message message)": {
                "lineStart": 2025,
                "lineEnd": 2038
            }
        },
        "94262a537-ZeppelinhubClient.java": {
            "org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinhubClient.forwardToZeppelin(Message.OP op, ZeppelinhubMessage hubMsg)": {
                "lineStart": 218,
                "lineEnd": 235
            },
            "org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinhubClient.runAllParagraph(String noteId, String hubMsg)": {
                "lineStart": 237,
                "lineEnd": 275
            }
        },
        "2a6458d85-WatcherWebsocket.java": {
            "org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.WatcherWebsocket.onWebSocketConnect(Session session)": {
                "lineStart": 27,
                "lineEnd": 34
            }
        },
        "8c4b170bf-TicketContainer.java": {
            "org.apache.zeppelin.ticket.TicketContainer$Entry.<init>(String ticket)": {
                "lineStart": 13,
                "lineEnd": 16
            },
            "org.apache.zeppelin.ticket.TicketContainer.getTicket(String principal)": {
                "lineStart": 30,
                "lineEnd": 48
            }
        }
    },
    "CVE-2020-2234": {
        "f655c4e-GlobalPipelineMavenConfig.java": {
            "org.jenkinsci.plugins.pipeline.maven.GlobalPipelineMavenConfig.doFillJdbcCredentialsIdItems()": {
                "lineStart": 370,
                "lineEnd": 372
            },
            "org.jenkinsci.plugins.pipeline.maven.GlobalPipelineMavenConfig.doValidateJdbcConnection(@QueryParameter String jdbcUrl, @QueryParameter String properties, @QueryParameter String jdbcCredentialsId)": {
                "lineStart": 374,
                "lineEnd": 566
            }
        },
        "e3245ce-WithMavenStep.java": {
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillMavenItems()": {
                "lineStart": 174,
                "lineEnd": 182
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillJdkItems()": {
                "lineStart": 188,
                "lineEnd": 196
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillMavenSettingsConfigItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 198,
                "lineEnd": 206
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillGlobalMavenSettingsConfigItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 208,
                "lineEnd": 216
            },
            "org.jenkinsci.plugins.pipeline.maven.WithMavenStep$DescriptorImpl.doFillPublisherStrategyItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 218,
                "lineEnd": 225
            }
        }
    },
    "CVE-2020-2244": {
        "ac12c75-BuildLogIndication.java": {
            "com.sonyericsson.jenkins.plugins.bfa.model.indication.BuildLogIndication$BuildLogIndicationDescriptor.doMatchText(@QueryParameter(\"pattern\") final String testPattern, @QueryParameter(\"testText\") String testText, @QueryParameter(\"textSourceIsUrl\") final boolean textSourceIsUrl)": {
                "lineStart": 108,
                "lineEnd": 195
            }
        }
    },
    "CVE-2021-33335": {
        "50a3f43d077cf-UserPermissionImpl.java": {
            "com.liferay.portal.service.permission.UserPermissionImpl.contains(PermissionChecker permissionChecker, long userId, long[] organizationIds, String actionId)": {
                "lineStart": 49,
                "lineEnd": 116
            }
        }
    },
    "CVE-2020-2306": {
        "c2e8c70-MercurialInstallationSCMSourceTrait.java": {
            "hudson.plugins.mercurial.traits.MercurialInstallationSCMSourceTrait$DescriptorImpl.doFillInstallationItems()": {
                "lineStart": 95,
                "lineEnd": 105
            }
        }
    },
    "CVE-2020-11987": {
        "2a93e95a4-NodePickerPanel.java": {
            "org.apache.batik.apps.svgbrowser.NodePickerPanel.parseXml(String xmlString)": {
                "lineStart": 527,
                "lineEnd": 559
            }
        }
    },
    "CVE-2023-22899": {
        "25d55cf-AesCipherInputStream.java": {
            "net.lingala.zip4j.io.inputstream.AesCipherInputStream.verifyContent(byte[] storedMac)": {
                "lineStart": 107,
                "lineEnd": 119
            }
        }
    },
    "CVE-2021-27576": {
        "939b5d1f2-InternalErrorPage.java": {
            "org.apache.openmeetings.web.pages.InternalErrorPage.onInitialize()": {
                "lineStart": 11,
                "lineEnd": 21
            },
            "org.apache.openmeetings.web.pages.InternalErrorPage.onParameterArrival(IRequestParameters requestParameters, AjaxRequestTarget target)": {
                "lineStart": 23,
                "lineEnd": 24
            }
        },
        "89d51ae8d-RateLimitRequestFilter.java": {
            "org.apache.openmeetings.webservice.util.RateLimitRequestFilter.filter(ContainerRequestContext context)": {
                "lineStart": 16,
                "lineEnd": 38
            }
        }
    },
    "CVE-2023-40338": {
        "6a711fb-FolderComputation.java": {
            "com.cloudbees.hudson.plugins.folder.computed.FolderComputation.getLogInputStream()": {
                "lineStart": 299,
                "lineEnd": 314
            }
        }
    },
    "CVE-2022-29577": {
        "dc991c4-AntiSamyDOMScanner.java": {
            "org.owasp.validator.html.scan.AntiSamyDOMScanner.processStyleTag(Element ele, Node parentNode)": {
                "lineStart": 271,
                "lineEnd": 305
            }
        }
    },
    "CVE-2021-21666": {
        "58709c4-KiuwanConnectionProfileDescriptor.java": {
            "com.kiuwan.plugins.kiuwanJenkinsPlugin.KiuwanConnectionProfileDescriptor.doCheckCredentials(@QueryParameter String username, @QueryParameter String password, @QueryParameter String domain, @QueryParameter boolean configureKiuwanURL, @QueryParameter String kiuwanURL)": {
                "lineStart": 84,
                "lineEnd": 131
            }
        }
    },
    "CVE-2020-5411": {
        "f20136f42-Jackson2ExecutionContextStringSerializer.java": {
            "org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.<init>()": {
                "lineStart": 24,
                "lineEnd": 30
            }
        }
    },
    "CVE-2024-31865": {
        "59d826d0e-ZeppelinConfiguration.java": {
            "org.apache.zeppelin.conf.ZeppelinConfiguration.isZeppelinNotebookCronEnable()": {
                "lineStart": 756,
                "lineEnd": 758
            }
        },
        "d148150e5-NotebookService.java": {
            "org.apache.zeppelin.service.NotebookService.updateNote(String noteId, String name, Map<String, Object> config, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 714,
                "lineEnd": 745
            }
        }
    },
    "CVE-2024-39458": {
        "a2987b7-DescribableModel.java": {
            "org.jenkinsci.plugins.structs.describable.DescribableModel.instantiate(Map<String, ?> arguments, @CheckForNull TaskListener listener)": {
                "lineStart": 188,
                "lineEnd": 234
            },
            "org.jenkinsci.plugins.structs.describable.DescribableModel.uninstantiate2(T o)": {
                "lineStart": 532,
                "lineEnd": 617
            }
        },
        "371700f-UninstantiatedDescribable.java": {
            "org.jenkinsci.plugins.structs.describable.UninstantiatedDescribable.toString()": {
                "lineStart": 149,
                "lineEnd": 167
            }
        }
    },
    "CVE-2022-36894": {
        "a5d34c1-Zip.java": {
            "org.ow2.clif.jenkins.jobs.Zip.basedir()": {
                "lineStart": 83,
                "lineEnd": 101
            },
            "org.ow2.clif.jenkins.jobs.Zip.extractTo(File dir)": {
                "lineStart": 107,
                "lineEnd": 140
            }
        }
    },
    "CVE-2021-20202": {
        "e355e29acb-KeycloakConfigSourceProvider.java": {
            "org.keycloak.configuration.KeycloakConfigSourceProvider.getPersistedConfigFile()": {
                "lineStart": 72,
                "lineEnd": 79
            }
        },
        "c76255d030-QuarkusPlatform.java": {
            "org.keycloak.provider.quarkus.QuarkusPlatform.addInitializationException(Throwable throwable)": {
                "lineStart": 8,
                "lineEnd": 11
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.exitOnError()": {
                "lineStart": 13,
                "lineEnd": 24
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.exitOnError(Throwable cause)": {
                "lineStart": 26,
                "lineEnd": 29
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.onStartup(Runnable startupHook)": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.onShutdown(Runnable shutdownHook)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.exit(Throwable cause)": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.started()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.isStarted()": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.addDeferredException(Throwable t)": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "org.keycloak.provider.quarkus.QuarkusPlatform.getDeferredExceptions()": {
                "lineStart": 59,
                "lineEnd": 61
            }
        },
        "ecdb1650a0-GzipResourceEncodingProviderFactory.java": {
            "org.keycloak.encoding.GzipResourceEncodingProviderFactory.initCacheDir()": {
                "lineStart": 39,
                "lineEnd": 68
            }
        },
        "5aa3af4eea-DirExportProvider.java": {
            "org.keycloak.exportimport.dir.DirExportProvider.<init>()": {
                "lineStart": 15,
                "lineEnd": 20
            }
        },
        "353e230b50-DirImportProvider.java": {
            "org.keycloak.exportimport.dir.DirImportProvider.<init>()": {
                "lineStart": 24,
                "lineEnd": 32
            }
        },
        "428eb1e0a3-PlatformProvider.java": {
            "org.keycloak.platform.PlatformProvider.onStartup(Runnable runnable)": {
                "lineStart": 3,
                "lineEnd": 3
            },
            "org.keycloak.platform.PlatformProvider.onShutdown(Runnable runnable)": {
                "lineStart": 4,
                "lineEnd": 4
            },
            "org.keycloak.platform.PlatformProvider.exit(Throwable cause)": {
                "lineStart": 5,
                "lineEnd": 5
            }
        },
        "10509d8210-KeycloakServer.java": {
            "org.keycloak.testsuite.KeycloakServer.detectDataDirectory()": {
                "lineStart": 246,
                "lineEnd": 274
            }
        },
        "fedd6510f8-WildflyPlatform.java": {
            "org.keycloak.provider.wildfly.WildflyPlatform.onStartup(Runnable startupHook)": {
                "lineStart": 6,
                "lineEnd": 8
            },
            "org.keycloak.provider.wildfly.WildflyPlatform.onShutdown(Runnable shutdownHook)": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "org.keycloak.provider.wildfly.WildflyPlatform.exit(Throwable cause)": {
                "lineStart": 14,
                "lineEnd": 17
            },
            "org.keycloak.provider.wildfly.WildflyPlatform.exit(int status)": {
                "lineStart": 19,
                "lineEnd": 27
            }
        }
    },
    "CVE-2022-42121": {
        "c7cf6ffeb3537-LayoutPageTemplateEntryUpgradeProcess.java": {
            "com.liferay.layout.page.template.internal.upgrade.v1_1_1.LayoutPageTemplateEntryUpgradeProcess.doUpgrade()": {
                "lineStart": 15,
                "lineEnd": 27
            },
            "com.liferay.layout.page.template.internal.upgrade.v1_1_1.LayoutPageTemplateEntryUpgradeProcess._updateLayoutPageTemplateEntry(long layoutPageTemplateEntryId, long companyId, String name, long layoutPrototypeId, PreparedStatement countPreparedStatement, PreparedStatement deletePreparedStatement, PreparedStatement updatePreparedStatement)": {
                "lineStart": 29,
                "lineEnd": 54
            }
        }
    },
    "CVE-2021-21631": {
        "2674ca2-CloudStatistics.java": {
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.get()": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.<init>()": {
                "lineStart": 55,
                "lineEnd": 74
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getDisplayName()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getIconFileName()": {
                "lineStart": 80,
                "lineEnd": 85
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getRequiredPermission()": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.isEmpty()": {
                "lineStart": 91,
                "lineEnd": 96
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getNotCompletedActivities()": {
                "lineStart": 98,
                "lineEnd": 113
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getRetainedActivities()": {
                "lineStart": 115,
                "lineEnd": 116
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getUrlName()": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getDescription()": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getCategoryName()": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getActivities()": {
                "lineStart": 130,
                "lineEnd": 138
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getPotentiallyCompletedActivityFor(ProvisioningActivity.Id id)": {
                "lineStart": 140,
                "lineEnd": 150
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getActivityFor(ProvisioningActivity.Id id)": {
                "lineStart": 152,
                "lineEnd": 157
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getActivityFor(TrackedItem item)": {
                "lineStart": 159,
                "lineEnd": 163
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getIndex()": {
                "lineStart": 165,
                "lineEnd": 167
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getActivity(@Nonnull String hashString)": {
                "lineStart": 169,
                "lineEnd": 186
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getUrl(@Nonnull ProvisioningActivity activity, @Nonnull PhaseExecution phaseExecution, @Nonnull PhaseExecutionAttachment attachment)": {
                "lineStart": 188,
                "lineEnd": 196
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.attach(@Nonnull ProvisioningActivity activity, @Nonnull ProvisioningActivity.Phase phase, @Nonnull PhaseExecutionAttachment attachment)": {
                "lineStart": 198,
                "lineEnd": 209
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.save()": {
                "lineStart": 211,
                "lineEnd": 214
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.persist()": {
                "lineStart": 216,
                "lineEnd": 224
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.load()": {
                "lineStart": 226,
                "lineEnd": 270
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.readResolve()": {
                "lineStart": 272,
                "lineEnd": 316
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getConfigFile()": {
                "lineStart": 318,
                "lineEnd": 320
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.archive(ProvisioningActivity activity)": {
                "lineStart": 322,
                "lineEnd": 328
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.onStarted(Cloud cloud, Label label, Collection<NodeProvisioner.PlannedNode> plannedNodes)": {
                "lineStart": 332,
                "lineEnd": 354
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.onStarted(@Nonnull ProvisioningActivity.Id id)": {
                "lineStart": 356,
                "lineEnd": 364
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.onComplete(NodeProvisioner.PlannedNode plannedNode, Node node)": {
                "lineStart": 366,
                "lineEnd": 374
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.onComplete(@Nonnull ProvisioningActivity.Id id, @Nonnull Node node)": {
                "lineStart": 376,
                "lineEnd": 384
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.onFailure(NodeProvisioner.PlannedNode plannedNode, Throwable t)": {
                "lineStart": 386,
                "lineEnd": 394
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.onFailure(@Nonnull ProvisioningActivity.Id id, @Nonnull Throwable throwable)": {
                "lineStart": 396,
                "lineEnd": 403
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$ProvisioningListener.get()": {
                "lineStart": 405,
                "lineEnd": 407
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$OperationListener.preLaunch(Computer c, TaskListener taskListener)": {
                "lineStart": 414,
                "lineEnd": 424
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$OperationListener.onLaunchFailure(Computer c, TaskListener taskListener)": {
                "lineStart": 426,
                "lineEnd": 431
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$OperationListener.onOnline(Computer c, TaskListener listener)": {
                "lineStart": 433,
                "lineEnd": 443
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$DanglingSlaveScavenger.getRecurrencePeriod()": {
                "lineStart": 448,
                "lineEnd": 450
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$DanglingSlaveScavenger.doRun()": {
                "lineStart": 452,
                "lineEnd": 485
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$SlaveCompletionDetector.onUpdated(@Nonnull Node oldOne, @Nonnull Node newOne)": {
                "lineStart": 490,
                "lineEnd": 498
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics$SlaveCompletionDetector.onDeleted(@Nonnull Node node)": {
                "lineStart": 500,
                "lineEnd": 511
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getIdFor(NodeProvisioner.PlannedNode plannedNode)": {
                "lineStart": 515,
                "lineEnd": 522
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getIdFor(Node node)": {
                "lineStart": 524,
                "lineEnd": 532
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.getIdFor(Computer computer)": {
                "lineStart": 534,
                "lineEnd": 543
            },
            "org.jenkinsci.plugins.cloudstats.CloudStatistics.logTypeNotSupported(Class<?> type)": {
                "lineStart": 545,
                "lineEnd": 551
            }
        }
    },
    "CVE-2023-7272": {
        "5ec77fb-JsonContext.java": {
            "org.eclipse.parsson.JsonContext.<init>(Map<String, ?> config, BufferPool defaultPool)": {
                "lineStart": 22,
                "lineEnd": 29
            },
            "org.eclipse.parsson.JsonContext.<init>(Map<String, ?> config, BufferPool defaultPool, String... properties)": {
                "lineStart": 31,
                "lineEnd": 38
            }
        },
        "64817f7-JsonParserImpl.java": {
            "org.eclipse.parsson.JsonParserImpl.<init>(Reader reader, JsonContext jsonContext)": {
                "lineStart": 33,
                "lineEnd": 36
            },
            "org.eclipse.parsson.JsonParserImpl.<init>(InputStream in, JsonContext jsonContext)": {
                "lineStart": 38,
                "lineEnd": 42
            },
            "org.eclipse.parsson.JsonParserImpl.<init>(InputStream in, Charset encoding, JsonContext jsonContext)": {
                "lineStart": 44,
                "lineEnd": 47
            },
            "org.eclipse.parsson.JsonParserImpl$Stack.push(Context context)": {
                "lineStart": 353,
                "lineEnd": 356
            },
            "org.eclipse.parsson.JsonParserImpl$Stack.pop()": {
                "lineStart": 358,
                "lineEnd": 366
            }
        }
    },
    "CVE-2024-5520": {
        "c63e922fda-CmsCreateSiteThread.java": {
            "org.opencms.ui.apps.sitemanager.CmsCreateSiteThread.run()": {
                "lineStart": 79,
                "lineEnd": 131
            }
        },
        "b35242c063-CmsDeleteSiteDialog.java": {
            "org.opencms.ui.apps.sitemanager.CmsDeleteSiteDialog.getContent()": {
                "lineStart": 64,
                "lineEnd": 92
            }
        }
    },
    "CVE-2022-25188": {
        "0d63bd7-FPRSummary.java": {
            "com.fortify.plugin.jenkins.FPRSummary.buildFilename(String appName, String appVersion)": {
                "lineStart": 23,
                "lineEnd": 35
            }
        }
    },
    "CVE-2020-7019": {
        "daefd93e3d5-RBACEngine.java": {
            "org.elasticsearch.xpack.security.authz.RBACEngine.authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, AsyncSupplier<ResolvedIndices> indicesAsyncSupplier, Map<String, AliasOrIndex> aliasOrIndexLookup, ActionListener<IndexAuthorizationResult> listener)": {
                "lineStart": 197,
                "lineEnd": 253
            }
        },
        "5e0c2945caa-SecuritySearchOperationListener.java": {
            "org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener.onNewScrollContext(SearchContext searchContext)": {
                "lineStart": 26,
                "lineEnd": 31
            },
            "org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener.validateSearchContext(SearchContext searchContext, TransportRequest request)": {
                "lineStart": 33,
                "lineEnd": 44
            }
        }
    },
    "CVE-2022-0265": {
        "eeb7cf9492-AbstractXmlConfigRootTagRecognizer.java": {
            "com.hazelcast.internal.config.AbstractXmlConfigRootTagRecognizer.<init>(String expectedRootNode)": {
                "lineStart": 18,
                "lineEnd": 22
            }
        },
        "556cb213cf-XmlUtil.java": {
            "com.hazelcast.internal.util.XmlUtil.getNsAwareDocumentBuilderFactory()": {
                "lineStart": 27,
                "lineEnd": 32
            },
            "com.hazelcast.internal.util.XmlUtil.setAttribute(TransformerFactory transformerFactory, String attributeName)": {
                "lineStart": 107,
                "lineEnd": 122
            },
            "com.hazelcast.internal.util.XmlUtil.setFeature(DocumentBuilderFactory dbf, String featureName)": {
                "lineStart": 124,
                "lineEnd": 139
            },
            "com.hazelcast.internal.util.XmlUtil.setProperty(SchemaFactory schemaFactory, String propertyName)": {
                "lineStart": 141,
                "lineEnd": 156
            }
        }
    },
    "CVE-2021-21318": {
        "ddc648759d-SearchServiceImpl.java": {
            "org.opencastproject.search.impl.SearchServiceImpl.addSynchronously(MediaPackage mediaPackage)": {
                "lineStart": 237,
                "lineEnd": 266
            },
            "org.opencastproject.search.impl.SearchServiceImpl.deleteSynchronously(String mediaPackageId)": {
                "lineStart": 278,
                "lineEnd": 308
            }
        },
        "e25caec4d3-SearchEntity.java": {
            "org.opencastproject.search.impl.persistence.SearchEntity.<init>()": {
                "lineStart": 36,
                "lineEnd": 37
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getMediaPackageId()": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setMediaPackageId(String mediaPackageId)": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getMediaPackageXML()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setMediaPackageXML(String mediaPackageXML)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getAccessControl()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setAccessControl(String accessControl)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getOrganization()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setOrganization(Organization organization)": {
                "lineStart": 67,
                "lineEnd": 75
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getDeletionDate()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setDeletionDate(Date deletionDate)": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getModificationDate()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setModificationDate(Date modificationDate)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.getSeriesId()": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "org.opencastproject.search.impl.persistence.SearchEntity.setSeriesId(String seriesId)": {
                "lineStart": 97,
                "lineEnd": 99
            }
        },
        "8e117d84fe-SearchServiceDatabase.java": {
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.getAllMediaPackages()": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.getOrganizationId(String mediaPackageId)": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.countMediaPackages()": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.getMediaPackage(String mediaPackageId)": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.getAccessControlList(String mediaPackageId)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.getModificationDate(String mediaPackageId)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.getDeletionDate(String mediaPackageId)": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.deleteMediaPackage(String mediaPackageId, Date deletionDate)": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.opencastproject.search.impl.persistence.SearchServiceDatabase.storeMediaPackage(MediaPackage mediaPackage, AccessControlList acl, Date now)": {
                "lineStart": 18,
                "lineEnd": 18
            }
        },
        "4d002e06fe-SearchServiceDatabaseImpl.java": {
            "org.opencastproject.search.impl.persistence.SearchServiceDatabaseImpl.getAccessControlList(String mediaPackageId)": {
                "lineStart": 178,
                "lineEnd": 206
            }
        },
        "dacfbd849d-SolrIndexManager.java": {
            "org.opencastproject.search.impl.solr.SolrIndexManager.add(MediaPackage sourceMediaPackage, AccessControlList acl, Date now)": {
                "lineStart": 184,
                "lineEnd": 211
            }
        }
    },
    "CVE-2021-22132": {
        "5a0fe0030b8-ThreadContext.java": {
            "org.elasticsearch.common.util.concurrent.ThreadContext.<init>(Settings settings)": {
                "lineStart": 45,
                "lineEnd": 50
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.stashContext()": {
                "lineStart": 52,
                "lineEnd": 65
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.captureAsWriteable()": {
                "lineStart": 67,
                "lineEnd": 70
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.stashWithOrigin(String origin)": {
                "lineStart": 72,
                "lineEnd": 76
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.stashAndMergeHeaders(Map<String, String> headers)": {
                "lineStart": 78,
                "lineEnd": 84
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.newStoredContext(boolean preserveResponseHeaders)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.newStoredContext(boolean preserveResponseHeaders, Collection<String> transientHeadersToClear)": {
                "lineStart": 90,
                "lineEnd": 119
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.newRestorableContext(boolean preserveResponseHeaders)": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.wrapRestorable(StoredContext storedContext)": {
                "lineStart": 125,
                "lineEnd": 131
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.writeTo(StreamOutput out)": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.readHeaders(StreamInput in)": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.setHeaders(Tuple<Map<String, String>, Map<String, Set<String>>> headerTuple)": {
                "lineStart": 141,
                "lineEnd": 153
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.readHeadersFromStream(StreamInput in)": {
                "lineStart": 155,
                "lineEnd": 180
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.getHeader(String key)": {
                "lineStart": 182,
                "lineEnd": 189
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.getHeaders()": {
                "lineStart": 191,
                "lineEnd": 195
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.getRequestHeadersOnly()": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.getResponseHeaders()": {
                "lineStart": 201,
                "lineEnd": 209
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.copyHeaders(Iterable<Map.Entry<String, String>> headers)": {
                "lineStart": 211,
                "lineEnd": 213
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.putHeader(String key, String value)": {
                "lineStart": 215,
                "lineEnd": 217
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.putHeader(Map<String, String> header)": {
                "lineStart": 219,
                "lineEnd": 221
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.putTransient(String key, Object value)": {
                "lineStart": 223,
                "lineEnd": 225
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.getTransient(String key)": {
                "lineStart": 227,
                "lineEnd": 229
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.addResponseHeader(final String key, final String value)": {
                "lineStart": 231,
                "lineEnd": 233
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue)": {
                "lineStart": 235,
                "lineEnd": 237
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.preserveContext(Runnable command)": {
                "lineStart": 239,
                "lineEnd": 253
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.unwrap(Runnable command)": {
                "lineStart": 255,
                "lineEnd": 261
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.isDefaultContext()": {
                "lineStart": 263,
                "lineEnd": 265
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.markAsSystemContext()": {
                "lineStart": 267,
                "lineEnd": 269
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.isSystemContext()": {
                "lineStart": 271,
                "lineEnd": 273
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$StoredContext.close()": {
                "lineStart": 276,
                "lineEnd": 277
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$StoredContext.restore()": {
                "lineStart": 278,
                "lineEnd": 280
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext.buildDefaultHeaders(Settings settings)": {
                "lineStart": 284,
                "lineEnd": 298
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.setSystemContext()": {
                "lineStart": 307,
                "lineEnd": 313
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.<init>(Map<String, String> requestHeaders, Map<String, Set<String>> responseHeaders, Map<String, Object> transientHeaders, boolean isSystemContext)": {
                "lineStart": 315,
                "lineEnd": 321
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.<init>(Map<String, String> requestHeaders, Map<String, Set<String>> responseHeaders, Map<String, Object> transientHeaders, boolean isSystemContext, long warningHeadersSize)": {
                "lineStart": 323,
                "lineEnd": 329
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.<init>()": {
                "lineStart": 331,
                "lineEnd": 333
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.putRequest(String key, String value)": {
                "lineStart": 335,
                "lineEnd": 339
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.putSingleHeader(String key, T value, Map<String, T> newHeaders)": {
                "lineStart": 341,
                "lineEnd": 346
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.putHeaders(Map<String, String> headers)": {
                "lineStart": 348,
                "lineEnd": 361
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.putResponseHeaders(Map<String, Set<String>> headers)": {
                "lineStart": 363,
                "lineEnd": 384
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.putResponse(final String key, final String value, final Function<String, String> uniqueValue, final int maxWarningHeaderCount, final long maxWarningHeaderSize)": {
                "lineStart": 386,
                "lineEnd": 429
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.putTransient(String key, Object value)": {
                "lineStart": 431,
                "lineEnd": 435
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.copyHeaders(Iterable<Map.Entry<String, String>> headers)": {
                "lineStart": 437,
                "lineEnd": 444
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ThreadContextStruct.writeTo(StreamOutput out, Map<String, String> defaultHeaders)": {
                "lineStart": 446,
                "lineEnd": 463
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.<init>(Runnable in)": {
                "lineStart": 470,
                "lineEnd": 473
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run()": {
                "lineStart": 475,
                "lineEnd": 481
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.toString()": {
                "lineStart": 483,
                "lineEnd": 485
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.unwrap()": {
                "lineStart": 487,
                "lineEnd": 489
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.<init>(AbstractRunnable in)": {
                "lineStart": 497,
                "lineEnd": 500
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.isForceExecution()": {
                "lineStart": 502,
                "lineEnd": 504
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.onAfter()": {
                "lineStart": 506,
                "lineEnd": 517
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.onFailure(Exception e)": {
                "lineStart": 519,
                "lineEnd": 521
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.onRejection(Exception e)": {
                "lineStart": 523,
                "lineEnd": 525
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun()": {
                "lineStart": 527,
                "lineEnd": 531
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.toString()": {
                "lineStart": 533,
                "lineEnd": 535
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.unwrap()": {
                "lineStart": 537,
                "lineEnd": 539
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$LinkedHashSetCollector.supplier()": {
                "lineStart": 545,
                "lineEnd": 547
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$LinkedHashSetCollector.accumulator()": {
                "lineStart": 549,
                "lineEnd": 551
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$LinkedHashSetCollector.combiner()": {
                "lineStart": 553,
                "lineEnd": 558
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$LinkedHashSetCollector.finisher()": {
                "lineStart": 560,
                "lineEnd": 562
            },
            "org.elasticsearch.common.util.concurrent.ThreadContext$LinkedHashSetCollector.characteristics()": {
                "lineStart": 565,
                "lineEnd": 567
            }
        },
        "4903594b7bd-TransportSubmitAsyncSearchAction.java": {
            "org.elasticsearch.xpack.search.TransportSubmitAsyncSearchAction.createSearchRequest(SubmitAsyncSearchRequest request, Task submitTask, TimeValue keepAlive)": {
                "lineStart": 109,
                "lineEnd": 122
            }
        },
        "6073a618ea6-CcrLicenseChecker.java": {
            "org.elasticsearch.xpack.ccr.CcrLicenseChecker.wrapClient(Client client, Map<String, String> headers)": {
                "lineStart": 237,
                "lineEnd": 256
            }
        },
        "d0a6fff63ad-ShardFollowTask.java": {
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.<init>(final String remoteCluster, final ShardId followShardId, final ShardId leaderShardId, final int maxReadRequestOperationCount, final int maxWriteRequestOperationCount, final int maxOutstandingReadRequests, final int maxOutstandingWriteRequests, final ByteSizeValue maxReadRequestSize, final ByteSizeValue maxWriteRequestSize, final int maxWriteBufferCount, final ByteSizeValue maxWriteBufferSize, final TimeValue maxRetryDelay, final TimeValue readPollTimeout, final Map<String, String> headers)": {
                "lineStart": 50,
                "lineEnd": 56
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.readFrom(StreamInput in)": {
                "lineStart": 58,
                "lineEnd": 63
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.<init>(String remoteCluster, ShardId followShardId, ShardId leaderShardId, StreamInput in)": {
                "lineStart": 65,
                "lineEnd": 71
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.getRemoteCluster()": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.getFollowShardId()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.getLeaderShardId()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.getHeaders()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.getWriteableName()": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.writeTo(StreamOutput out)": {
                "lineStart": 93,
                "lineEnd": 99
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.fromXContent(XContentParser parser)": {
                "lineStart": 101,
                "lineEnd": 103
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.toXContent(XContentBuilder builder, Params params)": {
                "lineStart": 105,
                "lineEnd": 117
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.equals(Object o)": {
                "lineStart": 119,
                "lineEnd": 125
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.hashCode()": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.toString()": {
                "lineStart": 131,
                "lineEnd": 133
            },
            "org.elasticsearch.xpack.ccr.action.ShardFollowTask.getMinimalSupportedVersion()": {
                "lineStart": 135,
                "lineEnd": 137
            }
        },
        "72b24660937-TransportPutAutoFollowPatternAction.java": {
            "org.elasticsearch.xpack.ccr.action.TransportPutAutoFollowPatternAction.masterOperation(PutAutoFollowPatternAction.Request request, ClusterState state, ActionListener<AcknowledgedResponse> listener)": {
                "lineStart": 53,
                "lineEnd": 98
            }
        },
        "aa761c6999d-TransportResumeFollowAction.java": {
            "org.elasticsearch.xpack.ccr.action.TransportResumeFollowAction.start(ResumeFollowAction.Request request, String clusterNameAlias, IndexMetadata leaderIndexMetadata, IndexMetadata followIndexMetadata, String[] leaderIndexHistoryUUIDs, ActionListener<AcknowledgedResponse> listener)": {
                "lineStart": 124,
                "lineEnd": 135
            }
        },
        "b9173582cd9-ClientHelper.java": {
            "org.elasticsearch.xpack.core.ClientHelper.executeWithHeadersAsync(Map<String, String> headers, String origin, Client client, ActionType<Response> action, Request request, ActionListener<Response> listener)": {
                "lineStart": 83,
                "lineEnd": 97
            },
            "org.elasticsearch.xpack.core.ClientHelper.filterSecurityHeaders(Map<String, String> headers)": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "org.elasticsearch.xpack.core.ClientHelper.stashWithHeaders(ThreadContext threadContext, Map<String, String> headers)": {
                "lineStart": 99,
                "lineEnd": 103
            }
        },
        "71547688635-DatafeedConfig.java": {
            "org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig.toXContent(XContentBuilder builder, Params params)": {
                "lineStart": 389,
                "lineEnd": 439
            }
        },
        "9c4c3d6380e-DataFrameAnalyticsConfig.java": {
            "org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig.toXContent(XContentBuilder builder, Params params)": {
                "lineStart": 198,
                "lineEnd": 235
            },
            "org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig$Builder.setHeaders(Map<String, String> headers)": {
                "lineStart": 367,
                "lineEnd": 370
            }
        },
        "94306966a34-RollupJob.java": {
            "org.elasticsearch.xpack.core.rollup.job.RollupJob.toXContent(XContentBuilder builder, Params params)": {
                "lineStart": 46,
                "lineEnd": 52
            }
        },
        "213c94e7dad-SecondaryAuthentication.java": {
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.<init>(SecurityContext securityContext, Authentication authentication)": {
                "lineStart": 14,
                "lineEnd": 17
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.readFromContext(SecurityContext securityContext)": {
                "lineStart": 19,
                "lineEnd": 26
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.writeToContext(ThreadContext threadContext)": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.serializer()": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.getAuthentication()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.getUser()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.execute(Function<ThreadContext.StoredContext, T> body)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.wrap(Runnable runnable)": {
                "lineStart": 48,
                "lineEnd": 55
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.toString()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.equals(Object o)": {
                "lineStart": 61,
                "lineEnd": 66
            },
            "org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication.hashCode()": {
                "lineStart": 68,
                "lineEnd": 70
            }
        },
        "7a8c2ea568c-SnapshotLifecyclePolicyMetadata.java": {
            "org.elasticsearch.xpack.core.slm.SnapshotLifecyclePolicyMetadata.<init>(SnapshotLifecyclePolicy policy, Map<String, String> headers, long version, long modifiedDate, SnapshotInvocationRecord lastSuccess, SnapshotInvocationRecord lastFailure)": {
                "lineStart": 55,
                "lineEnd": 62
            },
            "org.elasticsearch.xpack.core.slm.SnapshotLifecyclePolicyMetadata.<init>(StreamInput in)": {
                "lineStart": 64,
                "lineEnd": 72
            }
        },
        "4f78b7ee65a-WatchExecutionContext.java": {
            "org.elasticsearch.xpack.core.watcher.execution.WatchExecutionContext.getUsernameFromWatch(Watch watch)": {
                "lineStart": 213,
                "lineEnd": 224
            }
        },
        "51d74475d30-AsyncTaskManagementService.java": {
            "org.elasticsearch.xpack.eql.async.AsyncTaskManagementService$AsyncRequestWrapper.createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers)": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "org.elasticsearch.xpack.eql.async.AsyncTaskManagementService.storeResults(T searchTask, StoredAsyncResponse<Response> storedResponse, ActionListener<Void> finalListener)": {
                "lineStart": 156,
                "lineEnd": 194
            }
        },
        "ebef474d24a-TransportPutLifecycleAction.java": {
            "org.elasticsearch.xpack.ilm.action.TransportPutLifecycleAction.masterOperation(Request request, ClusterState state, ActionListener<Response> listener)": {
                "lineStart": 69,
                "lineEnd": 118
            }
        },
        "95802413609-TransportPutSnapshotLifecycleAction.java": {
            "org.elasticsearch.xpack.slm.action.TransportPutSnapshotLifecycleAction.masterOperation(final PutSnapshotLifecycleAction.Request request, final ClusterState state, final ActionListener<PutSnapshotLifecycleAction.Response> listener)": {
                "lineStart": 46,
                "lineEnd": 86
            }
        },
        "fb2287852ec-Rollup.java": {
            "org.elasticsearch.xpack.rollup.Rollup.<init>(Settings settings)": {
                "lineStart": 81,
                "lineEnd": 84
            },
            "org.elasticsearch.xpack.rollup.Rollup.createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry, IndexNameExpressionResolver expressionResolver, Supplier<RepositoriesService> repositoriesServiceSupplier)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "org.elasticsearch.xpack.rollup.Rollup.createGuiceModules()": {
                "lineStart": 90,
                "lineEnd": 98
            },
            "org.elasticsearch.xpack.rollup.Rollup.getLicenseState()": {
                "lineStart": 100,
                "lineEnd": 100
            },
            "org.elasticsearch.xpack.rollup.Rollup.getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster)": {
                "lineStart": 101,
                "lineEnd": 103
            },
            "org.elasticsearch.xpack.rollup.Rollup.getActions()": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "org.elasticsearch.xpack.rollup.Rollup.getExecutorBuilders(Settings settings)": {
                "lineStart": 109,
                "lineEnd": 116
            },
            "org.elasticsearch.xpack.rollup.Rollup.getPersistentTasksExecutor(ClusterService clusterService, ThreadPool threadPool, Client client, SettingsModule settingsModule, IndexNameExpressionResolver expressionResolver)": {
                "lineStart": 118,
                "lineEnd": 125
            },
            "org.elasticsearch.xpack.rollup.Rollup.getClock()": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "org.elasticsearch.xpack.rollup.Rollup.close()": {
                "lineStart": 131,
                "lineEnd": 136
            }
        },
        "2ac18e90c03-TransportPutRollupJobAction.java": {
            "org.elasticsearch.xpack.rollup.action.TransportPutRollupJobAction.createRollupJob(RollupJobConfig config, ThreadPool threadPool)": {
                "lineStart": 115,
                "lineEnd": 118
            },
            "org.elasticsearch.xpack.rollup.action.TransportPutRollupJobAction.startPersistentTask(RollupJob job, ActionListener<AcknowledgedResponse> listener, PersistentTasksService persistentTasksService)": {
                "lineStart": 205,
                "lineEnd": 215
            }
        },
        "ca363029acf-TransportPreviewTransformAction.java": {
            "org.elasticsearch.xpack.transform.action.TransportPreviewTransformAction.getPreview(String transformId, Function function, SourceConfig source, String pipeline, String dest, ActionListener<PreviewTransformAction.Response> listener)": {
                "lineStart": 87,
                "lineEnd": 133
            }
        },
        "db9f2698c6d-Pivot.java": {
            "org.elasticsearch.xpack.transform.transforms.pivot.Pivot.preview(Client client, Map<String, String> headers, SourceConfig sourceConfig, Map<String, String> fieldTypeMap, int numberOfBuckets, ActionListener<List<Map<String, Object>>> listener)": {
                "lineStart": 109,
                "lineEnd": 128
            }
        },
        "44e722bbeb4-ExecutableIndexAction.java": {
            "org.elasticsearch.xpack.watcher.actions.index.ExecutableIndexAction.execute(String actionId, WatchExecutionContext ctx, Payload payload)": {
                "lineStart": 44,
                "lineEnd": 98
            },
            "org.elasticsearch.xpack.watcher.actions.index.ExecutableIndexAction.indexBulk(Iterable list, String actionId, WatchExecutionContext ctx)": {
                "lineStart": 100,
                "lineEnd": 156
            }
        },
        "c99452a3987-ExecutableSearchInput.java": {
            "org.elasticsearch.xpack.watcher.input.search.ExecutableSearchInput.doExecute(WatchExecutionContext ctx, WatcherSearchTemplateRequest request)": {
                "lineStart": 57,
                "lineEnd": 94
            }
        },
        "a0492675946-TransportExecuteWatchAction.java": {
            "org.elasticsearch.xpack.watcher.transport.actions.execute.TransportExecuteWatchAction.executeWatch(final ExecuteWatchRequest request, final ActionListener<ExecuteWatchResponse> listener, final Watch watch, final boolean knownWatch)": {
                "lineStart": 97,
                "lineEnd": 141
            }
        },
        "0074ec9ac3f-TransportPutWatchAction.java": {
            "org.elasticsearch.xpack.watcher.transport.actions.put.TransportPutWatchAction.doExecute(PutWatchRequest request, ActionListener<PutWatchResponse> listener)": {
                "lineStart": 48,
                "lineEnd": 92
            }
        }
    },
    "CVE-2021-3137": {
        "88f97af9b4-SecureIntrospector.java": {
            "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": {
                "lineStart": 8,
                "lineEnd": 33
            },
            "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": {
                "lineStart": 35,
                "lineEnd": 43
            }
        }
    },
    "CVE-2020-2111": {
        "d25e70a-SubversionSCMSource.java": {
            "jenkins.scm.impl.subversion.SubversionSCMSource$DescriptorImpl.doCheckCredentialsId(StaplerRequest req, @AncestorInPath Item context, @QueryParameter String remoteBase, @QueryParameter String value)": {
                "lineStart": 592,
                "lineEnd": 652
            }
        }
    },
    "CVE-2024-22258": {
        "98a577ee-CodeVerifierAuthenticator.java": {
            "org.springframework.security.oauth2.server.authorization.authentication.CodeVerifierAuthenticator.authenticate(OAuth2ClientAuthenticationToken clientAuthentication, RegisteredClient registeredClient)": {
                "lineStart": 42,
                "lineEnd": 88
            }
        }
    },
    "CVE-2022-43428": {
        "57c9c4d-RemoteSystemProperties.java": {
            "com.compuware.jenkins.totaltest.RemoteSystemProperties.checkRoles(RoleChecker checker)": {
                "lineStart": 11,
                "lineEnd": 12
            }
        }
    },
    "CVE-2022-23532": {
        "bb0560832-ExportCSV.java": {
            "apoc.export.csv.ExportCSV.<init>()": {
                "lineStart": 35,
                "lineEnd": 36
            },
            "apoc.export.csv.ExportCSV.all(@Name(\"file\") String fileName, @Name(\"config\") Map<String, Object> config)": {
                "lineStart": 38,
                "lineEnd": 42
            },
            "apoc.export.csv.ExportCSV.data(@Name(\"nodes\") List<Node> nodes, @Name(\"rels\") List<Relationship> rels, @Name(\"file\") String fileName, @Name(\"config\") Map<String, Object> config)": {
                "lineStart": 44,
                "lineEnd": 50
            },
            "apoc.export.csv.ExportCSV.graph(@Name(\"graph\") Map<String, Object> graph, @Name(\"file\") String fileName, @Name(\"config\") Map<String, Object> config)": {
                "lineStart": 52,
                "lineEnd": 58
            },
            "apoc.export.csv.ExportCSV.query(@Name(\"query\") String query, @Name(\"file\") String fileName, @Name(\"config\") Map<String, Object> config)": {
                "lineStart": 60,
                "lineEnd": 68
            },
            "apoc.export.csv.ExportCSV.preventBulkImport(ExportConfig config)": {
                "lineStart": 70,
                "lineEnd": 75
            },
            "apoc.export.csv.ExportCSV.exportCsv(@Name(\"file\") String fileName, String source, Object data, ExportConfig exportConfig)": {
                "lineStart": 77,
                "lineEnd": 93
            },
            "apoc.export.csv.ExportCSV.dump(Object data, ExportConfig c, ProgressReporter reporter, ExportFileManager printWriter, CsvFormat exporter)": {
                "lineStart": 95,
                "lineEnd": 102
            }
        },
        "999756bf2-FileUtils.java": {
            "apoc.util.FileUtils.getPath(String url)": {
                "lineStart": 217,
                "lineEnd": 236
            },
            "apoc.util.FileUtils.pathStartsWithOther(Path resolvedPath, Path basePath)": {
                "lineStart": 238,
                "lineEnd": 250
            }
        }
    },
    "CVE-2020-13959": {
        "aff9b71d-VelocityViewServlet.java": {
            "org.apache.velocity.tools.view.VelocityViewServlet.error(HttpServletRequest request, HttpServletResponse response, Throwable e)": {
                "lineStart": 168,
                "lineEnd": 212
            }
        }
    },
    "CVE-2023-24998": {
        "d4cc5868b1-Parameters.java": {
            "org.apache.tomcat.util.http.Parameters.addParameter(String key, String value)": {
                "lineStart": 155,
                "lineEnd": 167
            }
        }
    },
    "CVE-2022-45206": {
        "99c4caf2-SqlInjectionUtil.java": {
            "org.jeecg.common.util.SqlInjectionUtil.filterContent(String value, String customXssString)": {
                "lineStart": 30,
                "lineEnd": 65
            },
            "org.jeecg.common.util.SqlInjectionUtil.filterContent(String[] values, String customXssString)": {
                "lineStart": 71,
                "lineEnd": 109
            },
            "org.jeecg.common.util.SqlInjectionUtil.specialFilterContentForDictSql(String value)": {
                "lineStart": 111,
                "lineEnd": 134
            },
            "org.jeecg.common.util.SqlInjectionUtil.specialFilterContentForOnlineReport(String value)": {
                "lineStart": 136,
                "lineEnd": 159
            }
        }
    },
    "CVE-2023-6787": {
        "9640d926b5-AuthenticationProcessor.java": {
            "org.keycloak.authentication.AuthenticationProcessor.<init>()": {
                "lineStart": 80,
                "lineEnd": 81
            },
            "org.keycloak.authentication.AuthenticationProcessor.isBrowserFlow()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "org.keycloak.authentication.AuthenticationProcessor.setBrowserFlow(boolean browserFlow)": {
                "lineStart": 87,
                "lineEnd": 90
            },
            "org.keycloak.authentication.AuthenticationProcessor.getBruteForceProtector()": {
                "lineStart": 92,
                "lineEnd": 98
            },
            "org.keycloak.authentication.AuthenticationProcessor.getRealm()": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "org.keycloak.authentication.AuthenticationProcessor.getClient()": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "org.keycloak.authentication.AuthenticationProcessor.setClient(ClientModel client)": {
                "lineStart": 108,
                "lineEnd": 110
            },
            "org.keycloak.authentication.AuthenticationProcessor.getClientAuthAttributes()": {
                "lineStart": 112,
                "lineEnd": 114
            },
            "org.keycloak.authentication.AuthenticationProcessor.getAuthenticationSession()": {
                "lineStart": 116,
                "lineEnd": 118
            },
            "org.keycloak.authentication.AuthenticationProcessor.getConnection()": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "org.keycloak.authentication.AuthenticationProcessor.getUriInfo()": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "org.keycloak.authentication.AuthenticationProcessor.getSession()": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "org.keycloak.authentication.AuthenticationProcessor.getUserSession()": {
                "lineStart": 132,
                "lineEnd": 134
            },
            "org.keycloak.authentication.AuthenticationProcessor.setRealm(RealmModel realm)": {
                "lineStart": 136,
                "lineEnd": 139
            },
            "org.keycloak.authentication.AuthenticationProcessor.setAuthenticationSession(AuthenticationSessionModel authenticationSession)": {
                "lineStart": 141,
                "lineEnd": 144
            },
            "org.keycloak.authentication.AuthenticationProcessor.setConnection(ClientConnection connection)": {
                "lineStart": 146,
                "lineEnd": 149
            },
            "org.keycloak.authentication.AuthenticationProcessor.setUriInfo(UriInfo uriInfo)": {
                "lineStart": 151,
                "lineEnd": 154
            },
            "org.keycloak.authentication.AuthenticationProcessor.setSession(KeycloakSession session)": {
                "lineStart": 156,
                "lineEnd": 159
            },
            "org.keycloak.authentication.AuthenticationProcessor.setEventBuilder(EventBuilder eventBuilder)": {
                "lineStart": 161,
                "lineEnd": 164
            },
            "org.keycloak.authentication.AuthenticationProcessor.setRequest(HttpRequest request)": {
                "lineStart": 166,
                "lineEnd": 169
            },
            "org.keycloak.authentication.AuthenticationProcessor.setFlowId(String flowId)": {
                "lineStart": 171,
                "lineEnd": 174
            },
            "org.keycloak.authentication.AuthenticationProcessor.setFlowPath(String flowPath)": {
                "lineStart": 176,
                "lineEnd": 179
            },
            "org.keycloak.authentication.AuthenticationProcessor.setForwardedErrorMessage(FormMessage forwardedErrorMessage)": {
                "lineStart": 181,
                "lineEnd": 184
            },
            "org.keycloak.authentication.AuthenticationProcessor.getAndRemoveForwardedErrorMessage()": {
                "lineStart": 186,
                "lineEnd": 193
            },
            "org.keycloak.authentication.AuthenticationProcessor.setForwardedSuccessMessage(FormMessage forwardedSuccessMessage)": {
                "lineStart": 195,
                "lineEnd": 198
            },
            "org.keycloak.authentication.AuthenticationProcessor.setForwardedInfoMessage(FormMessage forwardedInfoMessage)": {
                "lineStart": 200,
                "lineEnd": 203
            },
            "org.keycloak.authentication.AuthenticationProcessor.generateCode()": {
                "lineStart": 205,
                "lineEnd": 209
            },
            "org.keycloak.authentication.AuthenticationProcessor.newEvent()": {
                "lineStart": 211,
                "lineEnd": 214
            },
            "org.keycloak.authentication.AuthenticationProcessor.getEvent()": {
                "lineStart": 216,
                "lineEnd": 218
            },
            "org.keycloak.authentication.AuthenticationProcessor.getRequest()": {
                "lineStart": 220,
                "lineEnd": 222
            },
            "org.keycloak.authentication.AuthenticationProcessor.getFlowPath()": {
                "lineStart": 224,
                "lineEnd": 226
            },
            "org.keycloak.authentication.AuthenticationProcessor.setAutheticatedUser(UserModel user)": {
                "lineStart": 228,
                "lineEnd": 235
            },
            "org.keycloak.authentication.AuthenticationProcessor.clearAuthenticatedUser()": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "org.keycloak.authentication.AuthenticationProcessor.getRefreshUrl(boolean authSessionIdParam)": {
                "lineStart": 241,
                "lineEnd": 248
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.<init>(AuthenticationExecutionModel execution, Authenticator authenticator, List<AuthenticationExecutionModel> currentExecutions)": {
                "lineStart": 264,
                "lineEnd": 268
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.<init>(AuthenticationExecutionModel execution, ClientAuthenticator clientAuthenticator, List<AuthenticationExecutionModel> currentExecutions)": {
                "lineStart": 270,
                "lineEnd": 274
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.newEvent()": {
                "lineStart": 276,
                "lineEnd": 278
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getCategoryRequirementFromCurrentFlow(String authenticatorCategory)": {
                "lineStart": 280,
                "lineEnd": 286
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getExecution()": {
                "lineStart": 288,
                "lineEnd": 290
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getAuthenticatorConfig()": {
                "lineStart": 292,
                "lineEnd": 297
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getAuthenticator()": {
                "lineStart": 299,
                "lineEnd": 301
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getStatus()": {
                "lineStart": 303,
                "lineEnd": 305
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getClientAuthenticator()": {
                "lineStart": 307,
                "lineEnd": 309
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.success()": {
                "lineStart": 311,
                "lineEnd": 313
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.failure(AuthenticationFlowError error)": {
                "lineStart": 315,
                "lineEnd": 318
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.challenge(Response challenge)": {
                "lineStart": 320,
                "lineEnd": 323
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.forceChallenge(Response challenge)": {
                "lineStart": 325,
                "lineEnd": 328
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.failureChallenge(AuthenticationFlowError error, Response challenge)": {
                "lineStart": 330,
                "lineEnd": 334
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.failure(AuthenticationFlowError error, Response challenge)": {
                "lineStart": 336,
                "lineEnd": 340
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.failure(AuthenticationFlowError error, Response challenge, String eventDetails, String userErrorMessage)": {
                "lineStart": 342,
                "lineEnd": 348
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.attempted()": {
                "lineStart": 350,
                "lineEnd": 352
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getUser()": {
                "lineStart": 354,
                "lineEnd": 356
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.setUser(UserModel user)": {
                "lineStart": 358,
                "lineEnd": 360
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getAuthenticationSelections()": {
                "lineStart": 362,
                "lineEnd": 364
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.setAuthenticationSelections(List<AuthenticationSelectionOption> authenticationSelections)": {
                "lineStart": 366,
                "lineEnd": 368
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.clearUser()": {
                "lineStart": 370,
                "lineEnd": 372
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getRealm()": {
                "lineStart": 374,
                "lineEnd": 376
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getClient()": {
                "lineStart": 378,
                "lineEnd": 380
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.setClient(ClientModel client)": {
                "lineStart": 382,
                "lineEnd": 384
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getClientAuthAttributes()": {
                "lineStart": 386,
                "lineEnd": 388
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getAuthenticationSession()": {
                "lineStart": 390,
                "lineEnd": 392
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getFlowPath()": {
                "lineStart": 394,
                "lineEnd": 396
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getConnection()": {
                "lineStart": 398,
                "lineEnd": 400
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getUriInfo()": {
                "lineStart": 402,
                "lineEnd": 404
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getSession()": {
                "lineStart": 406,
                "lineEnd": 408
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getHttpRequest()": {
                "lineStart": 410,
                "lineEnd": 412
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.attachUserSession(UserSessionModel userSession)": {
                "lineStart": 414,
                "lineEnd": 420
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getProtector()": {
                "lineStart": 422,
                "lineEnd": 424
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getEvent()": {
                "lineStart": 426,
                "lineEnd": 428
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getForwardedErrorMessage()": {
                "lineStart": 430,
                "lineEnd": 432
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.generateAccessCode()": {
                "lineStart": 434,
                "lineEnd": 436
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getChallenge()": {
                "lineStart": 438,
                "lineEnd": 440
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getError()": {
                "lineStart": 442,
                "lineEnd": 444
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.form()": {
                "lineStart": 446,
                "lineEnd": 464
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getActionUrl(String code)": {
                "lineStart": 466,
                "lineEnd": 473
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getActionTokenUrl(String tokenString)": {
                "lineStart": 475,
                "lineEnd": 482
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getRefreshExecutionUrl()": {
                "lineStart": 484,
                "lineEnd": 491
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getRefreshUrl(boolean authSessionIdParam)": {
                "lineStart": 493,
                "lineEnd": 495
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.cancelLogin()": {
                "lineStart": 497,
                "lineEnd": 503
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.resetFlow()": {
                "lineStart": 505,
                "lineEnd": 507
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.resetFlow(Runnable afterResetListener)": {
                "lineStart": 509,
                "lineEnd": 512
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.fork()": {
                "lineStart": 514,
                "lineEnd": 516
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.forkWithSuccessMessage(FormMessage message)": {
                "lineStart": 518,
                "lineEnd": 521
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.forkWithErrorMessage(FormMessage message)": {
                "lineStart": 523,
                "lineEnd": 526
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getForwardedSuccessMessage()": {
                "lineStart": 528,
                "lineEnd": 530
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.setForwardedInfoMessage(String message, Object... parameters)": {
                "lineStart": 532,
                "lineEnd": 534
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getForwardedInfoMessage()": {
                "lineStart": 536,
                "lineEnd": 538
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getErrorMessage()": {
                "lineStart": 540,
                "lineEnd": 542
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getSuccessMessage()": {
                "lineStart": 544,
                "lineEnd": 546
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getEventDetails()": {
                "lineStart": 548,
                "lineEnd": 550
            },
            "org.keycloak.authentication.AuthenticationProcessor$Result.getUserErrorMessage()": {
                "lineStart": 552,
                "lineEnd": 554
            },
            "org.keycloak.authentication.AuthenticationProcessor.logFailure()": {
                "lineStart": 558,
                "lineEnd": 567
            },
            "org.keycloak.authentication.AuthenticationProcessor.isSuccessful(AuthenticationExecutionModel model)": {
                "lineStart": 569,
                "lineEnd": 573
            },
            "org.keycloak.authentication.AuthenticationProcessor.handleBrowserExceptionList(AuthenticationFlowException e)": {
                "lineStart": 575,
                "lineEnd": 615
            },
            "org.keycloak.authentication.AuthenticationProcessor.handleBrowserException(Exception failure)": {
                "lineStart": 617,
                "lineEnd": 701
            },
            "org.keycloak.authentication.AuthenticationProcessor.handleClientAuthException(Exception failure)": {
                "lineStart": 703,
                "lineEnd": 731
            },
            "org.keycloak.authentication.AuthenticationProcessor.createFlowExecution(String flowId, AuthenticationExecutionModel execution)": {
                "lineStart": 733,
                "lineEnd": 754
            },
            "org.keycloak.authentication.AuthenticationProcessor.authenticate()": {
                "lineStart": 756,
                "lineEnd": 761
            },
            "org.keycloak.authentication.AuthenticationProcessor.authenticateClient()": {
                "lineStart": 763,
                "lineEnd": 779
            },
            "org.keycloak.authentication.AuthenticationProcessor.redirectToFlow()": {
                "lineStart": 781,
                "lineEnd": 785
            },
            "org.keycloak.authentication.AuthenticationProcessor.resetFlow()": {
                "lineStart": 787,
                "lineEnd": 793
            },
            "org.keycloak.authentication.AuthenticationProcessor.resetFlow(AuthenticationSessionModel authSession, String flowPath)": {
                "lineStart": 795,
                "lineEnd": 809
            },
            "org.keycloak.authentication.AuthenticationProcessor.clone(KeycloakSession session, AuthenticationSessionModel authSession)": {
                "lineStart": 811,
                "lineEnd": 822
            },
            "org.keycloak.authentication.AuthenticationProcessor.authenticationAction(String execution)": {
                "lineStart": 824,
                "lineEnd": 861
            },
            "org.keycloak.authentication.AuthenticationProcessor.checkClientSession(boolean checkAction)": {
                "lineStart": 863,
                "lineEnd": 878
            },
            "org.keycloak.authentication.AuthenticationProcessor.authenticateOnly()": {
                "lineStart": 880,
                "lineEnd": 908
            },
            "org.keycloak.authentication.AuthenticationProcessor.attachSession()": {
                "lineStart": 910,
                "lineEnd": 917
            },
            "org.keycloak.authentication.AuthenticationProcessor.attachSession(AuthenticationSessionModel authSession, UserSessionModel userSession, KeycloakSession session, RealmModel realm, ClientConnection connection, EventBuilder event)": {
                "lineStart": 919,
                "lineEnd": 961
            },
            "org.keycloak.authentication.AuthenticationProcessor.evaluateRequiredActionTriggers()": {
                "lineStart": 963,
                "lineEnd": 965
            },
            "org.keycloak.authentication.AuthenticationProcessor.finishAuthentication(LoginProtocol protocol)": {
                "lineStart": 967,
                "lineEnd": 972
            },
            "org.keycloak.authentication.AuthenticationProcessor.validateUser(UserModel authenticatedUser)": {
                "lineStart": 974,
                "lineEnd": 978
            },
            "org.keycloak.authentication.AuthenticationProcessor.authenticationComplete()": {
                "lineStart": 980,
                "lineEnd": 991
            },
            "org.keycloak.authentication.AuthenticationProcessor.nextRequiredAction()": {
                "lineStart": 993,
                "lineEnd": 995
            },
            "org.keycloak.authentication.AuthenticationProcessor.createAuthenticatorContext(AuthenticationExecutionModel model, Authenticator authenticator, List<AuthenticationExecutionModel> executions)": {
                "lineStart": 997,
                "lineEnd": 999
            },
            "org.keycloak.authentication.AuthenticationProcessor.createClientAuthenticatorContext(AuthenticationExecutionModel model, ClientAuthenticator clientAuthenticator, List<AuthenticationExecutionModel> executions)": {
                "lineStart": 1001,
                "lineEnd": 1003
            },
            "org.keycloak.authentication.AuthenticationProcessor$ForwardedFormMessageStore.<init>(ForwardedFormMessageType messageType)": {
                "lineStart": 1007,
                "lineEnd": 1009
            },
            "org.keycloak.authentication.AuthenticationProcessor$ForwardedFormMessageStore.setForwardedMessage(FormMessage message)": {
                "lineStart": 1011,
                "lineEnd": 1020
            },
            "org.keycloak.authentication.AuthenticationProcessor$ForwardedFormMessageStore.getForwardedMessage()": {
                "lineStart": 1022,
                "lineEnd": 1031
            },
            "org.keycloak.authentication.AuthenticationProcessor$ForwardedFormMessageStore.removeForwardedMessage()": {
                "lineStart": 1033,
                "lineEnd": 1036
            },
            "org.keycloak.authentication.AuthenticationProcessor$ForwardedFormMessageType.<init>(String key)": {
                "lineStart": 1043,
                "lineEnd": 1045
            },
            "org.keycloak.authentication.AuthenticationProcessor$ForwardedFormMessageType.getKey()": {
                "lineStart": 1047,
                "lineEnd": 1049
            }
        },
        "241501028a-AuthenticationSessionManager.java": {
            "org.keycloak.services.managers.AuthenticationSessionManager.updateAuthenticationSessionAfterSuccessfulAuthentication(RealmModel realm, AuthenticationSessionModel authSession)": {
                "lineStart": 131,
                "lineEnd": 142
            }
        },
        "bf177aa208-LoginActionsService.java": {
            "org.keycloak.services.resources.LoginActionsService.restartSession(@QueryParam(AUTH_SESSION_ID) String authSessionId, @QueryParam(Constants.CLIENT_ID) String clientId, @QueryParam(Constants.TAB_ID) String tabId, @QueryParam(Constants.SKIP_LOGOUT) String skipLogout)": {
                "lineStart": 177,
                "lineEnd": 203
            }
        }
    },
    "CVE-2022-34174": {
        "91376af16e-HudsonPrivateSecurityRealm.java": {
            "hudson.security.HudsonPrivateSecurityRealm.authenticate2(String username, String password)": {
                "lineStart": 137,
                "lineEnd": 144
            }
        }
    },
    "CVE-2022-0839": {
        "d8eb80e46-XMLChangeLogSAXParser.java": {
            "liquibase.parser.core.xml.XMLChangeLogSAXParser.<init>()": {
                "lineStart": 18,
                "lineEnd": 22
            },
            "liquibase.parser.core.xml.XMLChangeLogSAXParser.parseToNode(String physicalChangeLogLocation, ChangeLogParameters changeLogParameters, ResourceAccessor resourceAccessor)": {
                "lineStart": 40,
                "lineEnd": 118
            }
        }
    },
    "CVE-2021-40525": {
        "e4f56bbb70-MaildirFolder.java": {
            "org.apache.james.mailbox.maildir.MaildirFolder.<init>(String absPath, MailboxPath path, MailboxPathLocker locker)": {
                "lineStart": 62,
                "lineEnd": 73
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.newMaildirMessageName(MaildirFolder folder, String fullName)": {
                "lineStart": 75,
                "lineEnd": 79
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.isMessageNameStrictParse()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.setMessageNameStrictParse(boolean messageNameStrictParse)": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getRootFile()": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.exists()": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.isModified()": {
                "lineStart": 97,
                "lineEnd": 106
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getCurFolder()": {
                "lineStart": 108,
                "lineEnd": 110
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getMailboxIdFile()": {
                "lineStart": 112,
                "lineEnd": 114
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getNewFolder()": {
                "lineStart": 116,
                "lineEnd": 118
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getTmpFolder()": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getNextUid()": {
                "lineStart": 124,
                "lineEnd": 128
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getLastUid()": {
                "lineStart": 130,
                "lineEnd": 136
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getHighestModSeq()": {
                "lineStart": 138,
                "lineEnd": 146
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.readLastUid()": {
                "lineStart": 148,
                "lineEnd": 168
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getUidValidity()": {
                "lineStart": 170,
                "lineEnd": 176
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.setUidValidity(UidValidity uidValidity)": {
                "lineStart": 178,
                "lineEnd": 181
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.readUidValidity()": {
                "lineStart": 183,
                "lineEnd": 196
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.sanitizeUidValidity(long uidValidityValue)": {
                "lineStart": 198,
                "lineEnd": 204
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.saveUidValidity(UidValidity uidValidity)": {
                "lineStart": 206,
                "lineEnd": 216
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.setMailboxId(MaildirId mailboxId)": {
                "lineStart": 218,
                "lineEnd": 220
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.readMailboxId()": {
                "lineStart": 222,
                "lineEnd": 234
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.saveMailboxId(MaildirId id)": {
                "lineStart": 236,
                "lineEnd": 245
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.resetUidValidity()": {
                "lineStart": 247,
                "lineEnd": 251
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getMessageNameByUid(final MessageUid uid)": {
                "lineStart": 253,
                "lineEnd": 284
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getUidMap(final MessageUid from, final MessageUid to)": {
                "lineStart": 286,
                "lineEnd": 311
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getUidMap(MailboxSession session, FilenameFilter filter, MessageUid from, MessageUid to)": {
                "lineStart": 313,
                "lineEnd": 324
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getUidMap(FilenameFilter filter, int limit)": {
                "lineStart": 326,
                "lineEnd": 349
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getRecentMessages()": {
                "lineStart": 351,
                "lineEnd": 432
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.createUidFile()": {
                "lineStart": 434,
                "lineEnd": 465
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.updateUidFile()": {
                "lineStart": 467,
                "lineEnd": 521
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.readUidFile(MessageUid from, MessageUid to)": {
                "lineStart": 523,
                "lineEnd": 563
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.truncateMap(Map<MessageUid, MaildirMessageName> map, MessageUid from, MessageUid to)": {
                "lineStart": 565,
                "lineEnd": 579
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.readUidListHeader(String line)": {
                "lineStart": 581,
                "lineEnd": 599
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.createUidListHeader()": {
                "lineStart": 601,
                "lineEnd": 604
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.stripMetaFromName(String fileName)": {
                "lineStart": 606,
                "lineEnd": 617
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.appendMessage(final String name)": {
                "lineStart": 619,
                "lineEnd": 692
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.update(final MessageUid uid, final String messageName)": {
                "lineStart": 694,
                "lineEnd": 724
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.delete(final MessageUid uid)": {
                "lineStart": 726,
                "lineEnd": 772
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.toString()": {
                "lineStart": 774,
                "lineEnd": 776
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.getACL()": {
                "lineStart": 778,
                "lineEnd": 784
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.readACL()": {
                "lineStart": 786,
                "lineEnd": 802
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.setACL(MailboxACL acl)": {
                "lineStart": 804,
                "lineEnd": 811
            },
            "org.apache.james.mailbox.maildir.MaildirFolder.saveACL(final MailboxACL acl)": {
                "lineStart": 813,
                "lineEnd": 841
            }
        },
        "18a81c7fc6-MaildirStore.java": {
            "org.apache.james.mailbox.maildir.MaildirStore.createMaildirFolder(Mailbox mailbox)": {
                "lineStart": 44,
                "lineEnd": 48
            },
            "org.apache.james.mailbox.maildir.MaildirStore.loadMailbox(MailboxSession session, MailboxPath mailboxPath)": {
                "lineStart": 55,
                "lineEnd": 63
            },
            "org.apache.james.mailbox.maildir.MaildirStore.loadMailbox(MailboxSession session, File mailboxFile, MailboxPath mailboxPath)": {
                "lineStart": 65,
                "lineEnd": 77
            }
        },
        "edadc5cbd3-MaildirMailboxMapper.java": {
            "org.apache.james.mailbox.maildir.mail.MaildirMailboxMapper.visitUsersForMailboxList(File domain, File[] users)": {
                "lineStart": 238,
                "lineEnd": 258
            }
        }
    },
    "CVE-2020-2091": {
        "950706c-AmazonEC2Cloud.java": {
            "hudson.plugins.ec2.AmazonEC2Cloud.<init>(String cloudName, boolean useInstanceProfileForCredentials, String credentialsId, String region, String privateKey, String instanceCapStr, List<? extends SlaveTemplate> templates, String roleArn, String roleSessionName)": {
                "lineStart": 31,
                "lineEnd": 34
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getCloudName()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getDisplayName()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.createCloudId(String cloudName)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getRegion()": {
                "lineStart": 48,
                "lineEnd": 56
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getEc2EndpointUrl(String region)": {
                "lineStart": 58,
                "lineEnd": 66
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getEc2EndpointUrl()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.getS3EndpointUrl()": {
                "lineStart": 72,
                "lineEnd": 80
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.isNoDelayProvisioning()": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.setNoDelayProvisioning(boolean noDelayProvisioning)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "hudson.plugins.ec2.AmazonEC2Cloud.createCredentialsProvider()": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.getDisplayName()": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doCheckCloudName(@QueryParameter String value)": {
                "lineStart": 99,
                "lineEnd": 121
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doFillRegionItems(@QueryParameter String altEC2Endpoint, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId)": {
                "lineStart": 123,
                "lineEnd": 140
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.determineEC2EndpointURL(@Nullable String altEC2Endpoint)": {
                "lineStart": 142,
                "lineEnd": 149
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doTestConnection(@QueryParameter String region, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String privateKey, @QueryParameter String roleArn, @QueryParameter String roleSessionName)": {
                "lineStart": 151,
                "lineEnd": 157
            },
            "hudson.plugins.ec2.AmazonEC2Cloud$DescriptorImpl.doGenerateKey(StaplerResponse rsp, @QueryParameter String region, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String roleArn, @QueryParameter String roleSessionName)": {
                "lineStart": 159,
                "lineEnd": 161
            }
        },
        "9c45d2d-EC2Cloud.java": {
            "hudson.plugins.ec2.EC2Cloud$DescriptorImpl.doTestConnection(URL ec2endpoint, boolean useInstanceProfileForCredentials, String credentialsId, String privateKey, String roleArn, String roleSessionName, String region)": {
                "lineStart": 843,
                "lineEnd": 865
            },
            "hudson.plugins.ec2.EC2Cloud$DescriptorImpl.doGenerateKey(StaplerResponse rsp, URL ec2EndpointUrl, boolean useInstanceProfileForCredentials, String credentialsId, String roleArn, String roleSessionName, String region)": {
                "lineStart": 867,
                "lineEnd": 897
            }
        },
        "e6bc0d0-Eucalyptus.java": {
            "hudson.plugins.ec2.Eucalyptus.<init>(URL ec2endpoint, URL s3endpoint, boolean useInstanceProfileForCredentials, String credentialsId, String privateKey, String instanceCapStr, List<SlaveTemplate> templates, String roleArn, String roleSessionName)": {
                "lineStart": 14,
                "lineEnd": 18
            },
            "hudson.plugins.ec2.Eucalyptus.getEc2EndpointUrl()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "hudson.plugins.ec2.Eucalyptus.getS3EndpointUrl()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "hudson.plugins.ec2.Eucalyptus$DescriptorImpl.getDisplayName()": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "hudson.plugins.ec2.Eucalyptus$DescriptorImpl.doTestConnection(@QueryParameter URL ec2endpoint, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String privateKey, @QueryParameter String roleArn, @QueryParameter String roleSessionName, @QueryParameter String region)": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "hudson.plugins.ec2.Eucalyptus$DescriptorImpl.doGenerateKey(StaplerResponse rsp, @QueryParameter URL url, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String roleArn, @QueryParameter String roleSessionName, @QueryParameter String region)": {
                "lineStart": 37,
                "lineEnd": 39
            }
        }
    },
    "CVE-2024-3656": {
        "a37dcd6b03-UserResource.java": {
            "org.keycloak.admin.ui.rest.UserResource.<init>(KeycloakSession session, UserModel user)": {
                "lineStart": 26,
                "lineEnd": 29
            },
            "org.keycloak.admin.ui.rest.UserResource.getUnmanagedAttributes()": {
                "lineStart": 31,
                "lineEnd": 47
            }
        },
        "fee417a04c-UsersResource.java": {
            "org.keycloak.admin.ui.rest.UsersResource.getUser(@PathParam(\"id\") String id)": {
                "lineStart": 20,
                "lineEnd": 40
            }
        },
        "86693805d3-ClientRegistrationPolicyResource.java": {
            "org.keycloak.services.resources.admin.ClientRegistrationPolicyResource.getProviders()": {
                "lineStart": 36,
                "lineEnd": 50
            }
        }
    },
    "CVE-2021-32634": {
        "ad81768f-IMobileAgent.java": {
            "emissary.core.IMobileAgent.agentID()": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "emissary.core.IMobileAgent.getPayload()": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "emissary.core.IMobileAgent.go(Object payload, emissary.place.IServiceProviderPlace sourcePlace)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "emissary.core.IMobileAgent.arrive(Object payload, emissary.place.IServiceProviderPlace arrivalPlace, int mec, List<emissary.directory.DirectoryEntry> iq)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "emissary.core.IMobileAgent.getMoveErrorCount()": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "emissary.core.IMobileAgent.getItineraryQueueItems()": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "emissary.core.IMobileAgent.isInUse()": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "emissary.core.IMobileAgent.getPayloadForTransport()": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "emissary.core.IMobileAgent.getName()": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "emissary.core.IMobileAgent.getLastPlaceProcessed()": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "emissary.core.IMobileAgent.killAgent()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "emissary.core.IMobileAgent.killAgentAsync()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "emissary.core.IMobileAgent.isZombie()": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "emissary.core.IMobileAgent.interrupt()": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "emissary.core.IMobileAgent.getMaxMoveErrors()": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "emissary.core.IMobileAgent.setMaxMoveErrors(int value)": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "emissary.core.IMobileAgent.getMaxItinerarySteps()": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "emissary.core.IMobileAgent.setMaxItinerarySteps(int value)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "emissary.core.IMobileAgent.payloadCount()": {
                "lineStart": 24,
                "lineEnd": 26
            }
        },
        "1607f04c-WorkBundle.java": {
            "emissary.pickup.WorkBundle.addWorkUnit(WorkUnit workUnit, long fileModificationTimeInMillis, long fileSize)": {
                "lineStart": 102,
                "lineEnd": 114
            },
            "emissary.pickup.WorkBundle.addFileName(String file)": {
                "lineStart": 134,
                "lineEnd": 137
            },
            "emissary.pickup.WorkBundle.addFileNames(String[] file)": {
                "lineStart": 143,
                "lineEnd": 149
            },
            "emissary.pickup.WorkBundle.addFileNames(List<String> list)": {
                "lineStart": 151,
                "lineEnd": 157
            },
            "emissary.pickup.WorkBundle.addWorkUnit(WorkUnit workUnit)": {
                "lineStart": 97,
                "lineEnd": 100
            },
            "emissary.pickup.WorkBundle.addWorkUnits(List<WorkUnit> list)": {
                "lineStart": 116,
                "lineEnd": 119
            }
        },
        "7cfae219-WorkUnit.java": {
            "emissary.pickup.WorkUnit.<init>(String fileName)": {
                "lineStart": 7,
                "lineEnd": 9
            },
            "emissary.pickup.WorkUnit.<init>(String fileName, String transactionId, boolean failedToParse, boolean failedToProcess)": {
                "lineStart": 11,
                "lineEnd": 16
            },
            "emissary.pickup.WorkUnit.getFileName()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "emissary.pickup.WorkUnit.setFilename(String fileName)": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "emissary.pickup.WorkUnit.getTransactionId()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "emissary.pickup.WorkUnit.setTransactionId(String transactionId)": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "emissary.pickup.WorkUnit.setFailedToParse()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "emissary.pickup.WorkUnit.failedToParse()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "emissary.pickup.WorkUnit.setFailedToProcess()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "emissary.pickup.WorkUnit.failedToProcess()": {
                "lineStart": 46,
                "lineEnd": 48
            }
        },
        "63ebd7dd-MoveToAdapter.java": {
            "emissary.server.mvc.adapters.MoveToAdapter.reconfigure()": {
                "lineStart": 52,
                "lineEnd": 65
            },
            "emissary.server.mvc.adapters.MoveToAdapter.inboundMoveTo(final HttpServletRequest req)": {
                "lineStart": 68,
                "lineEnd": 92
            },
            "emissary.server.mvc.adapters.MoveToAdapter.outboundMoveTo(final String place, final IMobileAgent agent)": {
                "lineStart": 94,
                "lineEnd": 134
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.<init>(final HttpServletRequest req)": {
                "lineStart": 142,
                "lineEnd": 164
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.setPayload(final String s)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.getPlaceName()": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.setPlaceName(final String argPlaceName)": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.getPayload()": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.setErrorCount(final int c)": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.getErrorCount()": {
                "lineStart": 186,
                "lineEnd": 188
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.getItineraryItemCount()": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "emissary.server.mvc.adapters.MoveToAdapter$MoveToRequestBean.getItineraryItems()": {
                "lineStart": 194,
                "lineEnd": 197
            }
        },
        "dc46a65b-WorkSpaceAdapter.java": {
            "emissary.server.mvc.adapters.WorkSpaceAdapter$EnqueRequestBean.setPaths(final String s)": {
                "lineStart": 209,
                "lineEnd": 219
            }
        },
        "6966f485-MoveToAction.java": {
            "emissary.server.mvc.internal.MoveToAction.moveTo(@Context HttpServletRequest request)": {
                "lineStart": 10,
                "lineEnd": 27
            }
        },
        "0fd33719-WorkSpaceClientEnqueueAction.java": {
            "emissary.server.mvc.internal.WorkSpaceClientEnqueueAction.workspaceClientEnqueue(@FormParam(WorkSpaceAdapter.CLIENT_NAME) String clientName, @FormParam(WorkSpaceAdapter.WORK_BUNDLE_OBJ) String workBundleString)": {
                "lineStart": 20,
                "lineEnd": 46
            }
        },
        "8c9b3075-PayloadUtil.java": {
            "emissary.util.PayloadUtil.serializeToByteBuffer(final Object payload)": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "emissary.util.PayloadUtil.serializeToBytes(final Object payload)": {
                "lineStart": 95,
                "lineEnd": 99
            },
            "emissary.util.PayloadUtil.serializeToString(final Object payload)": {
                "lineStart": 101,
                "lineEnd": 114
            },
            "emissary.util.PayloadUtil.serializeToStream(final OutputStream os, final Object payload)": {
                "lineStart": 116,
                "lineEnd": 134
            },
            "emissary.util.PayloadUtil.deserialize(final String s)": {
                "lineStart": 136,
                "lineEnd": 158
            },
            "emissary.util.PayloadUtil.toXml(final IBaseDataObject d)": {
                "lineStart": 160,
                "lineEnd": 216
            },
            "emissary.util.PayloadUtil.toXml(final List<IBaseDataObject> list)": {
                "lineStart": 222,
                "lineEnd": 232
            },
            "emissary.util.PayloadUtil.printFormattedMetadata(final IBaseDataObject payload)": {
                "lineStart": 239,
                "lineEnd": 247
            }
        }
    },
    "CVE-2023-31453": {
        "ddd942dc4-InlongConsumeProcessService.java": {
            "org.apache.inlong.manager.service.consume.InlongConsumeProcessService.startProcess(Integer id, String operator)": {
                "lineStart": 13,
                "lineEnd": 16
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeProcessService.genApplyConsumeProcessForm(Integer id)": {
                "lineStart": 18,
                "lineEnd": 22
            }
        },
        "cb295cb22-InlongConsumeService.java": {
            "org.apache.inlong.manager.service.consume.InlongConsumeService.save(InlongConsumeRequest request, String operator)": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.saveBySystem(InlongGroupInfo groupInfo, String topic, String consumerGroup)": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.get(Integer id)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.consumerGroupExists(String consumerGroup, Integer excludeSelfId)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.list(InlongConsumePageRequest request)": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.countStatus(String username)": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.update(@Valid @NotNull(message = \"inlong consume request cannot be null\") InlongConsumeRequest request, String operator)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.updateStatus(Integer id, Integer status, String operator)": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeService.delete(Integer id, String operator)": {
                "lineStart": 20,
                "lineEnd": 20
            }
        },
        "f22cb1744-InlongConsumeServiceImpl.java": {
            "org.apache.inlong.manager.service.consume.InlongConsumeServiceImpl.get(Integer id)": {
                "lineStart": 90,
                "lineEnd": 102
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeServiceImpl.update(InlongConsumeRequest request, String operator)": {
                "lineStart": 142,
                "lineEnd": 161
            },
            "org.apache.inlong.manager.service.consume.InlongConsumeServiceImpl.delete(Integer id, String operator)": {
                "lineStart": 186,
                "lineEnd": 202
            }
        },
        "bfaebf883-StreamSinkService.java": {
            "org.apache.inlong.manager.service.sink.StreamSinkService.save(SinkRequest request, String operator)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.save(SinkRequest request, UserInfo opInfo)": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.get(Integer id)": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.get(Integer id, UserInfo opInfo)": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.listSink(String groupId, @Nullable String streamId)": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.listBrief(String groupId, String streamId)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.getSinksMap(InlongGroupInfo groupInfo, List<InlongStreamInfo> streamInfos)": {
                "lineStart": 24,
                "lineEnd": 24
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.getCount(String groupId, String streamId)": {
                "lineStart": 25,
                "lineEnd": 25
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.listByCondition(SinkPageRequest request)": {
                "lineStart": 26,
                "lineEnd": 26
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.listByCondition(SinkPageRequest request, UserInfo opInfo)": {
                "lineStart": 27,
                "lineEnd": 27
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.update(SinkRequest sinkRequest, String operator)": {
                "lineStart": 28,
                "lineEnd": 28
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.update(SinkRequest sinkRequest, UserInfo opInfo)": {
                "lineStart": 29,
                "lineEnd": 29
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.updateByKey(SinkRequest sinkRequest, String operator)": {
                "lineStart": 30,
                "lineEnd": 30
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.updateStatus(Integer id, int status, String log)": {
                "lineStart": 31,
                "lineEnd": 31
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.delete(Integer id, Boolean startProcess, String operator)": {
                "lineStart": 32,
                "lineEnd": 32
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.delete(Integer id, Boolean startProcess, UserInfo opInfo)": {
                "lineStart": 33,
                "lineEnd": 33
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.deleteByKey(String groupId, String streamId, String name, Boolean startProcess, String operator)": {
                "lineStart": 34,
                "lineEnd": 34
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.logicDeleteAll(String groupId, String streamId, String operator)": {
                "lineStart": 35,
                "lineEnd": 35
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.deleteAll(String groupId, String streamId, String operator)": {
                "lineStart": 36,
                "lineEnd": 36
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.getExistsStreamIdList(String groupId, String sinkType, List<String> streamIdList)": {
                "lineStart": 37,
                "lineEnd": 37
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.getSinkTypeList(String groupId, String streamId)": {
                "lineStart": 38,
                "lineEnd": 38
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.updateAfterApprove(List<SinkApproveDTO> sinkApproveList, String operator)": {
                "lineStart": 39,
                "lineEnd": 39
            },
            "org.apache.inlong.manager.service.sink.StreamSinkService.parseFields(ParseFieldRequest parseFieldRequest)": {
                "lineStart": 40,
                "lineEnd": 40
            }
        },
        "f369d2214-StreamSinkServiceImpl.java": {
            "org.apache.inlong.manager.service.sink.StreamSinkServiceImpl.listByCondition(SinkPageRequest request)": {
                "lineStart": 250,
                "lineEnd": 271
            }
        },
        "0dafa4765-InlongConsumeController.java": {
            "org.apache.inlong.manager.web.controller.InlongConsumeController.get(@PathVariable(name = \"id\") Integer id)": {
                "lineStart": 42,
                "lineEnd": 46
            }
        },
        "6faf55010-StreamSinkController.java": {
            "org.apache.inlong.manager.web.controller.StreamSinkController.listByCondition(@RequestBody SinkPageRequest request)": {
                "lineStart": 46,
                "lineEnd": 50
            }
        }
    },
    "CVE-2020-1729": {
        "c3bfe66d-SecuritySupport.java": {
            "io.smallrye.config.SecuritySupport.getContextClassLoader()": {
                "lineStart": 10,
                "lineEnd": 24
            }
        },
        "7fe216b8-ConfigProducer.java": {
            "io.smallrye.config.inject.ConfigProducer.getConfig(InjectionPoint injectionPoint)": {
                "lineStart": 13,
                "lineEnd": 16
            },
            "io.smallrye.config.inject.ConfigProducer.produceStringConfigProperty(InjectionPoint ip)": {
                "lineStart": 18,
                "lineEnd": 21
            },
            "io.smallrye.config.inject.ConfigProducer.getLongValue(InjectionPoint ip)": {
                "lineStart": 23,
                "lineEnd": 26
            },
            "io.smallrye.config.inject.ConfigProducer.getIntegerValue(InjectionPoint ip)": {
                "lineStart": 28,
                "lineEnd": 31
            },
            "io.smallrye.config.inject.ConfigProducer.produceFloatConfigProperty(InjectionPoint ip)": {
                "lineStart": 33,
                "lineEnd": 36
            },
            "io.smallrye.config.inject.ConfigProducer.produceDoubleConfigProperty(InjectionPoint ip)": {
                "lineStart": 38,
                "lineEnd": 41
            },
            "io.smallrye.config.inject.ConfigProducer.produceBooleanConfigProperty(InjectionPoint ip)": {
                "lineStart": 43,
                "lineEnd": 46
            },
            "io.smallrye.config.inject.ConfigProducer.produceShortConfigProperty(InjectionPoint ip)": {
                "lineStart": 48,
                "lineEnd": 51
            },
            "io.smallrye.config.inject.ConfigProducer.produceByteConfigProperty(InjectionPoint ip)": {
                "lineStart": 53,
                "lineEnd": 56
            },
            "io.smallrye.config.inject.ConfigProducer.produceCharacterConfigProperty(InjectionPoint ip)": {
                "lineStart": 58,
                "lineEnd": 61
            },
            "io.smallrye.config.inject.ConfigProducer.produceOptionalConfigValue(InjectionPoint ip)": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "io.smallrye.config.inject.ConfigProducer.producesSetConfigProperty(InjectionPoint ip)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "io.smallrye.config.inject.ConfigProducer.producesListConfigProperty(InjectionPoint ip)": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "io.smallrye.config.inject.ConfigProducer.produceOptionalIntConfigProperty(InjectionPoint ip)": {
                "lineStart": 75,
                "lineEnd": 78
            },
            "io.smallrye.config.inject.ConfigProducer.produceOptionalLongConfigProperty(InjectionPoint ip)": {
                "lineStart": 80,
                "lineEnd": 83
            },
            "io.smallrye.config.inject.ConfigProducer.produceOptionalDoubleConfigProperty(InjectionPoint ip)": {
                "lineStart": 85,
                "lineEnd": 88
            }
        }
    },
    "CVE-2022-26884": {
        "7115e24aad-LoggerRequestProcessor.java": {
            "org.apache.dolphinscheduler.server.log.LoggerRequestProcessor.checkPathSecurity(String path)": {
                "lineStart": 108,
                "lineEnd": 115
            }
        }
    },
    "CVE-2022-42467": {
        "69cc8d67b3e-IsisConfiguration.java": {
            "org.apache.isis.core.config.IsisConfiguration.<init>(final ConfigurableEnvironment environment)": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "org.apache.isis.core.config.IsisConfiguration$Applib$Annotation$ConfigPropsForPropertyOrParameterLayout.getLabelPosition()": {
                "lineStart": 95,
                "lineEnd": 95
            },
            "org.apache.isis.core.config.IsisConfiguration$Core$MetaModel$Introspector.getPolicy()": {
                "lineStart": 291,
                "lineEnd": 293
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket.isMaxTitleLenghtValid(final int len)": {
                "lineStart": 437,
                "lineEnd": 439
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket.asTitleLenght(final int len)": {
                "lineStart": 441,
                "lineEnd": 443
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket.getMaxTitleLengthInParentedTables()": {
                "lineStart": 446,
                "lineEnd": 448
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket.setMaxTitleLengthInParentedTables(final int val)": {
                "lineStart": 450,
                "lineEnd": 452
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket.getMaxTitleLengthInStandaloneTables()": {
                "lineStart": 455,
                "lineEnd": 457
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket.setMaxTitleLengthInStandaloneTables(final int val)": {
                "lineStart": 459,
                "lineEnd": 461
            },
            "org.apache.isis.core.config.IsisConfiguration$Viewer$Wicket$Credit.isDefined()": {
                "lineStart": 506,
                "lineEnd": 506
            },
            "org.apache.isis.core.config.IsisConfiguration$Extensions$CommandLog$PublishPolicy.isAlways()": {
                "lineStart": 614,
                "lineEnd": 614
            },
            "org.apache.isis.core.config.IsisConfiguration$Extensions$CommandLog$PublishPolicy.isOnlyIfSystemChanged()": {
                "lineStart": 615,
                "lineEnd": 615
            },
            "org.apache.isis.core.config.IsisConfiguration.listOf(final String... values)": {
                "lineStart": 723,
                "lineEnd": 725
            },
            "org.apache.isis.core.config.IsisConfiguration.asMap(final String... mappings)": {
                "lineStart": 733,
                "lineEnd": 749
            },
            "org.apache.isis.core.config.IsisConfiguration$AssignableFromValidator.initialize(final AssignableFrom assignableFrom)": {
                "lineStart": 762,
                "lineEnd": 771
            },
            "org.apache.isis.core.config.IsisConfiguration$AssignableFromValidator.isValid(final Class<?> candidateClass, final ConstraintValidatorContext constraintContext)": {
                "lineStart": 773,
                "lineEnd": 779
            },
            "org.apache.isis.core.config.IsisConfiguration$OneOfValidator.initialize(final OneOf assignableFrom)": {
                "lineStart": 794,
                "lineEnd": 797
            },
            "org.apache.isis.core.config.IsisConfiguration$OneOfValidator.isValid(final String candidateValue, final ConstraintValidatorContext constraintContext)": {
                "lineStart": 799,
                "lineEnd": 801
            }
        },
        "47c58e4813b-H2ManagerMenu.java": {
            "org.apache.isis.testing.h2console.ui.services.H2ManagerMenu.openH2Console()": {
                "lineStart": 27,
                "lineEnd": 35
            }
        },
        "dc2afe80f2b-WebModuleH2Console.java": {
            "org.apache.isis.testing.h2console.ui.webmodule.WebModuleH2Console.init(final ServletContext ctx)": {
                "lineStart": 41,
                "lineEnd": 49
            },
            "org.apache.isis.testing.h2console.ui.webmodule.WebModuleH2Console.isApplicable(WebModuleContext ctx)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "org.apache.isis.testing.h2console.ui.webmodule.WebModuleH2Console$H2WebServlet.init()": {
                "lineStart": 58,
                "lineEnd": 79
            },
            "org.apache.isis.testing.h2console.ui.webmodule.WebModuleH2Console$H2WebServlet.configure(String jdbcUrl)": {
                "lineStart": 81,
                "lineEnd": 83
            }
        }
    },
    "CVE-2021-35516": {
        "2f2454745-SevenZFile.java": {
            "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(final String what, final long value)": {
                "lineStart": 1314,
                "lineEnd": 1319
            },
            "org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(final long startHeaderCrc)": {
                "lineStart": 284,
                "lineEnd": 293
            },
            "org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(final ByteBuffer header, final Archive archive)": {
                "lineStart": 295,
                "lineEnd": 320
            },
            "org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(final ByteBuffer header, final Archive archive, final byte[] password)": {
                "lineStart": 334,
                "lineEnd": 360
            }
        }
    },
    "CVE-2021-28163": {
        "8ecfa190b4-ScanningAppProvider.java": {
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider.setMonitoredResources(List<Resource> resources)": {
                "lineStart": 183,
                "lineEnd": 186
            }
        },
        "3505802413-WebAppProvider.java": {
            "org.eclipse.jetty.deploy.providers.WebAppProvider$Filter.accept(File dir, String name)": {
                "lineStart": 25,
                "lineEnd": 58
            }
        }
    },
    "CVE-2021-29061": {
        "a635413-VFSURIValidator.java": {
            "com.googlecode.vfsjfilechooser2.utils.VFSURIValidator.isValid(String _uri)": {
                "lineStart": 110,
                "lineEnd": 274
            },
            "com.googlecode.vfsjfilechooser2.utils.VFSURIValidator.main(String[] args)": {
                "lineStart": 283,
                "lineEnd": 2536
            }
        }
    },
    "CVE-2023-6563": {
        "0182b25d0b-JpaUserSessionPersisterProvider.java": {
            "org.keycloak.models.jpa.session.JpaUserSessionPersisterProvider.loadUserSessionsStream(RealmModel realm, ClientModel client, boolean offline, Integer firstResult, Integer maxResults)": {
                "lineStart": 247,
                "lineEnd": 264
            },
            "org.keycloak.models.jpa.session.JpaUserSessionPersisterProvider.loadUserSessionsStream(RealmModel realm, UserModel user, boolean offline, Integer firstResult, Integer maxResults)": {
                "lineStart": 266,
                "lineEnd": 273
            },
            "org.keycloak.models.jpa.session.JpaUserSessionPersisterProvider.loadUserSessionsStream(Integer firstResult, Integer maxResults, boolean offline, String lastUserSessionId)": {
                "lineStart": 275,
                "lineEnd": 279
            },
            "org.keycloak.models.jpa.session.JpaUserSessionPersisterProvider.loadUserSessionsWithClientSessions(TypedQuery<PersistentUserSessionEntity> query, String offlineStr)": {
                "lineStart": 281,
                "lineEnd": 312
            }
        },
        "62d5c7003d-PersistentClientSessionEntity.java": {
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getUserSessionId()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setUserSessionId(String userSessionId)": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getClientId()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setClientId(String clientId)": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getClientStorageProvider()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setClientStorageProvider(String clientStorageProvider)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getExternalClientId()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setExternalClientId(String externalClientId)": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getTimestamp()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setTimestamp(int timestamp)": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getOffline()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setOffline(String offline)": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.getData()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity.setData(String data)": {
                "lineStart": 78,
                "lineEnd": 80
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.<init>()": {
                "lineStart": 88,
                "lineEnd": 89
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.<init>(String userSessionId, String clientId, String clientStorageProvider, String externalClientId, String offline)": {
                "lineStart": 91,
                "lineEnd": 97
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.getUserSessionId()": {
                "lineStart": 99,
                "lineEnd": 101
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.getClientId()": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.getOffline()": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.getClientStorageProvider()": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.getExternalClientId()": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.equals(Object o)": {
                "lineStart": 119,
                "lineEnd": 129
            },
            "org.keycloak.models.jpa.session.PersistentClientSessionEntity$Key.hashCode()": {
                "lineStart": 131,
                "lineEnd": 138
            }
        }
    },
    "CVE-2022-29249": {
        "50ce25a-Security.java": {
            "io.github.javaezlib.javaez.extensions.Security.lockText(String text, String password)": {
                "lineStart": 14,
                "lineEnd": 46
            },
            "io.github.javaezlib.javaez.extensions.Security.unlockText(String text, String password)": {
                "lineStart": 48,
                "lineEnd": 69
            }
        }
    },
    "CVE-2022-36915": {
        "ef48523-SignApksBuilder.java": {
            "org.jenkinsci.plugins.androidsigning.SignApksBuilder$SignApksDescriptor.doCheckApksToSign(@AncestorInPath AbstractProject project, @QueryParameter String value)": {
                "lineStart": 394,
                "lineEnd": 422
            }
        }
    },
    "CVE-2022-45320": {
        "881a6bd2be67f-WikiPageLocalServiceImpl.java": {
            "com.liferay.wiki.service.impl.WikiPageLocalServiceImpl._updatePage(long userId, WikiPage oldPage, String newTitle, String content, String summary, boolean minorEdit, String format, String parentTitle, String redirectTitle, ServiceContext serviceContext)": {
                "lineStart": 1857,
                "lineEnd": 1923
            }
        }
    },
    "CVE-2022-27772": {
        "2b136064ed-AbstractConfigurableWebServerFactory.java": {
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir(String prefix)": {
                "lineStart": 95,
                "lineEnd": 108
            }
        }
    },
    "CVE-2023-24621": {
        "0000000-SafeYamlConfig.java": {
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.<init>()": {
                "lineStart": 18,
                "lineEnd": 19
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.<init>(int port)": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getPort()": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setPort(int port)": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getAddress()": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setAddress(InetAddress address)": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getErrorPages()": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setErrorPages(Set<? extends ErrorPage> errorPages)": {
                "lineStart": 45,
                "lineEnd": 48
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.addErrorPages(ErrorPage... errorPages)": {
                "lineStart": 50,
                "lineEnd": 53
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getSsl()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setSsl(Ssl ssl)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getSslStoreProvider()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setSslStoreProvider(SslStoreProvider sslStoreProvider)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getHttp2()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setHttp2(Http2 http2)": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getCompression()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setCompression(Compression compression)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.getServerHeader()": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.setServerHeader(String serverHeader)": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir(String prefix)": {
                "lineStart": 95,
                "lineEnd": 108
            }
        },
        "78edd05-YamlConfig.java": {
            "com.esotericsoftware.yamlbeans.YamlConfig.<init>()": {
                "lineStart": 27,
                "lineEnd": 34
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setAllowDuplicates(boolean allowDuplicates)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setClassTag(String tag, Class type)": {
                "lineStart": 40,
                "lineEnd": 46
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setScalarSerializer(Class type, ScalarSerializer serializer)": {
                "lineStart": 48,
                "lineEnd": 52
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPropertyElementType(Class type, String propertyName, Class elementType)": {
                "lineStart": 54,
                "lineEnd": 67
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPropertyDefaultType(Class type, String propertyName, Class defaultType)": {
                "lineStart": 69,
                "lineEnd": 78
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setBeanProperties(boolean beanProperties)": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPrivateFields(boolean privateFields)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setPrivateConstructors(boolean privateConstructors)": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "com.esotericsoftware.yamlbeans.YamlConfig.setTagSuffix(String tagSuffix)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.<init>()": {
                "lineStart": 110,
                "lineEnd": 112
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setExplicitFirstDocument(boolean explicitFirstDocument)": {
                "lineStart": 114,
                "lineEnd": 116
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setExplicitEndDocument(boolean explicitEndDocument)": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteRootTags(boolean writeRootTags)": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteRootElementTags(boolean writeRootElementTags)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteDefaultValues(boolean writeDefaultValues)": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setAutoAnchor(boolean autoAnchor)": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setKeepBeanPropertyOrder(boolean keepBeanPropertyOrder)": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setVersion(Version version)": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setTags(Map<String, String> tags)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setCanonical(boolean canonical)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setIndentSize(int indentSize)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWrapColumn(int wrapColumn)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setUseVerbatimTags(boolean useVerbatimTags)": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setEscapeUnicode(boolean escapeUnicode)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setWriteClassname(WriteClassName write)": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setQuoteChar(Quote quote)": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.getQuote()": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setFlowStyle(boolean flowStyle)": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.isFlowStyle()": {
                "lineStart": 186,
                "lineEnd": 188
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$WriteConfig.setPrettyFlow(boolean prettyFlow)": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.<init>()": {
                "lineStart": 204,
                "lineEnd": 205
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setDefaultVersion(Version defaultVersion)": {
                "lineStart": 207,
                "lineEnd": 210
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setClassLoader(ClassLoader classLoader)": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setConstructorParameters(Class type, Class[] parameterTypes, String[] parameterNames)": {
                "lineStart": 216,
                "lineEnd": 230
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setIgnoreUnknownProperties(boolean allowUnknownProperties)": {
                "lineStart": 232,
                "lineEnd": 234
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setClassTags(boolean classTags)": {
                "lineStart": 236,
                "lineEnd": 238
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setAutoMerge(boolean autoMerge)": {
                "lineStart": 240,
                "lineEnd": 242
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$ReadConfig.setGuessNumberTypes(boolean guessNumberTypes)": {
                "lineStart": 244,
                "lineEnd": 246
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$Quote.<init>(char c)": {
                "lineStart": 260,
                "lineEnd": 262
            },
            "com.esotericsoftware.yamlbeans.YamlConfig$Quote.getStyle()": {
                "lineStart": 264,
                "lineEnd": 266
            }
        },
        "24c2990-YamlReader.java": {
            "com.esotericsoftware.yamlbeans.YamlReader.readValue(Class type, Class elementType, Class defaultType)": {
                "lineStart": 114,
                "lineEnd": 135
            },
            "com.esotericsoftware.yamlbeans.YamlReader.readValueInternal(Class type, Class elementType, String anchor)": {
                "lineStart": 168,
                "lineEnd": 426
            }
        }
    },
    "CVE-2023-24997": {
        "443e8f9c6-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 109,
                "lineEnd": 130
            }
        }
    },
    "CVE-2024-28848": {
        "e1faf1c191-AlertUtil.java": {
            "org.openmetadata.service.events.subscription.AlertUtil.evaluateAlertConditions(ChangeEvent changeEvent, List<EventFilterRule> alertFilterRules)": {
                "lineStart": 153,
                "lineEnd": 168
            }
        },
        "5a0d45053d-EventSubscriptionResource.java": {
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.triggerDataInsightJob(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @Parameter(description = \"Id of the event Subscription\", schema = @Schema(type = \"UUID\")) @PathParam(\"id\") UUID id)": {
                "lineStart": 171,
                "lineEnd": 176
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.listEventSubscriptionFunctions(@Context UriInfo uriInfo, @Context SecurityContext securityContext)": {
                "lineStart": 228,
                "lineEnd": 231
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.listEventSubResources(@Context UriInfo uriInfo, @Context SecurityContext securityContext)": {
                "lineStart": 233,
                "lineEnd": 236
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.validateCondition(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @Parameter(description = \"Expression to validate\", schema = @Schema(type = \"string\")) @PathParam(\"expression\") String expression)": {
                "lineStart": 238,
                "lineEnd": 241
            }
        },
        "27606503c1-JwtFilter.java": {
            "org.openmetadata.service.security.JwtFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 71,
                "lineEnd": 101
            }
        },
        "5fd336372f-CompiledRule.java": {
            "org.openmetadata.service.security.policyevaluator.CompiledRule.validateExpression(String condition, Class<T> clz)": {
                "lineStart": 42,
                "lineEnd": 58
            },
            "org.openmetadata.service.security.policyevaluator.CompiledRule.matchExpression(PolicyContext policyContext, SubjectContext subjectContext, ResourceContextInterface resourceContext)": {
                "lineStart": 181,
                "lineEnd": 190
            }
        }
    },
    "CVE-2023-34055": {
        "622877ca53-WebFluxTags.java": {
            "org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTags.method(ServerWebExchange exchange)": {
                "lineStart": 25,
                "lineEnd": 27
            }
        },
        "e5e2147bf8-WebMvcTags.java": {
            "org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags.method(HttpServletRequest request)": {
                "lineStart": 25,
                "lineEnd": 27
            }
        }
    },
    "CVE-2023-46650": {
        "fcac430-GithubLinkAnnotator.java": {
            "com.coravy.hudson.plugins.github.GithubLinkAnnotator.annotate(final GithubUrl url, final MarkupText text, final Entry change)": {
                "lineStart": 21,
                "lineEnd": 33
            },
            "com.coravy.hudson.plugins.github.GithubLinkAnnotator$LinkMarkup.process(MarkupText text, String url)": {
                "lineStart": 45,
                "lineEnd": 50
            }
        }
    },
    "CVE-2021-39239": {
        "e30edad684-ReaderTriX.java": {
            "org.apache.jena.riot.lang.ReaderTriX.read(InputStream in, String baseURI, ContentType ct, StreamRDF output, Context context)": {
                "lineStart": 33,
                "lineEnd": 44
            },
            "org.apache.jena.riot.lang.ReaderTriX.read(Reader reader, String baseURI, ContentType ct, StreamRDF output, Context context)": {
                "lineStart": 46,
                "lineEnd": 57
            }
        },
        "295c8ccad7-ResultsStAX.java": {
            "org.apache.jena.riot.resultset.rw.ResultsStAX.read(InputStream in, Model model, Context context)": {
                "lineStart": 35,
                "lineEnd": 48
            },
            "org.apache.jena.riot.resultset.rw.ResultsStAX.read(Reader in, Model model, Context context)": {
                "lineStart": 50,
                "lineEnd": 63
            }
        },
        "77cd22c4d7-RDFXMLParser.java": {
            "org.apache.jena.rdfxml.xmlinput.impl.RDFXMLParser.create()": {
                "lineStart": 37,
                "lineEnd": 49
            }
        }
    },
    "CVE-2022-38398": {
        "a9e5d8828-DefaultExternalResourceSecurity.java": {
            "org.apache.batik.bridge.DefaultExternalResourceSecurity.<init>(ParsedURL externalResourceURL, ParsedURL docURL)": {
                "lineStart": 16,
                "lineEnd": 32
            }
        }
    },
    "CVE-2021-20220": {
        "5c871c2b8-Connectors.java": {
            "io.undertow.server.Connectors.flattenCookies(final HttpServerExchange exchange)": {
                "lineStart": 60,
                "lineEnd": 70
            },
            "io.undertow.server.Connectors.addCookie(final HttpServerExchange exchange, Cookie cookie)": {
                "lineStart": 72,
                "lineEnd": 75
            },
            "io.undertow.server.Connectors.ungetRequestBytes(final HttpServerExchange exchange, PooledByteBuffer... buffers)": {
                "lineStart": 77,
                "lineEnd": 92
            },
            "io.undertow.server.Connectors$BufferedRequestDataCleanupListener.exchangeEvent(HttpServerExchange exchange, NextListener nextListener)": {
                "lineStart": 96,
                "lineEnd": 109
            },
            "io.undertow.server.Connectors.terminateRequest(final HttpServerExchange exchange)": {
                "lineStart": 113,
                "lineEnd": 115
            },
            "io.undertow.server.Connectors.terminateResponse(final HttpServerExchange exchange)": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "io.undertow.server.Connectors.resetRequestChannel(final HttpServerExchange exchange)": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "io.undertow.server.Connectors.getCookieString(final Cookie cookie, boolean enableRfc6265Validation)": {
                "lineStart": 125,
                "lineEnd": 139
            },
            "io.undertow.server.Connectors.setRequestStartTime(HttpServerExchange exchange)": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "io.undertow.server.Connectors.setRequestStartTime(HttpServerExchange existing, HttpServerExchange newExchange)": {
                "lineStart": 145,
                "lineEnd": 147
            },
            "io.undertow.server.Connectors.addRfc6265ResponseCookieToExchange(final Cookie cookie)": {
                "lineStart": 149,
                "lineEnd": 224
            },
            "io.undertow.server.Connectors.addVersion0ResponseCookieToExchange(final Cookie cookie)": {
                "lineStart": 226,
                "lineEnd": 288
            },
            "io.undertow.server.Connectors.addVersion1ResponseCookieToExchange(final Cookie cookie)": {
                "lineStart": 290,
                "lineEnd": 366
            },
            "io.undertow.server.Connectors.executeRootHandler(final HttpHandler handler, final HttpServerExchange exchange)": {
                "lineStart": 368,
                "lineEnd": 425
            },
            "io.undertow.server.Connectors.setExchangeRequestPath(final HttpServerExchange exchange, final String encodedPath, final String charset, boolean decode, final boolean allowEncodedSlash, StringBuilder decodeBuffer)": {
                "lineStart": 427,
                "lineEnd": 435
            },
            "io.undertow.server.Connectors.setExchangeRequestPath(final HttpServerExchange exchange, final String encodedPath, final String charset, boolean decode, final boolean allowEncodedSlash, StringBuilder decodeBuffer, int maxParameters)": {
                "lineStart": 437,
                "lineEnd": 498
            },
            "io.undertow.server.Connectors.getExistingRequestChannel(final HttpServerExchange exchange)": {
                "lineStart": 500,
                "lineEnd": 502
            },
            "io.undertow.server.Connectors.isEntityBodyAllowed(HttpServerExchange exchange)": {
                "lineStart": 504,
                "lineEnd": 507
            },
            "io.undertow.server.Connectors.isEntityBodyAllowed(int code)": {
                "lineStart": 509,
                "lineEnd": 519
            },
            "io.undertow.server.Connectors.updateResponseBytesSent(HttpServerExchange exchange, long bytes)": {
                "lineStart": 521,
                "lineEnd": 523
            },
            "io.undertow.server.Connectors.getConduitSinkChannel(HttpServerExchange exchange)": {
                "lineStart": 525,
                "lineEnd": 527
            },
            "io.undertow.server.Connectors.verifyToken(HttpString header)": {
                "lineStart": 529,
                "lineEnd": 539
            },
            "io.undertow.server.Connectors.isValidTokenCharacter(byte c)": {
                "lineStart": 541,
                "lineEnd": 543
            },
            "io.undertow.server.Connectors.areRequestHeadersValid(HeaderMap headers)": {
                "lineStart": 545,
                "lineEnd": 559
            }
        },
        "dc5d54452-HttpRequestParser.java": {
            "io.undertow.server.protocol.http.HttpRequestParser.<init>(OptionMap options)": {
                "lineStart": 121,
                "lineEnd": 129
            },
            "io.undertow.server.protocol.http.HttpRequestParser.instance(final OptionMap options)": {
                "lineStart": 131,
                "lineEnd": 141
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handle(ByteBuffer buffer, final ParseState currentState, final HttpServerExchange builder)": {
                "lineStart": 143,
                "lineEnd": 221
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleStateful(ByteBuffer buffer, ParseState currentState, HttpServerExchange builder)": {
                "lineStart": 223,
                "lineEnd": 291
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleHttpVerb(ByteBuffer buffer, final ParseState currentState, final HttpServerExchange builder)": {
                "lineStart": 293,
                "lineEnd": 293
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleHttpVersion(ByteBuffer buffer, final ParseState currentState, final HttpServerExchange builder)": {
                "lineStart": 294,
                "lineEnd": 294
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleHeader(ByteBuffer buffer, final ParseState currentState, final HttpServerExchange builder)": {
                "lineStart": 295,
                "lineEnd": 295
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handlePath(ByteBuffer buffer, ParseState state, HttpServerExchange exchange)": {
                "lineStart": 302,
                "lineEnd": 378
            },
            "io.undertow.server.protocol.http.HttpRequestParser.parsePathComplete(ParseState state, HttpServerExchange exchange, int canonicalPathStart, int parseState, boolean urlDecodeRequired, String path)": {
                "lineStart": 380,
                "lineEnd": 401
            },
            "io.undertow.server.protocol.http.HttpRequestParser.beginQueryParameters(ByteBuffer buffer, ParseState state, HttpServerExchange exchange, StringBuilder stringBuilder, int parseState, int canonicalPathStart, boolean urlDecodeRequired)": {
                "lineStart": 403,
                "lineEnd": 408
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleFullUrl(ParseState state, HttpServerExchange exchange, int canonicalPathStart, boolean urlDecodeRequired, String path, int parseState)": {
                "lineStart": 410,
                "lineEnd": 416
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleQueryParameters(ByteBuffer buffer, ParseState state, HttpServerExchange exchange)": {
                "lineStart": 418,
                "lineEnd": 496
            },
            "io.undertow.server.protocol.http.HttpRequestParser.decode(final String value, boolean urlDecodeRequired, ParseState state, final boolean allowEncodedSlash, final boolean formEncoded)": {
                "lineStart": 498,
                "lineEnd": 506
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handlePathParameters(ByteBuffer buffer, ParseState state, HttpServerExchange exchange)": {
                "lineStart": 508,
                "lineEnd": 579
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleParsedParam(String previouslyParsedParam, String parsedParam, HttpServerExchange exchange, boolean urlDecodeRequired, ParseState state)": {
                "lineStart": 581,
                "lineEnd": 589
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleHeaderValue(ByteBuffer buffer, ParseState state, HttpServerExchange builder)": {
                "lineStart": 596,
                "lineEnd": 613
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleHeaderValueCacheMiss(ByteBuffer buffer, ParseState state, HttpServerExchange builder, HttpString headerName, CacheMap<HttpString, String> headerValuesCache, StringBuilder stringBuilder)": {
                "lineStart": 615,
                "lineEnd": 725
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleCachedHeader(String existing, ByteBuffer buffer, ParseState state, HttpServerExchange builder)": {
                "lineStart": 727,
                "lineEnd": 769
            },
            "io.undertow.server.protocol.http.HttpRequestParser.handleAfterVersion(ByteBuffer buffer, ParseState state)": {
                "lineStart": 771,
                "lineEnd": 808
            },
            "io.undertow.server.protocol.http.HttpRequestParser.httpStrings()": {
                "lineStart": 810,
                "lineEnd": 832
            }
        },
        "6986d4afc-Http2ReceiveListener.java": {
            "io.undertow.server.protocol.http2.Http2ReceiveListener.checkRequestHeaders(HeaderMap headers)": {
                "lineStart": 261,
                "lineEnd": 287
            }
        }
    },
    "CVE-2023-0091": {
        "15e6cbe856-TokenManager.java": {
            "org.keycloak.protocol.oidc.TokenManager$TokenRevocationCheck.test(AccessToken token)": {
                "lineStart": 1203,
                "lineEnd": 1206
            }
        },
        "efcf05b4b6-ClientRegistrationTokenUtils.java": {
            "org.keycloak.services.clientregistration.ClientRegistrationTokenUtils.verifyToken(KeycloakSession session, RealmModel realm, String token)": {
                "lineStart": 61,
                "lineEnd": 85
            }
        }
    },
    "CVE-2023-41932": {
        "8206544-FileHistoryDao.java": {
            "hudson.plugins.jobConfigHistory.FileHistoryDao.getOldRevision(final AbstractItem item, final String identifier)": {
                "lineStart": 397,
                "lineEnd": 408
            },
            "hudson.plugins.jobConfigHistory.FileHistoryDao.getOldRevision(final Node node, final String identifier)": {
                "lineStart": 966,
                "lineEnd": 969
            }
        },
        "dc3a67b-JobConfigHistoryBaseAction.java": {
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDisplayName()": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getUrlName()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getOutputType()": {
                "lineStart": 67,
                "lineEnd": 73
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.checkTimestamp(String timestamp)": {
                "lineStart": 75,
                "lineEnd": 82
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRequestParameter(final String parameterName)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.checkConfigurePermission()": {
                "lineStart": 88,
                "lineEnd": 88
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.hasAdminPermission()": {
                "lineStart": 89,
                "lineEnd": 89
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.hasDeleteEntryPermission()": {
                "lineStart": 90,
                "lineEnd": 90
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.checkDeleteEntryPermission()": {
                "lineStart": 91,
                "lineEnd": 91
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.hasConfigurePermission()": {
                "lineStart": 92,
                "lineEnd": 92
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRevisionAmount()": {
                "lineStart": 93,
                "lineEnd": 93
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getAccessControlledObject()": {
                "lineStart": 94,
                "lineEnd": 94
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDiffLines(List<String> diffLines)": {
                "lineStart": 95,
                "lineEnd": 104
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDiffAsString(final File file1, final File file2, final String[] file1Lines, final String[] file2Lines)": {
                "lineStart": 106,
                "lineEnd": 108
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getVersionDiffsOnly(final String file1Str, final String file2Str)": {
                "lineStart": 110,
                "lineEnd": 140
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getShowVersionDiffs()": {
                "lineStart": 142,
                "lineEnd": 145
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getLines()": {
                "lineStart": 147,
                "lineEnd": 150
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getLines(boolean useRegex)": {
                "lineStart": 152,
                "lineEnd": 152
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.reformatAndConcatStringArray(String[] arr)": {
                "lineStart": 153,
                "lineEnd": 176
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDiffAsString(final File file1, final File file2, final String[] file1Lines, final String[] file2Lines, final boolean hideVersionDiffs)": {
                "lineStart": 178,
                "lineEnd": 232
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRelevantPageNums(int currentPageNum)": {
                "lineStart": 234,
                "lineEnd": 236
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRelevantPageNums(int currentPageNum, int maxPageNum)": {
                "lineStart": 238,
                "lineEnd": 274
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getMaxEntriesPerPage()": {
                "lineStart": 276,
                "lineEnd": 286
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getMaxPageNum()": {
                "lineStart": 288,
                "lineEnd": 295
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.doDiffFiles(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 297,
                "lineEnd": 306
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.doDiffFilesPrevNext(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 308,
                "lineEnd": 312
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getCurrentRequest()": {
                "lineStart": 314,
                "lineEnd": 316
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getPlugin()": {
                "lineStart": 318,
                "lineEnd": 320
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getHistoryDao()": {
                "lineStart": 322,
                "lineEnd": 324
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.sort(File file)": {
                "lineStart": 326,
                "lineEnd": 346
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getLines(XmlFile leftConfig, XmlFile rightConfig, boolean hideVersionDiffs)": {
                "lineStart": 348,
                "lineEnd": 354
            }
        }
    },
    "CVE-2022-42124": {
        "5b569150985eb-LayoutPageTemplateEntryUpgradeProcess.java": {
            "com.liferay.layout.page.template.internal.upgrade.v3_3_1.LayoutPageTemplateEntryUpgradeProcess._updateLayoutPrototypeName(long layoutPrototypeId, String oldName, String newName)": {
                "lineStart": 81,
                "lineEnd": 92
            }
        }
    },
    "CVE-2022-35697": {
        "b8ecc83cc-AdaptiveImageServlet.java": {
            "com.adobe.cq.wcm.core.components.internal.servlets.AdaptiveImageServlet.stream(@NotNull SlingHttpServletResponse response, @NotNull InputStream inputStream, @NotNull String contentType, String imageName)": {
                "lineStart": 624,
                "lineEnd": 628
            }
        }
    },
    "CVE-2023-41936": {
        "74ab3d8-OAuthSession.java": {
            "org.jenkinsci.plugins.googlelogin.OAuthSession.doFinishLogin(StaplerRequest request)": {
                "lineStart": 45,
                "lineEnd": 77
            }
        }
    },
    "CVE-2023-25613": {
        "881d76f3-LdapIdentityBackend.java": {
            "org.apache.kerby.kerberos.kdc.identitybackend.LdapIdentityBackend.doGetIdentity(String principalName)": {
                "lineStart": 241,
                "lineEnd": 293
            }
        }
    },
    "CVE-2023-26474": {
        "783222d2974-TextAreaClass.java": {
            "com.xpn.xwiki.objects.classes.TextAreaClass.displayView(StringBuffer buffer, String name, String prefix, BaseCollection object, boolean isolated, XWikiContext context)": {
                "lineStart": 219,
                "lineEnd": 262
            }
        }
    },
    "CVE-2023-43496": {
        "5d64485cfa-PluginManager.java": {
            "hudson.PluginManager.doUploadPlugin(StaplerRequest req)": {
                "lineStart": 1549,
                "lineEnd": 1636
            }
        }
    },
    "CVE-2021-21650": {
        "1f4608a-S3ArtifactsAction.java": {
            "hudson.plugins.s3.S3ArtifactsAction.getIconFileName()": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "hudson.plugins.s3.S3ArtifactsAction.getUrlName()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "hudson.plugins.s3.S3ArtifactsAction.getArtifacts()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "hudson.plugins.s3.S3ArtifactsAction.doDownload(final StaplerRequest request, final StaplerResponse response)": {
                "lineStart": 58,
                "lineEnd": 77
            }
        },
        "ff2e560-S3ArtifactsProjectAction.java": {
            "hudson.plugins.s3.S3ArtifactsProjectAction.getLatestDeployedArtifacts()": {
                "lineStart": 16,
                "lineEnd": 28
            }
        }
    },
    "CVE-2022-24816": {
        "c3dc9ce4-Jiffle.java": {
            "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": {
                "lineStart": 203,
                "lineEnd": 205
            },
            "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": {
                "lineStart": 207,
                "lineEnd": 214
            },
            "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": {
                "lineStart": 216,
                "lineEnd": 254
            },
            "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": {
                "lineStart": 278,
                "lineEnd": 288
            },
            "it.geosolutions.jaiext.jiffle.Jiffle.stripComments(String theScript)": {
                "lineStart": 290,
                "lineEnd": 292
            }
        },
        "9de8193a-Script.java": {
            "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": {
                "lineStart": 29,
                "lineEnd": 154
            },
            "it.geosolutions.jaiext.jiffle.parser.node.Script.<init>(Map<String, String> options, Set<String> sourceImages, Set<String> destImages, GlobalVars globals, StatementList stmts, RepeatedReadOptimizer readOptimizer)": {
                "lineStart": 20,
                "lineEnd": 27
            }
        }
    },
    "CVE-2022-46685": {
        "412ccb3-GiteaSCMBuilder.java": {
            "org.jenkinsci.plugin.gitea.GiteaSCMBuilder.checkoutUriTemplate(@CheckForNull Item context, @NonNull String serverUrl, @CheckForNull String sshRemote, @CheckForNull String credentialsId)": {
                "lineStart": 61,
                "lineEnd": 99
            }
        },
        "c4fda2f-PersonalAccessToken.java": {
            "org.jenkinsci.plugin.gitea.credentials.PersonalAccessToken.getToken()": {
                "lineStart": 6,
                "lineEnd": 7
            }
        },
        "b3ed547-PersonalAccessTokenImpl.java": {
            "org.jenkinsci.plugin.gitea.credentials.PersonalAccessTokenImpl.<init>(@CheckForNull CredentialsScope scope, @CheckForNull String id, @CheckForNull String description, @NonNull String token)": {
                "lineStart": 20,
                "lineEnd": 23
            },
            "org.jenkinsci.plugin.gitea.credentials.PersonalAccessTokenImpl.getToken()": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "org.jenkinsci.plugin.gitea.credentials.PersonalAccessTokenImpl$DescriptorImpl.getDisplayName()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "org.jenkinsci.plugin.gitea.credentials.PersonalAccessTokenImpl$DescriptorImpl.doCheckToken(@QueryParameter String value)": {
                "lineStart": 34,
                "lineEnd": 51
            }
        }
    },
    "CVE-2022-21700": {
        "0a08832503-ConversionContext.java": {
            "io.micronaut.core.convert.ConversionContext.getTypeVariables()": {
                "lineStart": 20,
                "lineEnd": 23
            },
            "io.micronaut.core.convert.ConversionContext.getLocale()": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "io.micronaut.core.convert.ConversionContext.getCharset()": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "io.micronaut.core.convert.ConversionContext.with(Argument<T> argument)": {
                "lineStart": 33,
                "lineEnd": 72
            },
            "io.micronaut.core.convert.ConversionContext.of(Map<String, Argument<?>> typeVariables)": {
                "lineStart": 74,
                "lineEnd": 81
            },
            "io.micronaut.core.convert.ConversionContext.of(Argument<T> argument)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "io.micronaut.core.convert.ConversionContext.of(Class<T> argument)": {
                "lineStart": 87,
                "lineEnd": 90
            },
            "io.micronaut.core.convert.ConversionContext.of(Argument<T> argument, @Nullable Locale locale)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "io.micronaut.core.convert.ConversionContext.of(Argument<T> argument, @Nullable Locale locale, @Nullable Charset charset)": {
                "lineStart": 96,
                "lineEnd": 101
            }
        },
        "b2bc371294-DefaultArgumentConversionContext.java": {
            "io.micronaut.core.convert.DefaultArgumentConversionContext.<init>(Argument<T> argument, Locale finalLocale, Charset finalCharset)": {
                "lineStart": 12,
                "lineEnd": 16
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.getTypeParameters()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.getTypeVariables()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.getLocale()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.getCharset()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.reject(Exception exception)": {
                "lineStart": 34,
                "lineEnd": 39
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.reject(Object value, Exception exception)": {
                "lineStart": 41,
                "lineEnd": 57
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.getLastError()": {
                "lineStart": 59,
                "lineEnd": 65
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.iterator()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.getArgument()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.equals(Object o)": {
                "lineStart": 75,
                "lineEnd": 86
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.hashCode()": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "io.micronaut.core.convert.DefaultArgumentConversionContext.toString()": {
                "lineStart": 92,
                "lineEnd": 94
            }
        },
        "25590a614d-HttpClientIntroductionAdvice.java": {
            "io.micronaut.http.client.interceptor.HttpClientIntroductionAdvice.intercept(MethodInvocationContext<Object, Object> context)": {
                "lineStart": 93,
                "lineEnd": 358
            }
        },
        "5552e5f0b4-CorsFilter.java": {
            "io.micronaut.http.server.cors.CorsFilter.<init>(HttpServerConfiguration.CorsConfiguration corsConfiguration)": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "io.micronaut.http.server.cors.CorsFilter.doFilter(HttpRequest<?> request, ServerFilterChain chain)": {
                "lineStart": 32,
                "lineEnd": 52
            },
            "io.micronaut.http.server.cors.CorsFilter.getOrder()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "io.micronaut.http.server.cors.CorsFilter.handleResponse(HttpRequest<?> request, MutableHttpResponse<?> response)": {
                "lineStart": 58,
                "lineEnd": 82
            },
            "io.micronaut.http.server.cors.CorsFilter.handleRequest(HttpRequest request)": {
                "lineStart": 84,
                "lineEnd": 123
            },
            "io.micronaut.http.server.cors.CorsFilter.setAllowCredentials(CorsOriginConfiguration config, MutableHttpResponse<?> response)": {
                "lineStart": 125,
                "lineEnd": 130
            },
            "io.micronaut.http.server.cors.CorsFilter.setExposeHeaders(List<String> exposedHeaders, MutableHttpResponse<?> response)": {
                "lineStart": 132,
                "lineEnd": 144
            },
            "io.micronaut.http.server.cors.CorsFilter.setVary(MutableHttpResponse<?> response)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "io.micronaut.http.server.cors.CorsFilter.setOrigin(String origin, MutableHttpResponse response)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "io.micronaut.http.server.cors.CorsFilter.setAllowMethods(HttpMethod method, MutableHttpResponse response)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "io.micronaut.http.server.cors.CorsFilter.setAllowHeaders(List<?> optionalAllowHeaders, MutableHttpResponse response)": {
                "lineStart": 158,
                "lineEnd": 171
            },
            "io.micronaut.http.server.cors.CorsFilter.setMaxAge(long maxAge, MutableHttpResponse response)": {
                "lineStart": 173,
                "lineEnd": 178
            },
            "io.micronaut.http.server.cors.CorsFilter.getConfiguration(String requestOrigin)": {
                "lineStart": 180,
                "lineEnd": 213
            },
            "io.micronaut.http.server.cors.CorsFilter.isAny(List<String> values)": {
                "lineStart": 215,
                "lineEnd": 217
            },
            "io.micronaut.http.server.cors.CorsFilter.isAnyMethod(List<HttpMethod> allowedMethods)": {
                "lineStart": 219,
                "lineEnd": 221
            }
        },
        "fb08a18bc1-CorsOriginConverter.java": {
            "io.micronaut.http.server.cors.CorsOriginConverter.convert(Map<String, Object> object, Class<CorsOriginConfiguration> targetType, ConversionContext context)": {
                "lineStart": 21,
                "lineEnd": 31
            }
        },
        "e9e3935e7a-MediaType.java": {
            "io.micronaut.http.MediaType.<init>(String name)": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "io.micronaut.http.MediaType.<init>(String name, Map<String, String> params)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "io.micronaut.http.MediaType.<init>(String name, String extension)": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "io.micronaut.http.MediaType.<init>(String name, String extension, Map<String, String> params)": {
                "lineStart": 134,
                "lineEnd": 215
            },
            "io.micronaut.http.MediaType.of(String mediaType)": {
                "lineStart": 217,
                "lineEnd": 272
            },
            "io.micronaut.http.MediaType.matches(@NonNull MediaType expectedContentType)": {
                "lineStart": 274,
                "lineEnd": 288
            },
            "io.micronaut.http.MediaType.getName()": {
                "lineStart": 290,
                "lineEnd": 292
            },
            "io.micronaut.http.MediaType.getType()": {
                "lineStart": 294,
                "lineEnd": 296
            },
            "io.micronaut.http.MediaType.getSubtype()": {
                "lineStart": 298,
                "lineEnd": 300
            },
            "io.micronaut.http.MediaType.getExtension()": {
                "lineStart": 302,
                "lineEnd": 304
            },
            "io.micronaut.http.MediaType.getParameters()": {
                "lineStart": 306,
                "lineEnd": 308
            },
            "io.micronaut.http.MediaType.getQuality()": {
                "lineStart": 310,
                "lineEnd": 312
            },
            "io.micronaut.http.MediaType.getQualityAsNumber()": {
                "lineStart": 314,
                "lineEnd": 316
            },
            "io.micronaut.http.MediaType.getVersion()": {
                "lineStart": 318,
                "lineEnd": 320
            },
            "io.micronaut.http.MediaType.getCharset()": {
                "lineStart": 322,
                "lineEnd": 324
            },
            "io.micronaut.http.MediaType.length()": {
                "lineStart": 326,
                "lineEnd": 328
            },
            "io.micronaut.http.MediaType.charAt(int index)": {
                "lineStart": 330,
                "lineEnd": 332
            },
            "io.micronaut.http.MediaType.subSequence(int start, int end)": {
                "lineStart": 334,
                "lineEnd": 336
            },
            "io.micronaut.http.MediaType.isTextBased()": {
                "lineStart": 338,
                "lineEnd": 345
            },
            "io.micronaut.http.MediaType.isTextBased(String contentType)": {
                "lineStart": 347,
                "lineEnd": 359
            },
            "io.micronaut.http.MediaType.toString()": {
                "lineStart": 361,
                "lineEnd": 363
            },
            "io.micronaut.http.MediaType.toString0()": {
                "lineStart": 365,
                "lineEnd": 382
            },
            "io.micronaut.http.MediaType.equals(Object o)": {
                "lineStart": 384,
                "lineEnd": 395
            },
            "io.micronaut.http.MediaType.hashCode()": {
                "lineStart": 397,
                "lineEnd": 399
            },
            "io.micronaut.http.MediaType.orderedOf(CharSequence... values)": {
                "lineStart": 401,
                "lineEnd": 403
            },
            "io.micronaut.http.MediaType.orderedOf(List<? extends CharSequence> values)": {
                "lineStart": 405,
                "lineEnd": 444
            },
            "io.micronaut.http.MediaType.of(CharSequence mediaType)": {
                "lineStart": 446,
                "lineEnd": 448
            },
            "io.micronaut.http.MediaType.of(CharSequence... mediaType)": {
                "lineStart": 450,
                "lineEnd": 457
            },
            "io.micronaut.http.MediaType.fromType(Class<?> type)": {
                "lineStart": 459,
                "lineEnd": 469
            },
            "io.micronaut.http.MediaType.forExtension(String extension)": {
                "lineStart": 471,
                "lineEnd": 481
            },
            "io.micronaut.http.MediaType.forFilename(String filename)": {
                "lineStart": 483,
                "lineEnd": 489
            },
            "io.micronaut.http.MediaType.getMediaTypeFileExtensions()": {
                "lineStart": 491,
                "lineEnd": 512
            },
            "io.micronaut.http.MediaType.loadMimeTypes()": {
                "lineStart": 514,
                "lineEnd": 544
            }
        }
    },
    "CVE-2024-23898": {
        "633ecca343-CLIAction.java": {
            "hudson.cli.CLIAction.doWs()": {
                "lineStart": 73,
                "lineEnd": 150
            }
        }
    },
    "CVE-2023-49299": {
        "294f880c77-SwitchLogicTask.java": {
            "org.apache.dolphinscheduler.server.master.runner.task.switchtask.SwitchLogicTask.calculateConditionResult()": {
                "lineStart": 45,
                "lineEnd": 91
            },
            "org.apache.dolphinscheduler.server.master.runner.task.switchtask.SwitchLogicTask.setTaskParams(String content, String rgex)": {
                "lineStart": 93,
                "lineEnd": 123
            }
        },
        "89a6533fbe-SwitchTaskUtils.java": {
            "org.apache.dolphinscheduler.server.master.utils.SwitchTaskUtils.evaluate(String expression)": {
                "lineStart": 13,
                "lineEnd": 16
            }
        }
    },
    "CVE-2022-41226": {
        "14a5b82-CLIVersionUtils.java": {
            "com.compuware.jenkins.common.utils.CLIVersionUtils.parseXml(InputStream versionfile)": {
                "lineStart": 80,
                "lineEnd": 94
            }
        }
    },
    "CVE-2022-36885": {
        "5d434a6-GHWebhookSignature.java": {
            "org.jenkinsci.plugins.github.webhook.GHWebhookSignature.matches(String digest)": {
                "lineStart": 43,
                "lineEnd": 47
            }
        }
    },
    "CVE-2023-40344": {
        "db97bf7-CredentialUtil.java": {
            "io.jenkins.plugins.util.CredentialUtil.getAllSystemCredentials(@Nullable final Item item)": {
                "lineStart": 16,
                "lineEnd": 20
            },
            "io.jenkins.plugins.util.CredentialUtil.getAllCredentialsListBoxModel(@Nullable final Item item, final String credentialId)": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "io.jenkins.plugins.util.CredentialUtil.getCredentialsListBoxModel(final String credentialId, final List<StandardCredentials> credentials)": {
                "lineStart": 26,
                "lineEnd": 34
            },
            "io.jenkins.plugins.util.CredentialUtil.getStandardCredentials(@Nullable Item item)": {
                "lineStart": 36,
                "lineEnd": 39
            }
        }
    },
    "CVE-2024-40642": {
        "c592d1b-BinaryHttpParser.java": {
            "io.netty.incubator.codec.bhttp.BinaryHttpParser.readRequestHead(ByteBuf in, boolean knownLength, int maxFieldSectionSize)": {
                "lineStart": 234,
                "lineEnd": 313
            }
        }
    },
    "CVE-2022-25197": {
        "7b32d44-VaultTokenFileCredential.java": {
            "com.datapipe.jenkins.vault.credentials.VaultTokenFileCredential.getToken(Vault vault)": {
                "lineStart": 22,
                "lineEnd": 46
            }
        }
    },
    "CVE-2020-10688": {
        "ed27e5fae1-StringParameterInjector.java": {
            "org.jboss.resteasy.core.StringParameterInjector.extractValue(String strVal)": {
                "lineStart": 559,
                "lineEnd": 667
            }
        }
    },
    "CVE-2020-2120": {
        "abc27f1-ConvertReport.java": {
            "hudson.plugins.fitnesse.ConvertReport.generateJunitResult(FilePath inputFilePath, FilePath outputFilePath)": {
                "lineStart": 8,
                "lineEnd": 18
            }
        },
        "ad60cde-FitnessePlugin.java": {
            "hudson.plugins.fitnesse.FitnessePlugin.initTemplate()": {
                "lineStart": 18,
                "lineEnd": 33
            }
        }
    },
    "CVE-2024-23833": {
        "4f4a14bef-DatabaseConfiguration.java": {
            "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost(String databaseServer)": {
                "lineStart": 34,
                "lineEnd": 36
            }
        }
    },
    "CVE-2023-30535": {
        "46a27b8a-SessionUtilExternalBrowser.java": {
            "net.snowflake.client.core.SessionUtilExternalBrowser$DefaultAuthExternalBrowserHandlers.openBrowser(String ssoUrl)": {
                "lineStart": 39,
                "lineEnd": 62
            }
        }
    },
    "CVE-2024-22271": {
        "e62b8a8b6-BeanFactoryAwareFunctionRegistry.java": {
            "org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRegistry.lookup(Class<?> type, String functionDefinition, String... expectedOutputMimeTypes)": {
                "lineStart": 72,
                "lineEnd": 160
            }
        }
    },
    "CVE-2020-27223": {
        "da0d5a62a4-QuotedQualityCSV.java": {
            "org.eclipse.jetty.http.QuotedQualityCSV.<init>()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "org.eclipse.jetty.http.QuotedQualityCSV.<init>(String[] preferredOrder)": {
                "lineStart": 28,
                "lineEnd": 43
            },
            "org.eclipse.jetty.http.QuotedQualityCSV.parsedValue(StringBuffer buffer)": {
                "lineStart": 49,
                "lineEnd": 52
            },
            "org.eclipse.jetty.http.QuotedQualityCSV.parsedParam(StringBuffer buffer, int valueLength, int paramName, int paramValue)": {
                "lineStart": 54,
                "lineEnd": 78
            },
            "org.eclipse.jetty.http.QuotedQualityCSV.sort()": {
                "lineStart": 94,
                "lineEnd": 123
            }
        }
    },
    "CVE-2023-49921": {
        "eeb43c52a1e-ExecutableSearchInput.java": {
            "org.elasticsearch.xpack.watcher.input.search.ExecutableSearchInput.doExecute(WatchExecutionContext ctx, WatcherSearchTemplateRequest request)": {
                "lineStart": 58,
                "lineEnd": 96
            }
        }
    },
    "CVE-2022-38648": {
        "a4f76534e-SVGImageElementBridge.java": {
            "org.apache.batik.bridge.SVGImageElementBridge.createImageGraphicsNode(BridgeContext ctx, Element e, ParsedURL purl)": {
                "lineStart": 113,
                "lineEnd": 252
            },
            "org.apache.batik.bridge.SVGImageElementBridge.buildImageGraphicsNode(BridgeContext ctx, Element e)": {
                "lineStart": 90,
                "lineEnd": 111
            }
        }
    },
    "CVE-2022-20619": {
        "2c2f969-BitbucketSCMSource.java": {
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.<init>(@NonNull String repoOwner, @NonNull String repository)": {
                "lineStart": 119,
                "lineEnd": 124
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.<init>(@CheckForNull String id, @NonNull String repoOwner, @NonNull String repository)": {
                "lineStart": 126,
                "lineEnd": 132
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.readResolve()": {
                "lineStart": 134,
                "lineEnd": 163
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getCredentialsId()": {
                "lineStart": 165,
                "lineEnd": 167
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setCredentialsId(@CheckForNull String credentialsId)": {
                "lineStart": 169,
                "lineEnd": 171
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getRepoOwner()": {
                "lineStart": 173,
                "lineEnd": 175
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getRepository()": {
                "lineStart": 177,
                "lineEnd": 179
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getServerUrl()": {
                "lineStart": 181,
                "lineEnd": 183
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setServerUrl(@CheckForNull String serverUrl)": {
                "lineStart": 185,
                "lineEnd": 187
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getEndpointJenkinsRootUrl()": {
                "lineStart": 189,
                "lineEnd": 191
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getTraits()": {
                "lineStart": 193,
                "lineEnd": 195
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setTraits(@CheckForNull List<SCMSourceTrait> traits)": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setBitbucketServerUrl(String url)": {
                "lineStart": 201,
                "lineEnd": 211
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getBitbucketServerUrl()": {
                "lineStart": 213,
                "lineEnd": 220
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getCheckoutCredentialsId()": {
                "lineStart": 222,
                "lineEnd": 231
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setCheckoutCredentialsId(String checkoutCredentialsId)": {
                "lineStart": 233,
                "lineEnd": 239
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getIncludes()": {
                "lineStart": 241,
                "lineEnd": 250
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setIncludes(@NonNull String includes)": {
                "lineStart": 252,
                "lineEnd": 273
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getExcludes()": {
                "lineStart": 275,
                "lineEnd": 284
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setExcludes(@NonNull String excludes)": {
                "lineStart": 286,
                "lineEnd": 307
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setAutoRegisterHook(boolean autoRegisterHook)": {
                "lineStart": 309,
                "lineEnd": 312
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.isAutoRegisterHook()": {
                "lineStart": 314,
                "lineEnd": 323
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getRepositoryType()": {
                "lineStart": 325,
                "lineEnd": 337
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.buildBitbucketClient()": {
                "lineStart": 339,
                "lineEnd": 341
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.buildBitbucketClient(PullRequestSCMHead head)": {
                "lineStart": 343,
                "lineEnd": 345
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.buildBitbucketClient(String repoOwner, String repository)": {
                "lineStart": 347,
                "lineEnd": 349
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.afterSave()": {
                "lineStart": 351,
                "lineEnd": 359
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrieve(@CheckForNull SCMSourceCriteria criteria, @NonNull SCMHeadObserver observer, @CheckForNull SCMHeadEvent<?> event, @NonNull TaskListener listener)": {
                "lineStart": 361,
                "lineEnd": 445
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrievePullRequests(final BitbucketSCMSourceRequest request)": {
                "lineStart": 447,
                "lineEnd": 506
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrieveBranches(final BitbucketSCMSourceRequest request)": {
                "lineStart": 508,
                "lineEnd": 529
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrieveTags(final BitbucketSCMSourceRequest request)": {
                "lineStart": 531,
                "lineEnd": 551
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrieve(SCMHead head, TaskListener listener)": {
                "lineStart": 553,
                "lineEnd": 609
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.findCommit(@NonNull String branchName, List<? extends BitbucketBranch> branches, TaskListener listener)": {
                "lineStart": 611,
                "lineEnd": 633
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.findPRCommit(BitbucketPullRequest pr, TaskListener listener)": {
                "lineStart": 635,
                "lineEnd": 650
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.build(SCMHead head, SCMRevision revision)": {
                "lineStart": 652,
                "lineEnd": 709
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getTrustedRevision(@NonNull SCMRevision revision, @NonNull TaskListener listener)": {
                "lineStart": 711,
                "lineEnd": 730
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getDescriptor()": {
                "lineStart": 732,
                "lineEnd": 734
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.credentials()": {
                "lineStart": 736,
                "lineEnd": 739
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.authenticator()": {
                "lineStart": 741,
                "lineEnd": 744
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrieveActions(@CheckForNull SCMSourceEvent event, @NonNull TaskListener listener)": {
                "lineStart": 746,
                "lineEnd": 774
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.retrieveActions(@NonNull SCMHead head, @CheckForNull SCMHeadEvent event, @NonNull TaskListener listener)": {
                "lineStart": 776,
                "lineEnd": 828
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getPullRequestTitleCache()": {
                "lineStart": 830,
                "lineEnd": 836
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getPullRequestContributorCache()": {
                "lineStart": 838,
                "lineEnd": 844
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.originOf(@NonNull String repoOwner, @NonNull String repository)": {
                "lineStart": 846,
                "lineEnd": 856
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.getEventDelaySeconds()": {
                "lineStart": 858,
                "lineEnd": 860
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource.setEventDelaySeconds(int eventDelaySeconds)": {
                "lineStart": 862,
                "lineEnd": 864
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.getDisplayName()": {
                "lineStart": 869,
                "lineEnd": 871
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.doCheckCredentialsId(@CheckForNull @AncestorInPath SCMSourceOwner context, @QueryParameter String value, @QueryParameter String serverUrl)": {
                "lineStart": 873,
                "lineEnd": 875
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.doCheckServerUrl(@AncestorInPath SCMSourceOwner context, @QueryParameter String value)": {
                "lineStart": 877,
                "lineEnd": 885
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.isServerUrlSelectable()": {
                "lineStart": 887,
                "lineEnd": 889
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.doFillServerUrlItems(@AncestorInPath SCMSourceOwner context)": {
                "lineStart": 891,
                "lineEnd": 898
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath SCMSourceOwner context, @QueryParameter String serverUrl)": {
                "lineStart": 900,
                "lineEnd": 902
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.doFillRepositoryItems(@AncestorInPath SCMSourceOwner context, @QueryParameter String serverUrl, @QueryParameter String credentialsId, @QueryParameter String repoOwner)": {
                "lineStart": 904,
                "lineEnd": 966
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.createCategories()": {
                "lineStart": 968,
                "lineEnd": 970
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.getTraitsDescriptorLists()": {
                "lineStart": 972,
                "lineEnd": 994
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$DescriptorImpl.getTraitsDefaults()": {
                "lineStart": 996,
                "lineEnd": 998
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$CriteriaWitness.<init>(BitbucketSCMSourceRequest request)": {
                "lineStart": 1004,
                "lineEnd": 1006
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$CriteriaWitness.record(@NonNull SCMHead scmHead, SCMRevision revision, boolean isMatch)": {
                "lineStart": 1008,
                "lineEnd": 1023
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BitbucketProbeFactory.<init>(BitbucketApi bitbucket, BitbucketSCMSourceRequest request)": {
                "lineStart": 1030,
                "lineEnd": 1033
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BitbucketProbeFactory.create(@NonNull final SCMHead head, @CheckForNull final I revisionInfo)": {
                "lineStart": 1035,
                "lineEnd": 1079
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BitbucketRevisionFactory.<init>(BitbucketApi client)": {
                "lineStart": 1085,
                "lineEnd": 1087
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BitbucketRevisionFactory.create(@NonNull SCMHead head, @Nullable I input)": {
                "lineStart": 1089,
                "lineEnd": 1091
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BitbucketRevisionFactory.create(@NonNull SCMHead head, @Nullable I sourceInput, @Nullable I targetInput)": {
                "lineStart": 1093,
                "lineEnd": 1107
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BitbucketRevisionFactory.asCommit(I input)": {
                "lineStart": 1109,
                "lineEnd": 1118
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BranchHeadCommit.<init>(@NonNull final BitbucketBranch branch)": {
                "lineStart": 1124,
                "lineEnd": 1126
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BranchHeadCommit.getAuthor()": {
                "lineStart": 1128,
                "lineEnd": 1130
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BranchHeadCommit.getMessage()": {
                "lineStart": 1132,
                "lineEnd": 1134
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BranchHeadCommit.getDate()": {
                "lineStart": 1136,
                "lineEnd": 1138
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BranchHeadCommit.getHash()": {
                "lineStart": 1140,
                "lineEnd": 1142
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$BranchHeadCommit.getDateMillis()": {
                "lineStart": 1144,
                "lineEnd": 1146
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$WrappedException.<init>(Throwable cause)": {
                "lineStart": 1152,
                "lineEnd": 1154
            },
            "com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource$WrappedException.unwrap()": {
                "lineStart": 1156,
                "lineEnd": 1171
            }
        }
    },
    "CVE-2022-36897": {
        "f4ea0d2-CodeCoverageBuilder.java": {
            "com.compuware.jenkins.build.CodeCoverageBuilder$CodeCoverageDescriptorImpl.doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project)": {
                "lineStart": 109,
                "lineEnd": 124
            },
            "com.compuware.jenkins.build.CodeCoverageBuilder$CodeCoverageDescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project)": {
                "lineStart": 126,
                "lineEnd": 147
            }
        }
    },
    "CVE-2022-23107": {
        "9036acaee-AnalysisResult.java": {
            "io.jenkins.plugins.analysis.core.model.AnalysisResult.<init>(final Run<?, ?> owner, final String id, final DeltaReport report, final Blames blames, final RepositoryStatistics repositoryStatistics, final QualityGateStatus qualityGateStatus, final Map<String, Integer> sizePerOrigin, final boolean canSerialize)": {
                "lineStart": 115,
                "lineEnd": 140
            }
        },
        "a49486220-Tool.java": {
            "io.jenkins.plugins.analysis.core.model.Tool.setId(final String id)": {
                "lineStart": 39,
                "lineEnd": 41
            }
        }
    },
    "CVE-2021-21266": {
        "e07702f507-FritzAhaUpdateCallback.java": {
            "org.openhab.binding.avmfritz.internal.hardware.callbacks.FritzAhaUpdateCallback.execute(int status, String response)": {
                "lineStart": 24,
                "lineEnd": 51
            }
        },
        "cb950a2a8e-FritzAhaUpdateTemplatesCallback.java": {
            "org.openhab.binding.avmfritz.internal.hardware.callbacks.FritzAhaUpdateTemplatesCallback.execute(int status, String response)": {
                "lineStart": 22,
                "lineEnd": 46
            }
        },
        "e1316cf8d0-JAXBUtils.java": {
            "org.openhab.binding.avmfritz.internal.util.JAXBUtils.initJAXBContextDevices()": {
                "lineStart": 14,
                "lineEnd": 23
            },
            "org.openhab.binding.avmfritz.internal.util.JAXBUtils.initJAXBContextTemplates()": {
                "lineStart": 25,
                "lineEnd": 34
            }
        },
        "6ab91903f6-XMLResponseProcessor.java": {
            "org.openhab.binding.bosesoundtouch.internal.XMLResponseProcessor.handleMessage(String msg)": {
                "lineStart": 19,
                "lineEnd": 23
            }
        },
        "250276c9f0-DenonMarantzHttpConnector.java": {
            "org.openhab.binding.denonmarantz.internal.connector.http.DenonMarantzHttpConnector.getDocument(String uri, Class<T> response)": {
                "lineStart": 248,
                "lineEnd": 274
            }
        },
        "aeaea54599-DenonMarantzHandler.java": {
            "org.openhab.binding.denonmarantz.internal.handler.DenonMarantzHandler.autoConfigure()": {
                "lineStart": 167,
                "lineEnd": 248
            }
        },
        "42b1fc7fb1-DLinkHNAPCommunication.java": {
            "org.openhab.binding.dlinksmarthome.internal.DLinkHNAPCommunication.<init>(final String ipAddress, final String pin)": {
                "lineStart": 65,
                "lineEnd": 95
            }
        },
        "24df68b6bd-Enigma2Client.java": {
            "org.openhab.binding.enigma2.internal.Enigma2Client.<init>(String host, @Nullable String user, @Nullable String password, int requestTimeout)": {
                "lineStart": 57,
                "lineEnd": 67
            }
        },
        "f398bb8937-Client.java": {
            "org.openhab.binding.fmiweather.internal.client.Client.<init>()": {
                "lineStart": 65,
                "lineEnd": 74
            }
        },
        "687b23565e-FrontierSiliconRadioApiResult.java": {
            "org.openhab.binding.fsinternetradio.internal.radio.FrontierSiliconRadioApiResult.getXmlDocFromString(String xmlString)": {
                "lineStart": 119,
                "lineEnd": 124
            }
        },
        "07a5aa7032-StatusFileInterpreter.java": {
            "org.openhab.binding.gce.internal.model.StatusFileInterpreter.read()": {
                "lineStart": 38,
                "lineEnd": 54
            }
        },
        "1a526fd274-XmlRpcResponse.java": {
            "org.openhab.binding.homematic.internal.communicator.message.XmlRpcResponse.<init>(InputStream is, String encoding)": {
                "lineStart": 21,
                "lineEnd": 27
            }
        },
        "fdfb9ac8d9-HPWebServerClient.java": {
            "org.openhab.binding.hpprinter.internal.api.HPWebServerClient.getDocument(String contentAsString)": {
                "lineStart": 80,
                "lineEnd": 84
            }
        },
        "2585972347-ProjectFileUtils.java": {
            "org.openhab.binding.ihc.internal.ws.projectfile.ProjectFileUtils.readFromFile(String filePath)": {
                "lineStart": 23,
                "lineEnd": 35
            }
        },
        "295985a1c3-DeviceTypeLoader.java": {
            "org.openhab.binding.insteon.internal.device.DeviceTypeLoader.loadDeviceTypesXML(InputStream in)": {
                "lineStart": 36,
                "lineEnd": 51
            }
        },
        "7740c05ab9-FeatureTemplateLoader.java": {
            "org.openhab.binding.insteon.internal.device.FeatureTemplateLoader.readTemplates(InputStream input)": {
                "lineStart": 28,
                "lineEnd": 58
            }
        },
        "c23a18cc5c-XMLMessageReader.java": {
            "org.openhab.binding.insteon.internal.message.XMLMessageReader.readMessageDefinitions(InputStream input)": {
                "lineStart": 21,
                "lineEnd": 51
            }
        },
        "7608eeb44f-OnkyoHandler.java": {
            "org.openhab.binding.onkyo.internal.handler.OnkyoHandler.processInfo(String infoXML)": {
                "lineStart": 429,
                "lineEnd": 445
            }
        },
        "de5afaa604-SamsungTvUtils.java": {
            "org.openhab.binding.samsungtv.internal.service.SamsungTvUtils.loadXMLFromString(String xml)": {
                "lineStart": 45,
                "lineEnd": 56
            }
        },
        "ce04c67f50-SonosXMLParser.java": {
            "org.openhab.binding.sonos.internal.SonosXMLParser.getResourceMetaData(String xml)": {
                "lineStart": 66,
                "lineEnd": 81
            }
        },
        "03b9d6a20f-TelldusLiveDeviceController.java": {
            "org.openhab.binding.tellstick.internal.live.TelldusLiveDeviceController.innerCallRest(String uri, Class<T> response)": {
                "lineStart": 308,
                "lineEnd": 321
            }
        },
        "08ded28fdd-VitotronicBridgeHandler.java": {
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.<init>(Bridge bridge)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.updateStatus(ThingStatus status)": {
                "lineStart": 43,
                "lineEnd": 46
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.updateStatus()": {
                "lineStart": 48,
                "lineEnd": 56
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.registerDiscoveryService(VitotronicDiscoveryService discoveryService)": {
                "lineStart": 59,
                "lineEnd": 68
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.unregisterDiscoveryService()": {
                "lineStart": 70,
                "lineEnd": 73
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.createThing(String thingType, String thingID)": {
                "lineStart": 75,
                "lineEnd": 81
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.registerVitotronicThingListener(VitotronicThingHandler thingHandler)": {
                "lineStart": 84,
                "lineEnd": 102
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.unregisterThingListener(VitotronicThingHandler thingHandler)": {
                "lineStart": 104,
                "lineEnd": 113
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.updateThingHandlerStatus(VitotronicThingHandler thingHandler, ThingStatus status)": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.updateThingHandlersStatus(ThingStatus status)": {
                "lineStart": 119,
                "lineEnd": 124
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.startAutomaticRefresh()": {
                "lineStart": 145,
                "lineEnd": 150
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.refreshData()": {
                "lineStart": 152,
                "lineEnd": 164
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.scanThings()": {
                "lineStart": 166,
                "lineEnd": 173
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.getStatus()": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.updateChannel(String thingId, String channelId, String value)": {
                "lineStart": 179,
                "lineEnd": 181
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.handleCommand(ChannelUID channelUID, Command command)": {
                "lineStart": 183,
                "lineEnd": 184
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.initialize()": {
                "lineStart": 186,
                "lineEnd": 195
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.dispose()": {
                "lineStart": 197,
                "lineEnd": 204
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.openSocket()": {
                "lineStart": 206,
                "lineEnd": 221
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.startSocketReceiver()": {
                "lineStart": 251,
                "lineEnd": 259
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler.sendSocketData(String message)": {
                "lineStart": 261,
                "lineEnd": 280
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.startElement(String uri, String localName, String pName, Attributes attr)": {
                "lineStart": 294,
                "lineEnd": 343
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.characters(char[] ch, int start, int length)": {
                "lineStart": 345,
                "lineEnd": 350
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.endElement(String uri, String localName, String qName)": {
                "lineStart": 352,
                "lineEnd": 370
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.endDocument()": {
                "lineStart": 372,
                "lineEnd": 373
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.ignorableWhitespace(char[] arg0, int arg1, int arg2)": {
                "lineStart": 375,
                "lineEnd": 376
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.processingInstruction(String arg0, String arg1)": {
                "lineStart": 378,
                "lineEnd": 379
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.setDocumentLocator(Locator arg0)": {
                "lineStart": 381,
                "lineEnd": 382
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.skippedEntity(String arg0)": {
                "lineStart": 384,
                "lineEnd": 385
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.startDocument()": {
                "lineStart": 387,
                "lineEnd": 388
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.startPrefixMapping(String arg0, String arg1)": {
                "lineStart": 390,
                "lineEnd": 391
            },
            "org.openhab.binding.vitotronic.internal.handler.VitotronicBridgeHandler$XmlHandler.endPrefixMapping(String prefix)": {
                "lineStart": 393,
                "lineEnd": 394
            }
        },
        "15f09d2970-WemoLinkDiscoveryService.java": {
            "org.openhab.binding.wemo.internal.discovery.WemoLinkDiscoveryService.startScan()": {
                "lineStart": 66,
                "lineEnd": 155
            }
        },
        "5444ff4b8d-WemoCoffeeHandler.java": {
            "org.openhab.binding.wemo.internal.handler.WemoCoffeeHandler.updateWemoState()": {
                "lineStart": 213,
                "lineEnd": 370
            }
        },
        "8653958442-WemoHolmesHandler.java": {
            "org.openhab.binding.wemo.internal.handler.WemoHolmesHandler.updateWemoState()": {
                "lineStart": 292,
                "lineEnd": 510
            }
        },
        "7becbdc4a9-WemoMakerHandler.java": {
            "org.openhab.binding.wemo.internal.handler.WemoMakerHandler.updateWemoState()": {
                "lineStart": 158,
                "lineEnd": 225
            }
        },
        "f673e96c42-XMLUtils.java": {
            "org.openhab.binding.yamahareceiver.internal.protocol.xml.XMLUtils.xml(String message)": {
                "lineStart": 99,
                "lineEnd": 108
            }
        },
        "6128c642f4-XPathTransformationService.java": {
            "org.openhab.transform.xpath.internal.XPathTransformationService.transform(String xpathExpression, String source)": {
                "lineStart": 21,
                "lineEnd": 53
            }
        }
    },
    "CVE-2021-26715": {
        "d8946469-OAuthConfirmationController.java": {
            "org.mitre.oauth2.web.OAuthConfirmationController.confimAccess(Map<String, Object> model, @ModelAttribute(\"authorizationRequest\") AuthorizationRequest authRequest, Principal p)": {
                "lineStart": 54,
                "lineEnd": 149
            }
        }
    },
    "CVE-2022-34178": {
        "9a9b36d-StatusImage.java": {
            "org.jenkinsci.plugins.badge.StatusImage.<init>(String subject, String status, String colorName, String animatedColorName, String style, String link)": {
                "lineStart": 62,
                "lineEnd": 149
            }
        }
    },
    "CVE-2023-48241": {
        "2c9bf514890-SolrQueryExecutor.java": {
            "org.xwiki.query.solr.internal.SolrQueryExecutor.filterResponse(QueryResponse response, List<DocumentReference> usersToCheck)": {
                "lineStart": 130,
                "lineEnd": 151
            }
        }
    },
    "CVE-2021-29047": {
        "c744ec07bdabf-SimpleCaptchaImpl.java": {
            "com.liferay.captcha.simplecaptcha.SimpleCaptchaImpl.validateChallenge(HttpServletRequest httpServletRequest)": {
                "lineStart": 283,
                "lineEnd": 297
            }
        }
    },
    "CVE-2021-21290": {
        "db6e0a223c-AbstractDiskHttpData.java": {
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData.tempFile()": {
                "lineStart": 31,
                "lineEnd": 54
            }
        },
        "dc99f1b95b-NativeLibraryLoader.java": {
            "io.netty.util.internal.NativeLibraryLoader.load(String originalName, ClassLoader loader)": {
                "lineStart": 82,
                "lineEnd": 186
            }
        },
        "20251b3162-PlatformDependent.java": {
            "io.netty.util.internal.PlatformDependent.byteArrayBaseOffset()": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "io.netty.util.internal.PlatformDependent.hasDirectBufferNoCleanerConstructor()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "io.netty.util.internal.PlatformDependent.allocateUninitializedArray(int size)": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "io.netty.util.internal.PlatformDependent.isAndroid()": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "io.netty.util.internal.PlatformDependent.isWindows()": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "io.netty.util.internal.PlatformDependent.isOsx()": {
                "lineStart": 245,
                "lineEnd": 247
            },
            "io.netty.util.internal.PlatformDependent.maybeSuperUser()": {
                "lineStart": 249,
                "lineEnd": 251
            },
            "io.netty.util.internal.PlatformDependent.javaVersion()": {
                "lineStart": 253,
                "lineEnd": 255
            },
            "io.netty.util.internal.PlatformDependent.canEnableTcpNoDelayByDefault()": {
                "lineStart": 257,
                "lineEnd": 259
            },
            "io.netty.util.internal.PlatformDependent.hasUnsafe()": {
                "lineStart": 261,
                "lineEnd": 263
            },
            "io.netty.util.internal.PlatformDependent.getUnsafeUnavailabilityCause()": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "io.netty.util.internal.PlatformDependent.isUnaligned()": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "io.netty.util.internal.PlatformDependent.directBufferPreferred()": {
                "lineStart": 273,
                "lineEnd": 275
            },
            "io.netty.util.internal.PlatformDependent.maxDirectMemory()": {
                "lineStart": 277,
                "lineEnd": 279
            },
            "io.netty.util.internal.PlatformDependent.usedDirectMemory()": {
                "lineStart": 281,
                "lineEnd": 283
            },
            "io.netty.util.internal.PlatformDependent.tmpdir()": {
                "lineStart": 285,
                "lineEnd": 287
            },
            "io.netty.util.internal.PlatformDependent.bitMode()": {
                "lineStart": 289,
                "lineEnd": 291
            },
            "io.netty.util.internal.PlatformDependent.addressSize()": {
                "lineStart": 293,
                "lineEnd": 295
            },
            "io.netty.util.internal.PlatformDependent.allocateMemory(long size)": {
                "lineStart": 297,
                "lineEnd": 299
            },
            "io.netty.util.internal.PlatformDependent.freeMemory(long address)": {
                "lineStart": 301,
                "lineEnd": 303
            },
            "io.netty.util.internal.PlatformDependent.reallocateMemory(long address, long newSize)": {
                "lineStart": 305,
                "lineEnd": 307
            },
            "io.netty.util.internal.PlatformDependent.throwException(Throwable t)": {
                "lineStart": 309,
                "lineEnd": 317
            },
            "io.netty.util.internal.PlatformDependent.throwException0(Throwable t)": {
                "lineStart": 319,
                "lineEnd": 321
            },
            "io.netty.util.internal.PlatformDependent.newConcurrentHashMap()": {
                "lineStart": 323,
                "lineEnd": 325
            },
            "io.netty.util.internal.PlatformDependent.newLongCounter()": {
                "lineStart": 327,
                "lineEnd": 335
            },
            "io.netty.util.internal.PlatformDependent.newConcurrentHashMap(int initialCapacity)": {
                "lineStart": 337,
                "lineEnd": 339
            },
            "io.netty.util.internal.PlatformDependent.newConcurrentHashMap(int initialCapacity, float loadFactor)": {
                "lineStart": 341,
                "lineEnd": 343
            },
            "io.netty.util.internal.PlatformDependent.newConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)": {
                "lineStart": 345,
                "lineEnd": 347
            },
            "io.netty.util.internal.PlatformDependent.newConcurrentHashMap(Map<? extends K, ? extends V> map)": {
                "lineStart": 349,
                "lineEnd": 351
            },
            "io.netty.util.internal.PlatformDependent.freeDirectBuffer(ByteBuffer buffer)": {
                "lineStart": 353,
                "lineEnd": 355
            },
            "io.netty.util.internal.PlatformDependent.directBufferAddress(ByteBuffer buffer)": {
                "lineStart": 357,
                "lineEnd": 359
            },
            "io.netty.util.internal.PlatformDependent.directBuffer(long memoryAddress, int size)": {
                "lineStart": 361,
                "lineEnd": 367
            },
            "io.netty.util.internal.PlatformDependent.getObject(Object object, long fieldOffset)": {
                "lineStart": 369,
                "lineEnd": 371
            },
            "io.netty.util.internal.PlatformDependent.getInt(Object object, long fieldOffset)": {
                "lineStart": 373,
                "lineEnd": 375
            },
            "io.netty.util.internal.PlatformDependent.getIntVolatile(long address)": {
                "lineStart": 377,
                "lineEnd": 379
            },
            "io.netty.util.internal.PlatformDependent.putIntOrdered(long adddress, int newValue)": {
                "lineStart": 381,
                "lineEnd": 383
            },
            "io.netty.util.internal.PlatformDependent.getByte(long address)": {
                "lineStart": 385,
                "lineEnd": 387
            },
            "io.netty.util.internal.PlatformDependent.getShort(long address)": {
                "lineStart": 389,
                "lineEnd": 391
            },
            "io.netty.util.internal.PlatformDependent.getInt(long address)": {
                "lineStart": 393,
                "lineEnd": 395
            },
            "io.netty.util.internal.PlatformDependent.getLong(long address)": {
                "lineStart": 397,
                "lineEnd": 399
            },
            "io.netty.util.internal.PlatformDependent.getByte(byte[] data, int index)": {
                "lineStart": 401,
                "lineEnd": 403
            },
            "io.netty.util.internal.PlatformDependent.getByte(byte[] data, long index)": {
                "lineStart": 405,
                "lineEnd": 407
            },
            "io.netty.util.internal.PlatformDependent.getShort(byte[] data, int index)": {
                "lineStart": 409,
                "lineEnd": 411
            },
            "io.netty.util.internal.PlatformDependent.getInt(byte[] data, int index)": {
                "lineStart": 413,
                "lineEnd": 415
            },
            "io.netty.util.internal.PlatformDependent.getInt(int[] data, long index)": {
                "lineStart": 417,
                "lineEnd": 419
            },
            "io.netty.util.internal.PlatformDependent.getLong(byte[] data, int index)": {
                "lineStart": 421,
                "lineEnd": 423
            },
            "io.netty.util.internal.PlatformDependent.getLong(long[] data, long index)": {
                "lineStart": 425,
                "lineEnd": 427
            },
            "io.netty.util.internal.PlatformDependent.getLongSafe(byte[] bytes, int offset)": {
                "lineStart": 429,
                "lineEnd": 435
            },
            "io.netty.util.internal.PlatformDependent.getIntSafe(byte[] bytes, int offset)": {
                "lineStart": 437,
                "lineEnd": 443
            },
            "io.netty.util.internal.PlatformDependent.getShortSafe(byte[] bytes, int offset)": {
                "lineStart": 445,
                "lineEnd": 451
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAsciiCompute(CharSequence value, int offset, int hash)": {
                "lineStart": 453,
                "lineEnd": 459
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAsciiSanitizeInt(CharSequence value, int offset)": {
                "lineStart": 461,
                "lineEnd": 467
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAsciiSanitizeShort(CharSequence value, int offset)": {
                "lineStart": 469,
                "lineEnd": 475
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAsciiSanitizeByte(char value)": {
                "lineStart": 477,
                "lineEnd": 479
            },
            "io.netty.util.internal.PlatformDependent.putByte(long address, byte value)": {
                "lineStart": 481,
                "lineEnd": 483
            },
            "io.netty.util.internal.PlatformDependent.putShort(long address, short value)": {
                "lineStart": 485,
                "lineEnd": 487
            },
            "io.netty.util.internal.PlatformDependent.putInt(long address, int value)": {
                "lineStart": 489,
                "lineEnd": 491
            },
            "io.netty.util.internal.PlatformDependent.putLong(long address, long value)": {
                "lineStart": 493,
                "lineEnd": 495
            },
            "io.netty.util.internal.PlatformDependent.putByte(byte[] data, int index, byte value)": {
                "lineStart": 497,
                "lineEnd": 499
            },
            "io.netty.util.internal.PlatformDependent.putByte(Object data, long offset, byte value)": {
                "lineStart": 501,
                "lineEnd": 503
            },
            "io.netty.util.internal.PlatformDependent.putShort(byte[] data, int index, short value)": {
                "lineStart": 505,
                "lineEnd": 507
            },
            "io.netty.util.internal.PlatformDependent.putInt(byte[] data, int index, int value)": {
                "lineStart": 509,
                "lineEnd": 511
            },
            "io.netty.util.internal.PlatformDependent.putLong(byte[] data, int index, long value)": {
                "lineStart": 513,
                "lineEnd": 515
            },
            "io.netty.util.internal.PlatformDependent.putObject(Object o, long offset, Object x)": {
                "lineStart": 517,
                "lineEnd": 519
            },
            "io.netty.util.internal.PlatformDependent.objectFieldOffset(Field field)": {
                "lineStart": 521,
                "lineEnd": 523
            },
            "io.netty.util.internal.PlatformDependent.copyMemory(long srcAddr, long dstAddr, long length)": {
                "lineStart": 525,
                "lineEnd": 527
            },
            "io.netty.util.internal.PlatformDependent.copyMemory(byte[] src, int srcIndex, long dstAddr, long length)": {
                "lineStart": 529,
                "lineEnd": 531
            },
            "io.netty.util.internal.PlatformDependent.copyMemory(byte[] src, int srcIndex, byte[] dst, int dstIndex, long length)": {
                "lineStart": 533,
                "lineEnd": 535
            },
            "io.netty.util.internal.PlatformDependent.copyMemory(long srcAddr, byte[] dst, int dstIndex, long length)": {
                "lineStart": 537,
                "lineEnd": 539
            },
            "io.netty.util.internal.PlatformDependent.setMemory(byte[] dst, int dstIndex, long bytes, byte value)": {
                "lineStart": 541,
                "lineEnd": 543
            },
            "io.netty.util.internal.PlatformDependent.setMemory(long address, long bytes, byte value)": {
                "lineStart": 545,
                "lineEnd": 547
            },
            "io.netty.util.internal.PlatformDependent.allocateDirectNoCleaner(int capacity)": {
                "lineStart": 549,
                "lineEnd": 561
            },
            "io.netty.util.internal.PlatformDependent.reallocateDirectNoCleaner(ByteBuffer buffer, int capacity)": {
                "lineStart": 563,
                "lineEnd": 576
            },
            "io.netty.util.internal.PlatformDependent.freeDirectNoCleaner(ByteBuffer buffer)": {
                "lineStart": 578,
                "lineEnd": 583
            },
            "io.netty.util.internal.PlatformDependent.incrementMemoryCounter(int capacity)": {
                "lineStart": 585,
                "lineEnd": 595
            },
            "io.netty.util.internal.PlatformDependent.decrementMemoryCounter(int capacity)": {
                "lineStart": 597,
                "lineEnd": 603
            },
            "io.netty.util.internal.PlatformDependent.useDirectBufferNoCleaner()": {
                "lineStart": 605,
                "lineEnd": 607
            },
            "io.netty.util.internal.PlatformDependent.equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length)": {
                "lineStart": 609,
                "lineEnd": 611
            },
            "io.netty.util.internal.PlatformDependent.isZero(byte[] bytes, int startPos, int length)": {
                "lineStart": 613,
                "lineEnd": 615
            },
            "io.netty.util.internal.PlatformDependent.equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length)": {
                "lineStart": 617,
                "lineEnd": 619
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAscii(byte[] bytes, int startPos, int length)": {
                "lineStart": 621,
                "lineEnd": 623
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAscii(CharSequence bytes)": {
                "lineStart": 625,
                "lineEnd": 667
            },
            "io.netty.util.internal.PlatformDependent$Mpsc.<init>()": {
                "lineStart": 671,
                "lineEnd": 672
            },
            "io.netty.util.internal.PlatformDependent$Mpsc.newMpscQueue(final int maxCapacity)": {
                "lineStart": 698,
                "lineEnd": 701
            },
            "io.netty.util.internal.PlatformDependent$Mpsc.newMpscQueue()": {
                "lineStart": 703,
                "lineEnd": 705
            },
            "io.netty.util.internal.PlatformDependent.newMpscQueue()": {
                "lineStart": 709,
                "lineEnd": 711
            },
            "io.netty.util.internal.PlatformDependent.newMpscQueue(final int maxCapacity)": {
                "lineStart": 713,
                "lineEnd": 715
            },
            "io.netty.util.internal.PlatformDependent.newSpscQueue()": {
                "lineStart": 717,
                "lineEnd": 719
            },
            "io.netty.util.internal.PlatformDependent.newFixedMpscQueue(int capacity)": {
                "lineStart": 721,
                "lineEnd": 723
            },
            "io.netty.util.internal.PlatformDependent.getClassLoader(final Class<?> clazz)": {
                "lineStart": 725,
                "lineEnd": 727
            },
            "io.netty.util.internal.PlatformDependent.getContextClassLoader()": {
                "lineStart": 729,
                "lineEnd": 731
            },
            "io.netty.util.internal.PlatformDependent.getSystemClassLoader()": {
                "lineStart": 733,
                "lineEnd": 735
            },
            "io.netty.util.internal.PlatformDependent.newConcurrentDeque()": {
                "lineStart": 737,
                "lineEnd": 746
            },
            "io.netty.util.internal.PlatformDependent.threadLocalRandom()": {
                "lineStart": 748,
                "lineEnd": 750
            },
            "io.netty.util.internal.PlatformDependent.isWindows0()": {
                "lineStart": 752,
                "lineEnd": 759
            },
            "io.netty.util.internal.PlatformDependent.isOsx0()": {
                "lineStart": 761,
                "lineEnd": 769
            },
            "io.netty.util.internal.PlatformDependent.maybeSuperUser0()": {
                "lineStart": 771,
                "lineEnd": 778
            },
            "io.netty.util.internal.PlatformDependent.unsafeUnavailabilityCause0()": {
                "lineStart": 780,
                "lineEnd": 806
            },
            "io.netty.util.internal.PlatformDependent.isJ9Jvm()": {
                "lineStart": 808,
                "lineEnd": 810
            },
            "io.netty.util.internal.PlatformDependent.isJ9Jvm0()": {
                "lineStart": 812,
                "lineEnd": 815
            },
            "io.netty.util.internal.PlatformDependent.isIkvmDotNet()": {
                "lineStart": 817,
                "lineEnd": 819
            },
            "io.netty.util.internal.PlatformDependent.isIkvmDotNet0()": {
                "lineStart": 821,
                "lineEnd": 824
            },
            "io.netty.util.internal.PlatformDependent.maxDirectMemory0()": {
                "lineStart": 826,
                "lineEnd": 888
            },
            "io.netty.util.internal.PlatformDependent.tmpdir0()": {
                "lineStart": 890,
                "lineEnd": 951
            },
            "io.netty.util.internal.PlatformDependent.toDirectory(String path)": {
                "lineStart": 953,
                "lineEnd": 971
            },
            "io.netty.util.internal.PlatformDependent.bitMode0()": {
                "lineStart": 973,
                "lineEnd": 1014
            },
            "io.netty.util.internal.PlatformDependent.addressSize0()": {
                "lineStart": 1016,
                "lineEnd": 1022
            },
            "io.netty.util.internal.PlatformDependent.byteArrayBaseOffset0()": {
                "lineStart": 1024,
                "lineEnd": 1030
            },
            "io.netty.util.internal.PlatformDependent.equalsSafe(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length)": {
                "lineStart": 1032,
                "lineEnd": 1042
            },
            "io.netty.util.internal.PlatformDependent.isZeroSafe(byte[] bytes, int startPos, int length)": {
                "lineStart": 1044,
                "lineEnd": 1054
            },
            "io.netty.util.internal.PlatformDependent.hashCodeAsciiSafe(byte[] bytes, int startPos, int length)": {
                "lineStart": 1056,
                "lineEnd": 1082
            },
            "io.netty.util.internal.PlatformDependent.normalizedArch()": {
                "lineStart": 1084,
                "lineEnd": 1086
            },
            "io.netty.util.internal.PlatformDependent.normalizedOs()": {
                "lineStart": 1088,
                "lineEnd": 1090
            },
            "io.netty.util.internal.PlatformDependent.normalizedLinuxClassifiers()": {
                "lineStart": 1092,
                "lineEnd": 1094
            },
            "io.netty.util.internal.PlatformDependent.addClassifier(Set<String> allowed, Set<String> dest, String... maybeClassifiers)": {
                "lineStart": 1096,
                "lineEnd": 1104
            },
            "io.netty.util.internal.PlatformDependent.normalizeOsReleaseVariableValue(String value)": {
                "lineStart": 1106,
                "lineEnd": 1108
            },
            "io.netty.util.internal.PlatformDependent.normalize(String value)": {
                "lineStart": 1110,
                "lineEnd": 1112
            },
            "io.netty.util.internal.PlatformDependent.normalizeArch(String value)": {
                "lineStart": 1114,
                "lineEnd": 1165
            },
            "io.netty.util.internal.PlatformDependent.normalizeOs(String value)": {
                "lineStart": 1167,
                "lineEnd": 1213
            },
            "io.netty.util.internal.PlatformDependent$AtomicLongCounter.add(long delta)": {
                "lineStart": 1217,
                "lineEnd": 1219
            },
            "io.netty.util.internal.PlatformDependent$AtomicLongCounter.increment()": {
                "lineStart": 1221,
                "lineEnd": 1223
            },
            "io.netty.util.internal.PlatformDependent$AtomicLongCounter.decrement()": {
                "lineStart": 1225,
                "lineEnd": 1227
            },
            "io.netty.util.internal.PlatformDependent$AtomicLongCounter.value()": {
                "lineStart": 1229,
                "lineEnd": 1231
            },
            "io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider.current()": {
                "lineStart": 1236,
                "lineEnd": 1236
            },
            "io.netty.util.internal.PlatformDependent.<init>()": {
                "lineStart": 1239,
                "lineEnd": 1240
            }
        },
        "04e84cafc7-SelfSignedCertificate.java": {
            "io.netty.handler.ssl.util.SelfSignedCertificate.newSelfSignedCertificate(String fqdn, PrivateKey key, X509Certificate cert)": {
                "lineStart": 157,
                "lineEnd": 224
            }
        }
    },
    "CVE-2022-45207": {
        "32c44eaa-SysDictMapper.java": {
            "org.jeecg.modules.system.mapper.SysDictMapper.duplicateCheckCountSql(DuplicateCheckVo duplicateCheckVo)": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.duplicateCheckCountSqlNoDataId(DuplicateCheckVo duplicateCheckVo)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryDictItemsByCode(@Param(\"code\") String code)": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryEnableDictItemsByCode(@Param(\"code\") String code)": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryDictItemsByCodeList(@Param(\"dictCodeList\") List<String> dictCodeList)": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryTableDictItemsByCode(@Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code)": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryTableDictItemsByCodeAndFilter(@Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code, @Param(\"filterSql\") String filterSql)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.getDictByTableNgAlain(@Param(\"table\") String table, @Param(\"key\") String key, @Param(\"value\") String value)": {
                "lineStart": 24,
                "lineEnd": 25
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryDictTextByKey(@Param(\"code\") String code, @Param(\"key\") String key)": {
                "lineStart": 26,
                "lineEnd": 26
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryManyDictByKeys(@Param(\"dictCodeList\") List<String> dictCodeList, @Param(\"keys\") List<String> keys)": {
                "lineStart": 27,
                "lineEnd": 27
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryTableDictTextByKey(@Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code, @Param(\"key\") String key)": {
                "lineStart": 28,
                "lineEnd": 28
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryAllDepartBackDictModel()": {
                "lineStart": 29,
                "lineEnd": 29
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryAllUserBackDictModel()": {
                "lineStart": 30,
                "lineEnd": 30
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryTreeList(@Param(\"query\") Map<String, String> query, @Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code, @Param(\"pidField\") String pidField, @Param(\"pid\") String pid, @Param(\"hasChildField\") String hasChildField, @Param(\"converIsLeafVal\") int converIsLeafVal)": {
                "lineStart": 31,
                "lineEnd": 32
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.deleteOneById(@Param(\"id\") String id)": {
                "lineStart": 33,
                "lineEnd": 34
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryDeleteList()": {
                "lineStart": 35,
                "lineEnd": 36
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.updateDictDelFlag(@Param(\"flag\") int delFlag, @Param(\"id\") String id)": {
                "lineStart": 37,
                "lineEnd": 38
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryDictTablePageList(Page page, @Param(\"query\") DictQuery query)": {
                "lineStart": 39,
                "lineEnd": 39
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryTableDictWithFilter(Page<DictModel> page, @Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code, @Param(\"filterSql\") String filterSql)": {
                "lineStart": 40,
                "lineEnd": 41
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryAllTableDictItems(@Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code, @Param(\"filterSql\") String filterSql)": {
                "lineStart": 42,
                "lineEnd": 43
            },
            "org.jeecg.modules.system.mapper.SysDictMapper.queryTableDictByKeysAndFilterSql(@Param(\"table\") String table, @Param(\"text\") String text, @Param(\"code\") String code, @Param(\"filterSql\") String filterSql, @Param(\"codeValues\") List<String> codeValues)": {
                "lineStart": 44,
                "lineEnd": 44
            }
        }
    },
    "CVE-2022-28366": {
        "2a226c36a2-HtmlUnitContextFactory.java": {
            "com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory$TimeoutContext.compileString(String source, final Evaluator compiler, final ErrorReporter compilationErrorReporter, final String sourceName, final int lineno, final Object securityDomain)": {
                "lineStart": 85,
                "lineEnd": 107
            }
        }
    },
    "CVE-2021-33330": {
        "2e4402f2c064a-CORSAnnotationDynamicFeature.java": {
            "com.liferay.portal.remote.cors.internal.jaxrs.feature.CORSAnnotationDynamicFeature.configure(ResourceInfo resourceInfo, FeatureContext context)": {
                "lineStart": 24,
                "lineEnd": 32
            },
            "com.liferay.portal.remote.cors.internal.jaxrs.feature.CORSAnnotationDynamicFeature.buildCORSResponseFilter(CORSSupport corsSupport)": {
                "lineStart": 34,
                "lineEnd": 43
            },
            "com.liferay.portal.remote.cors.internal.jaxrs.feature.CORSAnnotationDynamicFeature$CORSPreflighContainerRequestFilter.filter(ContainerRequestContext containerRequestContext)": {
                "lineStart": 62,
                "lineEnd": 70
            }
        }
    },
    "CVE-2021-20190": {
        "dee36a14e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type)": {
                "lineStart": 75,
                "lineEnd": 107
            }
        }
    },
    "CVE-2023-23933": {
        "655267dc-AnomalyDetectorJobRunner.java": {
            "org.opensearch.ad.AnomalyDetectorJobRunner.runAdJob(AnomalyDetectorJob jobParameter, LockService lockService, LockModel lock, Instant detectionStartTime, Instant executionStartTime)": {
                "lineStart": 157,
                "lineEnd": 192
            }
        },
        "92552f27-AnomalyDetectorPlugin.java": {
            "org.opensearch.ad.AnomalyDetectorPlugin.createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<RepositoriesService> repositoriesServiceSupplier)": {
                "lineStart": 255,
                "lineEnd": 329
            }
        },
        "d47494e5-AnomalyDetectorProfileRunner.java": {
            "org.opensearch.ad.AnomalyDetectorProfileRunner.<init>(Client client, NamedXContentRegistry xContentRegistry, DiscoveryNodeFilterer nodeFilter, long requiredSamples, TransportService transportService, ADTaskManager adTaskManager)": {
                "lineStart": 74,
                "lineEnd": 86
            },
            "org.opensearch.ad.AnomalyDetectorProfileRunner.profileEntityStats(MultiResponsesDelegateActionListener<DetectorProfile> listener, AnomalyDetector detector)": {
                "lineStart": 242,
                "lineEnd": 300
            }
        },
        "11c4015e-EntityProfileRunner.java": {
            "org.opensearch.ad.EntityProfileRunner.<init>(Client client, NamedXContentRegistry xContentRegistry, long requiredSamples)": {
                "lineStart": 52,
                "lineEnd": 56
            },
            "org.opensearch.ad.EntityProfileRunner.validateEntity(Entity entity, List<String> categoryFields, String detectorId, Set<EntityProfileName> profilesToCollect, AnomalyDetector detector, ActionListener<EntityProfile> listener)": {
                "lineStart": 95,
                "lineEnd": 132
            }
        },
        "dad048ba-CompositeRetriever.java": {
            "org.opensearch.ad.feature.CompositeRetriever.<init>(long dataStartEpoch, long dataEndEpoch, AnomalyDetector anomalyDetector, NamedXContentRegistry xContent, Client client, long expirationEpochMs, Clock clock, Settings settings, int maxEntitiesPerInterval, int pageSize, IndexNameExpressionResolver indexNameExpressionResolver, ClusterService clusterService)": {
                "lineStart": 52,
                "lineEnd": 65
            },
            "org.opensearch.ad.feature.CompositeRetriever.<init>(long dataStartEpoch, long dataEndEpoch, AnomalyDetector anomalyDetector, NamedXContentRegistry xContent, Client client, long expirationEpochMs, Settings settings, int maxEntitiesPerInterval, int pageSize, IndexNameExpressionResolver indexNameExpressionResolver, ClusterService clusterService)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.opensearch.ad.feature.CompositeRetriever$PageIterator.next(ActionListener<Page> listener)": {
                "lineStart": 94,
                "lineEnd": 109
            }
        },
        "cec226f5-FeatureManager.java": {
            "org.opensearch.ad.feature.FeatureManager.getColdStartData(AnomalyDetector detector)": {
                "lineStart": 144,
                "lineEnd": 147
            },
            "org.opensearch.ad.feature.FeatureManager.getPreviewFeaturesForEntity(AnomalyDetector detector, Entity entity, long startMilli, long endMilli, ActionListener<Features> listener)": {
                "lineStart": 250,
                "lineEnd": 256
            }
        },
        "599d6aac-SearchFeatureDao.java": {
            "org.opensearch.ad.feature.SearchFeatureDao.<init>(Client client, NamedXContentRegistry xContent, Interpolator interpolator, ClientUtil clientUtil, Settings settings, ClusterService clusterService, int minimumDocCount, Clock clock, int maxEntitiesForPreview, int pageSize, long previewTimeoutInMilliseconds)": {
                "lineStart": 75,
                "lineEnd": 87
            },
            "org.opensearch.ad.feature.SearchFeatureDao.<init>(Client client, NamedXContentRegistry xContent, Interpolator interpolator, ClientUtil clientUtil, Settings settings, ClusterService clusterService, int minimumDocCount)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getLatestDataTime(AnomalyDetector detector)": {
                "lineStart": 93,
                "lineEnd": 97
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getLatestDataTime(AnomalyDetector detector, ActionListener<Optional<Long>> listener)": {
                "lineStart": 99,
                "lineEnd": 103
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getHighestCountEntities(AnomalyDetector detector, long startTime, long endTime, int maxEntitiesSize, int minimumDocCount, int pageSize, ActionListener<List<Entity>> listener)": {
                "lineStart": 109,
                "lineEnd": 128
            },
            "org.opensearch.ad.feature.SearchFeatureDao$TopEntitiesListener.onResponse(SearchResponse response)": {
                "lineStart": 148,
                "lineEnd": 201
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getEntityMinDataTime(AnomalyDetector detector, Entity entity, ActionListener<Optional<Long>> listener)": {
                "lineStart": 210,
                "lineEnd": 219
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getFeaturesForPeriod(AnomalyDetector detector, long startTime, long endTime)": {
                "lineStart": 226,
                "lineEnd": 229
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getFeaturesForPeriod(AnomalyDetector detector, long startTime, long endTime, ActionListener<Optional<double[]>> listener)": {
                "lineStart": 231,
                "lineEnd": 234
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getFeaturesForPeriodByBatch(AnomalyDetector detector, Entity entity, long startTime, long endTime, ActionListener<Map<Long, Optional<double[]>>> listener)": {
                "lineStart": 236,
                "lineEnd": 241
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getFeatureSamplesForPeriods(AnomalyDetector detector, List<Entry<Long, Long>> ranges, ActionListener<List<Optional<double[]>>> listener)": {
                "lineStart": 264,
                "lineEnd": 275
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getFeaturesForSampledPeriods(AnomalyDetector detector, int maxSamples, int maxStride, long endTime)": {
                "lineStart": 277,
                "lineEnd": 302
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getFeaturesForSampledPeriods(AnomalyDetector detector, int maxSamples, int stride, long endTime, Map<Long, double[]> cache, boolean isInterpolatable)": {
                "lineStart": 304,
                "lineEnd": 348
            },
            "org.opensearch.ad.feature.SearchFeatureDao.getColdStartSamplesForPeriods(AnomalyDetector detector, List<Entry<Long, Long>> ranges, Entity entity, boolean includesEmptyBucket, ActionListener<List<Optional<double[]>>> listener)": {
                "lineStart": 468,
                "lineEnd": 480
            }
        },
        "144c7354-AbstractAnomalyDetectorActionHandler.java": {
            "org.opensearch.ad.rest.handler.AbstractAnomalyDetectorActionHandler.<init>(ClusterService clusterService, Client client, TransportService transportService, ActionListener<T> listener, AnomalyDetectionIndices anomalyDetectionIndices, String detectorId, Long seqNo, Long primaryTerm, WriteRequest.RefreshPolicy refreshPolicy, AnomalyDetector anomalyDetector, TimeValue requestTimeout, Integer maxSingleEntityAnomalyDetectors, Integer maxMultiEntityAnomalyDetectors, Integer maxAnomalyFeatures, RestRequest.Method method, NamedXContentRegistry xContentRegistry, User user, ADTaskManager adTaskManager, SearchFeatureDao searchFeatureDao, String validationType, boolean isDryRun, Clock clock)": {
                "lineStart": 111,
                "lineEnd": 134
            },
            "org.opensearch.ad.rest.handler.AbstractAnomalyDetectorActionHandler.validateTimeField(boolean indexingDryRun)": {
                "lineStart": 198,
                "lineEnd": 251
            },
            "org.opensearch.ad.rest.handler.AbstractAnomalyDetectorActionHandler.validateCategoricalField(String detectorId, boolean indexingDryRun)": {
                "lineStart": 392,
                "lineEnd": 457
            },
            "org.opensearch.ad.rest.handler.AbstractAnomalyDetectorActionHandler.searchAdInputIndices(String detectorId, boolean indexingDryRun)": {
                "lineStart": 459,
                "lineEnd": 463
            },
            "org.opensearch.ad.rest.handler.AbstractAnomalyDetectorActionHandler.finishDetectorValidationOrContinueToModelValidation()": {
                "lineStart": 529,
                "lineEnd": 539
            },
            "org.opensearch.ad.rest.handler.AbstractAnomalyDetectorActionHandler.validateAnomalyDetectorFeatures(String detectorId, boolean indexingDryRun)": {
                "lineStart": 600,
                "lineEnd": 655
            }
        },
        "6291c647-IndexAnomalyDetectorActionHandler.java": {
            "org.opensearch.ad.rest.handler.IndexAnomalyDetectorActionHandler.<init>(ClusterService clusterService, Client client, TransportService transportService, ActionListener<IndexAnomalyDetectorResponse> listener, AnomalyDetectionIndices anomalyDetectionIndices, String detectorId, Long seqNo, Long primaryTerm, WriteRequest.RefreshPolicy refreshPolicy, AnomalyDetector anomalyDetector, TimeValue requestTimeout, Integer maxSingleEntityAnomalyDetectors, Integer maxMultiEntityAnomalyDetectors, Integer maxAnomalyFeatures, RestRequest.Method method, NamedXContentRegistry xContentRegistry, User user, ADTaskManager adTaskManager, SearchFeatureDao searchFeatureDao)": {
                "lineStart": 17,
                "lineEnd": 19
            }
        },
        "a808c7f3-ModelValidationActionHandler.java": {
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.<init>(ClusterService clusterService, Client client, ActionListener<ValidateAnomalyDetectorResponse> listener, AnomalyDetector anomalyDetector, TimeValue requestTimeout, NamedXContentRegistry xContentRegistry, SearchFeatureDao searchFeatureDao, String validationType, Clock clock)": {
                "lineStart": 82,
                "lineEnd": 92
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.getTopEntity(ActionListener<Map<String, Object>> topEntityListener)": {
                "lineStart": 110,
                "lineEnd": 152
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.getBucketAggregates(long latestTime, ActionListener<ValidateAnomalyDetectorResponse> listener, Map<String, Object> topEntity)": {
                "lineStart": 180,
                "lineEnd": 204
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler$DetectorIntervalRecommendationListener.onResponse(SearchResponse response)": {
                "lineStart": 236,
                "lineEnd": 288
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler$DetectorIntervalRecommendationListener.searchWithDifferentInterval(long newIntervalMinuteValue)": {
                "lineStart": 290,
                "lineEnd": 294
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.checkRawDataSparsity(long latestTime)": {
                "lineStart": 332,
                "lineEnd": 337
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.checkDataFilterSparsity(long latestTime)": {
                "lineStart": 372,
                "lineEnd": 378
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.checkCategoryFieldSparsity(Map<String, Object> topEntity, long latestTime)": {
                "lineStart": 417,
                "lineEnd": 427
            },
            "org.opensearch.ad.rest.handler.ModelValidationActionHandler.checkFeatureQueryDelegate(long latestTime)": {
                "lineStart": 452,
                "lineEnd": 491
            }
        },
        "e394d031-ValidateAnomalyDetectorActionHandler.java": {
            "org.opensearch.ad.rest.handler.ValidateAnomalyDetectorActionHandler.<init>(ClusterService clusterService, Client client, ActionListener<ValidateAnomalyDetectorResponse> listener, AnomalyDetectionIndices anomalyDetectionIndices, AnomalyDetector anomalyDetector, TimeValue requestTimeout, Integer maxSingleEntityAnomalyDetectors, Integer maxMultiEntityAnomalyDetectors, Integer maxAnomalyFeatures, RestRequest.Method method, NamedXContentRegistry xContentRegistry, User user, SearchFeatureDao searchFeatureDao, String validationType, Clock clock)": {
                "lineStart": 15,
                "lineEnd": 17
            }
        },
        "48a8ab37-ADBatchTaskRunner.java": {
            "org.opensearch.ad.task.ADBatchTaskRunner.<init>(Settings settings, ThreadPool threadPool, ClusterService clusterService, Client client, ADCircuitBreakerService adCircuitBreakerService, FeatureManager featureManager, ADTaskManager adTaskManager, AnomalyDetectionIndices anomalyDetectionIndices, ADStats adStats, AnomalyResultBulkIndexHandler anomalyResultBulkIndexHandler, ADTaskCacheManager adTaskCacheManager, SearchFeatureDao searchFeatureDao, HashRing hashRing, ModelManager modelManager)": {
                "lineStart": 128,
                "lineEnd": 154
            },
            "org.opensearch.ad.task.ADBatchTaskRunner.searchTopEntitiesForSingleCategoryHC(ADTask adTask, PriorityTracker priorityTracker, long detectionEndTime, long interval, long dataStartTime, long dataEndTime, ActionListener<String> internalHCListener)": {
                "lineStart": 260,
                "lineEnd": 307
            },
            "org.opensearch.ad.task.ADBatchTaskRunner.getDateRangeOfSourceData(ADTask adTask, BiConsumer<Long, Long> consumer, ActionListener<String> internalListener)": {
                "lineStart": 580,
                "lineEnd": 629
            }
        },
        "384a8d1f-AnomalyResultTransportAction.java": {
            "org.opensearch.ad.transport.AnomalyResultTransportAction.<init>(ActionFilters actionFilters, TransportService transportService, Settings settings, Client client, NodeStateManager manager, FeatureManager featureManager, ModelManager modelManager, HashRing hashRing, ClusterService clusterService, IndexNameExpressionResolver indexNameExpressionResolver, ADCircuitBreakerService adCircuitBreakerService, ADStats adStats, ThreadPool threadPool, NamedXContentRegistry xContentRegistry, ADTaskManager adTaskManager)": {
                "lineStart": 117,
                "lineEnd": 140
            },
            "org.opensearch.ad.transport.AnomalyResultTransportAction.executeAnomalyDetection(ActionListener<AnomalyResultResponse> listener, String adID, AnomalyResultRequest request, AnomalyDetector anomalyDetector, long dataStartTime, long dataEndTime)": {
                "lineStart": 291,
                "lineEnd": 347
            }
        },
        "563153ec-GetAnomalyDetectorTransportAction.java": {
            "org.opensearch.ad.transport.GetAnomalyDetectorTransportAction.<init>(TransportService transportService, DiscoveryNodeFilterer nodeFilter, ActionFilters actionFilters, ClusterService clusterService, Client client, Settings settings, NamedXContentRegistry xContentRegistry, ADTaskManager adTaskManager)": {
                "lineStart": 76,
                "lineEnd": 96
            },
            "org.opensearch.ad.transport.GetAnomalyDetectorTransportAction.getExecute(GetAnomalyDetectorRequest request, ActionListener<GetAnomalyDetectorResponse> listener)": {
                "lineStart": 112,
                "lineEnd": 192
            }
        },
        "d40bd295-IndexAnomalyDetectorTransportAction.java": {
            "org.opensearch.ad.transport.IndexAnomalyDetectorTransportAction.<init>(TransportService transportService, ActionFilters actionFilters, Client client, ClusterService clusterService, Settings settings, AnomalyDetectionIndices anomalyDetectionIndices, NamedXContentRegistry xContentRegistry, ADTaskManager adTaskManager, SearchFeatureDao searchFeatureDao)": {
                "lineStart": 48,
                "lineEnd": 59
            },
            "org.opensearch.ad.transport.IndexAnomalyDetectorTransportAction.adExecute(IndexAnomalyDetectorRequest request, User user, AnomalyDetector currentDetector, ThreadContext.StoredContext storedContext, ActionListener<IndexAnomalyDetectorResponse> listener)": {
                "lineStart": 98,
                "lineEnd": 116
            }
        },
        "7a9bd66f-ValidateAnomalyDetectorTransportAction.java": {
            "org.opensearch.ad.transport.ValidateAnomalyDetectorTransportAction.<init>(Client client, ClusterService clusterService, NamedXContentRegistry xContentRegistry, Settings settings, AnomalyDetectionIndices anomalyDetectionIndices, ActionFilters actionFilters, TransportService transportService, SearchFeatureDao searchFeatureDao)": {
                "lineStart": 50,
                "lineEnd": 60
            },
            "org.opensearch.ad.transport.ValidateAnomalyDetectorTransportAction.validateExecute(ValidateAnomalyDetectorRequest request, User user, ThreadContext.StoredContext storedContext, ActionListener<ValidateAnomalyDetectorResponse> listener)": {
                "lineStart": 89,
                "lineEnd": 119
            }
        },
        "3fc1468b-MultiResponsesDelegateActionListener.java": {
            "org.opensearch.ad.util.MultiResponsesDelegateActionListener.onFailure(Exception e)": {
                "lineStart": 47,
                "lineEnd": 59
            }
        },
        "3df9aa9d-ParseUtils.java": {
            "org.opensearch.ad.util.ParseUtils.<init>()": {
                "lineStart": 75,
                "lineEnd": 75
            },
            "org.opensearch.ad.util.ParseUtils.toInstant(XContentParser parser)": {
                "lineStart": 76,
                "lineEnd": 86
            },
            "org.opensearch.ad.util.ParseUtils.toAggregationBuilder(XContentParser parser)": {
                "lineStart": 88,
                "lineEnd": 91
            },
            "org.opensearch.ad.util.ParseUtils.parser(String content, NamedXContentRegistry contentRegistry)": {
                "lineStart": 93,
                "lineEnd": 97
            },
            "org.opensearch.ad.util.ParseUtils.parseAggregators(String aggQuery, NamedXContentRegistry xContentRegistry, String aggName)": {
                "lineStart": 99,
                "lineEnd": 102
            },
            "org.opensearch.ad.util.ParseUtils.parseAggregators(XContentParser parser, String aggName)": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "org.opensearch.ad.util.ParseUtils.parseAggregators(XContentParser parser, int level, String aggName)": {
                "lineStart": 108,
                "lineEnd": 188
            },
            "org.opensearch.ad.util.ParseUtils.generateInternalFeatureQuery(AnomalyDetector detector, long startTime, long endTime, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 190,
                "lineEnd": 203
            },
            "org.opensearch.ad.util.ParseUtils.generatePreviewQuery(AnomalyDetector detector, List<Entry<Long, Long>> ranges, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 205,
                "lineEnd": 220
            },
            "org.opensearch.ad.util.ParseUtils.generateInternalFeatureQueryTemplate(AnomalyDetector detector, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 222,
                "lineEnd": 235
            },
            "org.opensearch.ad.util.ParseUtils.generateEntityColdStartQuery(AnomalyDetector detector, List<Entry<Long, Long>> ranges, Entity entity, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 237,
                "lineEnd": 257
            },
            "org.opensearch.ad.util.ParseUtils.getFeatureData(double[] currentFeature, AnomalyDetector detector)": {
                "lineStart": 259,
                "lineEnd": 269
            },
            "org.opensearch.ad.util.ParseUtils.addUserBackendRolesFilter(User user, SearchSourceBuilder searchSourceBuilder)": {
                "lineStart": 271,
                "lineEnd": 295
            },
            "org.opensearch.ad.util.ParseUtils.getUserContext(Client client)": {
                "lineStart": 297,
                "lineEnd": 301
            },
            "org.opensearch.ad.util.ParseUtils.resolveUserAndExecute(User requestedUser, String detectorId, boolean filterByEnabled, ActionListener listener, Consumer<AnomalyDetector> function, Client client, ClusterService clusterService, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 303,
                "lineEnd": 317
            },
            "org.opensearch.ad.util.ParseUtils.getDetector(User requestUser, String detectorId, ActionListener listener, Consumer<AnomalyDetector> function, Client client, ClusterService clusterService, NamedXContentRegistry xContentRegistry, boolean filterByBackendRole)": {
                "lineStart": 319,
                "lineEnd": 332
            },
            "org.opensearch.ad.util.ParseUtils.onGetAdResponse(GetResponse response, User requestUser, String detectorId, ActionListener<GetAnomalyDetectorResponse> listener, Consumer<AnomalyDetector> function, NamedXContentRegistry xContentRegistry, boolean filterByBackendRole)": {
                "lineStart": 334,
                "lineEnd": 358
            },
            "org.opensearch.ad.util.ParseUtils.checkUserPermissions(User requestedUser, User resourceUser, String detectorId)": {
                "lineStart": 360,
                "lineEnd": 374
            },
            "org.opensearch.ad.util.ParseUtils.checkFilterByBackendRoles(User requestedUser, ActionListener listener)": {
                "lineStart": 376,
                "lineEnd": 387
            },
            "org.opensearch.ad.util.ParseUtils.getLatestDataTime(SearchResponse searchResponse)": {
                "lineStart": 389,
                "lineEnd": 391
            },
            "org.opensearch.ad.util.ParseUtils.batchFeatureQuery(AnomalyDetector detector, Entity entity, long startTime, long endTime, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 393,
                "lineEnd": 421
            },
            "org.opensearch.ad.util.ParseUtils.isNullOrEmpty(Collection<T> collection)": {
                "lineStart": 423,
                "lineEnd": 425
            },
            "org.opensearch.ad.util.ParseUtils.isNullOrEmpty(Map<S, T> map)": {
                "lineStart": 427,
                "lineEnd": 429
            },
            "org.opensearch.ad.util.ParseUtils.listEqualsWithoutConsideringOrder(List<String> list1, List<String> list2)": {
                "lineStart": 431,
                "lineEnd": 443
            },
            "org.opensearch.ad.util.ParseUtils.parseDoubleArray(XContentParser parser)": {
                "lineStart": 445,
                "lineEnd": 453
            },
            "org.opensearch.ad.util.ParseUtils.parseAggregationRequest(XContentParser parser)": {
                "lineStart": 455,
                "lineEnd": 475
            },
            "org.opensearch.ad.util.ParseUtils.getFeatureFieldNames(AnomalyDetector detector, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 477,
                "lineEnd": 484
            },
            "org.opensearch.ad.util.ParseUtils.getFieldNamesForFeature(Feature feature, NamedXContentRegistry xContentRegistry)": {
                "lineStart": 486,
                "lineEnd": 491
            }
        },
        "bd2e3d66-Throttler.java": {
            "org.opensearch.ad.util.Throttler.<init>(Clock clock)": {
                "lineStart": 12,
                "lineEnd": 15
            },
            "org.opensearch.ad.util.Throttler.getFilteredQuery(String detectorId)": {
                "lineStart": 17,
                "lineEnd": 19
            },
            "org.opensearch.ad.util.Throttler.insertFilteredQuery(String detectorId, ActionRequest request)": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "org.opensearch.ad.util.Throttler.clearFilteredQuery(String detectorId)": {
                "lineStart": 25,
                "lineEnd": 27
            }
        }
    },
    "CVE-2021-33800": {
        "b30b451f7-OrderByResolve.java": {
            "com.alibaba.druid.sql.dialect.mysql.visitor.transform.OrderByResolve.visit(SQLSelect x)": {
                "lineStart": 16,
                "lineEnd": 64
            }
        }
    },
    "CVE-2022-27198": {
        "9603223-AWSCredentialsImpl.java": {
            "com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl$DescriptorImpl.doCheckSecretKey(@QueryParameter(\"accessKey\") final String accessKey, @QueryParameter(\"iamRoleArn\") final String iamRoleArn, @QueryParameter(\"iamExternalId\") final String iamExternalId, @QueryParameter(\"iamMfaSerialNumber\") final String iamMfaSerialNumber, @QueryParameter(\"iamMfaToken\") final String iamMfaToken, @QueryParameter(\"stsTokenDuration\") final Integer stsTokenDuration, @QueryParameter final String secretKey)": {
                "lineStart": 198,
                "lineEnd": 256
            }
        }
    },
    "CVE-2022-39337": {
        "22aa871-BasicSubjectServletCreator.java": {
            "com.usthe.sureness.subject.creater.BasicSubjectServletCreator.createSubject(Object context)": {
                "lineStart": 25,
                "lineEnd": 64
            }
        },
        "3e55aef-DigestSubjectServletCreator.java": {
            "com.usthe.sureness.subject.creater.DigestSubjectServletCreator.createSubject(Object context)": {
                "lineStart": 35,
                "lineEnd": 84
            }
        },
        "6b6a477-JwtSubjectServletCreator.java": {
            "com.usthe.sureness.subject.creater.JwtSubjectServletCreator.createSubject(Object context)": {
                "lineStart": 25,
                "lineEnd": 45
            }
        },
        "d7d1007-JwtSubjectWsServletCreator.java": {
            "com.usthe.sureness.subject.creater.JwtSubjectWsServletCreator.createSubject(Object context)": {
                "lineStart": 18,
                "lineEnd": 30
            }
        },
        "469199c-NoneSubjectServletCreator.java": {
            "com.usthe.sureness.subject.creater.NoneSubjectServletCreator.createSubject(Object context)": {
                "lineStart": 11,
                "lineEnd": 17
            }
        },
        "97ebbec-JsonWebTokenUtil.java": {
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, List<String> roles, List<String> permissions, Boolean isRefresh)": {
                "lineStart": 21,
                "lineEnd": 27
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, List<String> roles)": {
                "lineStart": 29,
                "lineEnd": 32
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, String audience, String payload, Long notBefore, List<String> roles, Map<String, Object> headerMap, Map<String, Object> customClaimMap)": {
                "lineStart": 34,
                "lineEnd": 43
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, List<String> roles, Map<String, Object> customClaimMap)": {
                "lineStart": 45,
                "lineEnd": 55
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period, List<String> roles, Map<String, Object> customClaimMap)": {
                "lineStart": 57,
                "lineEnd": 61
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period, List<String> roles)": {
                "lineStart": 63,
                "lineEnd": 67
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period)": {
                "lineStart": 69,
                "lineEnd": 73
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period, Map<String, Object> customClaimMap)": {
                "lineStart": 75,
                "lineEnd": 79
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwtAll(String id, String subject, String issuer, Long period, String audience, String payload, Long notBefore, Map<String, Object> headerMap, Map<String, Object> customClaimMap)": {
                "lineStart": 81,
                "lineEnd": 128
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.isNotJsonWebToken(String jwt)": {
                "lineStart": 130,
                "lineEnd": 148
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.parseJwt(String jwt)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.setDefaultSecretKey(String secretNowKeyValue)": {
                "lineStart": 154,
                "lineEnd": 158
            }
        },
        "0000000-ServletUtil.java": {
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, List<String> roles, List<String> permissions, Boolean isRefresh)": {
                "lineStart": 21,
                "lineEnd": 27
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, List<String> roles)": {
                "lineStart": 29,
                "lineEnd": 32
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, String audience, String payload, Long notBefore, List<String> roles, Map<String, Object> headerMap, Map<String, Object> customClaimMap)": {
                "lineStart": 34,
                "lineEnd": 43
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String id, String subject, String issuer, Long period, List<String> roles, Map<String, Object> customClaimMap)": {
                "lineStart": 45,
                "lineEnd": 55
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period, List<String> roles, Map<String, Object> customClaimMap)": {
                "lineStart": 57,
                "lineEnd": 61
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period, List<String> roles)": {
                "lineStart": 63,
                "lineEnd": 67
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period)": {
                "lineStart": 69,
                "lineEnd": 73
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwt(String subject, Long period, Map<String, Object> customClaimMap)": {
                "lineStart": 75,
                "lineEnd": 79
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwtAll(String id, String subject, String issuer, Long period, String audience, String payload, Long notBefore, Map<String, Object> headerMap, Map<String, Object> customClaimMap)": {
                "lineStart": 81,
                "lineEnd": 128
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.isNotJsonWebToken(String jwt)": {
                "lineStart": 130,
                "lineEnd": 148
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.parseJwt(String jwt)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.setDefaultSecretKey(String secretNowKeyValue)": {
                "lineStart": 154,
                "lineEnd": 158
            }
        }
    },
    "CVE-2022-4244": {
        "0f1449c1-Expand.java": {
            "org.codehaus.plexus.util.Expand.extractFile(File srcF, File dir, InputStream compressedInputStream, String entryName, Date entryDate, boolean isDirectory)": {
                "lineStart": 41,
                "lineEnd": 77
            }
        }
    },
    "CVE-2021-22112": {
        "be42b9a89c-HttpSessionSecurityContextRepository.java": {
            "org.springframework.security.web.context.HttpSessionSecurityContextRepository.saveContext(SecurityContext context, HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 49,
                "lineEnd": 56
            },
            "org.springframework.security.web.context.HttpSessionSecurityContextRepository$SaveToSessionResponseWrapper.contextChanged(SecurityContext context)": {
                "lineStart": 194,
                "lineEnd": 196
            },
            "org.springframework.security.web.context.HttpSessionSecurityContextRepository$SaveToSessionResponseWrapper.saveContext(SecurityContext context)": {
                "lineStart": 157,
                "lineEnd": 192
            }
        }
    },
    "CVE-2022-37435": {
        "d0b93044e-DashboardUserController.java": {
            "org.apache.shenyu.admin.controller.DashboardUserController.modifyPassword(@PathVariable(\"id\") @Existed(provider = DashboardUserMapper.class, message = \"user is not found\") final String id, @Valid @RequestBody final DashboardUserDTO dashboardUserDTO)": {
                "lineStart": 78,
                "lineEnd": 80
            }
        }
    },
    "CVE-2023-34062": {
        "710cf3d86-ByteBufFlux.java": {
            "reactor.netty.ByteBufFlux.fromInbound(Publisher<?> source)": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "reactor.netty.ByteBufFlux.fromInbound(Publisher<?> source, ByteBufAllocator allocator)": {
                "lineStart": 29,
                "lineEnd": 32
            },
            "reactor.netty.ByteBufFlux.fromString(Publisher<? extends String> source)": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "reactor.netty.ByteBufFlux.fromString(Publisher<? extends String> source, Charset charset, ByteBufAllocator allocator)": {
                "lineStart": 38,
                "lineEnd": 46
            },
            "reactor.netty.ByteBufFlux.fromPath(Path path)": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "reactor.netty.ByteBufFlux.fromPath(Path path, int maxChunkSize)": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "reactor.netty.ByteBufFlux.fromPath(Path path, ByteBufAllocator allocator)": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "reactor.netty.ByteBufFlux.fromPath(Path path, int maxChunkSize, ByteBufAllocator allocator)": {
                "lineStart": 60,
                "lineEnd": 88
            },
            "reactor.netty.ByteBufFlux.asByteBuffer()": {
                "lineStart": 90,
                "lineEnd": 103
            },
            "reactor.netty.ByteBufFlux.asByteArray()": {
                "lineStart": 105,
                "lineEnd": 120
            },
            "reactor.netty.ByteBufFlux.asInputStream()": {
                "lineStart": 122,
                "lineEnd": 135
            },
            "reactor.netty.ByteBufFlux.asString()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "reactor.netty.ByteBufFlux.asString(Charset charset)": {
                "lineStart": 141,
                "lineEnd": 155
            },
            "reactor.netty.ByteBufFlux.aggregate()": {
                "lineStart": 157,
                "lineEnd": 187
            },
            "reactor.netty.ByteBufFlux.multicast()": {
                "lineStart": 189,
                "lineEnd": 191
            },
            "reactor.netty.ByteBufFlux.retain()": {
                "lineStart": 193,
                "lineEnd": 195
            },
            "reactor.netty.ByteBufFlux.<init>(Flux<ByteBuf> source, ByteBufAllocator allocator)": {
                "lineStart": 198,
                "lineEnd": 201
            },
            "reactor.netty.ByteBufFlux$ByteBufFluxFuseable.<init>(Flux<ByteBuf> source, ByteBufAllocator allocator)": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "reactor.netty.ByteBufFlux.subscribe(CoreSubscriber<? super ByteBuf> s)": {
                "lineStart": 210,
                "lineEnd": 212
            },
            "reactor.netty.ByteBufFlux.maybeFuse(Flux<ByteBuf> source, ByteBufAllocator allocator)": {
                "lineStart": 214,
                "lineEnd": 220
            },
            "reactor.netty.ByteBufFlux.safeRelease(ByteBuf byteBuf)": {
                "lineStart": 239,
                "lineEnd": 254
            }
        },
        "6ed480d0f-FutureMono.java": {
            "reactor.netty.FutureMono.from(F future)": {
                "lineStart": 15,
                "lineEnd": 26
            },
            "reactor.netty.FutureMono.deferFuture(Supplier<F> deferredFuture)": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "reactor.netty.FutureMono$ImmediateFutureMono.<init>(F future)": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "reactor.netty.FutureMono$ImmediateFutureMono.subscribe(final CoreSubscriber<? super Void> s)": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "reactor.netty.FutureMono$DeferredFutureMono.<init>(Supplier<F> deferredFuture)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "reactor.netty.FutureMono$DeferredFutureMono.subscribe(CoreSubscriber<? super Void> s)": {
                "lineStart": 50,
                "lineEnd": 67
            },
            "reactor.netty.FutureMono.doSubscribe(CoreSubscriber<? super Void> s, F future)": {
                "lineStart": 71,
                "lineEnd": 96
            },
            "reactor.netty.FutureMono$FutureSubscription.<init>(F future, CoreSubscriber<? super Void> s)": {
                "lineStart": 102,
                "lineEnd": 105
            },
            "reactor.netty.FutureMono$FutureSubscription.request(long n)": {
                "lineStart": 107,
                "lineEnd": 108
            },
            "reactor.netty.FutureMono$FutureSubscription.get()": {
                "lineStart": 110,
                "lineEnd": 112
            },
            "reactor.netty.FutureMono$FutureSubscription.cancel()": {
                "lineStart": 114,
                "lineEnd": 117
            },
            "reactor.netty.FutureMono$FutureSubscription.operationComplete(F future)": {
                "lineStart": 119,
                "lineEnd": 128
            },
            "reactor.netty.FutureMono$FutureSubscription.wrapError(Throwable error)": {
                "lineStart": 130,
                "lineEnd": 139
            }
        },
        "dec6b58eb-ReactorNetty.java": {
            "reactor.netty.ReactorNetty.safeRelease(Object msg)": {
                "lineStart": 70,
                "lineEnd": 79
            },
            "reactor.netty.ReactorNetty.format(Channel channel, String msg)": {
                "lineStart": 81,
                "lineEnd": 122
            },
            "reactor.netty.ReactorNetty.toPrettyHexDump(Object msg)": {
                "lineStart": 124,
                "lineEnd": 141
            },
            "reactor.netty.ReactorNetty.getChannelContext(Channel channel)": {
                "lineStart": 143,
                "lineEnd": 145
            },
            "reactor.netty.ReactorNetty.setChannelContext(Channel channel, @Nullable ContextView contextView)": {
                "lineStart": 147,
                "lineEnd": 149
            },
            "reactor.netty.ReactorNetty.wrapException(Throwable throwable)": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "reactor.netty.ReactorNetty.addChunkedWriter(Connection c)": {
                "lineStart": 155,
                "lineEnd": 160
            },
            "reactor.netty.ReactorNetty.addHandlerBeforeReactorEndHandlers(Connection context, String name, ChannelHandler handler)": {
                "lineStart": 162,
                "lineEnd": 197
            },
            "reactor.netty.ReactorNetty.addHandlerAfterReactorCodecs(Connection context, String name, ChannelHandler handler)": {
                "lineStart": 199,
                "lineEnd": 233
            },
            "reactor.netty.ReactorNetty.mustChunkFileTransfer(Connection c, Path file)": {
                "lineStart": 235,
                "lineEnd": 242
            },
            "reactor.netty.ReactorNetty.registerForClose(boolean shouldCleanupOnClose, String name, Connection context)": {
                "lineStart": 244,
                "lineEnd": 250
            },
            "reactor.netty.ReactorNetty.removeHandler(Channel channel, String name)": {
                "lineStart": 252,
                "lineEnd": 265
            },
            "reactor.netty.ReactorNetty.replaceHandler(Channel channel, String name, ChannelHandler handler)": {
                "lineStart": 267,
                "lineEnd": 280
            },
            "reactor.netty.ReactorNetty.compositeConnectionObserver(ConnectionObserver observer, ConnectionObserver other)": {
                "lineStart": 282,
                "lineEnd": 334
            },
            "reactor.netty.ReactorNetty.publisherOrScalarMap(Publisher<T> publisher, Function<? super T, ? extends V> mapper)": {
                "lineStart": 336,
                "lineEnd": 346
            },
            "reactor.netty.ReactorNetty.publisherOrScalarMap(Publisher<T> publisher, Function<? super T, ? extends V> monoMapper, Function<? super List<T>, ? extends V> fluxMapper)": {
                "lineStart": 348,
                "lineEnd": 358
            },
            "reactor.netty.ReactorNetty.<init>()": {
                "lineStart": 360,
                "lineEnd": 361
            },
            "reactor.netty.ReactorNetty$ScalarMap.<init>(Publisher<T> source, Function<? super T, ? extends V> mapper)": {
                "lineStart": 366,
                "lineEnd": 370
            },
            "reactor.netty.ReactorNetty$ScalarMap.call()": {
                "lineStart": 372,
                "lineEnd": 379
            },
            "reactor.netty.ReactorNetty$CompositeChannelPipelineConfigurer.<init>(ChannelPipelineConfigurer[] configurers)": {
                "lineStart": 385,
                "lineEnd": 387
            },
            "reactor.netty.ReactorNetty$CompositeChannelPipelineConfigurer.onChannelInit(ConnectionObserver connectionObserver, Channel channel, @Nullable SocketAddress remoteAddress)": {
                "lineStart": 389,
                "lineEnd": 394
            },
            "reactor.netty.ReactorNetty$CompositeChannelPipelineConfigurer.compositeChannelPipelineConfigurer(ChannelPipelineConfigurer configurer, ChannelPipelineConfigurer other)": {
                "lineStart": 396,
                "lineEnd": 448
            },
            "reactor.netty.ReactorNetty$CompositeConnectionObserver.<init>(ConnectionObserver[] observers)": {
                "lineStart": 454,
                "lineEnd": 456
            },
            "reactor.netty.ReactorNetty$CompositeConnectionObserver.currentContext()": {
                "lineStart": 458,
                "lineEnd": 460
            },
            "reactor.netty.ReactorNetty$CompositeConnectionObserver.onUncaughtException(Connection connection, Throwable error)": {
                "lineStart": 462,
                "lineEnd": 467
            },
            "reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(Connection connection, State newState)": {
                "lineStart": 469,
                "lineEnd": 474
            },
            "reactor.netty.ReactorNetty$OutboundThen.<init>(NettyOutbound source, Publisher<Void> thenPublisher)": {
                "lineStart": 482,
                "lineEnd": 484
            },
            "reactor.netty.ReactorNetty$OutboundThen.<init>(NettyOutbound source, Publisher<Void> thenPublisher, Runnable onCleanup)": {
                "lineStart": 486,
                "lineEnd": 512
            },
            "reactor.netty.ReactorNetty$OutboundThen.sendUsing(Callable<? extends S> sourceInput, BiFunction<? super Connection, ? super S, ?> mappedInput, Consumer<? super S> sourceCleanup)": {
                "lineStart": 514,
                "lineEnd": 516
            },
            "reactor.netty.ReactorNetty$OutboundThen.alloc()": {
                "lineStart": 518,
                "lineEnd": 520
            },
            "reactor.netty.ReactorNetty$OutboundThen.withConnection(Consumer<? super Connection> withConnection)": {
                "lineStart": 522,
                "lineEnd": 524
            },
            "reactor.netty.ReactorNetty$OutboundThen.send(Publisher<? extends ByteBuf> dataStream, Predicate<ByteBuf> predicate)": {
                "lineStart": 526,
                "lineEnd": 528
            },
            "reactor.netty.ReactorNetty$OutboundThen.sendObject(Publisher<?> dataStream, Predicate<Object> predicate)": {
                "lineStart": 530,
                "lineEnd": 532
            },
            "reactor.netty.ReactorNetty$OutboundThen.sendObject(Object message)": {
                "lineStart": 534,
                "lineEnd": 536
            },
            "reactor.netty.ReactorNetty$OutboundThen.then()": {
                "lineStart": 538,
                "lineEnd": 540
            },
            "reactor.netty.ReactorNetty$OutboundIdleStateHandler.<init>(long idleTimeout, Runnable onWriteIdle)": {
                "lineStart": 546,
                "lineEnd": 549
            },
            "reactor.netty.ReactorNetty$OutboundIdleStateHandler.channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt)": {
                "lineStart": 551,
                "lineEnd": 557
            },
            "reactor.netty.ReactorNetty$InboundIdleStateHandler.<init>(long idleTimeout, Runnable onReadIdle)": {
                "lineStart": 563,
                "lineEnd": 566
            },
            "reactor.netty.ReactorNetty$InboundIdleStateHandler.channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt)": {
                "lineStart": 568,
                "lineEnd": 574
            },
            "reactor.netty.ReactorNetty$ExtractorHandler.<init>(BiConsumer<? super ChannelHandlerContext, Object> extractor)": {
                "lineStart": 611,
                "lineEnd": 613
            },
            "reactor.netty.ReactorNetty$ExtractorHandler.channelRead(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 615,
                "lineEnd": 617
            },
            "reactor.netty.ReactorNetty$ChannelDisposer.<init>(DisposableChannel channelDisposable)": {
                "lineStart": 623,
                "lineEnd": 625
            },
            "reactor.netty.ReactorNetty$ChannelDisposer.hookOnSubscribe(Subscription subscription)": {
                "lineStart": 627,
                "lineEnd": 630
            },
            "reactor.netty.ReactorNetty$ChannelDisposer.hookFinally(SignalType type)": {
                "lineStart": 632,
                "lineEnd": 637
            },
            "reactor.netty.ReactorNetty$SimpleConnection.<init>(Channel channel)": {
                "lineStart": 643,
                "lineEnd": 645
            },
            "reactor.netty.ReactorNetty$SimpleConnection.channel()": {
                "lineStart": 647,
                "lineEnd": 649
            },
            "reactor.netty.ReactorNetty$SimpleConnection.toString()": {
                "lineStart": 651,
                "lineEnd": 653
            },
            "reactor.netty.ReactorNetty.unavailableInbound(Connection c)": {
                "lineStart": 657,
                "lineEnd": 673
            },
            "reactor.netty.ReactorNetty.unavailableOutbound(Connection c)": {
                "lineStart": 675,
                "lineEnd": 707
            },
            "reactor.netty.ReactorNetty$InternalNettyException.<init>(Throwable cause)": {
                "lineStart": 710,
                "lineEnd": 712
            },
            "reactor.netty.ReactorNetty$InternalNettyException.fillInStackTrace()": {
                "lineStart": 714,
                "lineEnd": 716
            }
        },
        "cb27066fa-NewConnectionProvider.java": {
            "reactor.netty.resources.NewConnectionProvider.acquire(TransportConfig config, ConnectionObserver observer, @Nullable Supplier<? extends SocketAddress> remoteAddress, @Nullable AddressResolverGroup<?> resolverGroup)": {
                "lineStart": 32,
                "lineEnd": 64
            },
            "reactor.netty.resources.NewConnectionProvider.isDisposed()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "reactor.netty.resources.NewConnectionProvider.maxConnections()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.<init>(MonoSink<Connection> sink, @Nullable Supplier<? extends SocketAddress> bindAddress)": {
                "lineStart": 79,
                "lineEnd": 83
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.currentContext()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.dispose()": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.onComplete()": {
                "lineStart": 93,
                "lineEnd": 94
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.onError(Throwable t)": {
                "lineStart": 96,
                "lineEnd": 105
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.onNext(Channel channel)": {
                "lineStart": 107,
                "lineEnd": 112
            },
            "reactor.netty.resources.NewConnectionProvider$DisposableConnect.onSubscribe(Subscription s)": {
                "lineStart": 114,
                "lineEnd": 121
            },
            "reactor.netty.resources.NewConnectionProvider$NewConnectionObserver.<init>(MonoSink<Connection> sink, ConnectionObserver obs)": {
                "lineStart": 129,
                "lineEnd": 133
            },
            "reactor.netty.resources.NewConnectionProvider$NewConnectionObserver.currentContext()": {
                "lineStart": 135,
                "lineEnd": 137
            },
            "reactor.netty.resources.NewConnectionProvider$NewConnectionObserver.onStateChange(Connection connection, State newState)": {
                "lineStart": 139,
                "lineEnd": 153
            },
            "reactor.netty.resources.NewConnectionProvider$NewConnectionObserver.onUncaughtException(Connection c, Throwable error)": {
                "lineStart": 155,
                "lineEnd": 158
            }
        },
        "edd19aba1-PooledConnectionProvider.java": {
            "reactor.netty.resources.PooledConnectionProvider.<init>(Builder builder)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "reactor.netty.resources.PooledConnectionProvider.<init>(Builder builder, @Nullable Clock clock)": {
                "lineStart": 65,
                "lineEnd": 79
            },
            "reactor.netty.resources.PooledConnectionProvider.acquire(TransportConfig config, ConnectionObserver connectionObserver, @Nullable Supplier<? extends SocketAddress> remote, @Nullable AddressResolverGroup<?> resolverGroup)": {
                "lineStart": 81,
                "lineEnd": 138
            },
            "reactor.netty.resources.PooledConnectionProvider.disposeLater()": {
                "lineStart": 140,
                "lineEnd": 191
            },
            "reactor.netty.resources.PooledConnectionProvider.disposeWhen(SocketAddress address)": {
                "lineStart": 193,
                "lineEnd": 219
            },
            "reactor.netty.resources.PooledConnectionProvider.isDisposed()": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "reactor.netty.resources.PooledConnectionProvider.maxConnections()": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "reactor.netty.resources.PooledConnectionProvider.maxConnectionsPerHost()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "reactor.netty.resources.PooledConnectionProvider.mutate()": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "reactor.netty.resources.PooledConnectionProvider.name()": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "reactor.netty.resources.PooledConnectionProvider.onDispose(Mono<Void> disposeMono)": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "reactor.netty.resources.PooledConnectionProvider.createDisposableAcquire(TransportConfig config, ConnectionObserver connectionObserver, long pendingAcquireTimeout, InstrumentedPool<T> pool, MonoSink<Connection> sink)": {
                "lineStart": 245,
                "lineEnd": 245
            },
            "reactor.netty.resources.PooledConnectionProvider.createPool(TransportConfig config, PoolFactory<T> poolFactory, SocketAddress remoteAddress, AddressResolverGroup<?> resolverGroup)": {
                "lineStart": 246,
                "lineEnd": 246
            },
            "reactor.netty.resources.PooledConnectionProvider.poolFactory(SocketAddress remoteAddress)": {
                "lineStart": 247,
                "lineEnd": 249
            },
            "reactor.netty.resources.PooledConnectionProvider.registerDefaultMetrics(String id, SocketAddress remoteAddress, InstrumentedPool.PoolMetrics metrics)": {
                "lineStart": 251,
                "lineEnd": 253
            },
            "reactor.netty.resources.PooledConnectionProvider.deRegisterDefaultMetrics(String id, SocketAddress remoteAddress)": {
                "lineStart": 255,
                "lineEnd": 257
            },
            "reactor.netty.resources.PooledConnectionProvider.compareAddresses(SocketAddress origin, SocketAddress target)": {
                "lineStart": 259,
                "lineEnd": 275
            },
            "reactor.netty.resources.PooledConnectionProvider.logPoolState(Channel channel, InstrumentedPool<? extends Connection> pool, String msg)": {
                "lineStart": 277,
                "lineEnd": 279
            },
            "reactor.netty.resources.PooledConnectionProvider.logPoolState(Channel channel, InstrumentedPool<? extends Connection> pool, String msg, @Nullable Throwable t)": {
                "lineStart": 281,
                "lineEnd": 284
            },
            "reactor.netty.resources.PooledConnectionProvider.scheduleInactivePoolsDisposal()": {
                "lineStart": 286,
                "lineEnd": 291
            },
            "reactor.netty.resources.PooledConnectionProvider.disposeInactivePoolsInBackground()": {
                "lineStart": 293,
                "lineEnd": 324
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.<init>(ConnectionPoolSpec<?> conf, Duration disposeTimeout)": {
                "lineStart": 376,
                "lineEnd": 378
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.<init>(ConnectionPoolSpec<?> conf, Duration disposeTimeout, @Nullable Clock clock)": {
                "lineStart": 380,
                "lineEnd": 395
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.newPool(Publisher<T> allocator, @Nullable reactor.pool.AllocationStrategy allocationStrategy, Function<T, Publisher<Void>> destroyHandler, BiPredicate<T, PooledRefMetadata> evictionPredicate)": {
                "lineStart": 397,
                "lineEnd": 403
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.newPool(Publisher<T> allocator, @Nullable reactor.pool.AllocationStrategy allocationStrategy, Function<T, Publisher<Void>> destroyHandler, BiPredicate<T, PooledRefMetadata> defaultEvictionPredicate, Function<PoolConfig<T>, InstrumentedPool<T>> poolFactory)": {
                "lineStart": 405,
                "lineEnd": 411
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.newPoolInternal(Publisher<T> allocator, Function<T, Publisher<Void>> destroyHandler, BiPredicate<T, PooledRefMetadata> defaultEvictionPredicate)": {
                "lineStart": 413,
                "lineEnd": 455
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.allocationStrategy()": {
                "lineStart": 457,
                "lineEnd": 459
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.maxIdleTime()": {
                "lineStart": 461,
                "lineEnd": 463
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.maxLifeTime()": {
                "lineStart": 465,
                "lineEnd": 467
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory.toString()": {
                "lineStart": 469,
                "lineEnd": 471
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.<init>(AllocationStrategy<?> delegate)": {
                "lineStart": 475,
                "lineEnd": 477
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.estimatePermitCount()": {
                "lineStart": 479,
                "lineEnd": 481
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.getPermits(int desired)": {
                "lineStart": 483,
                "lineEnd": 485
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.permitGranted()": {
                "lineStart": 487,
                "lineEnd": 489
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.permitMinimum()": {
                "lineStart": 491,
                "lineEnd": 493
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.permitMaximum()": {
                "lineStart": 495,
                "lineEnd": 497
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolFactory$DelegatingAllocationStrategy.returnPermits(int returned)": {
                "lineStart": 499,
                "lineEnd": 501
            },
            "reactor.netty.resources.PooledConnectionProvider$PooledConnectionMetadata.<init>(PooledRefMetadata delegate)": {
                "lineStart": 509,
                "lineEnd": 511
            },
            "reactor.netty.resources.PooledConnectionProvider$PooledConnectionMetadata.acquireCount()": {
                "lineStart": 513,
                "lineEnd": 515
            },
            "reactor.netty.resources.PooledConnectionProvider$PooledConnectionMetadata.idleTime()": {
                "lineStart": 517,
                "lineEnd": 519
            },
            "reactor.netty.resources.PooledConnectionProvider$PooledConnectionMetadata.lifeTime()": {
                "lineStart": 521,
                "lineEnd": 523
            },
            "reactor.netty.resources.PooledConnectionProvider$PooledConnectionMetadata.releaseTimestamp()": {
                "lineStart": 525,
                "lineEnd": 527
            },
            "reactor.netty.resources.PooledConnectionProvider$PooledConnectionMetadata.allocationTimestamp()": {
                "lineStart": 529,
                "lineEnd": 531
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolKey.<init>(SocketAddress holder, int pipelineKey)": {
                "lineStart": 539,
                "lineEnd": 552
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolKey.equals(Object o)": {
                "lineStart": 554,
                "lineEnd": 565
            },
            "reactor.netty.resources.PooledConnectionProvider$PoolKey.hashCode()": {
                "lineStart": 567,
                "lineEnd": 573
            }
        },
        "3b5ce56b3-MicrometerEventLoopMeterRegistrar.java": {
            "reactor.netty.transport.MicrometerEventLoopMeterRegistrar.<init>()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "reactor.netty.transport.MicrometerEventLoopMeterRegistrar.registerMetrics(EventLoop eventLoop)": {
                "lineStart": 17,
                "lineEnd": 29
            }
        },
        "0532d129b-Cookies.java": {
            "reactor.netty.http.Cookies.newClientResponseHolder(HttpHeaders headers, ClientCookieDecoder decoder)": {
                "lineStart": 17,
                "lineEnd": 19
            },
            "reactor.netty.http.Cookies.newServerRequestHolder(HttpHeaders headers, ServerCookieDecoder decoder)": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "reactor.netty.http.Cookies.<init>(HttpHeaders nettyHeaders, CharSequence cookiesHeaderName, boolean isClientChannel, CookieDecoder decoder)": {
                "lineStart": 35,
                "lineEnd": 41
            },
            "reactor.netty.http.Cookies.getCachedCookies()": {
                "lineStart": 43,
                "lineEnd": 82
            },
            "reactor.netty.http.Cookies.allCookieHeaders()": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "reactor.netty.http.Cookies.hasReadCookies()": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "reactor.netty.http.Cookies.markReadCookies()": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "reactor.netty.http.Cookies.markReadingCookies()": {
                "lineStart": 96,
                "lineEnd": 98
            }
        },
        "4f881c840-HttpOperations.java": {
            "reactor.netty.http.HttpOperations.<init>(HttpOperations<INBOUND, OUTBOUND> replaced)": {
                "lineStart": 51,
                "lineEnd": 55
            },
            "reactor.netty.http.HttpOperations.<init>(Connection connection, ConnectionObserver listener, HttpMessageLogFactory httpMessageLogFactory)": {
                "lineStart": 57,
                "lineEnd": 60
            },
            "reactor.netty.http.HttpOperations.hasSentHeaders()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "reactor.netty.http.HttpOperations.isWebsocket()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "reactor.netty.http.HttpOperations.requestId()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "reactor.netty.http.HttpOperations.send(Publisher<? extends ByteBuf> source)": {
                "lineStart": 74,
                "lineEnd": 101
            },
            "reactor.netty.http.HttpOperations.sendObject(Object message)": {
                "lineStart": 103,
                "lineEnd": 131
            },
            "reactor.netty.http.HttpOperations.then()": {
                "lineStart": 133,
                "lineEnd": 186
            },
            "reactor.netty.http.HttpOperations.asDebugLogMessage(Object o)": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "reactor.netty.http.HttpOperations.httpMessageLogFactory()": {
                "lineStart": 192,
                "lineEnd": 194
            },
            "reactor.netty.http.HttpOperations.beforeMarkSentHeaders()": {
                "lineStart": 196,
                "lineEnd": 196
            },
            "reactor.netty.http.HttpOperations.afterMarkSentHeaders()": {
                "lineStart": 197,
                "lineEnd": 197
            },
            "reactor.netty.http.HttpOperations.isContentAlwaysEmpty()": {
                "lineStart": 198,
                "lineEnd": 198
            },
            "reactor.netty.http.HttpOperations.onHeadersSent()": {
                "lineStart": 199,
                "lineEnd": 199
            },
            "reactor.netty.http.HttpOperations.newFullBodyMessage(ByteBuf body)": {
                "lineStart": 200,
                "lineEnd": 200
            },
            "reactor.netty.http.HttpOperations.sendFile(Path file, long position, long count)": {
                "lineStart": 201,
                "lineEnd": 217
            },
            "reactor.netty.http.HttpOperations.toString()": {
                "lineStart": 219,
                "lineEnd": 225
            },
            "reactor.netty.http.HttpOperations.addHandler(String name, ChannelHandler handler)": {
                "lineStart": 227,
                "lineEnd": 235
            },
            "reactor.netty.http.HttpOperations.autoAddHttpExtractor(Connection c, String name, ChannelHandler handler)": {
                "lineStart": 237,
                "lineEnd": 251
            },
            "reactor.netty.http.HttpOperations.markSentHeaders(Object... objectsToRelease)": {
                "lineStart": 253,
                "lineEnd": 276
            },
            "reactor.netty.http.HttpOperations.markSentBody()": {
                "lineStart": 278,
                "lineEnd": 280
            },
            "reactor.netty.http.HttpOperations.hasSentBody()": {
                "lineStart": 282,
                "lineEnd": 284
            },
            "reactor.netty.http.HttpOperations.markSentHeaderAndBody(Object... objectsToRelease)": {
                "lineStart": 286,
                "lineEnd": 309
            },
            "reactor.netty.http.HttpOperations.initShortId()": {
                "lineStart": 311,
                "lineEnd": 317
            },
            "reactor.netty.http.HttpOperations.resolvePath(String uri)": {
                "lineStart": 319,
                "lineEnd": 349
            },
            "reactor.netty.http.HttpOperations.outboundHttpMessage()": {
                "lineStart": 351,
                "lineEnd": 351
            },
            "reactor.netty.http.HttpOperations.prepareHttpMessage(ByteBuf buffer)": {
                "lineStart": 352,
                "lineEnd": 368
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.<init>(Mono<Void> source, HttpOperations<?, ?> parent, @Nullable ByteBuf msg)": {
                "lineStart": 401,
                "lineEnd": 412
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.run()": {
                "lineStart": 414,
                "lineEnd": 419
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.accept(Throwable throwable)": {
                "lineStart": 421,
                "lineEnd": 426
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.then()": {
                "lineStart": 428,
                "lineEnd": 430
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.alloc()": {
                "lineStart": 432,
                "lineEnd": 434
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.send(Publisher<? extends ByteBuf> dataStream, Predicate<ByteBuf> predicate)": {
                "lineStart": 436,
                "lineEnd": 438
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.sendObject(Publisher<?> dataStream, Predicate<Object> predicate)": {
                "lineStart": 440,
                "lineEnd": 442
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.sendObject(Object message)": {
                "lineStart": 444,
                "lineEnd": 446
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.sendUsing(Callable<? extends S> sourceInput, BiFunction<? super Connection, ? super S, ?> mappedInput, Consumer<? super S> sourceCleanup)": {
                "lineStart": 448,
                "lineEnd": 450
            },
            "reactor.netty.http.HttpOperations$PostHeadersNettyOutbound.withConnection(Consumer<? super Connection> withConnection)": {
                "lineStart": 452,
                "lineEnd": 454
            }
        },
        "03b620850-FailedHttpClientRequest.java": {
            "reactor.netty.http.client.FailedHttpClientRequest.<init>(ContextView contextView, HttpClientConfig c)": {
                "lineStart": 25,
                "lineEnd": 34
            },
            "reactor.netty.http.client.FailedHttpClientRequest.addCookie(Cookie cookie)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "reactor.netty.http.client.FailedHttpClientRequest.addHeader(CharSequence name, CharSequence value)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "reactor.netty.http.client.FailedHttpClientRequest.cookies()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "reactor.netty.http.client.FailedHttpClientRequest.currentContext()": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "reactor.netty.http.client.FailedHttpClientRequest.currentContextView()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "reactor.netty.http.client.FailedHttpClientRequest.fullPath()": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "reactor.netty.http.client.FailedHttpClientRequest.requestId()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "reactor.netty.http.client.FailedHttpClientRequest.header(CharSequence name, CharSequence value)": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "reactor.netty.http.client.FailedHttpClientRequest.headers(HttpHeaders headers)": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "reactor.netty.http.client.FailedHttpClientRequest.isFollowRedirect()": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "reactor.netty.http.client.FailedHttpClientRequest.isKeepAlive()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "reactor.netty.http.client.FailedHttpClientRequest.isWebsocket()": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "reactor.netty.http.client.FailedHttpClientRequest.method()": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "reactor.netty.http.client.FailedHttpClientRequest.redirectedFrom()": {
                "lineStart": 88,
                "lineEnd": 89
            },
            "reactor.netty.http.client.FailedHttpClientRequest.requestHeaders()": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "reactor.netty.http.client.FailedHttpClientRequest.responseTimeout(Duration maxReadOperationInterval)": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "reactor.netty.http.client.FailedHttpClientRequest.resourceUrl()": {
                "lineStart": 99,
                "lineEnd": 101
            },
            "reactor.netty.http.client.FailedHttpClientRequest.uri()": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "reactor.netty.http.client.FailedHttpClientRequest.version()": {
                "lineStart": 107,
                "lineEnd": 109
            }
        },
        "377d95144-HttpClientOperations.java": {
            "reactor.netty.http.client.HttpClientOperations.<init>(HttpClientOperations replaced)": {
                "lineStart": 98,
                "lineEnd": 119
            },
            "reactor.netty.http.client.HttpClientOperations.<init>(Connection c, ConnectionObserver listener, ClientCookieEncoder encoder, ClientCookieDecoder decoder, HttpMessageLogFactory httpMessageLogFactory)": {
                "lineStart": 121,
                "lineEnd": 129
            },
            "reactor.netty.http.client.HttpClientOperations.addCookie(Cookie cookie)": {
                "lineStart": 131,
                "lineEnd": 141
            },
            "reactor.netty.http.client.HttpClientOperations.addHandlerLast(ChannelHandler handler)": {
                "lineStart": 143,
                "lineEnd": 146
            },
            "reactor.netty.http.client.HttpClientOperations.addHandlerLast(String name, ChannelHandler handler)": {
                "lineStart": 148,
                "lineEnd": 151
            },
            "reactor.netty.http.client.HttpClientOperations.addHandlerFirst(ChannelHandler handler)": {
                "lineStart": 153,
                "lineEnd": 156
            },
            "reactor.netty.http.client.HttpClientOperations.addHandlerFirst(String name, ChannelHandler handler)": {
                "lineStart": 158,
                "lineEnd": 161
            },
            "reactor.netty.http.client.HttpClientOperations.addHandler(ChannelHandler handler)": {
                "lineStart": 163,
                "lineEnd": 166
            },
            "reactor.netty.http.client.HttpClientOperations.addHandler(String name, ChannelHandler handler)": {
                "lineStart": 168,
                "lineEnd": 171
            },
            "reactor.netty.http.client.HttpClientOperations.replaceHandler(String name, ChannelHandler handler)": {
                "lineStart": 173,
                "lineEnd": 176
            },
            "reactor.netty.http.client.HttpClientOperations.removeHandler(String name)": {
                "lineStart": 178,
                "lineEnd": 181
            },
            "reactor.netty.http.client.HttpClientOperations.addHeader(CharSequence name, CharSequence value)": {
                "lineStart": 183,
                "lineEnd": 193
            },
            "reactor.netty.http.client.HttpClientOperations.address()": {
                "lineStart": 195,
                "lineEnd": 197
            },
            "reactor.netty.http.client.HttpClientOperations.chunkedTransfer(boolean chunked)": {
                "lineStart": 199,
                "lineEnd": 205
            },
            "reactor.netty.http.client.HttpClientOperations.withConnection(Consumer<? super Connection> withConnection)": {
                "lineStart": 207,
                "lineEnd": 211
            },
            "reactor.netty.http.client.HttpClientOperations.cookies()": {
                "lineStart": 213,
                "lineEnd": 220
            },
            "reactor.netty.http.client.HttpClientOperations.followRedirectPredicate(BiPredicate<HttpClientRequest, HttpClientResponse> predicate)": {
                "lineStart": 222,
                "lineEnd": 224
            },
            "reactor.netty.http.client.HttpClientOperations.redirectRequestConsumer(@Nullable Consumer<HttpClientRequest> redirectRequestConsumer)": {
                "lineStart": 226,
                "lineEnd": 228
            },
            "reactor.netty.http.client.HttpClientOperations.onInboundCancel()": {
                "lineStart": 230,
                "lineEnd": 240
            },
            "reactor.netty.http.client.HttpClientOperations.onUnprocessedOutboundError(Throwable t)": {
                "lineStart": 242,
                "lineEnd": 244
            },
            "reactor.netty.http.client.HttpClientOperations.onInboundClose()": {
                "lineStart": 246,
                "lineEnd": 272
            },
            "reactor.netty.http.client.HttpClientOperations.afterInboundComplete()": {
                "lineStart": 274,
                "lineEnd": 283
            },
            "reactor.netty.http.client.HttpClientOperations.header(CharSequence name, CharSequence value)": {
                "lineStart": 285,
                "lineEnd": 295
            },
            "reactor.netty.http.client.HttpClientOperations.headers(HttpHeaders headers)": {
                "lineStart": 297,
                "lineEnd": 309
            },
            "reactor.netty.http.client.HttpClientOperations.isFollowRedirect()": {
                "lineStart": 311,
                "lineEnd": 313
            },
            "reactor.netty.http.client.HttpClientOperations.responseTimeout(Duration maxReadOperationInterval)": {
                "lineStart": 315,
                "lineEnd": 325
            },
            "reactor.netty.http.client.HttpClientOperations.isKeepAlive()": {
                "lineStart": 327,
                "lineEnd": 334
            },
            "reactor.netty.http.client.HttpClientOperations.isWebsocket()": {
                "lineStart": 336,
                "lineEnd": 339
            },
            "reactor.netty.http.client.HttpClientOperations.method()": {
                "lineStart": 341,
                "lineEnd": 343
            },
            "reactor.netty.http.client.HttpClientOperations.onDispose(Disposable onDispose)": {
                "lineStart": 345,
                "lineEnd": 348
            },
            "reactor.netty.http.client.HttpClientOperations.currentContextView()": {
                "lineStart": 350,
                "lineEnd": 352
            },
            "reactor.netty.http.client.HttpClientOperations.redirectedFrom()": {
                "lineStart": 354,
                "lineEnd": 361
            },
            "reactor.netty.http.client.HttpClientOperations.requestHeaders()": {
                "lineStart": 363,
                "lineEnd": 365
            },
            "reactor.netty.http.client.HttpClientOperations.responseHeaders()": {
                "lineStart": 367,
                "lineEnd": 374
            },
            "reactor.netty.http.client.HttpClientOperations.send(Publisher<? extends ByteBuf> source)": {
                "lineStart": 376,
                "lineEnd": 429
            },
            "reactor.netty.http.client.HttpClientOperations.websocketUri()": {
                "lineStart": 431,
                "lineEnd": 451
            },
            "reactor.netty.http.client.HttpClientOperations.status()": {
                "lineStart": 453,
                "lineEnd": 460
            },
            "reactor.netty.http.client.HttpClientOperations.trailerHeaders()": {
                "lineStart": 462,
                "lineEnd": 464
            },
            "reactor.netty.http.client.HttpClientOperations.uri()": {
                "lineStart": 466,
                "lineEnd": 468
            },
            "reactor.netty.http.client.HttpClientOperations.fullPath()": {
                "lineStart": 470,
                "lineEnd": 472
            },
            "reactor.netty.http.client.HttpClientOperations.resourceUrl()": {
                "lineStart": 474,
                "lineEnd": 476
            },
            "reactor.netty.http.client.HttpClientOperations.version()": {
                "lineStart": 478,
                "lineEnd": 489
            },
            "reactor.netty.http.client.HttpClientOperations.onWritabilityChanged()": {
                "lineStart": 491,
                "lineEnd": 496
            },
            "reactor.netty.http.client.HttpClientOperations.afterMarkSentHeaders()": {
                "lineStart": 498,
                "lineEnd": 499
            },
            "reactor.netty.http.client.HttpClientOperations.beforeMarkSentHeaders()": {
                "lineStart": 501,
                "lineEnd": 514
            },
            "reactor.netty.http.client.HttpClientOperations.isContentAlwaysEmpty()": {
                "lineStart": 516,
                "lineEnd": 518
            },
            "reactor.netty.http.client.HttpClientOperations.onHeadersSent()": {
                "lineStart": 520,
                "lineEnd": 526
            },
            "reactor.netty.http.client.HttpClientOperations.onOutboundComplete()": {
                "lineStart": 528,
                "lineEnd": 555
            },
            "reactor.netty.http.client.HttpClientOperations.onOutboundError(Throwable err)": {
                "lineStart": 557,
                "lineEnd": 573
            },
            "reactor.netty.http.client.HttpClientOperations.onInboundNext(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 575,
                "lineEnd": 711
            },
            "reactor.netty.http.client.HttpClientOperations.outboundHttpMessage()": {
                "lineStart": 713,
                "lineEnd": 715
            },
            "reactor.netty.http.client.HttpClientOperations.notRedirected(HttpResponse response)": {
                "lineStart": 717,
                "lineEnd": 739
            },
            "reactor.netty.http.client.HttpClientOperations.newFullBodyMessage(ByteBuf body)": {
                "lineStart": 741,
                "lineEnd": 747
            },
            "reactor.netty.http.client.HttpClientOperations.wrapInboundError(Throwable err)": {
                "lineStart": 749,
                "lineEnd": 755
            },
            "reactor.netty.http.client.HttpClientOperations.getNettyRequest()": {
                "lineStart": 757,
                "lineEnd": 759
            },
            "reactor.netty.http.client.HttpClientOperations.send()": {
                "lineStart": 761,
                "lineEnd": 767
            },
            "reactor.netty.http.client.HttpClientOperations.setNettyResponse(HttpResponse nettyResponse)": {
                "lineStart": 769,
                "lineEnd": 775
            },
            "reactor.netty.http.client.HttpClientOperations.withWebsocketSupport(WebsocketClientSpec websocketClientSpec, boolean compress)": {
                "lineStart": 777,
                "lineEnd": 800
            },
            "reactor.netty.http.client.HttpClientOperations.addOutboundErrorCause(Throwable exception, @Nullable Throwable cause)": {
                "lineStart": 802,
                "lineEnd": 809
            },
            "reactor.netty.http.client.HttpClientOperations$ResponseState.<init>(HttpResponse response, HttpHeaders headers, ClientCookieDecoder decoder)": {
                "lineStart": 815,
                "lineEnd": 819
            },
            "reactor.netty.http.client.HttpClientOperations$SendForm.<init>(HttpClientOperations parent, BiConsumer<? super HttpClientRequest, HttpClientForm> formCallback, @Nullable Consumer<Flux<Long>> progressCallback)": {
                "lineStart": 828,
                "lineEnd": 832
            },
            "reactor.netty.http.client.HttpClientOperations$SendForm.subscribe(CoreSubscriber<? super Void> s)": {
                "lineStart": 834,
                "lineEnd": 850
            },
            "reactor.netty.http.client.HttpClientOperations$SendForm._subscribe(CoreSubscriber<? super Void> s)": {
                "lineStart": 852,
                "lineEnd": 915
            }
        },
        "2f44cd884-MicrometerHttpClientMetricsRecorder.java": {
            "reactor.netty.http.client.MicrometerHttpClientMetricsRecorder.<init>()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "reactor.netty.http.client.MicrometerHttpClientMetricsRecorder.recordDataReceivedTime(SocketAddress remoteAddress, String uri, String method, String status, Duration time)": {
                "lineStart": 24,
                "lineEnd": 32
            },
            "reactor.netty.http.client.MicrometerHttpClientMetricsRecorder.recordDataSentTime(SocketAddress remoteAddress, String uri, String method, Duration time)": {
                "lineStart": 34,
                "lineEnd": 42
            },
            "reactor.netty.http.client.MicrometerHttpClientMetricsRecorder.recordResponseTime(SocketAddress remoteAddress, String uri, String method, String status, Duration time)": {
                "lineStart": 44,
                "lineEnd": 52
            }
        },
        "2c32a529e-UriEndpointFactory.java": {
            "reactor.netty.http.client.UriEndpointFactory.createUriEndpoint(String url, boolean isWs, Supplier<? extends SocketAddress> connectAddress)": {
                "lineStart": 25,
                "lineEnd": 47
            },
            "reactor.netty.http.client.UriEndpointFactory.createUriEndpoint(URI url, boolean isWs)": {
                "lineStart": 49,
                "lineEnd": 64
            }
        },
        "aba60318e-WebsocketClientOperations.java": {
            "reactor.netty.http.client.WebsocketClientOperations.<init>(URI currentURI, WebsocketClientSpec websocketClientSpec, HttpClientOperations replaced)": {
                "lineStart": 37,
                "lineEnd": 50
            },
            "reactor.netty.http.client.WebsocketClientOperations.headers()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "reactor.netty.http.client.WebsocketClientOperations.isWebsocket()": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "reactor.netty.http.client.WebsocketClientOperations.selectedSubprotocol()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "reactor.netty.http.client.WebsocketClientOperations.onInboundNext(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 64,
                "lineEnd": 123
            },
            "reactor.netty.http.client.WebsocketClientOperations.onInboundCancel()": {
                "lineStart": 125,
                "lineEnd": 131
            },
            "reactor.netty.http.client.WebsocketClientOperations.onInboundClose()": {
                "lineStart": 133,
                "lineEnd": 142
            },
            "reactor.netty.http.client.WebsocketClientOperations.onOutboundComplete()": {
                "lineStart": 144,
                "lineEnd": 145
            },
            "reactor.netty.http.client.WebsocketClientOperations.onOutboundError(Throwable err)": {
                "lineStart": 147,
                "lineEnd": 156
            },
            "reactor.netty.http.client.WebsocketClientOperations.send(Publisher<? extends ByteBuf> dataStream)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendClose()": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendClose(int rsv)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendClose(int statusCode, @Nullable String reasonText)": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendClose(int rsv, int statusCode, @Nullable String reasonText)": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "reactor.netty.http.client.WebsocketClientOperations.receiveCloseStatus()": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendClose(CloseWebSocketFrame frame)": {
                "lineStart": 182,
                "lineEnd": 199
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendCloseNow(CloseWebSocketFrame frame)": {
                "lineStart": 201,
                "lineEnd": 203
            },
            "reactor.netty.http.client.WebsocketClientOperations.sendCloseNow(CloseWebSocketFrame frame, WebSocketCloseStatus closeStatus)": {
                "lineStart": 205,
                "lineEnd": 221
            }
        },
        "98074d14a-HttpServerOperations.java": {
            "reactor.netty.http.server.HttpServerOperations.<init>(HttpServerOperations replaced)": {
                "lineStart": 103,
                "lineEnd": 124
            },
            "reactor.netty.http.server.HttpServerOperations.<init>(Connection c, ConnectionObserver listener, HttpRequest nettyRequest, @Nullable BiPredicate<HttpServerRequest, HttpServerResponse> compressionPredicate, ConnectionInfo connectionInfo, ServerCookieDecoder decoder, ServerCookieEncoder encoder, HttpServerFormDecoderProvider formDecoderProvider, HttpMessageLogFactory httpMessageLogFactory, boolean isHttp2, @Nullable BiFunction<? super Mono<Void>, ? super Connection, ? extends Mono<Void>> mapHandle, boolean secured, ZonedDateTime timestamp)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "reactor.netty.http.server.HttpServerOperations.<init>(Connection c, ConnectionObserver listener, HttpRequest nettyRequest, @Nullable BiPredicate<HttpServerRequest, HttpServerResponse> compressionPredicate, ConnectionInfo connectionInfo, ServerCookieDecoder decoder, ServerCookieEncoder encoder, HttpServerFormDecoderProvider formDecoderProvider, HttpMessageLogFactory httpMessageLogFactory, boolean isHttp2, @Nullable BiFunction<? super Mono<Void>, ? super Connection, ? extends Mono<Void>> mapHandle, boolean resolvePath, boolean secured, ZonedDateTime timestamp)": {
                "lineStart": 130,
                "lineEnd": 157
            },
            "reactor.netty.http.server.HttpServerOperations.sendHeaders()": {
                "lineStart": 159,
                "lineEnd": 165
            },
            "reactor.netty.http.server.HttpServerOperations.withConnection(Consumer<? super Connection> withConnection)": {
                "lineStart": 167,
                "lineEnd": 171
            },
            "reactor.netty.http.server.HttpServerOperations.newFullBodyMessage(ByteBuf body)": {
                "lineStart": 173,
                "lineEnd": 193
            },
            "reactor.netty.http.server.HttpServerOperations.addCookie(Cookie cookie)": {
                "lineStart": 195,
                "lineEnd": 205
            },
            "reactor.netty.http.server.HttpServerOperations.addHeader(CharSequence name, CharSequence value)": {
                "lineStart": 207,
                "lineEnd": 217
            },
            "reactor.netty.http.server.HttpServerOperations.chunkedTransfer(boolean chunked)": {
                "lineStart": 219,
                "lineEnd": 226
            },
            "reactor.netty.http.server.HttpServerOperations.cookies()": {
                "lineStart": 228,
                "lineEnd": 234
            },
            "reactor.netty.http.server.HttpServerOperations.allCookies()": {
                "lineStart": 236,
                "lineEnd": 242
            },
            "reactor.netty.http.server.HttpServerOperations.currentContext()": {
                "lineStart": 244,
                "lineEnd": 246
            },
            "reactor.netty.http.server.HttpServerOperations.header(CharSequence name, CharSequence value)": {
                "lineStart": 248,
                "lineEnd": 258
            },
            "reactor.netty.http.server.HttpServerOperations.headers(HttpHeaders headers)": {
                "lineStart": 260,
                "lineEnd": 270
            },
            "reactor.netty.http.server.HttpServerOperations.isFormUrlencoded()": {
                "lineStart": 272,
                "lineEnd": 275
            },
            "reactor.netty.http.server.HttpServerOperations.isKeepAlive()": {
                "lineStart": 277,
                "lineEnd": 279
            },
            "reactor.netty.http.server.HttpServerOperations.isMultipart()": {
                "lineStart": 281,
                "lineEnd": 283
            },
            "reactor.netty.http.server.HttpServerOperations.isWebsocket()": {
                "lineStart": 285,
                "lineEnd": 287
            },
            "reactor.netty.http.server.HttpServerOperations.isHttp2()": {
                "lineStart": 289,
                "lineEnd": 291
            },
            "reactor.netty.http.server.HttpServerOperations.keepAlive(boolean keepAlive)": {
                "lineStart": 293,
                "lineEnd": 296
            },
            "reactor.netty.http.server.HttpServerOperations.method()": {
                "lineStart": 298,
                "lineEnd": 300
            },
            "reactor.netty.http.server.HttpServerOperations.param(CharSequence key)": {
                "lineStart": 302,
                "lineEnd": 310
            },
            "reactor.netty.http.server.HttpServerOperations.params()": {
                "lineStart": 312,
                "lineEnd": 314
            },
            "reactor.netty.http.server.HttpServerOperations.paramsResolver(Function<? super String, Map<String, String>> paramsResolver)": {
                "lineStart": 316,
                "lineEnd": 319
            },
            "reactor.netty.http.server.HttpServerOperations.receiveForm()": {
                "lineStart": 321,
                "lineEnd": 323
            },
            "reactor.netty.http.server.HttpServerOperations.receiveForm(Consumer<HttpServerFormDecoderProvider.Builder> formDecoderBuilder)": {
                "lineStart": 325,
                "lineEnd": 331
            },
            "reactor.netty.http.server.HttpServerOperations.receiveObject()": {
                "lineStart": 333,
                "lineEnd": 349
            },
            "reactor.netty.http.server.HttpServerOperations.hostAddress()": {
                "lineStart": 351,
                "lineEnd": 353
            },
            "reactor.netty.http.server.HttpServerOperations.hostSocketAddress()": {
                "lineStart": 355,
                "lineEnd": 357
            },
            "reactor.netty.http.server.HttpServerOperations.connectionHostAddress()": {
                "lineStart": 359,
                "lineEnd": 361
            },
            "reactor.netty.http.server.HttpServerOperations.remoteAddress()": {
                "lineStart": 363,
                "lineEnd": 365
            },
            "reactor.netty.http.server.HttpServerOperations.remoteSocketAddress()": {
                "lineStart": 367,
                "lineEnd": 369
            },
            "reactor.netty.http.server.HttpServerOperations.connectionRemoteAddress()": {
                "lineStart": 371,
                "lineEnd": 373
            },
            "reactor.netty.http.server.HttpServerOperations.requestHeaders()": {
                "lineStart": 375,
                "lineEnd": 381
            },
            "reactor.netty.http.server.HttpServerOperations.scheme()": {
                "lineStart": 383,
                "lineEnd": 385
            },
            "reactor.netty.http.server.HttpServerOperations.connectionScheme()": {
                "lineStart": 387,
                "lineEnd": 389
            },
            "reactor.netty.http.server.HttpServerOperations.hostName()": {
                "lineStart": 391,
                "lineEnd": 393
            },
            "reactor.netty.http.server.HttpServerOperations.hostPort()": {
                "lineStart": 395,
                "lineEnd": 397
            },
            "reactor.netty.http.server.HttpServerOperations.responseHeaders()": {
                "lineStart": 399,
                "lineEnd": 401
            },
            "reactor.netty.http.server.HttpServerOperations.protocol()": {
                "lineStart": 403,
                "lineEnd": 405
            },
            "reactor.netty.http.server.HttpServerOperations.timestamp()": {
                "lineStart": 407,
                "lineEnd": 409
            },
            "reactor.netty.http.server.HttpServerOperations.send()": {
                "lineStart": 411,
                "lineEnd": 413
            },
            "reactor.netty.http.server.HttpServerOperations.sendFile(Path file)": {
                "lineStart": 415,
                "lineEnd": 428
            },
            "reactor.netty.http.server.HttpServerOperations.sendNotFound()": {
                "lineStart": 430,
                "lineEnd": 432
            },
            "reactor.netty.http.server.HttpServerOperations.sendRedirect(String location)": {
                "lineStart": 434,
                "lineEnd": 437
            },
            "reactor.netty.http.server.HttpServerOperations.sse()": {
                "lineStart": 439,
                "lineEnd": 442
            },
            "reactor.netty.http.server.HttpServerOperations.status()": {
                "lineStart": 444,
                "lineEnd": 446
            },
            "reactor.netty.http.server.HttpServerOperations.status(HttpResponseStatus status)": {
                "lineStart": 448,
                "lineEnd": 458
            },
            "reactor.netty.http.server.HttpServerOperations.trailerHeaders(Consumer<? super HttpHeaders> trailerHeaders)": {
                "lineStart": 460,
                "lineEnd": 463
            },
            "reactor.netty.http.server.HttpServerOperations.sendWebsocket(BiFunction<? super WebsocketInbound, ? super WebsocketOutbound, ? extends Publisher<Void>> websocketHandler, WebsocketServerSpec configurer)": {
                "lineStart": 465,
                "lineEnd": 467
            },
            "reactor.netty.http.server.HttpServerOperations.uri()": {
                "lineStart": 469,
                "lineEnd": 475
            },
            "reactor.netty.http.server.HttpServerOperations.fullPath()": {
                "lineStart": 477,
                "lineEnd": 483
            },
            "reactor.netty.http.server.HttpServerOperations.version()": {
                "lineStart": 485,
                "lineEnd": 491
            },
            "reactor.netty.http.server.HttpServerOperations.compression(boolean compress)": {
                "lineStart": 493,
                "lineEnd": 513
            },
            "reactor.netty.http.server.HttpServerOperations.onInboundNext(ChannelHandlerContext ctx, Object msg)": {
                "lineStart": 515,
                "lineEnd": 563
            },
            "reactor.netty.http.server.HttpServerOperations.onInboundClose()": {
                "lineStart": 565,
                "lineEnd": 572
            },
            "reactor.netty.http.server.HttpServerOperations.afterMarkSentHeaders()": {
                "lineStart": 574,
                "lineEnd": 579
            },
            "reactor.netty.http.server.HttpServerOperations.beforeMarkSentHeaders()": {
                "lineStart": 581,
                "lineEnd": 590
            },
            "reactor.netty.http.server.HttpServerOperations.isContentAlwaysEmpty()": {
                "lineStart": 592,
                "lineEnd": 600
            },
            "reactor.netty.http.server.HttpServerOperations.onHeadersSent()": {
                "lineStart": 602,
                "lineEnd": 603
            },
            "reactor.netty.http.server.HttpServerOperations.onOutboundComplete()": {
                "lineStart": 605,
                "lineEnd": 658
            },
            "reactor.netty.http.server.HttpServerOperations.cleanHandlerTerminate(Channel ch)": {
                "lineStart": 660,
                "lineEnd": 675
            },
            "reactor.netty.http.server.HttpServerOperations.requestsCounter(Channel channel)": {
                "lineStart": 677,
                "lineEnd": 684
            },
            "reactor.netty.http.server.HttpServerOperations.sendDecodingFailures(ChannelHandlerContext ctx, ConnectionObserver listener, boolean secure, Throwable t, Object msg, HttpMessageLogFactory httpMessageLogFactory, @Nullable ZonedDateTime timestamp, @Nullable ConnectionInfo connectionInfo, SocketAddress remoteAddress)": {
                "lineStart": 686,
                "lineEnd": 688
            },
            "reactor.netty.http.server.HttpServerOperations.sendDecodingFailures(ChannelHandlerContext ctx, ConnectionObserver listener, boolean secure, Throwable t, Object msg, HttpMessageLogFactory httpMessageLogFactory, boolean isHttp2, @Nullable ZonedDateTime timestamp, @Nullable ConnectionInfo connectionInfo, SocketAddress remoteAddress)": {
                "lineStart": 690,
                "lineEnd": 729
            },
            "reactor.netty.http.server.HttpServerOperations.onOutboundError(Throwable err)": {
                "lineStart": 731,
                "lineEnd": 748
            },
            "reactor.netty.http.server.HttpServerOperations.outboundHttpMessage()": {
                "lineStart": 750,
                "lineEnd": 752
            },
            "reactor.netty.http.server.HttpServerOperations.receiveFormInternal(HttpServerFormDecoderProvider config)": {
                "lineStart": 754,
                "lineEnd": 772
            },
            "reactor.netty.http.server.HttpServerOperations.withWebsocketSupport(String url, WebsocketServerSpec websocketServerSpec, BiFunction<? super WebsocketInbound, ? super WebsocketOutbound, ? extends Publisher<Void>> websocketHandler)": {
                "lineStart": 774,
                "lineEnd": 794
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.<init>(WebsocketServerOperations ops, Context context)": {
                "lineStart": 799,
                "lineEnd": 802
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.onSubscribe(Subscription s)": {
                "lineStart": 804,
                "lineEnd": 806
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.onNext(Void aVoid)": {
                "lineStart": 808,
                "lineEnd": 809
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.onError(Throwable t)": {
                "lineStart": 811,
                "lineEnd": 813
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.operationComplete(ChannelFuture future)": {
                "lineStart": 815,
                "lineEnd": 817
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.onComplete()": {
                "lineStart": 819,
                "lineEnd": 824
            },
            "reactor.netty.http.server.HttpServerOperations$WebsocketSubscriber.currentContext()": {
                "lineStart": 826,
                "lineEnd": 828
            },
            "reactor.netty.http.server.HttpServerOperations$FailedHttpServerRequest.<init>(Connection c, ConnectionObserver listener, HttpRequest nettyRequest, HttpResponse nettyResponse, HttpMessageLogFactory httpMessageLogFactory, boolean isHttp2, boolean secure, ZonedDateTime timestamp, ConnectionInfo connectionInfo)": {
                "lineStart": 838,
                "lineEnd": 854
            },
            "reactor.netty.http.server.HttpServerOperations$FailedHttpServerRequest.outboundHttpMessage()": {
                "lineStart": 856,
                "lineEnd": 858
            },
            "reactor.netty.http.server.HttpServerOperations$FailedHttpServerRequest.status()": {
                "lineStart": 860,
                "lineEnd": 862
            },
            "reactor.netty.http.server.HttpServerOperations$TrailerHeaders.<init>(String declaredHeaderNames)": {
                "lineStart": 885,
                "lineEnd": 887
            },
            "reactor.netty.http.server.HttpServerOperations$TrailerHeaders.filterHeaderNames(String declaredHeaderNames)": {
                "lineStart": 889,
                "lineEnd": 903
            },
            "reactor.netty.http.server.HttpServerOperations$TrailerHeaders$TrailerNameValidator.<init>(Set<String> declaredHeaderNames)": {
                "lineStart": 907,
                "lineEnd": 909
            },
            "reactor.netty.http.server.HttpServerOperations$TrailerHeaders$TrailerNameValidator.validateName(CharSequence name)": {
                "lineStart": 911,
                "lineEnd": 916
            }
        },
        "348210be2-MicrometerHttpServerMetricsRecorder.java": {
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.<init>()": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordDataReceivedTime(String uri, String method, Duration time)": {
                "lineStart": 45,
                "lineEnd": 52
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordDataSentTime(String uri, String method, String status, Duration time)": {
                "lineStart": 54,
                "lineEnd": 61
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordResponseTime(String uri, String method, String status, Duration time)": {
                "lineStart": 63,
                "lineEnd": 70
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordDataReceived(SocketAddress remoteAddress, String uri, long bytes)": {
                "lineStart": 72,
                "lineEnd": 78
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordDataSent(SocketAddress remoteAddress, String uri, long bytes)": {
                "lineStart": 80,
                "lineEnd": 86
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.incrementErrorsCount(SocketAddress remoteAddress, String uri)": {
                "lineStart": 88,
                "lineEnd": 94
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordServerConnectionActive(SocketAddress localAddress)": {
                "lineStart": 96,
                "lineEnd": 102
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordServerConnectionInactive(SocketAddress localAddress)": {
                "lineStart": 104,
                "lineEnd": 110
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordStreamOpened(SocketAddress localAddress)": {
                "lineStart": 112,
                "lineEnd": 118
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordStreamClosed(SocketAddress localAddress)": {
                "lineStart": 120,
                "lineEnd": 126
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordDataReceived(SocketAddress remoteAddress, long bytes)": {
                "lineStart": 128,
                "lineEnd": 129
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordDataSent(SocketAddress remoteAddress, long bytes)": {
                "lineStart": 131,
                "lineEnd": 132
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.incrementErrorsCount(SocketAddress remoteAddress)": {
                "lineStart": 134,
                "lineEnd": 135
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordTlsHandshakeTime(SocketAddress remoteAddress, Duration time, String status)": {
                "lineStart": 137,
                "lineEnd": 138
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordConnectTime(SocketAddress remoteAddress, Duration time, String status)": {
                "lineStart": 140,
                "lineEnd": 142
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.recordResolveAddressTime(SocketAddress remoteAddress, Duration time, String status)": {
                "lineStart": 144,
                "lineEnd": 146
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.getActiveStreamsAdder(SocketAddress localAddress)": {
                "lineStart": 148,
                "lineEnd": 156
            },
            "reactor.netty.http.server.MicrometerHttpServerMetricsRecorder.getServerConnectionAdder(SocketAddress localAddress)": {
                "lineStart": 158,
                "lineEnd": 166
            }
        },
        "bb2dfe508-WebsocketServerOperations.java": {
            "reactor.netty.http.server.WebsocketServerOperations.<init>(String wsUrl, WebsocketServerSpec websocketServerSpec, HttpServerOperations replaced)": {
                "lineStart": 40,
                "lineEnd": 89
            },
            "reactor.netty.http.server.WebsocketServerOperations.send(Publisher<? extends ByteBuf> dataStream)": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "reactor.netty.http.server.WebsocketServerOperations.headers()": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "reactor.netty.http.server.WebsocketServerOperations.onInboundNext(ChannelHandlerContext ctx, Object frame)": {
                "lineStart": 99,
                "lineEnd": 127
            },
            "reactor.netty.http.server.WebsocketServerOperations.onOutboundComplete()": {
                "lineStart": 129,
                "lineEnd": 130
            },
            "reactor.netty.http.server.WebsocketServerOperations.onOutboundError(Throwable err)": {
                "lineStart": 132,
                "lineEnd": 141
            },
            "reactor.netty.http.server.WebsocketServerOperations.onInboundCancel()": {
                "lineStart": 143,
                "lineEnd": 149
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendClose()": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendClose(int rsv)": {
                "lineStart": 155,
                "lineEnd": 157
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendClose(int statusCode, @Nullable String reasonText)": {
                "lineStart": 159,
                "lineEnd": 161
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendClose(int rsv, int statusCode, @Nullable String reasonText)": {
                "lineStart": 163,
                "lineEnd": 165
            },
            "reactor.netty.http.server.WebsocketServerOperations.receiveCloseStatus()": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendClose(CloseWebSocketFrame frame)": {
                "lineStart": 171,
                "lineEnd": 188
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendCloseNow(CloseWebSocketFrame frame, ChannelFutureListener listener)": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "reactor.netty.http.server.WebsocketServerOperations.sendCloseNow(CloseWebSocketFrame frame, WebSocketCloseStatus closeStatus, ChannelFutureListener listener)": {
                "lineStart": 194,
                "lineEnd": 210
            },
            "reactor.netty.http.server.WebsocketServerOperations.isWebsocket()": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "reactor.netty.http.server.WebsocketServerOperations.selectedSubprotocol()": {
                "lineStart": 216,
                "lineEnd": 218
            }
        }
    },
    "CVE-2022-22931": {
        "e606f698ac-SieveFileRepository.java": {
            "org.apache.james.sieverepository.file.SieveFileRepository.enforceRoot(File file)": {
                "lineStart": 279,
                "lineEnd": 290
            }
        }
    },
    "CVE-2021-2471": {
        "41da76e9-MysqlSQLXML.java": {
            "com.mysql.cj.jdbc.MysqlSQLXML.getSource(Class<T> clazz)": {
                "lineStart": 133,
                "lineEnd": 201
            }
        }
    },
    "CVE-2023-32986": {
        "4c03ad7-AbstractFileParameterDefinition.java": {
            "io.jenkins.plugins.file_parameters.AbstractFileParameterDefinition.createValue(StaplerRequest req)": {
                "lineStart": 27,
                "lineEnd": 61
            },
            "io.jenkins.plugins.file_parameters.AbstractFileParameterDefinition.<init>(String name)": {
                "lineStart": 15,
                "lineEnd": 17
            }
        },
        "667d92a-AbstractFileParameterValue.java": {
            "io.jenkins.plugins.file_parameters.AbstractFileParameterValue.buildEnvironment(Run<?, ?> build, EnvVars env)": {
                "lineStart": 66,
                "lineEnd": 72
            }
        },
        "07e35d8-Base64FileParameterDefinition.java": {
            "io.jenkins.plugins.file_parameters.Base64FileParameterDefinition.<init>(String name)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "io.jenkins.plugins.file_parameters.Base64FileParameterDefinition.valueType()": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "io.jenkins.plugins.file_parameters.Base64FileParameterDefinition.createValue(String name, InputStream src)": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "io.jenkins.plugins.file_parameters.Base64FileParameterDefinition$DescriptorImpl.getDisplayName()": {
                "lineStart": 18,
                "lineEnd": 18
            }
        },
        "b275e34-Base64FileParameterValue.java": {
            "io.jenkins.plugins.file_parameters.Base64FileParameterValue.setFile(FileItem file)": {
                "lineStart": 16,
                "lineEnd": 19
            }
        },
        "a0998ab-StashedFileParameterDefinition.java": {
            "io.jenkins.plugins.file_parameters.StashedFileParameterDefinition.<init>(String name)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "io.jenkins.plugins.file_parameters.StashedFileParameterDefinition.valueType()": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "io.jenkins.plugins.file_parameters.StashedFileParameterDefinition.createValue(String name, InputStream src)": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "io.jenkins.plugins.file_parameters.StashedFileParameterDefinition$DescriptorImpl.getDisplayName()": {
                "lineStart": 18,
                "lineEnd": 18
            }
        },
        "b7ed138-StashedFileParameterValue.java": {
            "io.jenkins.plugins.file_parameters.StashedFileParameterValue.<init>(String name, FileItem file)": {
                "lineStart": 22,
                "lineEnd": 25
            }
        }
    },
    "CVE-2020-7961": {
        "908701c7abab2-JSONWebServiceActionImpl.java": {
            "com.liferay.portal.jsonwebservice.JSONWebServiceActionImpl._prepareParameters(Class<?> actionClass)": {
                "lineStart": 336,
                "lineEnd": 380
            }
        }
    },
    "CVE-2023-23613": {
        "b5db3546185-AbstractPointGeometryFieldMapper.java": {
            "org.opensearch.index.mapper.AbstractPointGeometryFieldMapper$PointParser.parse(XContentParser parser)": {
                "lineStart": 161,
                "lineEnd": 195
            },
            "org.opensearch.index.mapper.AbstractPointGeometryFieldMapper$PointParser.createParser(NamedXContentRegistry namedXContentRegistry, DeprecationHandler deprecationHandler, XContentBuilder xContentBuilder)": {
                "lineStart": 197,
                "lineEnd": 201
            },
            "org.opensearch.index.mapper.AbstractPointGeometryFieldMapper$PointParser.reconstructArrayXContent(XContentParser parser)": {
                "lineStart": 203,
                "lineEnd": 221
            }
        }
    },
    "CVE-2021-3754": {
        "15f4288424-UserResource.java": {
            "org.keycloak.services.resources.admin.UserResource.validateUserProfile(UserProfile profile, KeycloakSession session, AdminAuth adminAuth)": {
                "lineStart": 196,
                "lineEnd": 210
            }
        },
        "8ae54e7f0b-UsersResource.java": {
            "org.keycloak.services.resources.admin.UsersResource.createUser(final UserRepresentation rep)": {
                "lineStart": 75,
                "lineEnd": 157
            }
        },
        "4cc112f383-DeclarativeUserProfileProviderFactory.java": {
            "org.keycloak.userprofile.DeclarativeUserProfileProviderFactory.createUserResourceValidation(Config.Scope config)": {
                "lineStart": 307,
                "lineEnd": 322
            }
        },
        "0fd29478a8-DuplicateEmailValidator.java": {
            "org.keycloak.userprofile.validator.DuplicateEmailValidator.validate(Object input, String inputHint, ValidationContext context, ValidatorConfig config)": {
                "lineStart": 20,
                "lineEnd": 43
            }
        },
        "206ec31d16-DuplicateUsernameValidator.java": {
            "org.keycloak.userprofile.validator.DuplicateUsernameValidator.validate(Object input, String inputHint, ValidationContext context, ValidatorConfig config)": {
                "lineStart": 21,
                "lineEnd": 41
            }
        }
    },
    "CVE-2020-5407": {
        "900f3cd820-OpenSamlAuthenticationProvider.java": {
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.authenticate(Authentication authentication)": {
                "lineStart": 89,
                "lineEnd": 104
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getUsername(Saml2AuthenticationToken token, Assertion assertion)": {
                "lineStart": 114,
                "lineEnd": 135
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.validateSaml2Response(Saml2AuthenticationToken token, String recipient, Response samlResponse)": {
                "lineStart": 137,
                "lineEnd": 193
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.hasValidSignature(SignableSAMLObject samlObject, Saml2AuthenticationToken token)": {
                "lineStart": 195,
                "lineEnd": 234
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.validateAssertion(String recipient, Assertion a, Saml2AuthenticationToken token, boolean signatureRequired)": {
                "lineStart": 236,
                "lineEnd": 287
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getSaml2Response(Saml2AuthenticationToken token)": {
                "lineStart": 289,
                "lineEnd": 305
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.validationError(String code, String description)": {
                "lineStart": 307,
                "lineEnd": 309
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.authException(String code, String description)": {
                "lineStart": 311,
                "lineEnd": 313
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.authException(String code, String description, Exception cause)": {
                "lineStart": 315,
                "lineEnd": 317
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getAssertionValidator(Saml2AuthenticationToken provider)": {
                "lineStart": 319,
                "lineEnd": 334
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getVerificationCredential(X509Certificate certificate)": {
                "lineStart": 336,
                "lineEnd": 338
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getDecrypter(Saml2X509Credential key)": {
                "lineStart": 340,
                "lineEnd": 346
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.decrypt(Saml2AuthenticationToken token, EncryptedAssertion assertion)": {
                "lineStart": 348,
                "lineEnd": 368
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getDecryptionCredentials(Saml2AuthenticationToken token)": {
                "lineStart": 392,
                "lineEnd": 402
            },
            "org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider.getVerificationCertificates(Saml2AuthenticationToken token)": {
                "lineStart": 404,
                "lineEnd": 414
            }
        }
    },
    "CVE-2023-43642": {
        "67d2d18-SnappyHadoopCompatibleOutputStream.java": {
            "org.xerial.snappy.SnappyHadoopCompatibleOutputStream.<init>(OutputStream out)": {
                "lineStart": 5,
                "lineEnd": 7
            },
            "org.xerial.snappy.SnappyHadoopCompatibleOutputStream.<init>(OutputStream out, int blockSize)": {
                "lineStart": 9,
                "lineEnd": 11
            },
            "org.xerial.snappy.SnappyHadoopCompatibleOutputStream.writeHeader()": {
                "lineStart": 13,
                "lineEnd": 15
            },
            "org.xerial.snappy.SnappyHadoopCompatibleOutputStream.writeBlockPreemble()": {
                "lineStart": 17,
                "lineEnd": 19
            }
        },
        "9835cf9-SnappyInputStream.java": {
            "org.xerial.snappy.SnappyInputStream.<init>(InputStream input)": {
                "lineStart": 13,
                "lineEnd": 16
            },
            "org.xerial.snappy.SnappyInputStream.hasNextChunk()": {
                "lineStart": 193,
                "lineEnd": 264
            }
        },
        "0bab154-SnappyOutputStream.java": {
            "org.xerial.snappy.SnappyOutputStream.<init>(OutputStream out, int blockSize, BufferAllocatorFactory bufferAllocatorFactory)": {
                "lineStart": 28,
                "lineEnd": 37
            }
        }
    },
    "CVE-2024-23686": {
        "9acc3d70f-BaseDependencyCheckMojo.java": {
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.artifactsMatch(org.apache.maven.model.Dependency d, Artifact a)": {
                "lineStart": 371,
                "lineEnd": 373
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.isEqualOrNull(String left, String right)": {
                "lineStart": 375,
                "lineEnd": 377
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.execute()": {
                "lineStart": 379,
                "lineEnd": 390
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.generate(@SuppressWarnings(\"deprecation\") org.codehaus.doxia.sink.Sink sink, Locale locale)": {
                "lineStart": 392,
                "lineEnd": 394
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.isGeneratingSite()": {
                "lineStart": 396,
                "lineEnd": 398
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getConnectionString()": {
                "lineStart": 400,
                "lineEnd": 402
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.isFailOnError()": {
                "lineStart": 404,
                "lineEnd": 406
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.generate(Sink sink, Locale locale)": {
                "lineStart": 408,
                "lineEnd": 427
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getCorrectOutputDirectory()": {
                "lineStart": 429,
                "lineEnd": 431
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getCorrectOutputDirectory(MavenProject current)": {
                "lineStart": 433,
                "lineEnd": 445
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.scanArtifacts(MavenProject project, Engine engine)": {
                "lineStart": 447,
                "lineEnd": 449
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.scanArtifacts(MavenProject project, Engine engine, boolean aggregate)": {
                "lineStart": 451,
                "lineEnd": 469
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.scanPlugins(MavenProject project, Engine engine, ExceptionCollection exCollection)": {
                "lineStart": 471,
                "lineEnd": 508
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.addPluginToDependencies(MavenProject project, Engine engine, Artifact artifact, String parent, ExceptionCollection exCollection)": {
                "lineStart": 510,
                "lineEnd": 575
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.buildReference(final String groupId, final String artifactId, final String version)": {
                "lineStart": 577,
                "lineEnd": 589
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.resolveArtifactDependencies(final DependableCoordinate artifact, MavenProject project)": {
                "lineStart": 591,
                "lineEnd": 600
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.toDependencyNode(List<DependencyNode> nodes, ProjectBuildingRequest buildingRequest, DependencyNode parent, org.apache.maven.model.Dependency dependency)": {
                "lineStart": 602,
                "lineEnd": 653
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.findVersion(List<DependencyNode> nodes, String groupId, String artifactId)": {
                "lineStart": 655,
                "lineEnd": 662
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.collectDependencyManagementDependencies(Engine engine, ProjectBuildingRequest buildingRequest, MavenProject project, List<DependencyNode> nodes, boolean aggregate)": {
                "lineStart": 664,
                "lineEnd": 695
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.collectMavenDependencies(Engine engine, MavenProject project, Map<DependencyNode, List<DependencyNode>> nodeMap, ProjectBuildingRequest buildingRequest, boolean aggregate)": {
                "lineStart": 697,
                "lineEnd": 714
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.findInAllDeps(final List<ArtifactResult> allDeps, final Artifact unresolvedArtifact, final MavenProject project)": {
                "lineStart": 716,
                "lineEnd": 731
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.sameArtifact(final ArtifactResult res, final Artifact unresolvedArtifact)": {
                "lineStart": 733,
                "lineEnd": 750
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.createProjectReferenceName(MavenProject project, DependencyNode dependencyNode)": {
                "lineStart": 752,
                "lineEnd": 754
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.collectDependencies(Engine engine, MavenProject project, Map<DependencyNode, List<DependencyNode>> nodes, ProjectBuildingRequest buildingRequest, boolean aggregate)": {
                "lineStart": 756,
                "lineEnd": 867
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.addReactorDependency(Engine engine, Artifact artifact, final MavenProject depender)": {
                "lineStart": 869,
                "lineEnd": 871
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.addVirtualDependencyFromReactor(Engine engine, Artifact artifact, final MavenProject depender, String infoLogTemplate)": {
                "lineStart": 873,
                "lineEnd": 938
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.newDependency(MavenProject prj)": {
                "lineStart": 940,
                "lineEnd": 954
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.addSnapshotReactorDependency(Engine engine, Artifact artifact, final MavenProject depender)": {
                "lineStart": 956,
                "lineEnd": 962
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.newResolveArtifactProjectBuildingRequest(MavenProject project, List<ArtifactRepository> repos)": {
                "lineStart": 964,
                "lineEnd": 969
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.runCheck()": {
                "lineStart": 971,
                "lineEnd": 1045
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.handleAnalysisExceptions(ExceptionCollection currentEx, ExceptionCollection newEx)": {
                "lineStart": 1047,
                "lineEnd": 1081
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.scanDependencies(Engine engine)": {
                "lineStart": 1083,
                "lineEnd": 1083
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.scanPlugins(Engine engine, ExceptionCollection exCol)": {
                "lineStart": 1084,
                "lineEnd": 1084
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getReportOutputDirectory()": {
                "lineStart": 1085,
                "lineEnd": 1087
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.setReportOutputDirectory(File directory)": {
                "lineStart": 1089,
                "lineEnd": 1091
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getOutputDirectory()": {
                "lineStart": 1093,
                "lineEnd": 1095
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.isExternalReport()": {
                "lineStart": 1097,
                "lineEnd": 1099
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getOutputName()": {
                "lineStart": 1101,
                "lineEnd": 1129
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getCategoryName()": {
                "lineStart": 1131,
                "lineEnd": 1133
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.initializeEngine()": {
                "lineStart": 1135,
                "lineEnd": 1138
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.populateSettings()": {
                "lineStart": 1140,
                "lineEnd": 1387
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.configureServerCredentials(String serverId, String userSettingKey, String passwordSettingKey)": {
                "lineStart": 1389,
                "lineEnd": 1411
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.configureServerCredentialsApiKey(String serverId, String apiKeySetting)": {
                "lineStart": 1413,
                "lineEnd": 1433
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.decryptPasswordFromSettings(String password)": {
                "lineStart": 1435,
                "lineEnd": 1441
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.handleSecDispatcherException(String settingsElementName, String settingsElementId, String passwordValueFromSettings, SecDispatcherException ex)": {
                "lineStart": 1443,
                "lineEnd": 1460
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.determineSuppressions()": {
                "lineStart": 1462,
                "lineEnd": 1476
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.muteNoisyLoggers()": {
                "lineStart": 1478,
                "lineEnd": 1489
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getMavenProxy()": {
                "lineStart": 1491,
                "lineEnd": 1519
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getProject()": {
                "lineStart": 1521,
                "lineEnd": 1523
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getReactorProjects()": {
                "lineStart": 1525,
                "lineEnd": 1527
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getFormats()": {
                "lineStart": 1529,
                "lineEnd": 1553
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getExcludes()": {
                "lineStart": 1555,
                "lineEnd": 1561
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getArtifactScopeExcluded()": {
                "lineStart": 1563,
                "lineEnd": 1565
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.getSettings()": {
                "lineStart": 1567,
                "lineEnd": 1569
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.checkForFailure(Dependency[] dependencies)": {
                "lineStart": 1571,
                "lineEnd": 1624
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.showSummary(MavenProject mp, Dependency[] dependencies)": {
                "lineStart": 1626,
                "lineEnd": 1631
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.scanDependencyNode(DependencyNode dependencyNode, DependencyNode root, Engine engine, MavenProject project, List<ArtifactResult> allResolvedDeps, ProjectBuildingRequest buildingRequest, boolean aggregate, ExceptionCollection exceptionCollection)": {
                "lineStart": 1633,
                "lineEnd": 1778
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.tryResolutionOnce(MavenProject project, List<ArtifactResult> allResolvedDeps, ProjectBuildingRequest buildingRequest)": {
                "lineStart": 1780,
                "lineEnd": 1801
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.processResolvedArtifact(File artifactFile, final List<Dependency> deps, String groupId, String artifactId, String version, DependencyNode root, MavenProject project1, List<ArtifactVersion> availableVersions, DependencyNode dependencyNode)": {
                "lineStart": 1803,
                "lineEnd": 1854
            },
            "org.owasp.dependencycheck.maven.BaseDependencyCheckMojo.processPomArtifact(File artifactFile, DependencyNode root, MavenProject project1, Engine engine, ExceptionCollection exCollection)": {
                "lineStart": 1856,
                "lineEnd": 1883
            }
        }
    },
    "CVE-2021-21429": {
        "fa8711fd147-CodeGenMojo.java": {
            "org.openapitools.codegen.plugin.CodeGenMojo.execute()": {
                "lineStart": 171,
                "lineEnd": 489
            },
            "org.openapitools.codegen.plugin.CodeGenMojo.calculateInputSpecHash(File inputSpecFile)": {
                "lineStart": 491,
                "lineEnd": 518
            }
        }
    },
    "CVE-2022-25194": {
        "5ff9b91-AutonomiqBuilder.java": {
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillProjectItems(@QueryParameter String aiqUrl, @QueryParameter String login, @QueryParameter Secret password, @QueryParameter String proxyHost, @QueryParameter String proxyPort, @QueryParameter String proxyUser, @QueryParameter Secret proxyPassword, @QueryParameter Boolean httpProxy)": {
                "lineStart": 488,
                "lineEnd": 500
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillPlatformTestCasesItems()": {
                "lineStart": 502,
                "lineEnd": 506
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillPlatformTestSuitesItems()": {
                "lineStart": 508,
                "lineEnd": 512
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillBrowserTestCasesItems()": {
                "lineStart": 514,
                "lineEnd": 518
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillBrowserTestSuitesItems()": {
                "lineStart": 520,
                "lineEnd": 524
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillExecutionModeItems()": {
                "lineStart": 526,
                "lineEnd": 530
            }
        }
    },
    "CVE-2022-25180": {
        "6691f877-ReplayAction.java": {
            "org.jenkinsci.plugins.workflow.cps.replay.ReplayAction.run2(@NonNull String replacementMainScript, @NonNull Map<String, String> replacementLoadedScripts)": {
                "lineStart": 205,
                "lineEnd": 219
            }
        }
    },
    "CVE-2023-25194": {
        "48216a8a90-JaasContext.java": {
            "org.apache.kafka.common.security.JaasContext.load(JaasContext.Type contextType, String listenerContextName, String globalContextName, Password dynamicJaasConfig)": {
                "lineStart": 39,
                "lineEnd": 52
            },
            "org.apache.kafka.common.security.JaasContext.defaultContext(JaasContext.Type contextType, String listenerContextName, String globalContextName)": {
                "lineStart": 54,
                "lineEnd": 86
            }
        },
        "baff5633a3-JaasUtils.java": {
            "org.apache.kafka.common.security.JaasUtils.<init>()": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.apache.kafka.common.security.JaasUtils.zkSecuritySysConfigString()": {
                "lineStart": 15,
                "lineEnd": 20
            },
            "org.apache.kafka.common.security.JaasUtils.isZkSaslEnabled()": {
                "lineStart": 22,
                "lineEnd": 41
            }
        }
    },
    "CVE-2020-2136": {
        "796945e1-TFS2013GitRepositoryBrowser.java": {
            "hudson.plugins.git.browser.TFS2013GitRepositoryBrowser$TFS2013GitRepositoryBrowserDescriptor.doCheckRepoUrl(@QueryParameter(fixEmpty = true) String value, @AncestorInPath AbstractProject project)": {
                "lineStart": 87,
                "lineEnd": 129
            }
        }
    },
    "CVE-2023-44487": {
        "5d42042dbf-AbstractHttp2ConnectionHandlerBuilder.java": {
            "io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder.buildFromCodec(Http2ConnectionDecoder decoder, Http2ConnectionEncoder encoder)": {
                "lineStart": 288,
                "lineEnd": 310
            }
        },
        "3348ee6028-Http2FrameCodecBuilder.java": {
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.<init>()": {
                "lineStart": 6,
                "lineEnd": 7
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.<init>(boolean server)": {
                "lineStart": 9,
                "lineEnd": 12
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.forClient()": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.forServer()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.frameWriter(Http2FrameWriter frameWriter)": {
                "lineStart": 22,
                "lineEnd": 25
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.initialSettings()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.initialSettings(Http2Settings settings)": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.gracefulShutdownTimeoutMillis()": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.gracefulShutdownTimeoutMillis(long gracefulShutdownTimeoutMillis)": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.isServer()": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.maxReservedStreams()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.maxReservedStreams(int maxReservedStreams)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.isValidateHeaders()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.validateHeaders(boolean validateHeaders)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.frameLogger()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.frameLogger(Http2FrameLogger frameLogger)": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.encoderEnforceMaxConcurrentStreams()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.encoderEnforceMaxConcurrentStreams(boolean encoderEnforceMaxConcurrentStreams)": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.encoderEnforceMaxQueuedControlFrames()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.encoderEnforceMaxQueuedControlFrames(int maxQueuedControlFrames)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.headerSensitivityDetector()": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.headerSensitivityDetector(Http2HeadersEncoder.SensitivityDetector headerSensitivityDetector)": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.encoderIgnoreMaxHeaderListSize(boolean ignoreMaxHeaderListSize)": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.initialHuffmanDecodeCapacity(int initialHuffmanDecodeCapacity)": {
                "lineStart": 99,
                "lineEnd": 101
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.autoAckSettingsFrame(boolean autoAckSettings)": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.autoAckPingFrame(boolean autoAckPingFrame)": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.decoupleCloseAndGoAway(boolean decoupleCloseAndGoAway)": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.flushPreface(boolean flushPreface)": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.decoderEnforceMaxConsecutiveEmptyDataFrames()": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.decoderEnforceMaxConsecutiveEmptyDataFrames(int maxConsecutiveEmptyFrames)": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.build()": {
                "lineStart": 127,
                "lineEnd": 153
            },
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder.build(Http2ConnectionDecoder decoder, Http2ConnectionEncoder encoder, Http2Settings initialSettings)": {
                "lineStart": 155,
                "lineEnd": 159
            }
        },
        "02515af175-Http2MultiplexCodecBuilder.java": {
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.<init>(boolean server, ChannelHandler childHandler)": {
                "lineStart": 10,
                "lineEnd": 14
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.checkSharable(ChannelHandler handler)": {
                "lineStart": 16,
                "lineEnd": 22
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.frameWriter(Http2FrameWriter frameWriter)": {
                "lineStart": 24,
                "lineEnd": 27
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.forClient(ChannelHandler childHandler)": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.forServer(ChannelHandler childHandler)": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.withUpgradeStreamHandler(ChannelHandler upgradeStreamHandler)": {
                "lineStart": 37,
                "lineEnd": 44
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.initialSettings()": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.initialSettings(Http2Settings settings)": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.gracefulShutdownTimeoutMillis()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.gracefulShutdownTimeoutMillis(long gracefulShutdownTimeoutMillis)": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.isServer()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.maxReservedStreams()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.maxReservedStreams(int maxReservedStreams)": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.isValidateHeaders()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.validateHeaders(boolean validateHeaders)": {
                "lineStart": 78,
                "lineEnd": 80
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.frameLogger()": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.frameLogger(Http2FrameLogger frameLogger)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.encoderEnforceMaxConcurrentStreams()": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.encoderEnforceMaxConcurrentStreams(boolean encoderEnforceMaxConcurrentStreams)": {
                "lineStart": 94,
                "lineEnd": 96
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.encoderEnforceMaxQueuedControlFrames()": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.encoderEnforceMaxQueuedControlFrames(int maxQueuedControlFrames)": {
                "lineStart": 102,
                "lineEnd": 104
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.headerSensitivityDetector()": {
                "lineStart": 106,
                "lineEnd": 108
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.headerSensitivityDetector(Http2HeadersEncoder.SensitivityDetector headerSensitivityDetector)": {
                "lineStart": 110,
                "lineEnd": 112
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.encoderIgnoreMaxHeaderListSize(boolean ignoreMaxHeaderListSize)": {
                "lineStart": 114,
                "lineEnd": 116
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.initialHuffmanDecodeCapacity(int initialHuffmanDecodeCapacity)": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.autoAckSettingsFrame(boolean autoAckSettings)": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.autoAckPingFrame(boolean autoAckPingFrame)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.decoupleCloseAndGoAway(boolean decoupleCloseAndGoAway)": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.flushPreface(boolean flushPreface)": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.decoderEnforceMaxConsecutiveEmptyDataFrames()": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.decoderEnforceMaxConsecutiveEmptyDataFrames(int maxConsecutiveEmptyFrames)": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.build()": {
                "lineStart": 146,
                "lineEnd": 172
            },
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder.build(Http2ConnectionDecoder decoder, Http2ConnectionEncoder encoder, Http2Settings initialSettings)": {
                "lineStart": 174,
                "lineEnd": 178
            }
        }
    },
    "CVE-2023-4218": {
        "40f88fcd06-JUnitModel.java": {
            "org.eclipse.jdt.internal.junit.model.JUnitModel.importTestRunSession(File file)": {
                "lineStart": 261,
                "lineEnd": 282
            },
            "org.eclipse.jdt.internal.junit.model.JUnitModel.importTestRunSession(String url, IProgressMonitor monitor)": {
                "lineStart": 284,
                "lineEnd": 341
            },
            "org.eclipse.jdt.internal.junit.model.JUnitModel.importIntoTestRunSession(File swapFile, TestRunSession testRunSession)": {
                "lineStart": 343,
                "lineEnd": 360
            },
            "org.eclipse.jdt.internal.junit.model.JUnitModel.exportTestRunSession(TestRunSession testRunSession, OutputStream out)": {
                "lineStart": 375,
                "lineEnd": 389
            }
        },
        "69efa9c50a-JarPackageReader.java": {
            "org.eclipse.jdt.internal.ui.jarpackager.JarPackageReader.readXML(JarPackageData jarPackage)": {
                "lineStart": 79,
                "lineEnd": 116
            }
        },
        "9c3d11750a-JarPackageWriter.java": {
            "org.eclipse.jdt.internal.ui.jarpackager.JarPackageWriter.writeXML(JarPackageData jarPackage)": {
                "lineStart": 55,
                "lineEnd": 92
            }
        },
        "977aaf8f03-FatJarRsrcUrlAntExporter.java": {
            "org.eclipse.jdt.internal.ui.jarpackagerfat.FatJarRsrcUrlAntExporter.buildANTScript(OutputStream outputStream, String projectName, IPath absJarfile, String mainClass, SourceInfo[] sourceInfos)": {
                "lineStart": 49,
                "lineEnd": 138
            }
        },
        "af9d84b4b0-UnpackFatJarAntExporter.java": {
            "org.eclipse.jdt.internal.ui.jarpackagerfat.UnpackFatJarAntExporter.buildANTScript(IPath antScriptLocation, String projectName, IPath absJarfile, String mainClass, SourceInfo[] sourceInfos)": {
                "lineStart": 24,
                "lineEnd": 96
            }
        },
        "a8fa23ebb2-UnpackJarAntExporter.java": {
            "org.eclipse.jdt.internal.ui.jarpackagerfat.UnpackJarAntExporter.buildANTScript(IPath antScriptLocation, String projectName, IPath absJarfile, String mainClass, SourceInfo[] sourceInfos)": {
                "lineStart": 25,
                "lineEnd": 123
            }
        },
        "0d75b2281f-JavadocReader.java": {
            "org.eclipse.jdt.internal.ui.javadocexport.JavadocReader.readXML()": {
                "lineStart": 28,
                "lineEnd": 61
            }
        },
        "41f9d3182f-JavadocWriter.java": {
            "org.eclipse.jdt.internal.ui.javadocexport.JavadocWriter.createXML(JavadocOptionsManager store)": {
                "lineStart": 37,
                "lineEnd": 57
            },
            "org.eclipse.jdt.internal.ui.javadocexport.JavadocWriter.writeDocument(Element javadocElement, String encoding, OutputStream outputStream)": {
                "lineStart": 59,
                "lineEnd": 68
            }
        },
        "a3a002c777-UserLibraryPreferencePage.java": {
            "org.eclipse.jdt.internal.ui.preferences.UserLibraryPreferencePage$LoadSaveDialog.saveLibraries(List<CPUserLibraryElement> libraries, File file, String encoding, IProgressMonitor monitor)": {
                "lineStart": 546,
                "lineEnd": 627
            },
            "org.eclipse.jdt.internal.ui.preferences.UserLibraryPreferencePage$LoadSaveDialog.loadLibraries(File file)": {
                "lineStart": 629,
                "lineEnd": 736
            }
        },
        "5a151d1052-ProfileStore.java": {
            "org.eclipse.jdt.internal.ui.preferences.formatter.ProfileStore.readProfilesFromStream(InputSource inputSource)": {
                "lineStart": 199,
                "lineEnd": 211
            },
            "org.eclipse.jdt.internal.ui.preferences.formatter.ProfileStore.writeProfilesToStream(Collection<Profile> profiles, OutputStream stream, String encoding, IProfileVersioner profileVersioner)": {
                "lineStart": 234,
                "lineEnd": 260
            }
        },
        "3a18c3cd1c-ContentAssistHistory.java": {
            "org.eclipse.jdt.internal.ui.text.java.ContentAssistHistory$ReaderWriter.store(ContentAssistHistory history, StreamResult result)": {
                "lineStart": 53,
                "lineEnd": 86
            },
            "org.eclipse.jdt.internal.ui.text.java.ContentAssistHistory$ReaderWriter.load(InputSource source)": {
                "lineStart": 88,
                "lineEnd": 142
            }
        },
        "0d584c8d3d-RefactoringSessionReader.java": {
            "org.eclipse.ltk.internal.core.refactoring.RefactoringSessionReader.readSession(final InputSource source)": {
                "lineStart": 54,
                "lineEnd": 88
            }
        },
        "06c250e11e-RefactoringSessionTransformer.java": {
            "org.eclipse.ltk.internal.core.refactoring.RefactoringSessionTransformer.beginRefactoring(final String id, long stamp, final String project, final String description, final String comment, final int flags)": {
                "lineStart": 51,
                "lineEnd": 111
            },
            "org.eclipse.ltk.internal.core.refactoring.RefactoringSessionTransformer.beginSession(final String comment, final String version)": {
                "lineStart": 113,
                "lineEnd": 139
            }
        },
        "5bf3f09b27-RefactoringHistoryManager.java": {
            "org.eclipse.ltk.internal.core.refactoring.history.RefactoringHistoryManager.getCachedDocument(final IPath path, final InputStream input)": {
                "lineStart": 645,
                "lineEnd": 655
            }
        }
    },
    "CVE-2022-22979": {
        "83f1867dc-BeanFactoryAwareFunctionRegistry.java": {
            "org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRegistry.lookup(Class<?> type, String functionDefinition, String... expectedOutputMimeTypes)": {
                "lineStart": 58,
                "lineEnd": 124
            }
        },
        "1091a471b-SimpleFunctionRegistry.java": {
            "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": {
                "lineStart": 200,
                "lineEnd": 234
            }
        }
    },
    "CVE-2020-1940": {
        "5a6f92fcae-UserAuthentication.java": {
            "org.apache.jackrabbit.oak.security.user.UserAuthentication.authenticate(@Nullable Credentials credentials)": {
                "lineStart": 52,
                "lineEnd": 95
            }
        }
    },
    "CVE-2023-29014": {
        "092a62620b-ActiveDocumentBean.java": {
            "io.goobi.viewer.managedbeans.ActiveDocumentBean.setLogid(String logid)": {
                "lineStart": 541,
                "lineEnd": 552
            },
            "io.goobi.viewer.managedbeans.ActiveDocumentBean.setImageToShow(String imageToShow)": {
                "lineStart": 521,
                "lineEnd": 532
            }
        }
    },
    "CVE-2022-31267": {
        "63e1015c-StoredUserConfig.java": {
            "com.gitblit.StoredUserConfig.escape(String value)": {
                "lineStart": 69,
                "lineEnd": 73
            }
        }
    },
    "CVE-2022-45693": {
        "fa5aadb-JSONArray.java": {
            "org.codehaus.jettison.json.JSONArray.<init>(Collection collection)": {
                "lineStart": 87,
                "lineEnd": 101
            },
            "org.codehaus.jettison.json.JSONArray.put(Collection value)": {
                "lineStart": 273,
                "lineEnd": 276
            },
            "org.codehaus.jettison.json.JSONArray.put(Map value)": {
                "lineStart": 295,
                "lineEnd": 298
            }
        },
        "0c15d74-JSONObject.java": {
            "org.codehaus.jettison.json.JSONObject.<init>(Map map)": {
                "lineStart": 122,
                "lineEnd": 136
            },
            "org.codehaus.jettison.json.JSONObject.quote(String string, boolean escapeForwardSlashAlways)": {
                "lineStart": 526,
                "lineEnd": 587
            }
        },
        "2a1164c-JSONTokener.java": {
            "org.codehaus.jettison.json.JSONTokener.newJSONObject()": {
                "lineStart": 308,
                "lineEnd": 310
            },
            "org.codehaus.jettison.json.JSONTokener.newJSONArray()": {
                "lineStart": 312,
                "lineEnd": 314
            }
        }
    },
    "CVE-2020-2321": {
        "3430bb7-ShelveProjectAction.java": {
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.<init>(Item item)": {
                "lineStart": 17,
                "lineEnd": 20
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.getIconFileName()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.getShelveIconPath()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.getDisplayName()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.getUrlName()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.getItem()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.isShelvingProject()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.doShelveProject()": {
                "lineStart": 46,
                "lineEnd": 54
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelveProjectAction.createRedirectToMainPage()": {
                "lineStart": 56,
                "lineEnd": 58
            }
        },
        "f95dc70-ShelvedProjectsAction.java": {
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getIconFileName()": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getUnshelveIconPath()": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getDisplayName()": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getUrlName()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getShelvedProjects()": {
                "lineStart": 51,
                "lineEnd": 88
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.sortProjectsAlphabetically(final List<ShelvedProject> projects)": {
                "lineStart": 90,
                "lineEnd": 98
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getShelvedProjectFromArchive(File archive)": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.getLegacyShelvedProjectFromArchive(File archive)": {
                "lineStart": 104,
                "lineEnd": 111
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.doManageShelvedProject(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 113,
                "lineEnd": 121
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.unshelveProject(StaplerRequest request)": {
                "lineStart": 123,
                "lineEnd": 133
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.deleteProject(StaplerRequest request)": {
                "lineStart": 135,
                "lineEnd": 145
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.formatDate(long timestamp)": {
                "lineStart": 147,
                "lineEnd": 150
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.createRedirectToShelvedProjectsPage()": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "org.jvnet.hudson.plugins.shelveproject.ShelvedProjectsAction.createRedirectToMainPage()": {
                "lineStart": 156,
                "lineEnd": 158
            }
        }
    },
    "CVE-2022-36537": {
        "b69b250140-AuDropUploader.java": {
            "org.zkoss.zk.au.http.AuDropUploader.service(HttpServletRequest request, HttpServletResponse response, String pathInfo)": {
                "lineStart": 61,
                "lineEnd": 122
            }
        },
        "de38cb74ee-AuUploader.java": {
            "org.zkoss.zk.au.http.AuUploader.service(HttpServletRequest request, HttpServletResponse response, String pathInfo)": {
                "lineStart": 69,
                "lineEnd": 190
            }
        }
    },
    "CVE-2023-30513": {
        "05bb0dee-SecretsMasker.java": {
            "org.csanchez.jenkins.plugins.kubernetes.pipeline.SecretsMasker.decorate(OutputStream logger)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "org.csanchez.jenkins.plugins.kubernetes.pipeline.SecretsMasker.<init>(Set<String> values)": {
                "lineStart": 39,
                "lineEnd": 42
            }
        }
    },
    "CVE-2024-28255": {
        "7c6b38079f-JwtFilter.java": {
            "org.openmetadata.service.security.JwtFilter.<init>()": {
                "lineStart": 49,
                "lineEnd": 49
            },
            "org.openmetadata.service.security.JwtFilter.<init>(AuthenticationConfiguration authenticationConfiguration, AuthorizerConfiguration authorizerConfiguration)": {
                "lineStart": 50,
                "lineEnd": 61
            },
            "org.openmetadata.service.security.JwtFilter.<init>(JwkProvider jwkProvider, List<String> jwtPrincipalClaims, String principalDomain, boolean enforcePrincipalDomain)": {
                "lineStart": 63,
                "lineEnd": 69
            },
            "org.openmetadata.service.security.JwtFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 71,
                "lineEnd": 101
            },
            "org.openmetadata.service.security.JwtFilter.validateAndReturnDecodedJwtToken(String token)": {
                "lineStart": 103,
                "lineEnd": 126
            },
            "org.openmetadata.service.security.JwtFilter.validateAndReturnUsername(Map<String, Claim> claims)": {
                "lineStart": 128,
                "lineEnd": 146
            },
            "org.openmetadata.service.security.JwtFilter.extractToken(MultivaluedMap<String, String> headers)": {
                "lineStart": 148,
                "lineEnd": 160
            },
            "org.openmetadata.service.security.JwtFilter.extractToken(String tokenFromHeader)": {
                "lineStart": 162,
                "lineEnd": 173
            },
            "org.openmetadata.service.security.JwtFilter.validateBotToken(String tokenFromHeader, String userName)": {
                "lineStart": 175,
                "lineEnd": 181
            },
            "org.openmetadata.service.security.JwtFilter.validatePersonalAccessToken(String tokenFromHeader, String userName)": {
                "lineStart": 183,
                "lineEnd": 189
            },
            "org.openmetadata.service.security.JwtFilter.validateTokenIsNotUsedAfterLogout(String authToken)": {
                "lineStart": 191,
                "lineEnd": 197
            }
        }
    },
    "CVE-2022-38663": {
        "d500d442-GitUsernamePasswordBinding.java": {
            "jenkins.plugins.git.GitUsernamePasswordBinding.setCredentialPairBindings(@NonNull StandardCredentials credentials, Map<String, String> publicValues, Map<String, String> secretValues)": {
                "lineStart": 82,
                "lineEnd": 92
            }
        }
    },
    "CVE-2023-45277": {
        "870ab3c4a-FileSystemBucket.java": {
            "org.yamcs.yarch.FileSystemBucket.putObject(String objectName, String contentType, Map<String, String> metadata, byte[] objectData)": {
                "lineStart": 125,
                "lineEnd": 172
            },
            "org.yamcs.yarch.FileSystemBucket.getObject(String objectName)": {
                "lineStart": 174,
                "lineEnd": 183
            },
            "org.yamcs.yarch.FileSystemBucket.deleteObject(String objectName)": {
                "lineStart": 185,
                "lineEnd": 188
            },
            "org.yamcs.yarch.FileSystemBucket.findObject(String objectName)": {
                "lineStart": 190,
                "lineEnd": 200
            }
        }
    },
    "CVE-2021-22053": {
        "2855c3016-HystrixDashboardController.java": {
            "org.springframework.cloud.netflix.hystrix.dashboard.HystrixDashboardController.monitor(@PathVariable String path, Model model, WebRequest request)": {
                "lineStart": 14,
                "lineEnd": 18
            }
        }
    },
    "CVE-2023-39913": {
        "37bf7665f-CasAnnotationViewerApplet.java": {
            "org.apache.uima.tools.viewer.CasAnnotationViewerApplet.init()": {
                "lineStart": 20,
                "lineEnd": 62
            },
            "org.apache.uima.tools.viewer.CasAnnotationViewerApplet.resizeTreeViewer()": {
                "lineStart": 64,
                "lineEnd": 73
            },
            "org.apache.uima.tools.viewer.CasAnnotationViewerApplet$MyComponentListener.componentResized(ComponentEvent e)": {
                "lineStart": 76,
                "lineEnd": 78
            }
        },
        "97eb953f3-CasTreeViewerApplet.java": {
            "org.apache.uima.tools.viewer.CasTreeViewerApplet.init()": {
                "lineStart": 20,
                "lineEnd": 54
            },
            "org.apache.uima.tools.viewer.CasTreeViewerApplet.resizeTreeViewer()": {
                "lineStart": 56,
                "lineEnd": 63
            },
            "org.apache.uima.tools.viewer.CasTreeViewerApplet$MyComponentListener.componentResized(ComponentEvent e)": {
                "lineStart": 66,
                "lineEnd": 68
            }
        }
    },
    "CVE-2023-33962": {
        "9288efce-Html.java": {
            "io.jstach.jstachio.escapers.Html.<init>()": {
                "lineStart": 8,
                "lineEnd": 9
            },
            "io.jstach.jstachio.escapers.Html.provider()": {
                "lineStart": 11,
                "lineEnd": 13
            },
            "io.jstach.jstachio.escapers.Html.of()": {
                "lineStart": 15,
                "lineEnd": 17
            }
        },
        "d426a7f5-HtmlEscaper.java": {
            "io.jstach.jstachio.escapers.HtmlEscaper.append(A a, CharSequence csq, int start, int end)": {
                "lineStart": 15,
                "lineEnd": 49
            },
            "io.jstach.jstachio.escapers.HtmlEscaper.append(A a, char c)": {
                "lineStart": 51,
                "lineEnd": 75
            }
        }
    },
    "CVE-2024-0758": {
        "5278f43-MarvinJSRenderer.java": {
            "de.ipb_halle.molecularfaces.component.molplugin.MarvinJSRenderer.encodeViewer(FacesContext context, ResponseWriter writer, MolPluginCore plugin)": {
                "lineStart": 45,
                "lineEnd": 49
            },
            "de.ipb_halle.molecularfaces.component.molplugin.MarvinJSRenderer.encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId)": {
                "lineStart": 51,
                "lineEnd": 56
            },
            "de.ipb_halle.molecularfaces.component.molplugin.MarvinJSRenderer.encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId)": {
                "lineStart": 58,
                "lineEnd": 81
            }
        },
        "2909d10-MolPaintJSRenderer.java": {
            "de.ipb_halle.molecularfaces.component.molplugin.MolPaintJSRenderer.encodeViewer(FacesContext context, ResponseWriter writer, MolPluginCore plugin)": {
                "lineStart": 44,
                "lineEnd": 48
            },
            "de.ipb_halle.molecularfaces.component.molplugin.MolPaintJSRenderer.encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId)": {
                "lineStart": 50,
                "lineEnd": 55
            },
            "de.ipb_halle.molecularfaces.component.molplugin.MolPaintJSRenderer.encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId)": {
                "lineStart": 57,
                "lineEnd": 75
            }
        },
        "007a43b-OpenChemLibJSRenderer.java": {
            "de.ipb_halle.molecularfaces.component.molplugin.OpenChemLibJSRenderer.encodeViewer(ResponseWriter writer, MolPluginCore plugin)": {
                "lineStart": 44,
                "lineEnd": 48
            },
            "de.ipb_halle.molecularfaces.component.molplugin.OpenChemLibJSRenderer.encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId)": {
                "lineStart": 50,
                "lineEnd": 55
            },
            "de.ipb_halle.molecularfaces.component.molplugin.OpenChemLibJSRenderer.encodeViewerJS(ResponseWriter writer, MolPluginCore plugin, String divId)": {
                "lineStart": 57,
                "lineEnd": 75
            }
        }
    },
    "CVE-2022-1231": {
        "38012d112f-UImageSvg.java": {
            "net.sourceforge.plantuml.ugraphic.UImageSvg.clean(String svg)": {
                "lineStart": 15,
                "lineEnd": 30
            }
        }
    },
    "CVE-2022-45347": {
        "c932276b15f-ServerPreparedStatementRegistry.java": {
            "org.apache.shardingsphere.proxy.backend.session.ServerPreparedStatementRegistry.addPreparedStatement(final Object statementId, final ServerPreparedStatement serverPreparedStatement)": {
                "lineStart": 6,
                "lineEnd": 8
            },
            "org.apache.shardingsphere.proxy.backend.session.ServerPreparedStatementRegistry.getPreparedStatement(final Object statementId)": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "org.apache.shardingsphere.proxy.backend.session.ServerPreparedStatementRegistry.removePreparedStatement(final Object statementId)": {
                "lineStart": 14,
                "lineEnd": 16
            }
        },
        "417cf8e71ce-MySQLCommandExecutorFactory.java": {
            "org.apache.shardingsphere.proxy.frontend.mysql.command.MySQLCommandExecutorFactory.newInstance(final MySQLCommandPacketType commandPacketType, final CommandPacket commandPacket, final ConnectionSession connectionSession)": {
                "lineStart": 33,
                "lineEnd": 61
            }
        },
        "0f6119e0526-MySQLCommandPacketFactory.java": {
            "org.apache.shardingsphere.proxy.frontend.mysql.command.MySQLCommandPacketFactory.newInstance(final MySQLCommandPacketType commandPacketType, final MySQLPacketPayload payload, final ConnectionSession connectionSession, final boolean sqlCommentParseEnabled)": {
                "lineStart": 23,
                "lineEnd": 51
            }
        }
    },
    "CVE-2024-31867": {
        "51c92c805-LdapRealm.java": {
            "org.apache.zeppelin.realm.LdapRealm.setUserSearchFilter(final String filter)": {
                "lineStart": 641,
                "lineEnd": 643
            },
            "org.apache.zeppelin.realm.LdapRealm.setGroupSearchFilter(final String filter)": {
                "lineStart": 649,
                "lineEnd": 651
            }
        }
    },
    "CVE-2020-1695": {
        "cdf11f8da3-ClientHeadersRequestFilter.java": {
            "org.jboss.resteasy.microprofile.client.header.ClientHeadersRequestFilter.filter(ClientRequestContext requestContext)": {
                "lineStart": 17,
                "lineEnd": 28
            }
        },
        "c79913d59e-ClientRequestContextUtils.java": {
            "org.jboss.resteasy.microprofile.client.utils.ClientRequestContextUtils.getMethod(ClientRequestContext requestContext)": {
                "lineStart": 7,
                "lineEnd": 14
            },
            "org.jboss.resteasy.microprofile.client.utils.ClientRequestContextUtils.<init>()": {
                "lineStart": 16,
                "lineEnd": 17
            }
        }
    },
    "CVE-2021-23937": {
        "b5d05444c3-WebClientInfo.java": {
            "org.apache.wicket.protocol.http.request.WebClientInfo.getRemoteAddr(RequestCycle requestCycle)": {
                "lineStart": 50,
                "lineEnd": 74
            }
        }
    },
    "CVE-2023-29215": {
        "2e77a14c0-SecurityUtils.java": {
            "org.apache.linkis.common.utils.SecurityUtils.checkJdbcSecurity(String url)": {
                "lineStart": 47,
                "lineEnd": 77
            },
            "org.apache.linkis.common.utils.SecurityUtils.checkJdbcSecurity(Map<String, Object> paramsMap)": {
                "lineStart": 79,
                "lineEnd": 119
            },
            "org.apache.linkis.common.utils.SecurityUtils.parseParamsMapToMysqlParamUrl(Map<String, Object> forceParams)": {
                "lineStart": 121,
                "lineEnd": 127
            },
            "org.apache.linkis.common.utils.SecurityUtils.appendMysqlForceParams(String url)": {
                "lineStart": 24,
                "lineEnd": 41
            },
            "org.apache.linkis.common.utils.SecurityUtils.appendMysqlForceParams(Map<String, Object> extraParams)": {
                "lineStart": 43,
                "lineEnd": 45
            }
        },
        "73fdf1ada-ConnectionManager.java": {
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.getJdbcUrl(Map<String, String> properties)": {
                "lineStart": 224,
                "lineEnd": 234
            },
            "org.apache.linkis.manager.engineplugin.jdbc.ConnectionManager.getJdbcAuthType(Map<String, String> properties)": {
                "lineStart": 253,
                "lineEnd": 257
            }
        },
        "d4ddee737-JdbcParamUtils.java": {
            "org.apache.linkis.manager.engineplugin.jdbc.utils.JdbcParamUtils.validateJdbcUrl(String url)": {
                "lineStart": 34,
                "lineEnd": 39
            },
            "org.apache.linkis.manager.engineplugin.jdbc.utils.JdbcParamUtils.filterJdbcUrl(String url)": {
                "lineStart": 41,
                "lineEnd": 55
            }
        },
        "b5a3a54fa-SqlConnection.java": {
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.<init>(String host, Integer port, String username, String password, String database, Map<String, Object> extraParams)": {
                "lineStart": 22,
                "lineEnd": 28
            },
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.validateParams(Map<String, Object> extraParams)": {
                "lineStart": 30,
                "lineEnd": 39
            },
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.getDBConnection(ConnectMessage connectMessage, String database)": {
                "lineStart": 157,
                "lineEnd": 170
            }
        }
    },
    "CVE-2021-3856": {
        "82ad64a584-ClassLoaderTheme.java": {
            "org.keycloak.theme.ClassLoaderTheme.getResourceAsStream(String path)": {
                "lineStart": 70,
                "lineEnd": 72
            }
        },
        "6af4073f2d-ClasspathThemeResourceProviderFactory.java": {
            "org.keycloak.theme.ClasspathThemeResourceProviderFactory.getResourceAsStream(String path)": {
                "lineStart": 32,
                "lineEnd": 34
            }
        }
    },
    "CVE-2024-25603": {
        "5ec4a8ca90ca6-DDMFormValuesJSONDeserializer.java": {
            "com.liferay.dynamic.data.mapping.internal.io.DDMFormValuesJSONDeserializer.getDDMFormFieldValue(JSONObject jsonObject, Map<String, DDMFormField> ddmFormFieldsMap)": {
                "lineStart": 83,
                "lineEnd": 91
            }
        }
    },
    "CVE-2020-1744": {
        "6f00c23c1f-AuthenticationProcessor.java": {
            "org.keycloak.authentication.AuthenticationProcessor.logFailure()": {
                "lineStart": 515,
                "lineEnd": 530
            }
        },
        "a19b2efc05-AuthenticationManager.java": {
            "org.keycloak.services.managers.AuthenticationManager.logSuccess(KeycloakSession session, AuthenticationSessionModel authSession)": {
                "lineStart": 1072,
                "lineEnd": 1088
            }
        }
    },
    "CVE-2022-22946": {
        "0254ebda-GatewayAutoConfiguration.java": {
            "org.springframework.cloud.gateway.config.GatewayAutoConfiguration$NettyConfiguration.gatewayHttpClient(HttpClientProperties properties, ServerProperties serverProperties, List<HttpClientCustomizer> customizers)": {
                "lineStart": 476,
                "lineEnd": 570
            },
            "org.springframework.cloud.gateway.config.GatewayAutoConfiguration$NettyConfiguration.buildConnectionProvider(HttpClientProperties properties)": {
                "lineStart": 572,
                "lineEnd": 603
            }
        },
        "f0e2490f-HttpClientProperties.java": {
            "org.springframework.cloud.gateway.config.HttpClientProperties.getConnectTimeout()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setConnectTimeout(Integer connectTimeout)": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getResponseTimeout()": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setResponseTimeout(Duration responseTimeout)": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getMaxHeaderSize()": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setMaxHeaderSize(DataSize maxHeaderSize)": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getMaxInitialLineLength()": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setMaxInitialLineLength(DataSize maxInitialLineLength)": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getPool()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setPool(Pool pool)": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getProxy()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setProxy(Proxy proxy)": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getSsl()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setSsl(Ssl ssl)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.getWebsocket()": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setWebsocket(Websocket websocket)": {
                "lineStart": 97,
                "lineEnd": 99
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.isWiretap()": {
                "lineStart": 101,
                "lineEnd": 103
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setWiretap(boolean wiretap)": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.isCompression()": {
                "lineStart": 109,
                "lineEnd": 111
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.setCompression(boolean compression)": {
                "lineStart": 113,
                "lineEnd": 115
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties.toString()": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getType()": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setType(PoolType type)": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getName()": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setName(String name)": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getMaxConnections()": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setMaxConnections(Integer maxConnections)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getAcquireTimeout()": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setAcquireTimeout(Long acquireTimeout)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getMaxIdleTime()": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setMaxIdleTime(Duration maxIdleTime)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getMaxLifeTime()": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setMaxLifeTime(Duration maxLifeTime)": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.getEvictionInterval()": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setEvictionInterval(Duration evictionInterval)": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.isMetrics()": {
                "lineStart": 186,
                "lineEnd": 188
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.setMetrics(boolean metrics)": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Pool.toString()": {
                "lineStart": 194,
                "lineEnd": 196
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.getType()": {
                "lineStart": 209,
                "lineEnd": 211
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.setType(ProxyProvider.Proxy type)": {
                "lineStart": 213,
                "lineEnd": 215
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.getHost()": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.setHost(String host)": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.getPort()": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.setPort(Integer port)": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.getUsername()": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.setUsername(String username)": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.getPassword()": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.setPassword(String password)": {
                "lineStart": 245,
                "lineEnd": 247
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.getNonProxyHostsPattern()": {
                "lineStart": 249,
                "lineEnd": 251
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.setNonProxyHostsPattern(String nonProxyHostsPattern)": {
                "lineStart": 253,
                "lineEnd": 255
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Proxy.toString()": {
                "lineStart": 257,
                "lineEnd": 259
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getKeyStorePassword()": {
                "lineStart": 275,
                "lineEnd": 277
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setKeyStorePassword(String keyStorePassword)": {
                "lineStart": 279,
                "lineEnd": 281
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getKeyStoreType()": {
                "lineStart": 283,
                "lineEnd": 285
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setKeyStoreType(String keyStoreType)": {
                "lineStart": 287,
                "lineEnd": 289
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getKeyStoreProvider()": {
                "lineStart": 291,
                "lineEnd": 293
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setKeyStoreProvider(String keyStoreProvider)": {
                "lineStart": 295,
                "lineEnd": 297
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getKeyStore()": {
                "lineStart": 299,
                "lineEnd": 301
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setKeyStore(String keyStore)": {
                "lineStart": 303,
                "lineEnd": 305
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getKeyPassword()": {
                "lineStart": 307,
                "lineEnd": 309
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setKeyPassword(String keyPassword)": {
                "lineStart": 311,
                "lineEnd": 313
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getTrustedX509Certificates()": {
                "lineStart": 315,
                "lineEnd": 317
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setTrustedX509Certificates(List<String> trustedX509)": {
                "lineStart": 319,
                "lineEnd": 321
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getTrustedX509CertificatesForTrustManager()": {
                "lineStart": 323,
                "lineEnd": 347
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getKeyManagerFactory()": {
                "lineStart": 349,
                "lineEnd": 369
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.createKeyStore()": {
                "lineStart": 371,
                "lineEnd": 390
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.isUseInsecureTrustManager()": {
                "lineStart": 392,
                "lineEnd": 394
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setUseInsecureTrustManager(boolean useInsecureTrustManager)": {
                "lineStart": 396,
                "lineEnd": 398
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getHandshakeTimeout()": {
                "lineStart": 400,
                "lineEnd": 402
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setHandshakeTimeout(Duration handshakeTimeout)": {
                "lineStart": 404,
                "lineEnd": 406
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getCloseNotifyFlushTimeout()": {
                "lineStart": 408,
                "lineEnd": 410
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setCloseNotifyFlushTimeout(Duration closeNotifyFlushTimeout)": {
                "lineStart": 412,
                "lineEnd": 414
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getCloseNotifyReadTimeout()": {
                "lineStart": 416,
                "lineEnd": 418
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setCloseNotifyReadTimeout(Duration closeNotifyReadTimeout)": {
                "lineStart": 420,
                "lineEnd": 422
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.getDefaultConfigurationType()": {
                "lineStart": 424,
                "lineEnd": 426
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.setDefaultConfigurationType(SslProvider.DefaultConfigurationType defaultConfigurationType)": {
                "lineStart": 428,
                "lineEnd": 430
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Ssl.toString()": {
                "lineStart": 432,
                "lineEnd": 434
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Websocket.getMaxFramePayloadLength()": {
                "lineStart": 441,
                "lineEnd": 443
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Websocket.setMaxFramePayloadLength(Integer maxFramePayloadLength)": {
                "lineStart": 445,
                "lineEnd": 447
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Websocket.isProxyPing()": {
                "lineStart": 449,
                "lineEnd": 451
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Websocket.setProxyPing(boolean proxyPing)": {
                "lineStart": 453,
                "lineEnd": 455
            },
            "org.springframework.cloud.gateway.config.HttpClientProperties$Websocket.toString()": {
                "lineStart": 457,
                "lineEnd": 459
            }
        }
    },
    "CVE-2022-0219": {
        "e11ebb4f-ExportGradleProject.java": {
            "jadx.core.export.ExportGradleProject.parseXml(String xmlContent)": {
                "lineStart": 127,
                "lineEnd": 138
            }
        }
    },
    "CVE-2023-28857": {
        "28b1f4f1269-LdaptiveResourceCRLFetcher.java": {
            "org.apereo.cas.adaptors.x509.authentication.ldap.LdaptiveResourceCRLFetcher.prepareConnectionFactory(final String ldapURL)": {
                "lineStart": 98,
                "lineEnd": 102
            }
        }
    },
    "CVE-2021-29052": {
        "43f3f9ed16100-DataDefinitionResourceImpl.java": {
            "com.liferay.data.engine.rest.internal.resource.v2_0.DataDefinitionResourceImpl.getSiteDataDefinitionByContentTypeByDataDefinitionKey(Long siteId, String contentType, String dataDefinitionKey)": {
                "lineStart": 183,
                "lineEnd": 185
            }
        }
    },
    "CVE-2022-37422": {
        "eeba97837d-GFLauncher.java": {
            "com.sun.enterprise.admin.launcher.GFLauncher.setup()": {
                "lineStart": 108,
                "lineEnd": 166
            },
            "com.sun.enterprise.admin.launcher.GFLauncher.setJvmOptions()": {
                "lineStart": 510,
                "lineEnd": 517
            },
            "com.sun.enterprise.admin.launcher.GFLauncher.getJvmOptions()": {
                "lineStart": 519,
                "lineEnd": 521
            },
            "com.sun.enterprise.admin.launcher.GFLauncher.setClasspath()": {
                "lineStart": 593,
                "lineEnd": 608
            }
        }
    },
    "CVE-2022-23620": {
        "0b9af4e39b9-AbstractSxExportURLFactoryActionHandler.java": {
            "org.xwiki.skinx.internal.AbstractSxExportURLFactoryActionHandler.createURL(String spaces, String name, String queryString, String anchor, String wikiId, XWikiContext context, FilesystemExportContext exportContext)": {
                "lineStart": 35,
                "lineEnd": 50
            },
            "org.xwiki.skinx.internal.AbstractSxExportURLFactoryActionHandler.processSx(List<String> spaceNames, String name, String queryString, XWikiContext context, FilesystemExportContext exportContext)": {
                "lineStart": 52,
                "lineEnd": 89
            },
            "org.xwiki.skinx.internal.AbstractSxExportURLFactoryActionHandler.getContent(SxSource sxSource, FilesystemExportContext exportContext)": {
                "lineStart": 91,
                "lineEnd": 103
            }
        }
    },
    "CVE-2023-51785": {
        "29823947b-StarRocksDataNodeDTO.java": {
            "org.apache.inlong.manager.pojo.node.starrocks.StarRocksDataNodeDTO.getFromRequest(StarRocksDataNodeRequest request, String extParams)": {
                "lineStart": 18,
                "lineEnd": 21
            },
            "org.apache.inlong.manager.pojo.node.starrocks.StarRocksDataNodeDTO.getFromJson(@NotNull String extParams)": {
                "lineStart": 23,
                "lineEnd": 31
            }
        },
        "983d5da3e-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 147,
                "lineEnd": 188
            }
        },
        "24cf88ee6-StarRocksDataNodeOperator.java": {
            "org.apache.inlong.manager.service.node.starrocks.StarRocksDataNodeOperator.testConnection(DataNodeRequest request)": {
                "lineStart": 61,
                "lineEnd": 76
            }
        }
    },
    "CVE-2022-40146": {
        "e64c29c9c-DefaultScriptSecurity.java": {
            "org.apache.batik.bridge.DefaultScriptSecurity.<init>(String scriptType, ParsedURL scriptURL, ParsedURL docURL)": {
                "lineStart": 15,
                "lineEnd": 31
            }
        }
    },
    "CVE-2022-31139": {
        "033cc32-Root.java": {
            "io.github.karlatemp.unsafeaccessor.Root.throw0(Throwable throwable)": {
                "lineStart": 139,
                "lineEnd": 144
            }
        },
        "7685b68-UnsafeAccess.java": {
            "io.github.karlatemp.unsafeaccessor.UnsafeAccess.getInstance()": {
                "lineStart": 6,
                "lineEnd": 9
            }
        }
    },
    "CVE-2022-24823": {
        "8532046366-PlatformDependent.java": {
            "io.netty.util.internal.PlatformDependent.createTempFile(String prefix, String suffix, File directory)": {
                "lineStart": 1135,
                "lineEnd": 1153
            }
        }
    },
    "CVE-2020-2287": {
        "53425af-AuditTrailFilter.java": {
            "hudson.plugins.audit_trail.AuditTrailFilter.doFilter(ServletRequest request, ServletResponse res, FilterChain chain)": {
                "lineStart": 36,
                "lineEnd": 68
            }
        }
    },
    "CVE-2022-28139": {
        "21484bf-RocketChatNotifier.java": {
            "jenkins.plugins.rocketchatnotifier.RocketChatNotifier$DescriptorImpl.doTestConnection(@QueryParameter(\"rocketServerUrl\") final String rocketServerUrl, @QueryParameter(\"trustSSL\") final String trustSSL, @QueryParameter(\"username\") final String username, @QueryParameter(\"password\") final String password, @QueryParameter(\"channel\") final String channel, @QueryParameter(\"buildServerUrl\") final String buildServerUrl, @QueryParameter(\"webhookToken\") final String token, @QueryParameter(\"webhookTokenCredentialId\") final String webhookTokenCredentialId)": {
                "lineStart": 542,
                "lineEnd": 613
            }
        }
    },
    "CVE-2020-27782": {
        "a13b082f4-PathResourceManager.java": {
            "io.undertow.server.handlers.resource.PathResourceManager.getResource(final String p)": {
                "lineStart": 162,
                "lineEnd": 223
            }
        }
    },
    "CVE-2023-47798": {
        "beaae385cab88-UpdatePasswordMyAccountMVCActionCommand.java": {
            "com.liferay.users.admin.web.internal.portlet.action.UpdatePasswordMyAccountMVCActionCommand.authenticateUser(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 26,
                "lineEnd": 63
            }
        }
    },
    "CVE-2022-25897": {
        "6525fa111-OpcUaServerConfigLimits.java": {
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxSessionCount()": {
                "lineStart": 9,
                "lineEnd": 11
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxSessionTimeout()": {
                "lineStart": 13,
                "lineEnd": 15
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMinPublishingInterval()": {
                "lineStart": 17,
                "lineEnd": 19
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxPublishingInterval()": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getDefaultPublishingInterval()": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMinSubscriptionLifetime()": {
                "lineStart": 29,
                "lineEnd": 31
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxSubscriptionLifetime()": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxSupportedSampleRate()": {
                "lineStart": 37,
                "lineEnd": 39
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxPasswordLength()": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxMonitoredItems()": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMinSupportedSampleRate()": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxArrayLength()": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxStringLength()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxByteStringLength()": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxBrowseContinuationPoints()": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxQueryContinuationPoints()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxHistoryContinuationPoints()": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerRead()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerWrite()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxMonitoredItemsPerCall()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerRegisterNodes()": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerHistoryReadData()": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerHistoryReadEvents()": {
                "lineStart": 97,
                "lineEnd": 99
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerHistoryUpdateData()": {
                "lineStart": 101,
                "lineEnd": 103
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerHistoryUpdateEvents()": {
                "lineStart": 105,
                "lineEnd": 107
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerMethodCall()": {
                "lineStart": 109,
                "lineEnd": 111
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerBrowse()": {
                "lineStart": 113,
                "lineEnd": 115
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerTranslateBrowsePathsToNodeIds()": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "org.eclipse.milo.opcua.sdk.server.api.config.OpcUaServerConfigLimits.getMaxNodesPerNodeManagement()": {
                "lineStart": 121,
                "lineEnd": 123
            }
        },
        "1ab724208-SubscriptionManager.java": {
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.createMonitoredItems(ServiceRequest service)": {
                "lineStart": 232,
                "lineEnd": 284
            },
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.createSubscription(ServiceRequest service)": {
                "lineStart": 131,
                "lineEnd": 157
            },
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.deleteSubscription(ServiceRequest service)": {
                "lineStart": 173,
                "lineEnd": 209
            },
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.deleteMonitoredItems(ServiceRequest service)": {
                "lineStart": 648,
                "lineEnd": 685
            },
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.sessionClosed(boolean deleteSubscriptions)": {
                "lineStart": 855,
                "lineEnd": 882
            },
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.addSubscription(Subscription subscription)": {
                "lineStart": 884,
                "lineEnd": 901
            },
            "org.eclipse.milo.opcua.sdk.server.subscriptions.SubscriptionManager.removeSubscription(UInteger subscriptionId)": {
                "lineStart": 903,
                "lineEnd": 911
            }
        }
    },
    "CVE-2024-4536": {
        "4f80082d3-DataPlaneHttpOauth2Extension.java": {
            "org.eclipse.edc.connector.dataplane.http.oauth2.DataPlaneHttpOauth2Extension.initialize(ServiceExtensionContext context)": {
                "lineStart": 23,
                "lineEnd": 28
            }
        }
    },
    "CVE-2023-42268": {
        "1bac4432-CommonUtils.java": {
            "org.jeecg.common.util.CommonUtils.uploadOnlineImage(byte[] data, String basePath, String bizPath, String uploadType)": {
                "lineStart": 33,
                "lineEnd": 67
            },
            "org.jeecg.common.util.CommonUtils.getFileName(String fileName)": {
                "lineStart": 69,
                "lineEnd": 81
            },
            "org.jeecg.common.util.CommonUtils.ifContainChinese(String str)": {
                "lineStart": 83,
                "lineEnd": 96
            },
            "org.jeecg.common.util.CommonUtils.upload(MultipartFile file, String bizPath, String uploadType)": {
                "lineStart": 98,
                "lineEnd": 114
            },
            "org.jeecg.common.util.CommonUtils.uploadLocal(MultipartFile mf, String bizPath, String uploadpath)": {
                "lineStart": 116,
                "lineEnd": 159
            },
            "org.jeecg.common.util.CommonUtils.upload(MultipartFile file, String bizPath, String uploadType, String customBucket)": {
                "lineStart": 161,
                "lineEnd": 177
            },
            "org.jeecg.common.util.CommonUtils.getDatabaseType()": {
                "lineStart": 181,
                "lineEnd": 195
            },
            "org.jeecg.common.util.CommonUtils.getDatabaseTypeEnum()": {
                "lineStart": 197,
                "lineEnd": 212
            },
            "org.jeecg.common.util.CommonUtils.getDataSourceProperty(String sourceKey)": {
                "lineStart": 214,
                "lineEnd": 219
            },
            "org.jeecg.common.util.CommonUtils.getDataSourceConnect(String sourceKey)": {
                "lineStart": 221,
                "lineEnd": 239
            },
            "org.jeecg.common.util.CommonUtils.getDatabaseTypeByDataSource(DataSource dataSource)": {
                "lineStart": 241,
                "lineEnd": 278
            },
            "org.jeecg.common.util.CommonUtils.getBaseUrl(HttpServletRequest request)": {
                "lineStart": 280,
                "lineEnd": 306
            },
            "org.jeecg.common.util.CommonUtils.mergeJSON(JSONObject target, JSONObject... sources)": {
                "lineStart": 308,
                "lineEnd": 314
            },
            "org.jeecg.common.util.CommonUtils.mergeJSON(JSONObject target, JSONObject source)": {
                "lineStart": 316,
                "lineEnd": 334
            }
        },
        "8e466eca-SysDictServiceImpl.java": {
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.duplicateCheckData(DuplicateCheckVo duplicateCheckVo)": {
                "lineStart": 45,
                "lineEnd": 77
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictItemsByCode(String code)": {
                "lineStart": 79,
                "lineEnd": 83
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryEnableDictItemsByCode(String code)": {
                "lineStart": 85,
                "lineEnd": 89
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictItemsByCodeList(List<String> dictCodeList)": {
                "lineStart": 91,
                "lineEnd": 101
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllDictItems()": {
                "lineStart": 103,
                "lineEnd": 130
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictTextByKey(String code, String key)": {
                "lineStart": 132,
                "lineEnd": 136
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryManyDictByKeys(List<String> dictCodeList, List<String> keys)": {
                "lineStart": 138,
                "lineEnd": 149
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictItemsByCode(String tableFilterSql, String text, String code)": {
                "lineStart": 151,
                "lineEnd": 176
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictItemsByCodeAndFilter(String table, String text, String code, String filterSql)": {
                "lineStart": 178,
                "lineEnd": 193
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictTextByKey(String table, String text, String code, String key)": {
                "lineStart": 195,
                "lineEnd": 216
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictTextByKeys(String table, String text, String code, List<String> codeValues)": {
                "lineStart": 218,
                "lineEnd": 238
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictByKeys(String table, String text, String code, String keys)": {
                "lineStart": 240,
                "lineEnd": 248
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictByKeys(String table, String text, String code, String codeValuesStr, boolean delNotExist)": {
                "lineStart": 250,
                "lineEnd": 288
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.deleteByDictId(SysDict sysDict)": {
                "lineStart": 290,
                "lineEnd": 293
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.saveMain(SysDict sysDict, List<SysDictItem> sysDictItemList)": {
                "lineStart": 295,
                "lineEnd": 319
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllDepartBackDictModel()": {
                "lineStart": 321,
                "lineEnd": 323
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllUserBackDictModel()": {
                "lineStart": 325,
                "lineEnd": 327
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryLittleTableDictItems(String table, String text, String code, String condition, String keyword, int pageSize)": {
                "lineStart": 329,
                "lineEnd": 338
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.getFilterSql(String table, String text, String code, String condition, String keyword)": {
                "lineStart": 340,
                "lineEnd": 390
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllTableDictItems(String table, String text, String code, String condition, String keyword)": {
                "lineStart": 392,
                "lineEnd": 399
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTreeList(Map<String, String> query, String table, String text, String code, String pidField, String pid, String hasChildField, int converIsLeafVal)": {
                "lineStart": 401,
                "lineEnd": 425
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.deleteOneDictPhysically(String id)": {
                "lineStart": 427,
                "lineEnd": 430
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.updateDictDelFlag(int delFlag, String id)": {
                "lineStart": 432,
                "lineEnd": 434
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDeleteList()": {
                "lineStart": 436,
                "lineEnd": 438
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictTablePageList(DictQuery query, int pageSize, int pageNo)": {
                "lineStart": 440,
                "lineEnd": 457
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.getDictItems(String dictCode)": {
                "lineStart": 459,
                "lineEnd": 491
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.loadDict(String dictCode, String keyword, Integer pageSize)": {
                "lineStart": 493,
                "lineEnd": 532
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.getDictListByLowAppId(String lowAppId)": {
                "lineStart": 534,
                "lineEnd": 547
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.addDictByLowAppId(SysDictVo sysDictVo)": {
                "lineStart": 549,
                "lineEnd": 552
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.editDictByLowAppId(SysDictVo sysDictVo)": {
                "lineStart": 554,
                "lineEnd": 570
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.addDict(String dictName, String lowAppId)": {
                "lineStart": 572,
                "lineEnd": 580
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.addDictItem(String id, List<SysDictItem> dictItemList)": {
                "lineStart": 582,
                "lineEnd": 595
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.updateDictItem(String id, List<SysDictItem> dictItemList)": {
                "lineStart": 597,
                "lineEnd": 602
            }
        }
    },
    "CVE-2023-2422": {
        "4c986bc4f4-X509ClientAuthenticator.java": {
            "org.keycloak.authentication.authenticators.client.X509ClientAuthenticator.authenticateClient(ClientAuthenticationFlowContext context)": {
                "lineStart": 48,
                "lineEnd": 140
            }
        },
        "a90ee089d9-MutualTLSUtils.java": {
            "org.keycloak.testsuite.util.MutualTLSUtils.newCloseableHttpClientWithDefaultKeyStoreAndTrustStore()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.newCloseableHttpClientWithOtherKeyStoreAndTrustStore()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.newCloseableHttpClientWithOBBKeyStoreAndTrustStore()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.newCloseableHttpClientWithoutKeyStoreAndTrustStore()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.newCloseableHttpClient(String keyStorePath, String keyStorePassword, String trustStorePath, String trustStorePassword)": {
                "lineStart": 42,
                "lineEnd": 69
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.getThumbprintFromDefaultClientCert()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.getThumbprintFromOtherClientCert()": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.getThumbprintFromClientCert(String keyStorePath, String keyStorePassword)": {
                "lineStart": 79,
                "lineEnd": 108
            },
            "org.keycloak.testsuite.util.MutualTLSUtils.executeUserInfoRequestInGetMethod(String accessToken, boolean isKeystoreUsed, String keystorePath, String keystorePassward)": {
                "lineStart": 110,
                "lineEnd": 141
            }
        }
    },
    "CVE-2020-5206": {
        "d6b9dbc5f3-SecurityServiceSpringImpl.java": {
            "org.opencastproject.kernel.security.SecurityServiceSpringImpl.getUser()": {
                "lineStart": 33,
                "lineEnd": 84
            }
        }
    },
    "CVE-2023-33942": {
        "9df6db10b9ebd-AssetEntryItemDescriptor.java": {
            "com.liferay.asset.browser.web.internal.item.selector.AssetEntryItemDescriptor.getTitle(Locale locale)": {
                "lineStart": 70,
                "lineEnd": 72
            }
        }
    },
    "CVE-2020-8920": {
        "82fce53d0e-ProjectControl.java": {
            "com.google.gerrit.server.permissions.ProjectControl.<init>(@GitUploadPackGroups Set<AccountGroup.UUID> uploadGroups, @GitReceivePackGroups Set<AccountGroup.UUID> receiveGroups, PermissionCollection.Factory permissionFilter, ChangeControl.Factory changeControlFactory, PermissionBackend permissionBackend, RefVisibilityControl refVisibilityControl, GitRepositoryManager repositoryManager, DefaultRefFilter.Factory refFilterFactory, @Assisted CurrentUser who, @Assisted ProjectState ps)": {
                "lineStart": 64,
                "lineEnd": 76
            },
            "com.google.gerrit.server.permissions.ProjectControl.allRefsAreVisible(Set<String> ignore)": {
                "lineStart": 144,
                "lineEnd": 146
            }
        }
    },
    "CVE-2021-38294": {
        "27f637ad5-Config.java": {
            "org.apache.storm.Config.setClasspath(Map<String, Object> conf, String cp)": {
                "lineStart": 361,
                "lineEnd": 363
            },
            "org.apache.storm.Config.setEnvironment(Map<String, Object> conf, Map<String, Object> env)": {
                "lineStart": 365,
                "lineEnd": 367
            },
            "org.apache.storm.Config.setDebug(Map<String, Object> conf, boolean isOn)": {
                "lineStart": 369,
                "lineEnd": 371
            },
            "org.apache.storm.Config.setTopologyVersion(Map<String, Object> conf, String version)": {
                "lineStart": 373,
                "lineEnd": 375
            },
            "org.apache.storm.Config.setNumWorkers(Map<String, Object> conf, int workers)": {
                "lineStart": 377,
                "lineEnd": 379
            },
            "org.apache.storm.Config.setNumAckers(Map<String, Object> conf, int numExecutors)": {
                "lineStart": 381,
                "lineEnd": 383
            },
            "org.apache.storm.Config.setNumEventLoggers(Map<String, Object> conf, int numExecutors)": {
                "lineStart": 385,
                "lineEnd": 387
            },
            "org.apache.storm.Config.setMessageTimeoutSecs(Map<String, Object> conf, int secs)": {
                "lineStart": 389,
                "lineEnd": 391
            },
            "org.apache.storm.Config.registerSerialization(Map<String, Object> conf, Class klass)": {
                "lineStart": 393,
                "lineEnd": 395
            },
            "org.apache.storm.Config.registerSerialization(Map<String, Object> conf, Class klass, Class<? extends Serializer> serializerClass)": {
                "lineStart": 397,
                "lineEnd": 401
            },
            "org.apache.storm.Config.registerEventLogger(Map<String, Object> conf, Class<? extends IEventLogger> klass, Map<String, Object> argument)": {
                "lineStart": 403,
                "lineEnd": 414
            },
            "org.apache.storm.Config.registerEventLogger(Map<String, Object> conf, Class<? extends IEventLogger> klass)": {
                "lineStart": 416,
                "lineEnd": 418
            },
            "org.apache.storm.Config.registerMetricsConsumer(Map<String, Object> conf, Class klass, Object argument, long parallelismHint)": {
                "lineStart": 420,
                "lineEnd": 432
            },
            "org.apache.storm.Config.registerMetricsConsumer(Map<String, Object> conf, Class klass, long parallelismHint)": {
                "lineStart": 434,
                "lineEnd": 436
            },
            "org.apache.storm.Config.registerMetricsConsumer(Map<String, Object> conf, Class klass)": {
                "lineStart": 438,
                "lineEnd": 440
            },
            "org.apache.storm.Config.registerDecorator(Map<String, Object> conf, Class<? extends IKryoDecorator> klass)": {
                "lineStart": 442,
                "lineEnd": 444
            },
            "org.apache.storm.Config.setKryoFactory(Map<String, Object> conf, Class<? extends IKryoFactory> klass)": {
                "lineStart": 446,
                "lineEnd": 448
            },
            "org.apache.storm.Config.setSkipMissingKryoRegistrations(Map<String, Object> conf, boolean skip)": {
                "lineStart": 450,
                "lineEnd": 452
            },
            "org.apache.storm.Config.setMaxTaskParallelism(Map<String, Object> conf, int max)": {
                "lineStart": 454,
                "lineEnd": 456
            },
            "org.apache.storm.Config.setMaxSpoutPending(Map<String, Object> conf, int max)": {
                "lineStart": 458,
                "lineEnd": 460
            },
            "org.apache.storm.Config.setStatsSampleRate(Map<String, Object> conf, double rate)": {
                "lineStart": 462,
                "lineEnd": 464
            },
            "org.apache.storm.Config.setFallBackOnJavaSerialization(Map<String, Object> conf, boolean fallback)": {
                "lineStart": 466,
                "lineEnd": 468
            },
            "org.apache.storm.Config.getRegisteredSerializations(Map<String, Object> conf)": {
                "lineStart": 470,
                "lineEnd": 481
            },
            "org.apache.storm.Config.getRegisteredDecorators(Map<String, Object> conf)": {
                "lineStart": 483,
                "lineEnd": 494
            },
            "org.apache.storm.Config.setClasspath(String cp)": {
                "lineStart": 496,
                "lineEnd": 498
            },
            "org.apache.storm.Config.setEnvironment(Map<String, Object> env)": {
                "lineStart": 500,
                "lineEnd": 502
            },
            "org.apache.storm.Config.setDebug(boolean isOn)": {
                "lineStart": 504,
                "lineEnd": 506
            },
            "org.apache.storm.Config.setTopologyVersion(String version)": {
                "lineStart": 508,
                "lineEnd": 510
            },
            "org.apache.storm.Config.setNumWorkers(int workers)": {
                "lineStart": 512,
                "lineEnd": 514
            },
            "org.apache.storm.Config.setNumAckers(int numExecutors)": {
                "lineStart": 516,
                "lineEnd": 518
            },
            "org.apache.storm.Config.setNumEventLoggers(int numExecutors)": {
                "lineStart": 520,
                "lineEnd": 522
            },
            "org.apache.storm.Config.setMessageTimeoutSecs(int secs)": {
                "lineStart": 524,
                "lineEnd": 526
            },
            "org.apache.storm.Config.registerSerialization(Class klass)": {
                "lineStart": 528,
                "lineEnd": 530
            },
            "org.apache.storm.Config.registerSerialization(Class klass, Class<? extends Serializer> serializerClass)": {
                "lineStart": 532,
                "lineEnd": 534
            },
            "org.apache.storm.Config.registerEventLogger(Class<? extends IEventLogger> klass, Map<String, Object> argument)": {
                "lineStart": 536,
                "lineEnd": 538
            },
            "org.apache.storm.Config.registerEventLogger(Class<? extends IEventLogger> klass)": {
                "lineStart": 540,
                "lineEnd": 542
            },
            "org.apache.storm.Config.registerMetricsConsumer(Class klass, Object argument, long parallelismHint)": {
                "lineStart": 544,
                "lineEnd": 546
            },
            "org.apache.storm.Config.registerMetricsConsumer(Class klass, long parallelismHint)": {
                "lineStart": 548,
                "lineEnd": 550
            },
            "org.apache.storm.Config.registerMetricsConsumer(Class klass)": {
                "lineStart": 552,
                "lineEnd": 554
            },
            "org.apache.storm.Config.registerDecorator(Class<? extends IKryoDecorator> klass)": {
                "lineStart": 556,
                "lineEnd": 558
            },
            "org.apache.storm.Config.setKryoFactory(Class<? extends IKryoFactory> klass)": {
                "lineStart": 560,
                "lineEnd": 562
            },
            "org.apache.storm.Config.setSkipMissingKryoRegistrations(boolean skip)": {
                "lineStart": 564,
                "lineEnd": 566
            },
            "org.apache.storm.Config.setMaxTaskParallelism(int max)": {
                "lineStart": 568,
                "lineEnd": 570
            },
            "org.apache.storm.Config.setMaxSpoutPending(int max)": {
                "lineStart": 572,
                "lineEnd": 574
            },
            "org.apache.storm.Config.setStatsSampleRate(double rate)": {
                "lineStart": 576,
                "lineEnd": 578
            },
            "org.apache.storm.Config.setFallBackOnJavaSerialization(boolean fallback)": {
                "lineStart": 580,
                "lineEnd": 582
            },
            "org.apache.storm.Config.setTopologyWorkerMaxHeapSize(Number size)": {
                "lineStart": 584,
                "lineEnd": 589
            },
            "org.apache.storm.Config.setTopologyComponentWorkerConstraints(String component1, String component2)": {
                "lineStart": 591,
                "lineEnd": 598
            },
            "org.apache.storm.Config.setTopologyConstraintsMaxStateSearch(int numStates)": {
                "lineStart": 600,
                "lineEnd": 602
            },
            "org.apache.storm.Config.setTopologyPriority(int priority)": {
                "lineStart": 604,
                "lineEnd": 606
            },
            "org.apache.storm.Config.setTopologyStrategy(String strategy)": {
                "lineStart": 608,
                "lineEnd": 610
            },
            "org.apache.storm.Config.substituteHostnameInPrincipal(String principal)": {
                "lineStart": 613,
                "lineEnd": 623
            },
            "org.apache.storm.Config.getBlobstoreHDFSPrincipal(Map conf)": {
                "lineStart": 625,
                "lineEnd": 627
            },
            "org.apache.storm.Config.getHdfsPrincipal(Map<String, Object> conf)": {
                "lineStart": 629,
                "lineEnd": 649
            },
            "org.apache.storm.Config.getHdfsKeytab(Map<String, Object> conf)": {
                "lineStart": 651,
                "lineEnd": 671
            }
        },
        "e1741abbc-Nimbus.java": {
            "org.apache.storm.daemon.nimbus.Nimbus.normalizeConf(Map<String, Object> conf, Map<String, Object> topoConf, StormTopology topology)": {
                "lineStart": 1008,
                "lineEnd": 1058
            }
        }
    },
    "CVE-2023-46244": {
        "0d62797ae4f-AbstractDocumentTitleDisplayer.java": {
            "org.xwiki.display.internal.AbstractDocumentTitleDisplayer.displayTitle(DocumentModelBridge document, DocumentDisplayerParameters parameters)": {
                "lineStart": 72,
                "lineEnd": 104
            },
            "org.xwiki.display.internal.AbstractDocumentTitleDisplayer.evaluateTitle(String title, DocumentReference documentReference, DocumentDisplayerParameters parameters)": {
                "lineStart": 118,
                "lineEnd": 154
            }
        }
    },
    "CVE-2023-25826": {
        "bf321e85-GraphHandler.java": {
            "net.opentsdb.tsd.GraphHandler.setPlotDimensions(final HttpQuery query, final Plot plot)": {
                "lineStart": 499,
                "lineEnd": 534
            },
            "net.opentsdb.tsd.GraphHandler.setPlotParams(final HttpQuery query, final Plot plot)": {
                "lineStart": 562,
                "lineEnd": 683
            }
        }
    },
    "CVE-2020-24591": {
        "c60af623ca-CarbonEventPublisherService.java": {
            "org.wso2.carbon.event.publisher.core.internal.CarbonEventPublisherService.editEventPublisherConfiguration(String filename, String eventPublisherConfigurationXml, String originalEventPublisherName)": {
                "lineStart": 560,
                "lineEnd": 594
            }
        },
        "1193e7953c-EventPublisherUtil.java": {
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.generateFilePath(String eventPublisherName, String repositoryPath)": {
                "lineStart": 31,
                "lineEnd": 62
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getImportedStreamIdFrom(EventPublisherConfiguration eventPublisherConfiguration)": {
                "lineStart": 64,
                "lineEnd": 71
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getAxisConfiguration()": {
                "lineStart": 73,
                "lineEnd": 83
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getSize(Event event)": {
                "lineStart": 85,
                "lineEnd": 90
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getSize(org.wso2.carbon.databridge.commons.Event event)": {
                "lineStart": 92,
                "lineEnd": 113
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getSize(Map<String, String> arbitraryDataMap)": {
                "lineStart": 115,
                "lineEnd": 127
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getSize(Object[] objects)": {
                "lineStart": 129,
                "lineEnd": 158
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getSize(String value)": {
                "lineStart": 160,
                "lineEnd": 173
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.convertToSiddhiEvent(org.wso2.carbon.databridge.commons.Event inputEvent, int inputStreamSize)": {
                "lineStart": 175,
                "lineEnd": 203
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.validateStreamDefinitionWithOutputProperties(String actualMappingText, Map<String, Integer> propertyPositionMap, Map<String, Object> arbitraryDataMap)": {
                "lineStart": 205,
                "lineEnd": 214
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.getOutputMappingPropertyList(String mappingText)": {
                "lineStart": 216,
                "lineEnd": 235
            },
            "org.wso2.carbon.event.publisher.core.internal.util.EventPublisherUtil.validateFilePath(String fileName)": {
                "lineStart": 237,
                "lineEnd": 242
            }
        },
        "b0739faddd-CarbonEventReceiverService.java": {
            "org.wso2.carbon.event.receiver.core.internal.CarbonEventReceiverService.editEventReceiverConfiguration(String filename, String eventReceiverConfigurationXml, String originalEventReceiverName)": {
                "lineStart": 518,
                "lineEnd": 552
            }
        },
        "06d904ce52-EventReceiverUtil.java": {
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getConvertedAttributeObject(String value, AttributeType type)": {
                "lineStart": 30,
                "lineEnd": 46
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getExportedStreamIdFrom(EventReceiverConfiguration eventReceiverConfiguration)": {
                "lineStart": 48,
                "lineEnd": 55
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.isMetaAttribute(String attributeName)": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.isCorrelationAttribute(String attributeName)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getOrderedAttributeArray(InputMapping inputMapping)": {
                "lineStart": 65,
                "lineEnd": 75
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.sortInputMappingAttributes(List<InputMappingAttribute> inputMappingAttributes)": {
                "lineStart": 77,
                "lineEnd": 99
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.generateFilePath(String eventReceiverName, String repositoryPath)": {
                "lineStart": 101,
                "lineEnd": 132
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.streamDefinitionToAttributeArray(StreamDefinition streamDefinition)": {
                "lineStart": 134,
                "lineEnd": 175
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getAttributePosition(String attributeName, StreamDefinition streamDefinition)": {
                "lineStart": 177,
                "lineEnd": 232
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getSize(Event event)": {
                "lineStart": 234,
                "lineEnd": 255
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getSize(Object[] objects)": {
                "lineStart": 257,
                "lineEnd": 286
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getSize(String value)": {
                "lineStart": 288,
                "lineEnd": 301
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getSize(Map<String, String> arbitraryDataMap)": {
                "lineStart": 303,
                "lineEnd": 315
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getMappedInputStreamAttributeName(String toStreamAttributeName, InputMapping inputMapping)": {
                "lineStart": 317,
                "lineEnd": 326
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.getEventFromArray(Object[] outObjArray, StreamDefinition outStreamDefinition, Object[] metaDataArray, Object[] correlationDataArray, Object[] payloadDataArray)": {
                "lineStart": 328,
                "lineEnd": 346
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.validateFilePath(String fileName)": {
                "lineStart": 348,
                "lineEnd": 353
            },
            "org.wso2.carbon.event.receiver.core.internal.util.EventReceiverUtil.convertToAttributeType(String attributeValue, Class beanClass)": {
                "lineStart": 355,
                "lineEnd": 373
            }
        }
    },
    "CVE-2020-5398": {
        "ac77d45c7e-ContentDisposition.java": {
            "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename)": {
                "lineStart": 380,
                "lineEnd": 383
            }
        }
    },
    "CVE-2023-46655": {
        "d649447-ElectricFlowClient.java": {
            "org.jenkinsci.plugins.electricflow.ElectricFlowClient.uploadArtifact(List<File> fileList, String uploadWorkspace, String repo, String name, String version, boolean uploadDirectory)": {
                "lineStart": 312,
                "lineEnd": 352
            }
        },
        "d778228-FileHelper.java": {
            "org.jenkinsci.plugins.electricflow.FileHelper.getFilesFromDirectory(final File folder)": {
                "lineStart": 81,
                "lineEnd": 96
            },
            "org.jenkinsci.plugins.electricflow.FileHelper.getFilesFromDirectoryWildcardDirScanner(String includePattern, boolean fullPath, String fullPathValue)": {
                "lineStart": 98,
                "lineEnd": 120
            },
            "org.jenkinsci.plugins.electricflow.FileHelper.__deleteDirectory(File dir)": {
                "lineStart": 174,
                "lineEnd": 184
            }
        }
    },
    "CVE-2020-1929": {
        "4bdbbf40b42-MongoDbIO.java": {
            "org.apache.beam.sdk.io.mongodb.MongoDbIO.getOptions(int maxConnectionIdleTime, boolean sslEnabled, boolean sslInvalidHostNameAllowed)": {
                "lineStart": 169,
                "lineEnd": 177
            },
            "org.apache.beam.sdk.io.mongodb.MongoDbIO$BoundedMongoDbSource.getEstimatedSizeBytes(PipelineOptions pipelineOptions)": {
                "lineStart": 198,
                "lineEnd": 203
            },
            "org.apache.beam.sdk.io.mongodb.MongoDbIO$BoundedMongoDbSource.split(long desiredBundleSizeBytes, PipelineOptions options)": {
                "lineStart": 213,
                "lineEnd": 276
            },
            "org.apache.beam.sdk.io.mongodb.MongoDbIO$BoundedMongoDbReader.createClient(Read spec)": {
                "lineStart": 416,
                "lineEnd": 418
            },
            "org.apache.beam.sdk.io.mongodb.MongoDbIO$Write$WriteFn.createMongoClient()": {
                "lineStart": 518,
                "lineEnd": 520
            }
        },
        "2a5314e3153-SSLUtils.java": {
            "org.apache.beam.sdk.io.mongodb.SSLUtils.ignoreSSLCertificate()": {
                "lineStart": 21,
                "lineEnd": 39
            }
        }
    },
    "CVE-2022-29047": {
        "3c372a5-LibraryStep.java": {
            "org.jenkinsci.plugins.workflow.libs.LibraryStep$Execution.run()": {
                "lineStart": 118,
                "lineEnd": 186
            }
        },
        "886ab34-MultibranchScmRevisionVerifier.java": {
            "org.jenkinsci.plugins.workflow.libs.MultibranchScmRevisionVerifier.verify(Run<?, ?> run, TaskListener listener, SCM libraryScm, String name)": {
                "lineStart": 17,
                "lineEnd": 50
            }
        }
    },
    "CVE-2023-1428": {
        "3318dfb83-LoadReportClient.java": {
            "io.grpc.xds.LoadReportClient.startLrsRpc()": {
                "lineStart": 111,
                "lineEnd": 127
            },
            "io.grpc.xds.LoadReportClient$LrsStream.handleRpcResponse(List<String> clusters, boolean sendAllClusters, long loadReportIntervalNano)": {
                "lineStart": 139,
                "lineEnd": 161
            },
            "io.grpc.xds.LoadReportClient$LrsStream.handleRpcError(Throwable t)": {
                "lineStart": 163,
                "lineEnd": 165
            },
            "io.grpc.xds.LoadReportClient$LrsStream.handleRpcCompleted()": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "io.grpc.xds.LoadReportClient$LrsStreamV3.start()": {
                "lineStart": 254,
                "lineEnd": 296
            },
            "io.grpc.xds.LoadReportClient$LrsStreamV3.sendLoadStatsRequest(List<ClusterStats> clusterStatsList)": {
                "lineStart": 298,
                "lineEnd": 308
            },
            "io.grpc.xds.LoadReportClient$LrsStreamV3.sendError(Exception error)": {
                "lineStart": 310,
                "lineEnd": 313
            }
        }
    },
    "CVE-2021-32700": {
        "74909654992-Pull.java": {
            "org.ballerinalang.cli.module.Pull.execute(String url, String modulePathInBaloCache, String moduleNameWithOrg, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild, boolean isNightlyBuild, String langSpecVersion, String platform)": {
                "lineStart": 37,
                "lineEnd": 79
            },
            "org.ballerinalang.cli.module.Pull.createBaloInHomeRepo(HttpURLConnection conn, String modulePathInBaloCache, String moduleNameWithOrg, boolean isNightlyBuild, String newUrl, String contentDisposition)": {
                "lineStart": 81,
                "lineEnd": 105
            },
            "org.ballerinalang.cli.module.Pull.writeBaloFile(HttpURLConnection conn, Path baloPath, String fullModuleName, long resContentLength)": {
                "lineStart": 107,
                "lineEnd": 115
            },
            "org.ballerinalang.cli.module.Pull.handleErrorResponse(HttpURLConnection conn, String url, String moduleFullName)": {
                "lineStart": 174,
                "lineEnd": 189
            }
        },
        "bb85319bf49-Push.java": {
            "org.ballerinalang.cli.module.Push.execute(String url, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword, String accessToken, String orgName, String moduleName, String version, Path baloPath)": {
                "lineStart": 35,
                "lineEnd": 64
            },
            "org.ballerinalang.cli.module.Push.handleResponse(HttpURLConnection conn, String orgName, String moduleName, String version)": {
                "lineStart": 66,
                "lineEnd": 107
            }
        },
        "cd96cc0b6d7-Search.java": {
            "org.ballerinalang.cli.module.Search.execute(String url, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword, String terminalWidth)": {
                "lineStart": 27,
                "lineEnd": 34
            },
            "org.ballerinalang.cli.module.Search.handleResponse(HttpURLConnection conn, int statusCode, String terminalWidth)": {
                "lineStart": 36,
                "lineEnd": 84
            }
        },
        "cc9d3bd937b-TokenUpdater.java": {
            "org.ballerinalang.cli.module.TokenUpdater$TokenUpdateHandler.handle(HttpExchange httpExchange)": {
                "lineStart": 39,
                "lineEnd": 93
            }
        },
        "d2f35b2293f-Utils.java": {
            "org.ballerinalang.cli.module.util.Utils.initializeSsl()": {
                "lineStart": 60,
                "lineEnd": 70
            },
            "org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection(URL url, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword)": {
                "lineStart": 72,
                "lineEnd": 87
            },
            "org.ballerinalang.cli.module.util.Utils.setRequestMethod(HttpURLConnection conn, RequestMethod method)": {
                "lineStart": 89,
                "lineEnd": 97
            },
            "org.ballerinalang.cli.module.util.Utils.getStatusCode(HttpURLConnection conn)": {
                "lineStart": 110,
                "lineEnd": 118
            }
        },
        "f46c1f04041-URIDryConverter.java": {
            "org.wso2.ballerinalang.compiler.packaging.converters.URIDryConverter.<init>(URI base, Map<PackageID, Manifest> dependencyManifests, boolean isBuild)": {
                "lineStart": 55,
                "lineEnd": 67
            },
            "org.wso2.ballerinalang.compiler.packaging.converters.URIDryConverter.finalize(URI remoteURI, PackageID moduleID)": {
                "lineStart": 69,
                "lineEnd": 124
            }
        },
        "9242650bccf-CodeGenerator.java": {
            "org.ballerinalang.openapi.CodeGenerator.generate(GenType type, String executionPath, String definitionPath, String reldefinitionPath, String serviceName, String outPath)": {
                "lineStart": 45,
                "lineEnd": 75
            },
            "org.ballerinalang.openapi.CodeGenerator.generateClient(String executionPath, String definitionPath, String serviceName, String outPath)": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.ballerinalang.openapi.CodeGenerator.generateService(String executionPath, String definitionPath, String reldefinitionPath, String serviceName, String outPath)": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "org.ballerinalang.openapi.CodeGenerator.generateBalSource(GenType type, String definitionPath, String reldefinitionPath, String serviceName)": {
                "lineStart": 85,
                "lineEnd": 124
            },
            "org.ballerinalang.openapi.CodeGenerator.writeBallerina(Object object, String templateDir, String templateName, String outPath)": {
                "lineStart": 126,
                "lineEnd": 141
            },
            "org.ballerinalang.openapi.CodeGenerator.compileTemplate(String defaultTemplateDir, String templateName)": {
                "lineStart": 143,
                "lineEnd": 178
            },
            "org.ballerinalang.openapi.CodeGenerator.writeGeneratedSources(List<GenSrcFile> sources, Path srcPath, Path implPath, GenType type)": {
                "lineStart": 180,
                "lineEnd": 230
            },
            "org.ballerinalang.openapi.CodeGenerator.generateClient(BallerinaOpenApi context)": {
                "lineStart": 232,
                "lineEnd": 244
            },
            "org.ballerinalang.openapi.CodeGenerator.generateBallerinaService(BallerinaOpenApiType api)": {
                "lineStart": 246,
                "lineEnd": 259
            },
            "org.ballerinalang.openapi.CodeGenerator.getContent(BallerinaOpenApiType object, String templateDir, String templateName)": {
                "lineStart": 261,
                "lineEnd": 265
            },
            "org.ballerinalang.openapi.CodeGenerator.getContent(BallerinaOpenApi object, String templateDir, String templateName)": {
                "lineStart": 267,
                "lineEnd": 271
            },
            "org.ballerinalang.openapi.CodeGenerator.getSrcPackage()": {
                "lineStart": 273,
                "lineEnd": 275
            },
            "org.ballerinalang.openapi.CodeGenerator.setSrcPackage(String srcPackage)": {
                "lineStart": 277,
                "lineEnd": 279
            },
            "org.ballerinalang.openapi.CodeGenerator.getModelPackage()": {
                "lineStart": 281,
                "lineEnd": 283
            },
            "org.ballerinalang.openapi.CodeGenerator.setModelPackage(String modelPackage)": {
                "lineStart": 285,
                "lineEnd": 287
            }
        }
    },
    "CVE-2020-13933": {
        "0c777ac78-CookieRememberMeManager.java": {
            "org.apache.shiro.web.mgt.CookieRememberMeManager.getRememberedSerializedIdentity(SubjectContext subjectContext)": {
                "lineStart": 65,
                "lineEnd": 101
            }
        }
    },
    "CVE-2021-34538": {
        "2cc057ee6e-AuthorizationPreEventListener.java": {
            "org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener.onEvent(PreEventContext context)": {
                "lineStart": 79,
                "lineEnd": 136
            }
        },
        "cd68cbe0c3-HiveMetaStore.java": {
            "org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.create_function(Function func)": {
                "lineStart": 6463,
                "lineEnd": 6501
            },
            "org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.drop_function(String dbName, String funcName)": {
                "lineStart": 6503,
                "lineEnd": 6545
            },
            "org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.alter_function(String dbName, String funcName, Function newFunc)": {
                "lineStart": 6547,
                "lineEnd": 6564
            }
        },
        "b93675fd5d-PreEventContext.java": {
            "org.apache.hadoop.hive.metastore.events.PreEventContext.<init>(PreEventType eventType, IHMSHandler handler)": {
                "lineStart": 10,
                "lineEnd": 13
            },
            "org.apache.hadoop.hive.metastore.events.PreEventContext.getEventType()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.apache.hadoop.hive.metastore.events.PreEventContext.getHandler()": {
                "lineStart": 19,
                "lineEnd": 21
            }
        }
    },
    "CVE-2020-2309": {
        "b0a5d3ab-KubectlBuildWrapper.java": {
            "org.csanchez.jenkins.plugins.kubernetes.KubectlBuildWrapper$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Item item, @QueryParameter String serverUrl)": {
                "lineStart": 116,
                "lineEnd": 121
            }
        }
    },
    "CVE-2021-37304": {
        "b31f5389-ShiroConfig.java": {
            "org.jeecg.config.shiro.ShiroConfig.shiroFilter(SecurityManager securityManager)": {
                "lineStart": 38,
                "lineEnd": 114
            }
        }
    },
    "CVE-2024-22263": {
        "0d993368e-PackageService.java": {
            "org.springframework.cloud.skipper.server.service.PackageService.upload(UploadRequest uploadRequest)": {
                "lineStart": 163,
                "lineEnd": 204
            },
            "org.springframework.cloud.skipper.server.service.PackageService.validateUploadRequest(UploadRequest uploadRequest)": {
                "lineStart": 219,
                "lineEnd": 240
            }
        }
    },
    "CVE-2023-32731": {
        "f6b82775f-AbstractXdsClient.java": {
            "io.grpc.xds.AbstractXdsClient$AbstractAdsStream.handleRpcCompleted()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "io.grpc.xds.AbstractXdsClient$AbstractAdsStream.handleRpcStreamClosed(Status error)": {
                "lineStart": 233,
                "lineEnd": 250
            },
            "io.grpc.xds.AbstractXdsClient$AdsStreamV3.start()": {
                "lineStart": 277,
                "lineEnd": 331
            },
            "io.grpc.xds.AbstractXdsClient.readyHandler()": {
                "lineStart": 151,
                "lineEnd": 157
            }
        },
        "e7ed64aea-XdsClientImpl.java": {
            "io.grpc.xds.XdsClientImpl$ResourceSubscriber.<init>(XdsResourceType<T> type, String resource)": {
                "lineStart": 430,
                "lineEnd": 449
            }
        }
    },
    "CVE-2022-32065": {
        "60e9dd9b-SysProfileController.java": {
            "com.ruoyi.web.controller.system.SysProfileController.updateAvatar(@RequestParam(\"avatarfile\") MultipartFile file)": {
                "lineStart": 111,
                "lineEnd": 133
            }
        },
        "8954bbb1-InvalidExtensionException.java": {
            "com.ruoyi.common.exception.file.InvalidExtensionException.<init>(String[] allowedExtension, String extension, String filename)": {
                "lineStart": 9,
                "lineEnd": 14
            }
        }
    },
    "CVE-2023-34340": {
        "211f2b031b-Shell.java": {
            "org.apache.accumulo.shell.Shell.config(String... args)": {
                "lineStart": 218,
                "lineEnd": 374
            },
            "org.apache.accumulo.shell.Shell.execCommand(String input, boolean ignoreAuthTimeout, boolean echoPrompt)": {
                "lineStart": 608,
                "lineEnd": 720
            },
            "org.apache.accumulo.shell.Shell.updateUser(String principal, AuthenticationToken token)": {
                "lineStart": 1045,
                "lineEnd": 1062
            }
        },
        "827e563706-ShellOptionsJC.java": {
            "org.apache.accumulo.shell.ShellOptionsJC.getPassword()": {
                "lineStart": 79,
                "lineEnd": 81
            }
        }
    },
    "CVE-2023-20862": {
        "310bf0c516-SwitchUserFilter.java": {
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.afterPropertiesSet()": {
                "lineStart": 68,
                "lineEnd": 84
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)": {
                "lineStart": 90,
                "lineEnd": 123
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.attemptSwitchUser(HttpServletRequest request)": {
                "lineStart": 125,
                "lineEnd": 138
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.attemptExitUser(HttpServletRequest request)": {
                "lineStart": 140,
                "lineEnd": 163
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.createSwitchUserToken(HttpServletRequest request, UserDetails targetUser)": {
                "lineStart": 165,
                "lineEnd": 179
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.getCurrentAuthentication(HttpServletRequest request)": {
                "lineStart": 181,
                "lineEnd": 190
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.getSourceAuthentication(Authentication current)": {
                "lineStart": 192,
                "lineEnd": 204
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.requiresExitUser(HttpServletRequest request)": {
                "lineStart": 206,
                "lineEnd": 208
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.requiresSwitchUser(HttpServletRequest request)": {
                "lineStart": 210,
                "lineEnd": 212
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setApplicationEventPublisher(ApplicationEventPublisher eventPublisher)": {
                "lineStart": 214,
                "lineEnd": 216
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource)": {
                "lineStart": 218,
                "lineEnd": 221
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setMessageSource(MessageSource messageSource)": {
                "lineStart": 223,
                "lineEnd": 226
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setUserDetailsService(UserDetailsService userDetailsService)": {
                "lineStart": 228,
                "lineEnd": 230
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setExitUserUrl(String exitUserUrl)": {
                "lineStart": 232,
                "lineEnd": 235
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setExitUserMatcher(RequestMatcher exitUserMatcher)": {
                "lineStart": 237,
                "lineEnd": 240
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSwitchUserUrl(String switchUserUrl)": {
                "lineStart": 242,
                "lineEnd": 245
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSwitchUserMatcher(RequestMatcher switchUserMatcher)": {
                "lineStart": 247,
                "lineEnd": 250
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setTargetUrl(String targetUrl)": {
                "lineStart": 252,
                "lineEnd": 254
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSuccessHandler(AuthenticationSuccessHandler successHandler)": {
                "lineStart": 256,
                "lineEnd": 259
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSwitchFailureUrl(String switchFailureUrl)": {
                "lineStart": 261,
                "lineEnd": 264
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setFailureHandler(AuthenticationFailureHandler failureHandler)": {
                "lineStart": 266,
                "lineEnd": 269
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSwitchUserAuthorityChanger(SwitchUserAuthorityChanger switchUserAuthorityChanger)": {
                "lineStart": 271,
                "lineEnd": 273
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setUserDetailsChecker(UserDetailsChecker userDetailsChecker)": {
                "lineStart": 275,
                "lineEnd": 277
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setUsernameParameter(String usernameParameter)": {
                "lineStart": 279,
                "lineEnd": 281
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSwitchAuthorityRole(String switchAuthorityRole)": {
                "lineStart": 283,
                "lineEnd": 286
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.setSecurityContextRepository(SecurityContextRepository securityContextRepository)": {
                "lineStart": 288,
                "lineEnd": 291
            },
            "org.springframework.security.web.authentication.switchuser.SwitchUserFilter.createMatcher(String pattern)": {
                "lineStart": 293,
                "lineEnd": 295
            }
        }
    },
    "CVE-2023-40743": {
        "33054a557-ServiceFactory.java": {
            "org.apache.axis.client.ServiceFactory.getService(Map environment)": {
                "lineStart": 42,
                "lineEnd": 83
            }
        }
    },
    "CVE-2022-31167": {
        "c2c1166a185-DefaultSecurityCache.java": {
            "org.xwiki.security.authorization.cache.internal.DefaultSecurityCache.getEntryKey(SecurityReference reference)": {
                "lineStart": 331,
                "lineEnd": 333
            },
            "org.xwiki.security.authorization.cache.internal.DefaultSecurityCache.getEntryKey(UserSecurityReference userReference, SecurityReference reference)": {
                "lineStart": 335,
                "lineEnd": 337
            },
            "org.xwiki.security.authorization.cache.internal.DefaultSecurityCache.getShadowEntryKey(SecurityReference userReference, SecurityReference root)": {
                "lineStart": 339,
                "lineEnd": 341
            }
        }
    },
    "CVE-2022-37022": {
        "6d721ab103-ManagementAgent.java": {
            "org.apache.geode.management.internal.ManagementAgent.<init>(DistributionConfig config, InternalCache cache)": {
                "lineStart": 79,
                "lineEnd": 83
            },
            "org.apache.geode.management.internal.ManagementAgent.startAgent()": {
                "lineStart": 89,
                "lineEnd": 102
            }
        },
        "1d36426fab-SystemManagementService.java": {
            "org.apache.geode.management.internal.SystemManagementService.newSystemManagementService(InternalCacheForClientAccess cache, Function<ManagementResourceRepo, NotificationHub> notificationHubFactory, Function<SystemManagementService, LocalManager> localManagerFactory, FederatingManagerFactory federatingManagerFactory, BiFunction<DistributionConfig, InternalCacheForClientAccess, ManagementAgent> managementAgentFactory)": {
                "lineStart": 76,
                "lineEnd": 79
            },
            "org.apache.geode.management.internal.SystemManagementService.<init>(InternalCacheForClientAccess cache, Function<ManagementResourceRepo, NotificationHub> notificationHubFactory, Function<SystemManagementService, LocalManager> localManagerFactory, FederatingManagerFactory federatingManagerFactory, BiFunction<DistributionConfig, InternalCacheForClientAccess, ManagementAgent> managementAgentFactory)": {
                "lineStart": 81,
                "lineEnd": 104
            }
        }
    },
    "CVE-2024-1233": {
        "3d23a845fe-ElytronMessages.java": {
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmFailedToObtainPrincipal(@Cause Throwable cause)": {
                "lineStart": 17,
                "lineEnd": 18
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmOAuth2TokenIntrospectionFailed(@Cause Throwable cause)": {
                "lineStart": 19,
                "lineEnd": 20
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmFailedToObtainPrincipalWithClaim(String claimName)": {
                "lineStart": 21,
                "lineEnd": 22
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtInvalidFormat()": {
                "lineStart": 23,
                "lineEnd": 24
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtParseFailed(@Cause Throwable cause)": {
                "lineStart": 25,
                "lineEnd": 26
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtSignatureCheckFailed(@Cause Throwable cause)": {
                "lineStart": 27,
                "lineEnd": 28
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtSignatureInvalidAlgorithm(String algorithm)": {
                "lineStart": 29,
                "lineEnd": 30
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtInvalidPublicKeyPem()": {
                "lineStart": 31,
                "lineEnd": 32
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtWarnNoIssuerIgnoringIssuerCheck()": {
                "lineStart": 33,
                "lineEnd": 35
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtWarnNoAudienceIgnoringAudienceCheck()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtWarnNoPublicKeyIgnoringSignatureCheck()": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.unableToFetchJwks(String url)": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwtNoSSLIgnoringJku()": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.tokenRealmJwkMissingClaim(String claim)": {
                "lineStart": 48,
                "lineEnd": 49
            },
            "org.wildfly.security.auth.realm.token._private.ElytronMessages.avoidingFetchJwks(URL url, long timestamp)": {
                "lineStart": 50,
                "lineEnd": 52
            }
        },
        "cf4a8a80ef-JwkManager.java": {
            "org.wildfly.security.auth.realm.token.validator.JwkManager.<init>(SSLContext sslContext, HostnameVerifier hostnameVerifier, long updateTimeout, int connectionTimeout, int readTimeout, int minTimeBetweenRequests)": {
                "lineStart": 34,
                "lineEnd": 41
            }
        },
        "adcea12fb4-JwtValidator.java": {
            "org.wildfly.security.auth.realm.token.validator.JwtValidator.<init>(Builder configuration)": {
                "lineStart": 46,
                "lineEnd": 72
            },
            "org.wildfly.security.auth.realm.token.validator.JwtValidator.resolvePublicKey(JsonObject headers)": {
                "lineStart": 247,
                "lineEnd": 288
            }
        }
    },
    "CVE-2021-31522": {
        "98edb14226-QueryService.java": {
            "org.apache.kylin.rest.service.QueryService.setParam(PreparedStatement preparedState, int index, PrepareSqlRequest.StateParam param)": {
                "lineStart": 1083,
                "lineEnd": 1141
            }
        }
    },
    "CVE-2020-13922": {
        "8ccbff1e2f-AccessTokenService.java": {
            "org.apache.dolphinscheduler.api.service.AccessTokenService.createToken(User loginUser, int userId, String expireTime, String token)": {
                "lineStart": 38,
                "lineEnd": 63
            },
            "org.apache.dolphinscheduler.api.service.AccessTokenService.delAccessTokenById(User loginUser, int id)": {
                "lineStart": 78,
                "lineEnd": 99
            },
            "org.apache.dolphinscheduler.api.service.AccessTokenService.updateToken(User loginUser, int id, int userId, String expireTime, String token)": {
                "lineStart": 101,
                "lineEnd": 121
            }
        }
    },
    "CVE-2023-28867": {
        "4eea193f-ParserOptions.java": {
            "graphql.parser.ParserOptions.getDefaultParserOptions()": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "graphql.parser.ParserOptions.setDefaultParserOptions(ParserOptions options)": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "graphql.parser.ParserOptions.getDefaultOperationParserOptions()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "graphql.parser.ParserOptions.setDefaultOperationParserOptions(ParserOptions options)": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "graphql.parser.ParserOptions.getDefaultSdlParserOptions()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "graphql.parser.ParserOptions.setDefaultSdlParserOptions(ParserOptions options)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "graphql.parser.ParserOptions.<init>(Builder builder)": {
                "lineStart": 44,
                "lineEnd": 53
            },
            "graphql.parser.ParserOptions.isCaptureIgnoredChars()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "graphql.parser.ParserOptions.isCaptureSourceLocation()": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "graphql.parser.ParserOptions.isCaptureLineComments()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "graphql.parser.ParserOptions.isReaderTrackData()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "graphql.parser.ParserOptions.getMaxTokens()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "graphql.parser.ParserOptions.getMaxWhitespaceTokens()": {
                "lineStart": 75,
                "lineEnd": 77
            },
            "graphql.parser.ParserOptions.getMaxRuleDepth()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "graphql.parser.ParserOptions.getParsingListener()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "graphql.parser.ParserOptions.transform(Consumer<Builder> builderConsumer)": {
                "lineStart": 87,
                "lineEnd": 91
            },
            "graphql.parser.ParserOptions.newParserOptions()": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "graphql.parser.ParserOptions$Builder.<init>()": {
                "lineStart": 106,
                "lineEnd": 107
            },
            "graphql.parser.ParserOptions$Builder.<init>(ParserOptions parserOptions)": {
                "lineStart": 109,
                "lineEnd": 117
            },
            "graphql.parser.ParserOptions$Builder.captureIgnoredChars(boolean captureIgnoredChars)": {
                "lineStart": 119,
                "lineEnd": 122
            },
            "graphql.parser.ParserOptions$Builder.captureSourceLocation(boolean captureSourceLocation)": {
                "lineStart": 124,
                "lineEnd": 127
            },
            "graphql.parser.ParserOptions$Builder.captureLineComments(boolean captureLineComments)": {
                "lineStart": 129,
                "lineEnd": 132
            },
            "graphql.parser.ParserOptions$Builder.readerTrackData(boolean readerTrackData)": {
                "lineStart": 134,
                "lineEnd": 137
            },
            "graphql.parser.ParserOptions$Builder.maxTokens(int maxTokens)": {
                "lineStart": 139,
                "lineEnd": 142
            },
            "graphql.parser.ParserOptions$Builder.maxWhitespaceTokens(int maxWhitespaceTokens)": {
                "lineStart": 144,
                "lineEnd": 147
            },
            "graphql.parser.ParserOptions$Builder.maxRuleDepth(int maxRuleDepth)": {
                "lineStart": 149,
                "lineEnd": 152
            },
            "graphql.parser.ParserOptions$Builder.parsingListener(ParsingListener parsingListener)": {
                "lineStart": 154,
                "lineEnd": 157
            },
            "graphql.parser.ParserOptions$Builder.build()": {
                "lineStart": 159,
                "lineEnd": 161
            }
        }
    },
    "CVE-2023-32985": {
        "b9ab54f-SidebarLinkPlugin.java": {
            "hudson.plugins.sidebar_link.SidebarLinkPlugin.doUploadLinkImage(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 43,
                "lineEnd": 67
            },
            "hudson.plugins.sidebar_link.SidebarLinkPlugin.doCheckLinkIcon(@QueryParameter String value)": {
                "lineStart": 81,
                "lineEnd": 100
            }
        }
    },
    "CVE-2022-1279": {
        "9a759e6-KeyUtil.java": {
            "org.kopi.ebics.certificate.KeyUtil.generatePassword()": {
                "lineStart": 25,
                "lineEnd": 28
            }
        },
        "3dd272b-Utils.java": {
            "org.kopi.ebics.utils.Utils.generateNonce()": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.kopi.ebics.utils.Utils.generateKey()": {
                "lineStart": 69,
                "lineEnd": 71
            }
        }
    },
    "CVE-2023-40989": {
        "1bac4432-CommonUtils.java": {
            "org.jeecg.common.util.CommonUtils.uploadOnlineImage(byte[] data, String basePath, String bizPath, String uploadType)": {
                "lineStart": 33,
                "lineEnd": 67
            },
            "org.jeecg.common.util.CommonUtils.getFileName(String fileName)": {
                "lineStart": 69,
                "lineEnd": 81
            },
            "org.jeecg.common.util.CommonUtils.ifContainChinese(String str)": {
                "lineStart": 83,
                "lineEnd": 96
            },
            "org.jeecg.common.util.CommonUtils.upload(MultipartFile file, String bizPath, String uploadType)": {
                "lineStart": 98,
                "lineEnd": 114
            },
            "org.jeecg.common.util.CommonUtils.uploadLocal(MultipartFile mf, String bizPath, String uploadpath)": {
                "lineStart": 116,
                "lineEnd": 159
            },
            "org.jeecg.common.util.CommonUtils.upload(MultipartFile file, String bizPath, String uploadType, String customBucket)": {
                "lineStart": 161,
                "lineEnd": 177
            },
            "org.jeecg.common.util.CommonUtils.getDatabaseType()": {
                "lineStart": 181,
                "lineEnd": 195
            },
            "org.jeecg.common.util.CommonUtils.getDatabaseTypeEnum()": {
                "lineStart": 197,
                "lineEnd": 212
            },
            "org.jeecg.common.util.CommonUtils.getDataSourceProperty(String sourceKey)": {
                "lineStart": 214,
                "lineEnd": 219
            },
            "org.jeecg.common.util.CommonUtils.getDataSourceConnect(String sourceKey)": {
                "lineStart": 221,
                "lineEnd": 239
            },
            "org.jeecg.common.util.CommonUtils.getDatabaseTypeByDataSource(DataSource dataSource)": {
                "lineStart": 241,
                "lineEnd": 278
            },
            "org.jeecg.common.util.CommonUtils.getBaseUrl(HttpServletRequest request)": {
                "lineStart": 280,
                "lineEnd": 306
            },
            "org.jeecg.common.util.CommonUtils.mergeJSON(JSONObject target, JSONObject... sources)": {
                "lineStart": 308,
                "lineEnd": 314
            },
            "org.jeecg.common.util.CommonUtils.mergeJSON(JSONObject target, JSONObject source)": {
                "lineStart": 316,
                "lineEnd": 334
            }
        },
        "8e466eca-SysDictServiceImpl.java": {
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.duplicateCheckData(DuplicateCheckVo duplicateCheckVo)": {
                "lineStart": 45,
                "lineEnd": 77
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictItemsByCode(String code)": {
                "lineStart": 79,
                "lineEnd": 83
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryEnableDictItemsByCode(String code)": {
                "lineStart": 85,
                "lineEnd": 89
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictItemsByCodeList(List<String> dictCodeList)": {
                "lineStart": 91,
                "lineEnd": 101
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllDictItems()": {
                "lineStart": 103,
                "lineEnd": 130
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictTextByKey(String code, String key)": {
                "lineStart": 132,
                "lineEnd": 136
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryManyDictByKeys(List<String> dictCodeList, List<String> keys)": {
                "lineStart": 138,
                "lineEnd": 149
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictItemsByCode(String tableFilterSql, String text, String code)": {
                "lineStart": 151,
                "lineEnd": 176
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictItemsByCodeAndFilter(String table, String text, String code, String filterSql)": {
                "lineStart": 178,
                "lineEnd": 193
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictTextByKey(String table, String text, String code, String key)": {
                "lineStart": 195,
                "lineEnd": 216
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictTextByKeys(String table, String text, String code, List<String> codeValues)": {
                "lineStart": 218,
                "lineEnd": 238
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictByKeys(String table, String text, String code, String keys)": {
                "lineStart": 240,
                "lineEnd": 248
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTableDictByKeys(String table, String text, String code, String codeValuesStr, boolean delNotExist)": {
                "lineStart": 250,
                "lineEnd": 288
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.deleteByDictId(SysDict sysDict)": {
                "lineStart": 290,
                "lineEnd": 293
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.saveMain(SysDict sysDict, List<SysDictItem> sysDictItemList)": {
                "lineStart": 295,
                "lineEnd": 319
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllDepartBackDictModel()": {
                "lineStart": 321,
                "lineEnd": 323
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllUserBackDictModel()": {
                "lineStart": 325,
                "lineEnd": 327
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryLittleTableDictItems(String table, String text, String code, String condition, String keyword, int pageSize)": {
                "lineStart": 329,
                "lineEnd": 338
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.getFilterSql(String table, String text, String code, String condition, String keyword)": {
                "lineStart": 340,
                "lineEnd": 390
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryAllTableDictItems(String table, String text, String code, String condition, String keyword)": {
                "lineStart": 392,
                "lineEnd": 399
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryTreeList(Map<String, String> query, String table, String text, String code, String pidField, String pid, String hasChildField, int converIsLeafVal)": {
                "lineStart": 401,
                "lineEnd": 425
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.deleteOneDictPhysically(String id)": {
                "lineStart": 427,
                "lineEnd": 430
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.updateDictDelFlag(int delFlag, String id)": {
                "lineStart": 432,
                "lineEnd": 434
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDeleteList()": {
                "lineStart": 436,
                "lineEnd": 438
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.queryDictTablePageList(DictQuery query, int pageSize, int pageNo)": {
                "lineStart": 440,
                "lineEnd": 457
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.getDictItems(String dictCode)": {
                "lineStart": 459,
                "lineEnd": 491
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.loadDict(String dictCode, String keyword, Integer pageSize)": {
                "lineStart": 493,
                "lineEnd": 532
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.getDictListByLowAppId(String lowAppId)": {
                "lineStart": 534,
                "lineEnd": 547
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.addDictByLowAppId(SysDictVo sysDictVo)": {
                "lineStart": 549,
                "lineEnd": 552
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.editDictByLowAppId(SysDictVo sysDictVo)": {
                "lineStart": 554,
                "lineEnd": 570
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.addDict(String dictName, String lowAppId)": {
                "lineStart": 572,
                "lineEnd": 580
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.addDictItem(String id, List<SysDictItem> dictItemList)": {
                "lineStart": 582,
                "lineEnd": 595
            },
            "org.jeecg.modules.system.service.impl.SysDictServiceImpl.updateDictItem(String id, List<SysDictItem> dictItemList)": {
                "lineStart": 597,
                "lineEnd": 602
            }
        }
    },
    "CVE-2020-13951": {
        "939b5d1f2-InternalErrorPage.java": {
            "org.apache.openmeetings.web.pages.InternalErrorPage.onInitialize()": {
                "lineStart": 11,
                "lineEnd": 21
            },
            "org.apache.openmeetings.web.pages.InternalErrorPage.onParameterArrival(IRequestParameters requestParameters, AjaxRequestTarget target)": {
                "lineStart": 23,
                "lineEnd": 24
            }
        },
        "89d51ae8d-RateLimitRequestFilter.java": {
            "org.apache.openmeetings.webservice.util.RateLimitRequestFilter.filter(ContainerRequestContext context)": {
                "lineStart": 16,
                "lineEnd": 38
            }
        }
    },
    "CVE-2021-3878": {
        "e8a7f371c-DomReader.java": {
            "edu.stanford.nlp.ie.machinereading.common.DomReader.readDocument(File f)": {
                "lineStart": 88,
                "lineEnd": 113
            }
        },
        "7fb9aa3f8-Ssurgeon.java": {
            "edu.stanford.nlp.semgraph.semgrex.ssurgeon.Ssurgeon.createPatternXMLDoc(List<SsurgeonPattern> patterns)": {
                "lineStart": 332,
                "lineEnd": 381
            },
            "edu.stanford.nlp.semgraph.semgrex.ssurgeon.Ssurgeon.readFromFile(File file)": {
                "lineStart": 383,
                "lineEnd": 412
            }
        }
    },
    "CVE-2021-44550": {
        "4236f14ea-NERServlet.java": {
            "edu.stanford.nlp.ie.ner.webapp.NERServlet.init()": {
                "lineStart": 23,
                "lineEnd": 80
            },
            "edu.stanford.nlp.ie.ner.webapp.NERServlet.addResults(HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 99,
                "lineEnd": 146
            }
        }
    },
    "CVE-2021-21651": {
        "55e05f8-S3BucketPublisher.java": {
            "hudson.plugins.s3.S3BucketPublisher$DescriptorImpl.doFillProfileNameItems()": {
                "lineStart": 432,
                "lineEnd": 439
            }
        }
    },
    "CVE-2022-40151": {
        "9ecbfdd6-Five.java": {
            "com.thoughtworks.xstream.tools.benchmark.model.Five.hashCode()": {
                "lineStart": 20,
                "lineEnd": 22
            }
        },
        "a219f39c-FiveBean.java": {
            "com.thoughtworks.xstream.tools.benchmark.model.FiveBean.hashCode()": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "cefc10d0-SerializableFive.java": {
            "com.thoughtworks.xstream.tools.benchmark.model.SerializableFive.hashCode()": {
                "lineStart": 32,
                "lineEnd": 34
            }
        },
        "582f717a-BasicTarget.java": {
            "com.thoughtworks.xstream.tools.benchmark.targets.BasicTarget.<init>()": {
                "lineStart": 9,
                "lineEnd": 21
            }
        },
        "cc0e78a9-ExtendedTarget.java": {
            "com.thoughtworks.xstream.tools.benchmark.targets.ExtendedTarget$RunnableInvocationHandler.invoke(Object proxy, Method method, Object[] args)": {
                "lineStart": 61,
                "lineEnd": 76
            }
        },
        "91f83591-StringConverterBenchmark.java": {
            "com.thoughtworks.xstream.benchmark.jmh.StringConverterBenchmark$ConcurrentHashMapStringConverter.<init>(final int lengthLimit)": {
                "lineStart": 102,
                "lineEnd": 104
            }
        },
        "a1194ecc-AbstractReflectionConverter.java": {
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal(final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context)": {
                "lineStart": 76,
                "lineEnd": 246
            }
        },
        "544af247-NativeFieldKeySorter.java": {
            "com.thoughtworks.xstream.converters.reflection.NativeFieldKeySorter.sort(final Class<?> type, final Map<FieldKey, Field> keyedByFieldKey)": {
                "lineStart": 7,
                "lineEnd": 24
            }
        },
        "14a6d255-XStream12FieldKeySorter.java": {
            "com.thoughtworks.xstream.converters.reflection.XStream12FieldKeySorter.sort(final Class<?> type, final Map<FieldKey, Field> keyedByFieldKey)": {
                "lineStart": 7,
                "lineEnd": 26
            }
        },
        "0e34bd57-DefaultConverterLookup.java": {
            "com.thoughtworks.xstream.core.DefaultConverterLookup.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.thoughtworks.xstream.core.DefaultConverterLookup.readResolve()": {
                "lineStart": 80,
                "lineEnd": 84
            }
        },
        "f22678a1-PresortedMap.java": {
            "com.thoughtworks.xstream.core.util.PresortedMap.<init>()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.thoughtworks.xstream.core.util.PresortedMap.<init>(final Comparator<K> comparator)": {
                "lineStart": 19,
                "lineEnd": 21
            }
        },
        "77b63cf5-ThreadSafePropertyEditor.java": {
            "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor.<init>(final Class<? extends PropertyEditor> type, final int initialPoolSize, final int maxPoolSize)": {
                "lineStart": 9,
                "lineEnd": 35
            }
        },
        "0ae5d10a-ThreadSafeSimpleDateFormat.java": {
            "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat.<init>(final String format, final TimeZone timeZone, final Locale locale, final int initialPoolSize, final int maxPoolSize, final boolean lenient)": {
                "lineStart": 16,
                "lineEnd": 29
            }
        },
        "780cbcf7-WeakCache.java": {
            "com.thoughtworks.xstream.core.util.WeakCache.<init>()": {
                "lineStart": 14,
                "lineEnd": 16
            }
        },
        "9ec1d4f0-StatefulWriter.java": {
            "com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon()": {
                "lineStart": 30,
                "lineEnd": 38
            }
        },
        "3149b343-JettisonStaxWriter.java": {
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.<init>(final QNameMap qnameMap, final XMLStreamWriter out, final boolean writeEnclosingDocument, final boolean namespaceRepairingMode, final NameCoder nameCoder, final MappedNamespaceConvention convention)": {
                "lineStart": 19,
                "lineEnd": 22
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.<init>(final QNameMap qnameMap, final XMLStreamWriter out, final boolean writeEnclosingDocument, final boolean namespaceRepairingMode, final XmlFriendlyReplacer replacer, final MappedNamespaceConvention convention)": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.<init>(final QNameMap qnameMap, final XMLStreamWriter out, final boolean writeEnclosingDocument, final boolean namespaceRepairingMode, final MappedNamespaceConvention convention)": {
                "lineStart": 28,
                "lineEnd": 31
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.<init>(final QNameMap qnameMap, final XMLStreamWriter out, final MappedNamespaceConvention convention)": {
                "lineStart": 33,
                "lineEnd": 36
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.<init>(final QNameMap qnameMap, final XMLStreamWriter out, final NameCoder nameCoder, final MappedNamespaceConvention convention)": {
                "lineStart": 38,
                "lineEnd": 41
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.startNode(final String name, final Class<?> clazz)": {
                "lineStart": 43,
                "lineEnd": 58
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.startNode(final String name)": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter.endNode()": {
                "lineStart": 64,
                "lineEnd": 78
            }
        },
        "13c1ab56-TraxSource.java": {
            "com.thoughtworks.xstream.io.xml.TraxSource.setSourceAsList(final List<?> list)": {
                "lineStart": 105,
                "lineEnd": 114
            }
        },
        "1eff9889-AnnotationMapper.java": {
            "com.thoughtworks.xstream.mapper.AnnotationMapper.processConverterAnnotations(final Class<?> type)": {
                "lineStart": 252,
                "lineEnd": 277
            }
        },
        "f0e92937-SecurityMapper.java": {
            "com.thoughtworks.xstream.mapper.SecurityMapper.<init>(final Mapper wrapped, final TypePermission... permissions)": {
                "lineStart": 15,
                "lineEnd": 18
            }
        }
    },
    "CVE-2022-28977": {
        "6a460827a9bf9-PortalImpl.java": {
            "com.liferay.portal.util.PortalImpl.escapeRedirect(String url)": {
                "lineStart": 670,
                "lineEnd": 763
            }
        }
    },
    "CVE-2022-28147": {
        "cffa074-MainConfiguration.java": {
            "ci.with.toad.edge.MainConfiguration.doCheckLibs(@QueryParameter String value)": {
                "lineStart": 31,
                "lineEnd": 47
            }
        }
    },
    "CVE-2021-21671": {
        "3e051bee6a-AuthenticationProcessingFilter2.java": {
            "hudson.security.AuthenticationProcessingFilter2.successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)": {
                "lineStart": 26,
                "lineEnd": 37
            }
        },
        "4a8374b37d-SecurityRealm.java": {
            "hudson.security.SecurityRealm.createFilter(FilterConfig filterConfig)": {
                "lineStart": 278,
                "lineEnd": 308
            }
        }
    },
    "CVE-2023-43668": {
        "13c9688a5-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 147,
                "lineEnd": 191
            }
        }
    },
    "CVE-2022-39259": {
        "2ac41374-QuarkDialog.java": {
            "jadx.gui.plugins.quark.QuarkDialog.initUI()": {
                "lineStart": 45,
                "lineEnd": 80
            }
        },
        "8507cc39-QuarkReportPanel.java": {
            "jadx.gui.plugins.quark.QuarkReportPanel$TextTreeNode.render()": {
                "lineStart": 199,
                "lineEnd": 205
            },
            "jadx.gui.plugins.quark.QuarkReportPanel$MethodTreeNode.render()": {
                "lineStart": 317,
                "lineEnd": 323
            }
        },
        "f8461160-CodeNode.java": {
            "jadx.gui.treemodel.CodeNode.<init>(JClass rootCls, JNode jNode, String lineStr, int pos)": {
                "lineStart": 11,
                "lineEnd": 16
            },
            "jadx.gui.treemodel.CodeNode.getIcon()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "jadx.gui.treemodel.CodeNode.getJavaNode()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "jadx.gui.treemodel.CodeNode.getJParent()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "jadx.gui.treemodel.CodeNode.getRootClass()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "jadx.gui.treemodel.CodeNode.makeDescString()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "jadx.gui.treemodel.CodeNode.hasDescString()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "jadx.gui.treemodel.CodeNode.makeString()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "jadx.gui.treemodel.CodeNode.makeStringHtml()": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "jadx.gui.treemodel.CodeNode.makeLongString()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "jadx.gui.treemodel.CodeNode.makeLongStringHtml()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "jadx.gui.treemodel.CodeNode.getSyntaxName()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "jadx.gui.treemodel.CodeNode.getPos()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "jadx.gui.treemodel.CodeNode.equals(Object o)": {
                "lineStart": 66,
                "lineEnd": 77
            },
            "jadx.gui.treemodel.CodeNode.hashCode()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "jadx.gui.treemodel.CodeNode.compareTo(@NotNull JNode other)": {
                "lineStart": 83,
                "lineEnd": 89
            }
        },
        "676786c5-JField.java": {
            "jadx.gui.treemodel.JField.<init>(JavaField javaField, JClass jClass)": {
                "lineStart": 21,
                "lineEnd": 24
            },
            "jadx.gui.treemodel.JField.getJavaField()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "jadx.gui.treemodel.JField.getJavaNode()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "jadx.gui.treemodel.JField.getJParent()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "jadx.gui.treemodel.JField.getRootClass()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "jadx.gui.treemodel.JField.canRename()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "jadx.gui.treemodel.JField.getIcon()": {
                "lineStart": 46,
                "lineEnd": 50
            },
            "jadx.gui.treemodel.JField.getSyntaxName()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "jadx.gui.treemodel.JField.makeString()": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "jadx.gui.treemodel.JField.makeStringHtml()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "jadx.gui.treemodel.JField.makeLongString()": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "jadx.gui.treemodel.JField.makeLongStringHtml()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "jadx.gui.treemodel.JField.getTooltip()": {
                "lineStart": 72,
                "lineEnd": 75
            },
            "jadx.gui.treemodel.JField.makeDescString()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "jadx.gui.treemodel.JField.hasDescString()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "jadx.gui.treemodel.JField.hashCode()": {
                "lineStart": 85,
                "lineEnd": 87
            },
            "jadx.gui.treemodel.JField.equals(Object o)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "jadx.gui.treemodel.JField.compareToFld(@NotNull JField other)": {
                "lineStart": 94,
                "lineEnd": 96
            },
            "jadx.gui.treemodel.JField.compareTo(@NotNull JNode other)": {
                "lineStart": 98,
                "lineEnd": 104
            }
        },
        "01586153-JMethod.java": {
            "jadx.gui.treemodel.JMethod.<init>(JavaMethod javaMethod, JClass jClass)": {
                "lineStart": 27,
                "lineEnd": 30
            },
            "jadx.gui.treemodel.JMethod.getJavaNode()": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "jadx.gui.treemodel.JMethod.getJavaMethod()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "jadx.gui.treemodel.JMethod.getJParent()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "jadx.gui.treemodel.JMethod.getReturnType()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "jadx.gui.treemodel.JMethod.getRootClass()": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "jadx.gui.treemodel.JMethod.getIcon()": {
                "lineStart": 52,
                "lineEnd": 89
            },
            "jadx.gui.treemodel.JMethod.getSyntaxName()": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "jadx.gui.treemodel.JMethod.canRename()": {
                "lineStart": 95,
                "lineEnd": 101
            },
            "jadx.gui.treemodel.JMethod.makeBaseString()": {
                "lineStart": 103,
                "lineEnd": 127
            },
            "jadx.gui.treemodel.JMethod.getName()": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "jadx.gui.treemodel.JMethod.makeString()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "jadx.gui.treemodel.JMethod.makeStringHtml()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "jadx.gui.treemodel.JMethod.makeLongString()": {
                "lineStart": 141,
                "lineEnd": 144
            },
            "jadx.gui.treemodel.JMethod.makeLongStringHtml()": {
                "lineStart": 146,
                "lineEnd": 149
            },
            "jadx.gui.treemodel.JMethod.makeDescString()": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "jadx.gui.treemodel.JMethod.hasDescString()": {
                "lineStart": 155,
                "lineEnd": 157
            },
            "jadx.gui.treemodel.JMethod.getPos()": {
                "lineStart": 159,
                "lineEnd": 161
            },
            "jadx.gui.treemodel.JMethod.hashCode()": {
                "lineStart": 163,
                "lineEnd": 165
            },
            "jadx.gui.treemodel.JMethod.equals(Object o)": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "jadx.gui.treemodel.JMethod.compareToMth(@NotNull JMethod other)": {
                "lineStart": 172,
                "lineEnd": 174
            },
            "jadx.gui.treemodel.JMethod.compareTo(@NotNull JNode other)": {
                "lineStart": 176,
                "lineEnd": 192
            }
        },
        "f974e5e7-JNode.java": {
            "jadx.gui.treemodel.JNode.getJParent()": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "jadx.gui.treemodel.JNode.getRootClass()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "jadx.gui.treemodel.JNode.getJavaNode()": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "jadx.gui.treemodel.JNode.getContentPanel(TabbedPane tabbedPane)": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "jadx.gui.treemodel.JNode.getSyntaxName()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "jadx.gui.treemodel.JNode.getCodeInfo()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "jadx.gui.treemodel.JNode.getIcon()": {
                "lineStart": 35,
                "lineEnd": 35
            },
            "jadx.gui.treemodel.JNode.getName()": {
                "lineStart": 36,
                "lineEnd": 43
            },
            "jadx.gui.treemodel.JNode.canRename()": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "jadx.gui.treemodel.JNode.makeString()": {
                "lineStart": 49,
                "lineEnd": 49
            },
            "jadx.gui.treemodel.JNode.makeStringHtml()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "jadx.gui.treemodel.JNode.makeDescString()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "jadx.gui.treemodel.JNode.hasDescString()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "jadx.gui.treemodel.JNode.makeLongString()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "jadx.gui.treemodel.JNode.makeLongStringHtml()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "jadx.gui.treemodel.JNode.getPos()": {
                "lineStart": 70,
                "lineEnd": 77
            },
            "jadx.gui.treemodel.JNode.getTooltip()": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "jadx.gui.treemodel.JNode.compareTo(@NotNull JNode other)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "jadx.gui.treemodel.JNode.toString()": {
                "lineStart": 88,
                "lineEnd": 90
            }
        },
        "75fea8b2-MainWindow.java": {
            "jadx.gui.ui.MainWindow.initUI()": {
                "lineStart": 1216,
                "lineEnd": 1337
            }
        },
        "277a98f5-TabComponent.java": {
            "jadx.gui.ui.TabComponent.init()": {
                "lineStart": 42,
                "lineEnd": 99
            }
        },
        "eb62a2df-CommonSearchDialog.java": {
            "jadx.gui.ui.dialog.CommonSearchDialog$ResultsTableCellRenderer.<init>()": {
                "lineStart": 411,
                "lineEnd": 423
            },
            "jadx.gui.ui.dialog.CommonSearchDialog$ResultsTableCellRenderer.makeCell(JNode node, int column)": {
                "lineStart": 459,
                "lineEnd": 480
            }
        },
        "0fa18885-RenameDialog.java": {
            "jadx.gui.ui.dialog.RenameDialog.initUI()": {
                "lineStart": 325,
                "lineEnd": 358
            }
        },
        "4febed33-UsageDialog.java": {
            "jadx.gui.ui.dialog.UsageDialog.initUI()": {
                "lineStart": 136,
                "lineEnd": 163
            }
        },
        "77b748fd-LogcatPanel.java": {
            "jadx.gui.ui.panel.LogcatPanel$CheckCombo.getContent()": {
                "lineStart": 272,
                "lineEnd": 296
            }
        }
    },
    "CVE-2020-11111": {
        "b2b6ee06e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 86,
                "lineEnd": 86
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 87,
                "lineEnd": 87
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": {
                "lineStart": 88,
                "lineEnd": 120
            }
        }
    },
    "CVE-2021-21623": {
        "f5be235-ProjectMatrixAuthorizationStrategy.java": {
            "hudson.security.ProjectMatrixAuthorizationStrategy.getACL(@Nonnull Job<?, ?> project)": {
                "lineStart": 21,
                "lineEnd": 30
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy.inheritingACL(final ACL parent, final ACL child)": {
                "lineStart": 32,
                "lineEnd": 43
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy.getACL(ItemGroup<?> g)": {
                "lineStart": 45,
                "lineEnd": 52
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy.getACL(@Nonnull Node node)": {
                "lineStart": 54,
                "lineEnd": 61
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy.getACL(@Nonnull AbstractItem item)": {
                "lineStart": 63,
                "lineEnd": 76
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy.getGroups()": {
                "lineStart": 78,
                "lineEnd": 104
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy$ConverterImpl.create()": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "hudson.security.ProjectMatrixAuthorizationStrategy$ConverterImpl.canConvert(Class type)": {
                "lineStart": 121,
                "lineEnd": 123
            }
        },
        "57507d7-InheritGlobalStrategy.java": {
            "org.jenkinsci.plugins.matrixauth.inheritance.InheritGlobalStrategy.getEffectiveACL(ACL acl, AccessControlled subject)": {
                "lineStart": 14,
                "lineEnd": 16
            }
        },
        "f9e5098-InheritParentStrategy.java": {
            "org.jenkinsci.plugins.matrixauth.inheritance.InheritParentStrategy.getEffectiveACL(ACL acl, AccessControlled subject)": {
                "lineStart": 16,
                "lineEnd": 34
            }
        },
        "f39fa25-InheritanceStrategy.java": {
            "org.jenkinsci.plugins.matrixauth.inheritance.InheritanceStrategy.getDescriptor()": {
                "lineStart": 7,
                "lineEnd": 9
            },
            "org.jenkinsci.plugins.matrixauth.inheritance.InheritanceStrategy.getEffectiveACL(ACL acl, AccessControlled subject)": {
                "lineStart": 11,
                "lineEnd": 11
            }
        },
        "8a3b430-NonInheritingStrategy.java": {
            "org.jenkinsci.plugins.matrixauth.inheritance.NonInheritingStrategy.getEffectiveACL(ACL acl, AccessControlled subject)": {
                "lineStart": 15,
                "lineEnd": 31
            }
        }
    },
    "CVE-2020-2094": {
        "c54ef35-AdvisorGlobalConfiguration.java": {
            "com.cloudbees.jenkins.plugins.advisor.AdvisorGlobalConfiguration$DescriptorImpl.doTestSendEmail(@QueryParameter(\"email\") final String value, @QueryParameter(\"acceptToS\") final boolean acceptToS)": {
                "lineStart": 345,
                "lineEnd": 347
            }
        },
        "b04583f-Recipient.java": {
            "com.cloudbees.jenkins.plugins.advisor.client.model.Recipient$DescriptorImpl.doTestSendEmail(@QueryParameter(\"email\") final String value, @RelativePath(\"..\") @QueryParameter(\"acceptToS\") final boolean acceptToS)": {
                "lineStart": 38,
                "lineEnd": 40
            }
        }
    },
    "CVE-2023-3629": {
        "94f4e62a2e-CacheResourceV2.java": {
            "org.infinispan.rest.resources.CacheResourceV2.getCacheConfig(RestRequest request)": {
                "lineStart": 657,
                "lineEnd": 682
            },
            "org.infinispan.rest.resources.CacheResourceV2$CacheFullDetail.toJson()": {
                "lineStart": 919,
                "lineEnd": 946
            },
            "org.infinispan.rest.resources.CacheResourceV2.getDetailResponse(RestRequest request, Cache<?, ?> cache, boolean pretty)": {
                "lineStart": 581,
                "lineEnd": 646
            }
        }
    },
    "CVE-2023-30514": {
        "395c846-AzureKeyVaultStep.java": {
            "org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultStep$ExecutionImpl.start()": {
                "lineStart": 123,
                "lineEnd": 132
            }
        },
        "c0e21d4-MaskingConsoleLogFilter.java": {
            "org.jenkinsci.plugins.azurekeyvaultplugin.MaskingConsoleLogFilter.<init>(final String charsetName, final List<String> valuesToMask)": {
                "lineStart": 12,
                "lineEnd": 15
            },
            "org.jenkinsci.plugins.azurekeyvaultplugin.MaskingConsoleLogFilter.decorateLogger(Run run, final OutputStream logger)": {
                "lineStart": 17,
                "lineEnd": 19
            }
        }
    },
    "CVE-2023-22665": {
        "d660ad5a7e-ARQ.java": {
            "org.apache.jena.query.ARQ.getExecLogger()": {
                "lineStart": 36,
                "lineEnd": 36
            },
            "org.apache.jena.query.ARQ.getInfoLogger()": {
                "lineStart": 37,
                "lineEnd": 37
            },
            "org.apache.jena.query.ARQ.getHttpRequestLogger()": {
                "lineStart": 38,
                "lineEnd": 38
            },
            "org.apache.jena.query.ARQ.getExecutionLogging()": {
                "lineStart": 40,
                "lineEnd": 40
            },
            "org.apache.jena.query.ARQ.setExecutionLogging(Explain.InfoLevel infoLevel)": {
                "lineStart": 41,
                "lineEnd": 48
            },
            "org.apache.jena.query.ARQ.enableBlankNodeResultLabels()": {
                "lineStart": 59,
                "lineEnd": 59
            },
            "org.apache.jena.query.ARQ.enableBlankNodeResultLabels(boolean val)": {
                "lineStart": 60,
                "lineEnd": 64
            },
            "org.apache.jena.query.ARQ.enableOptimizer(boolean state)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "org.apache.jena.query.ARQ.enableOptimizer(Context context, boolean state)": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "org.apache.jena.query.ARQ.setStrictMode()": {
                "lineStart": 122,
                "lineEnd": 122
            },
            "org.apache.jena.query.ARQ.setStrictMode(Context context)": {
                "lineStart": 123,
                "lineEnd": 135
            },
            "org.apache.jena.query.ARQ.isStrictMode()": {
                "lineStart": 137,
                "lineEnd": 137
            },
            "org.apache.jena.query.ARQ.setNormalMode()": {
                "lineStart": 138,
                "lineEnd": 143
            },
            "org.apache.jena.query.ARQ.setNormalMode(Context context)": {
                "lineStart": 145,
                "lineEnd": 154
            },
            "org.apache.jena.query.ARQ.init()": {
                "lineStart": 162,
                "lineEnd": 190
            },
            "org.apache.jena.query.ARQ.setARQSettings()": {
                "lineStart": 192,
                "lineEnd": 202
            },
            "org.apache.jena.query.ARQ.getContext()": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "org.apache.jena.query.ARQ.set(Symbol symbol, boolean value)": {
                "lineStart": 208,
                "lineEnd": 208
            },
            "org.apache.jena.query.ARQ.setTrue(Symbol symbol)": {
                "lineStart": 209,
                "lineEnd": 209
            },
            "org.apache.jena.query.ARQ.setFalse(Symbol symbol)": {
                "lineStart": 210,
                "lineEnd": 210
            },
            "org.apache.jena.query.ARQ.unset(Symbol symbol)": {
                "lineStart": 211,
                "lineEnd": 211
            },
            "org.apache.jena.query.ARQ.isTrue(Symbol symbol)": {
                "lineStart": 212,
                "lineEnd": 212
            },
            "org.apache.jena.query.ARQ.isFalse(Symbol symbol)": {
                "lineStart": 213,
                "lineEnd": 213
            },
            "org.apache.jena.query.ARQ.isTrueOrUndef(Symbol symbol)": {
                "lineStart": 214,
                "lineEnd": 214
            },
            "org.apache.jena.query.ARQ.isFalseOrUndef(Symbol symbol)": {
                "lineStart": 215,
                "lineEnd": 215
            }
        },
        "d382214536-ScriptFunction.java": {
            "org.apache.jena.sparql.function.scripting.ScriptFunction.createEngine()": {
                "lineStart": 105,
                "lineEnd": 159
            },
            "org.apache.jena.sparql.function.scripting.ScriptFunction.checkBuild(String uri, ExprList args)": {
                "lineStart": 45,
                "lineEnd": 64
            },
            "org.apache.jena.sparql.function.scripting.ScriptFunction.exec(List<NodeValue> args)": {
                "lineStart": 66,
                "lineEnd": 90
            }
        }
    },
    "CVE-2021-36161": {
        "aa78a1ed99-PojoUtils.java": {
            "org.apache.dubbo.common.utils.PojoUtils.realize0(Object pojo, Class<?> type, Type genericType, final Map<Object, Object> history)": {
                "lineStart": 320,
                "lineEnd": 548
            }
        }
    },
    "CVE-2022-44644": {
        "ddf2f5baf-SqlConnection.java": {
            "org.apache.linkis.metadata.query.service.mysql.SqlConnection.<init>(String host, Integer port, String username, String password, String database, Map<String, Object> extraParams)": {
                "lineStart": 21,
                "lineEnd": 26
            }
        }
    },
    "CVE-2022-39387": {
        "8fba1dc-OIDCClientConfiguration.java": {
            "org.xwiki.contrib.oidc.auth.internal.OIDCClientConfiguration.getProperty(String key, Class<T> valueClass)": {
                "lineStart": 189,
                "lineEnd": 201
            },
            "org.xwiki.contrib.oidc.auth.internal.OIDCClientConfiguration.getProperty(String key, T def)": {
                "lineStart": 203,
                "lineEnd": 215
            },
            "org.xwiki.contrib.oidc.auth.internal.OIDCClientConfiguration.getEndPoint(String hint)": {
                "lineStart": 243,
                "lineEnd": 277
            }
        }
    },
    "CVE-2023-45859": {
        "942f5ddb19-CreateProxiesMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.CreateProxiesMessageTask.get()": {
                "lineStart": 26,
                "lineEnd": 33
            }
        },
        "696628ba02-CacheAddNearCacheInvalidationListenerTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheAddNearCacheInvalidationListenerTask.getRequiredPermission()": {
                "lineStart": 76,
                "lineEnd": 78
            }
        },
        "ae18b4a9e8-CacheAddPartitionLostListenerMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheAddPartitionLostListenerMessageTask.getRequiredPermission()": {
                "lineStart": 64,
                "lineEnd": 66
            }
        },
        "569e884a14-CacheCreateConfigMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheCreateConfigMessageTask.getRequiredPermission()": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "2ff9cfb57d-CacheDestroyMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getRequiredPermission()": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheDestroyMessageTask.getDistributedObjectName()": {
                "lineStart": 43,
                "lineEnd": 45
            }
        },
        "5072c56202-CacheGetConfigMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheGetConfigMessageTask.getRequiredPermission()": {
                "lineStart": 39,
                "lineEnd": 41
            }
        },
        "e14af7f662-CacheIterateMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.<init>(ClientMessage clientMessage, Node node, Connection connection)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.prepareOperation()": {
                "lineStart": 19,
                "lineEnd": 23
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.decodeClientMessage(ClientMessage clientMessage)": {
                "lineStart": 25,
                "lineEnd": 27
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.encodeResponse(Object response)": {
                "lineStart": 29,
                "lineEnd": 37
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.getDistributedObjectName()": {
                "lineStart": 39,
                "lineEnd": 41
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.getParameters()": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "com.hazelcast.client.impl.protocol.task.cache.CacheIterateMessageTask.getMethodName()": {
                "lineStart": 47,
                "lineEnd": 49
            }
        },
        "3f2858b320-CacheListenerRegistrationMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheListenerRegistrationMessageTask.getRequiredPermission()": {
                "lineStart": 39,
                "lineEnd": 41
            }
        },
        "ee92dfa961-CacheLoadAllMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheLoadAllMessageTask.getRequiredPermission()": {
                "lineStart": 57,
                "lineEnd": 59
            }
        },
        "7e88e72e0c-CacheManagementConfigMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheManagementConfigMessageTask.getRequiredPermission()": {
                "lineStart": 37,
                "lineEnd": 39
            }
        },
        "ef40eb3b77-CacheRemoveInvalidationListenerMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask.getRequiredPermission()": {
                "lineStart": 41,
                "lineEnd": 43
            }
        },
        "9caec88654-CacheRemovePartitionLostListenerMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.cache.CacheRemovePartitionLostListenerMessageTask.getRequiredPermission()": {
                "lineStart": 42,
                "lineEnd": 44
            }
        },
        "c962ad022b-MapDestroyCacheMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapDestroyCacheMessageTask.getRequiredPermission()": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "dc5f909130-MapFetchEntriesMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapFetchEntriesMessageTask.getRequiredPermission()": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "c259b10406-MapFetchKeysMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapFetchKeysMessageTask.getRequiredPermission()": {
                "lineStart": 44,
                "lineEnd": 46
            }
        },
        "3dbdcaaae5-MapPublisherCreateMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateMessageTask.getRequiredPermission()": {
                "lineStart": 104,
                "lineEnd": 106
            }
        },
        "cf23663fac-MapPublisherCreateWithValueMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.fetchMapSnapshotFrom(List<Future> futures)": {
                "lineStart": 60,
                "lineEnd": 81
            },
            "com.hazelcast.client.impl.protocol.task.map.MapPublisherCreateWithValueMessageTask.getRequiredPermission()": {
                "lineStart": 107,
                "lineEnd": 109
            }
        },
        "c9c49762f7-MapRemovePartitionLostListenerMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapRemovePartitionLostListenerMessageTask.getRequiredPermission()": {
                "lineStart": 41,
                "lineEnd": 43
            }
        },
        "bf6346aa50-MapSetReadCursorMessageTask.java": {
            "com.hazelcast.client.impl.protocol.task.map.MapSetReadCursorMessageTask.getRequiredPermission()": {
                "lineStart": 28,
                "lineEnd": 30
            }
        },
        "66b0107487-GetSemaphoreTypeMessageTask.java": {
            "com.hazelcast.cp.internal.datastructures.semaphore.client.GetSemaphoreTypeMessageTask.getRequiredPermission()": {
                "lineStart": 33,
                "lineEnd": 35
            }
        },
        "87c458242a-DestroyRaftObjectMessageTask.java": {
            "com.hazelcast.cp.internal.datastructures.spi.client.DestroyRaftObjectMessageTask.getRequiredPermission()": {
                "lineStart": 34,
                "lineEnd": 36
            }
        },
        "f110f732f9-SqlMappingDdlTask.java": {
            "com.hazelcast.sql.impl.client.SqlMappingDdlTask.getRequiredPermission()": {
                "lineStart": 43,
                "lineEnd": 45
            }
        }
    },
    "CVE-2020-11113": {
        "dee36a14e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type)": {
                "lineStart": 75,
                "lineEnd": 107
            }
        }
    },
    "CVE-2021-31811": {
        "5004d3ea2-PDFObjectStreamParser.java": {
            "org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse()": {
                "lineStart": 43,
                "lineEnd": 65
            },
            "org.apache.pdfbox.pdfparser.PDFObjectStreamParser.readOffsets()": {
                "lineStart": 71,
                "lineEnd": 80
            }
        }
    },
    "CVE-2020-11988": {
        "5e7d8b6-XMPParser.java": {
            "org.apache.xmlgraphics.xmp.XMPParser.parseXMP(Source src)": {
                "lineStart": 17,
                "lineEnd": 24
            }
        }
    },
    "CVE-2024-23689": {
        "360abed4-ClickHouseCommandLineOption.java": {
            "com.clickhouse.client.cli.config.ClickHouseCommandLineOption.<init>(String key, T defaultValue, String description)": {
                "lineStart": 10,
                "lineEnd": 15
            }
        }
    },
    "CVE-2021-39236": {
        "7390fcc18a-OzoneDelegationTokenSecretManager.java": {
            "org.apache.hadoop.ozone.security.OzoneDelegationTokenSecretManager.validateS3AuthInfo(OzoneTokenIdentifier identifier)": {
                "lineStart": 317,
                "lineEnd": 337
            }
        }
    },
    "CVE-2023-24789": {
        "53f2e7c1-DictQueryBlackListHandler.java": {
            "org.jeecg.modules.system.security.DictQueryBlackListHandler.getTableName(String str)": {
                "lineStart": 33,
                "lineEnd": 36
            }
        }
    },
    "CVE-2021-32621": {
        "8b8bb063345-DefaultGadgetSource.java": {
            "org.xwiki.rendering.internal.macro.dashboard.DefaultGadgetSource.prepareGadgets(List<BaseObject> objects, Syntax sourceSyntax, MacroTransformationContext context)": {
                "lineStart": 80,
                "lineEnd": 113
            }
        }
    },
    "CVE-2022-31197": {
        "9ffaa129-PgResultSet.java": {
            "org.postgresql.jdbc.PgResultSet.refreshRow()": {
                "lineStart": 1199,
                "lineEnd": 1264
            }
        }
    },
    "CVE-2021-3632": {
        "a51558d9e4-WebAuthnPasswordlessAuthenticatorFactory.java": {
            "org.keycloak.authentication.authenticators.browser.WebAuthnPasswordlessAuthenticatorFactory.getReferenceCategory()": {
                "lineStart": 7,
                "lineEnd": 9
            },
            "org.keycloak.authentication.authenticators.browser.WebAuthnPasswordlessAuthenticatorFactory.getDisplayType()": {
                "lineStart": 11,
                "lineEnd": 13
            },
            "org.keycloak.authentication.authenticators.browser.WebAuthnPasswordlessAuthenticatorFactory.getHelpText()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.keycloak.authentication.authenticators.browser.WebAuthnPasswordlessAuthenticatorFactory.create(KeycloakSession session)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.keycloak.authentication.authenticators.browser.WebAuthnPasswordlessAuthenticatorFactory.getId()": {
                "lineStart": 23,
                "lineEnd": 25
            }
        }
    },
    "CVE-2024-38460": {
        "bdb60cf61a7-SettingsService.java": {
            "org.sonarqube.ws.client.settings.SettingsService.encrypt(EncryptRequest request)": {
                "lineStart": 23,
                "lineEnd": 25
            }
        }
    },
    "CVE-2022-45135": {
        "d47210cbe4-DatabaseCookieAuthenticatorAction.java": {
            "org.apache.cocoon.acting.DatabaseCookieAuthenticatorAction.act(Redirector redirector, SourceResolver resolver, Map objectModel, String src, Parameters parameters)": {
                "lineStart": 21,
                "lineEnd": 168
            },
            "org.apache.cocoon.acting.DatabaseCookieAuthenticatorAction.getAuthQuery(Map objectModel, Configuration conf, Request req)": {
                "lineStart": 170,
                "lineEnd": 234
            }
        }
    },
    "CVE-2023-42809": {
        "827627968-CustomObjectInputStream.java": {
            "org.redisson.codec.CustomObjectInputStream.resolveProxyClass(String[] interfaces)": {
                "lineStart": 27,
                "lineEnd": 35
            },
            "org.redisson.codec.CustomObjectInputStream.resolveClass(ObjectStreamClass desc)": {
                "lineStart": 16,
                "lineEnd": 25
            }
        },
        "62374a4bf-SerializationCodec.java": {
            "org.redisson.codec.SerializationCodec.<init>(ClassLoader classLoader, SerializationCodec codec)": {
                "lineStart": 74,
                "lineEnd": 76
            }
        }
    },
    "CVE-2023-27296": {
        "d4e0b6f50-MySQLDataNodeDTO.java": {
            "org.apache.inlong.manager.pojo.node.mysql.MySQLDataNodeDTO.convertToJdbcurl(String url)": {
                "lineStart": 35,
                "lineEnd": 42
            }
        },
        "77b4128ec-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 139,
                "lineEnd": 164
            }
        }
    },
    "CVE-2022-21724": {
        "09efa75f-SocketFactoryFactory.java": {
            "org.postgresql.core.SocketFactoryFactory.getSocketFactory(Properties info)": {
                "lineStart": 12,
                "lineEnd": 25
            },
            "org.postgresql.core.SocketFactoryFactory.getSslSocketFactory(Properties info)": {
                "lineStart": 27,
                "lineEnd": 40
            }
        },
        "938f2463-AuthenticationPluginManager.java": {
            "org.postgresql.core.v3.AuthenticationPluginManager.withPassword(AuthenticationRequestType type, Properties info, PasswordAction<char @Nullable [], T> action)": {
                "lineStart": 26,
                "lineEnd": 59
            },
            "org.postgresql.core.v3.AuthenticationPluginManager.withEncodedPassword(AuthenticationRequestType type, Properties info, PasswordAction<byte[], T> action)": {
                "lineStart": 61,
                "lineEnd": 81
            }
        },
        "67e1196b-LibPQFactory.java": {
            "org.postgresql.ssl.LibPQFactory.getCallbackHandler(Properties info)": {
                "lineStart": 35,
                "lineEnd": 52
            }
        },
        "bf64673f-MakeSSL.java": {
            "org.postgresql.ssl.MakeSSL.verifyPeerName(PGStream stream, Properties info, SSLSocket newConnection)": {
                "lineStart": 44,
                "lineEnd": 66
            }
        },
        "ef24770e-ObjectFactory.java": {
            "org.postgresql.util.ObjectFactory.instantiate(String classname, Properties info, boolean tryString, @Nullable String stringarg)": {
                "lineStart": 7,
                "lineEnd": 33
            }
        }
    },
    "CVE-2020-9495": {
        "fedae347-LdapBindAuthenticator.java": {
            "org.apache.archiva.redback.authentication.ldap.LdapBindAuthenticator.authenticate(AuthenticationDataSource s)": {
                "lineStart": 41,
                "lineEnd": 108
            }
        },
        "529a2d9d-LdapUtils.java": {
            "org.apache.archiva.redback.common.ldap.LdapUtils.<init>()": {
                "lineStart": 11,
                "lineEnd": 12
            },
            "org.apache.archiva.redback.common.ldap.LdapUtils.getLabeledUriValue(Attributes attributes, String attrName, String label, String attributeDescription)": {
                "lineStart": 14,
                "lineEnd": 42
            },
            "org.apache.archiva.redback.common.ldap.LdapUtils.getAttributeValue(Attributes attributes, String attrName, String attributeDescription)": {
                "lineStart": 44,
                "lineEnd": 63
            },
            "org.apache.archiva.redback.common.ldap.LdapUtils.getAttributeValueFromByteArray(Attributes attributes, String attrName, String attributeDescription)": {
                "lineStart": 65,
                "lineEnd": 84
            },
            "org.apache.archiva.redback.common.ldap.LdapUtils.getLdapNameFromString(final String name)": {
                "lineStart": 86,
                "lineEnd": 91
            },
            "org.apache.archiva.redback.common.ldap.LdapUtils.findFirstRdnValue(LdapName name, String type)": {
                "lineStart": 93,
                "lineEnd": 109
            }
        },
        "6f097944-LdapUserQuery.java": {
            "org.apache.archiva.redback.users.ldap.LdapUserQuery.getLdapFilter(UserMapper mapper)": {
                "lineStart": 20,
                "lineEnd": 32
            }
        }
    },
    "CVE-2022-38370": {
        "12dc1a9738-MyConfiguration.java": {
            "org.apache.iotdb.web.grafana.conf.MyConfiguration.corsConfigurer()": {
                "lineStart": 8,
                "lineEnd": 15
            }
        }
    },
    "CVE-2023-29520": {
        "5e956836ceb-DocumentTranslationBundleFactory.java": {
            "org.xwiki.localization.wiki.internal.DocumentTranslationBundleFactory.loadTranslations(String wiki)": {
                "lineStart": 114,
                "lineEnd": 138
            }
        }
    },
    "CVE-2023-2195": {
        "77643c9-CodeDxPublisher.java": {
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckUrl(@QueryParameter final String value, @QueryParameter final String selfSignedCertificateFingerprint)": {
                "lineStart": 564,
                "lineEnd": 596
            },
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckSelfSignedCertificateFingerprint(@QueryParameter final String value, @QueryParameter final String url)": {
                "lineStart": 598,
                "lineEnd": 622
            },
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doFillProjectIdItems(@QueryParameter final String url, @QueryParameter final String selfSignedCertificateFingerprint, @QueryParameter final String key, @AncestorInPath AbstractProject project)": {
                "lineStart": 666,
                "lineEnd": 699
            }
        }
    },
    "CVE-2021-44548": {
        "bac4709677d-SolrResourceLoader.java": {
            "org.apache.solr.core.SolrResourceLoader.getURLs(Path libDir)": {
                "lineStart": 197,
                "lineEnd": 206
            },
            "org.apache.solr.core.SolrResourceLoader.getFilteredURLs(Path libDir, String regex)": {
                "lineStart": 208,
                "lineEnd": 218
            },
            "org.apache.solr.core.SolrResourceLoader.openResource(String resource)": {
                "lineStart": 234,
                "lineEnd": 263
            },
            "org.apache.solr.core.SolrResourceLoader.resourceLocation(String resource)": {
                "lineStart": 265,
                "lineEnd": 291
            },
            "org.apache.solr.core.SolrResourceLoader.findClass(String cname, Class<T> expectedType, String... subpackages)": {
                "lineStart": 322,
                "lineEnd": 405
            },
            "org.apache.solr.core.SolrResourceLoader.newInstance(String cName, Class<T> expectedType, String[] subPackages, Class<?>[] params, Object[] args)": {
                "lineStart": 433,
                "lineEnd": 470
            }
        }
    },
    "CVE-2023-33945": {
        "d409b87171fea-SQLServerDB.java": {
            "com.liferay.portal.dao.db.SQLServerDB.removePrimaryKey(Connection connection, String tableName)": {
                "lineStart": 95,
                "lineEnd": 112
            }
        },
        "4c55868b35de1-SybaseDB.java": {
            "com.liferay.portal.dao.db.SybaseDB.removePrimaryKey(Connection connection, String tableName)": {
                "lineStart": 58,
                "lineEnd": 80
            }
        }
    },
    "CVE-2023-37911": {
        "c7626f8607d-Document.java": {
            "com.xpn.xwiki.api.Document.getDocumentRevision(String revision)": {
                "lineStart": 1926,
                "lineEnd": 1936
            }
        },
        "7c6b79b4b49-XWiki.java": {
            "com.xpn.xwiki.api.XWiki.getDocument(DocumentReference reference, String revision)": {
                "lineStart": 350,
                "lineEnd": 366
            }
        }
    },
    "CVE-2020-2313": {
        "1a2861e-AzureKeyVaultBuildWrapper.java": {
            "org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultBuildWrapper$DescriptorImpl.doFillCredentialIDOverrideItems(@AncestorInPath Item context)": {
                "lineStart": 210,
                "lineEnd": 212
            }
        },
        "ff3e2f8-AzureKeyVaultGlobalConfiguration.java": {
            "org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultGlobalConfiguration.doFillCredentialIDItems(@AncestorInPath Item context)": {
                "lineStart": 184,
                "lineEnd": 190
            }
        },
        "db4e816-AzureKeyVaultStep.java": {
            "org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultStep$DescriptorImpl.doFillCredentialIDItems(@AncestorInPath Item context)": {
                "lineStart": 169,
                "lineEnd": 171
            }
        },
        "53e997a-AzureKeyVaultUtil.java": {
            "org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultUtil.convertAndWritePfxToDisk(FilePath workspace, String secret)": {
                "lineStart": 16,
                "lineEnd": 37
            }
        }
    },
    "CVE-2022-43415": {
        "5808792-RevisionState.java": {
            "hudson.plugins.repo.RevisionState.<init>(final String manifest, final String manifestRevision, final String url, final String branch, final String file, @Nullable final PrintStream logger)": {
                "lineStart": 28,
                "lineEnd": 80
            }
        }
    },
    "CVE-2023-46589": {
        "9a6de071d5-Request.java": {
            "org.apache.catalina.connector.Request.getParameter(String name)": {
                "lineStart": 570,
                "lineEnd": 576
            },
            "org.apache.catalina.connector.Request.getParameterNames()": {
                "lineStart": 594,
                "lineEnd": 600
            },
            "org.apache.catalina.connector.Request.getParameterValues(String name)": {
                "lineStart": 602,
                "lineEnd": 608
            },
            "org.apache.catalina.connector.Request.parseParts()": {
                "lineStart": 1639,
                "lineEnd": 1771
            },
            "org.apache.catalina.connector.Request.parseParameters()": {
                "lineStart": 1973,
                "lineEnd": 2106
            },
            "org.apache.catalina.connector.Request.readChunkedPostBody()": {
                "lineStart": 2121,
                "lineEnd": 2150
            },
            "org.apache.catalina.connector.Request.recycle()": {
                "lineStart": 171,
                "lineEnd": 245
            }
        },
        "70226ce3a9-StandardWrapperValve.java": {
            "org.apache.catalina.core.StandardWrapperValve.exception(Request request, Response response, Throwable exception)": {
                "lineStart": 217,
                "lineEnd": 221
            },
            "org.apache.catalina.core.StandardWrapperValve.invoke(Request request, Response response)": {
                "lineStart": 34,
                "lineEnd": 203
            }
        },
        "b590d379e8-Parameters.java": {
            "org.apache.tomcat.util.http.Parameters.addParameter(String key, String value)": {
                "lineStart": 155,
                "lineEnd": 167
            },
            "org.apache.tomcat.util.http.Parameters.processParameters(byte[] bytes, int start, int len, Charset charset)": {
                "lineStart": 183,
                "lineEnd": 416
            }
        }
    },
    "CVE-2021-29046": {
        "e50d74a45c783-AssetCategoryAdminPortlet.java": {
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.editCategory(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 97,
                "lineEnd": 121
            }
        }
    },
    "CVE-2021-33668": {
        "0000000-ClientJacksonResolver.java": {
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.deleteCategory(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 66,
                "lineEnd": 78
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.deleteVocabulary(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 80,
                "lineEnd": 95
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.editCategory(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 97,
                "lineEnd": 121
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.editProperties(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 123,
                "lineEnd": 129
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.editVocabulary(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 131,
                "lineEnd": 147
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.moveCategory(ActionRequest actionRequest, ActionResponse actionResponse)": {
                "lineStart": 149,
                "lineEnd": 164
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.activate(Map<String, Object> properties)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.doDispatch(RenderRequest renderRequest, RenderResponse renderResponse)": {
                "lineStart": 170,
                "lineEnd": 178
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.getCategoryProperties(ActionRequest actionRequest)": {
                "lineStart": 180,
                "lineEnd": 194
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.getCategoryProperties(List<AssetCategoryProperty> categoryProperties)": {
                "lineStart": 196,
                "lineEnd": 203
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.getSettings(ActionRequest actionRequest)": {
                "lineStart": 205,
                "lineEnd": 236
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet.isSessionErrorException(Throwable throwable)": {
                "lineStart": 238,
                "lineEnd": 244
            },
            "com.liferay.asset.categories.admin.web.internal.portlet.AssetCategoryAdminPortlet._getRedirectURL(ActionResponse actionResponse, AssetVocabulary vocabulary)": {
                "lineStart": 246,
                "lineEnd": 252
            }
        },
        "e27cbdb-SCIMClientService.java": {
            "com.sap.scimono.client.SCIMClientService$Builder.getDefaultResolvers()": {
                "lineStart": 118,
                "lineEnd": 120
            }
        },
        "9032750-ServletRequestProviderFilter.java": {
            "com.sap.scimono.api.ServletRequestProviderFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 13,
                "lineEnd": 15
            },
            "com.sap.scimono.api.ServletRequestProviderFilter.filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)": {
                "lineStart": 17,
                "lineEnd": 19
            },
            "com.sap.scimono.api.ServletRequestProviderFilter.removeServletRequestFromContext()": {
                "lineStart": 21,
                "lineEnd": 23
            }
        },
        "785ba02-User.java": {
            "com.sap.scimono.entity.User.<init>(@JsonProperty(ID_FIELD) final String id, @JsonProperty(EXTERNAL_ID_FIELD) final String externalId, @JsonProperty(META_FIELD) final Meta meta, @JsonProperty(value = SCHEMAS_FIELD, required = true) final Set<String> schemas, @JsonProperty(value = USER_NAME_FIELD, required = true) final String userName, @JsonProperty(NAME_FIELD) final Name name, @JsonProperty(DISPLAY_NAME_FIELD) final String displayName, @JsonProperty(NICK_NAME_FIELD) final String nickName, @JsonProperty(PROFILE_URL_FIELD) final String profileUrl, @JsonProperty(TITLE_FIELD) final String title, @JsonProperty(USER_TYPE_FIELD) final String userType, @JsonProperty(PREFERRED_LANGUAGE_FIELD) final String preferredLanguage, @JsonProperty(LOCALE_FIELD) final String locale, @JsonProperty(TIMEZONE_FIELD) final String timezone, @JsonProperty(ACTIVE_FIELD) final Boolean active, @JsonProperty(EMAILS_FIELD) final List<Email> emails, @JsonProperty(PHONE_NUMBERS_FIELD) final List<PhoneNumber> phoneNumbers, @JsonProperty(IMS_FIELD) final List<Im> ims, @JsonProperty(PHOTOS_FIELD) final List<Photo> photos, @JsonProperty(ADDRESSES_FIELD) final List<Address> addresses, @JsonProperty(GROUPS_FIELD) final List<GroupRef> groups, @JsonProperty(ENTITLEMENTS_FIELD) final List<Entitlement> entitlements, @JsonProperty(ROLES_FIELD) final List<Role> roles, @JsonProperty(X509_CERTIFICATES_FIELD) final List<X509Certificate> x509Certificates)": {
                "lineStart": 77,
                "lineEnd": 100
            }
        },
        "bae886c-CoreUserAttributes.java": {
            "com.sap.scimono.entity.definition.CoreUserAttributes.<init>(String attributeName, CoreUserAttributes parent)": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.scimName()": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.fullAttributePath()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.relativePath()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.subAttributeFrom(String childAttributeName)": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.getParent()": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.getSchemaId()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.isTopLevelAttribute()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "com.sap.scimono.entity.definition.CoreUserAttributes.from(String attributeName)": {
                "lineStart": 42,
                "lineEnd": 44
            }
        }
    },
    "CVE-2022-26595": {
        "c5678112cd862-SiteBrowserDisplayContext.java": {
            "com.liferay.site.browser.web.internal.display.context.SiteBrowserDisplayContext._getGroupParams()": {
                "lineStart": 335,
                "lineEnd": 389
            }
        },
        "6234a145f9c55-GroupLocalServiceImpl.java": {
            "com.liferay.portal.service.impl.GroupLocalServiceImpl.doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator)": {
                "lineStart": 1640,
                "lineEnd": 1837
            }
        }
    },
    "CVE-2021-32620": {
        "fb5b8327d4b-XWiki.java": {
            "com.xpn.xwiki.XWiki.validateUser(boolean withConfirmEmail, XWikiContext context)": {
                "lineStart": 2640,
                "lineEnd": 2680
            }
        }
    },
    "CVE-2020-2242": {
        "450d45b-AbstractRemoteDatabaseDescriptor.java": {
            "org.jenkinsci.plugins.database.AbstractRemoteDatabaseDescriptor.doValidate(@QueryParameter String hostname, @QueryParameter String database, @QueryParameter String username, @QueryParameter String password, @QueryParameter String properties)": {
                "lineStart": 18,
                "lineEnd": 32
            }
        },
        "36a51eb-GenericDatabase.java": {
            "org.jenkinsci.plugins.database.GenericDatabase$DescriptorImpl.doValidate(@QueryParameter String driver, @QueryParameter String url, @QueryParameter String username, @QueryParameter String password)": {
                "lineStart": 83,
                "lineEnd": 92
            },
            "org.jenkinsci.plugins.database.GenericDatabase$DescriptorImpl.doCheckDriver(@QueryParameter String value)": {
                "lineStart": 69,
                "lineEnd": 81
            }
        }
    },
    "CVE-2023-34040": {
        "03c57a72-AbstractMessageListenerContainer.java": {
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.<init>(ConsumerFactory<? super K, ? super V> consumerFactory, ContainerProperties containerProperties)": {
                "lineStart": 67,
                "lineEnd": 114
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setApplicationContext(ApplicationContext applicationContext)": {
                "lineStart": 116,
                "lineEnd": 118
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getApplicationContext()": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setBeanName(String name)": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getBeanName()": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher)": {
                "lineStart": 132,
                "lineEnd": 134
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getApplicationEventPublisher()": {
                "lineStart": 136,
                "lineEnd": 138
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setErrorHandler(ErrorHandler errorHandler)": {
                "lineStart": 140,
                "lineEnd": 144
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setGenericErrorHandler(@Nullable GenericErrorHandler<?> errorHandler)": {
                "lineStart": 146,
                "lineEnd": 150
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setBatchErrorHandler(BatchErrorHandler errorHandler)": {
                "lineStart": 152,
                "lineEnd": 156
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getGenericErrorHandler()": {
                "lineStart": 158,
                "lineEnd": 162
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getCommonErrorHandler()": {
                "lineStart": 164,
                "lineEnd": 166
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setCommonErrorHandler(@Nullable CommonErrorHandler commonErrorHandler)": {
                "lineStart": 168,
                "lineEnd": 170
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isStoppedNormally()": {
                "lineStart": 172,
                "lineEnd": 174
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setStoppedNormally(boolean stoppedNormally)": {
                "lineStart": 176,
                "lineEnd": 178
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isAutoStartup()": {
                "lineStart": 180,
                "lineEnd": 182
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setAutoStartup(boolean autoStartup)": {
                "lineStart": 184,
                "lineEnd": 186
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setRunning(boolean running)": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isRunning()": {
                "lineStart": 192,
                "lineEnd": 194
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isPaused()": {
                "lineStart": 196,
                "lineEnd": 198
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isPartitionPauseRequested(TopicPartition topicPartition)": {
                "lineStart": 200,
                "lineEnd": 202
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.pausePartition(TopicPartition topicPartition)": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.resumePartition(TopicPartition topicPartition)": {
                "lineStart": 208,
                "lineEnd": 210
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isPauseRequested()": {
                "lineStart": 212,
                "lineEnd": 214
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setPhase(int phase)": {
                "lineStart": 216,
                "lineEnd": 218
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getPhase()": {
                "lineStart": 220,
                "lineEnd": 222
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getAfterRollbackProcessor()": {
                "lineStart": 224,
                "lineEnd": 226
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setAfterRollbackProcessor(AfterRollbackProcessor<? super K, ? super V> afterRollbackProcessor)": {
                "lineStart": 228,
                "lineEnd": 231
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getContainerProperties()": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getGroupId()": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getListenerId()": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setMainListenerId(String id)": {
                "lineStart": 245,
                "lineEnd": 247
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getMainListenerId()": {
                "lineStart": 249,
                "lineEnd": 251
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getListenerInfo()": {
                "lineStart": 253,
                "lineEnd": 255
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setListenerInfo(@Nullable byte[] listenerInfo)": {
                "lineStart": 257,
                "lineEnd": 259
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setTopicCheckTimeout(int topicCheckTimeout)": {
                "lineStart": 261,
                "lineEnd": 263
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isChangeConsumerThreadName()": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setChangeConsumerThreadName(boolean changeConsumerThreadName)": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getThreadNameSupplier()": {
                "lineStart": 273,
                "lineEnd": 275
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setThreadNameSupplier(Function<MessageListenerContainer, String> threadNameSupplier)": {
                "lineStart": 277,
                "lineEnd": 280
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getKafkaAdmin()": {
                "lineStart": 282,
                "lineEnd": 284
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setKafkaAdmin(KafkaAdmin kafkaAdmin)": {
                "lineStart": 286,
                "lineEnd": 288
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getRecordInterceptor()": {
                "lineStart": 290,
                "lineEnd": 292
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setRecordInterceptor(RecordInterceptor<K, V> recordInterceptor)": {
                "lineStart": 294,
                "lineEnd": 296
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.getBatchInterceptor()": {
                "lineStart": 298,
                "lineEnd": 300
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setBatchInterceptor(BatchInterceptor<K, V> batchInterceptor)": {
                "lineStart": 302,
                "lineEnd": 304
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.isInterceptBeforeTx()": {
                "lineStart": 306,
                "lineEnd": 308
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setInterceptBeforeTx(boolean interceptBeforeTx)": {
                "lineStart": 310,
                "lineEnd": 312
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.setupMessageListener(Object messageListener)": {
                "lineStart": 314,
                "lineEnd": 316
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.start()": {
                "lineStart": 318,
                "lineEnd": 328
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics()": {
                "lineStart": 330,
                "lineEnd": 373
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.checkGroupId()": {
                "lineStart": 375,
                "lineEnd": 386
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.doStart()": {
                "lineStart": 388,
                "lineEnd": 388
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.stop()": {
                "lineStart": 389,
                "lineEnd": 391
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.stop(boolean wait)": {
                "lineStart": 393,
                "lineEnd": 418
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.pause()": {
                "lineStart": 420,
                "lineEnd": 422
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.resume()": {
                "lineStart": 424,
                "lineEnd": 426
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.stop(Runnable callback)": {
                "lineStart": 428,
                "lineEnd": 440
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.stopAbnormally(Runnable callback)": {
                "lineStart": 442,
                "lineEnd": 445
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.doStop(Runnable callback)": {
                "lineStart": 447,
                "lineEnd": 450
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.doStop(Runnable callback, boolean normal)": {
                "lineStart": 452,
                "lineEnd": 452
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.createSimpleLoggingConsumerRebalanceListener()": {
                "lineStart": 453,
                "lineEnd": 469
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.publishContainerStoppedEvent()": {
                "lineStart": 471,
                "lineEnd": 477
            },
            "org.springframework.kafka.listener.AbstractMessageListenerContainer.parentOrThis()": {
                "lineStart": 479,
                "lineEnd": 481
            }
        },
        "f4901ea1-ErrorHandlingUtils.java": {
            "org.springframework.kafka.listener.ErrorHandlingUtils.<init>()": {
                "lineStart": 19,
                "lineEnd": 20
            },
            "org.springframework.kafka.listener.ErrorHandlingUtils.retryBatch(Exception thrownException, ConsumerRecords<?, ?> records, Consumer<?, ?> consumer, MessageListenerContainer container, Runnable invokeListener, BackOff backOff, CommonErrorHandler seeker, BiConsumer<ConsumerRecords<?, ?>, Exception> recoverer, LogAccessor logger, KafkaException.Level logLevel, List<RetryListener> retryListeners, BinaryExceptionClassifier classifier)": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "org.springframework.kafka.listener.ErrorHandlingUtils.retryBatch(Exception thrownException, ConsumerRecords<?, ?> records, Consumer<?, ?> consumer, MessageListenerContainer container, Runnable invokeListener, BackOff backOff, CommonErrorHandler seeker, BiConsumer<ConsumerRecords<?, ?>, Exception> recoverer, LogAccessor logger, KafkaException.Level logLevel, List<RetryListener> retryListeners, BinaryExceptionClassifier classifier, boolean reClassifyOnExceptionChange)": {
                "lineStart": 26,
                "lineEnd": 129
            },
            "org.springframework.kafka.listener.ErrorHandlingUtils.listen(List<RetryListener> listeners, ConsumerRecords<?, ?> records, Exception thrownException, int attempt)": {
                "lineStart": 131,
                "lineEnd": 133
            },
            "org.springframework.kafka.listener.ErrorHandlingUtils.recordsToString(ConsumerRecords<?, ?> records)": {
                "lineStart": 135,
                "lineEnd": 140
            },
            "org.springframework.kafka.listener.ErrorHandlingUtils.unwrapIfNeeded(Exception exception)": {
                "lineStart": 142,
                "lineEnd": 153
            },
            "org.springframework.kafka.listener.ErrorHandlingUtils.findRootCause(Exception exception)": {
                "lineStart": 155,
                "lineEnd": 162
            }
        },
        "daa41eff-KafkaMessageListenerContainer.java": {
            "org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.<init>(GenericMessageListener<?> listener, ListenerType listenerType, ObservationRegistry observationRegistry)": {
                "lineStart": 629,
                "lineEnd": 703
            },
            "org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.findDeserializerClass(Map<String, Object> props, Properties consumerOverrides, boolean isValue)": {
                "lineStart": 1032,
                "lineEnd": 1047
            },
            "org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.checkDeserializer(@Nullable Object deser)": {
                "lineStart": 1075,
                "lineEnd": 1099
            }
        }
    },
    "CVE-2021-39234": {
        "43213a9849-OmKeyInfo.java": {
            "org.apache.hadoop.ozone.om.helpers.OmKeyInfo.updateLocationInfoList(List<OmKeyLocationInfo> locationInfoList, boolean isMpu)": {
                "lineStart": 97,
                "lineEnd": 104
            }
        }
    },
    "CVE-2020-1928": {
        "2f28086356-ExpressionLanguageAgnosticParameterParser.java": {
            "org.apache.nifi.parameter.ExpressionLanguageAgnosticParameterParser.parseTokens(final String input)": {
                "lineStart": 9,
                "lineEnd": 43
            }
        },
        "79dddcfa55-ExpressionLanguageAwareParameterParser.java": {
            "org.apache.nifi.parameter.ExpressionLanguageAwareParameterParser.parseTokens(final String input)": {
                "lineStart": 10,
                "lineEnd": 74
            }
        }
    },
    "CVE-2021-23265": {
        "0000000-NonLockingCacheTemplate.java": {
            "org.apache.nifi.parameter.ExpressionLanguageAwareParameterParser.parseTokens(final String input)": {
                "lineStart": 10,
                "lineEnd": 74
            }
        }
    },
    "CVE-2024-36263": {
        "5a3f9b8b-SubmarineServer.java": {
            "org.apache.submarine.server.SubmarineServer.main(String[] args)": {
                "lineStart": 67,
                "lineEnd": 97
            }
        }
    },
    "CVE-2021-44667": {
        "ea9258c60-ConsoleConfig.java": {
            "com.alibaba.nacos.console.config.ConsoleConfig.init()": {
                "lineStart": 16,
                "lineEnd": 21
            },
            "com.alibaba.nacos.console.config.ConsoleConfig.corsFilter()": {
                "lineStart": 23,
                "lineEnd": 33
            },
            "com.alibaba.nacos.console.config.ConsoleConfig.jacksonObjectMapperCustomization()": {
                "lineStart": 35,
                "lineEnd": 37
            }
        }
    },
    "CVE-2023-43666": {
        "8d5d39f60-UserController.java": {
            "org.apache.inlong.manager.web.controller.UserController.delete(@RequestParam(\"id\") Integer id)": {
                "lineStart": 60,
                "lineEnd": 65
            },
            "org.apache.inlong.manager.web.controller.UserController.getByName(@PathVariable String name)": {
                "lineStart": 44,
                "lineEnd": 47
            },
            "org.apache.inlong.manager.web.controller.UserController.list(@RequestBody UserRequest request)": {
                "lineStart": 49,
                "lineEnd": 52
            }
        }
    },
    "CVE-2024-36121": {
        "9662bd7-BoringSSLAEADContext.java": {
            "io.netty.incubator.codec.hpke.boringssl.BoringSSLAEADContext$Nonce.incrementSequence()": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "io.netty.incubator.codec.hpke.boringssl.BoringSSLAEADContext$Nonce.<init>(byte[] baseNonce)": {
                "lineStart": 78,
                "lineEnd": 81
            }
        },
        "d32d603-BoringSSLCryptoOperation.java": {
            "io.netty.incubator.codec.hpke.boringssl.BoringSSLCryptoOperation.execute(long ctx, ByteBufAllocator alloc, ByteBuf aad, ByteBuf in, ByteBuf out)": {
                "lineStart": 5,
                "lineEnd": 40
            }
        }
    },
    "CVE-2020-2132": {
        "2cd4697-EnvironmentManagerBuilder.java": {
            "com.parasoft.environmentmanager.jenkins.EnvironmentManagerBuilder.<init>(int systemId, int environmentId, int instanceId, boolean copyToServer, String newEnvironmentName, String serverType, int serverId, String serverHost, String serverName, boolean copyDataRepo, String repoType, String repoHost, int repoPort, String repoUsername, String repoPassword, boolean abortOnFailure)": {
                "lineStart": 47,
                "lineEnd": 65
            },
            "com.parasoft.environmentmanager.jenkins.EnvironmentManagerBuilder.getRepoPassword()": {
                "lineStart": 131,
                "lineEnd": 133
            }
        }
    },
    "CVE-2021-29481": {
        "480bfd0ac-ClientSideSessionConfig.java": {
            "ratpack.session.clientside.ClientSideSessionConfig.setSecretKey(String secretKey)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "ratpack.session.clientside.ClientSideSessionConfig.setCipherAlgorithm(String cipherAlgorithm)": {
                "lineStart": 52,
                "lineEnd": 54
            }
        },
        "a1bb4a327-ClientSideSessionModule.java": {
            "ratpack.session.clientside.ClientSideSessionModule.signer(ClientSideSessionConfig config)": {
                "lineStart": 19,
                "lineEnd": 23
            },
            "ratpack.session.clientside.ClientSideSessionModule.crypto(ClientSideSessionConfig config)": {
                "lineStart": 25,
                "lineEnd": 34
            }
        }
    },
    "CVE-2023-35701": {
        "146bc63a5e-HiveJdbcBrowserClient.java": {
            "org.apache.hive.jdbc.saml.HiveJdbcBrowserClient.openBrowserWindow()": {
                "lineStart": 164,
                "lineEnd": 195
            }
        },
        "40e057570e-HiveJdbcSamlRedirectStrategy.java": {
            "org.apache.hive.jdbc.saml.HiveJdbcSamlRedirectStrategy.<init>(IJdbcBrowserClient browserClient)": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "org.apache.hive.jdbc.saml.HiveJdbcSamlRedirectStrategy.isRedirected(final HttpRequest request, final HttpResponse response, final HttpContext context)": {
                "lineStart": 20,
                "lineEnd": 30
            }
        },
        "a612583830-IJdbcBrowserClient.java": {
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient.startListening()": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient.doBrowserSSO()": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient.init(JdbcBrowserClientContext context)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient.getPort()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient.getServerResponse()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient.getClientIdentifier()": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$JdbcBrowserClientContext.<init>(URI ssoUrl, String clientIdentifier)": {
                "lineStart": 22,
                "lineEnd": 25
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$JdbcBrowserClientContext.getSsoUri()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$JdbcBrowserClientContext.getClientIdentifier()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserException.<init>(String msg, Throwable ex)": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserException.<init>(String msg)": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserException.<init>(Throwable e)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserServerResponse.<init>(boolean status, String msg, String token)": {
                "lineStart": 57,
                "lineEnd": 61
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserServerResponse.getMsg()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserServerResponse.isSuccessful()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserServerResponse.getToken()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.apache.hive.jdbc.saml.IJdbcBrowserClient$HiveJdbcBrowserServerResponse.isValid()": {
                "lineStart": 75,
                "lineEnd": 77
            }
        }
    },
    "CVE-2022-29631": {
        "544dd86-HttpRequest.java": {
            "jodd.http.HttpRequest.path(String path)": {
                "lineStart": 195,
                "lineEnd": 225
            }
        }
    },
    "CVE-2022-1438": {
        "8f70a78b84-AuthenticationProcessor.java": {
            "org.keycloak.authentication.AuthenticationProcessor.attachSession(AuthenticationSessionModel authSession, UserSessionModel userSession, KeycloakSession session, RealmModel realm, ClientConnection connection, EventBuilder event)": {
                "lineStart": 881,
                "lineEnd": 918
            }
        }
    },
    "CVE-2020-14062": {
        "20bbf2059-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 104,
                "lineEnd": 104
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 105,
                "lineEnd": 105
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": {
                "lineStart": 106,
                "lineEnd": 138
            }
        }
    },
    "CVE-2023-25765": {
        "5a58bab1-AbstractEvalContent.java": {
            "hudson.plugins.emailext.plugins.content.AbstractEvalContent.getManagedFile(Run<?, ?> run, String fileName)": {
                "lineStart": 116,
                "lineEnd": 137
            },
            "hudson.plugins.emailext.plugins.content.AbstractEvalContent.isApprovedScript(final String script, final Language language)": {
                "lineStart": 147,
                "lineEnd": 160
            }
        },
        "6512e614-ScriptContent.java": {
            "hudson.plugins.emailext.plugins.content.ScriptContent.renderTemplate(Run<?, ?> build, FilePath workspace, TaskListener listener, InputStream templateStream)": {
                "lineStart": 106,
                "lineEnd": 160
            }
        }
    },
    "CVE-2020-8908": {
        "a23cd96b39-Files.java": {
            "com.google.common.io.Files.<init>()": {
                "lineStart": 41,
                "lineEnd": 41
            },
            "com.google.common.io.Files.newReader(File file, Charset charset)": {
                "lineStart": 42,
                "lineEnd": 46
            },
            "com.google.common.io.Files.newWriter(File file, Charset charset)": {
                "lineStart": 48,
                "lineEnd": 52
            },
            "com.google.common.io.Files.asByteSource(File file)": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "com.google.common.io.Files$FileByteSource.<init>(File file)": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "com.google.common.io.Files$FileByteSource.openStream()": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "com.google.common.io.Files$FileByteSource.sizeIfKnown()": {
                "lineStart": 68,
                "lineEnd": 76
            },
            "com.google.common.io.Files$FileByteSource.size()": {
                "lineStart": 78,
                "lineEnd": 84
            },
            "com.google.common.io.Files$FileByteSource.read()": {
                "lineStart": 86,
                "lineEnd": 99
            },
            "com.google.common.io.Files$FileByteSource.toString()": {
                "lineStart": 101,
                "lineEnd": 103
            },
            "com.google.common.io.Files.asByteSink(File file, FileWriteMode... modes)": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "com.google.common.io.Files$FileByteSink.<init>(File file, FileWriteMode... modes)": {
                "lineStart": 114,
                "lineEnd": 117
            },
            "com.google.common.io.Files$FileByteSink.openStream()": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "com.google.common.io.Files$FileByteSink.toString()": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "com.google.common.io.Files.asCharSource(File file, Charset charset)": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "com.google.common.io.Files.asCharSink(File file, Charset charset, FileWriteMode... modes)": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "com.google.common.io.Files.toByteArray(File file)": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "com.google.common.io.Files.toString(File file, Charset charset)": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "com.google.common.io.Files.write(byte[] from, File to)": {
                "lineStart": 145,
                "lineEnd": 147
            },
            "com.google.common.io.Files.write(CharSequence from, File to, Charset charset)": {
                "lineStart": 149,
                "lineEnd": 151
            },
            "com.google.common.io.Files.copy(File from, OutputStream to)": {
                "lineStart": 153,
                "lineEnd": 155
            },
            "com.google.common.io.Files.copy(File from, File to)": {
                "lineStart": 157,
                "lineEnd": 160
            },
            "com.google.common.io.Files.copy(File from, Charset charset, Appendable to)": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "com.google.common.io.Files.append(CharSequence from, File to, Charset charset)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "com.google.common.io.Files.equal(File file1, File file2)": {
                "lineStart": 170,
                "lineEnd": 184
            },
            "com.google.common.io.Files.createTempDir()": {
                "lineStart": 186,
                "lineEnd": 199
            },
            "com.google.common.io.Files.touch(File file)": {
                "lineStart": 201,
                "lineEnd": 207
            },
            "com.google.common.io.Files.createParentDirs(File file)": {
                "lineStart": 209,
                "lineEnd": 221
            },
            "com.google.common.io.Files.move(File from, File to)": {
                "lineStart": 223,
                "lineEnd": 239
            },
            "com.google.common.io.Files.readFirstLine(File file, Charset charset)": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "com.google.common.io.Files.readLines(File file, Charset charset)": {
                "lineStart": 245,
                "lineEnd": 259
            },
            "com.google.common.io.Files.readLines(File file, Charset charset, LineProcessor<T> callback)": {
                "lineStart": 261,
                "lineEnd": 263
            },
            "com.google.common.io.Files.readBytes(File file, ByteProcessor<T> processor)": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "com.google.common.io.Files.hash(File file, HashFunction hashFunction)": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "com.google.common.io.Files.map(File file)": {
                "lineStart": 273,
                "lineEnd": 276
            },
            "com.google.common.io.Files.map(File file, MapMode mode)": {
                "lineStart": 278,
                "lineEnd": 280
            },
            "com.google.common.io.Files.map(File file, MapMode mode, long size)": {
                "lineStart": 282,
                "lineEnd": 285
            },
            "com.google.common.io.Files.mapInternal(File file, MapMode mode, long size)": {
                "lineStart": 287,
                "lineEnd": 303
            },
            "com.google.common.io.Files.simplifyPath(String pathname)": {
                "lineStart": 305,
                "lineEnd": 349
            },
            "com.google.common.io.Files.getFileExtension(String fullName)": {
                "lineStart": 351,
                "lineEnd": 356
            },
            "com.google.common.io.Files.getNameWithoutExtension(String file)": {
                "lineStart": 358,
                "lineEnd": 363
            },
            "com.google.common.io.Files.fileTreeTraverser()": {
                "lineStart": 365,
                "lineEnd": 368
            },
            "com.google.common.io.Files.fileTraverser()": {
                "lineStart": 380,
                "lineEnd": 382
            },
            "com.google.common.io.Files.fileTreeChildren(File file)": {
                "lineStart": 390,
                "lineEnd": 400
            },
            "com.google.common.io.Files.isDirectory()": {
                "lineStart": 402,
                "lineEnd": 404
            },
            "com.google.common.io.Files.isFile()": {
                "lineStart": 406,
                "lineEnd": 408
            }
        }
    },
    "CVE-2023-39685": {
        "d80226d-HjsonParser.java": {
            "org.hjson.HjsonParser.readMlString()": {
                "lineStart": 230,
                "lineEnd": 277
            }
        }
    },
    "CVE-2021-39231": {
        "c7aa299172-AbstractDatanodeStore.java": {
            "org.apache.hadoop.ozone.container.metadata.AbstractDatanodeStore.<init>(ConfigurationSource config, long containerID, AbstractDatanodeDBDefinition dbDef, boolean openReadOnly)": {
                "lineStart": 48,
                "lineEnd": 59
            },
            "org.apache.hadoop.ozone.container.metadata.AbstractDatanodeStore.getColumnFamilyOptionsCache()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "org.apache.hadoop.ozone.container.metadata.AbstractDatanodeStore.getDbProfile()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.apache.hadoop.ozone.container.metadata.AbstractDatanodeStore.buildColumnFamilyOptions(ConfigurationSource config)": {
                "lineStart": 151,
                "lineEnd": 156
            }
        },
        "442fd25a19-DBProfile.java": {
            "org.apache.hadoop.hdds.utils.db.DBProfile.toLong(double value)": {
                "lineStart": 49,
                "lineEnd": 52
            },
            "org.apache.hadoop.hdds.utils.db.DBProfile.getDBOptions()": {
                "lineStart": 54,
                "lineEnd": 54
            },
            "org.apache.hadoop.hdds.utils.db.DBProfile.getColumnFamilyOptions()": {
                "lineStart": 55,
                "lineEnd": 55
            }
        },
        "c67238d353-RDBStore.java": {
            "org.apache.hadoop.hdds.utils.db.RDBStore.<init>(File dbFile, DBOptions options, Set<TableConfig> families)": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.<init>(File dbFile, DBOptions options, WriteOptions writeOptions, Set<TableConfig> families, CodecRegistry registry, boolean readOnly)": {
                "lineStart": 48,
                "lineEnd": 117
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getColumnFamiliesInExistingDb()": {
                "lineStart": 119,
                "lineEnd": 127
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.compactDB()": {
                "lineStart": 129,
                "lineEnd": 140
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.close()": {
                "lineStart": 142,
                "lineEnd": 165
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.move(K key, Table<K, V> source, Table<K, V> dest)": {
                "lineStart": 167,
                "lineEnd": 175
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.move(K key, V value, Table<K, V> source, Table<K, V> dest)": {
                "lineStart": 177,
                "lineEnd": 179
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.move(K sourceKey, K destKey, V value, Table<K, V> source, Table<K, V> dest)": {
                "lineStart": 181,
                "lineEnd": 188
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getEstimatedKeyCount()": {
                "lineStart": 190,
                "lineEnd": 198
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.initBatchOperation()": {
                "lineStart": 200,
                "lineEnd": 202
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.commitBatchOperation(BatchOperation operation)": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getStatMBeanName()": {
                "lineStart": 208,
                "lineEnd": 210
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getTable(String name)": {
                "lineStart": 212,
                "lineEnd": 219
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getTable(String name, Class<K> keyType, Class<V> valueType)": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getTable(String name, Class<K> keyType, Class<V> valueType, TableCache.CacheType cacheType)": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.listTables()": {
                "lineStart": 229,
                "lineEnd": 236
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.flushDB()": {
                "lineStart": 238,
                "lineEnd": 247
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.flushLog(boolean sync)": {
                "lineStart": 249,
                "lineEnd": 260
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getCheckpoint(boolean flush)": {
                "lineStart": 262,
                "lineEnd": 268
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getDbLocation()": {
                "lineStart": 270,
                "lineEnd": 272
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getTableNames()": {
                "lineStart": 274,
                "lineEnd": 288
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getCodecRegistry()": {
                "lineStart": 290,
                "lineEnd": 292
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getUpdatesSince(long sequenceNumber)": {
                "lineStart": 294,
                "lineEnd": 322
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getDb()": {
                "lineStart": 324,
                "lineEnd": 326
            },
            "org.apache.hadoop.hdds.utils.db.RDBStore.getMetrics()": {
                "lineStart": 328,
                "lineEnd": 330
            }
        }
    },
    "CVE-2020-7238": {
        "28f048252f-HttpObjectDecoder.java": {
            "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": {
                "lineStart": 400,
                "lineEnd": 455
            }
        }
    },
    "CVE-2020-2140": {
        "627171f-AuditTrailPlugin.java": {
            "hudson.plugins.audit_trail.AuditTrailPlugin.doRegexCheck(@QueryParameter final String value)": {
                "lineStart": 102,
                "lineEnd": 111
            }
        }
    },
    "CVE-2022-36892": {
        "be70f9a-RhnPush.java": {
            "jenkins.plugins.rhnpush.RhnPush$RpmPublisherDescriptor.doCheckIncludes(@AncestorInPath AbstractProject project, @QueryParameter String value)": {
                "lineStart": 285,
                "lineEnd": 297
            }
        }
    },
    "CVE-2022-39312": {
        "7c0378ace-MysqlConfiguration.java": {
            "io.dataease.dto.datasource.MysqlConfiguration.getJdbc()": {
                "lineStart": 9,
                "lineEnd": 17
            }
        }
    },
    "CVE-2021-28657": {
        "12d0f2d29-LyricsHandler.java": {
            "org.apache.tika.parser.mp3.LyricsHandler.<init>(byte[] tagData)": {
                "lineStart": 17,
                "lineEnd": 53
            }
        }
    },
    "CVE-2022-41954": {
        "8a4dd83264-FileHelper.java": {
            "net.sf.mpxj.common.FileHelper.createTempDir()": {
                "lineStart": 50,
                "lineEnd": 55
            }
        },
        "7bcffc7bca-InputStreamHelper.java": {
            "net.sf.mpxj.common.InputStreamHelper.writeStreamToTempFile(InputStream inputStream, String tempFileSuffix)": {
                "lineStart": 10,
                "lineEnd": 35
            }
        }
    },
    "CVE-2021-40369": {
        "8c253213f-Denounce.java": {
            "org.apache.wiki.plugin.Denounce.execute(final Context context, final Map<String, String> params)": {
                "lineStart": 83,
                "lineEnd": 102
            }
        }
    },
    "CVE-2023-3426": {
        "b24a5628b919c-OrganizationItemSelectorView.java": {
            "com.liferay.organizations.item.selector.web.internal.OrganizationItemSelectorView.renderHTML(ServletRequest servletRequest, ServletResponse servletResponse, OrganizationItemSelectorCriterion organizationItemSelectorCriterion, PortletURL portletURL, String itemSelectedEventName, boolean search)": {
                "lineStart": 37,
                "lineEnd": 41
            }
        },
        "561c40397f078-OrganizationItemSelectorViewDisplayContext.java": {
            "com.liferay.organizations.item.selector.web.internal.display.context.OrganizationItemSelectorViewDisplayContext.<init>(OrganizationItemSelectorCriterion organizationItemSelectorCriterion, OrganizationLocalService organizationLocalService, UsersAdmin usersAdmin, HttpServletRequest httpServletRequest, PortletURL portletURL)": {
                "lineStart": 21,
                "lineEnd": 28
            },
            "com.liferay.organizations.item.selector.web.internal.display.context.OrganizationItemSelectorViewDisplayContext.getSearchContainer()": {
                "lineStart": 38,
                "lineEnd": 52
            }
        }
    },
    "CVE-2022-29049": {
        "0331d64-PromotionsExtensionPoint.java": {
            "hudson.plugins.promoted_builds.integrations.jobdsl.PromotionsExtensionPoint.notifyItemCreated(Item item, DslEnvironment dslEnvironment, boolean update)": {
                "lineStart": 54,
                "lineEnd": 101
            }
        }
    },
    "CVE-2020-4070": {
        "33fd3544-StyleSheetParser.java": {
            "org.w3c.css.css.StyleSheetParser.parseURL(ApplContext ac, URL url, String title, String kind, String media, int origin)": {
                "lineStart": 121,
                "lineEnd": 185
            }
        }
    },
    "CVE-2021-21639": {
        "c709fa2d4a-Computer.java": {
            "hudson.model.Computer.updateByXml(final InputStream source)": {
                "lineStart": 899,
                "lineEnd": 903
            }
        }
    },
    "CVE-2024-2419": {
        "b2202e2ed7-DefaultClientValidationProvider.java": {
            "org.keycloak.validation.DefaultClientValidationProvider.validateUrls(ValidationContext<ClientModel> context)": {
                "lineStart": 91,
                "lineEnd": 105
            }
        }
    },
    "CVE-2021-33324": {
        "751f6f272ddef-LayoutLocalServiceImpl.java": {
            "com.liferay.portal.service.impl.LayoutLocalServiceImpl.getLayoutsCount(Group group, long userId, boolean privateLayout, String keywords, String[] types)": {
                "lineStart": 763,
                "lineEnd": 769
            }
        },
        "aa33a24cfd4e5-LayoutServiceImpl.java": {
            "com.liferay.portal.service.impl.LayoutServiceImpl.getLayoutsCount(Group group, boolean privateLayout, String keywords, String[] types)": {
                "lineStart": 310,
                "lineEnd": 314
            }
        }
    },
    "CVE-2022-36886": {
        "4477029-ExternalJob.java": {
            "hudson.model.ExternalJob.<init>(String name)": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "hudson.model.ExternalJob.<init>(ItemGroup parent, String name)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "hudson.model.ExternalJob.reload()": {
                "lineStart": 22,
                "lineEnd": 31
            },
            "hudson.model.ExternalJob.newBuild()": {
                "lineStart": 33,
                "lineEnd": 39
            },
            "hudson.model.ExternalJob.doAcceptBuildResult(StaplerResponse rsp)": {
                "lineStart": 41,
                "lineEnd": 44
            },
            "hudson.model.ExternalJob.doPostBuildResult(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 46,
                "lineEnd": 50
            },
            "hudson.model.ExternalJob.getDescriptor()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "hudson.model.ExternalJob.getPronoun()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "hudson.model.ExternalJob$DescriptorImpl.getDisplayName()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "hudson.model.ExternalJob$DescriptorImpl.getCategoryId()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "hudson.model.ExternalJob$DescriptorImpl.getDescription()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "hudson.model.ExternalJob$DescriptorImpl.getIconFilePathPattern()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "hudson.model.ExternalJob$DescriptorImpl.newInstance(ItemGroup parent, String name)": {
                "lineStart": 78,
                "lineEnd": 80
            }
        }
    },
    "CVE-2022-45685": {
        "4ce90a8-JSONTokener.java": {
            "org.codehaus.jettison.json.JSONTokener.nextClean()": {
                "lineStart": 82,
                "lineEnd": 128
            }
        }
    },
    "CVE-2020-2324": {
        "12a85cb-CVSChangeLogSet.java": {
            "hudson.scm.CVSChangeLogSet.parseFile(final java.io.File f)": {
                "lineStart": 73,
                "lineEnd": 126
            }
        }
    },
    "CVE-2023-24428": {
        "d57b8c0-BitbucketSecurityRealm.java": {
            "org.jenkinsci.plugins.BitbucketSecurityRealm.doCommenceLogin(StaplerRequest request, @Header(\"Referer\") final String referer)": {
                "lineStart": 87,
                "lineEnd": 102
            },
            "org.jenkinsci.plugins.BitbucketSecurityRealm.doFinishLogin(StaplerRequest request)": {
                "lineStart": 104,
                "lineEnd": 139
            }
        },
        "7aae3b1-BitbucketApiService.java": {
            "org.jenkinsci.plugins.api.BitbucketApiService.createAuthorizationCodeURL(Token requestToken)": {
                "lineStart": 42,
                "lineEnd": 44
            }
        }
    },
    "CVE-2023-23848": {
        "86e5475-SynopsysCoverityCredentialsHelper.java": {
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.<init>(IntLogger logger, JenkinsWrapper jenkinsWrapper)": {
                "lineStart": 29,
                "lineEnd": 33
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.silentHelper(JenkinsWrapper jenkinsWrapper)": {
                "lineStart": 35,
                "lineEnd": 37
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.listSupportedCredentials()": {
                "lineStart": 39,
                "lineEnd": 49
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getAuthenticationKeyFileCredentialsById(String credentialsId)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getCoverityUsernameById(String credentialsId)": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getCoverityPassphraseById(String credentialsId)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper.getIntegrationCredentialsById(String credentialsId)": {
                "lineStart": 63,
                "lineEnd": 86
            }
        },
        "02a2214-CheckForIssuesInView.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView$DescriptorImpl.doFillViewNameItems(@RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 49,
                "lineEnd": 55
            },
            "com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView$DescriptorImpl.<init>()": {
                "lineStart": 42,
                "lineEnd": 47
            }
        },
        "50dc6c1-CoverityBuildStep.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 192,
                "lineEnd": 194
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 196,
                "lineEnd": 198
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 200,
                "lineEnd": 206
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 208,
                "lineEnd": 217
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 219,
                "lineEnd": 221
            },
            "com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep$DescriptorImpl.doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName, @QueryParameter(FIELD_STREAM_NAME) String streamName)": {
                "lineStart": 223,
                "lineEnd": 232
            }
        },
        "f97a88d-CoverityConnectInstance.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.global.CoverityConnectInstance$DescriptorImpl.doFillDefaultCredentialsIdItems()": {
                "lineStart": 143,
                "lineEnd": 145
            }
        },
        "10e6c31-CheckForIssuesStep.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 186,
                "lineEnd": 192
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 194,
                "lineEnd": 196
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doFillViewNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 198,
                "lineEnd": 204
            },
            "com.synopsys.integration.jenkins.coverity.extensions.pipeline.CheckForIssuesStep$DescriptorImpl.doCheckViewName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 206,
                "lineEnd": 208
            }
        },
        "a0c8818-CoverityEnvironmentWrapper.java": {
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillCoverityInstanceUrlItems()": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 201,
                "lineEnd": 203
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillCredentialsIdItems()": {
                "lineStart": 205,
                "lineEnd": 207
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 209,
                "lineEnd": 215
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName)": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doFillViewNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(\"updateNow\") boolean updateNow)": {
                "lineStart": 229,
                "lineEnd": 235
            },
            "com.synopsys.integration.jenkins.coverity.extensions.wrap.CoverityEnvironmentWrapper$DescriptorImpl.doCheckViewName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId)": {
                "lineStart": 237,
                "lineEnd": 239
            }
        }
    },
    "CVE-2024-28847": {
        "e1faf1c191-AlertUtil.java": {
            "org.openmetadata.service.events.subscription.AlertUtil.evaluateAlertConditions(ChangeEvent changeEvent, List<EventFilterRule> alertFilterRules)": {
                "lineStart": 153,
                "lineEnd": 168
            }
        },
        "5a0d45053d-EventSubscriptionResource.java": {
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.triggerDataInsightJob(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @Parameter(description = \"Id of the event Subscription\", schema = @Schema(type = \"UUID\")) @PathParam(\"id\") UUID id)": {
                "lineStart": 171,
                "lineEnd": 176
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.listEventSubscriptionFunctions(@Context UriInfo uriInfo, @Context SecurityContext securityContext)": {
                "lineStart": 228,
                "lineEnd": 231
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.listEventSubResources(@Context UriInfo uriInfo, @Context SecurityContext securityContext)": {
                "lineStart": 233,
                "lineEnd": 236
            },
            "org.openmetadata.service.resources.events.subscription.EventSubscriptionResource.validateCondition(@Context UriInfo uriInfo, @Context SecurityContext securityContext, @Parameter(description = \"Expression to validate\", schema = @Schema(type = \"string\")) @PathParam(\"expression\") String expression)": {
                "lineStart": 238,
                "lineEnd": 241
            }
        },
        "27606503c1-JwtFilter.java": {
            "org.openmetadata.service.security.JwtFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 71,
                "lineEnd": 101
            }
        },
        "5fd336372f-CompiledRule.java": {
            "org.openmetadata.service.security.policyevaluator.CompiledRule.validateExpression(String condition, Class<T> clz)": {
                "lineStart": 42,
                "lineEnd": 58
            },
            "org.openmetadata.service.security.policyevaluator.CompiledRule.matchExpression(PolicyContext policyContext, SubjectContext subjectContext, ResourceContextInterface resourceContext)": {
                "lineStart": 181,
                "lineEnd": 190
            }
        }
    },
    "CVE-2023-31066": {
        "286912cf1-StreamSourceServiceImpl.java": {
            "org.apache.inlong.manager.service.source.StreamSourceServiceImpl.save(SourceRequest request, String operator)": {
                "lineStart": 61,
                "lineEnd": 84
            },
            "org.apache.inlong.manager.service.source.StreamSourceServiceImpl.update(SourceRequest request, String operator)": {
                "lineStart": 273,
                "lineEnd": 288
            },
            "org.apache.inlong.manager.service.source.StreamSourceServiceImpl.delete(Integer id, String operator)": {
                "lineStart": 321,
                "lineEnd": 350
            },
            "org.apache.inlong.manager.service.source.StreamSourceServiceImpl.restart(Integer id, String operator)": {
                "lineStart": 396,
                "lineEnd": 407
            },
            "org.apache.inlong.manager.service.source.StreamSourceServiceImpl.stop(Integer id, String operator)": {
                "lineStart": 409,
                "lineEnd": 420
            }
        },
        "8e8b566eb-StreamSourceController.java": {
            "org.apache.inlong.manager.web.controller.StreamSourceController.get(@PathVariable Integer id)": {
                "lineStart": 36,
                "lineEnd": 41
            }
        }
    },
    "CVE-2023-26475": {
        "a9c0e86612a-XWikiCommentsDocumentInitializer.java": {
            "com.xpn.xwiki.internal.mandatory.XWikiCommentsDocumentInitializer.createClass(BaseClass xclass)": {
                "lineStart": 20,
                "lineEnd": 28
            }
        }
    },
    "CVE-2021-39233": {
        "e03e9287ef-HddsUtils.java": {
            "org.apache.hadoop.hdds.HddsUtils.isReadOnly(ContainerProtos.ContainerCommandRequestProto proto)": {
                "lineStart": 225,
                "lineEnd": 249
            },
            "org.apache.hadoop.hdds.HddsUtils.requireBlockToken(ContainerProtos.Type cmdType)": {
                "lineStart": 251,
                "lineEnd": 263
            },
            "org.apache.hadoop.hdds.HddsUtils.requireContainerToken(ContainerProtos.Type cmdType)": {
                "lineStart": 265,
                "lineEnd": 277
            },
            "org.apache.hadoop.hdds.HddsUtils.getBlockID(ContainerCommandRequestProto msg)": {
                "lineStart": 279,
                "lineEnd": 320
            }
        },
        "a43cd2c971-BlockTokenVerifier.java": {
            "org.apache.hadoop.hdds.security.token.BlockTokenVerifier.getService(ContainerCommandRequestProto cmd)": {
                "lineStart": 40,
                "lineEnd": 44
            },
            "org.apache.hadoop.hdds.security.token.BlockTokenVerifier.verify(OzoneBlockTokenIdentifier tokenId, ContainerCommandRequestProto cmd)": {
                "lineStart": 46,
                "lineEnd": 64
            }
        },
        "ce10c25fb0-CompositeTokenVerifier.java": {
            "org.apache.hadoop.hdds.security.token.CompositeTokenVerifier.verify(String user, Token<?> token, ContainerCommandRequestProto cmd)": {
                "lineStart": 13,
                "lineEnd": 18
            }
        },
        "806a9ae56d-ContainerTokenVerifier.java": {
            "org.apache.hadoop.hdds.security.token.ContainerTokenVerifier.getService(ContainerCommandRequestProto cmd)": {
                "lineStart": 21,
                "lineEnd": 23
            }
        },
        "b86b906e97-NoopTokenVerifier.java": {
            "org.apache.hadoop.hdds.security.token.NoopTokenVerifier.verify(String user, Token<?> token, ContainerCommandRequestProto cmd)": {
                "lineStart": 5,
                "lineEnd": 6
            },
            "org.apache.hadoop.hdds.security.token.NoopTokenVerifier.verify(ContainerCommandRequestProto cmd, String user, String encodedToken)": {
                "lineStart": 8,
                "lineEnd": 9
            }
        },
        "dc89d0b64f-ShortLivedTokenVerifier.java": {
            "org.apache.hadoop.hdds.security.token.ShortLivedTokenVerifier.verify(T tokenId, ContainerCommandRequestProto cmd)": {
                "lineStart": 28,
                "lineEnd": 29
            },
            "org.apache.hadoop.hdds.security.token.ShortLivedTokenVerifier.verify(String user, Token<?> token, ContainerCommandRequestProto cmd)": {
                "lineStart": 31,
                "lineEnd": 78
            }
        },
        "b2a5ae54c3-TokenVerifier.java": {
            "org.apache.hadoop.hdds.security.token.TokenVerifier.verify(ContainerCommandRequestProto cmd, String user, String encodedToken)": {
                "lineStart": 15,
                "lineEnd": 29
            }
        }
    },
    "CVE-2021-21644": {
        "346de2f-ConfigFilesManagement.java": {
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doSaveConfig(StaplerRequest req)": {
                "lineStart": 84,
                "lineEnd": 100
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doShow(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String configId)": {
                "lineStart": 102,
                "lineEnd": 108
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doEditConfig(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"id\") String configId)": {
                "lineStart": 110,
                "lineEnd": 117
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doAddConfig(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"providerId\") String providerId, @QueryParameter(\"configId\") String configId)": {
                "lineStart": 119,
                "lineEnd": 161
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doSelectProvider(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 163,
                "lineEnd": 168
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.doRemoveConfig(StaplerRequest res, StaplerResponse rsp, @QueryParameter(\"id\") String configId)": {
                "lineStart": 174,
                "lineEnd": 178
            },
            "org.jenkinsci.plugins.configfiles.ConfigFilesManagement.getTarget()": {
                "lineStart": 199,
                "lineEnd": 202
            }
        },
        "017c463-ManagedFile.java": {
            "org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile$DescriptorImpl.doFillFileIdItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 64,
                "lineEnd": 72
            },
            "org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile$DescriptorImpl.doCheckFileId(StaplerRequest req, @AncestorInPath Item context, @QueryParameter String fileId)": {
                "lineStart": 74,
                "lineEnd": 83
            }
        },
        "b4b6112-FolderConfigFileAction.java": {
            "org.jenkinsci.plugins.configfiles.folder.FolderConfigFileAction.doCheckConfigId(@QueryParameter(\"configId\") String configId)": {
                "lineStart": 211,
                "lineEnd": 228
            }
        },
        "0d3fca0-MvnGlobalSettingsProvider.java": {
            "org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider$DescriptorImpl.doFillSettingsConfigIdItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 110,
                "lineEnd": 118
            }
        },
        "f740060-MvnSettingsProvider.java": {
            "org.jenkinsci.plugins.configfiles.maven.job.MvnSettingsProvider$DescriptorImpl.doFillSettingsConfigIdItems(@AncestorInPath ItemGroup context)": {
                "lineStart": 113,
                "lineEnd": 121
            }
        }
    },
    "CVE-2023-25753": {
        "93c4496df-SandboxServiceImpl.java": {
            "org.apache.shenyu.admin.service.impl.SandboxServiceImpl.<init>(final AppAuthService appAuthService)": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.apache.shenyu.admin.service.impl.SandboxServiceImpl.requestProxyGateway(final ProxyGatewayDTO proxyGatewayDTO, final HttpServletRequest request, final HttpServletResponse response)": {
                "lineStart": 42,
                "lineEnd": 75
            }
        },
        "39ac1b979-UriUtils.java": {
            "org.apache.shenyu.common.utils.UriUtils.createUri(final String uri)": {
                "lineStart": 7,
                "lineEnd": 13
            },
            "org.apache.shenyu.common.utils.UriUtils.repairData(final String name)": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.apache.shenyu.common.utils.UriUtils.removePrefix(final String name)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.apache.shenyu.common.utils.UriUtils.getPathWithParams(final URI uri)": {
                "lineStart": 23,
                "lineEnd": 30
            },
            "org.apache.shenyu.common.utils.UriUtils.appendScheme(final String url, final String scheme)": {
                "lineStart": 32,
                "lineEnd": 39
            }
        }
    },
    "CVE-2022-41929": {
        "c2f55f1b19a-User.java": {
            "com.xpn.xwiki.api.User.setDisabledStatus(boolean disabledStatus)": {
                "lineStart": 34,
                "lineEnd": 36
            }
        }
    },
    "CVE-2023-46120": {
        "3bff5471f-ConnectionFactory.java": {
            "com.rabbitmq.client.ConnectionFactory.createFrameHandlerFactory()": {
                "lineStart": 502,
                "lineEnd": 518
            },
            "com.rabbitmq.client.ConnectionFactory.params(ExecutorService consumerWorkServiceExecutor)": {
                "lineStart": 613,
                "lineEnd": 644
            }
        },
        "fe64ab370-AMQChannel.java": {
            "com.rabbitmq.client.impl.AMQChannel.handleFrame(Frame frame)": {
                "lineStart": 44,
                "lineEnd": 51
            },
            "com.rabbitmq.client.impl.AMQChannel.<init>(AMQConnection connection, int channelNumber)": {
                "lineStart": 28,
                "lineEnd": 38
            }
        },
        "b8cb3c97d-AMQCommand.java": {
            "com.rabbitmq.client.impl.AMQCommand.<init>()": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "com.rabbitmq.client.impl.AMQCommand.<init>(com.rabbitmq.client.Method method)": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "com.rabbitmq.client.impl.AMQCommand.<init>(com.rabbitmq.client.Method method, AMQContentHeader contentHeader, byte[] body)": {
                "lineStart": 18,
                "lineEnd": 20
            }
        },
        "dc077080a-AMQConnection.java": {
            "com.rabbitmq.client.impl.AMQConnection.<init>(ConnectionParams params, FrameHandler frameHandler, MetricsCollector metricsCollector)": {
                "lineStart": 127,
                "lineEnd": 159
            }
        },
        "32eb46712-AbstractFrameHandlerFactory.java": {
            "com.rabbitmq.client.impl.AbstractFrameHandlerFactory.<init>(int connectionTimeout, SocketConfigurator configurator, boolean ssl)": {
                "lineStart": 7,
                "lineEnd": 11
            }
        },
        "f19294862-CommandAssembler.java": {
            "com.rabbitmq.client.impl.CommandAssembler.<init>(Method method, AMQContentHeader contentHeader, byte[] body)": {
                "lineStart": 17,
                "lineEnd": 35
            },
            "com.rabbitmq.client.impl.CommandAssembler.consumeHeaderFrame(Frame f)": {
                "lineStart": 64,
                "lineEnd": 74
            }
        },
        "24d20040e-ConnectionParams.java": {
            "com.rabbitmq.client.impl.ConnectionParams.<init>()": {
                "lineStart": 45,
                "lineEnd": 45
            },
            "com.rabbitmq.client.impl.ConnectionParams.getCredentialsProvider()": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "com.rabbitmq.client.impl.ConnectionParams.getConsumerWorkServiceExecutor()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "com.rabbitmq.client.impl.ConnectionParams.getVirtualHost()": {
                "lineStart": 54,
                "lineEnd": 56
            },
            "com.rabbitmq.client.impl.ConnectionParams.getClientProperties()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "com.rabbitmq.client.impl.ConnectionParams.getRequestedFrameMax()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "com.rabbitmq.client.impl.ConnectionParams.getRequestedChannelMax()": {
                "lineStart": 66,
                "lineEnd": 68
            },
            "com.rabbitmq.client.impl.ConnectionParams.getRequestedHeartbeat()": {
                "lineStart": 70,
                "lineEnd": 72
            },
            "com.rabbitmq.client.impl.ConnectionParams.getHandshakeTimeout()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "com.rabbitmq.client.impl.ConnectionParams.setHandshakeTimeout(int timeout)": {
                "lineStart": 78,
                "lineEnd": 80
            },
            "com.rabbitmq.client.impl.ConnectionParams.getShutdownTimeout()": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "com.rabbitmq.client.impl.ConnectionParams.getSaslConfig()": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "com.rabbitmq.client.impl.ConnectionParams.getExceptionHandler()": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "com.rabbitmq.client.impl.ConnectionParams.getNetworkRecoveryInterval()": {
                "lineStart": 94,
                "lineEnd": 96
            },
            "com.rabbitmq.client.impl.ConnectionParams.getRecoveryDelayHandler()": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "com.rabbitmq.client.impl.ConnectionParams.isTopologyRecoveryEnabled()": {
                "lineStart": 102,
                "lineEnd": 104
            },
            "com.rabbitmq.client.impl.ConnectionParams.getTopologyRecoveryExecutor()": {
                "lineStart": 106,
                "lineEnd": 108
            },
            "com.rabbitmq.client.impl.ConnectionParams.getThreadFactory()": {
                "lineStart": 110,
                "lineEnd": 112
            },
            "com.rabbitmq.client.impl.ConnectionParams.getChannelRpcTimeout()": {
                "lineStart": 114,
                "lineEnd": 116
            },
            "com.rabbitmq.client.impl.ConnectionParams.channelShouldCheckRpcResponseType()": {
                "lineStart": 118,
                "lineEnd": 120
            },
            "com.rabbitmq.client.impl.ConnectionParams.setCredentialsProvider(CredentialsProvider credentialsProvider)": {
                "lineStart": 122,
                "lineEnd": 124
            },
            "com.rabbitmq.client.impl.ConnectionParams.setConsumerWorkServiceExecutor(ExecutorService consumerWorkServiceExecutor)": {
                "lineStart": 126,
                "lineEnd": 128
            },
            "com.rabbitmq.client.impl.ConnectionParams.setVirtualHost(String virtualHost)": {
                "lineStart": 130,
                "lineEnd": 132
            },
            "com.rabbitmq.client.impl.ConnectionParams.setClientProperties(Map<String, Object> clientProperties)": {
                "lineStart": 134,
                "lineEnd": 136
            },
            "com.rabbitmq.client.impl.ConnectionParams.setRequestedFrameMax(int requestedFrameMax)": {
                "lineStart": 138,
                "lineEnd": 140
            },
            "com.rabbitmq.client.impl.ConnectionParams.setRequestedChannelMax(int requestedChannelMax)": {
                "lineStart": 142,
                "lineEnd": 144
            },
            "com.rabbitmq.client.impl.ConnectionParams.setRequestedHeartbeat(int requestedHeartbeat)": {
                "lineStart": 146,
                "lineEnd": 148
            },
            "com.rabbitmq.client.impl.ConnectionParams.setShutdownTimeout(int shutdownTimeout)": {
                "lineStart": 150,
                "lineEnd": 152
            },
            "com.rabbitmq.client.impl.ConnectionParams.setSaslConfig(SaslConfig saslConfig)": {
                "lineStart": 154,
                "lineEnd": 156
            },
            "com.rabbitmq.client.impl.ConnectionParams.setNetworkRecoveryInterval(long networkRecoveryInterval)": {
                "lineStart": 158,
                "lineEnd": 160
            },
            "com.rabbitmq.client.impl.ConnectionParams.setRecoveryDelayHandler(final RecoveryDelayHandler recoveryDelayHandler)": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "com.rabbitmq.client.impl.ConnectionParams.setTopologyRecovery(boolean topologyRecovery)": {
                "lineStart": 166,
                "lineEnd": 168
            },
            "com.rabbitmq.client.impl.ConnectionParams.setTopologyRecoveryExecutor(final ExecutorService topologyRecoveryExecutor)": {
                "lineStart": 170,
                "lineEnd": 172
            },
            "com.rabbitmq.client.impl.ConnectionParams.setExceptionHandler(ExceptionHandler exceptionHandler)": {
                "lineStart": 174,
                "lineEnd": 176
            },
            "com.rabbitmq.client.impl.ConnectionParams.setThreadFactory(ThreadFactory threadFactory)": {
                "lineStart": 178,
                "lineEnd": 180
            },
            "com.rabbitmq.client.impl.ConnectionParams.getShutdownExecutor()": {
                "lineStart": 182,
                "lineEnd": 184
            },
            "com.rabbitmq.client.impl.ConnectionParams.setShutdownExecutor(ExecutorService shutdownExecutor)": {
                "lineStart": 186,
                "lineEnd": 188
            },
            "com.rabbitmq.client.impl.ConnectionParams.getHeartbeatExecutor()": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "com.rabbitmq.client.impl.ConnectionParams.setHeartbeatExecutor(ScheduledExecutorService heartbeatExecutor)": {
                "lineStart": 194,
                "lineEnd": 196
            },
            "com.rabbitmq.client.impl.ConnectionParams.setChannelRpcTimeout(int channelRpcTimeout)": {
                "lineStart": 198,
                "lineEnd": 200
            },
            "com.rabbitmq.client.impl.ConnectionParams.setChannelShouldCheckRpcResponseType(boolean channelShouldCheckRpcResponseType)": {
                "lineStart": 202,
                "lineEnd": 204
            },
            "com.rabbitmq.client.impl.ConnectionParams.setErrorOnWriteListener(ErrorOnWriteListener errorOnWriteListener)": {
                "lineStart": 206,
                "lineEnd": 208
            },
            "com.rabbitmq.client.impl.ConnectionParams.getErrorOnWriteListener()": {
                "lineStart": 210,
                "lineEnd": 212
            },
            "com.rabbitmq.client.impl.ConnectionParams.setWorkPoolTimeout(int workPoolTimeout)": {
                "lineStart": 214,
                "lineEnd": 216
            },
            "com.rabbitmq.client.impl.ConnectionParams.getWorkPoolTimeout()": {
                "lineStart": 218,
                "lineEnd": 220
            },
            "com.rabbitmq.client.impl.ConnectionParams.setTopologyRecoveryFilter(TopologyRecoveryFilter topologyRecoveryFilter)": {
                "lineStart": 222,
                "lineEnd": 224
            },
            "com.rabbitmq.client.impl.ConnectionParams.getTopologyRecoveryFilter()": {
                "lineStart": 226,
                "lineEnd": 228
            },
            "com.rabbitmq.client.impl.ConnectionParams.setConnectionRecoveryTriggeringCondition(Predicate<ShutdownSignalException> connectionRecoveryTriggeringCondition)": {
                "lineStart": 230,
                "lineEnd": 232
            },
            "com.rabbitmq.client.impl.ConnectionParams.getConnectionRecoveryTriggeringCondition()": {
                "lineStart": 234,
                "lineEnd": 236
            },
            "com.rabbitmq.client.impl.ConnectionParams.setTopologyRecoveryRetryHandler(RetryHandler topologyRecoveryRetryHandler)": {
                "lineStart": 238,
                "lineEnd": 240
            },
            "com.rabbitmq.client.impl.ConnectionParams.getTopologyRecoveryRetryHandler()": {
                "lineStart": 242,
                "lineEnd": 244
            },
            "com.rabbitmq.client.impl.ConnectionParams.setRecoveredQueueNameSupplier(RecoveredQueueNameSupplier recoveredQueueNameSupplier)": {
                "lineStart": 246,
                "lineEnd": 248
            },
            "com.rabbitmq.client.impl.ConnectionParams.getRecoveredQueueNameSupplier()": {
                "lineStart": 250,
                "lineEnd": 252
            },
            "com.rabbitmq.client.impl.ConnectionParams.setTrafficListener(TrafficListener trafficListener)": {
                "lineStart": 254,
                "lineEnd": 256
            },
            "com.rabbitmq.client.impl.ConnectionParams.getTrafficListener()": {
                "lineStart": 258,
                "lineEnd": 260
            },
            "com.rabbitmq.client.impl.ConnectionParams.setCredentialsRefreshService(CredentialsRefreshService credentialsRefreshService)": {
                "lineStart": 262,
                "lineEnd": 264
            },
            "com.rabbitmq.client.impl.ConnectionParams.getCredentialsRefreshService()": {
                "lineStart": 266,
                "lineEnd": 268
            }
        },
        "ce7531cc9-Frame.java": {
            "com.rabbitmq.client.impl.Frame.readFrom(DataInputStream is)": {
                "lineStart": 38,
                "lineEnd": 62
            }
        },
        "6efd6f83f-SocketFrameHandler.java": {
            "com.rabbitmq.client.impl.SocketFrameHandler.<init>(Socket socket)": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "com.rabbitmq.client.impl.SocketFrameHandler.<init>(Socket socket, ExecutorService shutdownExecutor)": {
                "lineStart": 26,
                "lineEnd": 31
            },
            "com.rabbitmq.client.impl.SocketFrameHandler.readFrame()": {
                "lineStart": 111,
                "lineEnd": 116
            }
        },
        "d3fdfa9e2-SocketFrameHandlerFactory.java": {
            "com.rabbitmq.client.impl.SocketFrameHandlerFactory.<init>(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator, boolean ssl, ExecutorService shutdownExecutor)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "com.rabbitmq.client.impl.SocketFrameHandlerFactory.<init>(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator, boolean ssl, ExecutorService shutdownExecutor, SslContextFactory sslContextFactory)": {
                "lineStart": 22,
                "lineEnd": 27
            },
            "com.rabbitmq.client.impl.SocketFrameHandlerFactory.create(Socket sock)": {
                "lineStart": 61,
                "lineEnd": 63
            }
        },
        "813e328b9-FrameBuilder.java": {
            "com.rabbitmq.client.impl.nio.FrameBuilder.<init>(ReadableByteChannel channel, ByteBuffer buffer)": {
                "lineStart": 18,
                "lineEnd": 21
            },
            "com.rabbitmq.client.impl.nio.FrameBuilder.readFrame()": {
                "lineStart": 23,
                "lineEnd": 71
            }
        },
        "2cab2066c-SocketChannelFrameHandlerFactory.java": {
            "com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory.<init>(int connectionTimeout, NioParams nioParams, boolean ssl, SslContextFactory sslContextFactory)": {
                "lineStart": 33,
                "lineEnd": 42
            },
            "com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory.create(Address addr, String connectionName)": {
                "lineStart": 44,
                "lineEnd": 124
            }
        },
        "4f1e4dc88-SocketChannelFrameHandlerState.java": {
            "com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState.<init>(SocketChannel channel, NioLoopContext nioLoopsState, NioParams nioParams, SSLEngine sslEngine)": {
                "lineStart": 29,
                "lineEnd": 55
            }
        },
        "8b6ecaf8a-SslEngineFrameBuilder.java": {
            "com.rabbitmq.client.impl.nio.SslEngineFrameBuilder.<init>(SSLEngine sslEngine, ByteBuffer plainIn, ByteBuffer cipherIn, ReadableByteChannel channel)": {
                "lineStart": 12,
                "lineEnd": 16
            }
        }
    },
    "CVE-2020-36319": {
        "7bad5112e6-VaadinConnectController.java": {
            "com.vaadin.flow.server.connect.VaadinConnectController.<init>(@Qualifier(VAADIN_ENDPOINT_MAPPER_BEAN_QUALIFIER) ObjectMapper vaadinEndpointMapper, VaadinConnectAccessChecker accessChecker, EndpointNameChecker endpointNameChecker, ExplicitNullableTypeChecker explicitNullableTypeChecker, ApplicationContext context)": {
                "lineStart": 56,
                "lineEnd": 61
            }
        },
        "0a9186db69-VaadinConnectControllerConfiguration.java": {
            "com.vaadin.flow.server.connect.VaadinConnectControllerConfiguration.vaadinEndpointMapper(ApplicationContext context)": {
                "lineStart": 60,
                "lineEnd": 68
            }
        }
    },
    "CVE-2022-20612": {
        "43563b6f46-BuildAuthorizationToken.java": {
            "hudson.model.BuildAuthorizationToken.checkPermission(Job<?, ?> project, BuildAuthorizationToken token, StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 32,
                "lineEnd": 58
            }
        }
    },
    "CVE-2022-23115": {
        "d09c828-BatchRun.java": {
            "hudson.plugins.batch_task.BatchRun.<init>(Calendar timestamp, BatchRunAction parent, int id, BatchTask task)": {
                "lineStart": 33,
                "lineEnd": 38
            },
            "hudson.plugins.batch_task.BatchRun.getResult()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "hudson.plugins.batch_task.BatchRun.isRunning()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "hudson.plugins.batch_task.BatchRun.getTimestampString()": {
                "lineStart": 48,
                "lineEnd": 51
            },
            "hudson.plugins.batch_task.BatchRun.getLogFile()": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "hudson.plugins.batch_task.BatchRun.getParent()": {
                "lineStart": 57,
                "lineEnd": 60
            },
            "hudson.plugins.batch_task.BatchRun.getOwner()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "hudson.plugins.batch_task.BatchRun.getIconColor()": {
                "lineStart": 66,
                "lineEnd": 80
            },
            "hudson.plugins.batch_task.BatchRun.getBuildStatusIconClassName()": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "hudson.plugins.batch_task.BatchRun.getBuildStatusUrl()": {
                "lineStart": 86,
                "lineEnd": 88
            },
            "hudson.plugins.batch_task.BatchRun.getPrevious()": {
                "lineStart": 90,
                "lineEnd": 103
            },
            "hudson.plugins.batch_task.BatchRun.getNext()": {
                "lineStart": 105,
                "lineEnd": 118
            },
            "hudson.plugins.batch_task.BatchRun.getUrl()": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "hudson.plugins.batch_task.BatchRun.getSearchUrl()": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "hudson.plugins.batch_task.BatchRun.getDisplayName()": {
                "lineStart": 128,
                "lineEnd": 130
            },
            "hudson.plugins.batch_task.BatchRun.getNumber()": {
                "lineStart": 132,
                "lineEnd": 134
            },
            "hudson.plugins.batch_task.BatchRun.getBuildNumber()": {
                "lineStart": 136,
                "lineEnd": 138
            },
            "hudson.plugins.batch_task.BatchRun.getDurationString()": {
                "lineStart": 140,
                "lineEnd": 145
            },
            "hudson.plugins.batch_task.BatchRun.getDuration()": {
                "lineStart": 147,
                "lineEnd": 149
            },
            "hudson.plugins.batch_task.BatchRun.run()": {
                "lineStart": 151,
                "lineEnd": 255
            },
            "hudson.plugins.batch_task.BatchRun.doProgressiveLog(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 257,
                "lineEnd": 259
            },
            "hudson.plugins.batch_task.BatchRun.toString()": {
                "lineStart": 261,
                "lineEnd": 263
            },
            "hudson.plugins.batch_task.BatchRun.compareTo(BatchRun that)": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "hudson.plugins.batch_task.BatchRun.equals(Object o)": {
                "lineStart": 269,
                "lineEnd": 274
            },
            "hudson.plugins.batch_task.BatchRun.hashCode()": {
                "lineStart": 276,
                "lineEnd": 278
            },
            "hudson.plugins.batch_task.BatchRun.getEstimatedDuration()": {
                "lineStart": 280,
                "lineEnd": 282
            }
        },
        "7e87d9a-BatchTask.java": {
            "hudson.plugins.batch_task.BatchTask.<init>(String name, String script)": {
                "lineStart": 44,
                "lineEnd": 47
            },
            "hudson.plugins.batch_task.BatchTask.getParent()": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "hudson.plugins.batch_task.BatchTask.getSearchUrl()": {
                "lineStart": 53,
                "lineEnd": 55
            },
            "hudson.plugins.batch_task.BatchTask.getDisplayName()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "hudson.plugins.batch_task.BatchTask.getFullDisplayName()": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "hudson.plugins.batch_task.BatchTask.isBuildBlocked()": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "hudson.plugins.batch_task.BatchTask.getWhyBlocked()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "hudson.plugins.batch_task.BatchTask.getCauseOfBlockage()": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "hudson.plugins.batch_task.BatchTask.getName()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "hudson.plugins.batch_task.BatchTask.isConcurrentBuild()": {
                "lineStart": 81,
                "lineEnd": 83
            },
            "hudson.plugins.batch_task.BatchTask.getEstimatedDuration()": {
                "lineStart": 85,
                "lineEnd": 91
            },
            "hudson.plugins.batch_task.BatchTask.getAssignedLabel()": {
                "lineStart": 93,
                "lineEnd": 97
            },
            "hudson.plugins.batch_task.BatchTask.getLastBuiltOn()": {
                "lineStart": 99,
                "lineEnd": 101
            },
            "hudson.plugins.batch_task.BatchTask.getBuildStatusUrl()": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "hudson.plugins.batch_task.BatchTask.getIconColor()": {
                "lineStart": 107,
                "lineEnd": 111
            },
            "hudson.plugins.batch_task.BatchTask.getLastRun()": {
                "lineStart": 113,
                "lineEnd": 124
            },
            "hudson.plugins.batch_task.BatchTask.getLastSuccessfulRun()": {
                "lineStart": 126,
                "lineEnd": 129
            },
            "hudson.plugins.batch_task.BatchTask.getLastFailedRun()": {
                "lineStart": 131,
                "lineEnd": 134
            },
            "hudson.plugins.batch_task.BatchTask.getRuns()": {
                "lineStart": 136,
                "lineEnd": 149
            },
            "hudson.plugins.batch_task.BatchTask.createHistoryWidget()": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "hudson.plugins.batch_task.BatchTask.createExecutable()": {
                "lineStart": 155,
                "lineEnd": 169
            },
            "hudson.plugins.batch_task.BatchTask.getNextBuildNumber()": {
                "lineStart": 171,
                "lineEnd": 178
            },
            "hudson.plugins.batch_task.BatchTask.getACL()": {
                "lineStart": 180,
                "lineEnd": 182
            },
            "hudson.plugins.batch_task.BatchTask.checkAbortPermission()": {
                "lineStart": 184,
                "lineEnd": 186
            },
            "hudson.plugins.batch_task.BatchTask.hasAbortPermission()": {
                "lineStart": 188,
                "lineEnd": 190
            },
            "hudson.plugins.batch_task.BatchTask.hasBuildPermission()": {
                "lineStart": 192,
                "lineEnd": 194
            },
            "hudson.plugins.batch_task.BatchTask.hasDeletePermission()": {
                "lineStart": 196,
                "lineEnd": 198
            },
            "hudson.plugins.batch_task.BatchTask.hasConfigurePermission()": {
                "lineStart": 200,
                "lineEnd": 202
            },
            "hudson.plugins.batch_task.BatchTask.getResourceList()": {
                "lineStart": 204,
                "lineEnd": 206
            },
            "hudson.plugins.batch_task.BatchTask.getDynamic(String token, StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 208,
                "lineEnd": 219
            },
            "hudson.plugins.batch_task.BatchTask.doExecute(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 221,
                "lineEnd": 231
            },
            "hudson.plugins.batch_task.BatchTask.doDoDelete(StaplerResponse rsp)": {
                "lineStart": 233,
                "lineEnd": 237
            },
            "hudson.plugins.batch_task.BatchTask.doCancelQueue(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 268,
                "lineEnd": 272
            },
            "hudson.plugins.batch_task.BatchTask.getUrl()": {
                "lineStart": 274,
                "lineEnd": 276
            },
            "hudson.plugins.batch_task.BatchTask.getSubTasks()": {
                "lineStart": 305,
                "lineEnd": 307
            },
            "hudson.plugins.batch_task.BatchTask.getDefaultAuthentication()": {
                "lineStart": 309,
                "lineEnd": 311
            },
            "hudson.plugins.batch_task.BatchTask.getOwnerTask()": {
                "lineStart": 313,
                "lineEnd": 315
            },
            "hudson.plugins.batch_task.BatchTask.getSameNodeConstraint()": {
                "lineStart": 317,
                "lineEnd": 319
            }
        },
        "d01e27a-BatchTaskInvoker.java": {
            "hudson.plugins.batch_task.BatchTaskInvoker$Config.<init>(String project, String task)": {
                "lineStart": 41,
                "lineEnd": 44
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config.resolveProperty(ItemGroup context)": {
                "lineStart": 46,
                "lineEnd": 50
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config.resolve(ItemGroup context)": {
                "lineStart": 52,
                "lineEnd": 56
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config.resolve()": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config.resolveProperty()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config.invoke(AbstractBuild<?, ?> build, BuildListener listener, HashSet<String> seenJobs)": {
                "lineStart": 66,
                "lineEnd": 95
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config$DescriptorImpl.getDisplayName()": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config$DescriptorImpl.doFillTaskItems(@QueryParameter String project, @AncestorInPath AbstractProject context)": {
                "lineStart": 102,
                "lineEnd": 114
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config$DescriptorImpl.doCheckProject(@QueryParameter String project)": {
                "lineStart": 116,
                "lineEnd": 131
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$Config$DescriptorImpl.doCheckTask(@QueryParameter String project, @QueryParameter String task)": {
                "lineStart": 133,
                "lineEnd": 139
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.readResolve()": {
                "lineStart": 147,
                "lineEnd": 150
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.<init>(Config[] configs, boolean evenIfUnstable)": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.<init>(Config[] configs, Result threshold)": {
                "lineStart": 156,
                "lineEnd": 159
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.getConfigs()": {
                "lineStart": 161,
                "lineEnd": 163
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.getThreshold()": {
                "lineStart": 165,
                "lineEnd": 167
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.isEvenIfUnstable()": {
                "lineStart": 169,
                "lineEnd": 171
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)": {
                "lineStart": 173,
                "lineEnd": 189
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.getRequiredMonitorService()": {
                "lineStart": 191,
                "lineEnd": 193
            },
            "hudson.plugins.batch_task.BatchTaskInvoker.getProjectActions(AbstractProject<?, ?> project)": {
                "lineStart": 195,
                "lineEnd": 197
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$DescriptorImpl.getDisplayName()": {
                "lineStart": 200,
                "lineEnd": 202
            },
            "hudson.plugins.batch_task.BatchTaskInvoker$DescriptorImpl.isApplicable(Class<? extends AbstractProject> jobType)": {
                "lineStart": 204,
                "lineEnd": 206
            }
        }
    },
    "CVE-2020-2139": {
        "43dfb1a-IOUtils.java": {
            "hudson.plugins.cobertura.IOUtils.closeQuietly(Closeable closeable)": {
                "lineStart": 4,
                "lineEnd": 14
            }
        },
        "220fd19-SourceCodePainter.java": {
            "hudson.plugins.cobertura.renderers.SourceCodePainter.invoke(File workspaceDir, VirtualChannel channel)": {
                "lineStart": 99,
                "lineEnd": 137
            }
        },
        "8511d9a-CoverageResult.java": {
            "hudson.plugins.cobertura.targets.CoverageResult.isSourceFileAvailable()": {
                "lineStart": 108,
                "lineEnd": 114
            },
            "hudson.plugins.cobertura.targets.CoverageResult.getSourceFileContent()": {
                "lineStart": 120,
                "lineEnd": 132
            },
            "hudson.plugins.cobertura.targets.CoverageResult.getSourceFile()": {
                "lineStart": 100,
                "lineEnd": 106
            }
        }
    },
    "CVE-2021-22097": {
        "15e9c6c7-Message.java": {
            "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": {
                "lineStart": 29,
                "lineEnd": 32
            },
            "org.springframework.amqp.core.Message.getBodyContentAsString()": {
                "lineStart": 56,
                "lineEnd": 74
            }
        }
    },
    "CVE-2023-24427": {
        "d5054dc-BitbucketSecurityRealm.java": {
            "org.jenkinsci.plugins.BitbucketSecurityRealm.doFinishLogin(StaplerRequest request)": {
                "lineStart": 108,
                "lineEnd": 149
            }
        }
    },
    "CVE-2024-1143": {
        "eb1de14d-SamlAuthSsoHandler.java": {
            "com.linecorp.centraldogma.server.auth.saml.SamlAuthSsoHandler.loginSucceeded(ServiceRequestContext ctx, AggregatedHttpRequest req, MessageContext<Response> message, @Nullable String sessionIndex, @Nullable String relayState)": {
                "lineStart": 69,
                "lineEnd": 87
            }
        }
    },
    "CVE-2023-25158": {
        "9c51f9b6f4-FilterToSQL.java": {
            "org.geotools.data.jdbc.FilterToSQL.visit(PropertyIsLike filter, Object extraData)": {
                "lineStart": 325,
                "lineEnd": 359
            },
            "org.geotools.data.jdbc.FilterToSQL.visit(Id filter, Object extraData)": {
                "lineStart": 795,
                "lineEnd": 845
            },
            "org.geotools.data.jdbc.FilterToSQL.writeLiteral(Object literal)": {
                "lineStart": 1223,
                "lineEnd": 1265
            }
        },
        "b18c2637cb-EscapeSql.java": {
            "org.geotools.jdbc.EscapeSql.escapeSql(String str)": {
                "lineStart": 3,
                "lineEnd": 8
            }
        },
        "79d558b0e2-SQLDialect.java": {
            "org.geotools.jdbc.SQLDialect.<init>(JDBCDataStore dataStore)": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "org.geotools.jdbc.SQLDialect.initializeConnection(Connection cx)": {
                "lineStart": 92,
                "lineEnd": 92
            },
            "org.geotools.jdbc.SQLDialect.includeTable(String schemaName, String tableName, Connection cx)": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "org.geotools.jdbc.SQLDialect.registerSqlTypeNameToClassMappings(Map<String, Class<?>> mappings)": {
                "lineStart": 97,
                "lineEnd": 98
            },
            "org.geotools.jdbc.SQLDialect.getMapping(ResultSet columnMetaData, Connection cx)": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "org.geotools.jdbc.SQLDialect.getRestrictions(ResultSet columnMetaData, Connection cx)": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "org.geotools.jdbc.SQLDialect.handleUserDefinedType(ResultSet columnMetaData, ColumnMetadata metadata, Connection cx)": {
                "lineStart": 108,
                "lineEnd": 108
            },
            "org.geotools.jdbc.SQLDialect.registerSqlTypeToClassMappings(Map<Integer, Class<?>> mappings)": {
                "lineStart": 109,
                "lineEnd": 133
            },
            "org.geotools.jdbc.SQLDialect.registerClassToSqlMappings(Map<Class<?>, Integer> mappings)": {
                "lineStart": 135,
                "lineEnd": 155
            },
            "org.geotools.jdbc.SQLDialect.registerSqlTypeToSqlTypeNameOverrides(Map<Integer, String> overrides)": {
                "lineStart": 157,
                "lineEnd": 157
            },
            "org.geotools.jdbc.SQLDialect.registerAggregateFunctions(Map<Class<? extends FeatureVisitor>, String> aggregates)": {
                "lineStart": 158,
                "lineEnd": 166
            },
            "org.geotools.jdbc.SQLDialect.getNameEscape()": {
                "lineStart": 168,
                "lineEnd": 170
            },
            "org.geotools.jdbc.SQLDialect.ne()": {
                "lineStart": 172,
                "lineEnd": 174
            },
            "org.geotools.jdbc.SQLDialect.escapeName(String name)": {
                "lineStart": 176,
                "lineEnd": 193
            },
            "org.geotools.jdbc.SQLDialect.encodeColumnName(String prefix, String raw, StringBuffer sql)": {
                "lineStart": 195,
                "lineEnd": 201
            },
            "org.geotools.jdbc.SQLDialect.encodeColumnType(String sqlTypeName, StringBuffer sql)": {
                "lineStart": 203,
                "lineEnd": 205
            },
            "org.geotools.jdbc.SQLDialect.encodeColumnAlias(String raw, StringBuffer sql)": {
                "lineStart": 207,
                "lineEnd": 210
            },
            "org.geotools.jdbc.SQLDialect.encodeTableAlias(String raw, StringBuffer sql)": {
                "lineStart": 212,
                "lineEnd": 215
            },
            "org.geotools.jdbc.SQLDialect.encodeTableName(String raw, StringBuffer sql)": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "org.geotools.jdbc.SQLDialect.encodeSchemaName(String raw, StringBuffer sql)": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "org.geotools.jdbc.SQLDialect.getGeometryTypeName(Integer type)": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "org.geotools.jdbc.SQLDialect.getGeometrySRID(String schemaName, String tableName, String columnName, Connection cx)": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "org.geotools.jdbc.SQLDialect.getGeometryDimension(String schemaName, String tableName, String columnName, Connection cx)": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "org.geotools.jdbc.SQLDialect.createCRS(int srid, Connection cx)": {
                "lineStart": 237,
                "lineEnd": 249
            },
            "org.geotools.jdbc.SQLDialect.getOptimizedBounds(String schema, SimpleFeatureType featureType, Connection cx)": {
                "lineStart": 251,
                "lineEnd": 253
            },
            "org.geotools.jdbc.SQLDialect.encodeGeometryEnvelope(String tableName, String geometryColumn, StringBuffer sql)": {
                "lineStart": 255,
                "lineEnd": 255
            },
            "org.geotools.jdbc.SQLDialect.decodeGeometryEnvelope(ResultSet rs, int column, Connection cx)": {
                "lineStart": 256,
                "lineEnd": 256
            },
            "org.geotools.jdbc.SQLDialect.encodeGeometryColumn(GeometryDescriptor gatt, String prefix, int srid, Hints hints, StringBuffer sql)": {
                "lineStart": 257,
                "lineEnd": 259
            },
            "org.geotools.jdbc.SQLDialect.encodeGeometryColumnGeneralized(GeometryDescriptor gatt, String prefix, int srid, StringBuffer sql, Double distance)": {
                "lineStart": 261,
                "lineEnd": 263
            },
            "org.geotools.jdbc.SQLDialect.encodeGeometryColumnSimplified(GeometryDescriptor gatt, String prefix, int srid, StringBuffer sql, Double distance)": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "org.geotools.jdbc.SQLDialect.decodeGeometryValue(GeometryDescriptor descriptor, ResultSet rs, String column, GeometryFactory factory, Connection cx, Hints hints)": {
                "lineStart": 269,
                "lineEnd": 269
            },
            "org.geotools.jdbc.SQLDialect.decodeGeometryValue(GeometryDescriptor descriptor, ResultSet rs, int column, GeometryFactory factory, Connection cx, Hints hints)": {
                "lineStart": 270,
                "lineEnd": 273
            },
            "org.geotools.jdbc.SQLDialect.encodePrimaryKey(String column, StringBuffer sql)": {
                "lineStart": 275,
                "lineEnd": 278
            },
            "org.geotools.jdbc.SQLDialect.encodeJoin(Type joinType, StringBuffer sql)": {
                "lineStart": 280,
                "lineEnd": 292
            },
            "org.geotools.jdbc.SQLDialect.encodeCreateTable(StringBuffer sql)": {
                "lineStart": 294,
                "lineEnd": 296
            },
            "org.geotools.jdbc.SQLDialect.encodePostColumnCreateTable(AttributeDescriptor att, StringBuffer sql)": {
                "lineStart": 298,
                "lineEnd": 298
            },
            "org.geotools.jdbc.SQLDialect.encodePostCreateTable(String tableName, StringBuffer sql)": {
                "lineStart": 299,
                "lineEnd": 299
            },
            "org.geotools.jdbc.SQLDialect.encodePostSelect(SimpleFeatureType featureType, StringBuffer sql)": {
                "lineStart": 300,
                "lineEnd": 300
            },
            "org.geotools.jdbc.SQLDialect.postCreateTable(String schemaName, SimpleFeatureType featureType, Connection cx)": {
                "lineStart": 301,
                "lineEnd": 301
            },
            "org.geotools.jdbc.SQLDialect.postCreateAttribute(AttributeDescriptor att, String tableName, String schemaName, Connection cx)": {
                "lineStart": 302,
                "lineEnd": 302
            },
            "org.geotools.jdbc.SQLDialect.postCreateFeatureType(SimpleFeatureType featureType, DatabaseMetaData metadata, String schemaName, Connection cx)": {
                "lineStart": 303,
                "lineEnd": 303
            },
            "org.geotools.jdbc.SQLDialect.preDropTable(String schemaName, SimpleFeatureType featureType, Connection cx)": {
                "lineStart": 304,
                "lineEnd": 304
            },
            "org.geotools.jdbc.SQLDialect.postDropTable(String schemaName, SimpleFeatureType featureType, Connection cx)": {
                "lineStart": 305,
                "lineEnd": 305
            },
            "org.geotools.jdbc.SQLDialect.lookupGeneratedValuesPostInsert()": {
                "lineStart": 306,
                "lineEnd": 308
            },
            "org.geotools.jdbc.SQLDialect.getNextAutoGeneratedValue(String schemaName, String tableName, String columnName, Connection cx)": {
                "lineStart": 310,
                "lineEnd": 312
            },
            "org.geotools.jdbc.SQLDialect.getLastAutoGeneratedValue(String schemaName, String tableName, String columnName, Connection cx, Statement st)": {
                "lineStart": 314,
                "lineEnd": 316
            },
            "org.geotools.jdbc.SQLDialect.getLastAutoGeneratedValue(String schemaName, String tableName, String columnName, Connection cx)": {
                "lineStart": 318,
                "lineEnd": 320
            },
            "org.geotools.jdbc.SQLDialect.getSequenceForColumn(String schemaName, String tableName, String columnName, Connection cx)": {
                "lineStart": 322,
                "lineEnd": 324
            },
            "org.geotools.jdbc.SQLDialect.getNextSequenceValue(String schemaName, String sequenceName, Connection cx)": {
                "lineStart": 326,
                "lineEnd": 328
            },
            "org.geotools.jdbc.SQLDialect.encodeNextSequenceValue(String schemaName, String sequenceName)": {
                "lineStart": 330,
                "lineEnd": 332
            },
            "org.geotools.jdbc.SQLDialect.isLimitOffsetSupported()": {
                "lineStart": 334,
                "lineEnd": 336
            },
            "org.geotools.jdbc.SQLDialect.isAggregatedSortSupported(String function)": {
                "lineStart": 338,
                "lineEnd": 340
            },
            "org.geotools.jdbc.SQLDialect.isGroupBySupported()": {
                "lineStart": 342,
                "lineEnd": 344
            },
            "org.geotools.jdbc.SQLDialect.applyLimitOffset(StringBuffer sql, int limit, int offset)": {
                "lineStart": 346,
                "lineEnd": 348
            },
            "org.geotools.jdbc.SQLDialect.addSupportedHints(Set<Hints.Key> hints)": {
                "lineStart": 350,
                "lineEnd": 350
            },
            "org.geotools.jdbc.SQLDialect.getDefaultVarcharSize()": {
                "lineStart": 351,
                "lineEnd": 353
            },
            "org.geotools.jdbc.SQLDialect.isAutoCommitQuery()": {
                "lineStart": 355,
                "lineEnd": 357
            },
            "org.geotools.jdbc.SQLDialect.supportsSchemaForIndex()": {
                "lineStart": 359,
                "lineEnd": 361
            },
            "org.geotools.jdbc.SQLDialect.createIndex(Connection cx, SimpleFeatureType schema, String databaseSchema, Index index)": {
                "lineStart": 363,
                "lineEnd": 404
            },
            "org.geotools.jdbc.SQLDialect.dropIndex(Connection cx, SimpleFeatureType schema, String databaseSchema, String indexName)": {
                "lineStart": 406,
                "lineEnd": 429
            },
            "org.geotools.jdbc.SQLDialect.getIndexes(Connection cx, String databaseSchema, String typeName)": {
                "lineStart": 431,
                "lineEnd": 462
            },
            "org.geotools.jdbc.SQLDialect.handleSelectHints(StringBuffer sql, SimpleFeatureType featureType, Query query)": {
                "lineStart": 464,
                "lineEnd": 465
            },
            "org.geotools.jdbc.SQLDialect.applyHintsOnVirtualTables()": {
                "lineStart": 467,
                "lineEnd": 469
            },
            "org.geotools.jdbc.SQLDialect.getDesiredTablesType()": {
                "lineStart": 471,
                "lineEnd": 473
            },
            "org.geotools.jdbc.SQLDialect.splitFilter(Filter filter, SimpleFeatureType schema)": {
                "lineStart": 475,
                "lineEnd": 482
            },
            "org.geotools.jdbc.SQLDialect.getPrimaryKey(String typeName)": {
                "lineStart": 484,
                "lineEnd": 487
            },
            "org.geotools.jdbc.SQLDialect.getPkColumnValue(ResultSet rs, PrimaryKeyColumn pkey, int columnIdx)": {
                "lineStart": 489,
                "lineEnd": 491
            },
            "org.geotools.jdbc.SQLDialect.canSimplifyPoints()": {
                "lineStart": 493,
                "lineEnd": 495
            },
            "org.geotools.jdbc.SQLDialect.getResultTypes(FeatureVisitor visitor, SimpleFeatureType featureType)": {
                "lineStart": 497,
                "lineEnd": 520
            },
            "org.geotools.jdbc.SQLDialect.getAggregateConverter(FeatureVisitor visitor, SimpleFeatureType featureType)": {
                "lineStart": 522,
                "lineEnd": 524
            },
            "org.geotools.jdbc.SQLDialect.getSQLType(AttributeDescriptor ad)": {
                "lineStart": 526,
                "lineEnd": 528
            },
            "org.geotools.jdbc.SQLDialect.isArray(AttributeDescriptor att)": {
                "lineStart": 530,
                "lineEnd": 533
            },
            "org.geotools.jdbc.SQLDialect.convertValue(Object value, AttributeDescriptor ad)": {
                "lineStart": 535,
                "lineEnd": 538
            },
            "org.geotools.jdbc.SQLDialect.canGroupOnGeometry()": {
                "lineStart": 540,
                "lineEnd": 542
            },
            "org.geotools.jdbc.SQLDialect.getMapping(String sqlTypeName)": {
                "lineStart": 544,
                "lineEnd": 546
            }
        },
        "1fd4a73eb3-LikeFilterImpl.java": {
            "org.geotools.filter.LikeFilterImpl.convertToSQL92(char escape, char multi, char single, boolean matchCase, String pattern)": {
                "lineStart": 17,
                "lineEnd": 45
            },
            "org.geotools.filter.LikeFilterImpl.getSQL92LikePattern()": {
                "lineStart": 47,
                "lineEnd": 61
            }
        },
        "ae7e839702-MySQLDialectBasic.java": {
            "org.geotools.data.mysql.MySQLDialectBasic.createFilterToSQL()": {
                "lineStart": 179,
                "lineEnd": 181
            }
        },
        "92e8c97335-OracleDialect.java": {
            "org.geotools.data.oracle.OracleDialect.unwrapConnection(Connection cx)": {
                "lineStart": 487,
                "lineEnd": 543
            }
        },
        "f5311fd428-OracleFilterToSQL.java": {
            "org.geotools.data.oracle.OracleFilterToSQL.jsonExists(Function function)": {
                "lineStart": 514,
                "lineEnd": 527
            },
            "org.geotools.data.oracle.OracleFilterToSQL.doSDODistance(BinarySpatialOperator filter, Expression e1, Expression e2, Object extraData)": {
                "lineStart": 445,
                "lineEnd": 457
            }
        },
        "d56534fd26-FilterToSqlHelper.java": {
            "org.geotools.data.postgis.FilterToSqlHelper.visitFunction(Function function, Object extraData)": {
                "lineStart": 463,
                "lineEnd": 597
            },
            "org.geotools.data.postgis.FilterToSqlHelper.buildJsonFromStrPointer(String[] pointers, Expression expectedExp)": {
                "lineStart": 622,
                "lineEnd": 634
            },
            "org.geotools.data.postgis.FilterToSqlHelper.encodeJsonArrayContains(Function jsonArrayContains)": {
                "lineStart": 636,
                "lineEnd": 649
            }
        },
        "6e3648b078-PostGISDialect.java": {
            "org.geotools.data.postgis.PostGISDialect.initializeConnection(Connection cx)": {
                "lineStart": 213,
                "lineEnd": 217
            },
            "org.geotools.data.postgis.PostGISDialect.createFilterToSQL()": {
                "lineStart": 951,
                "lineEnd": 957
            }
        },
        "5fe10ccb21-PostGISPSDialect.java": {
            "org.geotools.data.postgis.PostGISPSDialect.createPreparedFilterToSQL()": {
                "lineStart": 177,
                "lineEnd": 183
            }
        },
        "a07aa88804-PostgisNGDataStoreFactory.java": {
            "org.geotools.data.postgis.PostgisNGDataStoreFactory.createDataStoreInternal(JDBCDataStore dataStore, Map<String, ?> params)": {
                "lineStart": 89,
                "lineEnd": 122
            }
        }
    },
    "CVE-2021-47621": {
        "cef6e695-VersionFinder.java": {
            "nonapi.io.github.classgraph.utils.VersionFinder.getVersion()": {
                "lineStart": 120,
                "lineEnd": 198
            }
        }
    },
    "CVE-2022-0198": {
        "5489551d3-TransformXML.java": {
            "edu.stanford.nlp.process.TransformXML.<init>()": {
                "lineStart": 120,
                "lineEnd": 129
            }
        }
    },
    "CVE-2020-13955": {
        "a3b140bee-HttpUtils.java": {
            "org.apache.calcite.runtime.HttpUtils.getURLConnection(String url)": {
                "lineStart": 16,
                "lineEnd": 26
            }
        }
    },
    "CVE-2020-2181": {
        "57c8b1a-SecretBuildWrapper.java": {
            "org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper.setUp(AbstractBuild build, final Launcher launcher, BuildListener listener)": {
                "lineStart": 45,
                "lineEnd": 79
            },
            "org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper$Filter.decorateLogger(final AbstractBuild build, final OutputStream logger)": {
                "lineStart": 102,
                "lineEnd": 135
            }
        }
    },
    "CVE-2023-31581": {
        "84f623d-JsonWebTokenUtil.java": {
            "com.usthe.sureness.util.JsonWebTokenUtil.issueJwtAll(String id, String subject, String issuer, Long period, String audience, String payload, Long notBefore, Map<String, Object> headerMap, Map<String, Object> customClaimMap)": {
                "lineStart": 79,
                "lineEnd": 122
            },
            "com.usthe.sureness.util.JsonWebTokenUtil.setDefaultSecretKey(String secretNowKeyValue)": {
                "lineStart": 148,
                "lineEnd": 151
            }
        }
    },
    "CVE-2022-25167": {
        "938d5e26-JMSSource.java": {
            "org.apache.flume.source.jms.JMSSource.doConfigure(Context context)": {
                "lineStart": 62,
                "lineEnd": 183
            }
        }
    },
    "CVE-2024-23673": {
        "61340e1-SlingScriptResolverImpl.java": {
            "org.apache.sling.servlets.resolver.internal.SlingScriptResolverImpl.findScript(final ResourceResolver resourceResolver, final String name)": {
                "lineStart": 19,
                "lineEnd": 56
            }
        },
        "00fd7c4-SlingServletResolver.java": {
            "org.apache.sling.servlets.resolver.internal.SlingServletResolver.resolveServletInternal(final SlingHttpServletRequest request, final Resource resource, final String scriptNameOrResourceType, final ResourceResolver resolver)": {
                "lineStart": 288,
                "lineEnd": 333
            }
        }
    },
    "CVE-2020-2138": {
        "faeead6-CoberturaCoverageParser.java": {
            "hudson.plugins.cobertura.CoberturaCoverageParser.parse(InputStream in, CoverageResult cumulative, Set<String> sourcePaths)": {
                "lineStart": 52,
                "lineEnd": 83
            }
        },
        "c6d7693-CoberturaPublisher.java": {
            "hudson.plugins.cobertura.CoberturaPublisher$ParseReportCallable.invoke(File f, VirtualChannel channel)": {
                "lineStart": 708,
                "lineEnd": 758
            }
        }
    },
    "CVE-2023-6149": {
        "26e0064-Helper.java": {
            "com.qualys.plugins.wasPlugin.util.Helper.execXPath(String xml, String xPath, QName type)": {
                "lineStart": 108,
                "lineEnd": 120
            },
            "com.qualys.plugins.wasPlugin.util.Helper.execXPath(Node node, String xPath, QName type)": {
                "lineStart": 122,
                "lineEnd": 133
            }
        }
    },
    "CVE-2020-14366": {
        "f15bddbf33-FolderTheme.java": {
            "org.keycloak.theme.FolderTheme.getResourceAsStream(String path)": {
                "lineStart": 60,
                "lineEnd": 73
            }
        },
        "5c75f56f2b-FolderThemeProvider.java": {
            "org.keycloak.theme.FolderThemeProvider.getThemeDir(String name, Theme.Type type)": {
                "lineStart": 62,
                "lineEnd": 64
            }
        }
    },
    "CVE-2023-5685": {
        "6118a0c7-AbstractIoFuture.java": {
            "org.xnio.AbstractIoFuture$NotifierState.<init>(final State<T> next, final Notifier<? super T, A> notifier, final A attachment)": {
                "lineStart": 201,
                "lineEnd": 205
            },
            "org.xnio.AbstractIoFuture$NotifierState.notifyDone(final AbstractIoFuture<T> future, final T result)": {
                "lineStart": 211,
                "lineEnd": 214
            },
            "org.xnio.AbstractIoFuture$NotifierState.notifyFailed(final AbstractIoFuture<T> future, final IOException exception)": {
                "lineStart": 216,
                "lineEnd": 219
            },
            "org.xnio.AbstractIoFuture$NotifierState.notifyCancelled(final AbstractIoFuture<T> future)": {
                "lineStart": 221,
                "lineEnd": 224
            },
            "org.xnio.AbstractIoFuture$NotifierState.cancel()": {
                "lineStart": 226,
                "lineEnd": 228
            },
            "org.xnio.AbstractIoFuture$NotifierState.cancelRequested()": {
                "lineStart": 234,
                "lineEnd": 236
            },
            "org.xnio.AbstractIoFuture$WaiterState.<init>(final State<T> next, final Thread waiter)": {
                "lineStart": 243,
                "lineEnd": 246
            },
            "org.xnio.AbstractIoFuture$WaiterState.notifyDone(final AbstractIoFuture<T> future, final T result)": {
                "lineStart": 252,
                "lineEnd": 255
            },
            "org.xnio.AbstractIoFuture$WaiterState.notifyFailed(final AbstractIoFuture<T> future, final IOException exception)": {
                "lineStart": 257,
                "lineEnd": 260
            },
            "org.xnio.AbstractIoFuture$WaiterState.notifyCancelled(final AbstractIoFuture<T> future)": {
                "lineStart": 262,
                "lineEnd": 265
            },
            "org.xnio.AbstractIoFuture$WaiterState.cancel()": {
                "lineStart": 267,
                "lineEnd": 269
            },
            "org.xnio.AbstractIoFuture$WaiterState.cancelRequested()": {
                "lineStart": 271,
                "lineEnd": 273
            },
            "org.xnio.AbstractIoFuture$CancellableState.<init>(final State<T> next, final Cancellable cancellable)": {
                "lineStart": 280,
                "lineEnd": 283
            },
            "org.xnio.AbstractIoFuture$CancellableState.notifyDone(final AbstractIoFuture<T> future, final T result)": {
                "lineStart": 289,
                "lineEnd": 291
            },
            "org.xnio.AbstractIoFuture$CancellableState.notifyFailed(final AbstractIoFuture<T> future, final IOException exception)": {
                "lineStart": 293,
                "lineEnd": 295
            },
            "org.xnio.AbstractIoFuture$CancellableState.notifyCancelled(final AbstractIoFuture<T> future)": {
                "lineStart": 297,
                "lineEnd": 299
            },
            "org.xnio.AbstractIoFuture$CancellableState.cancel()": {
                "lineStart": 301,
                "lineEnd": 310
            },
            "org.xnio.AbstractIoFuture$CancellableState.cancelRequested()": {
                "lineStart": 312,
                "lineEnd": 314
            },
            "org.xnio.AbstractIoFuture$CancelRequestedState.<init>(final State<T> next)": {
                "lineStart": 320,
                "lineEnd": 322
            },
            "org.xnio.AbstractIoFuture$CancelRequestedState.notifyDone(final AbstractIoFuture<T> future, final T result)": {
                "lineStart": 328,
                "lineEnd": 330
            },
            "org.xnio.AbstractIoFuture$CancelRequestedState.notifyFailed(final AbstractIoFuture<T> future, final IOException exception)": {
                "lineStart": 332,
                "lineEnd": 334
            },
            "org.xnio.AbstractIoFuture$CancelRequestedState.notifyCancelled(final AbstractIoFuture<T> future)": {
                "lineStart": 336,
                "lineEnd": 338
            },
            "org.xnio.AbstractIoFuture$CancelRequestedState.cancel()": {
                "lineStart": 340,
                "lineEnd": 341
            },
            "org.xnio.AbstractIoFuture$CancelRequestedState.cancelRequested()": {
                "lineStart": 343,
                "lineEnd": 345
            }
        }
    },
    "CVE-2022-42120": {
        "da09fb9f1760d-PortletPreferencesUpgradeProcess.java": {
            "com.liferay.fragment.internal.upgrade.v1_1_0.PortletPreferencesUpgradeProcess._getPortletPreferencesMap(long companyId, long groupId, String namespace)": {
                "lineStart": 57,
                "lineEnd": 70
            }
        }
    },
    "CVE-2020-9492": {
        "65d2211af53-AuthenticationFilterInitializer.java": {
            "org.apache.hadoop.security.AuthenticationFilterInitializer.initFilter(FilterContainer container, Configuration conf)": {
                "lineStart": 13,
                "lineEnd": 16
            }
        },
        "ea9b282ab89-AuthenticationWithProxyUserFilter.java": {
            "org.apache.hadoop.security.AuthenticationWithProxyUserFilter.doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response)": {
                "lineStart": 19,
                "lineEnd": 42
            },
            "org.apache.hadoop.security.AuthenticationWithProxyUserFilter.getDoAs(HttpServletRequest request)": {
                "lineStart": 44,
                "lineEnd": 62
            }
        }
    },
    "CVE-2021-43795": {
        "ca047f70b-ArmeriaHttpUtil.java": {
            "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": {
                "lineStart": 167,
                "lineEnd": 203
            }
        },
        "edaa12500-PathAndQuery.java": {
            "com.linecorp.armeria.internal.common.PathAndQuery.toString()": {
                "lineStart": 119,
                "lineEnd": 125
            },
            "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": {
                "lineStart": 127,
                "lineEnd": 162
            },
            "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": {
                "lineStart": 164,
                "lineEnd": 283
            },
            "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": {
                "lineStart": 317,
                "lineEnd": 334
            },
            "com.linecorp.armeria.internal.common.PathAndQuery.encodeToPercents(Bytes value, boolean isPath)": {
                "lineStart": 336,
                "lineEnd": 387
            },
            "com.linecorp.armeria.internal.common.PathAndQuery.appendHexNibble(StringBuilder buf, int nibble)": {
                "lineStart": 389,
                "lineEnd": 397
            },
            "com.linecorp.armeria.internal.common.PathAndQuery$ReservedChar.<init>(int rawChar, String percentEncodedChar, byte marker)": {
                "lineStart": 471,
                "lineEnd": 475
            },
            "com.linecorp.armeria.internal.common.PathAndQuery.appendOneByte(Bytes buf, int cp, boolean wasSlash, boolean isPath)": {
                "lineStart": 285,
                "lineEnd": 315
            }
        },
        "6b6a0f085-RoutingResultBuilder.java": {
            "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": {
                "lineStart": 43,
                "lineEnd": 46
            }
        }
    },
    "CVE-2022-38369": {
        "d71e54e128-ServiceProvider.java": {
            "org.apache.iotdb.db.service.basic.ServiceProvider.checkLogin(long sessionId)": {
                "lineStart": 63,
                "lineEnd": 73
            }
        }
    },
    "CVE-2022-43408": {
        "1c3087a-RunAPI.java": {
            "com.cloudbees.workflow.rest.endpoints.RunAPI.getInputStepSubmitUrl(WorkflowRun run, String inputId)": {
                "lineStart": 51,
                "lineEnd": 53
            }
        },
        "3c77c96-PendingInputActionsExt.java": {
            "com.cloudbees.workflow.rest.external.PendingInputActionsExt.create(InputStepExecution inputStepExecution, WorkflowRun run)": {
                "lineStart": 77,
                "lineEnd": 89
            }
        }
    },
    "CVE-2023-41933": {
        "8206544-FileHistoryDao.java": {
            "hudson.plugins.jobConfigHistory.FileHistoryDao.getOldRevision(final AbstractItem item, final String identifier)": {
                "lineStart": 397,
                "lineEnd": 408
            },
            "hudson.plugins.jobConfigHistory.FileHistoryDao.getOldRevision(final Node node, final String identifier)": {
                "lineStart": 966,
                "lineEnd": 969
            }
        },
        "dc3a67b-JobConfigHistoryBaseAction.java": {
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDisplayName()": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getUrlName()": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getOutputType()": {
                "lineStart": 67,
                "lineEnd": 73
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.checkTimestamp(String timestamp)": {
                "lineStart": 75,
                "lineEnd": 82
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRequestParameter(final String parameterName)": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.checkConfigurePermission()": {
                "lineStart": 88,
                "lineEnd": 88
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.hasAdminPermission()": {
                "lineStart": 89,
                "lineEnd": 89
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.hasDeleteEntryPermission()": {
                "lineStart": 90,
                "lineEnd": 90
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.checkDeleteEntryPermission()": {
                "lineStart": 91,
                "lineEnd": 91
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.hasConfigurePermission()": {
                "lineStart": 92,
                "lineEnd": 92
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRevisionAmount()": {
                "lineStart": 93,
                "lineEnd": 93
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getAccessControlledObject()": {
                "lineStart": 94,
                "lineEnd": 94
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDiffLines(List<String> diffLines)": {
                "lineStart": 95,
                "lineEnd": 104
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDiffAsString(final File file1, final File file2, final String[] file1Lines, final String[] file2Lines)": {
                "lineStart": 106,
                "lineEnd": 108
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getVersionDiffsOnly(final String file1Str, final String file2Str)": {
                "lineStart": 110,
                "lineEnd": 140
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getShowVersionDiffs()": {
                "lineStart": 142,
                "lineEnd": 145
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getLines()": {
                "lineStart": 147,
                "lineEnd": 150
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getLines(boolean useRegex)": {
                "lineStart": 152,
                "lineEnd": 152
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.reformatAndConcatStringArray(String[] arr)": {
                "lineStart": 153,
                "lineEnd": 176
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getDiffAsString(final File file1, final File file2, final String[] file1Lines, final String[] file2Lines, final boolean hideVersionDiffs)": {
                "lineStart": 178,
                "lineEnd": 232
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRelevantPageNums(int currentPageNum)": {
                "lineStart": 234,
                "lineEnd": 236
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getRelevantPageNums(int currentPageNum, int maxPageNum)": {
                "lineStart": 238,
                "lineEnd": 274
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getMaxEntriesPerPage()": {
                "lineStart": 276,
                "lineEnd": 286
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getMaxPageNum()": {
                "lineStart": 288,
                "lineEnd": 295
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.doDiffFiles(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 297,
                "lineEnd": 306
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.doDiffFilesPrevNext(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 308,
                "lineEnd": 312
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getCurrentRequest()": {
                "lineStart": 314,
                "lineEnd": 316
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getPlugin()": {
                "lineStart": 318,
                "lineEnd": 320
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getHistoryDao()": {
                "lineStart": 322,
                "lineEnd": 324
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.sort(File file)": {
                "lineStart": 326,
                "lineEnd": 346
            },
            "hudson.plugins.jobConfigHistory.JobConfigHistoryBaseAction.getLines(XmlFile leftConfig, XmlFile rightConfig, boolean hideVersionDiffs)": {
                "lineStart": 348,
                "lineEnd": 354
            }
        }
    },
    "CVE-2023-51784": {
        "4addf6514-AuditController.java": {
            "org.apache.inlong.manager.web.controller.AuditController.updateAuditSource(@RequestBody AuditSourceRequest request)": {
                "lineStart": 34,
                "lineEnd": 38
            }
        }
    },
    "CVE-2023-34453": {
        "fa62347-BitShuffle.java": {
            "org.xerial.snappy.BitShuffle.shuffle(short[] input)": {
                "lineStart": 43,
                "lineEnd": 48
            },
            "org.xerial.snappy.BitShuffle.shuffle(int[] input)": {
                "lineStart": 50,
                "lineEnd": 55
            },
            "org.xerial.snappy.BitShuffle.shuffle(long[] input)": {
                "lineStart": 57,
                "lineEnd": 62
            },
            "org.xerial.snappy.BitShuffle.shuffle(float[] input)": {
                "lineStart": 64,
                "lineEnd": 69
            },
            "org.xerial.snappy.BitShuffle.shuffle(double[] input)": {
                "lineStart": 71,
                "lineEnd": 76
            }
        },
        "24d5b18-SnappyErrorCode.java": {
            "org.xerial.snappy.SnappyErrorCode.<init>(int id)": {
                "lineStart": 5,
                "lineEnd": 7
            },
            "org.xerial.snappy.SnappyErrorCode.getErrorCode(int id)": {
                "lineStart": 9,
                "lineEnd": 18
            },
            "org.xerial.snappy.SnappyErrorCode.getErrorMessage(int id)": {
                "lineStart": 20,
                "lineEnd": 22
            }
        }
    },
    "CVE-2024-39676": {
        "485131a3e5-AccessControl.java": {
            "org.apache.pinot.broker.api.AccessControl.hasAccess(RequesterIdentity requesterIdentity)": {
                "lineStart": 7,
                "lineEnd": 9
            },
            "org.apache.pinot.broker.api.AccessControl.hasAccess(RequesterIdentity requesterIdentity, BrokerRequest brokerRequest)": {
                "lineStart": 11,
                "lineEnd": 11
            },
            "org.apache.pinot.broker.api.AccessControl.hasAccess(RequesterIdentity requesterIdentity, Set<String> tables)": {
                "lineStart": 12,
                "lineEnd": 12
            }
        },
        "cc3eeec0f8-PinotBrokerAppConfigs.java": {
            "org.apache.pinot.broker.api.resources.PinotBrokerAppConfigs.getAppConfigs()": {
                "lineStart": 22,
                "lineEnd": 26
            }
        },
        "f9eb55b535-PinotBrokerDebug.java": {
            "org.apache.pinot.broker.api.resources.PinotBrokerDebug.getRoutingTableForQuery(@ApiParam(value = \"SQL query (table name should have type suffix)\") @QueryParam(\"query\") String query)": {
                "lineStart": 86,
                "lineEnd": 97
            }
        },
        "ac0c16b7a0-PinotBrokerHealthCheck.java": {
            "org.apache.pinot.broker.api.resources.PinotBrokerHealthCheck.getBrokerHealth()": {
                "lineStart": 29,
                "lineEnd": 42
            }
        },
        "bf3112ed20-PinotBrokerLogger.java": {
            "org.apache.pinot.broker.api.resources.PinotBrokerLogger.getLoggers()": {
                "lineStart": 32,
                "lineEnd": 35
            },
            "org.apache.pinot.broker.api.resources.PinotBrokerLogger.getLogger(@ApiParam(value = \"Logger name\", required = true) @PathParam(\"loggerName\") String loggerName)": {
                "lineStart": 37,
                "lineEnd": 45
            },
            "org.apache.pinot.broker.api.resources.PinotBrokerLogger.setLoggerLevel(@ApiParam(value = \"Logger name\") @PathParam(\"loggerName\") String loggerName, @ApiParam(value = \"Logger level\") @QueryParam(\"level\") String level)": {
                "lineStart": 47,
                "lineEnd": 50
            },
            "org.apache.pinot.broker.api.resources.PinotBrokerLogger.getLocalLogFiles()": {
                "lineStart": 52,
                "lineEnd": 65
            },
            "org.apache.pinot.broker.api.resources.PinotBrokerLogger.downloadLogFile(@ApiParam(value = \"Log file path\", required = true) @QueryParam(\"filePath\") String filePath)": {
                "lineStart": 67,
                "lineEnd": 74
            }
        },
        "e5179b82ea-PinotBrokerRouting.java": {
            "org.apache.pinot.broker.api.resources.PinotBrokerRouting.buildRouting(@ApiParam(value = \"Table name (with type)\") @PathParam(\"tableName\") String tableNameWithType)": {
                "lineStart": 26,
                "lineEnd": 31
            },
            "org.apache.pinot.broker.api.resources.PinotBrokerRouting.refreshRouting(@ApiParam(value = \"Table name (with type)\") @PathParam(\"tableName\") String tableNameWithType, @ApiParam(value = \"Segment name\") @PathParam(\"segmentName\") String segmentName)": {
                "lineStart": 33,
                "lineEnd": 38
            },
            "org.apache.pinot.broker.api.resources.PinotBrokerRouting.removeRouting(@ApiParam(value = \"Table name (with type)\") @PathParam(\"tableName\") String tableNameWithType)": {
                "lineStart": 40,
                "lineEnd": 45
            }
        },
        "5792579c3a-PinotClientRequest.java": {
            "org.apache.pinot.broker.api.resources.PinotClientRequest.processSqlQueryGet(@ApiParam(value = \"Query\", required = true) @QueryParam(\"sql\") String query, @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled, @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions, @Suspended AsyncResponse asyncResponse, @Context org.glassfish.grizzly.http.server.Request requestContext)": {
                "lineStart": 65,
                "lineEnd": 91
            },
            "org.apache.pinot.broker.api.resources.PinotClientRequest.processSqlQueryPost(String query, @Suspended AsyncResponse asyncResponse, @Context org.glassfish.grizzly.http.server.Request requestContext)": {
                "lineStart": 93,
                "lineEnd": 114
            },
            "org.apache.pinot.broker.api.resources.PinotClientRequest.executeSqlQuery(ObjectNode sqlRequestJson, HttpRequesterIdentity httpRequesterIdentity, boolean onlyDql)": {
                "lineStart": 150,
                "lineEnd": 177
            }
        },
        "644f449742-AuthenticationFilter.java": {
            "org.apache.pinot.broker.broker.AuthenticationFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 31,
                "lineEnd": 49
            }
        },
        "c54183da8b-BaseBrokerStarter.java": {
            "org.apache.pinot.broker.broker.helix.BaseBrokerStarter.start()": {
                "lineStart": 165,
                "lineEnd": 286
            }
        },
        "4a8ed8f3e7-BaseBrokerRequestHandler.java": {
            "org.apache.pinot.broker.requesthandler.BaseBrokerRequestHandler.handleRequest(JsonNode request, @Nullable SqlNodeAndOptions sqlNodeAndOptions, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 192,
                "lineEnd": 225
            },
            "org.apache.pinot.broker.requesthandler.BaseBrokerRequestHandler.handleRequest(long requestId, String query, @Nullable SqlNodeAndOptions sqlNodeAndOptions, JsonNode request, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 227,
                "lineEnd": 629
            },
            "org.apache.pinot.broker.requesthandler.BaseBrokerRequestHandler.handleSubquery(PinotQuery pinotQuery, long requestId, JsonNode jsonRequest, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 713,
                "lineEnd": 719
            },
            "org.apache.pinot.broker.requesthandler.BaseBrokerRequestHandler.handleSubquery(Expression expression, long requestId, JsonNode jsonRequest, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 721,
                "lineEnd": 749
            }
        },
        "873cb9e0a1-BrokerRequestHandler.java": {
            "org.apache.pinot.broker.requesthandler.BrokerRequestHandler.handleRequest(JsonNode request, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 16,
                "lineEnd": 18
            }
        },
        "360291ec69-BrokerRequestHandlerDelegate.java": {
            "org.apache.pinot.broker.requesthandler.BrokerRequestHandlerDelegate.handleRequest(JsonNode request, @Nullable SqlNodeAndOptions sqlNodeAndOptions, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 54,
                "lineEnd": 80
            }
        },
        "5e030919fa-MultiStageBrokerRequestHandler.java": {
            "org.apache.pinot.broker.requesthandler.MultiStageBrokerRequestHandler.handleRequest(JsonNode request, @Nullable SqlNodeAndOptions sqlNodeAndOptions, @Nullable RequesterIdentity requesterIdentity, RequestContext requestContext)": {
                "lineStart": 87,
                "lineEnd": 111
            }
        },
        "1b7c61993a-AccessControl.java": {
            "org.apache.pinot.controller.api.access.AccessControl.hasDataAccess(HttpHeaders httpHeaders, String tableName)": {
                "lineStart": 9,
                "lineEnd": 12
            },
            "org.apache.pinot.controller.api.access.AccessControl.hasAccess(@Nullable String tableName, AccessType accessType, HttpHeaders httpHeaders, @Nullable String endpointUrl)": {
                "lineStart": 14,
                "lineEnd": 16
            },
            "org.apache.pinot.controller.api.access.AccessControl.hasAccess(AccessType accessType, HttpHeaders httpHeaders, @Nullable String endpointUrl)": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "org.apache.pinot.controller.api.access.AccessControl.protectAnnotatedOnly()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "org.apache.pinot.controller.api.access.AccessControl.getAuthWorkflowInfo()": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "org.apache.pinot.controller.api.access.AccessControl$AuthWorkflowInfo.<init>(String workflow)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.apache.pinot.controller.api.access.AccessControl$AuthWorkflowInfo.getWorkflow()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "org.apache.pinot.controller.api.access.AccessControl$AuthWorkflowInfo.setWorkflow(String workflow)": {
                "lineStart": 40,
                "lineEnd": 42
            }
        },
        "0a0166ccb9-AuthenticationFilter.java": {
            "org.apache.pinot.controller.api.access.AuthenticationFilter.filter(ContainerRequestContext requestContext)": {
                "lineStart": 35,
                "lineEnd": 56
            }
        },
        "badd427bcc-DebugResource.java": {
            "org.apache.pinot.controller.api.resources.DebugResource.getTableDebugInfo(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Verbosity of debug information\") @DefaultValue(\"0\") @QueryParam(\"verbosity\") int verbosity)": {
                "lineStart": 79,
                "lineEnd": 95
            },
            "org.apache.pinot.controller.api.resources.DebugResource.getSegmentDebugInfo(@ApiParam(value = \"Name of the table (with type)\", required = true) @PathParam(\"tableName\") String tableNameWithType, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") String segmentName)": {
                "lineStart": 97,
                "lineEnd": 101
            },
            "org.apache.pinot.controller.api.resources.DebugResource.debugTable(PinotHelixResourceManager pinotHelixResourceManager, String tableName, TableType tableType, int verbosity)": {
                "lineStart": 103,
                "lineEnd": 113
            },
            "org.apache.pinot.controller.api.resources.DebugResource.getIngestionStatus(String tableNameWithType, TableType tableType)": {
                "lineStart": 115,
                "lineEnd": 131
            },
            "org.apache.pinot.controller.api.resources.DebugResource.getTableSize(String tableNameWithType)": {
                "lineStart": 133,
                "lineEnd": 144
            },
            "org.apache.pinot.controller.api.resources.DebugResource.debugSegment(String tableNameWithType, String segmentName)": {
                "lineStart": 146,
                "lineEnd": 195
            },
            "org.apache.pinot.controller.api.resources.DebugResource.debugSegments(PinotHelixResourceManager pinotHelixResourceManager, String tableNameWithType, int verbosity)": {
                "lineStart": 197,
                "lineEnd": 246
            },
            "org.apache.pinot.controller.api.resources.DebugResource.segmentHasErrors(SegmentServerDebugInfo segmentServerDebugInfo, String externalView)": {
                "lineStart": 248,
                "lineEnd": 260
            },
            "org.apache.pinot.controller.api.resources.DebugResource.debugBrokers(String tableNameWithType, int verbosity)": {
                "lineStart": 262,
                "lineEnd": 278
            },
            "org.apache.pinot.controller.api.resources.DebugResource.debugServers(PinotHelixResourceManager pinotHelixResourceManager, String tableName, TableType tableType)": {
                "lineStart": 280,
                "lineEnd": 303
            },
            "org.apache.pinot.controller.api.resources.DebugResource.getSegmentsDebugInfoFromServers(String tableNameWithType, BiMap<String, String> serverToEndpoints, int timeoutMs)": {
                "lineStart": 305,
                "lineEnd": 336
            },
            "org.apache.pinot.controller.api.resources.DebugResource.getValidTableTypes(String tableName, String tableTypeStr, PinotHelixResourceManager pinotHelixResourceManager)": {
                "lineStart": 338,
                "lineEnd": 360
            }
        },
        "b287f07dfc-LLCSegmentCompletionHandlers.java": {
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.getScheme()": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extendBuildTime(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_EXTRA_TIME_SEC) int extraTimeSec)": {
                "lineStart": 50,
                "lineEnd": 69
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extractOffsetFromParams(SegmentCompletionProtocol.Request.Params requestParams, String streamPartitionMsgOffset, long offset)": {
                "lineStart": 71,
                "lineEnd": 79
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentConsumed(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_REASON) String stopReason, @QueryParam(SegmentCompletionProtocol.PARAM_MEMORY_USED_BYTES) long memoryUsedBytes, @QueryParam(SegmentCompletionProtocol.PARAM_ROW_COUNT) int numRows)": {
                "lineStart": 81,
                "lineEnd": 95
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentStoppedConsuming(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_REASON) String stopReason)": {
                "lineStart": 97,
                "lineEnd": 111
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentCommitStart(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_MEMORY_USED_BYTES) long memoryUsedBytes, @QueryParam(SegmentCompletionProtocol.PARAM_BUILD_TIME_MILLIS) long buildTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_WAIT_TIME_MILLIS) long waitTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_ROW_COUNT) int numRows, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_SIZE_BYTES) long segmentSizeBytes)": {
                "lineStart": 113,
                "lineEnd": 128
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentCommitEnd(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_LOCATION) String segmentLocation, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_MEMORY_USED_BYTES) long memoryUsedBytes, @QueryParam(SegmentCompletionProtocol.PARAM_BUILD_TIME_MILLIS) long buildTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_WAIT_TIME_MILLIS) long waitTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_ROW_COUNT) int numRows, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_SIZE_BYTES) long segmentSizeBytes)": {
                "lineStart": 130,
                "lineEnd": 156
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentCommit(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_MEMORY_USED_BYTES) long memoryUsedBytes, @QueryParam(SegmentCompletionProtocol.PARAM_BUILD_TIME_MILLIS) long buildTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_WAIT_TIME_MILLIS) long waitTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_SIZE_BYTES) long segmentSizeBytes, @QueryParam(SegmentCompletionProtocol.PARAM_ROW_COUNT) int numRows, FormDataMultiPart multiPart)": {
                "lineStart": 158,
                "lineEnd": 200
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentUpload(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, FormDataMultiPart multiPart)": {
                "lineStart": 202,
                "lineEnd": 227
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.segmentCommitEndWithMetadata(@QueryParam(SegmentCompletionProtocol.PARAM_INSTANCE_ID) String instanceId, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_NAME) String segmentName, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_LOCATION) String segmentLocation, @QueryParam(SegmentCompletionProtocol.PARAM_OFFSET) long offset, @QueryParam(SegmentCompletionProtocol.PARAM_STREAM_PARTITION_MSG_OFFSET) String streamPartitionMsgOffset, @QueryParam(SegmentCompletionProtocol.PARAM_MEMORY_USED_BYTES) long memoryUsedBytes, @QueryParam(SegmentCompletionProtocol.PARAM_BUILD_TIME_MILLIS) long buildTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_WAIT_TIME_MILLIS) long waitTimeMillis, @QueryParam(SegmentCompletionProtocol.PARAM_ROW_COUNT) int numRows, @QueryParam(SegmentCompletionProtocol.PARAM_SEGMENT_SIZE_BYTES) long segmentSizeBytes, FormDataMultiPart metadataFiles)": {
                "lineStart": 229,
                "lineEnd": 254
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extractSegmentFromFormToLocalTempFile(FormDataMultiPart form, String segmentName)": {
                "lineStart": 256,
                "lineEnd": 276
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extractMetadataFromLocalSegmentFile(File segmentFile)": {
                "lineStart": 278,
                "lineEnd": 290
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extractSegmentMetadataFromForm(FormDataMultiPart form, String segmentName)": {
                "lineStart": 292,
                "lineEnd": 304
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extractFileFromForm(FormDataMultiPart form, String fileName, File outputDir)": {
                "lineStart": 306,
                "lineEnd": 313
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.extractMetadataFromSegmentFileURI(URI segmentFileURI, String segmentName)": {
                "lineStart": 315,
                "lineEnd": 325
            },
            "org.apache.pinot.controller.api.resources.LLCSegmentCompletionHandlers.getTempSegmentFileName(String segmentName)": {
                "lineStart": 327,
                "lineEnd": 329
            }
        },
        "eb7fa763fd-PinotAccessControlUserRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotAccessControlUserRestletResource.listUers()": {
                "lineStart": 44,
                "lineEnd": 55
            },
            "org.apache.pinot.controller.api.resources.PinotAccessControlUserRestletResource.getUser(@PathParam(\"username\") String username, @QueryParam(\"component\") String componentTypeStr)": {
                "lineStart": 57,
                "lineEnd": 70
            },
            "org.apache.pinot.controller.api.resources.PinotAccessControlUserRestletResource.addUser(String userConfigStr)": {
                "lineStart": 72,
                "lineEnd": 102
            },
            "org.apache.pinot.controller.api.resources.PinotAccessControlUserRestletResource.deleteUser(@PathParam(\"username\") String username, @QueryParam(\"component\") String componentTypeStr)": {
                "lineStart": 104,
                "lineEnd": 126
            },
            "org.apache.pinot.controller.api.resources.PinotAccessControlUserRestletResource.updateUserConfig(@PathParam(\"username\") String username, @QueryParam(\"component\") String componentTypeStr, @QueryParam(\"passwordChanged\") boolean passwordChanged, String userConfigString)": {
                "lineStart": 128,
                "lineEnd": 154
            }
        },
        "4b84590dba-PinotClusterConfigs.java": {
            "org.apache.pinot.controller.api.resources.PinotClusterConfigs.getClusterInfo()": {
                "lineStart": 46,
                "lineEnd": 52
            },
            "org.apache.pinot.controller.api.resources.PinotClusterConfigs.listClusterConfigs()": {
                "lineStart": 54,
                "lineEnd": 67
            },
            "org.apache.pinot.controller.api.resources.PinotClusterConfigs.updateClusterConfig(String body)": {
                "lineStart": 69,
                "lineEnd": 94
            },
            "org.apache.pinot.controller.api.resources.PinotClusterConfigs.deleteClusterConfig(@ApiParam(value = \"Name of the config to delete\", required = true) @PathParam(\"configName\") String configName)": {
                "lineStart": 96,
                "lineEnd": 110
            }
        },
        "6b9e6d0b1b-PinotControllerAppConfigs.java": {
            "org.apache.pinot.controller.api.resources.PinotControllerAppConfigs.getAppConfigs()": {
                "lineStart": 22,
                "lineEnd": 26
            }
        },
        "52e518cfed-PinotControllerAuthResource.java": {
            "org.apache.pinot.controller.api.resources.PinotControllerAuthResource.verify(@ApiParam(value = \"Table name without type\") @QueryParam(\"tableName\") String tableName, @ApiParam(value = \"API access type\") @DefaultValue(\"READ\") @QueryParam(\"accessType\") AccessType accessType, @ApiParam(value = \"Endpoint URL\") @QueryParam(\"endpointUrl\") String endpointUrl)": {
                "lineStart": 30,
                "lineEnd": 35
            },
            "org.apache.pinot.controller.api.resources.PinotControllerAuthResource.info()": {
                "lineStart": 37,
                "lineEnd": 41
            }
        },
        "18652ae855-PinotControllerHealthCheck.java": {
            "org.apache.pinot.controller.api.resources.PinotControllerHealthCheck.checkHealthLegacy()": {
                "lineStart": 33,
                "lineEnd": 41
            },
            "org.apache.pinot.controller.api.resources.PinotControllerHealthCheck.checkHealth()": {
                "lineStart": 43,
                "lineEnd": 56
            }
        },
        "d57746b462-PinotControllerLogger.java": {
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.getLoggers()": {
                "lineStart": 54,
                "lineEnd": 57
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.getLogger(@ApiParam(value = \"Logger name\", required = true) @PathParam(\"loggerName\") String loggerName)": {
                "lineStart": 59,
                "lineEnd": 67
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.setLoggerLevel(@ApiParam(value = \"Logger name\") @PathParam(\"loggerName\") String loggerName, @ApiParam(value = \"Logger level\") @QueryParam(\"level\") String level)": {
                "lineStart": 69,
                "lineEnd": 72
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.getLocalLogFiles()": {
                "lineStart": 74,
                "lineEnd": 87
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.downloadLogFile(@ApiParam(value = \"Log file path\", required = true) @QueryParam(\"filePath\") String filePath)": {
                "lineStart": 89,
                "lineEnd": 96
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.getLogFilesFromAllInstances(@HeaderParam(HttpHeaders.AUTHORIZATION) String authorization)": {
                "lineStart": 98,
                "lineEnd": 117
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.getLogFilesFromInstance(@HeaderParam(HttpHeaders.AUTHORIZATION) String authorization, @ApiParam(value = \"Instance Name\", required = true) @PathParam(\"instanceName\") String instanceName)": {
                "lineStart": 119,
                "lineEnd": 141
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.downloadLogFileFromInstance(@HeaderParam(HttpHeaders.AUTHORIZATION) String authorization, @ApiParam(value = \"Instance Name\", required = true) @PathParam(\"instanceName\") String instanceName, @ApiParam(value = \"Log file path\", required = true) @QueryParam(\"filePath\") String filePath, @Context Map<String, String> headers)": {
                "lineStart": 143,
                "lineEnd": 174
            },
            "org.apache.pinot.controller.api.resources.PinotControllerLogger.getInstanceBaseUri(String instanceName)": {
                "lineStart": 176,
                "lineEnd": 178
            }
        },
        "50d4c35a9e-PinotControllerPeriodicTaskRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotControllerPeriodicTaskRestletResource.runPeriodicTask(@ApiParam(value = \"Periodic task name\", required = true) @QueryParam(\"taskname\") String periodicTaskName, @ApiParam(value = \"Name of the table\") @QueryParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE | REALTIME\") @QueryParam(\"type\") String tableType)": {
                "lineStart": 32,
                "lineEnd": 49
            },
            "org.apache.pinot.controller.api.resources.PinotControllerPeriodicTaskRestletResource.getPeriodicTaskNames()": {
                "lineStart": 51,
                "lineEnd": 54
            }
        },
        "8d3bf0d4ca-PinotIngestionRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotIngestionRestletResource.ingestFromFile(@ApiParam(value = \"Name of the table to upload the file to\", required = true) @QueryParam(\"tableNameWithType\") String tableNameWithType, @ApiParam(value = \"Batch config Map as json string. Must pass inputFormat, and optionally record reader properties. e.g. \" + \"{\\\"inputFormat\\\":\\\"json\\\"}\", required = true) @QueryParam(\"batchConfigMapStr\") String batchConfigMapStr, FormDataMultiPart fileUpload, @Suspended final AsyncResponse asyncResponse)": {
                "lineStart": 55,
                "lineEnd": 67
            },
            "org.apache.pinot.controller.api.resources.PinotIngestionRestletResource.ingestFromURI(@ApiParam(value = \"Name of the table to upload the file to\", required = true) @QueryParam(\"tableNameWithType\") String tableNameWithType, @ApiParam(value = \"Batch config Map as json string. Must pass inputFormat, and optionally input FS properties. e.g. \" + \"{\\\"inputFormat\\\":\\\"json\\\"}\", required = true) @QueryParam(\"batchConfigMapStr\") String batchConfigMapStr, @ApiParam(value = \"URI of file to upload\", required = true) @QueryParam(\"sourceURIStr\") String sourceURIStr, @Suspended final AsyncResponse asyncResponse)": {
                "lineStart": 69,
                "lineEnd": 81
            },
            "org.apache.pinot.controller.api.resources.PinotIngestionRestletResource.ingestData(String tableNameWithType, String batchConfigMapStr, DataPayload payload)": {
                "lineStart": 83,
                "lineEnd": 94
            },
            "org.apache.pinot.controller.api.resources.PinotIngestionRestletResource.getControllerUri()": {
                "lineStart": 96,
                "lineEnd": 104
            }
        },
        "aee7df4e8a-PinotInstanceAssignmentRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.getInstancePartitions(@ApiParam(value = \"Name of the table\") @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|CONSUMING|COMPLETED|tier name\") @QueryParam(\"type\") @Nullable String type)": {
                "lineStart": 56,
                "lineEnd": 116
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.assignInstances(@ApiParam(value = \"Name of the table\") @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|CONSUMING|COMPLETED|tier name\") @QueryParam(\"type\") @Nullable String type, @ApiParam(value = \"Whether to do dry-run\") @DefaultValue(\"false\") @QueryParam(\"dryRun\") boolean dryRun)": {
                "lineStart": 118,
                "lineEnd": 195
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.assignInstancesForInstancePartitionsType(Map<String, InstancePartitions> instancePartitionsMap, TableConfig tableConfig, List<InstanceConfig> instanceConfigs, InstancePartitionsType instancePartitionsType)": {
                "lineStart": 197,
                "lineEnd": 207
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.assignInstancesForTier(Map<String, InstancePartitions> instancePartitionsMap, TableConfig tableConfig, List<InstanceConfig> instanceConfigs, String tierName)": {
                "lineStart": 209,
                "lineEnd": 221
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.persistInstancePartitionsHelper(InstancePartitions instancePartitions)": {
                "lineStart": 223,
                "lineEnd": 232
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.setInstancePartitions(@ApiParam(value = \"Name of the table\") @PathParam(\"tableName\") String tableName, String instancePartitionsStr)": {
                "lineStart": 234,
                "lineEnd": 284
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.removeInstancePartitions(@ApiParam(value = \"Name of the table\") @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|CONSUMING|COMPLETED|tier name\") @QueryParam(\"type\") @Nullable String instancePartitionsType)": {
                "lineStart": 286,
                "lineEnd": 320
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.removeInstancePartitionsHelper(String instancePartitionsName)": {
                "lineStart": 322,
                "lineEnd": 331
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceAssignmentRestletResource.replaceInstance(@ApiParam(value = \"Name of the table\") @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|CONSUMING|COMPLETED|tier name\") @QueryParam(\"type\") @Nullable String type, @ApiParam(value = \"Old instance to be replaced\", required = true) @QueryParam(\"oldInstanceId\") String oldInstanceId, @ApiParam(value = \"New instance to replace with\", required = true) @QueryParam(\"newInstanceId\") String newInstanceId)": {
                "lineStart": 333,
                "lineEnd": 361
            }
        },
        "06ca9ec92f-PinotInstanceRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource$Instances.<init>(@JsonProperty(\"instances\") List<String> instances)": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource$Instances.getInstances()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getAllInstances()": {
                "lineStart": 68,
                "lineEnd": 72
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getInstance(@ApiParam(value = \"Instance name\", required = true, example = \"Server_a.b.com_20000 | Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName)": {
                "lineStart": 74,
                "lineEnd": 100
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getGrpcPort(InstanceConfig instanceConfig)": {
                "lineStart": 102,
                "lineEnd": 115
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getAdminPort(InstanceConfig instanceConfig)": {
                "lineStart": 117,
                "lineEnd": 130
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getQueryServicePort(InstanceConfig instanceConfig)": {
                "lineStart": 132,
                "lineEnd": 145
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getQueryMailboxPort(InstanceConfig instanceConfig)": {
                "lineStart": 147,
                "lineEnd": 160
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getSystemResourceInfo(InstanceConfig instanceConfig)": {
                "lineStart": 162,
                "lineEnd": 164
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.addInstance(@ApiParam(\"Whether to update broker resource for broker instance\") @QueryParam(\"updateBrokerResource\") @DefaultValue(\"false\") boolean updateBrokerResource, Instance instance)": {
                "lineStart": 166,
                "lineEnd": 182
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.toggleInstanceState(@ApiParam(value = \"Instance name\", required = true, example = \"Server_a.b.com_20000 | Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName, @ApiParam(value = \"enable|disable\", required = true) @QueryParam(\"state\") String state)": {
                "lineStart": 184,
                "lineEnd": 210
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.toggleInstanceStateDeprecated(@ApiParam(value = \"Instance name\", required = true, example = \"Server_a.b.com_20000 | Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName, String state)": {
                "lineStart": 212,
                "lineEnd": 245
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.dropInstance(@ApiParam(value = \"Instance name\", required = true, example = \"Server_a.b.com_20000 | Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName)": {
                "lineStart": 247,
                "lineEnd": 265
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.updateInstance(@ApiParam(value = \"Instance name\", required = true, example = \"Server_a.b.com_20000 | Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName, @ApiParam(\"Whether to update broker resource for broker instance\") @QueryParam(\"updateBrokerResource\") @DefaultValue(\"false\") boolean updateBrokerResource, Instance instance)": {
                "lineStart": 267,
                "lineEnd": 282
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.updateInstanceTags(@ApiParam(value = \"Instance name\", required = true, example = \"Server_a.b.com_20000 | Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName, @ApiParam(value = \"Comma separated tags list\", required = true) @QueryParam(\"tags\") String tags, @ApiParam(\"Whether to update broker resource for broker instance\") @QueryParam(\"updateBrokerResource\") @DefaultValue(\"false\") boolean updateBrokerResource)": {
                "lineStart": 284,
                "lineEnd": 303
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.updateBrokerResource(@ApiParam(value = \"Instance name\", required = true, example = \"Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String instanceName)": {
                "lineStart": 305,
                "lineEnd": 320
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.instanceDropSafetyCheck(@ApiParam(value = \"Instance names\", required = true, example = \"Broker_my.broker.com_30000\") @QueryParam(\"instanceNames\") List<String> instanceNames)": {
                "lineStart": 322,
                "lineEnd": 336
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.instanceTagUpdateSafetyCheck(List<InstanceTagUpdateRequest> requests)": {
                "lineStart": 338,
                "lineEnd": 393
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getInstanceTypeFromTag(String tag)": {
                "lineStart": 395,
                "lineEnd": 406
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.computeTagDeficiency(Map<String, Integer> tagToInstanceCountMap, Map<String, Integer> tagToMinInstanceCountMap)": {
                "lineStart": 408,
                "lineEnd": 419
            },
            "org.apache.pinot.controller.api.resources.PinotInstanceRestletResource.getUpdatedTagToInstanceCountMap(List<InstanceTagUpdateRequest> requests)": {
                "lineStart": 421,
                "lineEnd": 440
            }
        },
        "ffbfd305b4-PinotLeadControllerRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource.getLeadersForAllTables()": {
                "lineStart": 42,
                "lineEnd": 75
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource.getLeaderForTable(@ApiParam(value = \"Table name\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 77,
                "lineEnd": 101
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource.getLeadControllerResourceExternalView(HelixManager helixManager)": {
                "lineStart": 103,
                "lineEnd": 105
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource.getParticipantInstanceIdFromExternalView(ExternalView leadControllerResourceExternalView, String partitionName)": {
                "lineStart": 107,
                "lineEnd": 122
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource$LeadControllerEntry.<init>(String leadControllerId, List<String> tableNames)": {
                "lineStart": 128,
                "lineEnd": 131
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource$LeadControllerEntry.getLeadControllerId()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource$LeadControllerEntry.getTableNames()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource$LeadControllerResponse.<init>(boolean isLeadControllerResourceEnabled, Map<String, LeadControllerEntry> leadControllerEntryMap)": {
                "lineStart": 147,
                "lineEnd": 150
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource$LeadControllerResponse.isLeadControllerResourceEnabled()": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "org.apache.pinot.controller.api.resources.PinotLeadControllerRestletResource$LeadControllerResponse.getLeadControllerEntryMap()": {
                "lineStart": 156,
                "lineEnd": 158
            }
        },
        "3b3abb7981-PinotQueryResource.java": {
            "org.apache.pinot.controller.api.resources.PinotQueryResource.handlePostSql(String requestJsonStr, @Context HttpHeaders httpHeaders)": {
                "lineStart": 75,
                "lineEnd": 105
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.handleGetSql(@QueryParam(\"sql\") String sqlQuery, @QueryParam(\"trace\") String traceEnabled, @QueryParam(\"queryOptions\") String queryOptions, @Context HttpHeaders httpHeaders)": {
                "lineStart": 107,
                "lineEnd": 125
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.executeSqlQuery(@Context HttpHeaders httpHeaders, String sqlQuery, String traceEnabled, @Nullable String queryOptions, String endpointUrl)": {
                "lineStart": 127,
                "lineEnd": 164
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.getMultiStageQueryResponse(String query, String queryOptions, HttpHeaders httpHeaders, String endpointUrl, String traceEnabled)": {
                "lineStart": 166,
                "lineEnd": 205
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.getQueryResponse(String query, @Nullable SqlNode sqlNode, String traceEnabled, String queryOptions, HttpHeaders httpHeaders)": {
                "lineStart": 207,
                "lineEnd": 236
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.getListTableConfigs(List<String> tableNames)": {
                "lineStart": 238,
                "lineEnd": 258
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.getCommonBrokerTenant(List<TableConfig> tableConfigList)": {
                "lineStart": 260,
                "lineEnd": 271
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.sendRequestToBroker(String query, String instanceId, String traceEnabled, String queryOptions, HttpHeaders httpHeaders)": {
                "lineStart": 273,
                "lineEnd": 291
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.getRequestJson(String query, String traceEnabled, String queryOptions)": {
                "lineStart": 293,
                "lineEnd": 305
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.getQueryURL(String protocol, String hostName, int port)": {
                "lineStart": 307,
                "lineEnd": 309
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.sendPostRaw(String urlStr, String requestStr, Map<String, String> headers)": {
                "lineStart": 311,
                "lineEnd": 362
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.drain(InputStream inputStream)": {
                "lineStart": 364,
                "lineEnd": 379
            },
            "org.apache.pinot.controller.api.resources.PinotQueryResource.sendRequestRaw(String url, String query, ObjectNode requestJson, Map<String, String> headers)": {
                "lineStart": 381,
                "lineEnd": 395
            }
        },
        "26bd7256dd-PinotRealtimeTableResource.java": {
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.pauseConsumption(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 58,
                "lineEnd": 69
            },
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.resumeConsumption(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"smallest | largest\") @QueryParam(\"consumeFrom\") String consumeFrom)": {
                "lineStart": 71,
                "lineEnd": 86
            },
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.forceCommit(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 88,
                "lineEnd": 113
            },
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.getForceCommitJobStatus(@ApiParam(value = \"Force commit job id\", required = true) @PathParam(\"jobId\") String forceCommitJobId)": {
                "lineStart": 115,
                "lineEnd": 138
            },
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.getPauseStatus(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 140,
                "lineEnd": 151
            },
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.getConsumingSegmentsInfo(@ApiParam(value = \"Realtime table name with or without type\", required = true, example = \"myTable | myTable_REALTIME\") @PathParam(\"tableName\") String realtimeTableName)": {
                "lineStart": 153,
                "lineEnd": 170
            },
            "org.apache.pinot.controller.api.resources.PinotRealtimeTableResource.validate(String tableNameWithType)": {
                "lineStart": 172,
                "lineEnd": 182
            }
        },
        "4b977c08f7-PinotRunningQueryResource.java": {
            "org.apache.pinot.controller.api.resources.PinotRunningQueryResource.cancelQuery(@ApiParam(value = \"Broker that's running the query\", required = true) @PathParam(\"brokerId\") String brokerId, @ApiParam(value = \"QueryId as assigned by the broker\", required = true) @PathParam(\"queryId\") long queryId, @ApiParam(value = \"Timeout for servers to respond the cancel request\") @QueryParam(\"timeoutMs\") @DefaultValue(\"3000\") int timeoutMs, @ApiParam(value = \"Return verbose responses for troubleshooting\") @QueryParam(\"verbose\") @DefaultValue(\"false\") boolean verbose, @Context HttpHeaders httpHeaders)": {
                "lineStart": 55,
                "lineEnd": 98
            },
            "org.apache.pinot.controller.api.resources.PinotRunningQueryResource.getRunningQueries(@ApiParam(value = \"Timeout for brokers to return running queries\") @QueryParam(\"timeoutMs\") @DefaultValue(\"3000\") int timeoutMs, @Context HttpHeaders httpHeaders)": {
                "lineStart": 100,
                "lineEnd": 113
            },
            "org.apache.pinot.controller.api.resources.PinotRunningQueryResource.getRunningQueries(Map<String, InstanceInfo> brokers, int timeoutMs, Map<String, String> requestHeaders)": {
                "lineStart": 115,
                "lineEnd": 158
            },
            "org.apache.pinot.controller.api.resources.PinotRunningQueryResource.getInstanceKey(InstanceInfo info)": {
                "lineStart": 160,
                "lineEnd": 162
            },
            "org.apache.pinot.controller.api.resources.PinotRunningQueryResource.getInstanceKey(URI uri)": {
                "lineStart": 164,
                "lineEnd": 166
            },
            "org.apache.pinot.controller.api.resources.PinotRunningQueryResource.createRequestHeaders(HttpHeaders httpHeaders)": {
                "lineStart": 168,
                "lineEnd": 176
            }
        },
        "20bec1ba60-PinotSchemaRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotSchemaRestletResource.addSchema(@ApiParam(value = \"Whether to override the schema if the schema exists\") @DefaultValue(\"true\") @QueryParam(\"override\") boolean override, @ApiParam(value = \"Whether to force overriding the schema if the schema exists\") @DefaultValue(\"false\") @QueryParam(\"force\") boolean force, FormDataMultiPart multiPart, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 131,
                "lineEnd": 141
            },
            "org.apache.pinot.controller.api.resources.PinotSchemaRestletResource.addSchema(@ApiParam(value = \"Whether to override the schema if the schema exists\") @DefaultValue(\"true\") @QueryParam(\"override\") boolean override, @ApiParam(value = \"Whether to force overriding the schema if the schema exists\") @DefaultValue(\"false\") @QueryParam(\"force\") boolean force, String schemaJsonString, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 143,
                "lineEnd": 161
            },
            "org.apache.pinot.controller.api.resources.PinotSchemaRestletResource.validateSchema(FormDataMultiPart multiPart, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 163,
                "lineEnd": 180
            },
            "org.apache.pinot.controller.api.resources.PinotSchemaRestletResource.validateSchema(String schemaJsonString, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 182,
                "lineEnd": 207
            }
        },
        "37b3bd1fa0-PinotSegmentRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Whether to exclude replaced segments in the response, which have been replaced\" + \" specified in the segment lineage entries and cannot be queried from the table\") @QueryParam(\"excludeReplacedSegments\") String excludeReplacedSegments, @ApiParam(value = \"Start timestamp (inclusive)\") @QueryParam(\"startTimestamp\") @DefaultValue(\"\") String startTimestampStr, @ApiParam(value = \"End timestamp (exclusive)\") @QueryParam(\"endTimestamp\") @DefaultValue(\"\") String endTimestampStr, @ApiParam(value = \"Whether to exclude the segments overlapping with the timestamps, false by default\") @QueryParam(\"excludeOverlapping\") @DefaultValue(\"false\") boolean excludeOverlapping)": {
                "lineStart": 86,
                "lineEnd": 90
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getServerToSegmentsMap(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 92,
                "lineEnd": 104
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.listSegmentLineage(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 106,
                "lineEnd": 127
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getServerToSegmentsMapDeprecated1(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"MUST be null\") @QueryParam(\"state\") String stateStr, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 129,
                "lineEnd": 145
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getServerToSegmentsMapDeprecated2(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"MUST be null\") @QueryParam(\"state\") String stateStr, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 147,
                "lineEnd": 150
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentToCrcMap(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 152,
                "lineEnd": 156
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentToCrcMapDeprecated(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 158,
                "lineEnd": 161
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"Columns name\", allowMultiple = true) @QueryParam(\"columns\") List<String> columns)": {
                "lineStart": 163,
                "lineEnd": 198
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getExtraMetaData(String tableName, String segmentName, List<String> columns)": {
                "lineStart": 200,
                "lineEnd": 212
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentMetadataInternal(String tableNameWithType, String segmentName)": {
                "lineStart": 214,
                "lineEnd": 218
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentMetadataDeprecated1(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 220,
                "lineEnd": 246
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentMetadataDeprecated2(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"MUST be null\") @QueryParam(\"state\") String stateStr, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 248,
                "lineEnd": 254
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.reloadSegment(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"Whether to force server to download segment\") @QueryParam(\"forceDownload\") @DefaultValue(\"false\") boolean forceDownload)": {
                "lineStart": 256,
                "lineEnd": 282
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getExistingTable(String tableName, String segmentName)": {
                "lineStart": 284,
                "lineEnd": 291
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.resetSegment(@ApiParam(value = \"Name of the table with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"Name of the target instance to reset\") @QueryParam(\"targetInstance\") @Nullable String targetInstance)": {
                "lineStart": 293,
                "lineEnd": 308
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.resetSegments(@ApiParam(value = \"Name of the table with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType, @ApiParam(value = \"Name of the target instance to reset\") @QueryParam(\"targetInstance\") @Nullable String targetInstance, @ApiParam(value = \"Whether to reset only segments with error state\") @QueryParam(\"errorSegmentsOnly\") @DefaultValue(\"false\") boolean errorSegmentsOnly)": {
                "lineStart": 310,
                "lineEnd": 324
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.reloadSegmentDeprecated1(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 326,
                "lineEnd": 336
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.reloadSegmentDeprecated2(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 338,
                "lineEnd": 341
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getReloadJobStatus(@ApiParam(value = \"Reload job id\", required = true) @PathParam(\"jobId\") String reloadJobId)": {
                "lineStart": 343,
                "lineEnd": 414
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.reloadAllSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Whether to force server to download segment\") @QueryParam(\"forceDownload\") @DefaultValue(\"false\") boolean forceDownload)": {
                "lineStart": 416,
                "lineEnd": 450
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.reloadAllSegmentsDeprecated1(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 452,
                "lineEnd": 461
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.reloadAllSegmentsDeprecated2(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 463,
                "lineEnd": 466
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.deleteSegment(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period \" + \"will default to the first config that's not null: the table config, then to cluster setting, then '7d'. \" + \"Using 0d or -1d will instantly delete segments without retention\") @QueryParam(\"retention\") String retentionPeriod)": {
                "lineStart": 468,
                "lineEnd": 474
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.deleteAllSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period \" + \"will default to the first config that's not null: the table config, then to cluster setting, then '7d'. \" + \"Using 0d or -1d will instantly delete segments without retention\") @QueryParam(\"retention\") String retentionPeriod)": {
                "lineStart": 476,
                "lineEnd": 486
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.deleteSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period \" + \"will default to the first config that's not null: the table config, then to cluster setting, then '7d'. \" + \"Using 0d or -1d will instantly delete segments without retention\") @QueryParam(\"retention\") String retentionPeriod, List<String> segments)": {
                "lineStart": 488,
                "lineEnd": 504
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.deleteSegmentsWithTimeWindow(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Whether to ignore replaced segments for deletion, which have been replaced\" + \" specified in the segment lineage entries and cannot be queried from the table, false by default\") @QueryParam(\"excludeReplacedSegments\") @DefaultValue(\"false\") boolean excludeReplacedSegments, @ApiParam(value = \"Start timestamp (inclusive) in milliseconds\", required = true) @QueryParam(\"startTimestamp\") String startTimestampStr, @ApiParam(value = \"End timestamp (exclusive) in milliseconds\", required = true) @QueryParam(\"endTimestamp\") String endTimestampStr, @ApiParam(value = \"Whether to ignore segments that are partially overlapping with the [start, end)\" + \"for deletion, true by default\") @QueryParam(\"excludeOverlapping\") @DefaultValue(\"true\") boolean excludeOverlapping, @ApiParam(value = \"Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period \" + \"will default to the first config that's not null: the table config, then to cluster setting, then '7d'. \" + \"Using 0d or -1d will instantly delete segments without retention\") @QueryParam(\"retention\") String retentionPeriod)": {
                "lineStart": 506,
                "lineEnd": 526
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.deleteSegmentsInternal(String tableNameWithType, List<String> segments, String retentionPeriod)": {
                "lineStart": 528,
                "lineEnd": 534
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Columns name\", allowMultiple = true) @QueryParam(\"columns\") @DefaultValue(\"\") List<String> columns)": {
                "lineStart": 536,
                "lineEnd": 554
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getZookeeperMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 556,
                "lineEnd": 568
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getTableTiers(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 570,
                "lineEnd": 575
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentTiers(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr)": {
                "lineStart": 577,
                "lineEnd": 583
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getTableTierInternal(String tableName, @Nullable String segmentName, @Nullable String tableTypeStr)": {
                "lineStart": 585,
                "lineEnd": 603
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSelectedSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Start timestamp (inclusive) in milliseconds\") @QueryParam(\"startTimestamp\") @DefaultValue(\"\") String startTimestampStr, @ApiParam(value = \"End timestamp (exclusive) in milliseconds\") @QueryParam(\"endTimestamp\") @DefaultValue(\"\") String endTimestampStr, @ApiParam(value = \"Whether to exclude the segments overlapping with the timestamps, false by default\") @QueryParam(\"excludeOverlapping\") @DefaultValue(\"false\") boolean excludeOverlapping)": {
                "lineStart": 605,
                "lineEnd": 627
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.getSegmentsMetadataFromServer(String tableNameWithType, List<String> columns)": {
                "lineStart": 629,
                "lineEnd": 632
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.updateTimeIntervalZK(@ApiParam(value = \"Table name with type\", required = true, example = \"myTable_REALTIME\") @PathParam(\"tableNameWithType\") String tableNameWithType)": {
                "lineStart": 634,
                "lineEnd": 643
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.updateZKTimeIntervalInternal(String tableNameWithType)": {
                "lineStart": 645,
                "lineEnd": 674
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentRestletResource.selectSegments(String tableName, String tableTypeStr, boolean excludeReplacedSegments, String startTimestampStr, String endTimestampStr, boolean excludeOverlapping)": {
                "lineStart": 676,
                "lineEnd": 697
            }
        },
        "90f6a663a1-PinotSegmentUploadDownloadRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.downloadSegment(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName, @Context HttpHeaders httpHeaders)": {
                "lineStart": 108,
                "lineEnd": 165
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.uploadSegment(@Nullable String tableName, TableType tableType, @Nullable FormDataMultiPart multiPart, boolean copySegmentToFinalLocation, boolean enableParallelPushProtection, boolean allowRefresh, HttpHeaders headers, Request request)": {
                "lineStart": 167,
                "lineEnd": 313
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.extractHttpHeader(HttpHeaders headers, String name)": {
                "lineStart": 315,
                "lineEnd": 322
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.encryptSegmentIfNeeded(File tempDecryptedFile, File tempEncryptedFile, boolean isUploadedSegmentEncrypted, String crypterUsedInUploadedSegment, String crypterClassNameInTableConfig, String segmentName, String tableNameWithType)": {
                "lineStart": 324,
                "lineEnd": 342
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.downloadSegmentFileFromURI(String currentSegmentLocationURI, File destFile, String tableName)": {
                "lineStart": 344,
                "lineEnd": 356
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.getSegmentMetadata(File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)": {
                "lineStart": 358,
                "lineEnd": 360
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.decryptFile(String crypterClassName, File tempEncryptedFile, File tempDecryptedFile)": {
                "lineStart": 362,
                "lineEnd": 366
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.uploadSegmentAsJson(String segmentJsonStr, @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName, @ApiParam(value = \"Type of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_TYPE) @DefaultValue(\"OFFLINE\") String tableType, @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection, @ApiParam(value = \"Whether to refresh if the segment already exists\") @DefaultValue(\"true\") @QueryParam(FileUploadDownloadClient.QueryParameters.ALLOW_REFRESH) boolean allowRefresh, @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse)": {
                "lineStart": 368,
                "lineEnd": 379
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.uploadSegmentAsMultiPart(FormDataMultiPart multiPart, @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName, @ApiParam(value = \"Type of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_TYPE) @DefaultValue(\"OFFLINE\") String tableType, @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection, @ApiParam(value = \"Whether to refresh if the segment already exists\") @DefaultValue(\"true\") @QueryParam(FileUploadDownloadClient.QueryParameters.ALLOW_REFRESH) boolean allowRefresh, @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse)": {
                "lineStart": 381,
                "lineEnd": 392
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.uploadSegmentAsJsonV2(String segmentJsonStr, @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName, @ApiParam(value = \"Type of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_TYPE) @DefaultValue(\"OFFLINE\") String tableType, @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection, @ApiParam(value = \"Whether to refresh if the segment already exists\") @DefaultValue(\"true\") @QueryParam(FileUploadDownloadClient.QueryParameters.ALLOW_REFRESH) boolean allowRefresh, @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse)": {
                "lineStart": 394,
                "lineEnd": 405
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.uploadSegmentAsMultiPartV2(FormDataMultiPart multiPart, @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName, @ApiParam(value = \"Type of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_TYPE) @DefaultValue(\"OFFLINE\") String tableType, @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection, @ApiParam(value = \"Whether to refresh if the segment already exists\") @DefaultValue(\"true\") @QueryParam(FileUploadDownloadClient.QueryParameters.ALLOW_REFRESH) boolean allowRefresh, @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse)": {
                "lineStart": 407,
                "lineEnd": 418
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.startReplaceSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Force cleanup\") @QueryParam(\"forceCleanup\") @DefaultValue(\"false\") boolean forceCleanup, @ApiParam(value = \"Fields belonging to start replace segment request\", required = true) StartReplaceSegmentsRequest startReplaceSegmentsRequest)": {
                "lineStart": 420,
                "lineEnd": 437
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.endReplaceSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Segment lineage entry id returned by startReplaceSegments API\", required = true) @QueryParam(\"segmentLineageEntryId\") String segmentLineageEntryId, @ApiParam(value = \"Fields belonging to end replace segment request\", required = false) EndReplaceSegmentsRequest endReplaceSegmentsRequest)": {
                "lineStart": 439,
                "lineEnd": 457
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.revertReplaceSegments(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\", required = true) @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"Segment lineage entry id to revert\", required = true) @QueryParam(\"segmentLineageEntryId\") String segmentLineageEntryId, @ApiParam(value = \"Force revert in case the user knows that the lineage entry is interrupted\") @QueryParam(\"forceRevert\") @DefaultValue(\"false\") boolean forceRevert, @ApiParam(value = \"Fields belonging to revert replace segment request\", required = false) RevertReplaceSegmentsRequest revertReplaceSegmentsRequest)": {
                "lineStart": 459,
                "lineEnd": 477
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.createSegmentFileFromMultipart(FormDataMultiPart multiPart, File destFile)": {
                "lineStart": 479,
                "lineEnd": 493
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.getUploadType(String uploadTypeStr)": {
                "lineStart": 495,
                "lineEnd": 503
            },
            "org.apache.pinot.controller.api.resources.PinotSegmentUploadDownloadRestletResource.validateMultiPart(Map<String, List<FormDataBodyPart>> map, String segmentName)": {
                "lineStart": 505,
                "lineEnd": 519
            }
        },
        "ee9ab4bdb9-PinotTableIndexingConfigs.java": {
            "org.apache.pinot.controller.api.resources.PinotTableIndexingConfigs.updateIndexingConfig(@ApiParam(value = \"Table name (without type)\", required = true) @PathParam(\"tableName\") String tableName, String tableConfigString)": {
                "lineStart": 36,
                "lineEnd": 59
            }
        },
        "a9bc066d82-PinotTableInstances.java": {
            "org.apache.pinot.controller.api.resources.PinotTableInstances.getTableInstances(@ApiParam(value = \"Table name without type\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"Instance type\", example = \"broker\", allowableValues = \"BROKER, SERVER\") @DefaultValue(\"\") @QueryParam(\"type\") String type)": {
                "lineStart": 39,
                "lineEnd": 103
            },
            "org.apache.pinot.controller.api.resources.PinotTableInstances.getLiveBrokersForTable(@ApiParam(value = \"Table name (with or without type)\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 105,
                "lineEnd": 115
            },
            "org.apache.pinot.controller.api.resources.PinotTableInstances.getLiveBrokers()": {
                "lineStart": 117,
                "lineEnd": 127
            }
        },
        "0e4e10da7d-PinotTableMetadataConfigs.java": {
            "org.apache.pinot.controller.api.resources.PinotTableMetadataConfigs.updateTableMetadata(@PathParam(\"tableName\") String tableName, String tableConfigString)": {
                "lineStart": 35,
                "lineEnd": 58
            }
        },
        "a5f7e26901-PinotTableRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotTableRestletResource.alterTableStateOrListTableConfig(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"enable|disable|drop\") @QueryParam(\"state\") String stateStr, @ApiParam(value = \"realtime|offline\") @QueryParam(\"type\") String tableTypeStr, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 289,
                "lineEnd": 332
            },
            "org.apache.pinot.controller.api.resources.PinotTableRestletResource.addTable(String tableConfigStr, @ApiParam(value = \"comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)\") @QueryParam(\"validationTypesToSkip\") @Nullable String typesToSkip, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 123,
                "lineEnd": 172
            },
            "org.apache.pinot.controller.api.resources.PinotTableRestletResource.checkTableConfig(String tableConfigStr, @ApiParam(value = \"comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)\") @QueryParam(\"validationTypesToSkip\") @Nullable String typesToSkip, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 428,
                "lineEnd": 445
            },
            "org.apache.pinot.controller.api.resources.PinotTableRestletResource.validateTableAndSchema(TableAndSchemaConfig tableSchemaConfig, @ApiParam(value = \"comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)\") @QueryParam(\"validationTypesToSkip\") @Nullable String typesToSkip, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 447,
                "lineEnd": 459
            }
        },
        "d70c550361-PinotTableSchema.java": {
            "org.apache.pinot.controller.api.resources.PinotTableSchema.getTableSchema(@ApiParam(value = \"Table name (without type)\", required = true) @PathParam(\"tableName\") String tableName)": {
                "lineStart": 31,
                "lineEnd": 40
            }
        },
        "d8af888139-PinotTableSegmentConfigs.java": {
            "org.apache.pinot.controller.api.resources.PinotTableSegmentConfigs.put(@ApiParam(value = \"Table name\", required = true) @PathParam(\"tableName\") String tableName, String tableConfigString)": {
                "lineStart": 36,
                "lineEnd": 58
            }
        },
        "0dcc6d85bf-PinotTableTenantConfigs.java": {
            "org.apache.pinot.controller.api.resources.PinotTableTenantConfigs.rebuildBrokerResource(@ApiParam(value = \"Table name (with type)\", required = true) @PathParam(\"tableName\") String tableNameWithType)": {
                "lineStart": 34,
                "lineEnd": 48
            }
        },
        "ae1a079c9c-PinotTaskRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.listTaskTypes()": {
                "lineStart": 104,
                "lineEnd": 107
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskQueues()": {
                "lineStart": 109,
                "lineEnd": 112
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskQueueState(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 114,
                "lineEnd": 117
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskQueueStateDeprecated(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 119,
                "lineEnd": 122
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTasks(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 124,
                "lineEnd": 127
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskStatesByTable(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Table name with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType)": {
                "lineStart": 129,
                "lineEnd": 132
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskMetadataByTable(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Table name with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType)": {
                "lineStart": 134,
                "lineEnd": 143
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.deleteTaskMetadataByTable(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Table name with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType)": {
                "lineStart": 145,
                "lineEnd": 149
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskCounts(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 151,
                "lineEnd": 154
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTasksDebugInfo(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"verbosity (Prints information for all the tasks for the given task type.\" + \"By default, only prints subtask details for running and error tasks. \" + \"Value of > 0 prints subtask details for all tasks)\") @DefaultValue(\"0\") @QueryParam(\"verbosity\") int verbosity)": {
                "lineStart": 156,
                "lineEnd": 159
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTasksDebugInfo(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Table name with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType, @ApiParam(value = \"verbosity (Prints information for all the tasks for the given task type and table.\" + \"By default, only prints subtask details for running and error tasks. \" + \"Value of > 0 prints subtask details for all tasks)\") @DefaultValue(\"0\") @QueryParam(\"verbosity\") int verbosity)": {
                "lineStart": 161,
                "lineEnd": 164
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskGenerationDebugInto(@Context HttpHeaders httpHeaders, @ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Table name with type\", required = true) @PathParam(\"tableNameWithType\") String tableNameWithType, @ApiParam(value = \"Whether to only lookup local cache for logs\", defaultValue = \"false\") @QueryParam(\"localOnly\") boolean localOnly)": {
                "lineStart": 166,
                "lineEnd": 203
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskDebugInfo(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName, @ApiParam(value = \"verbosity (Prints information for the given task name.\" + \"By default, only prints subtask details for running and error tasks. \" + \"Value of > 0 prints subtask details for all tasks)\") @DefaultValue(\"0\") @QueryParam(\"verbosity\") int verbosity)": {
                "lineStart": 205,
                "lineEnd": 208
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTasksDeprecated(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 210,
                "lineEnd": 213
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskStates(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 215,
                "lineEnd": 218
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskStatesDeprecated(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 220,
                "lineEnd": 223
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskState(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName)": {
                "lineStart": 225,
                "lineEnd": 228
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskStateDeprecated(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName)": {
                "lineStart": 230,
                "lineEnd": 233
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getSubtaskStates(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName)": {
                "lineStart": 235,
                "lineEnd": 238
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskConfigs(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName)": {
                "lineStart": 240,
                "lineEnd": 243
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskConfig(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName)": {
                "lineStart": 245,
                "lineEnd": 248
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getTaskConfigsDeprecated(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName)": {
                "lineStart": 250,
                "lineEnd": 253
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getSubtaskConfigs(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName, @ApiParam(value = \"Sub task names separated by comma\") @QueryParam(\"subtaskNames\") @Nullable String subtaskNames)": {
                "lineStart": 255,
                "lineEnd": 258
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getSubtaskProgress(@Context HttpHeaders httpHeaders, @ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName, @ApiParam(value = \"Sub task names separated by comma\") @QueryParam(\"subtaskNames\") @Nullable String subtaskNames)": {
                "lineStart": 260,
                "lineEnd": 287
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getSubtaskOnWorkerProgress(@Context HttpHeaders httpHeaders, @ApiParam(value = \"Subtask state (UNKNOWN,IN_PROGRESS,SUCCEEDED,CANCELLED,ERROR)\", required = true) @QueryParam(\"subTaskState\") String subTaskState, @ApiParam(value = \"Minion worker IDs separated by comma\") @QueryParam(\"minionWorkerIds\") @Nullable String minionWorkerIds)": {
                "lineStart": 289,
                "lineEnd": 318
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getCronSchedulerInformation()": {
                "lineStart": 320,
                "lineEnd": 355
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getCronSchedulerJobKeys()": {
                "lineStart": 357,
                "lineEnd": 370
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.getCronSchedulerJobDetails(@ApiParam(value = \"Table name (with type suffix)\") @QueryParam(\"tableName\") String tableName, @ApiParam(value = \"Task type\") @QueryParam(\"taskType\") String taskType)": {
                "lineStart": 372,
                "lineEnd": 427
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.scheduleTasks(@ApiParam(value = \"Task type\") @QueryParam(\"taskType\") String taskType, @ApiParam(value = \"Table name (with type suffix)\") @QueryParam(\"tableName\") String tableName)": {
                "lineStart": 429,
                "lineEnd": 439
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.executeAdhocTask(AdhocTaskConfig adhocTaskConfig, @Suspended AsyncResponse asyncResponse, @Context Request requestContext)": {
                "lineStart": 441,
                "lineEnd": 462
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.scheduleTasksDeprecated()": {
                "lineStart": 464,
                "lineEnd": 467
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.cleanUpTasks(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 469,
                "lineEnd": 473
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.cleanUpTasksDeprecated(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 475,
                "lineEnd": 479
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.stopTasks(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 481,
                "lineEnd": 485
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.resumeTasks(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType)": {
                "lineStart": 487,
                "lineEnd": 491
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.toggleTaskQueueState(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"state\", required = true) @QueryParam(\"state\") String state)": {
                "lineStart": 493,
                "lineEnd": 505
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.deleteTasks(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Whether to force deleting the tasks (expert only option, enable with cautious\") @DefaultValue(\"false\") @QueryParam(\"forceDelete\") boolean forceDelete)": {
                "lineStart": 507,
                "lineEnd": 511
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.deleteTask(@ApiParam(value = \"Task name\", required = true) @PathParam(\"taskName\") String taskName, @ApiParam(value = \"Whether to force deleting the task (expert only option, enable with cautious\") @DefaultValue(\"false\") @QueryParam(\"forceDelete\") boolean forceDelete)": {
                "lineStart": 513,
                "lineEnd": 517
            },
            "org.apache.pinot.controller.api.resources.PinotTaskRestletResource.deleteTaskQueue(@ApiParam(value = \"Task type\", required = true) @PathParam(\"taskType\") String taskType, @ApiParam(value = \"Whether to force delete the task queue (expert only option, enable with cautious\") @DefaultValue(\"false\") @QueryParam(\"forceDelete\") boolean forceDelete)": {
                "lineStart": 519,
                "lineEnd": 523
            }
        },
        "7b14b6fb0f-PinotTenantRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.createTenant(Tenant tenant)": {
                "lineStart": 58,
                "lineEnd": 78
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.updateTenant(Tenant tenant)": {
                "lineStart": 80,
                "lineEnd": 100
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.getAllTenants(@ApiParam(value = \"Tenant type\", required = false, allowableValues = \"BROKER, SERVER\", defaultValue = \"\") @QueryParam(\"type\") @DefaultValue(\"\") String type)": {
                "lineStart": 115,
                "lineEnd": 128
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.listInstance(@ApiParam(value = \"Tenant name\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"Tenant type (server|broker)\") @QueryParam(\"type\") String tenantType, @ApiParam(value = \"Table type (offline|realtime)\") @QueryParam(\"tableType\") String tableType)": {
                "lineStart": 130,
                "lineEnd": 134
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.enableOrDisableTenant(@ApiParam(value = \"Tenant name\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"Tenant type (server|broker)\") @QueryParam(\"type\") String tenantType, @ApiParam(value = \"state (enable|disable)\") @QueryParam(\"state\") String stateStr)": {
                "lineStart": 136,
                "lineEnd": 146
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.getTablesOnTenant(@ApiParam(value = \"Tenant name\", required = true) @PathParam(\"tenantName\") String tenantName)": {
                "lineStart": 148,
                "lineEnd": 152
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.getTablesServedFromTenant(String tenantName)": {
                "lineStart": 154,
                "lineEnd": 173
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.toggleTenantState(String tenantName, String stateStr, @Nullable String tenantType)": {
                "lineStart": 175,
                "lineEnd": 204
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.listInstancesForTenant(String tenantName, String tenantType, String tableTypeString)": {
                "lineStart": 206,
                "lineEnd": 259
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.getTenantMetadata(@ApiParam(value = \"Tenant name\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"tenant type\", required = false, defaultValue = \"\", allowableValues = \"SERVER, BROKER\") @QueryParam(\"type\") @DefaultValue(\"\") String type)": {
                "lineStart": 261,
                "lineEnd": 282
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.changeTenantState(@ApiParam(value = \"Tenant name\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"tenant type\", required = false, defaultValue = \"\", allowableValues = \"SERVER, BROKER\") @QueryParam(\"type\") String type, @ApiParam(value = \"state\", required = true, defaultValue = \"\", allowableValues = \"enable, disable, drop\") @QueryParam(\"state\") @DefaultValue(\"\") String state)": {
                "lineStart": 291,
                "lineEnd": 344
            },
            "org.apache.pinot.controller.api.resources.PinotTenantRestletResource.deleteTenant(@ApiParam(value = \"Tenant name\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"Tenant type\", required = true, allowableValues = \"SERVER, BROKER\") @QueryParam(\"type\") @DefaultValue(\"\") String type)": {
                "lineStart": 346,
                "lineEnd": 387
            }
        },
        "0c0fdaa8e0-PinotUpsertRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotUpsertRestletResource.estimateHeapUsage(String tableSchemaConfigStr, @ApiParam(value = \"cardinality\", required = true) @QueryParam(\"cardinality\") long cardinality, @ApiParam(value = \"primaryKeySize\", defaultValue = \"-1\") @QueryParam(\"primaryKeySize\") int primaryKeySize, @ApiParam(value = \"numPartitions\", defaultValue = \"-1\") @QueryParam(\"numPartitions\") int numPartitions)": {
                "lineStart": 32,
                "lineEnd": 111
            }
        },
        "79696a153c-PinotVersionRestletResource.java": {
            "org.apache.pinot.controller.api.resources.PinotVersionRestletResource.getVersionNumber()": {
                "lineStart": 22,
                "lineEnd": 32
            }
        },
        "6e1989339c-TableConfigsRestletResource.java": {
            "org.apache.pinot.controller.api.resources.TableConfigsRestletResource.addConfig(String tableConfigsStr, @ApiParam(value = \"comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)\") @QueryParam(\"validationTypesToSkip\") @Nullable String typesToSkip, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 103,
                "lineEnd": 175
            },
            "org.apache.pinot.controller.api.resources.TableConfigsRestletResource.validateConfig(String tableConfigsStr, @ApiParam(value = \"comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)\") @QueryParam(\"validationTypesToSkip\") @Nullable String typesToSkip, @Context HttpHeaders httpHeaders, @Context Request request)": {
                "lineStart": 267,
                "lineEnd": 299
            }
        },
        "a9071c8965-TableSize.java": {
            "org.apache.pinot.controller.api.resources.TableSize.getTableSize(@ApiParam(value = \"Table name without type\", required = true, example = \"myTable | myTable_OFFLINE\") @PathParam(\"tableName\") String tableName)": {
                "lineStart": 43,
                "lineEnd": 60
            }
        },
        "54fc6e5d73-TableViews.java": {
            "org.apache.pinot.controller.api.resources.TableViews.getIdealState(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"realtime|offline\", required = false) @QueryParam(\"tableType\") String tableTypeStr)": {
                "lineStart": 44,
                "lineEnd": 48
            },
            "org.apache.pinot.controller.api.resources.TableViews.getExternalView(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"realtime|offline\", required = false) @QueryParam(\"tableType\") String tableTypeStr)": {
                "lineStart": 50,
                "lineEnd": 54
            },
            "org.apache.pinot.controller.api.resources.TableViews.getTableState(String tableName, String view, TableType tableType)": {
                "lineStart": 56,
                "lineEnd": 73
            },
            "org.apache.pinot.controller.api.resources.TableViews.getTableIdealState(String tableNameOptType, TableType tableType)": {
                "lineStart": 75,
                "lineEnd": 86
            },
            "org.apache.pinot.controller.api.resources.TableViews.getTableExternalView(@Nonnull String tableNameOptType, @Nullable TableType tableType)": {
                "lineStart": 88,
                "lineEnd": 99
            },
            "org.apache.pinot.controller.api.resources.TableViews.validateTableType(String tableTypeStr)": {
                "lineStart": 101,
                "lineEnd": 114
            },
            "org.apache.pinot.controller.api.resources.TableViews.getIdealState(@Nonnull String tableNameOptType, @Nullable TableType tableType)": {
                "lineStart": 116,
                "lineEnd": 120
            },
            "org.apache.pinot.controller.api.resources.TableViews.getExternalView(@Nonnull String tableNameOptType, TableType tableType)": {
                "lineStart": 122,
                "lineEnd": 126
            },
            "org.apache.pinot.controller.api.resources.TableViews.getTableNameWithType(@Nonnull String tableNameOptType, @Nullable TableType tableType)": {
                "lineStart": 128,
                "lineEnd": 142
            }
        },
        "af1a768356-ZookeeperResource.java": {
            "org.apache.pinot.controller.api.resources.ZookeeperResource.getData(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path)": {
                "lineStart": 63,
                "lineEnd": 81
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.delete(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path)": {
                "lineStart": 83,
                "lineEnd": 95
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.putChildren(@ApiParam(value = \"Zookeeper path of parent, must start with /\", required = true) @QueryParam(\"path\") String path, @ApiParam(value = \"Content\") @QueryParam(\"data\") @Nullable String data, @ApiParam(value = \"expectedVersion\", defaultValue = \"-1\") @QueryParam(\"expectedVersion\") @DefaultValue(\"-1\") int expectedVersion, @ApiParam(value = \"accessOption\", defaultValue = \"1\") @QueryParam(\"accessOption\") @DefaultValue(\"1\") int accessOption, @Nullable String payload)": {
                "lineStart": 97,
                "lineEnd": 133
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.putData(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path, @ApiParam(value = \"Content\") @QueryParam(\"data\") @Nullable String data, @ApiParam(value = \"expectedVersion\", defaultValue = \"-1\") @QueryParam(\"expectedVersion\") @DefaultValue(\"-1\") int expectedVersion, @ApiParam(value = \"accessOption\", defaultValue = \"1\") @QueryParam(\"accessOption\") @DefaultValue(\"1\") int accessOption, @Nullable String payload)": {
                "lineStart": 135,
                "lineEnd": 169
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.ls(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path)": {
                "lineStart": 171,
                "lineEnd": 183
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.getChildren(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path)": {
                "lineStart": 185,
                "lineEnd": 211
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.lsl(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path)": {
                "lineStart": 213,
                "lineEnd": 225
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.stat(@ApiParam(value = \"Zookeeper Path, must start with /\", required = true) @QueryParam(\"path\") String path)": {
                "lineStart": 227,
                "lineEnd": 239
            },
            "org.apache.pinot.controller.api.resources.ZookeeperResource.validateAndNormalizeZKPath(String path, boolean shouldExist)": {
                "lineStart": 241,
                "lineEnd": 260
            }
        },
        "bf25dcf71a-PinotBrokerService.java": {
            "org.apache.pinot.controller.api.services.PinotBrokerService.listBrokersMapping(@ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 31,
                "lineEnd": 32
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getTenantsToBrokersMapping(@ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 33,
                "lineEnd": 34
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getBrokersForTenant(@ApiParam(value = \"Name of the tenant\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 35,
                "lineEnd": 36
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getTablesToBrokersMapping(@ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 37,
                "lineEnd": 38
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getBrokersForTable(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 39,
                "lineEnd": 40
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.listBrokersMappingV2(@ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 41,
                "lineEnd": 42
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getTenantsToBrokersMappingV2(@ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 43,
                "lineEnd": 44
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getBrokersForTenantV2(@ApiParam(value = \"Name of the tenant\", required = true) @PathParam(\"tenantName\") String tenantName, @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 45,
                "lineEnd": 46
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getTablesToBrokersMappingV2(@ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 47,
                "lineEnd": 48
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.getBrokersForTableV2(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName, @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr, @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state)": {
                "lineStart": 49,
                "lineEnd": 50
            },
            "org.apache.pinot.controller.api.services.PinotBrokerService.toggleQueryRateLimiting(@ApiParam(value = \"Broker instance name\", required = true, example = \"Broker_my.broker.com_30000\") @PathParam(\"instanceName\") String brokerInstanceName, @ApiParam(value = \"ENABLE|DISABLE\", allowableValues = \"ENABLE, DISABLE\", required = true) @QueryParam(\"state\") String state)": {
                "lineStart": 51,
                "lineEnd": 53
            }
        }
    },
    "CVE-2024-35219": {
        "7cf052e3083-Generator.java": {
            "org.openapitools.codegen.online.service.Generator.generate(String language, GeneratorInput opts, Type type)": {
                "lineStart": 64,
                "lineEnd": 173
            }
        }
    },
    "CVE-2023-41937": {
        "039f587-BitBucketPPRTrigger.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.BitBucketPPRTrigger$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath Item context, @QueryParameter String remote, @QueryParameter String credentialsId)": {
                "lineStart": 204,
                "lineEnd": 210
            }
        },
        "bb642e3-BitBucketPPRAction.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getPayload()": {
                "lineStart": 6,
                "lineEnd": 6
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getScm()": {
                "lineStart": 7,
                "lineEnd": 7
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLinkHtml()": {
                "lineStart": 8,
                "lineEnd": 10
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLinkSelf()": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLinkApprove()": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLinkDecline()": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLinkStatuses()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getUser()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getSourceBranch()": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getTargetBranch()": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getTargetBranchRefId()": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getType()": {
                "lineStart": 44,
                "lineEnd": 46
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getRepositoryName()": {
                "lineStart": 48,
                "lineEnd": 50
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getScmUrls()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getPullRequestId()": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getRepositoryId()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getRepositoryUrl()": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getProjectUrl()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getPullRequestUrl()": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getTitle()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getDescription()": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getComment()": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getServerComment()": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLatestCommit()": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getCommitLink()": {
                "lineStart": 96,
                "lineEnd": 98
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getCommitLinks()": {
                "lineStart": 100,
                "lineEnd": 102
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLatestCommitFromRef()": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRAction.getLatestCommitToRef()": {
                "lineStart": 108,
                "lineEnd": 110
            }
        },
        "3af0427-BitBucketPPRPullRequestAction.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.<init>(@Nonnull BitBucketPPRPayload payload)": {
                "lineStart": 10,
                "lineEnd": 13
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getSourceBranch()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getTargetBranch()": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getPullRequestUrl()": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getScm()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getScmUrls()": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getLinkApprove()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getLinkDecline()": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getLinkStatuses()": {
                "lineStart": 91,
                "lineEnd": 93
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestAction.getCommitLink()": {
                "lineStart": 99,
                "lineEnd": 101
            }
        },
        "175422f-BitBucketPPRPullRequestServerAction.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestServerAction.<init>(@Nonnull BitBucketPPRPayload payload)": {
                "lineStart": 17,
                "lineEnd": 28
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestServerAction.getPullRequestUrl()": {
                "lineStart": 50,
                "lineEnd": 52
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestServerAction.getLinkApprove()": {
                "lineStart": 94,
                "lineEnd": 106
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestServerAction.getLinkDecline()": {
                "lineStart": 108,
                "lineEnd": 120
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestServerAction.getCommitLink()": {
                "lineStart": 126,
                "lineEnd": 137
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRPullRequestServerAction.getBaseUrl(String projectSelfUrl)": {
                "lineStart": 143,
                "lineEnd": 154
            }
        },
        "77fe36c-BitBucketPPRRepositoryAction.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRRepositoryAction.<init>(@Nonnull BitBucketPPRPayload payload)": {
                "lineStart": 17,
                "lineEnd": 32
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRRepositoryAction.getScmUrls()": {
                "lineStart": 62,
                "lineEnd": 64
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRRepositoryAction.getCommitLinks()": {
                "lineStart": 81,
                "lineEnd": 89
            }
        },
        "310d4ed-BitBucketPPRServerRepositoryAction.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRServerRepositoryAction.<init>(BitBucketPPRPayload payload)": {
                "lineStart": 20,
                "lineEnd": 42
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRServerRepositoryAction.getCommitLinks()": {
                "lineStart": 107,
                "lineEnd": 121
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.action.BitBucketPPRServerRepositoryAction.getBaseUrl(String projectSelfUrl)": {
                "lineStart": 123,
                "lineEnd": 134
            }
        },
        "1022046-BitBucketPPRUtils.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matches(String allBranches, String branchName, EnvVars env)": {
                "lineStart": 16,
                "lineEnd": 51
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matchWithRegex(@Nonnull String haystack, @Nonnull String patternStr, EnvVars env)": {
                "lineStart": 53,
                "lineEnd": 67
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.createLoggingProxyForErrors(final PrintStream realPrintStream)": {
                "lineStart": 69,
                "lineEnd": 78
            }
        },
        "0000000-BitBucketPPRRepositoryNotParsedException.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matches(String allBranches, String branchName, EnvVars env)": {
                "lineStart": 16,
                "lineEnd": 51
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matchWithRegex(@Nonnull String haystack, @Nonnull String patternStr, EnvVars env)": {
                "lineStart": 53,
                "lineEnd": 67
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.createLoggingProxyForErrors(final PrintStream realPrintStream)": {
                "lineStart": 69,
                "lineEnd": 78
            }
        }
    },
    "CVE-2020-2312": {
        "0000000-EnvUtil.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matches(String allBranches, String branchName, EnvVars env)": {
                "lineStart": 16,
                "lineEnd": 51
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matchWithRegex(@Nonnull String haystack, @Nonnull String patternStr, EnvVars env)": {
                "lineStart": 53,
                "lineEnd": 67
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.createLoggingProxyForErrors(final PrintStream realPrintStream)": {
                "lineStart": 69,
                "lineEnd": 78
            }
        },
        "0000000-MessageUtil.java": {
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matches(String allBranches, String branchName, EnvVars env)": {
                "lineStart": 16,
                "lineEnd": 51
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.matchWithRegex(@Nonnull String haystack, @Nonnull String patternStr, EnvVars env)": {
                "lineStart": 53,
                "lineEnd": 67
            },
            "io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils.createLoggingProxyForErrors(final PrintStream realPrintStream)": {
                "lineStart": 69,
                "lineEnd": 78
            }
        },
        "b85baae-SQLPlusRunner.java": {
            "org.jenkinsci.plugins.sqlplus.script.runner.SQLPlusRunner.run()": {
                "lineStart": 101,
                "lineEnd": 399
            },
            "org.jenkinsci.plugins.sqlplus.script.runner.SQLPlusRunner.runGetSQLPLusVersion(String customSQLPlusHome, String oracleHome, TaskListener listener, Launcher launcher)": {
                "lineStart": 401,
                "lineEnd": 507
            },
            "org.jenkinsci.plugins.sqlplus.script.runner.SQLPlusRunner.isSlaveMachine(Launcher launcher)": {
                "lineStart": 509,
                "lineEnd": 517
            },
            "org.jenkinsci.plugins.sqlplus.script.runner.SQLPlusRunner.isWindowsOS(boolean slaveMachine)": {
                "lineStart": 519,
                "lineEnd": 537
            }
        },
        "e83dd75-SQLPlusRunnerBuilder.java": {
            "org.jenkinsci.plugins.sqlplus.script.runner.SQLPlusRunnerBuilder.perform(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener)": {
                "lineStart": 123,
                "lineEnd": 152
            }
        }
    },
    "CVE-2021-32824": {
        "ab0623ea4a-BroadcastClusterInvoker.java": {
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker.doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance)": {
                "lineStart": 18,
                "lineEnd": 44
            }
        }
    },
    "CVE-2024-23903": {
        "502e543-GitLabSystemHookAction.java": {
            "io.jenkins.plugins.gitlabbranchsource.GitLabSystemHookAction.isValidToken(String secretToken)": {
                "lineStart": 73,
                "lineEnd": 90
            }
        },
        "d160114-GitLabWebHookAction.java": {
            "io.jenkins.plugins.gitlabbranchsource.GitLabWebHookAction.isValidToken(String secretToken)": {
                "lineStart": 73,
                "lineEnd": 90
            }
        }
    },
    "CVE-2021-3513": {
        "02be48d5df-BruteForceProtector.java": {
            "org.keycloak.services.managers.BruteForceProtector.failedLogin(RealmModel realm, UserModel user, ClientConnection clientConnection)": {
                "lineStart": 8,
                "lineEnd": 8
            },
            "org.keycloak.services.managers.BruteForceProtector.successfulLogin(RealmModel realm, UserModel user, ClientConnection clientConnection)": {
                "lineStart": 9,
                "lineEnd": 9
            },
            "org.keycloak.services.managers.BruteForceProtector.isTemporarilyDisabled(KeycloakSession session, RealmModel realm, UserModel user)": {
                "lineStart": 10,
                "lineEnd": 10
            }
        },
        "ef73d5e75b-UserModel.java": {
            "org.keycloak.models.UserModel$UserRemovedEvent.getRealm()": {
                "lineStart": 47,
                "lineEnd": 47
            },
            "org.keycloak.models.UserModel$UserRemovedEvent.getUser()": {
                "lineStart": 48,
                "lineEnd": 48
            },
            "org.keycloak.models.UserModel$UserRemovedEvent.getKeycloakSession()": {
                "lineStart": 49,
                "lineEnd": 49
            },
            "org.keycloak.models.UserModel.getId()": {
                "lineStart": 52,
                "lineEnd": 52
            },
            "org.keycloak.models.UserModel.getUsername()": {
                "lineStart": 53,
                "lineEnd": 53
            },
            "org.keycloak.models.UserModel.setUsername(String username)": {
                "lineStart": 54,
                "lineEnd": 54
            },
            "org.keycloak.models.UserModel.getCreatedTimestamp()": {
                "lineStart": 55,
                "lineEnd": 55
            },
            "org.keycloak.models.UserModel.setCreatedTimestamp(Long timestamp)": {
                "lineStart": 56,
                "lineEnd": 56
            },
            "org.keycloak.models.UserModel.isEnabled()": {
                "lineStart": 57,
                "lineEnd": 57
            },
            "org.keycloak.models.UserModel.setEnabled(boolean enabled)": {
                "lineStart": 58,
                "lineEnd": 58
            },
            "org.keycloak.models.UserModel.setSingleAttribute(String name, String value)": {
                "lineStart": 59,
                "lineEnd": 59
            },
            "org.keycloak.models.UserModel.setAttribute(String name, List<String> values)": {
                "lineStart": 60,
                "lineEnd": 60
            },
            "org.keycloak.models.UserModel.removeAttribute(String name)": {
                "lineStart": 61,
                "lineEnd": 61
            },
            "org.keycloak.models.UserModel.getFirstAttribute(String name)": {
                "lineStart": 62,
                "lineEnd": 62
            },
            "org.keycloak.models.UserModel.getAttribute(String name)": {
                "lineStart": 63,
                "lineEnd": 64
            },
            "org.keycloak.models.UserModel.getAttributeStream(final String name)": {
                "lineStart": 65,
                "lineEnd": 68
            },
            "org.keycloak.models.UserModel.getAttributes()": {
                "lineStart": 70,
                "lineEnd": 70
            },
            "org.keycloak.models.UserModel.getRequiredActions()": {
                "lineStart": 71,
                "lineEnd": 72
            },
            "org.keycloak.models.UserModel.getRequiredActionsStream()": {
                "lineStart": 73,
                "lineEnd": 76
            },
            "org.keycloak.models.UserModel.addRequiredAction(String action)": {
                "lineStart": 78,
                "lineEnd": 78
            },
            "org.keycloak.models.UserModel.removeRequiredAction(String action)": {
                "lineStart": 79,
                "lineEnd": 79
            },
            "org.keycloak.models.UserModel.addRequiredAction(RequiredAction action)": {
                "lineStart": 80,
                "lineEnd": 84
            },
            "org.keycloak.models.UserModel.removeRequiredAction(RequiredAction action)": {
                "lineStart": 86,
                "lineEnd": 90
            },
            "org.keycloak.models.UserModel.getFirstName()": {
                "lineStart": 92,
                "lineEnd": 92
            },
            "org.keycloak.models.UserModel.setFirstName(String firstName)": {
                "lineStart": 93,
                "lineEnd": 93
            },
            "org.keycloak.models.UserModel.getLastName()": {
                "lineStart": 94,
                "lineEnd": 94
            },
            "org.keycloak.models.UserModel.setLastName(String lastName)": {
                "lineStart": 95,
                "lineEnd": 95
            },
            "org.keycloak.models.UserModel.getEmail()": {
                "lineStart": 96,
                "lineEnd": 96
            },
            "org.keycloak.models.UserModel.setEmail(String email)": {
                "lineStart": 97,
                "lineEnd": 97
            },
            "org.keycloak.models.UserModel.isEmailVerified()": {
                "lineStart": 98,
                "lineEnd": 98
            },
            "org.keycloak.models.UserModel.setEmailVerified(boolean verified)": {
                "lineStart": 99,
                "lineEnd": 99
            },
            "org.keycloak.models.UserModel.getGroups()": {
                "lineStart": 100,
                "lineEnd": 101
            },
            "org.keycloak.models.UserModel.getGroupsStream()": {
                "lineStart": 102,
                "lineEnd": 105
            },
            "org.keycloak.models.UserModel.getGroups(int first, int max)": {
                "lineStart": 107,
                "lineEnd": 110
            },
            "org.keycloak.models.UserModel.getGroups(String search, int first, int max)": {
                "lineStart": 112,
                "lineEnd": 115
            },
            "org.keycloak.models.UserModel.getGroupsStream(String search, Integer first, Integer max)": {
                "lineStart": 117,
                "lineEnd": 130
            },
            "org.keycloak.models.UserModel.getGroupsCount()": {
                "lineStart": 132,
                "lineEnd": 134
            },
            "org.keycloak.models.UserModel.getGroupsCountByNameContaining(String search)": {
                "lineStart": 136,
                "lineEnd": 143
            },
            "org.keycloak.models.UserModel.joinGroup(GroupModel group)": {
                "lineStart": 145,
                "lineEnd": 145
            },
            "org.keycloak.models.UserModel.leaveGroup(GroupModel group)": {
                "lineStart": 146,
                "lineEnd": 146
            },
            "org.keycloak.models.UserModel.isMemberOf(GroupModel group)": {
                "lineStart": 147,
                "lineEnd": 147
            },
            "org.keycloak.models.UserModel.getFederationLink()": {
                "lineStart": 148,
                "lineEnd": 148
            },
            "org.keycloak.models.UserModel.setFederationLink(String link)": {
                "lineStart": 149,
                "lineEnd": 149
            },
            "org.keycloak.models.UserModel.getServiceAccountClientLink()": {
                "lineStart": 150,
                "lineEnd": 150
            },
            "org.keycloak.models.UserModel.setServiceAccountClientLink(String clientInternalId)": {
                "lineStart": 151,
                "lineEnd": 151
            },
            "org.keycloak.models.UserModel$Streams.getAttribute(String name)": {
                "lineStart": 155,
                "lineEnd": 158
            },
            "org.keycloak.models.UserModel$Streams.getAttributeStream(final String name)": {
                "lineStart": 160,
                "lineEnd": 161
            },
            "org.keycloak.models.UserModel$Streams.getRequiredActions()": {
                "lineStart": 162,
                "lineEnd": 165
            },
            "org.keycloak.models.UserModel$Streams.getRequiredActionsStream()": {
                "lineStart": 167,
                "lineEnd": 168
            },
            "org.keycloak.models.UserModel$Streams.getGroups()": {
                "lineStart": 169,
                "lineEnd": 172
            },
            "org.keycloak.models.UserModel$Streams.getGroupsStream()": {
                "lineStart": 174,
                "lineEnd": 175
            }
        },
        "80a471ad78-AbstractUsernameFormAuthenticator.java": {
            "org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator.tempDisabledError()": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator.tempDisabledFieldError()": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator.enabledUser(AuthenticationFlowContext context, UserModel user)": {
                "lineStart": 105,
                "lineEnd": 116
            },
            "org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator.validatePassword(AuthenticationFlowContext context, UserModel user, MultivaluedMap<String, String> inputData, boolean clearUser)": {
                "lineStart": 185,
                "lineEnd": 199
            },
            "org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator.isTemporarilyDisabledByBruteForce(AuthenticationFlowContext context, UserModel user)": {
                "lineStart": 219,
                "lineEnd": 232
            }
        },
        "04a02137b8-OTPFormAuthenticator.java": {
            "org.keycloak.authentication.authenticators.browser.OTPFormAuthenticator.tempDisabledError()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "org.keycloak.authentication.authenticators.browser.OTPFormAuthenticator.tempDisabledFieldError()": {
                "lineStart": 80,
                "lineEnd": 82
            }
        },
        "c11c594269-ValidateUsername.java": {
            "org.keycloak.authentication.authenticators.directgrant.ValidateUsername.authenticate(AuthenticationFlowContext context)": {
                "lineStart": 22,
                "lineEnd": 72
            }
        },
        "c86eafb63f-ValidateX509CertificateUsername.java": {
            "org.keycloak.authentication.authenticators.x509.ValidateX509CertificateUsername.authenticate(AuthenticationFlowContext context)": {
                "lineStart": 14,
                "lineEnd": 112
            }
        },
        "8f6f895f1b-X509ClientCertificateAuthenticator.java": {
            "org.keycloak.authentication.authenticators.x509.X509ClientCertificateAuthenticator.authenticate(AuthenticationFlowContext context)": {
                "lineStart": 21,
                "lineEnd": 125
            }
        },
        "13cd917c6e-TokenEndpoint.java": {
            "org.keycloak.protocol.oidc.endpoints.TokenEndpoint.importUserFromExternalIdentity(BrokeredIdentityContext context)": {
                "lineStart": 1024,
                "lineEnd": 1112
            }
        },
        "831db86bae-DefaultBruteForceProtector.java": {
            "org.keycloak.services.managers.DefaultBruteForceProtector.failure(KeycloakSession session, LoginEvent event)": {
                "lineStart": 70,
                "lineEnd": 141
            }
        },
        "19632587fe-UserResource.java": {
            "org.keycloak.services.resources.admin.UserResource.updateUser(final UserRepresentation rep)": {
                "lineStart": 115,
                "lineEnd": 158
            }
        }
    },
    "CVE-2020-2191": {
        "e2a7489-Candidate.java": {
            "hudson.plugins.swarm.Candidate.<init>(String url, String secret)": {
                "lineStart": 7,
                "lineEnd": 11
            },
            "hudson.plugins.swarm.Candidate.getSecret()": {
                "lineStart": 17,
                "lineEnd": 19
            }
        },
        "97d561a-Client.java": {
            "hudson.plugins.swarm.Client.run(SwarmClient swarmClient, String... args)": {
                "lineStart": 101,
                "lineEnd": 157
            }
        },
        "60f1e54-LabelFileWatcher.java": {
            "hudson.plugins.swarm.LabelFileWatcher.softLabelUpdate(String sNewLabels)": {
                "lineStart": 106,
                "lineEnd": 205
            }
        },
        "8d2b590-SwarmClient.java": {
            "hudson.plugins.swarm.SwarmClient.discoverFromMasterUrl()": {
                "lineStart": 112,
                "lineEnd": 165
            },
            "hudson.plugins.swarm.SwarmClient.createSwarmSlave(Candidate target)": {
                "lineStart": 326,
                "lineEnd": 407
            },
            "hudson.plugins.swarm.SwarmClient.postLabelRemove(String name, String labels, CloseableHttpClient client, HttpClientContext context, Candidate target)": {
                "lineStart": 409,
                "lineEnd": 427
            },
            "hudson.plugins.swarm.SwarmClient.postLabelAppend(String name, String labels, CloseableHttpClient client, HttpClientContext context, Candidate target)": {
                "lineStart": 429,
                "lineEnd": 447
            }
        },
        "d8919c5-PluginImpl.java": {
            "hudson.plugins.swarm.PluginImpl.doGetSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String secret)": {
                "lineStart": 55,
                "lineEnd": 67
            },
            "hudson.plugins.swarm.PluginImpl.doAddSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String secret, @QueryParameter String labels)": {
                "lineStart": 78,
                "lineEnd": 97
            },
            "hudson.plugins.swarm.PluginImpl.doRemoveSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String secret, @QueryParameter String labels)": {
                "lineStart": 103,
                "lineEnd": 122
            },
            "hudson.plugins.swarm.PluginImpl.doCreateSlave(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name, @QueryParameter String description, @QueryParameter int executors, @QueryParameter String remoteFsRoot, @QueryParameter String labels, @QueryParameter String secret, @QueryParameter Node.Mode mode, @QueryParameter(fixEmpty = true) String hash, @QueryParameter boolean deleteExistingClients)": {
                "lineStart": 124,
                "lineEnd": 188
            },
            "hudson.plugins.swarm.PluginImpl.getSwarmSecret()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "hudson.plugins.swarm.PluginImpl.doSlaveInfo(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 233,
                "lineEnd": 242
            }
        }
    },
    "CVE-2022-27204": {
        "d373497-ExtendedChoiceParameterDefinition.java": {
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition$DescriptorImpl.getDisplayName()": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition$DescriptorImpl.doCheckPropertyFile(@QueryParameter final String propertyFile, @QueryParameter final String propertyKey, @QueryParameter final String type)": {
                "lineStart": 92,
                "lineEnd": 141
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition$DescriptorImpl.doCheckPropertyKey(@QueryParameter final String propertyFile, @QueryParameter final String propertyKey, @QueryParameter final String type)": {
                "lineStart": 143,
                "lineEnd": 145
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition$DescriptorImpl.doCheckDefaultPropertyFile(@QueryParameter final String defaultPropertyFile, @QueryParameter final String defaultPropertyKey, @QueryParameter final String type)": {
                "lineStart": 147,
                "lineEnd": 149
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition$DescriptorImpl.doCheckDefaultPropertyKey(@QueryParameter final String defaultPropertyFile, @QueryParameter final String defaultPropertyKey, @QueryParameter final String type)": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition$DescriptorImpl.newInstance(StaplerRequest req, JSONObject formData)": {
                "lineStart": 155,
                "lineEnd": 339
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.<init>(String name, String type, String value, String projectName, String propertyFile, String groovyScript, String groovyScriptFile, String bindings, String groovyClasspath, String propertyKey, String defaultValue, String defaultPropertyFile, String defaultGroovyScript, String defaultGroovyScriptFile, String defaultBindings, String defaultGroovyClasspath, String defaultPropertyKey, String descriptionPropertyValue, String descriptionPropertyFile, String descriptionGroovyScript, String descriptionGroovyScriptFile, String descriptionBindings, String descriptionGroovyClasspath, String descriptionPropertyKey, String javascriptFile, String javascript, boolean saveJSONParameterToFile, boolean quoteValue, int visibleItemCount, String description, String multiSelectDelimiter)": {
                "lineStart": 372,
                "lineEnd": 411
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeDefaultValueMap()": {
                "lineStart": 413,
                "lineEnd": 426
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeDescriptionPropertyValueMap(String effectiveValue)": {
                "lineStart": 428,
                "lineEnd": 445
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.createValue(StaplerRequest request)": {
                "lineStart": 447,
                "lineEnd": 450
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.createValue(CLICommand command, String value)": {
                "lineStart": 452,
                "lineEnd": 455
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.createValue(String[] requestValues)": {
                "lineStart": 457,
                "lineEnd": 489
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.createValue(StaplerRequest request, JSONObject jO)": {
                "lineStart": 491,
                "lineEnd": 530
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.isMultiLevelParameterType()": {
                "lineStart": 532,
                "lineEnd": 534
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.isBasicParameterType()": {
                "lineStart": 536,
                "lineEnd": 538
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultParameterValue()": {
                "lineStart": 540,
                "lineEnd": 554
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeValue(String value, String propertyFilePath, String propertyKey, String groovyScript, String groovyScriptFile, String bindings, String groovyClasspath, boolean isSingleValued)": {
                "lineStart": 556,
                "lineEnd": 601
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.executeGroovyScriptFile(String groovyScriptFile, String bindings, String groovyClasspath, boolean isSingleValued)": {
                "lineStart": 603,
                "lineEnd": 615
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.loadGroovyScriptFile(String groovyScriptFile)": {
                "lineStart": 617,
                "lineEnd": 621
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.executeGroovyScriptAndProcessGroovyValue(String groovyScript, String bindings, String groovyClasspath, boolean isSingleValued)": {
                "lineStart": 623,
                "lineEnd": 635
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.executeGroovyScript(String groovyScript, String bindings, String groovyClasspath)": {
                "lineStart": 637,
                "lineEnd": 648
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeMD5Hash(String str)": {
                "lineStart": 650,
                "lineEnd": 658
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getGroovyBinding()": {
                "lineStart": 660,
                "lineEnd": 677
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getGroovyShell(String groovyClasspath)": {
                "lineStart": 679,
                "lineEnd": 722
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.processGroovyValue(boolean isSingleValued, Object groovyValue)": {
                "lineStart": 724,
                "lineEnd": 755
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setBindings(GroovyShell shell, String bindings)": {
                "lineStart": 757,
                "lineEnd": 774
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeEffectiveValue()": {
                "lineStart": 776,
                "lineEnd": 778
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeEffectiveDefaultValue()": {
                "lineStart": 780,
                "lineEnd": 782
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.isSingleValuedParameterType(String type)": {
                "lineStart": 784,
                "lineEnd": 786
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.computeEffectiveDescriptionPropertyValue()": {
                "lineStart": 788,
                "lineEnd": 790
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getType()": {
                "lineStart": 792,
                "lineEnd": 794
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setType(String type)": {
                "lineStart": 796,
                "lineEnd": 798
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultValue()": {
                "lineStart": 800,
                "lineEnd": 802
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultValue(String defaultValue)": {
                "lineStart": 804,
                "lineEnd": 806
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getPropertyFile()": {
                "lineStart": 808,
                "lineEnd": 810
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setPropertyFile(String propertyFile)": {
                "lineStart": 812,
                "lineEnd": 814
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getGroovyScript()": {
                "lineStart": 816,
                "lineEnd": 818
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setGroovyScript(String groovyScript)": {
                "lineStart": 820,
                "lineEnd": 822
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getGroovyScriptFile()": {
                "lineStart": 824,
                "lineEnd": 826
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setGroovyScriptFile(String groovyScriptFile)": {
                "lineStart": 828,
                "lineEnd": 830
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getBindings()": {
                "lineStart": 832,
                "lineEnd": 834
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setBindings(String bindings)": {
                "lineStart": 836,
                "lineEnd": 838
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultPropertyKey()": {
                "lineStart": 840,
                "lineEnd": 842
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultPropertyKey(String defaultPropertyKey)": {
                "lineStart": 844,
                "lineEnd": 846
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.columnIndicesForDropDowns(String[] headerColumns)": {
                "lineStart": 848,
                "lineEnd": 862
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.calculateChoicesByDropdownId()": {
                "lineStart": 864,
                "lineEnd": 935
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getMultiLevelDropdownIds()": {
                "lineStart": 937,
                "lineEnd": 949
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getChoicesByDropdownId()": {
                "lineStart": 951,
                "lineEnd": 968
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getValue()": {
                "lineStart": 970,
                "lineEnd": 972
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setValue(String value)": {
                "lineStart": 974,
                "lineEnd": 976
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getPropertyKey()": {
                "lineStart": 978,
                "lineEnd": 980
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setPropertyKey(String propertyKey)": {
                "lineStart": 982,
                "lineEnd": 984
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultPropertyFile()": {
                "lineStart": 986,
                "lineEnd": 988
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultGroovyScript()": {
                "lineStart": 990,
                "lineEnd": 992
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultGroovyScript(String defaultGroovyScript)": {
                "lineStart": 994,
                "lineEnd": 996
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultGroovyScriptFile()": {
                "lineStart": 998,
                "lineEnd": 1000
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultGroovyScriptFile(String defaultGroovyScriptFile)": {
                "lineStart": 1002,
                "lineEnd": 1004
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultBindings()": {
                "lineStart": 1006,
                "lineEnd": 1008
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultBindings(String defaultBindings)": {
                "lineStart": 1010,
                "lineEnd": 1012
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getGroovyClasspath()": {
                "lineStart": 1014,
                "lineEnd": 1016
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setGroovyClasspath(String groovyClasspath)": {
                "lineStart": 1018,
                "lineEnd": 1020
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDefaultGroovyClasspath()": {
                "lineStart": 1022,
                "lineEnd": 1024
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultGroovyClasspath(String defaultGroovyClasspath)": {
                "lineStart": 1026,
                "lineEnd": 1028
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionPropertyValue()": {
                "lineStart": 1030,
                "lineEnd": 1032
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionPropertyValue(String descriptionPropertyValue)": {
                "lineStart": 1034,
                "lineEnd": 1036
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionPropertyFile()": {
                "lineStart": 1038,
                "lineEnd": 1040
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionPropertyFile(String descriptionPropertyFile)": {
                "lineStart": 1042,
                "lineEnd": 1044
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionGroovyScript()": {
                "lineStart": 1046,
                "lineEnd": 1048
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionGroovyScript(String descriptionGroovyScript)": {
                "lineStart": 1050,
                "lineEnd": 1052
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionGroovyScriptFile()": {
                "lineStart": 1054,
                "lineEnd": 1056
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionGroovyScriptFile(String descriptionGroovyScriptFile)": {
                "lineStart": 1058,
                "lineEnd": 1060
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionBindings()": {
                "lineStart": 1062,
                "lineEnd": 1064
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionBindings(String descriptionBindings)": {
                "lineStart": 1066,
                "lineEnd": 1068
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionGroovyClasspath()": {
                "lineStart": 1070,
                "lineEnd": 1072
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionGroovyClasspath(String descriptionGroovyClasspath)": {
                "lineStart": 1074,
                "lineEnd": 1076
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getDescriptionPropertyKey()": {
                "lineStart": 1078,
                "lineEnd": 1080
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDescriptionPropertyKey(String descriptionPropertyKey)": {
                "lineStart": 1082,
                "lineEnd": 1084
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getJavascriptFile()": {
                "lineStart": 1086,
                "lineEnd": 1088
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setJavascriptFile(String javascriptFile)": {
                "lineStart": 1090,
                "lineEnd": 1092
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getJavascript()": {
                "lineStart": 1094,
                "lineEnd": 1096
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setJavascript(String javascript)": {
                "lineStart": 1098,
                "lineEnd": 1100
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.isSaveJSONParameterToFile()": {
                "lineStart": 1102,
                "lineEnd": 1104
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setSaveJSONParameterToFile(boolean saveJSONParameterToFile)": {
                "lineStart": 1106,
                "lineEnd": 1108
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.isQuoteValue()": {
                "lineStart": 1110,
                "lineEnd": 1112
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setQuoteValue(boolean quoteValue)": {
                "lineStart": 1114,
                "lineEnd": 1116
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getVisibleItemCount()": {
                "lineStart": 1118,
                "lineEnd": 1120
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setVisibleItemCount(int visibleItemCount)": {
                "lineStart": 1122,
                "lineEnd": 1124
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getMultiSelectDelimiter()": {
                "lineStart": 1126,
                "lineEnd": 1128
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setMultiSelectDelimiter(final String multiSelectDelimiter)": {
                "lineStart": 1130,
                "lineEnd": 1132
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setDefaultPropertyFile(String defaultPropertyFile)": {
                "lineStart": 1134,
                "lineEnd": 1136
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getProjectName()": {
                "lineStart": 1138,
                "lineEnd": 1140
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.setProjectName(String projectName)": {
                "lineStart": 1142,
                "lineEnd": 1144
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.hasUnapprovedScripts()": {
                "lineStart": 1146,
                "lineEnd": 1183
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.checkScriptApproval(String groovyScript, String groovyClasspath, boolean impersonateAnonymousUser)": {
                "lineStart": 1185,
                "lineEnd": 1249
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.createClasspathDirDigest(AbstractProject<?, ?> project, ClasspathEntry classpathEntry)": {
                "lineStart": 1251,
                "lineEnd": 1292
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.createDigest(AbstractProject<?, ?> project, URI classpathEntryURI, List<Object[]> fileInfos)": {
                "lineStart": 1294,
                "lineEnd": 1315
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.hashFile(File file)": {
                "lineStart": 1317,
                "lineEnd": 1346
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.parseClasspath(String groovyClasspath)": {
                "lineStart": 1348,
                "lineEnd": 1360
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getParameterDefinitionInfo()": {
                "lineStart": 1362,
                "lineEnd": 1371
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getEffectiveDefaultValue()": {
                "lineStart": 1373,
                "lineEnd": 1375
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getJSONEditorScript()": {
                "lineStart": 1377,
                "lineEnd": 1395
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.getJSONEditorOptions()": {
                "lineStart": 1397,
                "lineEnd": 1417
            },
            "com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition.expandVariables(String input)": {
                "lineStart": 1419,
                "lineEnd": 1446
            }
        }
    },
    "CVE-2021-35517": {
        "d809125e5-TarUtils.java": {
            "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(final InputStream inputStream, final List<TarArchiveStructSparse> sparseHeaders, final Map<String, String> globalPaxHeaders, final long headerSize)": {
                "lineStart": 375,
                "lineEnd": 487
            }
        }
    },
    "CVE-2023-39153": {
        "583825e-GitLabSecurityRealm.java": {
            "org.jenkinsci.plugins.GitLabSecurityRealm.<init>()": {
                "lineStart": 80,
                "lineEnd": 81
            },
            "org.jenkinsci.plugins.GitLabSecurityRealm.doCommenceLogin(StaplerRequest request, @QueryParameter String from, @Header(\"Referer\") final String referer)": {
                "lineStart": 172,
                "lineEnd": 191
            },
            "org.jenkinsci.plugins.GitLabSecurityRealm.doFinishLogin(StaplerRequest request)": {
                "lineStart": 199,
                "lineEnd": 268
            }
        }
    },
    "CVE-2022-25517": {
        "eaf7fab65-AbstractWrapper.java": {
            "com.baomidou.mybatisplus.core.conditions.AbstractWrapper.orderBy(boolean condition, boolean isAsc, R column, R... columns)": {
                "lineStart": 255,
                "lineEnd": 266
            }
        },
        "d4124a1fd-Func.java": {
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.isNull(R column)": {
                "lineStart": 6,
                "lineEnd": 8
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.isNull(boolean condition, R column)": {
                "lineStart": 10,
                "lineEnd": 10
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.isNotNull(R column)": {
                "lineStart": 11,
                "lineEnd": 13
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.isNotNull(boolean condition, R column)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.in(R column, Collection<?> coll)": {
                "lineStart": 16,
                "lineEnd": 18
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.in(boolean condition, R column, Collection<?> coll)": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.in(R column, Object... values)": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.in(boolean condition, R column, Object... values)": {
                "lineStart": 25,
                "lineEnd": 25
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.notIn(R column, Collection<?> coll)": {
                "lineStart": 26,
                "lineEnd": 28
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.notIn(boolean condition, R column, Collection<?> coll)": {
                "lineStart": 30,
                "lineEnd": 30
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.notIn(R column, Object... value)": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.notIn(boolean condition, R column, Object... values)": {
                "lineStart": 35,
                "lineEnd": 35
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.inSql(R column, String inValue)": {
                "lineStart": 36,
                "lineEnd": 38
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.inSql(boolean condition, R column, String inValue)": {
                "lineStart": 40,
                "lineEnd": 40
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.notInSql(R column, String inValue)": {
                "lineStart": 41,
                "lineEnd": 43
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.notInSql(boolean condition, R column, String inValue)": {
                "lineStart": 45,
                "lineEnd": 45
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.groupBy(R column, R... columns)": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.groupBy(boolean condition, R column, R... columns)": {
                "lineStart": 50,
                "lineEnd": 50
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.orderByAsc(R column, R... columns)": {
                "lineStart": 51,
                "lineEnd": 53
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.orderByAsc(boolean condition, R column, R... columns)": {
                "lineStart": 55,
                "lineEnd": 57
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.orderByDesc(R column, R... columns)": {
                "lineStart": 59,
                "lineEnd": 61
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.orderByDesc(boolean condition, R column, R... columns)": {
                "lineStart": 63,
                "lineEnd": 65
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.orderBy(boolean condition, boolean isAsc, R column, R... columns)": {
                "lineStart": 67,
                "lineEnd": 67
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.having(String sqlHaving, Object... params)": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.having(boolean condition, String sqlHaving, Object... params)": {
                "lineStart": 72,
                "lineEnd": 72
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.func(Consumer<Children> consumer)": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "com.baomidou.mybatisplus.core.conditions.interfaces.Func.func(boolean condition, Consumer<Children> consumer)": {
                "lineStart": 77,
                "lineEnd": 77
            }
        },
        "ae13ef65e-TableFieldInfo.java": {
            "com.baomidou.mybatisplus.core.metadata.TableFieldInfo.<init>(GlobalConfig.DbConfig dbConfig, TableInfo tableInfo, Field field, TableField tableField, Reflector reflector, boolean existTableLogic)": {
                "lineStart": 52,
                "lineEnd": 154
            }
        },
        "7c9160b00-AbstractChainWrapper.java": {
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.<init>()": {
                "lineStart": 18,
                "lineEnd": 19
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getWrapper()": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.setEntity(T entity)": {
                "lineStart": 25,
                "lineEnd": 28
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.setEntityClass(Class<T> entityClass)": {
                "lineStart": 30,
                "lineEnd": 33
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.allEq(boolean condition, Map<R, V> params, boolean null2IsNull)": {
                "lineStart": 35,
                "lineEnd": 38
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.allEq(boolean condition, BiPredicate<R, V> filter, Map<R, V> params, boolean null2IsNull)": {
                "lineStart": 40,
                "lineEnd": 43
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.eq(boolean condition, R column, Object val)": {
                "lineStart": 45,
                "lineEnd": 48
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.ne(boolean condition, R column, Object val)": {
                "lineStart": 50,
                "lineEnd": 53
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.gt(boolean condition, R column, Object val)": {
                "lineStart": 55,
                "lineEnd": 58
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.ge(boolean condition, R column, Object val)": {
                "lineStart": 60,
                "lineEnd": 63
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.lt(boolean condition, R column, Object val)": {
                "lineStart": 65,
                "lineEnd": 68
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.le(boolean condition, R column, Object val)": {
                "lineStart": 70,
                "lineEnd": 73
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.between(boolean condition, R column, Object val1, Object val2)": {
                "lineStart": 75,
                "lineEnd": 78
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.notBetween(boolean condition, R column, Object val1, Object val2)": {
                "lineStart": 80,
                "lineEnd": 83
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.like(boolean condition, R column, Object val)": {
                "lineStart": 85,
                "lineEnd": 88
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.notLike(boolean condition, R column, Object val)": {
                "lineStart": 90,
                "lineEnd": 93
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.likeLeft(boolean condition, R column, Object val)": {
                "lineStart": 95,
                "lineEnd": 98
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.likeRight(boolean condition, R column, Object val)": {
                "lineStart": 100,
                "lineEnd": 103
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.isNull(boolean condition, R column)": {
                "lineStart": 105,
                "lineEnd": 108
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.isNotNull(boolean condition, R column)": {
                "lineStart": 110,
                "lineEnd": 113
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.in(boolean condition, R column, Collection<?> coll)": {
                "lineStart": 115,
                "lineEnd": 118
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.in(boolean condition, R column, Object... values)": {
                "lineStart": 120,
                "lineEnd": 123
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.notIn(boolean condition, R column, Collection<?> coll)": {
                "lineStart": 125,
                "lineEnd": 128
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.notIn(boolean condition, R column, Object... values)": {
                "lineStart": 130,
                "lineEnd": 133
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.inSql(boolean condition, R column, String inValue)": {
                "lineStart": 135,
                "lineEnd": 138
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.notInSql(boolean condition, R column, String inValue)": {
                "lineStart": 140,
                "lineEnd": 143
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.groupBy(boolean condition, R column, R... columns)": {
                "lineStart": 145,
                "lineEnd": 148
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.orderBy(boolean condition, boolean isAsc, R column, R... columns)": {
                "lineStart": 150,
                "lineEnd": 153
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.having(boolean condition, String sqlHaving, Object... params)": {
                "lineStart": 155,
                "lineEnd": 158
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.func(boolean condition, Consumer<Children> consumer)": {
                "lineStart": 160,
                "lineEnd": 166
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.or(boolean condition)": {
                "lineStart": 168,
                "lineEnd": 171
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.apply(boolean condition, String applySql, Object... values)": {
                "lineStart": 173,
                "lineEnd": 176
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.last(boolean condition, String lastSql)": {
                "lineStart": 178,
                "lineEnd": 181
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.comment(boolean condition, String comment)": {
                "lineStart": 183,
                "lineEnd": 186
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.first(boolean condition, String firstSql)": {
                "lineStart": 188,
                "lineEnd": 191
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.exists(boolean condition, String existsSql, Object... values)": {
                "lineStart": 193,
                "lineEnd": 196
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.notExists(boolean condition, String existsSql, Object... values)": {
                "lineStart": 198,
                "lineEnd": 201
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.and(boolean condition, Consumer<Param> consumer)": {
                "lineStart": 203,
                "lineEnd": 206
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.or(boolean condition, Consumer<Param> consumer)": {
                "lineStart": 208,
                "lineEnd": 211
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.nested(boolean condition, Consumer<Param> consumer)": {
                "lineStart": 213,
                "lineEnd": 216
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.not(boolean condition, Consumer<Param> consumer)": {
                "lineStart": 218,
                "lineEnd": 221
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getSqlSegment()": {
                "lineStart": 223,
                "lineEnd": 225
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getSqlFirst()": {
                "lineStart": 227,
                "lineEnd": 229
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getSqlSelect()": {
                "lineStart": 231,
                "lineEnd": 233
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getSqlSet()": {
                "lineStart": 235,
                "lineEnd": 237
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getSqlComment()": {
                "lineStart": 239,
                "lineEnd": 241
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getTargetSql()": {
                "lineStart": 243,
                "lineEnd": 245
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getEntity()": {
                "lineStart": 247,
                "lineEnd": 249
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getExpression()": {
                "lineStart": 251,
                "lineEnd": 253
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.getCustomSqlSegment()": {
                "lineStart": 255,
                "lineEnd": 257
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.clear()": {
                "lineStart": 259,
                "lineEnd": 261
            },
            "com.baomidou.mybatisplus.extension.conditions.AbstractChainWrapper.clone()": {
                "lineStart": 263,
                "lineEnd": 265
            }
        }
    },
    "CVE-2022-0538": {
        "b6552b198a-RobustCollectionConverter.java": {
            "hudson.util.RobustCollectionConverter.populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection)": {
                "lineStart": 42,
                "lineEnd": 59
            }
        },
        "c83e7c8fe8-RobustMapConverter.java": {
            "hudson.util.RobustMapConverter.putCurrentEntryIntoMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": {
                "lineStart": 16,
                "lineEnd": 23
            }
        },
        "f42af4094e-RobustReflectionConverter.java": {
            "hudson.util.RobustReflectionConverter.doUnmarshal(final Object result, final HierarchicalStreamReader reader, final UnmarshallingContext context)": {
                "lineStart": 257,
                "lineEnd": 381
            }
        },
        "204fd0e39d-XStream2.java": {
            "hudson.util.XStream2.init()": {
                "lineStart": 187,
                "lineEnd": 213
            }
        }
    },
    "CVE-2022-34181": {
        "4d83dcf-ExtraConfiguration.java": {
            "org.jenkinsci.plugins.xunit.ExtraConfiguration.<init>(long testTimeMargin, boolean reduceLog, long sleepTime, boolean followSymlink, boolean skipPublishingChecks, @CheckForNull final String checksName)": {
                "lineStart": 60,
                "lineEnd": 67
            }
        },
        "53381ec-XUnitProcessor.java": {
            "org.jenkinsci.plugins.xunit.XUnitProcessor$ReportParserCallable.<init>(long buildTime, @NonNull String junitFilePattern, long nowMaster, String processorId, boolean reduceLog, PipelineTestDetails pipelineTestDetails)": {
                "lineStart": 59,
                "lineEnd": 66
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor$ReportParserCallable.invoke(File ws, VirtualChannel channel)": {
                "lineStart": 68,
                "lineEnd": 79
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.<init>(@NonNull TestType[] tools, @CheckForNull XUnitThreshold[] thresholds, int thresholdMode, @NonNull ExtraConfiguration extraConfiguration)": {
                "lineStart": 90,
                "lineEnd": 104
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.process(Run<?, ?> build, FilePath workspace, TaskListener listener, Launcher launcher, @NonNull Collection<TestDataPublisher> testDataPublishers, @CheckForNull PipelineTestDetails pipelineTestDetails)": {
                "lineStart": 106,
                "lineEnd": 116
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.publishChecks(Run<?, ?> build, @NonNull final XUnitProcessorResult result, @NonNull final Result buildResult, TaskListener listener, @CheckForNull PipelineTestDetails pipelineTestDetails)": {
                "lineStart": 118,
                "lineEnd": 141
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.processTestsReport(Run<?, ?> build, FilePath workspace, TaskListener listener)": {
                "lineStart": 143,
                "lineEnd": 175
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.unwrapSlaveException(IOException e)": {
                "lineStart": 177,
                "lineEnd": 188
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.isEmptyGivenPattern(XUnitReportProcessorService xUnitReportService, TestType tool)": {
                "lineStart": 190,
                "lineEnd": 192
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.getExpandedResolvedPattern(String pattern, Run<?, ?> build, TaskListener listener)": {
                "lineStart": 194,
                "lineEnd": 200
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.buildXUnitToolInfo(final TestType tool, final Run<?, ?> build, final FilePath workspace, final TaskListener listener)": {
                "lineStart": 202,
                "lineEnd": 218
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.getUserStylesheet(final TestType tool)": {
                "lineStart": 220,
                "lineEnd": 241
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.getCustomStylesheet(final TestType tool, final Run<?, ?> build, final FilePath workspace, final TaskListener listener)": {
                "lineStart": 243,
                "lineEnd": 266
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.newXUnitTransformer(final XUnitToolInfo xUnitToolInfo)": {
                "lineStart": 268,
                "lineEnd": 272
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.getPreviousTestResult(Run<?, ?> build)": {
                "lineStart": 274,
                "lineEnd": 286
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.recordTestResult(Run<?, ?> build, FilePath workspace, TaskListener listener, Launcher launcher, Collection<TestDataPublisher> testDataPublishers, PipelineTestDetails pipelineTestDetails)": {
                "lineStart": 288,
                "lineEnd": 332
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.getTestResult(final FilePath workspace, final String junitFilePattern, final long buildTime, final long nowMaster, final PipelineTestDetails pipelineTestDetails)": {
                "lineStart": 334,
                "lineEnd": 336
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.processResultThreshold(TestResultSummary testResult, Run<?, ?> build)": {
                "lineStart": 338,
                "lineEnd": 360
            },
            "org.jenkinsci.plugins.xunit.XUnitProcessor.processDeletion(FilePath workspace)": {
                "lineStart": 362,
                "lineEnd": 380
            }
        }
    },
    "CVE-2022-42111": {
        "66f34bbb442f7-ViewSharedAssetsDisplayContext.java": {
            "com.liferay.sharing.web.internal.display.context.ViewSharedAssetsDisplayContext.getTitle(SharingEntry sharingEntry)": {
                "lineStart": 162,
                "lineEnd": 169
            }
        }
    },
    "CVE-2021-34433": {
        "9a084be56-EcdhEcdsaServerKeyExchange.java": {
            "org.eclipse.californium.scandium.dtls.EcdhEcdsaServerKeyExchange.<init>(SignatureAndHashAlgorithm signatureAndHashAlgorithm, SupportedGroup supportedGroup, byte[] encodedPoint, byte[] signatureEncoded)": {
                "lineStart": 46,
                "lineEnd": 54
            },
            "org.eclipse.californium.scandium.dtls.EcdhEcdsaServerKeyExchange.fromReader(DatagramReader reader)": {
                "lineStart": 73,
                "lineEnd": 85
            },
            "org.eclipse.californium.scandium.dtls.EcdhEcdsaServerKeyExchange.verifySignature(PublicKey serverPublicKey, Random clientRandom, Random serverRandom)": {
                "lineStart": 87,
                "lineEnd": 110
            },
            "org.eclipse.californium.scandium.dtls.EcdhEcdsaServerKeyExchange.toString()": {
                "lineStart": 118,
                "lineEnd": 127
            }
        }
    },
    "CVE-2023-29523": {
        "9679fadb328-XWikiDocument.java": {
            "com.xpn.xwiki.doc.XWikiDocument.display(String fieldname, String type, String pref, BaseObject obj, String wrappingSyntaxId, boolean isolated, XWikiContext context)": {
                "lineStart": 2346,
                "lineEnd": 2469
            }
        }
    },
    "CVE-2023-41935": {
        "23f4bbc-AzureSecurityRealm.java": {
            "com.microsoft.jenkins.azuread.AzureSecurityRealm.validateIdToken(String expectedNonce, String idToken)": {
                "lineStart": 366,
                "lineEnd": 374
            }
        }
    },
    "CVE-2021-42646": {
        "49dff3cd116-ApplicationManagementServiceImpl.java": {
            "org.wso2.carbon.identity.application.mgt.ApplicationManagementServiceImpl.unmarshalSP(SpFileContent spFileContent, String tenantDomain)": {
                "lineStart": 1493,
                "lineEnd": 1507
            }
        }
    },
    "CVE-2023-26470": {
        "13faab26132-BaseObjects.java": {
            "com.xpn.xwiki.internal.doc.BaseObjects.remove(int index)": {
                "lineStart": 60,
                "lineEnd": 63
            }
        }
    },
    "CVE-2021-22144": {
        "ee4e15c3810-Grok.java": {
            "org.elasticsearch.grok.Grok.forbidCircularReferences(String patternName, List<String> path, String pattern)": {
                "lineStart": 71,
                "lineEnd": 111
            }
        }
    },
    "CVE-2022-23106": {
        "df907054-TokenReloadAction.java": {
            "io.jenkins.plugins.casc.TokenReloadAction.doIndex(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 30,
                "lineEnd": 52
            }
        }
    },
    "CVE-2022-45932": {
        "eb41dd38-RoleStore.java": {
            "org.opendaylight.aaa.datastore.h2.RoleStore.deleteRole(final String roleid)": {
                "lineStart": 128,
                "lineEnd": 147
            }
        }
    },
    "CVE-2020-1937": {
        "4fb258029c-CubeService.java": {
            "org.apache.kylin.rest.service.CubeService$HTableInfoSyncListener.onClearAll(Broadcaster broadcaster)": {
                "lineStart": 825,
                "lineEnd": 827
            },
            "org.apache.kylin.rest.service.CubeService$HTableInfoSyncListener.onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)": {
                "lineStart": 829,
                "lineEnd": 838
            },
            "org.apache.kylin.rest.service.CubeService.generateNodeInfo(long cuboidId, int dimensionCount, long cubeQueryCount, Map<Long, Long> rowCountMap, Map<Long, Long> hitFrequencyMap, Map<Long, Long> queryMatchMap, Set<Long> currentCuboidSet)": {
                "lineStart": 875,
                "lineEnd": 890
            },
            "org.apache.kylin.rest.service.CubeService.getCuboidHitFrequency(String cubeName, boolean isCuboidSource)": {
                "lineStart": 921,
                "lineEnd": 928
            },
            "org.apache.kylin.rest.service.CubeService.getCuboidRollingUpStats(String cubeName)": {
                "lineStart": 930,
                "lineEnd": 939
            },
            "org.apache.kylin.rest.service.CubeService.getCuboidQueryMatchCount(String cubeName)": {
                "lineStart": 941,
                "lineEnd": 948
            }
        }
    },
    "CVE-2020-5230": {
        "7d0d42688f-Id.java": {
            "org.opencastproject.mediapackage.identifier.Id.compact()": {
                "lineStart": 5,
                "lineEnd": 5
            },
            "org.opencastproject.mediapackage.identifier.Id$Adapter.marshal(Id id)": {
                "lineStart": 7,
                "lineEnd": 15
            },
            "org.opencastproject.mediapackage.identifier.Id$Adapter.unmarshal(IdImpl id)": {
                "lineStart": 17,
                "lineEnd": 19
            },
            "org.opencastproject.mediapackage.identifier.Id.toString()": {
                "lineStart": 23,
                "lineEnd": 23
            }
        },
        "4eb1c09d38-IdImpl.java": {
            "org.opencastproject.mediapackage.identifier.IdImpl.<init>(String id)": {
                "lineStart": 11,
                "lineEnd": 13
            },
            "org.opencastproject.mediapackage.identifier.IdImpl.compact()": {
                "lineStart": 15,
                "lineEnd": 17
            }
        },
        "115b7e31ec-IngestRestService.java": {
            "org.opencastproject.ingest.endpoint.IngestRestService.addMediaPackage(@Context HttpServletRequest request, @PathParam(\"wdID\") String wdID)": {
                "lineStart": 408,
                "lineEnd": 551
            }
        }
    },
    "CVE-2020-5410": {
        "87b89764-GenericResourceRepository.java": {
            "org.springframework.cloud.config.server.resource.GenericResourceRepository.findOne(String application, String profile, String label, String path)": {
                "lineStart": 23,
                "lineEnd": 55
            }
        },
        "e6bb0f99-PathUtils.java": {
            "org.springframework.cloud.config.server.support.PathUtils.<init>()": {
                "lineStart": 10,
                "lineEnd": 11
            },
            "org.springframework.cloud.config.server.support.PathUtils.isInvalidEncodedLocation(String location)": {
                "lineStart": 13,
                "lineEnd": 38
            },
            "org.springframework.cloud.config.server.support.PathUtils.isInvalidLocation(String location)": {
                "lineStart": 40,
                "lineEnd": 55
            },
            "org.springframework.cloud.config.server.support.PathUtils.isInvalidEncodedPath(String path)": {
                "lineStart": 57,
                "lineEnd": 78
            },
            "org.springframework.cloud.config.server.support.PathUtils.processPath(String path)": {
                "lineStart": 80,
                "lineEnd": 84
            },
            "org.springframework.cloud.config.server.support.PathUtils.cleanDuplicateSlashes(String path)": {
                "lineStart": 86,
                "lineEnd": 113
            },
            "org.springframework.cloud.config.server.support.PathUtils.cleanLeadingSlash(String path)": {
                "lineStart": 115,
                "lineEnd": 133
            },
            "org.springframework.cloud.config.server.support.PathUtils.isInvalidPath(String path)": {
                "lineStart": 135,
                "lineEnd": 165
            }
        }
    },
    "CVE-2023-34454": {
        "5263e94-Snappy.java": {
            "org.xerial.snappy.Snappy.compress(char[] input)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "org.xerial.snappy.Snappy.compress(double[] input)": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.xerial.snappy.Snappy.compress(float[] input)": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "org.xerial.snappy.Snappy.compress(int[] input)": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "org.xerial.snappy.Snappy.compress(long[] input)": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.xerial.snappy.Snappy.compress(short[] input)": {
                "lineStart": 81,
                "lineEnd": 83
            }
        }
    },
    "CVE-2020-14195": {
        "dee36a14e-SubTypeValidator.java": {
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.<init>()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()": {
                "lineStart": 74,
                "lineEnd": 74
            },
            "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext ctxt, JavaType type)": {
                "lineStart": 75,
                "lineEnd": 107
            }
        }
    },
    "CVE-2023-6267": {
        "645b431b017-ResteasyBuiltinsProcessor.java": {
            "io.quarkus.resteasy.deployment.ResteasyBuiltinsProcessor.setUpSecurity(BuildProducer<ResteasyJaxrsProviderBuildItem> providers, BuildProducer<AdditionalBeanBuildItem> additionalBeanBuildItem, Capabilities capabilities)": {
                "lineStart": 134,
                "lineEnd": 147
            }
        },
        "04f9bfa314e-PermissionSecurityChecks.java": {
            "io.quarkus.security.deployment.PermissionSecurityChecks$PermissionSecurityChecksBuilder.gatherPermissionsAllowedAnnotations(List<AnnotationInstance> instances, Map<MethodInfo, AnnotationInstance> alreadyCheckedMethods, Map<ClassInfo, AnnotationInstance> alreadyCheckedClasses)": {
                "lineStart": 147,
                "lineEnd": 207
            }
        },
        "48978c322c1-SecurityProcessor.java": {
            "io.quarkus.security.deployment.SecurityProcessor.gatherSecurityAnnotations(IndexView index, DotName dotName, Map<MethodInfo, AnnotationInstance> alreadyCheckedMethods, Map<ClassInfo, AnnotationInstance> classLevelAnnotations, BiConsumer<MethodInfo, AnnotationInstance> putResult)": {
                "lineStart": 573,
                "lineEnd": 613
            }
        }
    },
    "CVE-2021-38542": {
        "a08c0ae312-ProtocolSession.java": {
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.of(String value, Class<U> type)": {
                "lineStart": 16,
                "lineEnd": 19
            },
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.<init>(String value, Class<T> type)": {
                "lineStart": 23,
                "lineEnd": 26
            },
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.asString()": {
                "lineStart": 28,
                "lineEnd": 30
            },
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.convert(Object object)": {
                "lineStart": 32,
                "lineEnd": 34
            },
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.equals(Object o)": {
                "lineStart": 36,
                "lineEnd": 43
            },
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.hashCode()": {
                "lineStart": 45,
                "lineEnd": 47
            },
            "org.apache.james.protocols.api.ProtocolSession$AttachmentKey.toString()": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "org.apache.james.protocols.api.ProtocolSession.setAttachment(AttachmentKey<T> key, T value, State state)": {
                "lineStart": 54,
                "lineEnd": 54
            },
            "org.apache.james.protocols.api.ProtocolSession.removeAttachment(AttachmentKey<T> key, State state)": {
                "lineStart": 54,
                "lineEnd": 54
            },
            "org.apache.james.protocols.api.ProtocolSession.getAttachment(AttachmentKey<T> key, State state)": {
                "lineStart": 54,
                "lineEnd": 54
            },
            "org.apache.james.protocols.api.ProtocolSession.getState()": {
                "lineStart": 55,
                "lineEnd": 56
            },
            "org.apache.james.protocols.api.ProtocolSession.getConnectionState()": {
                "lineStart": 57,
                "lineEnd": 58
            },
            "org.apache.james.protocols.api.ProtocolSession.resetState()": {
                "lineStart": 59,
                "lineEnd": 59
            },
            "org.apache.james.protocols.api.ProtocolSession.getRemoteAddress()": {
                "lineStart": 60,
                "lineEnd": 60
            },
            "org.apache.james.protocols.api.ProtocolSession.getLocalAddress()": {
                "lineStart": 61,
                "lineEnd": 61
            },
            "org.apache.james.protocols.api.ProtocolSession.getSessionID()": {
                "lineStart": 62,
                "lineEnd": 62
            },
            "org.apache.james.protocols.api.ProtocolSession.newLineTooLongResponse()": {
                "lineStart": 63,
                "lineEnd": 63
            },
            "org.apache.james.protocols.api.ProtocolSession.newFatalErrorResponse()": {
                "lineStart": 64,
                "lineEnd": 64
            },
            "org.apache.james.protocols.api.ProtocolSession.newCommandNotFoundErrorResponse()": {
                "lineStart": 65,
                "lineEnd": 65
            },
            "org.apache.james.protocols.api.ProtocolSession.getUsername()": {
                "lineStart": 66,
                "lineEnd": 66
            },
            "org.apache.james.protocols.api.ProtocolSession.setUsername(Username username)": {
                "lineStart": 67,
                "lineEnd": 67
            },
            "org.apache.james.protocols.api.ProtocolSession.isStartTLSSupported()": {
                "lineStart": 68,
                "lineEnd": 68
            },
            "org.apache.james.protocols.api.ProtocolSession.isTLSStarted()": {
                "lineStart": 69,
                "lineEnd": 69
            },
            "org.apache.james.protocols.api.ProtocolSession.getConfiguration()": {
                "lineStart": 70,
                "lineEnd": 70
            },
            "org.apache.james.protocols.api.ProtocolSession.getCharset()": {
                "lineStart": 71,
                "lineEnd": 71
            },
            "org.apache.james.protocols.api.ProtocolSession.getLineDelimiter()": {
                "lineStart": 72,
                "lineEnd": 72
            },
            "org.apache.james.protocols.api.ProtocolSession.pushLineHandler(LineHandler<T> overrideCommandHandler)": {
                "lineStart": 72,
                "lineEnd": 72
            },
            "org.apache.james.protocols.api.ProtocolSession.popLineHandler()": {
                "lineStart": 73,
                "lineEnd": 73
            },
            "org.apache.james.protocols.api.ProtocolSession.getPushedLineHandlerCount()": {
                "lineStart": 74,
                "lineEnd": 74
            }
        },
        "d713f64f86-ProtocolSessionImpl.java": {
            "org.apache.james.protocols.api.ProtocolSessionImpl.<init>(ProtocolTransport transport, ProtocolConfiguration config)": {
                "lineStart": 18,
                "lineEnd": 23
            }
        },
        "57ec6392e0-ImapSession.java": {
            "org.apache.james.imap.api.process.ImapSession$SessionId.generate()": {
                "lineStart": 12,
                "lineEnd": 14
            },
            "org.apache.james.imap.api.process.ImapSession$SessionId.<init>(String value)": {
                "lineStart": 17,
                "lineEnd": 19
            },
            "org.apache.james.imap.api.process.ImapSession$SessionId.asString()": {
                "lineStart": 21,
                "lineEnd": 23
            },
            "org.apache.james.imap.api.process.ImapSession$SessionId.equals(Object o)": {
                "lineStart": 25,
                "lineEnd": 32
            },
            "org.apache.james.imap.api.process.ImapSession$SessionId.hashCode()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "org.apache.james.imap.api.process.ImapSession$SessionId.toString()": {
                "lineStart": 38,
                "lineEnd": 40
            },
            "org.apache.james.imap.api.process.ImapSession.sessionId()": {
                "lineStart": 45,
                "lineEnd": 45
            },
            "org.apache.james.imap.api.process.ImapSession.logout()": {
                "lineStart": 46,
                "lineEnd": 46
            },
            "org.apache.james.imap.api.process.ImapSession.getState()": {
                "lineStart": 47,
                "lineEnd": 47
            },
            "org.apache.james.imap.api.process.ImapSession.authenticated()": {
                "lineStart": 48,
                "lineEnd": 48
            },
            "org.apache.james.imap.api.process.ImapSession.selected(SelectedMailbox mailbox)": {
                "lineStart": 49,
                "lineEnd": 49
            },
            "org.apache.james.imap.api.process.ImapSession.deselect()": {
                "lineStart": 50,
                "lineEnd": 50
            },
            "org.apache.james.imap.api.process.ImapSession.getSelected()": {
                "lineStart": 51,
                "lineEnd": 51
            },
            "org.apache.james.imap.api.process.ImapSession.getAttribute(String key)": {
                "lineStart": 52,
                "lineEnd": 52
            },
            "org.apache.james.imap.api.process.ImapSession.setAttribute(String key, Object value)": {
                "lineStart": 53,
                "lineEnd": 53
            },
            "org.apache.james.imap.api.process.ImapSession.startTLS()": {
                "lineStart": 54,
                "lineEnd": 54
            },
            "org.apache.james.imap.api.process.ImapSession.isTLSActive()": {
                "lineStart": 55,
                "lineEnd": 55
            },
            "org.apache.james.imap.api.process.ImapSession.supportStartTLS()": {
                "lineStart": 56,
                "lineEnd": 56
            },
            "org.apache.james.imap.api.process.ImapSession.isCompressionActive()": {
                "lineStart": 57,
                "lineEnd": 57
            },
            "org.apache.james.imap.api.process.ImapSession.isCompressionSupported()": {
                "lineStart": 58,
                "lineEnd": 58
            },
            "org.apache.james.imap.api.process.ImapSession.startCompression()": {
                "lineStart": 59,
                "lineEnd": 59
            },
            "org.apache.james.imap.api.process.ImapSession.pushLineHandler(ImapLineHandler lineHandler)": {
                "lineStart": 60,
                "lineEnd": 60
            },
            "org.apache.james.imap.api.process.ImapSession.popLineHandler()": {
                "lineStart": 61,
                "lineEnd": 61
            },
            "org.apache.james.imap.api.process.ImapSession.supportMultipleNamespaces()": {
                "lineStart": 62,
                "lineEnd": 62
            },
            "org.apache.james.imap.api.process.ImapSession.isPlainAuthDisallowed()": {
                "lineStart": 63,
                "lineEnd": 63
            },
            "org.apache.james.imap.api.process.ImapSession.setMailboxSession(MailboxSession mailboxSession)": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "org.apache.james.imap.api.process.ImapSession.getMailboxSession()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "org.apache.james.imap.api.process.ImapSession.getUserName()": {
                "lineStart": 72,
                "lineEnd": 74
            }
        },
        "e2c375e31b-FakeImapSession.java": {
            "org.apache.james.imap.encode.FakeImapSession.<init>()": {
                "lineStart": 13,
                "lineEnd": 16
            },
            "org.apache.james.imap.encode.FakeImapSession.sessionId()": {
                "lineStart": 18,
                "lineEnd": 20
            },
            "org.apache.james.imap.encode.FakeImapSession.logout()": {
                "lineStart": 22,
                "lineEnd": 25
            },
            "org.apache.james.imap.encode.FakeImapSession.authenticated()": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "org.apache.james.imap.encode.FakeImapSession.deselect()": {
                "lineStart": 31,
                "lineEnd": 34
            },
            "org.apache.james.imap.encode.FakeImapSession.selected(SelectedMailbox mailbox)": {
                "lineStart": 36,
                "lineEnd": 40
            },
            "org.apache.james.imap.encode.FakeImapSession.getSelected()": {
                "lineStart": 42,
                "lineEnd": 44
            },
            "org.apache.james.imap.encode.FakeImapSession.getState()": {
                "lineStart": 46,
                "lineEnd": 48
            },
            "org.apache.james.imap.encode.FakeImapSession.closeMailbox()": {
                "lineStart": 50,
                "lineEnd": 56
            },
            "org.apache.james.imap.encode.FakeImapSession.getAttribute(String key)": {
                "lineStart": 58,
                "lineEnd": 60
            },
            "org.apache.james.imap.encode.FakeImapSession.setAttribute(String key, Object value)": {
                "lineStart": 62,
                "lineEnd": 70
            },
            "org.apache.james.imap.encode.FakeImapSession.startTLS()": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "org.apache.james.imap.encode.FakeImapSession.supportStartTLS()": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "org.apache.james.imap.encode.FakeImapSession.isCompressionSupported()": {
                "lineStart": 80,
                "lineEnd": 82
            },
            "org.apache.james.imap.encode.FakeImapSession.startCompression()": {
                "lineStart": 84,
                "lineEnd": 86
            },
            "org.apache.james.imap.encode.FakeImapSession.pushLineHandler(ImapLineHandler lineHandler)": {
                "lineStart": 88,
                "lineEnd": 89
            },
            "org.apache.james.imap.encode.FakeImapSession.popLineHandler()": {
                "lineStart": 91,
                "lineEnd": 92
            },
            "org.apache.james.imap.encode.FakeImapSession.isPlainAuthDisallowed()": {
                "lineStart": 94,
                "lineEnd": 96
            },
            "org.apache.james.imap.encode.FakeImapSession.isTLSActive()": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "org.apache.james.imap.encode.FakeImapSession.supportMultipleNamespaces()": {
                "lineStart": 102,
                "lineEnd": 104
            },
            "org.apache.james.imap.encode.FakeImapSession.isCompressionActive()": {
                "lineStart": 106,
                "lineEnd": 108
            }
        },
        "c693f1faf9-AbstractAuthProcessor.java": {
            "org.apache.james.imap.processor.AbstractAuthProcessor.doAuth(AuthenticationAttempt authenticationAttempt, ImapSession session, ImapRequest request, Responder responder, HumanReadableText failed)": {
                "lineStart": 32,
                "lineEnd": 65
            }
        },
        "4b9cc56819-AppendProcessor.java": {
            "org.apache.james.imap.processor.AppendProcessor.processRequest(AppendRequest request, ImapSession session, Responder responder)": {
                "lineStart": 34,
                "lineEnd": 52
            }
        },
        "067d397619-AuthenticateProcessor.java": {
            "org.apache.james.imap.processor.AuthenticateProcessor.doPlainAuth(String initialClientResponse, ImapSession session, ImapRequest request, Responder responder)": {
                "lineStart": 63,
                "lineEnd": 72
            }
        },
        "1167750e4c-SMTPSession.java": {
            "org.apache.james.protocols.smtp.SMTPSession.getConfiguration()": {
                "lineStart": 12,
                "lineEnd": 13
            },
            "org.apache.james.protocols.smtp.SMTPSession.isRelayingAllowed()": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.apache.james.protocols.smtp.SMTPSession.needsCommandInjectionDetection()": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.apache.james.protocols.smtp.SMTPSession.startDetectingCommadInjection()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.apache.james.protocols.smtp.SMTPSession.stopDetectingCommandInjection()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.apache.james.protocols.smtp.SMTPSession.setRelayingAllowed(boolean relayingAllowed)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.apache.james.protocols.smtp.SMTPSession.isAuthSupported()": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "org.apache.james.protocols.smtp.SMTPSession.getRcptCount()": {
                "lineStart": 20,
                "lineEnd": 20
            }
        },
        "86a70db6e0-SMTPSessionImpl.java": {
            "org.apache.james.protocols.smtp.SMTPSessionImpl.needsCommandInjectionDetection()": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.apache.james.protocols.smtp.SMTPSessionImpl.startDetectingCommadInjection()": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "org.apache.james.protocols.smtp.SMTPSessionImpl.stopDetectingCommandInjection()": {
                "lineStart": 27,
                "lineEnd": 29
            }
        },
        "ea5d6701ab-NettyImapSession.java": {
            "org.apache.james.imapserver.netty.NettyImapSession.<init>(Channel channel, SSLContext sslContext, String[] enabledCipherSuites, boolean compress, boolean plainAuthDisallowed, SessionId sessionId)": {
                "lineStart": 25,
                "lineEnd": 32
            }
        },
        "b05cdc68be-SwitchableLineBasedFrameDecoder.java": {
            "org.apache.james.imapserver.netty.SwitchableLineBasedFrameDecoder.<init>(int maxFrameLength, boolean stripDelimiter)": {
                "lineStart": 10,
                "lineEnd": 12
            }
        },
        "9c5f5d4a09-SwitchableLineBasedFrameDecoderFactory.java": {
            "org.apache.james.imapserver.netty.SwitchableLineBasedFrameDecoderFactory.create(ChannelPipeline pipeline)": {
                "lineStart": 11,
                "lineEnd": 13
            }
        },
        "8d89aa2cdc-ManageSieveServer.java": {
            "org.apache.james.managesieveserver.netty.ManageSieveServer.createFrameHandlerFactory()": {
                "lineStart": 95,
                "lineEnd": 97
            }
        },
        "4569f67731-PassCmdHandler.java": {
            "org.apache.james.pop3server.core.PassCmdHandler.auth(POP3Session session, String password)": {
                "lineStart": 51,
                "lineEnd": 80
            }
        },
        "bd235ec670-POP3Server.java": {
            "org.apache.james.pop3server.netty.POP3Server.createFrameHandlerFactory()": {
                "lineStart": 62,
                "lineEnd": 64
            }
        },
        "bda14598ce-SMTPServer.java": {
            "org.apache.james.smtpserver.netty.SMTPServer.createFrameHandlerFactory()": {
                "lineStart": 232,
                "lineEnd": 234
            }
        }
    },
    "CVE-2023-40314": {
        "b5a67866fef-Bootstrap.java": {
            "org.opennms.web.utils.Bootstrap.<init>(final PageContext pageContext)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.opennms.web.utils.Bootstrap.eval(final PageContext pageContext, final String attr, final String expr)": {
                "lineStart": 23,
                "lineEnd": 31
            },
            "org.opennms.web.utils.Bootstrap.build(final HttpServletRequest request)": {
                "lineStart": 33,
                "lineEnd": 39
            },
            "org.opennms.web.utils.Bootstrap.headTitle(final String headTitle)": {
                "lineStart": 41,
                "lineEnd": 44
            },
            "org.opennms.web.utils.Bootstrap.breadcrumb(final Breadcrumb entry)": {
                "lineStart": 46,
                "lineEnd": 49
            },
            "org.opennms.web.utils.Bootstrap.breadcrumb(final String title)": {
                "lineStart": 51,
                "lineEnd": 54
            },
            "org.opennms.web.utils.Bootstrap.breadcrumb(final String title, final String link)": {
                "lineStart": 56,
                "lineEnd": 59
            },
            "org.opennms.web.utils.Bootstrap.scrollSpy(final String scrollSpy)": {
                "lineStart": 61,
                "lineEnd": 64
            },
            "org.opennms.web.utils.Bootstrap.ngApp(final String ngApp)": {
                "lineStart": 66,
                "lineEnd": 69
            },
            "org.opennms.web.utils.Bootstrap.flags(final String... flags)": {
                "lineStart": 71,
                "lineEnd": 74
            },
            "org.opennms.web.utils.Bootstrap$Breadcrumb.<init>(final String title)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "org.opennms.web.utils.Bootstrap$Breadcrumb.<init>(final String title, final String link)": {
                "lineStart": 83,
                "lineEnd": 86
            },
            "org.opennms.web.utils.Bootstrap$Breadcrumb.withLink(final String link)": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "org.opennms.web.utils.Bootstrap$Breadcrumb.getTitle()": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "org.opennms.web.utils.Bootstrap$Breadcrumb.getLink()": {
                "lineStart": 96,
                "lineEnd": 98
            },
            "org.opennms.web.utils.Bootstrap.with(final PageContext pageContext)": {
                "lineStart": 102,
                "lineEnd": 104
            }
        }
    },
    "CVE-2023-0871": {
        "13f5fab2f61-JaxbUtils.java": {
            "org.opennms.core.xml.JaxbUtils.getXMLFilterForClass(final Class<T> clazz, boolean disableDOCTYPE)": {
                "lineStart": 280,
                "lineEnd": 294
            }
        }
    },
    "CVE-2023-37910": {
        "72099290aba-MoveAttachmentJob.java": {
            "org.xwiki.attachment.internal.refactoring.job.MoveAttachmentJob.process(EntityReference source)": {
                "lineStart": 43,
                "lineEnd": 61
            }
        }
    },
    "CVE-2023-51074": {
        "efb5913-PathCompiler.java": {
            "com.jayway.jsonpath.internal.path.PathCompiler.parseFunctionParameters(String funcName)": {
                "lineStart": 256,
                "lineEnd": 320
            }
        }
    },
    "CVE-2020-2315": {
        "e48add3-StoreChangeLogParser.java": {
            "org.jenkinsci.plugins.visualworks_store.StoreChangeLogParser.parse(AbstractBuild build, File file)": {
                "lineStart": 19,
                "lineEnd": 50
            }
        }
    },
    "CVE-2023-28936": {
        "0ad2a752b-AppointmentDao.java": {
            "org.apache.openmeetings.db.dao.calendar.AppointmentDao.get(Long id)": {
                "lineStart": 41,
                "lineEnd": 44
            },
            "org.apache.openmeetings.db.dao.calendar.AppointmentDao.getAny(Long id)": {
                "lineStart": 46,
                "lineEnd": 49
            }
        },
        "56569cd94-MeetingMemberDao.java": {
            "org.apache.openmeetings.db.dao.calendar.MeetingMemberDao.get(Long id)": {
                "lineStart": 15,
                "lineEnd": 18
            }
        },
        "48fe917b5-OmCalendarDao.java": {
            "org.apache.openmeetings.db.dao.calendar.OmCalendarDao.get(Long calId)": {
                "lineStart": 20,
                "lineEnd": 23
            }
        },
        "ad97f20eb-FileItemDao.java": {
            "org.apache.openmeetings.db.dao.file.FileItemDao.get(String externalId, String externalType)": {
                "lineStart": 63,
                "lineEnd": 67
            }
        },
        "bd24a8d0a-RecordingChunkDao.java": {
            "org.apache.openmeetings.db.dao.record.RecordingChunkDao.get(Long id)": {
                "lineStart": 19,
                "lineEnd": 22
            }
        },
        "7c7aa4972-InvitationDao.java": {
            "org.apache.openmeetings.db.dao.room.InvitationDao.get(Long invId)": {
                "lineStart": 34,
                "lineEnd": 37
            },
            "org.apache.openmeetings.db.dao.room.InvitationDao.getByHash(String hash, boolean hidePass)": {
                "lineStart": 123,
                "lineEnd": 161
            }
        },
        "0210e27bb-PollDao.java": {
            "org.apache.openmeetings.db.dao.room.PollDao.getByRoom(Long roomId)": {
                "lineStart": 64,
                "lineEnd": 68
            }
        },
        "91cb12e1e-LdapConfigDao.java": {
            "org.apache.openmeetings.db.dao.server.LdapConfigDao.get(Long id)": {
                "lineStart": 24,
                "lineEnd": 27
            }
        },
        "a81d76bea-OAuth2Dao.java": {
            "org.apache.openmeetings.db.dao.server.OAuth2Dao.getActive()": {
                "lineStart": 21,
                "lineEnd": 28
            },
            "org.apache.openmeetings.db.dao.server.OAuth2Dao.get(Long id)": {
                "lineStart": 30,
                "lineEnd": 33
            },
            "org.apache.openmeetings.db.dao.server.OAuth2Dao.count()": {
                "lineStart": 43,
                "lineEnd": 46
            }
        },
        "899684315-SOAPLoginDao.java": {
            "org.apache.openmeetings.db.dao.server.SOAPLoginDao.get(String hash)": {
                "lineStart": 43,
                "lineEnd": 71
            }
        },
        "273672f77-GroupDao.java": {
            "org.apache.openmeetings.db.dao.user.GroupDao.get(Long id)": {
                "lineStart": 23,
                "lineEnd": 26
            }
        },
        "51a3e3d60-PrivateMessageDao.java": {
            "org.apache.openmeetings.db.dao.user.PrivateMessageDao.get(Long id)": {
                "lineStart": 53,
                "lineEnd": 56
            }
        },
        "08fca325a-PrivateMessageFolderDao.java": {
            "org.apache.openmeetings.db.dao.user.PrivateMessageFolderDao.get(Long id)": {
                "lineStart": 40,
                "lineEnd": 44
            }
        },
        "5fdbdde1e-UserContactDao.java": {
            "org.apache.openmeetings.db.dao.user.UserContactDao.get(Long userId, Long ownerId)": {
                "lineStart": 45,
                "lineEnd": 49
            },
            "org.apache.openmeetings.db.dao.user.UserContactDao.get(Long id)": {
                "lineStart": 74,
                "lineEnd": 77
            }
        },
        "9c6d96509-DaoHelper.java": {
            "org.apache.openmeetings.db.util.DaoHelper.<init>()": {
                "lineStart": 26,
                "lineEnd": 26
            },
            "org.apache.openmeetings.db.util.DaoHelper.getStringParam(String param)": {
                "lineStart": 27,
                "lineEnd": 29
            },
            "org.apache.openmeetings.db.util.DaoHelper.count(EntityManager em, Class<T> clazz, String search, List<String> searchFields, boolean noDeleted, BiFunction<CriteriaBuilder, CriteriaQuery<?>, Predicate> filter)": {
                "lineStart": 31,
                "lineEnd": 33
            },
            "org.apache.openmeetings.db.util.DaoHelper.count(EntityManager em, Class<T> clazz, BiFunction<CriteriaBuilder, Root<T>, Expression<Long>> queuePath, String search, List<String> searchFields, boolean noDeleted, BiFunction<CriteriaBuilder, CriteriaQuery<?>, Predicate> filter)": {
                "lineStart": 35,
                "lineEnd": 38
            },
            "org.apache.openmeetings.db.util.DaoHelper.get(EntityManager em, Class<T> clazz, boolean distinct, String search, List<String> searchFields, boolean noDeleted, BiFunction<CriteriaBuilder, CriteriaQuery<?>, Predicate> filter, SortParam<String> sort, long start, long count)": {
                "lineStart": 40,
                "lineEnd": 42
            },
            "org.apache.openmeetings.db.util.DaoHelper.get(EntityManager em, Class<R> rootClazz, Class<T> clazz, BiFunction<CriteriaBuilder, Root<R>, Expression<T>> queuePath, boolean distinct, String search, List<String> searchFields, boolean noDeleted, BiFunction<CriteriaBuilder, CriteriaQuery<?>, Predicate> filter, SortParam<String> sort, long start, long count)": {
                "lineStart": 44,
                "lineEnd": 47
            },
            "org.apache.openmeetings.db.util.DaoHelper.query(EntityManager em, Class<R> rootClazz, Class<T> clazz, BiFunction<CriteriaBuilder, Root<R>, Expression<T>> queuePath, boolean distinct, String search, List<String> searchFields, boolean noDeleted, BiFunction<CriteriaBuilder, CriteriaQuery<?>, Predicate> filter, SortParam<String> sort)": {
                "lineStart": 49,
                "lineEnd": 61
            },
            "org.apache.openmeetings.db.util.DaoHelper.search(String search, List<String> searchFields, boolean noDeleted, BiFunction<CriteriaBuilder, CriteriaQuery<?>, Predicate> filter, CriteriaBuilder builder, Root<T> root, CriteriaQuery<Q> query)": {
                "lineStart": 63,
                "lineEnd": 79
            },
            "org.apache.openmeetings.db.util.DaoHelper.like(String col, String searchItem, CriteriaBuilder builder, Path<T> root)": {
                "lineStart": 81,
                "lineEnd": 89
            },
            "org.apache.openmeetings.db.util.DaoHelper.sort(SortParam<String> sort, CriteriaBuilder builder, Root<T> root, CriteriaQuery<Q> query)": {
                "lineStart": 91,
                "lineEnd": 96
            },
            "org.apache.openmeetings.db.util.DaoHelper.setLimits(TypedQuery<T> q, Long first, Long max)": {
                "lineStart": 98,
                "lineEnd": 108
            },
            "org.apache.openmeetings.db.util.DaoHelper.fillLazy(EntityManager em, Function<OpenJPAEntityManager, TypedQuery<T>> func, String... groups)": {
                "lineStart": 110,
                "lineEnd": 125
            },
            "org.apache.openmeetings.db.util.DaoHelper.single(List<T> l)": {
                "lineStart": 127,
                "lineEnd": 129
            },
            "org.apache.openmeetings.db.util.DaoHelper.getRoot(CriteriaQuery<?> query, Class<T> clazz)": {
                "lineStart": 131,
                "lineEnd": 133
            },
            "org.apache.openmeetings.db.util.DaoHelper.groupAdminQuery(Long userId, CriteriaBuilder builder, AbstractQuery<?> parentQ)": {
                "lineStart": 135,
                "lineEnd": 141
            }
        },
        "35642ec34-IcalHandler.java": {
            "org.apache.openmeetings.util.mail.IcalHandler.addAttendee(String email, String display, boolean chair)": {
                "lineStart": 115,
                "lineEnd": 127
            }
        }
    },
    "CVE-2022-26597": {
        "050afc7beee71-OpenGraphTopHeadDynamicInclude.java": {
            "com.liferay.layout.seo.web.internal.servlet.taglib.OpenGraphTopHeadDynamicInclude._getOpenGraphTag(String property, String content)": {
                "lineStart": 219,
                "lineEnd": 225
            }
        }
    },
    "CVE-2024-31862": {
        "2e9803183-NotebookService.java": {
            "org.apache.zeppelin.service.NotebookService.<init>(Notebook notebook, AuthorizationService authorizationService, ZeppelinConfiguration zeppelinConfiguration, SchedulerService schedulerService)": {
                "lineStart": 54,
                "lineEnd": 59
            },
            "org.apache.zeppelin.service.NotebookService.getHomeNote(ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 61,
                "lineEnd": 80
            },
            "org.apache.zeppelin.service.NotebookService.getNote(String noteId, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "org.apache.zeppelin.service.NotebookService.getNote(String noteId, boolean reload, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 86,
                "lineEnd": 111
            },
            "org.apache.zeppelin.service.NotebookService.getNoteByPath(String notePath, boolean reload, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 113,
                "lineEnd": 123
            },
            "org.apache.zeppelin.service.NotebookService.createNote(String notePath, String defaultInterpreterGroup, boolean addingEmptyParagraph, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 125,
                "lineEnd": 150
            },
            "org.apache.zeppelin.service.NotebookService.normalizeNotePath(String notePath)": {
                "lineStart": 152,
                "lineEnd": 172
            },
            "org.apache.zeppelin.service.NotebookService.removeNote(String noteId, ServiceContext context, ServiceCallback<String> callback)": {
                "lineStart": 174,
                "lineEnd": 194
            },
            "org.apache.zeppelin.service.NotebookService.listNotesInfo(boolean needsReload, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 196,
                "lineEnd": 210
            },
            "org.apache.zeppelin.service.NotebookService.renameNote(String noteId, String newNotePath, boolean isRelative, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 212,
                "lineEnd": 246
            },
            "org.apache.zeppelin.service.NotebookService.cloneNote(String noteId, String newNotePath, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 248,
                "lineEnd": 250
            },
            "org.apache.zeppelin.service.NotebookService.cloneNote(String noteId, String revisionId, String newNotePath, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 252,
                "lineEnd": 275
            },
            "org.apache.zeppelin.service.NotebookService.importNote(String notePath, String noteJson, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 277,
                "lineEnd": 292
            },
            "org.apache.zeppelin.service.NotebookService.runParagraph(Note note, String paragraphId, String title, String text, Map<String, Object> params, Map<String, Object> config, String sessionId, boolean failIfDisabled, boolean blocking, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 294,
                "lineEnd": 354
            },
            "org.apache.zeppelin.service.NotebookService.runAllParagraphs(String noteId, List<Map<String, Object>> paragraphs, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 356,
                "lineEnd": 425
            },
            "org.apache.zeppelin.service.NotebookService.cancelParagraph(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 427,
                "lineEnd": 448
            },
            "org.apache.zeppelin.service.NotebookService.moveParagraph(String noteId, String paragraphId, int newIndex, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 450,
                "lineEnd": 476
            },
            "org.apache.zeppelin.service.NotebookService.removeParagraph(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 478,
                "lineEnd": 499
            },
            "org.apache.zeppelin.service.NotebookService.insertParagraph(String noteId, int index, Map<String, Object> config, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 501,
                "lineEnd": 519
            },
            "org.apache.zeppelin.service.NotebookService.restoreNote(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 521,
                "lineEnd": 550
            },
            "org.apache.zeppelin.service.NotebookService.restoreFolder(String folderPath, ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 552,
                "lineEnd": 567
            },
            "org.apache.zeppelin.service.NotebookService.restoreAll(ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 569,
                "lineEnd": 578
            },
            "org.apache.zeppelin.service.NotebookService.updateParagraph(String noteId, String paragraphId, String title, String text, Map<String, Object> params, Map<String, Object> config, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 580,
                "lineEnd": 615
            },
            "org.apache.zeppelin.service.NotebookService.getNextSessionParagraphId(String noteId, int maxParagraph, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 617,
                "lineEnd": 652
            },
            "org.apache.zeppelin.service.NotebookService.clearParagraphOutput(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 654,
                "lineEnd": 685
            },
            "org.apache.zeppelin.service.NotebookService.clearAllParagraphOutput(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 687,
                "lineEnd": 705
            },
            "org.apache.zeppelin.service.NotebookService.updateNote(String noteId, String name, Map<String, Object> config, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 707,
                "lineEnd": 738
            },
            "org.apache.zeppelin.service.NotebookService.isCronUpdated(Map<String, Object> configA, Map<String, Object> configB)": {
                "lineStart": 740,
                "lineEnd": 750
            },
            "org.apache.zeppelin.service.NotebookService.saveNoteForms(String noteId, Map<String, Object> noteParams, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 752,
                "lineEnd": 770
            },
            "org.apache.zeppelin.service.NotebookService.removeNoteForms(String noteId, String formName, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 772,
                "lineEnd": 791
            },
            "org.apache.zeppelin.service.NotebookService.checkpointNote(String noteId, String commitMessage, ServiceContext context, ServiceCallback<NotebookRepoWithVersionControl.Revision> callback)": {
                "lineStart": 793,
                "lineEnd": 810
            },
            "org.apache.zeppelin.service.NotebookService.listRevisionHistory(String noteId, ServiceContext context, ServiceCallback<List<NotebookRepoWithVersionControl.Revision>> callback)": {
                "lineStart": 812,
                "lineEnd": 825
            },
            "org.apache.zeppelin.service.NotebookService.setNoteRevision(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 827,
                "lineEnd": 850
            },
            "org.apache.zeppelin.service.NotebookService.getNotebyRevision(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 852,
                "lineEnd": 869
            },
            "org.apache.zeppelin.service.NotebookService.getNoteByRevisionForCompare(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 871,
                "lineEnd": 895
            },
            "org.apache.zeppelin.service.NotebookService.completion(String noteId, String paragraphId, String buffer, int cursor, ServiceContext context, ServiceCallback<List<InterpreterCompletion>> callback)": {
                "lineStart": 897,
                "lineEnd": 921
            },
            "org.apache.zeppelin.service.NotebookService.getEditorSetting(String noteId, String paragraphText, ServiceContext context, ServiceCallback<Map<String, Object>> callback)": {
                "lineStart": 923,
                "lineEnd": 941
            },
            "org.apache.zeppelin.service.NotebookService.updatePersonalizedMode(String noteId, boolean isPersonalized, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 943,
                "lineEnd": 961
            },
            "org.apache.zeppelin.service.NotebookService.moveNoteToTrash(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 963,
                "lineEnd": 993
            },
            "org.apache.zeppelin.service.NotebookService.moveFolderToTrash(String folderPath, ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 995,
                "lineEnd": 1004
            },
            "org.apache.zeppelin.service.NotebookService.emptyTrash(ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 1006,
                "lineEnd": 1015
            },
            "org.apache.zeppelin.service.NotebookService.removeFolder(String folderPath, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 1017,
                "lineEnd": 1029
            },
            "org.apache.zeppelin.service.NotebookService.renameFolder(String folderPath, String newFolderPath, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 1031,
                "lineEnd": 1043
            },
            "org.apache.zeppelin.service.NotebookService.spell(String noteId, Message message, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 1045,
                "lineEnd": 1095
            },
            "org.apache.zeppelin.service.NotebookService.addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p)": {
                "lineStart": 1097,
                "lineEnd": 1103
            },
            "org.apache.zeppelin.service.NotebookService.setParagraphUsingMessage(Note note, Message fromMessage, String paragraphId, String text, String title, Map<String, Object> params, Map<String, Object> config)": {
                "lineStart": 1105,
                "lineEnd": 1123
            },
            "org.apache.zeppelin.service.NotebookService.updateAngularObject(String noteId, String paragraphId, String interpreterGroupId, String varName, Object varValue, ServiceContext context, ServiceCallback<AngularObject> callback)": {
                "lineStart": 1125,
                "lineEnd": 1178
            },
            "org.apache.zeppelin.service.NotebookService.patchParagraph(final String noteId, final String paragraphId, String patchText, ServiceContext context, ServiceCallback<String> callback)": {
                "lineStart": 1180,
                "lineEnd": 1222
            },
            "org.apache.zeppelin.service.NotebookService.checkPermission(String noteId, Permission permission, Message.OP op, ServiceContext context, ServiceCallback<T> callback)": {
                "lineStart": 1226,
                "lineEnd": 1257
            }
        }
    },
    "CVE-2020-17519": {
        "479ea53b913-JobManagerCustomLogHandler.java": {
            "org.apache.flink.runtime.rest.handler.cluster.JobManagerCustomLogHandler.getFile(HandlerRequest<EmptyRequestBody, FileMessageParameters> handlerRequest)": {
                "lineStart": 20,
                "lineEnd": 27
            }
        }
    },
    "CVE-2023-24977": {
        "6363a8ec1-MySQLSinkDTO.java": {
            "org.apache.inlong.manager.pojo.sink.mysql.MySQLSinkDTO.filterSensitive(String url)": {
                "lineStart": 103,
                "lineEnd": 115
            }
        }
    },
    "CVE-2023-40336": {
        "4311efd-AbstractFolder.java": {
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.loadJobTotal()": {
                "lineStart": 112,
                "lineEnd": 119
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.scan(File d, int depth)": {
                "lineStart": 121,
                "lineEnd": 143
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.<init>(ItemGroup parent, String name)": {
                "lineStart": 156,
                "lineEnd": 158
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.init()": {
                "lineStart": 160,
                "lineEnd": 231
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.newDefaultViewsTabBar()": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.newFolderViewHolder()": {
                "lineStart": 237,
                "lineEnd": 247
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.newDefaultFolderIcon()": {
                "lineStart": 249,
                "lineEnd": 251
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.initViews(List<View> views)": {
                "lineStart": 253,
                "lineEnd": 256
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.loadChildren(AbstractFolder<V> parent, File modulesDir, Function1<? extends K, ? super V> key)": {
                "lineStart": 258,
                "lineEnd": 470
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.itemsPut(String name, I item)": {
                "lineStart": 472,
                "lineEnd": 503
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onLoad(ItemGroup<? extends Item> parent, String name)": {
                "lineStart": 505,
                "lineEnd": 556
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.childNameGenerator()": {
                "lineStart": 558,
                "lineEnd": 560
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getDescriptor()": {
                "lineStart": 562,
                "lineEnd": 564
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getProperties()": {
                "lineStart": 566,
                "lineEnd": 568
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.addProperty(AbstractFolderProperty p)": {
                "lineStart": 570,
                "lineEnd": 577
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getJobsDir()": {
                "lineStart": 579,
                "lineEnd": 581
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getRootDirFor(String name)": {
                "lineStart": 583,
                "lineEnd": 585
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getRootDirFor(I child)": {
                "lineStart": 587,
                "lineEnd": 599
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getUrlChildPrefix()": {
                "lineStart": 601,
                "lineEnd": 603
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getJob(String name)": {
                "lineStart": 605,
                "lineEnd": 607
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getPronoun()": {
                "lineStart": 609,
                "lineEnd": 611
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getOverrides()": {
                "lineStart": 613,
                "lineEnd": 620
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.addView(View v)": {
                "lineStart": 622,
                "lineEnd": 624
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.canDelete(View view)": {
                "lineStart": 626,
                "lineEnd": 628
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.deleteView(View view)": {
                "lineStart": 630,
                "lineEnd": 632
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getView(String name)": {
                "lineStart": 634,
                "lineEnd": 636
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getViews()": {
                "lineStart": 638,
                "lineEnd": 640
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getFolderViews()": {
                "lineStart": 642,
                "lineEnd": 644
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.resetFolderViews()": {
                "lineStart": 646,
                "lineEnd": 648
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getPrimaryView()": {
                "lineStart": 650,
                "lineEnd": 652
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.setPrimaryView(View v)": {
                "lineStart": 654,
                "lineEnd": 659
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onViewRenamed(View view, String oldName, String newName)": {
                "lineStart": 661,
                "lineEnd": 663
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getViewsTabBar()": {
                "lineStart": 665,
                "lineEnd": 667
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItemGroup()": {
                "lineStart": 669,
                "lineEnd": 671
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getViewActions()": {
                "lineStart": 673,
                "lineEnd": 675
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getStaplerFallback()": {
                "lineStart": 677,
                "lineEnd": 679
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.makeSearchIndex()": {
                "lineStart": 681,
                "lineEnd": 702
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doChildrenContextMenu(StaplerRequest request, StaplerResponse response)": {
                "lineStart": 704,
                "lineEnd": 711
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doCreateView(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 713,
                "lineEnd": 716
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doViewExistsCheck(@QueryParameter String value)": {
                "lineStart": 718,
                "lineEnd": 732
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getBuildHealth()": {
                "lineStart": 734,
                "lineEnd": 737
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.invalidateBuildHealthReports()": {
                "lineStart": 739,
                "lineEnd": 741
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getBuildHealthReports()": {
                "lineStart": 743,
                "lineEnd": 835
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getHealthMetrics()": {
                "lineStart": 837,
                "lineEnd": 839
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doLastBuild(StaplerRequest req)": {
                "lineStart": 841,
                "lineEnd": 843
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getIcon()": {
                "lineStart": 845,
                "lineEnd": 847
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.setIcon(FolderIcon icon)": {
                "lineStart": 849,
                "lineEnd": 852
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getIconColor()": {
                "lineStart": 854,
                "lineEnd": 856
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getAllJobs()": {
                "lineStart": 858,
                "lineEnd": 865
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItems()": {
                "lineStart": 867,
                "lineEnd": 869
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItems(Predicate<I> pred)": {
                "lineStart": 871,
                "lineEnd": 881
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.hasVisibleItems()": {
                "lineStart": 883,
                "lineEnd": 892
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getItem(String name)": {
                "lineStart": 894,
                "lineEnd": 913
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onRenamed(I item, String oldName, String newName)": {
                "lineStart": 915,
                "lineEnd": 923
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.onDeleted(I item)": {
                "lineStart": 925,
                "lineEnd": 933
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.delete()": {
                "lineStart": 935,
                "lineEnd": 1055
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.isDisabled()": {
                "lineStart": 1057,
                "lineEnd": 1059
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.setDisabled(boolean disabled)": {
                "lineStart": 1061,
                "lineEnd": 1063
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.supportsMakeDisabled()": {
                "lineStart": 1065,
                "lineEnd": 1067
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.makeDisabled(boolean disabled)": {
                "lineStart": 1069,
                "lineEnd": 1085
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doDisable()": {
                "lineStart": 1087,
                "lineEnd": 1091
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doEnable()": {
                "lineStart": 1093,
                "lineEnd": 1097
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.save()": {
                "lineStart": 1099,
                "lineEnd": 1110
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.renameTo(String newName)": {
                "lineStart": 1112,
                "lineEnd": 1114
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doSubmitDescription(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 1116,
                "lineEnd": 1118
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.doConfigSubmit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 1120,
                "lineEnd": 1159
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.getSuccessfulDestination()": {
                "lineStart": 1161,
                "lineEnd": 1163
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.submit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 1165,
                "lineEnd": 1165
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.isNameEditable()": {
                "lineStart": 1166,
                "lineEnd": 1168
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.checkRename(String newName)": {
                "lineStart": 1170,
                "lineEnd": 1183
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.renameBlocker()": {
                "lineStart": 1185,
                "lineEnd": 1187
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder.invalidateBuildHealthReports(Item item)": {
                "lineStart": 1189,
                "lineEnd": 1204
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onCreated(Item item)": {
                "lineStart": 1207,
                "lineEnd": 1209
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onCopied(Item src, Item item)": {
                "lineStart": 1211,
                "lineEnd": 1213
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onDeleted(Item item)": {
                "lineStart": 1215,
                "lineEnd": 1217
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onRenamed(Item item, String oldName, String newName)": {
                "lineStart": 1219,
                "lineEnd": 1221
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onLocationChanged(Item item, String oldFullName, String newFullName)": {
                "lineStart": 1223,
                "lineEnd": 1225
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$ItemListenerImpl.onUpdated(Item item)": {
                "lineStart": 1227,
                "lineEnd": 1229
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onCompleted(Run run, @NonNull TaskListener listener)": {
                "lineStart": 1234,
                "lineEnd": 1236
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onFinalized(Run run)": {
                "lineStart": 1238,
                "lineEnd": 1240
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onStarted(Run run, TaskListener listener)": {
                "lineStart": 1242,
                "lineEnd": 1244
            },
            "com.cloudbees.hudson.plugins.folder.AbstractFolder$RunListenerImpl.onDeleted(Run run)": {
                "lineStart": 1246,
                "lineEnd": 1248
            }
        },
        "64493e3-Folder.java": {
            "com.cloudbees.hudson.plugins.folder.Folder.<init>(ItemGroup parent, String name)": {
                "lineStart": 45,
                "lineEnd": 48
            },
            "com.cloudbees.hudson.plugins.folder.Folder.onLoad(ItemGroup<? extends Item> parent, String name)": {
                "lineStart": 50,
                "lineEnd": 53
            },
            "com.cloudbees.hudson.plugins.folder.Folder.init()": {
                "lineStart": 55,
                "lineEnd": 58
            },
            "com.cloudbees.hudson.plugins.folder.Folder.initViews(List<View> views)": {
                "lineStart": 60,
                "lineEnd": 81
            },
            "com.cloudbees.hudson.plugins.folder.Folder.onCreatedFromScratch()": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DeprecatedTransientActions.type()": {
                "lineStart": 88,
                "lineEnd": 90
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DeprecatedTransientActions.createFor(Folder target)": {
                "lineStart": 92,
                "lineEnd": 94
            },
            "com.cloudbees.hudson.plugins.folder.Folder.updateTransientActions()": {
                "lineStart": 98,
                "lineEnd": 100
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createTransientActions()": {
                "lineStart": 102,
                "lineEnd": 113
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getNewPronoun()": {
                "lineStart": 115,
                "lineEnd": 117
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getColumns()": {
                "lineStart": 119,
                "lineEnd": 121
            },
            "com.cloudbees.hudson.plugins.folder.Folder.addProperty(FolderProperty<?> p)": {
                "lineStart": 123,
                "lineEnd": 125
            },
            "com.cloudbees.hudson.plugins.folder.Folder.onCopiedFrom(Item _src)": {
                "lineStart": 127,
                "lineEnd": 139
            },
            "com.cloudbees.hudson.plugins.folder.Folder.doCreateItem(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 141,
                "lineEnd": 155
            },
            "com.cloudbees.hudson.plugins.folder.Folder.copy(T src, String name)": {
                "lineStart": 157,
                "lineEnd": 163
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProjectFromXML(String name, InputStream xml)": {
                "lineStart": 165,
                "lineEnd": 179
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProject(Class<T> type, String name)": {
                "lineStart": 181,
                "lineEnd": 183
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProject(TopLevelItemDescriptor type, String name)": {
                "lineStart": 185,
                "lineEnd": 187
            },
            "com.cloudbees.hudson.plugins.folder.Folder.createProject(TopLevelItemDescriptor type, String name, boolean notify)": {
                "lineStart": 189,
                "lineEnd": 195
            },
            "com.cloudbees.hudson.plugins.folder.Folder.submit(StaplerRequest req, StaplerResponse rsp)": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getItemDescriptors()": {
                "lineStart": 201,
                "lineEnd": 211
            },
            "com.cloudbees.hudson.plugins.folder.Folder.isAllowedChildDescriptor(TopLevelItemDescriptor tid)": {
                "lineStart": 213,
                "lineEnd": 226
            },
            "com.cloudbees.hudson.plugins.folder.Folder.isAllowedChild(TopLevelItem tid)": {
                "lineStart": 228,
                "lineEnd": 237
            },
            "com.cloudbees.hudson.plugins.folder.Folder.getDescriptor()": {
                "lineStart": 239,
                "lineEnd": 241
            },
            "com.cloudbees.hudson.plugins.folder.Folder.canAdd(TopLevelItem item)": {
                "lineStart": 243,
                "lineEnd": 245
            },
            "com.cloudbees.hudson.plugins.folder.Folder.add(I item, String name)": {
                "lineStart": 247,
                "lineEnd": 258
            },
            "com.cloudbees.hudson.plugins.folder.Folder.remove(TopLevelItem item)": {
                "lineStart": 260,
                "lineEnd": 262
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DescriptorImpl.getDescription()": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "com.cloudbees.hudson.plugins.folder.Folder$DescriptorImpl.newInstance(ItemGroup parent, String name)": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "com.cloudbees.hudson.plugins.folder.Folder$MixInImpl.<init>(Folder parent)": {
                "lineStart": 291,
                "lineEnd": 293
            },
            "com.cloudbees.hudson.plugins.folder.Folder$MixInImpl.add(TopLevelItem item)": {
                "lineStart": 295,
                "lineEnd": 297
            },
            "com.cloudbees.hudson.plugins.folder.Folder$MixInImpl.getRootDirFor(String name)": {
                "lineStart": 299,
                "lineEnd": 301
            }
        }
    },
    "CVE-2020-1698": {
        "230b7f8c74-HttpMethod.java": {
            "org.keycloak.authorization.client.util.HttpMethod.execute(HttpResponseProcessor<R> responseProcessor)": {
                "lineStart": 51,
                "lineEnd": 84
            }
        }
    },
    "CVE-2021-21625": {
        "4538c1d-AWSCredentialsHelper.java": {
            "com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsHelper.doFillCredentialsIdItems(ItemGroup context)": {
                "lineStart": 22,
                "lineEnd": 24
            }
        }
    },
    "CVE-2020-2223": {
        "8d0e13d70b-HyperlinkNote.java": {
            "hudson.console.HyperlinkNote.annotate(Object context, MarkupText text, int charPos)": {
                "lineStart": 22,
                "lineEnd": 37
            }
        }
    },
    "CVE-2022-45855": {
        "d81deaf0a4-MetricSource.java": {
            "org.apache.ambari.server.state.alert.MetricSource$Value.eval(List<Object> metrics)": {
                "lineStart": 118,
                "lineEnd": 122
            }
        }
    },
    "CVE-2024-31573": {
        "1976abf-TransformerFactoryConfigurer.java": {
            "org.xmlunit.util.TransformerFactoryConfigurer.<init>(Map<String, Object> attributes, Map<String, Object> safeAttributes, Map<String, Boolean> features, Map<String, Boolean> safeFeatures)": {
                "lineStart": 11,
                "lineEnd": 16
            },
            "org.xmlunit.util.TransformerFactoryConfigurer.configure(TransformerFactory factory)": {
                "lineStart": 18,
                "lineEnd": 58
            },
            "org.xmlunit.util.TransformerFactoryConfigurer.builder()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.build()": {
                "lineStart": 71,
                "lineEnd": 73
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.withAttribute(String key, Object value)": {
                "lineStart": 75,
                "lineEnd": 78
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.withSafeAttribute(String key, Object value)": {
                "lineStart": 80,
                "lineEnd": 83
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.withFeature(String key, boolean value)": {
                "lineStart": 85,
                "lineEnd": 88
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.withSafeFeature(String key, boolean value)": {
                "lineStart": 90,
                "lineEnd": 93
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.withDTDLoadingDisabled()": {
                "lineStart": 95,
                "lineEnd": 97
            },
            "org.xmlunit.util.TransformerFactoryConfigurer$Builder.withExternalStylesheetLoadingDisabled()": {
                "lineStart": 99,
                "lineEnd": 101
            }
        }
    },
    "CVE-2023-41046": {
        "ad2020fc8f7-TextAreaClass.java": {
            "com.xpn.xwiki.objects.classes.TextAreaClass.displayView(StringBuffer buffer, String name, String prefix, BaseCollection object, boolean isolated, XWikiContext context)": {
                "lineStart": 238,
                "lineEnd": 281
            }
        }
    },
    "CVE-2023-27899": {
        "c9df3e6117-PluginManager.java": {
            "hudson.PluginManager.doUploadPlugin(StaplerRequest req)": {
                "lineStart": 1538,
                "lineEnd": 1606
            }
        }
    },
    "CVE-2023-40341": {
        "5d9ec4f2e-GithubScm.java": {
            "io.jenkins.blueocean.blueocean_github_pipeline.GithubScm.getRepository(@QueryParameter String jobName, @QueryParameter String apiUrl)": {
                "lineStart": 143,
                "lineEnd": 168
            }
        }
    },
    "CVE-2023-3193": {
        "cadf05c63f818-LayoutsSEODisplayContext.java": {
            "com.liferay.layout.seo.web.internal.display.context.LayoutsSEODisplayContext.getEditCustomMetaTagsURL()": {
                "lineStart": 156,
                "lineEnd": 167
            },
            "com.liferay.layout.seo.web.internal.display.context.LayoutsSEODisplayContext.getRedirectURL()": {
                "lineStart": 251,
                "lineEnd": 261
            }
        }
    },
    "CVE-2022-2232": {
        "32503b245a-LDAPOperationManager.java": {
            "org.keycloak.storage.ldap.idm.store.ldap.LDAPOperationManager.getFilterById(String id)": {
                "lineStart": 265,
                "lineEnd": 287
            }
        },
        "13d218efe9-AbstractUsernameFormAuthenticator.java": {
            "org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator.getUserFromForm(AuthenticationFlowContext context, MultivaluedMap<String, String> inputData)": {
                "lineStart": 143,
                "lineEnd": 173
            }
        }
    },
    "CVE-2020-2177": {
        "c000834-CoprPlugin.java": {
            "org.fedoraproject.jenkins.plugins.copr.CoprPlugin.<init>(String coprname, String username, String srpm, String apilogin, String apitoken, String apiurl, String srpmscript, boolean prepareSrpm, String coprTimeout, boolean waitForCoprBuild)": {
                "lineStart": 38,
                "lineEnd": 49
            },
            "org.fedoraproject.jenkins.plugins.copr.CoprPlugin.perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)": {
                "lineStart": 51,
                "lineEnd": 90
            },
            "org.fedoraproject.jenkins.plugins.copr.CoprPlugin.getApilogin()": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "org.fedoraproject.jenkins.plugins.copr.CoprPlugin.getApitoken()": {
                "lineStart": 179,
                "lineEnd": 181
            }
        }
    },
    "CVE-2023-25827": {
        "2a7d81fa-HttpQuery.java": {
            "net.opentsdb.tsd.HttpQuery.internalError(final Exception cause)": {
                "lineStart": 208,
                "lineEnd": 234
            },
            "net.opentsdb.tsd.HttpQuery.badRequest(final BadRequestException exception)": {
                "lineStart": 240,
                "lineEnd": 262
            }
        }
    },
    "CVE-2022-31781": {
        "bf5da4a24-ContentType.java": {
            "org.apache.tapestry5.http.ContentType.<init>(String contentType)": {
                "lineStart": 17,
                "lineEnd": 26
            },
            "org.apache.tapestry5.http.ContentType.<init>(String baseType, String subType, Map<String, String> parameters)": {
                "lineStart": 28,
                "lineEnd": 32
            },
            "org.apache.tapestry5.http.ContentType.parseKeyValues(String keyValues)": {
                "lineStart": 34,
                "lineEnd": 48
            },
            "org.apache.tapestry5.http.ContentType.equals(Object o)": {
                "lineStart": 50,
                "lineEnd": 55
            },
            "org.apache.tapestry5.http.ContentType.hashCode()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "org.apache.tapestry5.http.ContentType.getBaseType()": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "org.apache.tapestry5.http.ContentType.getSubType()": {
                "lineStart": 65,
                "lineEnd": 67
            },
            "org.apache.tapestry5.http.ContentType.getMimeType()": {
                "lineStart": 69,
                "lineEnd": 71
            },
            "org.apache.tapestry5.http.ContentType.getParameterNames()": {
                "lineStart": 73,
                "lineEnd": 75
            },
            "org.apache.tapestry5.http.ContentType.getCharset()": {
                "lineStart": 77,
                "lineEnd": 79
            },
            "org.apache.tapestry5.http.ContentType.getParameter(String key)": {
                "lineStart": 81,
                "lineEnd": 84
            },
            "org.apache.tapestry5.http.ContentType.unparse()": {
                "lineStart": 86,
                "lineEnd": 96
            },
            "org.apache.tapestry5.http.ContentType.withParameter(String key, String value)": {
                "lineStart": 98,
                "lineEnd": 105
            },
            "org.apache.tapestry5.http.ContentType.withCharset(String charset)": {
                "lineStart": 107,
                "lineEnd": 109
            },
            "org.apache.tapestry5.http.ContentType.toString()": {
                "lineStart": 111,
                "lineEnd": 113
            },
            "org.apache.tapestry5.http.ContentType.hasParameters()": {
                "lineStart": 115,
                "lineEnd": 117
            }
        }
    },
    "CVE-2022-36033": {
        "8c5e50b8-StringUtil.java": {
            "org.jsoup.internal.StringUtil.resolve(final String baseUrl, final String relUrl)": {
                "lineStart": 210,
                "lineEnd": 227
            },
            "org.jsoup.internal.StringUtil.resolve(URL base, String relUrl)": {
                "lineStart": 197,
                "lineEnd": 208
            }
        }
    },
    "CVE-2021-43113": {
        "418f26c19-FileUtil.java": {
            "com.itextpdf.io.util.FileUtil.<init>()": {
                "lineStart": 27,
                "lineEnd": 28
            },
            "com.itextpdf.io.util.FileUtil.getFontsDir()": {
                "lineStart": 30,
                "lineEnd": 41
            },
            "com.itextpdf.io.util.FileUtil.fileExists(String path)": {
                "lineStart": 43,
                "lineEnd": 50
            },
            "com.itextpdf.io.util.FileUtil.directoryExists(String path)": {
                "lineStart": 52,
                "lineEnd": 59
            },
            "com.itextpdf.io.util.FileUtil.listFilesInDirectory(String path, boolean recursive)": {
                "lineStart": 61,
                "lineEnd": 87
            },
            "com.itextpdf.io.util.FileUtil.listFilesInDirectoryByFilter(String outPath, FileFilter fileFilter)": {
                "lineStart": 89,
                "lineEnd": 100
            },
            "com.itextpdf.io.util.FileUtil.listAllFiles(String dir, List<String> list)": {
                "lineStart": 102,
                "lineEnd": 118
            },
            "com.itextpdf.io.util.FileUtil.createPrintWriter(OutputStream output, String encoding)": {
                "lineStart": 120,
                "lineEnd": 122
            },
            "com.itextpdf.io.util.FileUtil.getBufferedOutputStream(String filename)": {
                "lineStart": 124,
                "lineEnd": 126
            },
            "com.itextpdf.io.util.FileUtil.wrapWithBufferedOutputStream(OutputStream outputStream)": {
                "lineStart": 128,
                "lineEnd": 136
            },
            "com.itextpdf.io.util.FileUtil.createTempFile(String path)": {
                "lineStart": 138,
                "lineEnd": 145
            },
            "com.itextpdf.io.util.FileUtil.getFileOutputStream(File tempFile)": {
                "lineStart": 147,
                "lineEnd": 149
            },
            "com.itextpdf.io.util.FileUtil.getInputStreamForFile(String path)": {
                "lineStart": 151,
                "lineEnd": 153
            },
            "com.itextpdf.io.util.FileUtil.getRandomAccessFile(File tempFile)": {
                "lineStart": 155,
                "lineEnd": 157
            },
            "com.itextpdf.io.util.FileUtil.createDirectories(String outPath)": {
                "lineStart": 159,
                "lineEnd": 161
            },
            "com.itextpdf.io.util.FileUtil.getParentDirectory(String file)": {
                "lineStart": 163,
                "lineEnd": 165
            },
            "com.itextpdf.io.util.FileUtil.getParentDirectory(File file)": {
                "lineStart": 167,
                "lineEnd": 169
            },
            "com.itextpdf.io.util.FileUtil.deleteFile(File file)": {
                "lineStart": 171,
                "lineEnd": 173
            },
            "com.itextpdf.io.util.FileUtil.parentDirectory(URL url)": {
                "lineStart": 175,
                "lineEnd": 177
            },
            "com.itextpdf.io.util.FileUtil$CaseSensitiveFileComparator.compare(File f1, File f2)": {
                "lineStart": 180,
                "lineEnd": 182
            }
        },
        "7aeaf05c1-GhostscriptHelper.java": {
            "com.itextpdf.io.util.GhostscriptHelper.runGhostScriptImageGeneration(String pdf, String outDir, String image, String pageList)": {
                "lineStart": 39,
                "lineEnd": 50
            }
        },
        "58588158a-ImageMagickHelper.java": {
            "com.itextpdf.io.util.ImageMagickHelper.runImageMagickImageCompare(String outImageFilePath, String cmpImageFilePath, String diffImageName, String fuzzValue)": {
                "lineStart": 38,
                "lineEnd": 43
            }
        },
        "a55a70a3e-CompareTool.java": {
            "com.itextpdf.kernel.utils.CompareTool.init(String outPdf, String cmpPdf)": {
                "lineStart": 433,
                "lineEnd": 441
            }
        }
    },
    "CVE-2023-28640": {
        "132389041-OrganizationResourceImpl.java": {
            "io.apiman.manager.api.rest.impl.OrganizationResourceImpl.getApiRegistryJSON(String organizationId, String clientId, String version, String download)": {
                "lineStart": 309,
                "lineEnd": 319
            }
        }
    },
    "CVE-2024-41172": {
        "4435bf01e8-HttpClientHTTPConduit.java": {
            "org.apache.cxf.transport.http.HttpClientHTTPConduit$RefCount.release()": {
                "lineStart": 100,
                "lineEnd": 115
            }
        }
    },
    "CVE-2022-39366": {
        "3cc27673f85a-StatelessTokenService.java": {
            "com.datahub.authentication.token.StatelessTokenService.validateAccessToken(@Nonnull final String accessToken)": {
                "lineStart": 74,
                "lineEnd": 97
            }
        }
    },
    "CVE-2022-42128": {
        "3ca92b3bb4ef5-WikiNodeResourceImpl.java": {
            "com.liferay.headless.delivery.internal.resource.v1_0.WikiNodeResourceImpl.getSiteWikiNodeByExternalReferenceCode(Long siteId, String externalReferenceCode)": {
                "lineStart": 46,
                "lineEnd": 48
            }
        }
    },
    "CVE-2022-1782": {
        "3e030df7-Utils.java": {
            "com.erudika.para.core.utils.Utils.compileMustache(Map<String, Object> context, String template)": {
                "lineStart": 228,
                "lineEnd": 248
            }
        }
    },
    "CVE-2024-1102": {
        "12f5483a-JdbcRepository.java": {
            "org.jberet.repository.JdbcRepository.getConnection()": {
                "lineStart": 1044,
                "lineEnd": 1064
            }
        }
    },
    "CVE-2022-3782": {
        "5bf5aa587e-LogoutEndpoint.java": {
            "org.keycloak.protocol.oidc.endpoints.LogoutEndpoint.doBrowserLogout(AuthenticationSessionModel logoutSession)": {
                "lineStart": 326,
                "lineEnd": 374
            },
            "org.keycloak.protocol.oidc.endpoints.LogoutEndpoint.logoutConfirmAction()": {
                "lineStart": 273,
                "lineEnd": 295
            },
            "org.keycloak.protocol.oidc.endpoints.LogoutEndpoint.logoutConfirmGet()": {
                "lineStart": 297,
                "lineEnd": 324
            }
        },
        "01d6cc4c0d-RedirectUtils.java": {
            "org.keycloak.protocol.oidc.utils.RedirectUtils.verifyRedirectUri(KeycloakSession session, String rootUrl, String redirectUri, Set<String> validRedirects, boolean requireRedirectUri)": {
                "lineStart": 57,
                "lineEnd": 123
            }
        },
        "602ca126b2-AuthenticationSessionManager.java": {
            "org.keycloak.services.managers.AuthenticationSessionManager.getAuthSessionCookies(RealmModel realm)": {
                "lineStart": 112,
                "lineEnd": 124
            }
        },
        "9e3eda42be-UserSessionCrossDCManager.java": {
            "org.keycloak.services.managers.UserSessionCrossDCManager.getUserSessionIfExistsRemotely(AuthenticationSessionManager asm, RealmModel realm)": {
                "lineStart": 30,
                "lineEnd": 45
            }
        },
        "a670dacf3a-SessionCodeChecks.java": {
            "org.keycloak.services.resources.SessionCodeChecks.initialVerifyAuthSession()": {
                "lineStart": 95,
                "lineEnd": 155
            }
        }
    },
    "CVE-2020-1947": {
        "5404bf9bebe-YamlEngine.java": {
            "org.apache.shardingsphere.core.yaml.engine.YamlEngine.unmarshal(final String yamlContent)": {
                "lineStart": 37,
                "lineEnd": 39
            }
        },
        "72e9d34f95a-SchemaChangedListener.java": {
            "org.apache.shardingsphere.orchestration.internal.registry.config.listener.SchemaChangedListener.createDataSourceChangedEvent(final String shardingSchemaName, final DataChangedEvent event)": {
                "lineStart": 74,
                "lineEnd": 86
            }
        },
        "ee7a95841e4-ConfigurationService.java": {
            "org.apache.shardingsphere.orchestration.internal.registry.config.service.ConfigurationService.loadDataSourceConfigurations(final String shardingSchemaName)": {
                "lineStart": 136,
                "lineEnd": 148
            }
        },
        "5e7034929c2-ConfigurationYamlConverter.java": {
            "org.apache.shardingsphere.ui.util.ConfigurationYamlConverter.loadDataSourceConfigurations(final String data)": {
                "lineStart": 27,
                "lineEnd": 39
            }
        }
    },
    "CVE-2021-36774": {
        "767ae8b18e-KylinConfigBase.java": {
            "org.apache.kylin.common.KylinConfigBase.getKylinDictCacheStrength()": {
                "lineStart": 2511,
                "lineEnd": 2513
            }
        },
        "49c4d53ddf-AdaptorConfig.java": {
            "org.apache.kylin.sdk.datasource.adaptor.AdaptorConfig.<init>(String url, String driver, String username, String password)": {
                "lineStart": 11,
                "lineEnd": 16
            }
        },
        "3460d5c23e-DBConnConf.java": {
            "org.apache.kylin.source.hive.DBConnConf.getUrl()": {
                "lineStart": 42,
                "lineEnd": 44
            }
        }
    },
    "CVE-2023-25806": {
        "2546cbae-InternalAuthenticationBackend.java": {
            "org.opensearch.security.auth.internal.InternalAuthenticationBackend.authenticate(final AuthCredentials credentials)": {
                "lineStart": 49,
                "lineEnd": 98
            }
        }
    },
    "CVE-2024-31860": {
        "2e9803183-NotebookService.java": {
            "org.apache.zeppelin.service.NotebookService.<init>(Notebook notebook, AuthorizationService authorizationService, ZeppelinConfiguration zeppelinConfiguration, SchedulerService schedulerService)": {
                "lineStart": 54,
                "lineEnd": 59
            },
            "org.apache.zeppelin.service.NotebookService.getHomeNote(ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 61,
                "lineEnd": 80
            },
            "org.apache.zeppelin.service.NotebookService.getNote(String noteId, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "org.apache.zeppelin.service.NotebookService.getNote(String noteId, boolean reload, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 86,
                "lineEnd": 111
            },
            "org.apache.zeppelin.service.NotebookService.getNoteByPath(String notePath, boolean reload, ServiceContext context, ServiceCallback<Note> callback, NoteProcessor<T> noteProcessor)": {
                "lineStart": 113,
                "lineEnd": 123
            },
            "org.apache.zeppelin.service.NotebookService.createNote(String notePath, String defaultInterpreterGroup, boolean addingEmptyParagraph, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 125,
                "lineEnd": 150
            },
            "org.apache.zeppelin.service.NotebookService.normalizeNotePath(String notePath)": {
                "lineStart": 152,
                "lineEnd": 172
            },
            "org.apache.zeppelin.service.NotebookService.removeNote(String noteId, ServiceContext context, ServiceCallback<String> callback)": {
                "lineStart": 174,
                "lineEnd": 194
            },
            "org.apache.zeppelin.service.NotebookService.listNotesInfo(boolean needsReload, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 196,
                "lineEnd": 210
            },
            "org.apache.zeppelin.service.NotebookService.renameNote(String noteId, String newNotePath, boolean isRelative, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 212,
                "lineEnd": 246
            },
            "org.apache.zeppelin.service.NotebookService.cloneNote(String noteId, String newNotePath, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 248,
                "lineEnd": 250
            },
            "org.apache.zeppelin.service.NotebookService.cloneNote(String noteId, String revisionId, String newNotePath, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 252,
                "lineEnd": 275
            },
            "org.apache.zeppelin.service.NotebookService.importNote(String notePath, String noteJson, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 277,
                "lineEnd": 292
            },
            "org.apache.zeppelin.service.NotebookService.runParagraph(Note note, String paragraphId, String title, String text, Map<String, Object> params, Map<String, Object> config, String sessionId, boolean failIfDisabled, boolean blocking, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 294,
                "lineEnd": 354
            },
            "org.apache.zeppelin.service.NotebookService.runAllParagraphs(String noteId, List<Map<String, Object>> paragraphs, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 356,
                "lineEnd": 425
            },
            "org.apache.zeppelin.service.NotebookService.cancelParagraph(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 427,
                "lineEnd": 448
            },
            "org.apache.zeppelin.service.NotebookService.moveParagraph(String noteId, String paragraphId, int newIndex, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 450,
                "lineEnd": 476
            },
            "org.apache.zeppelin.service.NotebookService.removeParagraph(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 478,
                "lineEnd": 499
            },
            "org.apache.zeppelin.service.NotebookService.insertParagraph(String noteId, int index, Map<String, Object> config, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 501,
                "lineEnd": 519
            },
            "org.apache.zeppelin.service.NotebookService.restoreNote(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 521,
                "lineEnd": 550
            },
            "org.apache.zeppelin.service.NotebookService.restoreFolder(String folderPath, ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 552,
                "lineEnd": 567
            },
            "org.apache.zeppelin.service.NotebookService.restoreAll(ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 569,
                "lineEnd": 578
            },
            "org.apache.zeppelin.service.NotebookService.updateParagraph(String noteId, String paragraphId, String title, String text, Map<String, Object> params, Map<String, Object> config, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 580,
                "lineEnd": 615
            },
            "org.apache.zeppelin.service.NotebookService.getNextSessionParagraphId(String noteId, int maxParagraph, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 617,
                "lineEnd": 652
            },
            "org.apache.zeppelin.service.NotebookService.clearParagraphOutput(String noteId, String paragraphId, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 654,
                "lineEnd": 685
            },
            "org.apache.zeppelin.service.NotebookService.clearAllParagraphOutput(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 687,
                "lineEnd": 705
            },
            "org.apache.zeppelin.service.NotebookService.updateNote(String noteId, String name, Map<String, Object> config, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 707,
                "lineEnd": 738
            },
            "org.apache.zeppelin.service.NotebookService.isCronUpdated(Map<String, Object> configA, Map<String, Object> configB)": {
                "lineStart": 740,
                "lineEnd": 750
            },
            "org.apache.zeppelin.service.NotebookService.saveNoteForms(String noteId, Map<String, Object> noteParams, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 752,
                "lineEnd": 770
            },
            "org.apache.zeppelin.service.NotebookService.removeNoteForms(String noteId, String formName, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 772,
                "lineEnd": 791
            },
            "org.apache.zeppelin.service.NotebookService.checkpointNote(String noteId, String commitMessage, ServiceContext context, ServiceCallback<NotebookRepoWithVersionControl.Revision> callback)": {
                "lineStart": 793,
                "lineEnd": 810
            },
            "org.apache.zeppelin.service.NotebookService.listRevisionHistory(String noteId, ServiceContext context, ServiceCallback<List<NotebookRepoWithVersionControl.Revision>> callback)": {
                "lineStart": 812,
                "lineEnd": 825
            },
            "org.apache.zeppelin.service.NotebookService.setNoteRevision(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 827,
                "lineEnd": 850
            },
            "org.apache.zeppelin.service.NotebookService.getNotebyRevision(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 852,
                "lineEnd": 869
            },
            "org.apache.zeppelin.service.NotebookService.getNoteByRevisionForCompare(String noteId, String revisionId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 871,
                "lineEnd": 895
            },
            "org.apache.zeppelin.service.NotebookService.completion(String noteId, String paragraphId, String buffer, int cursor, ServiceContext context, ServiceCallback<List<InterpreterCompletion>> callback)": {
                "lineStart": 897,
                "lineEnd": 921
            },
            "org.apache.zeppelin.service.NotebookService.getEditorSetting(String noteId, String paragraphText, ServiceContext context, ServiceCallback<Map<String, Object>> callback)": {
                "lineStart": 923,
                "lineEnd": 941
            },
            "org.apache.zeppelin.service.NotebookService.updatePersonalizedMode(String noteId, boolean isPersonalized, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 943,
                "lineEnd": 961
            },
            "org.apache.zeppelin.service.NotebookService.moveNoteToTrash(String noteId, ServiceContext context, ServiceCallback<Note> callback)": {
                "lineStart": 963,
                "lineEnd": 993
            },
            "org.apache.zeppelin.service.NotebookService.moveFolderToTrash(String folderPath, ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 995,
                "lineEnd": 1004
            },
            "org.apache.zeppelin.service.NotebookService.emptyTrash(ServiceContext context, ServiceCallback<Void> callback)": {
                "lineStart": 1006,
                "lineEnd": 1015
            },
            "org.apache.zeppelin.service.NotebookService.removeFolder(String folderPath, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 1017,
                "lineEnd": 1029
            },
            "org.apache.zeppelin.service.NotebookService.renameFolder(String folderPath, String newFolderPath, ServiceContext context, ServiceCallback<List<NoteInfo>> callback)": {
                "lineStart": 1031,
                "lineEnd": 1043
            },
            "org.apache.zeppelin.service.NotebookService.spell(String noteId, Message message, ServiceContext context, ServiceCallback<Paragraph> callback)": {
                "lineStart": 1045,
                "lineEnd": 1095
            },
            "org.apache.zeppelin.service.NotebookService.addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p)": {
                "lineStart": 1097,
                "lineEnd": 1103
            },
            "org.apache.zeppelin.service.NotebookService.setParagraphUsingMessage(Note note, Message fromMessage, String paragraphId, String text, String title, Map<String, Object> params, Map<String, Object> config)": {
                "lineStart": 1105,
                "lineEnd": 1123
            },
            "org.apache.zeppelin.service.NotebookService.updateAngularObject(String noteId, String paragraphId, String interpreterGroupId, String varName, Object varValue, ServiceContext context, ServiceCallback<AngularObject> callback)": {
                "lineStart": 1125,
                "lineEnd": 1178
            },
            "org.apache.zeppelin.service.NotebookService.patchParagraph(final String noteId, final String paragraphId, String patchText, ServiceContext context, ServiceCallback<String> callback)": {
                "lineStart": 1180,
                "lineEnd": 1222
            },
            "org.apache.zeppelin.service.NotebookService.checkPermission(String noteId, Permission permission, Message.OP op, ServiceContext context, ServiceCallback<T> callback)": {
                "lineStart": 1226,
                "lineEnd": 1257
            }
        }
    },
    "CVE-2023-3635": {
        "1ef6cb49-GzipSource.java": {
            "okio.GzipSource.consumeHeader()": {
                "lineStart": 58,
                "lineEnd": 94
            }
        }
    },
    "CVE-2022-25195": {
        "5ff9b91-AutonomiqBuilder.java": {
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillProjectItems(@QueryParameter String aiqUrl, @QueryParameter String login, @QueryParameter Secret password, @QueryParameter String proxyHost, @QueryParameter String proxyPort, @QueryParameter String proxyUser, @QueryParameter Secret proxyPassword, @QueryParameter Boolean httpProxy)": {
                "lineStart": 488,
                "lineEnd": 500
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillPlatformTestCasesItems()": {
                "lineStart": 502,
                "lineEnd": 506
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillPlatformTestSuitesItems()": {
                "lineStart": 508,
                "lineEnd": 512
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillBrowserTestCasesItems()": {
                "lineStart": 514,
                "lineEnd": 518
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillBrowserTestSuitesItems()": {
                "lineStart": 520,
                "lineEnd": 524
            },
            "io.jenkins.plugins.autonomiq.AutonomiqBuilder$DescriptorImpl.doFillExecutionModeItems()": {
                "lineStart": 526,
                "lineEnd": 530
            }
        }
    },
    "CVE-2022-44621": {
        "0c22c0d94e-KylinConfigBase.java": {
            "org.apache.kylin.common.KylinConfigBase.getSparkSubmitCmd()": {
                "lineStart": 1866,
                "lineEnd": 1868
            }
        },
        "af2314563d-NSparkExecutable.java": {
            "org.apache.kylin.engine.spark.job.NSparkExecutable.generateSparkCmd(KylinConfig config, String hadoopConf, String jars, String kylinJobJar, String appArgs)": {
                "lineStart": 348,
                "lineEnd": 394
            }
        },
        "190ee438d2-DiagnosisController.java": {
            "org.apache.kylin.rest.controller.DiagnosisController.dumpJobDiagnosisInfo(@PathVariable String jobId, final HttpServletRequest request, final HttpServletResponse response)": {
                "lineStart": 51,
                "lineEnd": 61
            }
        }
    },
    "CVE-2023-34034": {
        "aa3382f1f0-AbstractServerWebExchangeMatcherRegistry.java": {
            "org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry.pathMatchers(HttpMethod method, String... antPatterns)": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry.pathMatchers(String... antPatterns)": {
                "lineStart": 24,
                "lineEnd": 26
            }
        },
        "282896dd83-ServerHttpSecurity.java": {
            "org.springframework.security.config.web.server.ServerHttpSecurity.<init>()": {
                "lineStart": 193,
                "lineEnd": 194
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.securityMatcher(ServerWebExchangeMatcher matcher)": {
                "lineStart": 196,
                "lineEnd": 200
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.addFilterAt(WebFilter webFilter, SecurityWebFiltersOrder order)": {
                "lineStart": 202,
                "lineEnd": 205
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.addFilterBefore(WebFilter webFilter, SecurityWebFiltersOrder order)": {
                "lineStart": 207,
                "lineEnd": 210
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.addFilterAfter(WebFilter webFilter, SecurityWebFiltersOrder order)": {
                "lineStart": 212,
                "lineEnd": 215
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getSecurityMatcher()": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.securityContextRepository(ServerSecurityContextRepository securityContextRepository)": {
                "lineStart": 221,
                "lineEnd": 225
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.redirectToHttps()": {
                "lineStart": 227,
                "lineEnd": 230
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.redirectToHttps(Customizer<HttpsRedirectSpec> httpsRedirectCustomizer)": {
                "lineStart": 232,
                "lineEnd": 236
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.csrf()": {
                "lineStart": 238,
                "lineEnd": 244
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.csrf(Customizer<CsrfSpec> csrfCustomizer)": {
                "lineStart": 246,
                "lineEnd": 253
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.cors()": {
                "lineStart": 255,
                "lineEnd": 261
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.cors(Customizer<CorsSpec> corsCustomizer)": {
                "lineStart": 263,
                "lineEnd": 270
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.anonymous()": {
                "lineStart": 272,
                "lineEnd": 278
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.anonymous(Customizer<AnonymousSpec> anonymousCustomizer)": {
                "lineStart": 280,
                "lineEnd": 287
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.httpBasic()": {
                "lineStart": 289,
                "lineEnd": 295
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.httpBasic(Customizer<HttpBasicSpec> httpBasicCustomizer)": {
                "lineStart": 297,
                "lineEnd": 304
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.passwordManagement()": {
                "lineStart": 306,
                "lineEnd": 312
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.passwordManagement(Customizer<PasswordManagementSpec> passwordManagementCustomizer)": {
                "lineStart": 314,
                "lineEnd": 321
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.formLogin()": {
                "lineStart": 323,
                "lineEnd": 329
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.formLogin(Customizer<FormLoginSpec> formLoginCustomizer)": {
                "lineStart": 331,
                "lineEnd": 338
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.x509()": {
                "lineStart": 340,
                "lineEnd": 346
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.x509(Customizer<X509Spec> x509Customizer)": {
                "lineStart": 348,
                "lineEnd": 355
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.oauth2Login()": {
                "lineStart": 357,
                "lineEnd": 363
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.oauth2Login(Customizer<OAuth2LoginSpec> oauth2LoginCustomizer)": {
                "lineStart": 365,
                "lineEnd": 372
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.oauth2Client()": {
                "lineStart": 374,
                "lineEnd": 380
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.oauth2Client(Customizer<OAuth2ClientSpec> oauth2ClientCustomizer)": {
                "lineStart": 382,
                "lineEnd": 389
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.oauth2ResourceServer()": {
                "lineStart": 391,
                "lineEnd": 397
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.oauth2ResourceServer(Customizer<OAuth2ResourceServerSpec> oauth2ResourceServerCustomizer)": {
                "lineStart": 399,
                "lineEnd": 406
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.headers()": {
                "lineStart": 408,
                "lineEnd": 414
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.headers(Customizer<HeaderSpec> headerCustomizer)": {
                "lineStart": 416,
                "lineEnd": 423
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.exceptionHandling()": {
                "lineStart": 425,
                "lineEnd": 431
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.exceptionHandling(Customizer<ExceptionHandlingSpec> exceptionHandlingCustomizer)": {
                "lineStart": 433,
                "lineEnd": 440
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.authorizeExchange()": {
                "lineStart": 442,
                "lineEnd": 448
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.authorizeExchange(Customizer<AuthorizeExchangeSpec> authorizeExchangeCustomizer)": {
                "lineStart": 450,
                "lineEnd": 457
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.logout()": {
                "lineStart": 459,
                "lineEnd": 465
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.logout(Customizer<LogoutSpec> logoutCustomizer)": {
                "lineStart": 467,
                "lineEnd": 474
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.requestCache()": {
                "lineStart": 476,
                "lineEnd": 478
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.requestCache(Customizer<RequestCacheSpec> requestCacheCustomizer)": {
                "lineStart": 480,
                "lineEnd": 483
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.authenticationManager(ReactiveAuthenticationManager manager)": {
                "lineStart": 485,
                "lineEnd": 488
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.build()": {
                "lineStart": 490,
                "lineEnd": 626
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.buildToString()": {
                "lineStart": 628,
                "lineEnd": 645
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getAuthenticationEntryPoint()": {
                "lineStart": 647,
                "lineEnd": 659
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getAccessDeniedHandler()": {
                "lineStart": 661,
                "lineEnd": 673
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.http()": {
                "lineStart": 675,
                "lineEnd": 677
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.securityContextRepositoryWebFilter()": {
                "lineStart": 679,
                "lineEnd": 683
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getBean(Class<T> beanClass)": {
                "lineStart": 685,
                "lineEnd": 691
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getBeanOrNull(Class<T> beanClass)": {
                "lineStart": 693,
                "lineEnd": 695
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getBeanOrNull(ResolvableType type)": {
                "lineStart": 697,
                "lineEnd": 708
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.getBeanNamesForTypeOrEmpty(Class<T> beanClass)": {
                "lineStart": 710,
                "lineEnd": 714
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity.setApplicationContext(ApplicationContext applicationContext)": {
                "lineStart": 716,
                "lineEnd": 718
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec.and()": {
                "lineStart": 724,
                "lineEnd": 726
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec.anyExchange()": {
                "lineStart": 728,
                "lineEnd": 732
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec.registerMatcher(ServerWebExchangeMatcher matcher)": {
                "lineStart": 734,
                "lineEnd": 739
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 741,
                "lineEnd": 745
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.permitAll()": {
                "lineStart": 748,
                "lineEnd": 750
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.denyAll()": {
                "lineStart": 752,
                "lineEnd": 754
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.hasRole(String role)": {
                "lineStart": 756,
                "lineEnd": 758
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.hasAnyRole(String... roles)": {
                "lineStart": 760,
                "lineEnd": 762
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.hasAuthority(String authority)": {
                "lineStart": 764,
                "lineEnd": 766
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.hasAnyAuthority(String... authorities)": {
                "lineStart": 768,
                "lineEnd": 770
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.authenticated()": {
                "lineStart": 772,
                "lineEnd": 774
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AuthorizeExchangeSpec$Access.access(ReactiveAuthorizationManager<AuthorizationContext> manager)": {
                "lineStart": 776,
                "lineEnd": 780
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpsRedirectSpec.httpsRedirectWhen(ServerWebExchangeMatcher... matchers)": {
                "lineStart": 789,
                "lineEnd": 792
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpsRedirectSpec.httpsRedirectWhen(Function<ServerWebExchange, Boolean> when)": {
                "lineStart": 794,
                "lineEnd": 797
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpsRedirectSpec.portMapper(PortMapper portMapper)": {
                "lineStart": 799,
                "lineEnd": 802
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpsRedirectSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 804,
                "lineEnd": 815
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpsRedirectSpec.and()": {
                "lineStart": 817,
                "lineEnd": 819
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.<init>()": {
                "lineStart": 824,
                "lineEnd": 825
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.accessDeniedHandler(ServerAccessDeniedHandler accessDeniedHandler)": {
                "lineStart": 830,
                "lineEnd": 833
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.csrfTokenRepository(ServerCsrfTokenRepository csrfTokenRepository)": {
                "lineStart": 835,
                "lineEnd": 838
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.requireCsrfProtectionMatcher(ServerWebExchangeMatcher requireCsrfProtectionMatcher)": {
                "lineStart": 840,
                "lineEnd": 844
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.tokenFromMultipartDataEnabled(boolean enabled)": {
                "lineStart": 846,
                "lineEnd": 849
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.and()": {
                "lineStart": 851,
                "lineEnd": 853
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.disable()": {
                "lineStart": 855,
                "lineEnd": 858
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 860,
                "lineEnd": 870
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec.<init>()": {
                "lineStart": 875,
                "lineEnd": 876
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec.authenticationEntryPoint(ServerAuthenticationEntryPoint authenticationEntryPoint)": {
                "lineStart": 878,
                "lineEnd": 881
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec.accessDeniedHandler(ServerAccessDeniedHandler accessDeniedHandler)": {
                "lineStart": 883,
                "lineEnd": 886
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec.and()": {
                "lineStart": 888,
                "lineEnd": 890
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec.<init>()": {
                "lineStart": 896,
                "lineEnd": 897
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec.requestCache(ServerRequestCache requestCache)": {
                "lineStart": 899,
                "lineEnd": 903
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 905,
                "lineEnd": 909
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec.and()": {
                "lineStart": 911,
                "lineEnd": 913
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec.disable()": {
                "lineStart": 915,
                "lineEnd": 918
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.<init>()": {
                "lineStart": 927,
                "lineEnd": 933
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.authenticationManager(ReactiveAuthenticationManager authenticationManager)": {
                "lineStart": 935,
                "lineEnd": 938
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.securityContextRepository(ServerSecurityContextRepository securityContextRepository)": {
                "lineStart": 940,
                "lineEnd": 943
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.authenticationEntryPoint(ServerAuthenticationEntryPoint authenticationEntryPoint)": {
                "lineStart": 945,
                "lineEnd": 949
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.and()": {
                "lineStart": 951,
                "lineEnd": 953
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.disable()": {
                "lineStart": 955,
                "lineEnd": 958
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HttpBasicSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 960,
                "lineEnd": 972
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$PasswordManagementSpec.changePasswordPage(String changePasswordPage)": {
                "lineStart": 980,
                "lineEnd": 984
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$PasswordManagementSpec.and()": {
                "lineStart": 986,
                "lineEnd": 988
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$PasswordManagementSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 990,
                "lineEnd": 993
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$PasswordManagementSpec.<init>()": {
                "lineStart": 995,
                "lineEnd": 996
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.<init>()": {
                "lineStart": 1010,
                "lineEnd": 1011
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.authenticationManager(ReactiveAuthenticationManager authenticationManager)": {
                "lineStart": 1013,
                "lineEnd": 1016
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.authenticationSuccessHandler(ServerAuthenticationSuccessHandler authenticationSuccessHandler)": {
                "lineStart": 1018,
                "lineEnd": 1022
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.loginPage(String loginPage)": {
                "lineStart": 1024,
                "lineEnd": 1036
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.authenticationEntryPoint(ServerAuthenticationEntryPoint authenticationEntryPoint)": {
                "lineStart": 1038,
                "lineEnd": 1041
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.requiresAuthenticationMatcher(ServerWebExchangeMatcher requiresAuthenticationMatcher)": {
                "lineStart": 1043,
                "lineEnd": 1046
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.authenticationFailureHandler(ServerAuthenticationFailureHandler authenticationFailureHandler)": {
                "lineStart": 1048,
                "lineEnd": 1051
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.securityContextRepository(ServerSecurityContextRepository securityContextRepository)": {
                "lineStart": 1053,
                "lineEnd": 1056
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.and()": {
                "lineStart": 1058,
                "lineEnd": 1060
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.disable()": {
                "lineStart": 1062,
                "lineEnd": 1065
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$FormLoginSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1067,
                "lineEnd": 1096
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LoginPageSpec.<init>()": {
                "lineStart": 1101,
                "lineEnd": 1102
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LoginPageSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1104,
                "lineEnd": 1136
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.<init>()": {
                "lineStart": 1151,
                "lineEnd": 1153
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.and()": {
                "lineStart": 1155,
                "lineEnd": 1157
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.disable()": {
                "lineStart": 1159,
                "lineEnd": 1162
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.cache()": {
                "lineStart": 1164,
                "lineEnd": 1166
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.cache(Customizer<CacheSpec> cacheCustomizer)": {
                "lineStart": 1168,
                "lineEnd": 1171
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.contentTypeOptions()": {
                "lineStart": 1173,
                "lineEnd": 1175
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.contentTypeOptions(Customizer<ContentTypeOptionsSpec> contentTypeOptionsCustomizer)": {
                "lineStart": 1177,
                "lineEnd": 1180
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.frameOptions()": {
                "lineStart": 1182,
                "lineEnd": 1184
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.frameOptions(Customizer<FrameOptionsSpec> frameOptionsCustomizer)": {
                "lineStart": 1186,
                "lineEnd": 1189
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.writer(ServerHttpHeadersWriter serverHttpHeadersWriter)": {
                "lineStart": 1191,
                "lineEnd": 1195
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.hsts()": {
                "lineStart": 1197,
                "lineEnd": 1199
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.hsts(Customizer<HstsSpec> hstsCustomizer)": {
                "lineStart": 1201,
                "lineEnd": 1204
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1206,
                "lineEnd": 1210
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.xssProtection()": {
                "lineStart": 1212,
                "lineEnd": 1214
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.xssProtection(Customizer<XssProtectionSpec> xssProtectionCustomizer)": {
                "lineStart": 1216,
                "lineEnd": 1219
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.contentSecurityPolicy(String policyDirectives)": {
                "lineStart": 1221,
                "lineEnd": 1223
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.contentSecurityPolicy(Customizer<ContentSecurityPolicySpec> contentSecurityPolicyCustomizer)": {
                "lineStart": 1225,
                "lineEnd": 1228
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.featurePolicy(String policyDirectives)": {
                "lineStart": 1230,
                "lineEnd": 1232
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.permissionsPolicy()": {
                "lineStart": 1234,
                "lineEnd": 1236
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.permissionsPolicy(Customizer<PermissionsPolicySpec> permissionsPolicyCustomizer)": {
                "lineStart": 1238,
                "lineEnd": 1241
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.referrerPolicy(ReferrerPolicy referrerPolicy)": {
                "lineStart": 1243,
                "lineEnd": 1245
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.referrerPolicy()": {
                "lineStart": 1247,
                "lineEnd": 1249
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec.referrerPolicy(Customizer<ReferrerPolicySpec> referrerPolicyCustomizer)": {
                "lineStart": 1251,
                "lineEnd": 1254
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$CacheSpec.<init>()": {
                "lineStart": 1257,
                "lineEnd": 1258
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$CacheSpec.disable()": {
                "lineStart": 1260,
                "lineEnd": 1263
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentTypeOptionsSpec.<init>()": {
                "lineStart": 1268,
                "lineEnd": 1269
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentTypeOptionsSpec.disable()": {
                "lineStart": 1271,
                "lineEnd": 1274
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$FrameOptionsSpec.<init>()": {
                "lineStart": 1279,
                "lineEnd": 1280
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$FrameOptionsSpec.mode(XFrameOptionsServerHttpHeadersWriter.Mode mode)": {
                "lineStart": 1282,
                "lineEnd": 1285
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$FrameOptionsSpec.and()": {
                "lineStart": 1287,
                "lineEnd": 1289
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$FrameOptionsSpec.disable()": {
                "lineStart": 1291,
                "lineEnd": 1294
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$HstsSpec.<init>()": {
                "lineStart": 1299,
                "lineEnd": 1300
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$HstsSpec.maxAge(Duration maxAge)": {
                "lineStart": 1302,
                "lineEnd": 1305
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$HstsSpec.includeSubdomains(boolean includeSubDomains)": {
                "lineStart": 1307,
                "lineEnd": 1310
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$HstsSpec.preload(boolean preload)": {
                "lineStart": 1312,
                "lineEnd": 1315
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$HstsSpec.and()": {
                "lineStart": 1317,
                "lineEnd": 1319
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$HstsSpec.disable()": {
                "lineStart": 1321,
                "lineEnd": 1324
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$XssProtectionSpec.<init>()": {
                "lineStart": 1329,
                "lineEnd": 1330
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$XssProtectionSpec.disable()": {
                "lineStart": 1332,
                "lineEnd": 1335
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentSecurityPolicySpec.<init>()": {
                "lineStart": 1341,
                "lineEnd": 1343
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentSecurityPolicySpec.reportOnly(boolean reportOnly)": {
                "lineStart": 1345,
                "lineEnd": 1348
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentSecurityPolicySpec.policyDirectives(String policyDirectives)": {
                "lineStart": 1350,
                "lineEnd": 1353
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentSecurityPolicySpec.and()": {
                "lineStart": 1355,
                "lineEnd": 1357
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ContentSecurityPolicySpec.<init>(String policyDirectives)": {
                "lineStart": 1359,
                "lineEnd": 1361
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$FeaturePolicySpec.<init>(String policyDirectives)": {
                "lineStart": 1366,
                "lineEnd": 1368
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$FeaturePolicySpec.and()": {
                "lineStart": 1370,
                "lineEnd": 1372
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$PermissionsPolicySpec.<init>()": {
                "lineStart": 1377,
                "lineEnd": 1378
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$PermissionsPolicySpec.policy(String policy)": {
                "lineStart": 1380,
                "lineEnd": 1383
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$PermissionsPolicySpec.and()": {
                "lineStart": 1385,
                "lineEnd": 1387
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ReferrerPolicySpec.<init>()": {
                "lineStart": 1392,
                "lineEnd": 1393
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ReferrerPolicySpec.<init>(ReferrerPolicy referrerPolicy)": {
                "lineStart": 1395,
                "lineEnd": 1397
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ReferrerPolicySpec.policy(ReferrerPolicy referrerPolicy)": {
                "lineStart": 1399,
                "lineEnd": 1402
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec$ReferrerPolicySpec.and()": {
                "lineStart": 1404,
                "lineEnd": 1406
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.<init>()": {
                "lineStart": 1416,
                "lineEnd": 1417
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.logoutHandler(ServerLogoutHandler logoutHandler)": {
                "lineStart": 1419,
                "lineEnd": 1423
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.addLogoutHandler(ServerLogoutHandler logoutHandler)": {
                "lineStart": 1425,
                "lineEnd": 1429
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.logoutUrl(String logoutUrl)": {
                "lineStart": 1431,
                "lineEnd": 1435
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.requiresLogout(ServerWebExchangeMatcher requiresLogout)": {
                "lineStart": 1437,
                "lineEnd": 1440
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.logoutSuccessHandler(ServerLogoutSuccessHandler handler)": {
                "lineStart": 1442,
                "lineEnd": 1445
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.and()": {
                "lineStart": 1447,
                "lineEnd": 1449
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.disable()": {
                "lineStart": 1451,
                "lineEnd": 1454
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.createLogoutHandler()": {
                "lineStart": 1456,
                "lineEnd": 1471
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1473,
                "lineEnd": 1480
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OrderedWebFilter.<init>(WebFilter webFilter, int order)": {
                "lineStart": 1487,
                "lineEnd": 1490
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OrderedWebFilter.filter(ServerWebExchange exchange, WebFilterChain chain)": {
                "lineStart": 1492,
                "lineEnd": 1494
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OrderedWebFilter.getOrder()": {
                "lineStart": 1496,
                "lineEnd": 1498
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OrderedWebFilter.toString()": {
                "lineStart": 1500,
                "lineEnd": 1502
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter.filter(ServerWebExchange exchange, WebFilterChain chain)": {
                "lineStart": 1507,
                "lineEnd": 1509
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec.<init>()": {
                "lineStart": 1515,
                "lineEnd": 1516
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec.configurationSource(CorsConfigurationSource source)": {
                "lineStart": 1518,
                "lineEnd": 1521
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec.disable()": {
                "lineStart": 1523,
                "lineEnd": 1526
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec.and()": {
                "lineStart": 1528,
                "lineEnd": 1530
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1532,
                "lineEnd": 1538
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec.getCorsFilter()": {
                "lineStart": 1540,
                "lineEnd": 1557
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.<init>()": {
                "lineStart": 1564,
                "lineEnd": 1565
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.principalExtractor(X509PrincipalExtractor principalExtractor)": {
                "lineStart": 1567,
                "lineEnd": 1570
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.authenticationManager(ReactiveAuthenticationManager authenticationManager)": {
                "lineStart": 1572,
                "lineEnd": 1575
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.and()": {
                "lineStart": 1577,
                "lineEnd": 1579
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.configure(ServerHttpSecurity http)": {
                "lineStart": 1581,
                "lineEnd": 1587
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.getPrincipalExtractor()": {
                "lineStart": 1589,
                "lineEnd": 1595
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$X509Spec.getAuthenticationManager()": {
                "lineStart": 1597,
                "lineEnd": 1604
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.<init>()": {
                "lineStart": 1619,
                "lineEnd": 1620
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authenticationManager(ReactiveAuthenticationManager authenticationManager)": {
                "lineStart": 1622,
                "lineEnd": 1625
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.securityContextRepository(ServerSecurityContextRepository securityContextRepository)": {
                "lineStart": 1627,
                "lineEnd": 1630
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authenticationSuccessHandler(ServerAuthenticationSuccessHandler authenticationSuccessHandler)": {
                "lineStart": 1632,
                "lineEnd": 1636
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authenticationFailureHandler(ServerAuthenticationFailureHandler authenticationFailureHandler)": {
                "lineStart": 1638,
                "lineEnd": 1642
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthenticationManager()": {
                "lineStart": 1644,
                "lineEnd": 1650
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.createDefault()": {
                "lineStart": 1652,
                "lineEnd": 1677
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authenticationConverter(ServerAuthenticationConverter authenticationConverter)": {
                "lineStart": 1679,
                "lineEnd": 1682
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthenticationConverter(ReactiveClientRegistrationRepository clientRegistrationRepository)": {
                "lineStart": 1684,
                "lineEnd": 1694
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.clientRegistrationRepository(ReactiveClientRegistrationRepository clientRegistrationRepository)": {
                "lineStart": 1696,
                "lineEnd": 1699
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authorizedClientService(ReactiveOAuth2AuthorizedClientService authorizedClientService)": {
                "lineStart": 1701,
                "lineEnd": 1704
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authorizedClientRepository(ServerOAuth2AuthorizedClientRepository authorizedClientRepository)": {
                "lineStart": 1706,
                "lineEnd": 1709
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository)": {
                "lineStart": 1711,
                "lineEnd": 1714
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authorizationRequestResolver(ServerOAuth2AuthorizationRequestResolver authorizationRequestResolver)": {
                "lineStart": 1716,
                "lineEnd": 1719
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.authenticationMatcher(ServerWebExchangeMatcher authenticationMatcher)": {
                "lineStart": 1721,
                "lineEnd": 1724
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthenticationMatcher()": {
                "lineStart": 1726,
                "lineEnd": 1732
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.and()": {
                "lineStart": 1734,
                "lineEnd": 1736
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1738,
                "lineEnd": 1755
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.setDefaultEntryPoints(ServerHttpSecurity http)": {
                "lineStart": 1757,
                "lineEnd": 1789
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthenticationSuccessHandler(ServerHttpSecurity http)": {
                "lineStart": 1791,
                "lineEnd": 1799
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthenticationFailureHandler()": {
                "lineStart": 1801,
                "lineEnd": 1807
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.createAttemptAuthenticationRequestMatcher()": {
                "lineStart": 1809,
                "lineEnd": 1811
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getOidcUserService()": {
                "lineStart": 1813,
                "lineEnd": 1821
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getOauth2UserService()": {
                "lineStart": 1823,
                "lineEnd": 1831
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getLinks()": {
                "lineStart": 1833,
                "lineEnd": 1849
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAccessTokenResponseClient()": {
                "lineStart": 1851,
                "lineEnd": 1859
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getClientRegistrationRepository()": {
                "lineStart": 1861,
                "lineEnd": 1867
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getRedirectWebFilter()": {
                "lineStart": 1869,
                "lineEnd": 1876
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthorizedClientRepository()": {
                "lineStart": 1878,
                "lineEnd": 1893
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthorizationRequestRepository()": {
                "lineStart": 1895,
                "lineEnd": 1901
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2LoginSpec.getAuthorizedClientService()": {
                "lineStart": 1903,
                "lineEnd": 1910
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.<init>()": {
                "lineStart": 1920,
                "lineEnd": 1921
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.authenticationConverter(ServerAuthenticationConverter authenticationConverter)": {
                "lineStart": 1923,
                "lineEnd": 1926
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.getAuthenticationConverter()": {
                "lineStart": 1928,
                "lineEnd": 1936
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.authenticationManager(ReactiveAuthenticationManager authenticationManager)": {
                "lineStart": 1938,
                "lineEnd": 1941
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.getAuthenticationManager()": {
                "lineStart": 1943,
                "lineEnd": 1949
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.clientRegistrationRepository(ReactiveClientRegistrationRepository clientRegistrationRepository)": {
                "lineStart": 1951,
                "lineEnd": 1954
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.authorizedClientRepository(ServerOAuth2AuthorizedClientRepository authorizedClientRepository)": {
                "lineStart": 1956,
                "lineEnd": 1959
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.authorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository)": {
                "lineStart": 1961,
                "lineEnd": 1964
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.getAuthorizationRequestRepository()": {
                "lineStart": 1966,
                "lineEnd": 1972
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.and()": {
                "lineStart": 1974,
                "lineEnd": 1976
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 1978,
                "lineEnd": 1997
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.getClientRegistrationRepository()": {
                "lineStart": 1999,
                "lineEnd": 2005
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.getAuthorizedClientRepository()": {
                "lineStart": 2007,
                "lineEnd": 2023
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ClientSpec.getAuthorizedClientService()": {
                "lineStart": 2025,
                "lineEnd": 2032
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.accessDeniedHandler(ServerAccessDeniedHandler accessDeniedHandler)": {
                "lineStart": 2044,
                "lineEnd": 2048
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.authenticationEntryPoint(ServerAuthenticationEntryPoint entryPoint)": {
                "lineStart": 2050,
                "lineEnd": 2054
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.bearerTokenConverter(ServerAuthenticationConverter bearerTokenConverter)": {
                "lineStart": 2056,
                "lineEnd": 2060
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.authenticationManagerResolver(ReactiveAuthenticationManagerResolver<ServerWebExchange> authenticationManagerResolver)": {
                "lineStart": 2062,
                "lineEnd": 2066
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.jwt()": {
                "lineStart": 2068,
                "lineEnd": 2074
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.jwt(Customizer<JwtSpec> jwtCustomizer)": {
                "lineStart": 2076,
                "lineEnd": 2083
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.opaqueToken()": {
                "lineStart": 2085,
                "lineEnd": 2091
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.opaqueToken(Customizer<OpaqueTokenSpec> opaqueTokenCustomizer)": {
                "lineStart": 2093,
                "lineEnd": 2100
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 2102,
                "lineEnd": 2123
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.validateConfiguration()": {
                "lineStart": 2125,
                "lineEnd": 2135
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.registerDefaultAccessDeniedHandler(ServerHttpSecurity http)": {
                "lineStart": 2137,
                "lineEnd": 2142
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.registerDefaultAuthenticationEntryPoint(ServerHttpSecurity http)": {
                "lineStart": 2144,
                "lineEnd": 2149
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.registerDefaultCsrfOverride(ServerHttpSecurity http)": {
                "lineStart": 2151,
                "lineEnd": 2157
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec.and()": {
                "lineStart": 2159,
                "lineEnd": 2161
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.authenticationManager(ReactiveAuthenticationManager authenticationManager)": {
                "lineStart": 2167,
                "lineEnd": 2171
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.jwtAuthenticationConverter(Converter<Jwt, ? extends Mono<? extends AbstractAuthenticationToken>> jwtAuthenticationConverter)": {
                "lineStart": 2173,
                "lineEnd": 2177
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.jwtDecoder(ReactiveJwtDecoder jwtDecoder)": {
                "lineStart": 2179,
                "lineEnd": 2182
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.publicKey(RSAPublicKey publicKey)": {
                "lineStart": 2184,
                "lineEnd": 2187
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.jwkSetUri(String jwkSetUri)": {
                "lineStart": 2189,
                "lineEnd": 2192
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.and()": {
                "lineStart": 2194,
                "lineEnd": 2196
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 2198,
                "lineEnd": 2204
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.getJwtDecoder()": {
                "lineStart": 2206,
                "lineEnd": 2208
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.getJwtAuthenticationConverter()": {
                "lineStart": 2210,
                "lineEnd": 2223
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$JwtSpec.getAuthenticationManager()": {
                "lineStart": 2225,
                "lineEnd": 2235
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.<init>()": {
                "lineStart": 2244,
                "lineEnd": 2245
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.introspectionUri(String introspectionUri)": {
                "lineStart": 2247,
                "lineEnd": 2252
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.introspectionClientCredentials(String clientId, String clientSecret)": {
                "lineStart": 2254,
                "lineEnd": 2261
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.introspector(ReactiveOpaqueTokenIntrospector introspector)": {
                "lineStart": 2263,
                "lineEnd": 2267
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.and()": {
                "lineStart": 2269,
                "lineEnd": 2271
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.getAuthenticationManager()": {
                "lineStart": 2273,
                "lineEnd": 2275
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.getIntrospector()": {
                "lineStart": 2277,
                "lineEnd": 2283
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$OAuth2ResourceServerSpec$OpaqueTokenSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 2285,
                "lineEnd": 2291
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.key(String key)": {
                "lineStart": 2302,
                "lineEnd": 2305
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.principal(Object principal)": {
                "lineStart": 2307,
                "lineEnd": 2310
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.authorities(List<GrantedAuthority> authorities)": {
                "lineStart": 2312,
                "lineEnd": 2315
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.authorities(String... authorities)": {
                "lineStart": 2317,
                "lineEnd": 2319
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.authenticationFilter(AnonymousAuthenticationWebFilter authenticationFilter)": {
                "lineStart": 2321,
                "lineEnd": 2324
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.and()": {
                "lineStart": 2326,
                "lineEnd": 2328
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.disable()": {
                "lineStart": 2330,
                "lineEnd": 2333
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.configure(ServerHttpSecurity http)": {
                "lineStart": 2335,
                "lineEnd": 2341
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.getKey()": {
                "lineStart": 2343,
                "lineEnd": 2349
            },
            "org.springframework.security.config.web.server.ServerHttpSecurity$AnonymousSpec.<init>()": {
                "lineStart": 2351,
                "lineEnd": 2352
            }
        },
        "0e0a3dbbcf-PathPatternParserServerWebExchangeMatcher.java": {
            "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.<init>(String pattern, HttpMethod method)": {
                "lineStart": 29,
                "lineEnd": 33
            }
        },
        "5b7bec52c7-ServerWebExchangeMatchers.java": {
            "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.<init>()": {
                "lineStart": 8,
                "lineEnd": 9
            },
            "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod method, String... patterns)": {
                "lineStart": 11,
                "lineEnd": 18
            },
            "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String... patterns)": {
                "lineStart": 20,
                "lineEnd": 22
            },
            "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher... matchers)": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()": {
                "lineStart": 28,
                "lineEnd": 36
            }
        }
    },
    "CVE-2022-25190": {
        "9a6e700-ConjurAPI.java": {
            "org.conjur.jenkins.api.ConjurAPI.getLogger()": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "org.conjur.jenkins.api.ConjurAPI.defaultToEnvironment(ConjurAuthnInfo conjurAuthn)": {
                "lineStart": 47,
                "lineEnd": 61
            },
            "org.conjur.jenkins.api.ConjurAPI.getAuthorizationToken(OkHttpClient client, ConjurConfiguration configuration, ModelObject context)": {
                "lineStart": 63,
                "lineEnd": 103
            },
            "org.conjur.jenkins.api.ConjurAPI.getConjurAuthnInfo(ConjurConfiguration configuration, List<UsernamePasswordCredentials> availableCredentials, ModelObject context)": {
                "lineStart": 105,
                "lineEnd": 131
            },
            "org.conjur.jenkins.api.ConjurAPI.setConjurAuthnForJITCredentialAccess(ModelObject context, ConjurAuthnInfo conjurAuthn)": {
                "lineStart": 133,
                "lineEnd": 142
            },
            "org.conjur.jenkins.api.ConjurAPI.getSecret(OkHttpClient client, ConjurConfiguration configuration, String authToken, String variablePath)": {
                "lineStart": 144,
                "lineEnd": 157
            },
            "org.conjur.jenkins.api.ConjurAPI.logConjurConfiguration(ConjurConfiguration conjurConfiguration)": {
                "lineStart": 159,
                "lineEnd": 168
            },
            "org.conjur.jenkins.api.ConjurAPI.initializeWithCredential(ConjurAuthnInfo conjurAuthn, String credentialID, List<UsernamePasswordCredentials> availableCredentials)": {
                "lineStart": 170,
                "lineEnd": 181
            },
            "org.conjur.jenkins.api.ConjurAPI.getConfigurationFromContext(ModelObject context, ModelObject storeContext)": {
                "lineStart": 183,
                "lineEnd": 211
            },
            "org.conjur.jenkins.api.ConjurAPI.inheritedConjurConfiguration(Item job)": {
                "lineStart": 213,
                "lineEnd": 223
            },
            "org.conjur.jenkins.api.ConjurAPI.<init>()": {
                "lineStart": 225,
                "lineEnd": 227
            }
        },
        "3f4af4e-ConjurSecretCredentialsDescriptor.java": {
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsDescriptor.doFillCredentialIDItems(@AncestorInPath final Item item, @QueryParameter final String uri)": {
                "lineStart": 15,
                "lineEnd": 17
            }
        },
        "76b60e2-ConjurSecretCredentialsImpl.java": {
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl$DescriptorImpl.getDisplayName()": {
                "lineStart": 22,
                "lineEnd": 24
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.getLogger()": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.<init>(@CheckForNull CredentialsScope scope, @CheckForNull String id, @CheckForNull String variablePath, @CheckForNull String description)": {
                "lineStart": 38,
                "lineEnd": 41
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.getDisplayName()": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.secretFromString(String secretString)": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.getSecret()": {
                "lineStart": 51,
                "lineEnd": 65
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.getVariablePath()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.setConjurConfiguration(ConjurConfiguration conjurConfiguration)": {
                "lineStart": 71,
                "lineEnd": 75
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.setContext(ModelObject context)": {
                "lineStart": 77,
                "lineEnd": 81
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.setStoreContext(ModelObject storeContext)": {
                "lineStart": 83,
                "lineEnd": 87
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.setVariablePath(String variablePath)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.conjur.jenkins.conjursecrets.ConjurSecretCredentialsImpl.getNameTag()": {
                "lineStart": 93,
                "lineEnd": 95
            }
        },
        "e7816b4-ConjurSecretUsernameCredentialsImpl.java": {
            "org.conjur.jenkins.conjursecrets.ConjurSecretUsernameCredentialsImpl$DescriptorImpl.doFillCredentialIDItems(@AncestorInPath final Item item, @QueryParameter final String uri)": {
                "lineStart": 68,
                "lineEnd": 71
            }
        },
        "8b3ef5b-ConjurSecretUsernameSSHKeyCredentialsImpl.java": {
            "org.conjur.jenkins.conjursecrets.ConjurSecretUsernameSSHKeyCredentialsImpl$DescriptorImpl.doFillCredentialIDItems(@AncestorInPath final Item item, @QueryParameter final String uri)": {
                "lineStart": 69,
                "lineEnd": 71
            }
        }
    },
    "CVE-2021-21643": {
        "65ac50d-ServerCredentialMapping.java": {
            "org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath ItemGroup context, @QueryParameter String serverId)": {
                "lineStart": 40,
                "lineEnd": 52
            }
        },
        "61de015-PropertiesCredentialMapping.java": {
            "org.jenkinsci.plugins.configfiles.properties.security.PropertiesCredentialMapping$DescriptorImpl.doFillCredentialsIdItems(@AncestorInPath ItemGroup context, @QueryParameter String propertyKey)": {
                "lineStart": 44,
                "lineEnd": 56
            }
        }
    },
    "CVE-2023-0105": {
        "d9b998c6e6-IdentityBrokerService.java": {
            "org.keycloak.services.resources.IdentityBrokerService.setBasicUserAttributes(BrokeredIdentityContext context, UserModel federatedUser)": {
                "lineStart": 835,
                "lineEnd": 839
            }
        }
    },
    "CVE-2021-41411": {
        "7c15b326b3-KieModuleMarshaller.java": {
            "org.drools.compiler.kproject.models.KieModuleMarshaller$KieModuleValidator.validate(Source source, Source duplicateSource)": {
                "lineStart": 168,
                "lineEnd": 185
            }
        }
    },
    "CVE-2023-27903": {
        "4cfb35fca1-FileParameterDefinition.java": {
            "hudson.model.FileParameterDefinition.createValue(CLICommand command, String value)": {
                "lineStart": 71,
                "lineEnd": 87
            }
        }
    },
    "CVE-2023-0044": {
        "c1bc8c8e960-WebAuthnRecorder.java": {
            "io.quarkus.security.webauthn.WebAuthnRecorder.setupWebAuthnAuthenticationMechanism()": {
                "lineStart": 38,
                "lineEnd": 65
            }
        },
        "a52967b6a48-FormAuthenticationMechanism.java": {
            "io.quarkus.vertx.http.runtime.security.FormAuthenticationMechanism.<init>(String loginPage, String postLocation, String usernameParameter, String passwordParameter, String errorPage, String landingPage, boolean redirectAfterLogin, String locationCookie, String cookieSameSite, PersistentLoginManager loginManager)": {
                "lineStart": 38,
                "lineEnd": 49
            },
            "io.quarkus.vertx.http.runtime.security.FormAuthenticationMechanism.storeInitialLocation(final RoutingContext exchange)": {
                "lineStart": 143,
                "lineEnd": 145
            }
        },
        "d56e829a846-HttpSecurityRecorder.java": {
            "io.quarkus.vertx.http.runtime.security.HttpSecurityRecorder.setupFormAuth()": {
                "lineStart": 228,
                "lineEnd": 262
            }
        },
        "48b52baafb3-PersistentLoginManager.java": {
            "io.quarkus.vertx.http.runtime.security.PersistentLoginManager.<init>(String encryptionKey, String cookieName, long timeoutMillis, long newCookieIntervalMillis, boolean httpOnlyCookie, String cookieSameSite)": {
                "lineStart": 29,
                "lineEnd": 53
            },
            "io.quarkus.vertx.http.runtime.security.PersistentLoginManager.save(String value, RoutingContext context, String cookieName, RestoreResult restoreResult, boolean secureCookie)": {
                "lineStart": 104,
                "lineEnd": 135
            }
        }
    },
    "CVE-2023-24430": {
        "fdcea76-PomParser.java": {
            "org.jenkinsci.plugins.SemanticVersioning.parsing.PomParser.getPom(FilePath workspace)": {
                "lineStart": 44,
                "lineEnd": 72
            }
        }
    },
    "CVE-2021-33813": {
        "a1462334-SAXBuilder.java": {
            "org.jdom2.input.SAXBuilder.setFeature(final String name, final boolean value)": {
                "lineStart": 215,
                "lineEnd": 218
            }
        }
    },
    "CVE-2023-2631": {
        "77643c9-CodeDxPublisher.java": {
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckUrl(@QueryParameter final String value, @QueryParameter final String selfSignedCertificateFingerprint)": {
                "lineStart": 564,
                "lineEnd": 596
            },
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doCheckSelfSignedCertificateFingerprint(@QueryParameter final String value, @QueryParameter final String url)": {
                "lineStart": 598,
                "lineEnd": 622
            },
            "org.jenkinsci.plugins.codedx.CodeDxPublisher$DescriptorImpl.doFillProjectIdItems(@QueryParameter final String url, @QueryParameter final String selfSignedCertificateFingerprint, @QueryParameter final String key, @AncestorInPath AbstractProject project)": {
                "lineStart": 666,
                "lineEnd": 699
            }
        }
    },
    "CVE-2021-38388": {
        "3e1e8a65-ContentServiceV1.java": {
            "com.linecorp.centraldogma.server.internal.api.ContentServiceV1.push(@Param @Default(\"-1\") String revision, Repository repository, Author author, CommitMessageDto commitMessage, @RequestConverter(ChangesRequestConverter.class) Iterable<Change<?>> changes)": {
                "lineStart": 120,
                "lineEnd": 123
            }
        },
        "e3f320e6-DefaultMetaRepository.java": {
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository.<init>(Repository repo)": {
                "lineStart": 49,
                "lineEnd": 51
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository.mirrors()": {
                "lineStart": 53,
                "lineEnd": 70
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository.loadMirrors(int rev)": {
                "lineStart": 72,
                "lineEnd": 108
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository.loadCredentials(Map<String, Entry<?>> entries)": {
                "lineStart": 110,
                "lineEnd": 136
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$MirrorConfig.toMirrors(Project parent, Iterable<MirrorCredential> credentials)": {
                "lineStart": 143,
                "lineEnd": 143
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$MirrorConfig.findCredential(Iterable<MirrorCredential> credentials, URI remoteUri, @Nullable String credentialId)": {
                "lineStart": 144,
                "lineEnd": 166
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$MirrorConfig.<init>(boolean enabled)": {
                "lineStart": 169,
                "lineEnd": 171
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$SingleMirrorConfig.<init>(@JsonProperty(\"enabled\") @Nullable Boolean enabled, @JsonProperty(\"schedule\") @Nullable String schedule, @JsonProperty(value = \"direction\", required = true) MirrorDirection direction, @JsonProperty(value = \"localRepo\", required = true) String localRepo, @JsonProperty(\"localPath\") @Nullable String localPath, @JsonProperty(value = \"remoteUri\", required = true) URI remoteUri, @JsonProperty(\"credentialId\") @Nullable String credentialId)": {
                "lineStart": 183,
                "lineEnd": 192
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$SingleMirrorConfig.toMirrors(Project parent, Iterable<MirrorCredential> credentials)": {
                "lineStart": 194,
                "lineEnd": 201
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$MultipleMirrorConfig.<init>(@JsonProperty(\"enabled\") @Nullable Boolean enabled, @JsonProperty(\"defaultSchedule\") @Nullable String defaultSchedule, @JsonProperty(value = \"defaultDirection\", required = true) MirrorDirection defaultDirection, @JsonProperty(\"defaultLocalPath\") @Nullable String defaultLocalPath, @JsonProperty(\"defaultCredentialId\") @Nullable String defaultCredentialId, @JsonProperty(value = \"includes\", required = true) @JsonDeserialize(contentAs = MirrorInclude.class) Iterable<MirrorInclude> includes, @JsonProperty(\"excludes\") @Nullable @JsonDeserialize(contentAs = Pattern.class) Iterable<Pattern> excludes)": {
                "lineStart": 213,
                "lineEnd": 228
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$MultipleMirrorConfig.toMirrors(Project parent, Iterable<MirrorCredential> credentials)": {
                "lineStart": 230,
                "lineEnd": 256
            },
            "com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository$MirrorInclude.<init>(@JsonProperty(\"schedule\") @Nullable String schedule, @JsonProperty(value = \"pattern\", required = true) Pattern pattern, @JsonProperty(value = \"replacement\", required = true) String replacement, @JsonProperty(\"direction\") @Nullable MirrorDirection direction, @JsonProperty(\"localPath\") @Nullable String localPath, @JsonProperty(\"credentialId\") @Nullable String credentialId)": {
                "lineStart": 271,
                "lineEnd": 279
            }
        },
        "2fbb77c9-CentralDogmaServiceImpl.java": {
            "com.linecorp.centraldogma.server.internal.thrift.CentralDogmaServiceImpl.push(String projectName, String repositoryName, Revision baseRevision, Author author, String summary, Comment detail, List<Change> changes, AsyncMethodCallback resultHandler)": {
                "lineStart": 197,
                "lineEnd": 203
            }
        }
    },
    "CVE-2022-4725": {
        "caed9c468e-RegionMetadataParser.java": {
            "com.amazonaws.regions.RegionMetadataParser.internalParse(final InputStream input, final boolean endpointVerification)": {
                "lineStart": 36,
                "lineEnd": 70
            }
        },
        "18c35fc2f9-XpathUtils.java": {
            "com.amazonaws.util.XpathUtils.documentFrom(InputStream is)": {
                "lineStart": 23,
                "lineEnd": 28
            },
            "com.amazonaws.util.XpathUtils.documentFrom(String xml)": {
                "lineStart": 30,
                "lineEnd": 32
            },
            "com.amazonaws.util.XpathUtils.documentFrom(URL url)": {
                "lineStart": 34,
                "lineEnd": 36
            },
            "com.amazonaws.util.XpathUtils.asDouble(String expression, Node node)": {
                "lineStart": 38,
                "lineEnd": 41
            },
            "com.amazonaws.util.XpathUtils.asString(String expression, Node node)": {
                "lineStart": 43,
                "lineEnd": 45
            },
            "com.amazonaws.util.XpathUtils.asInteger(String expression, Node node)": {
                "lineStart": 47,
                "lineEnd": 50
            },
            "com.amazonaws.util.XpathUtils.asBoolean(String expression, Node node)": {
                "lineStart": 52,
                "lineEnd": 55
            },
            "com.amazonaws.util.XpathUtils.asFloat(String expression, Node node)": {
                "lineStart": 57,
                "lineEnd": 60
            },
            "com.amazonaws.util.XpathUtils.asLong(String expression, Node node)": {
                "lineStart": 62,
                "lineEnd": 65
            },
            "com.amazonaws.util.XpathUtils.asByte(String expression, Node node)": {
                "lineStart": 67,
                "lineEnd": 70
            },
            "com.amazonaws.util.XpathUtils.asDate(String expression, Node node)": {
                "lineStart": 72,
                "lineEnd": 78
            },
            "com.amazonaws.util.XpathUtils.asByteBuffer(String expression, Node node)": {
                "lineStart": 80,
                "lineEnd": 91
            },
            "com.amazonaws.util.XpathUtils.isEmpty(Node node)": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "com.amazonaws.util.XpathUtils.nodeLength(NodeList list)": {
                "lineStart": 97,
                "lineEnd": 99
            },
            "com.amazonaws.util.XpathUtils.evaluateAsString(String expression, Node node)": {
                "lineStart": 101,
                "lineEnd": 113
            },
            "com.amazonaws.util.XpathUtils.asNode(String nodeName, Node node)": {
                "lineStart": 115,
                "lineEnd": 120
            },
            "com.amazonaws.util.XpathUtils.isEmptyString(String s)": {
                "lineStart": 122,
                "lineEnd": 130
            },
            "com.amazonaws.util.XpathUtils.xpath()": {
                "lineStart": 132,
                "lineEnd": 134
            }
        }
    },
    "CVE-2021-21640": {
        "40c50e4f76-View.java": {
            "hudson.model.View.create(StaplerRequest req, StaplerResponse rsp, ViewGroup owner)": {
                "lineStart": 958,
                "lineEnd": 996
            }
        }
    },
    "CVE-2023-32732": {
        "f6b82775f-AbstractXdsClient.java": {
            "io.grpc.xds.AbstractXdsClient$AbstractAdsStream.handleRpcCompleted()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "io.grpc.xds.AbstractXdsClient$AbstractAdsStream.handleRpcStreamClosed(Status error)": {
                "lineStart": 233,
                "lineEnd": 250
            },
            "io.grpc.xds.AbstractXdsClient$AdsStreamV3.start()": {
                "lineStart": 277,
                "lineEnd": 331
            },
            "io.grpc.xds.AbstractXdsClient.readyHandler()": {
                "lineStart": 151,
                "lineEnd": 157
            }
        },
        "e7ed64aea-XdsClientImpl.java": {
            "io.grpc.xds.XdsClientImpl$ResourceSubscriber.<init>(XdsResourceType<T> type, String resource)": {
                "lineStart": 430,
                "lineEnd": 449
            }
        }
    },
    "CVE-2022-45787": {
        "ac13cd98-TempFileStorageProvider.java": {
            "org.apache.james.mime4j.storage.TempFileStorageProvider.createStorageOutputStream()": {
                "lineStart": 45,
                "lineEnd": 49
            }
        }
    },
    "CVE-2020-13692": {
        "49018891-PGProperty.java": {
            "org.postgresql.PGProperty.<init>(String name, String defaultValue, String description)": {
                "lineStart": 19,
                "lineEnd": 21
            },
            "org.postgresql.PGProperty.<init>(String name, String defaultValue, String description, boolean required)": {
                "lineStart": 23,
                "lineEnd": 25
            },
            "org.postgresql.PGProperty.<init>(String name, String defaultValue, String description, boolean required, String[] choices)": {
                "lineStart": 27,
                "lineEnd": 39
            },
            "org.postgresql.PGProperty.getName()": {
                "lineStart": 52,
                "lineEnd": 54
            },
            "org.postgresql.PGProperty.getDefaultValue()": {
                "lineStart": 56,
                "lineEnd": 58
            },
            "org.postgresql.PGProperty.isRequired()": {
                "lineStart": 60,
                "lineEnd": 62
            },
            "org.postgresql.PGProperty.getDescription()": {
                "lineStart": 64,
                "lineEnd": 66
            },
            "org.postgresql.PGProperty.getChoices()": {
                "lineStart": 68,
                "lineEnd": 70
            },
            "org.postgresql.PGProperty.isDeprecated()": {
                "lineStart": 72,
                "lineEnd": 74
            },
            "org.postgresql.PGProperty.get(Properties properties)": {
                "lineStart": 76,
                "lineEnd": 78
            },
            "org.postgresql.PGProperty.set(Properties properties, String value)": {
                "lineStart": 80,
                "lineEnd": 88
            },
            "org.postgresql.PGProperty.getBoolean(Properties properties)": {
                "lineStart": 90,
                "lineEnd": 92
            },
            "org.postgresql.PGProperty.getIntNoCheck(Properties properties)": {
                "lineStart": 94,
                "lineEnd": 97
            },
            "org.postgresql.PGProperty.getInt(Properties properties)": {
                "lineStart": 99,
                "lineEnd": 108
            },
            "org.postgresql.PGProperty.getInteger(Properties properties)": {
                "lineStart": 110,
                "lineEnd": 123
            },
            "org.postgresql.PGProperty.set(Properties properties, boolean value)": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "org.postgresql.PGProperty.set(Properties properties, int value)": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "org.postgresql.PGProperty.isPresent(Properties properties)": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "org.postgresql.PGProperty.toDriverPropertyInfo(Properties properties)": {
                "lineStart": 137,
                "lineEnd": 143
            },
            "org.postgresql.PGProperty.forName(String name)": {
                "lineStart": 145,
                "lineEnd": 147
            },
            "org.postgresql.PGProperty.getSetString(Properties properties)": {
                "lineStart": 149,
                "lineEnd": 156
            }
        },
        "2dbba964-BaseConnection.java": {
            "org.postgresql.core.BaseConnection.cancelQuery()": {
                "lineStart": 12,
                "lineEnd": 12
            },
            "org.postgresql.core.BaseConnection.execSQLQuery(String s)": {
                "lineStart": 13,
                "lineEnd": 13
            },
            "org.postgresql.core.BaseConnection.execSQLQuery(String s, int resultSetType, int resultSetConcurrency)": {
                "lineStart": 14,
                "lineEnd": 14
            },
            "org.postgresql.core.BaseConnection.execSQLUpdate(String s)": {
                "lineStart": 15,
                "lineEnd": 15
            },
            "org.postgresql.core.BaseConnection.getQueryExecutor()": {
                "lineStart": 16,
                "lineEnd": 16
            },
            "org.postgresql.core.BaseConnection.getReplicationProtocol()": {
                "lineStart": 17,
                "lineEnd": 17
            },
            "org.postgresql.core.BaseConnection.getObject(String type, String value, byte[] byteValue)": {
                "lineStart": 18,
                "lineEnd": 18
            },
            "org.postgresql.core.BaseConnection.getEncoding()": {
                "lineStart": 19,
                "lineEnd": 19
            },
            "org.postgresql.core.BaseConnection.getTypeInfo()": {
                "lineStart": 20,
                "lineEnd": 20
            },
            "org.postgresql.core.BaseConnection.haveMinimumServerVersion(int ver)": {
                "lineStart": 21,
                "lineEnd": 21
            },
            "org.postgresql.core.BaseConnection.haveMinimumServerVersion(Version ver)": {
                "lineStart": 22,
                "lineEnd": 22
            },
            "org.postgresql.core.BaseConnection.encodeString(String str)": {
                "lineStart": 23,
                "lineEnd": 23
            },
            "org.postgresql.core.BaseConnection.escapeString(String str)": {
                "lineStart": 24,
                "lineEnd": 24
            },
            "org.postgresql.core.BaseConnection.getStandardConformingStrings()": {
                "lineStart": 25,
                "lineEnd": 25
            },
            "org.postgresql.core.BaseConnection.getTimestampUtils()": {
                "lineStart": 26,
                "lineEnd": 26
            },
            "org.postgresql.core.BaseConnection.getLogger()": {
                "lineStart": 27,
                "lineEnd": 27
            },
            "org.postgresql.core.BaseConnection.getStringVarcharFlag()": {
                "lineStart": 28,
                "lineEnd": 28
            },
            "org.postgresql.core.BaseConnection.getTransactionState()": {
                "lineStart": 29,
                "lineEnd": 29
            },
            "org.postgresql.core.BaseConnection.binaryTransferSend(int oid)": {
                "lineStart": 30,
                "lineEnd": 30
            },
            "org.postgresql.core.BaseConnection.isColumnSanitiserDisabled()": {
                "lineStart": 31,
                "lineEnd": 31
            },
            "org.postgresql.core.BaseConnection.addTimerTask(TimerTask timerTask, long milliSeconds)": {
                "lineStart": 32,
                "lineEnd": 32
            },
            "org.postgresql.core.BaseConnection.purgeTimerTasks()": {
                "lineStart": 33,
                "lineEnd": 33
            },
            "org.postgresql.core.BaseConnection.getFieldMetadataCache()": {
                "lineStart": 34,
                "lineEnd": 34
            },
            "org.postgresql.core.BaseConnection.createQuery(String sql, boolean escapeProcessing, boolean isParameterized, String... columnNames)": {
                "lineStart": 35,
                "lineEnd": 35
            },
            "org.postgresql.core.BaseConnection.setFlushCacheOnDeallocate(boolean flushCacheOnDeallocate)": {
                "lineStart": 36,
                "lineEnd": 36
            },
            "org.postgresql.core.BaseConnection.hintReadOnly()": {
                "lineStart": 37,
                "lineEnd": 37
            }
        },
        "bf596b9e-BaseDataSource.java": {
            "org.postgresql.ds.common.BaseDataSource.getConnection()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.postgresql.ds.common.BaseDataSource.getConnection(String user, String password)": {
                "lineStart": 51,
                "lineEnd": 65
            },
            "org.postgresql.ds.common.BaseDataSource.getLogWriter()": {
                "lineStart": 67,
                "lineEnd": 69
            },
            "org.postgresql.ds.common.BaseDataSource.setLogWriter(PrintWriter printWriter)": {
                "lineStart": 71,
                "lineEnd": 72
            },
            "org.postgresql.ds.common.BaseDataSource.getServerName()": {
                "lineStart": 74,
                "lineEnd": 76
            },
            "org.postgresql.ds.common.BaseDataSource.getServerNames()": {
                "lineStart": 78,
                "lineEnd": 80
            },
            "org.postgresql.ds.common.BaseDataSource.setServerName(String serverName)": {
                "lineStart": 82,
                "lineEnd": 84
            },
            "org.postgresql.ds.common.BaseDataSource.setServerNames(String[] serverNames)": {
                "lineStart": 86,
                "lineEnd": 102
            },
            "org.postgresql.ds.common.BaseDataSource.getDatabaseName()": {
                "lineStart": 104,
                "lineEnd": 106
            },
            "org.postgresql.ds.common.BaseDataSource.setDatabaseName(String databaseName)": {
                "lineStart": 108,
                "lineEnd": 110
            },
            "org.postgresql.ds.common.BaseDataSource.getDescription()": {
                "lineStart": 112,
                "lineEnd": 112
            },
            "org.postgresql.ds.common.BaseDataSource.getUser()": {
                "lineStart": 113,
                "lineEnd": 115
            },
            "org.postgresql.ds.common.BaseDataSource.setUser(String user)": {
                "lineStart": 117,
                "lineEnd": 119
            },
            "org.postgresql.ds.common.BaseDataSource.getPassword()": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "org.postgresql.ds.common.BaseDataSource.setPassword(String password)": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "org.postgresql.ds.common.BaseDataSource.getPortNumber()": {
                "lineStart": 129,
                "lineEnd": 135
            },
            "org.postgresql.ds.common.BaseDataSource.getPortNumbers()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "org.postgresql.ds.common.BaseDataSource.setPortNumber(int portNumber)": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "org.postgresql.ds.common.BaseDataSource.setPortNumbers(int[] portNumbers)": {
                "lineStart": 145,
                "lineEnd": 151
            },
            "org.postgresql.ds.common.BaseDataSource.getOptions()": {
                "lineStart": 153,
                "lineEnd": 155
            },
            "org.postgresql.ds.common.BaseDataSource.setOptions(String options)": {
                "lineStart": 157,
                "lineEnd": 159
            },
            "org.postgresql.ds.common.BaseDataSource.getLoginTimeout()": {
                "lineStart": 161,
                "lineEnd": 163
            },
            "org.postgresql.ds.common.BaseDataSource.setLoginTimeout(int loginTimeout)": {
                "lineStart": 165,
                "lineEnd": 167
            },
            "org.postgresql.ds.common.BaseDataSource.getConnectTimeout()": {
                "lineStart": 169,
                "lineEnd": 171
            },
            "org.postgresql.ds.common.BaseDataSource.setConnectTimeout(int connectTimeout)": {
                "lineStart": 173,
                "lineEnd": 175
            },
            "org.postgresql.ds.common.BaseDataSource.getProtocolVersion()": {
                "lineStart": 177,
                "lineEnd": 185
            },
            "org.postgresql.ds.common.BaseDataSource.setProtocolVersion(int protocolVersion)": {
                "lineStart": 187,
                "lineEnd": 195
            },
            "org.postgresql.ds.common.BaseDataSource.getReceiveBufferSize()": {
                "lineStart": 197,
                "lineEnd": 199
            },
            "org.postgresql.ds.common.BaseDataSource.setReceiveBufferSize(int nbytes)": {
                "lineStart": 201,
                "lineEnd": 203
            },
            "org.postgresql.ds.common.BaseDataSource.getSendBufferSize()": {
                "lineStart": 205,
                "lineEnd": 207
            },
            "org.postgresql.ds.common.BaseDataSource.setSendBufferSize(int nbytes)": {
                "lineStart": 209,
                "lineEnd": 211
            },
            "org.postgresql.ds.common.BaseDataSource.setPrepareThreshold(int count)": {
                "lineStart": 213,
                "lineEnd": 215
            },
            "org.postgresql.ds.common.BaseDataSource.getPrepareThreshold()": {
                "lineStart": 217,
                "lineEnd": 219
            },
            "org.postgresql.ds.common.BaseDataSource.getPreparedStatementCacheQueries()": {
                "lineStart": 221,
                "lineEnd": 223
            },
            "org.postgresql.ds.common.BaseDataSource.setPreparedStatementCacheQueries(int cacheSize)": {
                "lineStart": 225,
                "lineEnd": 227
            },
            "org.postgresql.ds.common.BaseDataSource.getPreparedStatementCacheSizeMiB()": {
                "lineStart": 229,
                "lineEnd": 231
            },
            "org.postgresql.ds.common.BaseDataSource.setPreparedStatementCacheSizeMiB(int cacheSize)": {
                "lineStart": 233,
                "lineEnd": 235
            },
            "org.postgresql.ds.common.BaseDataSource.getDatabaseMetadataCacheFields()": {
                "lineStart": 237,
                "lineEnd": 239
            },
            "org.postgresql.ds.common.BaseDataSource.setDatabaseMetadataCacheFields(int cacheSize)": {
                "lineStart": 241,
                "lineEnd": 243
            },
            "org.postgresql.ds.common.BaseDataSource.getDatabaseMetadataCacheFieldsMiB()": {
                "lineStart": 245,
                "lineEnd": 247
            },
            "org.postgresql.ds.common.BaseDataSource.setDatabaseMetadataCacheFieldsMiB(int cacheSize)": {
                "lineStart": 249,
                "lineEnd": 251
            },
            "org.postgresql.ds.common.BaseDataSource.setDefaultRowFetchSize(int fetchSize)": {
                "lineStart": 253,
                "lineEnd": 255
            },
            "org.postgresql.ds.common.BaseDataSource.getDefaultRowFetchSize()": {
                "lineStart": 257,
                "lineEnd": 259
            },
            "org.postgresql.ds.common.BaseDataSource.setUnknownLength(int unknownLength)": {
                "lineStart": 261,
                "lineEnd": 263
            },
            "org.postgresql.ds.common.BaseDataSource.getUnknownLength()": {
                "lineStart": 265,
                "lineEnd": 267
            },
            "org.postgresql.ds.common.BaseDataSource.setSocketTimeout(int seconds)": {
                "lineStart": 269,
                "lineEnd": 271
            },
            "org.postgresql.ds.common.BaseDataSource.getSocketTimeout()": {
                "lineStart": 273,
                "lineEnd": 275
            },
            "org.postgresql.ds.common.BaseDataSource.setCancelSignalTimeout(int seconds)": {
                "lineStart": 277,
                "lineEnd": 279
            },
            "org.postgresql.ds.common.BaseDataSource.getCancelSignalTimeout()": {
                "lineStart": 281,
                "lineEnd": 283
            },
            "org.postgresql.ds.common.BaseDataSource.setSsl(boolean enabled)": {
                "lineStart": 285,
                "lineEnd": 293
            },
            "org.postgresql.ds.common.BaseDataSource.getSsl()": {
                "lineStart": 295,
                "lineEnd": 297
            },
            "org.postgresql.ds.common.BaseDataSource.setSslfactory(String classname)": {
                "lineStart": 299,
                "lineEnd": 301
            },
            "org.postgresql.ds.common.BaseDataSource.getSslfactory()": {
                "lineStart": 303,
                "lineEnd": 305
            },
            "org.postgresql.ds.common.BaseDataSource.getSslMode()": {
                "lineStart": 307,
                "lineEnd": 309
            },
            "org.postgresql.ds.common.BaseDataSource.setSslMode(String mode)": {
                "lineStart": 311,
                "lineEnd": 313
            },
            "org.postgresql.ds.common.BaseDataSource.getSslFactoryArg()": {
                "lineStart": 315,
                "lineEnd": 317
            },
            "org.postgresql.ds.common.BaseDataSource.setSslFactoryArg(String arg)": {
                "lineStart": 319,
                "lineEnd": 321
            },
            "org.postgresql.ds.common.BaseDataSource.getSslHostnameVerifier()": {
                "lineStart": 323,
                "lineEnd": 325
            },
            "org.postgresql.ds.common.BaseDataSource.setSslHostnameVerifier(String className)": {
                "lineStart": 327,
                "lineEnd": 329
            },
            "org.postgresql.ds.common.BaseDataSource.getSslCert()": {
                "lineStart": 331,
                "lineEnd": 333
            },
            "org.postgresql.ds.common.BaseDataSource.setSslCert(String file)": {
                "lineStart": 335,
                "lineEnd": 337
            },
            "org.postgresql.ds.common.BaseDataSource.getSslKey()": {
                "lineStart": 339,
                "lineEnd": 341
            },
            "org.postgresql.ds.common.BaseDataSource.setSslKey(String file)": {
                "lineStart": 343,
                "lineEnd": 345
            },
            "org.postgresql.ds.common.BaseDataSource.getSslRootCert()": {
                "lineStart": 347,
                "lineEnd": 349
            },
            "org.postgresql.ds.common.BaseDataSource.setSslRootCert(String file)": {
                "lineStart": 351,
                "lineEnd": 353
            },
            "org.postgresql.ds.common.BaseDataSource.getSslPassword()": {
                "lineStart": 355,
                "lineEnd": 357
            },
            "org.postgresql.ds.common.BaseDataSource.setSslPassword(String password)": {
                "lineStart": 359,
                "lineEnd": 361
            },
            "org.postgresql.ds.common.BaseDataSource.getSslPasswordCallback()": {
                "lineStart": 363,
                "lineEnd": 365
            },
            "org.postgresql.ds.common.BaseDataSource.setSslPasswordCallback(String className)": {
                "lineStart": 367,
                "lineEnd": 369
            },
            "org.postgresql.ds.common.BaseDataSource.setApplicationName(String applicationName)": {
                "lineStart": 371,
                "lineEnd": 373
            },
            "org.postgresql.ds.common.BaseDataSource.getApplicationName()": {
                "lineStart": 375,
                "lineEnd": 377
            },
            "org.postgresql.ds.common.BaseDataSource.setTargetServerType(String targetServerType)": {
                "lineStart": 379,
                "lineEnd": 381
            },
            "org.postgresql.ds.common.BaseDataSource.getTargetServerType()": {
                "lineStart": 383,
                "lineEnd": 385
            },
            "org.postgresql.ds.common.BaseDataSource.setLoadBalanceHosts(boolean loadBalanceHosts)": {
                "lineStart": 387,
                "lineEnd": 389
            },
            "org.postgresql.ds.common.BaseDataSource.getLoadBalanceHosts()": {
                "lineStart": 391,
                "lineEnd": 393
            },
            "org.postgresql.ds.common.BaseDataSource.setHostRecheckSeconds(int hostRecheckSeconds)": {
                "lineStart": 395,
                "lineEnd": 397
            },
            "org.postgresql.ds.common.BaseDataSource.getHostRecheckSeconds()": {
                "lineStart": 399,
                "lineEnd": 401
            },
            "org.postgresql.ds.common.BaseDataSource.setTcpKeepAlive(boolean enabled)": {
                "lineStart": 403,
                "lineEnd": 405
            },
            "org.postgresql.ds.common.BaseDataSource.getTcpKeepAlive()": {
                "lineStart": 407,
                "lineEnd": 409
            },
            "org.postgresql.ds.common.BaseDataSource.setBinaryTransfer(boolean enabled)": {
                "lineStart": 411,
                "lineEnd": 413
            },
            "org.postgresql.ds.common.BaseDataSource.getBinaryTransfer()": {
                "lineStart": 415,
                "lineEnd": 417
            },
            "org.postgresql.ds.common.BaseDataSource.setBinaryTransferEnable(String oidList)": {
                "lineStart": 419,
                "lineEnd": 421
            },
            "org.postgresql.ds.common.BaseDataSource.getBinaryTransferEnable()": {
                "lineStart": 423,
                "lineEnd": 425
            },
            "org.postgresql.ds.common.BaseDataSource.setBinaryTransferDisable(String oidList)": {
                "lineStart": 427,
                "lineEnd": 429
            },
            "org.postgresql.ds.common.BaseDataSource.getBinaryTransferDisable()": {
                "lineStart": 431,
                "lineEnd": 433
            },
            "org.postgresql.ds.common.BaseDataSource.getStringType()": {
                "lineStart": 435,
                "lineEnd": 437
            },
            "org.postgresql.ds.common.BaseDataSource.setStringType(String stringType)": {
                "lineStart": 439,
                "lineEnd": 441
            },
            "org.postgresql.ds.common.BaseDataSource.isColumnSanitiserDisabled()": {
                "lineStart": 443,
                "lineEnd": 445
            },
            "org.postgresql.ds.common.BaseDataSource.getDisableColumnSanitiser()": {
                "lineStart": 447,
                "lineEnd": 449
            },
            "org.postgresql.ds.common.BaseDataSource.setDisableColumnSanitiser(boolean disableColumnSanitiser)": {
                "lineStart": 451,
                "lineEnd": 453
            },
            "org.postgresql.ds.common.BaseDataSource.getCurrentSchema()": {
                "lineStart": 455,
                "lineEnd": 457
            },
            "org.postgresql.ds.common.BaseDataSource.setCurrentSchema(String currentSchema)": {
                "lineStart": 459,
                "lineEnd": 461
            },
            "org.postgresql.ds.common.BaseDataSource.getReadOnly()": {
                "lineStart": 463,
                "lineEnd": 465
            },
            "org.postgresql.ds.common.BaseDataSource.setReadOnly(boolean readOnly)": {
                "lineStart": 467,
                "lineEnd": 469
            },
            "org.postgresql.ds.common.BaseDataSource.getReadOnlyMode()": {
                "lineStart": 471,
                "lineEnd": 473
            },
            "org.postgresql.ds.common.BaseDataSource.setReadOnlyMode(String mode)": {
                "lineStart": 475,
                "lineEnd": 477
            },
            "org.postgresql.ds.common.BaseDataSource.getLogUnclosedConnections()": {
                "lineStart": 479,
                "lineEnd": 481
            },
            "org.postgresql.ds.common.BaseDataSource.setLogUnclosedConnections(boolean enabled)": {
                "lineStart": 483,
                "lineEnd": 485
            },
            "org.postgresql.ds.common.BaseDataSource.getLogServerErrorDetail()": {
                "lineStart": 487,
                "lineEnd": 489
            },
            "org.postgresql.ds.common.BaseDataSource.setLogServerErrorDetail(boolean enabled)": {
                "lineStart": 491,
                "lineEnd": 493
            },
            "org.postgresql.ds.common.BaseDataSource.getAssumeMinServerVersion()": {
                "lineStart": 495,
                "lineEnd": 497
            },
            "org.postgresql.ds.common.BaseDataSource.setAssumeMinServerVersion(String minVersion)": {
                "lineStart": 499,
                "lineEnd": 501
            },
            "org.postgresql.ds.common.BaseDataSource.getJaasApplicationName()": {
                "lineStart": 503,
                "lineEnd": 505
            },
            "org.postgresql.ds.common.BaseDataSource.setJaasApplicationName(String name)": {
                "lineStart": 507,
                "lineEnd": 509
            },
            "org.postgresql.ds.common.BaseDataSource.getJaasLogin()": {
                "lineStart": 511,
                "lineEnd": 513
            },
            "org.postgresql.ds.common.BaseDataSource.setJaasLogin(boolean doLogin)": {
                "lineStart": 515,
                "lineEnd": 517
            },
            "org.postgresql.ds.common.BaseDataSource.getKerberosServerName()": {
                "lineStart": 519,
                "lineEnd": 521
            },
            "org.postgresql.ds.common.BaseDataSource.setKerberosServerName(String serverName)": {
                "lineStart": 523,
                "lineEnd": 525
            },
            "org.postgresql.ds.common.BaseDataSource.getUseSpNego()": {
                "lineStart": 527,
                "lineEnd": 529
            },
            "org.postgresql.ds.common.BaseDataSource.setUseSpNego(boolean use)": {
                "lineStart": 531,
                "lineEnd": 533
            },
            "org.postgresql.ds.common.BaseDataSource.getGssLib()": {
                "lineStart": 535,
                "lineEnd": 537
            },
            "org.postgresql.ds.common.BaseDataSource.setGssLib(String lib)": {
                "lineStart": 539,
                "lineEnd": 541
            },
            "org.postgresql.ds.common.BaseDataSource.getSspiServiceClass()": {
                "lineStart": 543,
                "lineEnd": 545
            },
            "org.postgresql.ds.common.BaseDataSource.setSspiServiceClass(String serviceClass)": {
                "lineStart": 547,
                "lineEnd": 549
            },
            "org.postgresql.ds.common.BaseDataSource.getAllowEncodingChanges()": {
                "lineStart": 551,
                "lineEnd": 553
            },
            "org.postgresql.ds.common.BaseDataSource.setAllowEncodingChanges(boolean allow)": {
                "lineStart": 555,
                "lineEnd": 557
            },
            "org.postgresql.ds.common.BaseDataSource.getSocketFactory()": {
                "lineStart": 559,
                "lineEnd": 561
            },
            "org.postgresql.ds.common.BaseDataSource.setSocketFactory(String socketFactoryClassName)": {
                "lineStart": 563,
                "lineEnd": 565
            },
            "org.postgresql.ds.common.BaseDataSource.getSocketFactoryArg()": {
                "lineStart": 567,
                "lineEnd": 569
            },
            "org.postgresql.ds.common.BaseDataSource.setSocketFactoryArg(String socketFactoryArg)": {
                "lineStart": 571,
                "lineEnd": 573
            },
            "org.postgresql.ds.common.BaseDataSource.setReplication(String replication)": {
                "lineStart": 575,
                "lineEnd": 577
            },
            "org.postgresql.ds.common.BaseDataSource.getEscapeSyntaxCallMode()": {
                "lineStart": 579,
                "lineEnd": 581
            },
            "org.postgresql.ds.common.BaseDataSource.setEscapeSyntaxCallMode(String callMode)": {
                "lineStart": 583,
                "lineEnd": 585
            },
            "org.postgresql.ds.common.BaseDataSource.getReplication()": {
                "lineStart": 587,
                "lineEnd": 589
            },
            "org.postgresql.ds.common.BaseDataSource.getLoggerLevel()": {
                "lineStart": 591,
                "lineEnd": 593
            },
            "org.postgresql.ds.common.BaseDataSource.setLoggerLevel(String loggerLevel)": {
                "lineStart": 595,
                "lineEnd": 597
            },
            "org.postgresql.ds.common.BaseDataSource.getLoggerFile()": {
                "lineStart": 599,
                "lineEnd": 602
            },
            "org.postgresql.ds.common.BaseDataSource.setLoggerFile(String loggerFile)": {
                "lineStart": 604,
                "lineEnd": 606
            },
            "org.postgresql.ds.common.BaseDataSource.getUrl()": {
                "lineStart": 608,
                "lineEnd": 644
            },
            "org.postgresql.ds.common.BaseDataSource.getURL()": {
                "lineStart": 646,
                "lineEnd": 648
            },
            "org.postgresql.ds.common.BaseDataSource.setUrl(String url)": {
                "lineStart": 650,
                "lineEnd": 663
            },
            "org.postgresql.ds.common.BaseDataSource.setURL(String url)": {
                "lineStart": 665,
                "lineEnd": 667
            },
            "org.postgresql.ds.common.BaseDataSource.getProperty(String name)": {
                "lineStart": 669,
                "lineEnd": 678
            },
            "org.postgresql.ds.common.BaseDataSource.setProperty(String name, String value)": {
                "lineStart": 680,
                "lineEnd": 689
            },
            "org.postgresql.ds.common.BaseDataSource.getProperty(PGProperty property)": {
                "lineStart": 691,
                "lineEnd": 693
            },
            "org.postgresql.ds.common.BaseDataSource.setProperty(PGProperty property, String value)": {
                "lineStart": 695,
                "lineEnd": 731
            },
            "org.postgresql.ds.common.BaseDataSource.createReference()": {
                "lineStart": 733,
                "lineEnd": 735
            },
            "org.postgresql.ds.common.BaseDataSource.getReference()": {
                "lineStart": 737,
                "lineEnd": 778
            },
            "org.postgresql.ds.common.BaseDataSource.setFromReference(Reference ref)": {
                "lineStart": 780,
                "lineEnd": 807
            },
            "org.postgresql.ds.common.BaseDataSource.getReferenceProperty(Reference ref, String propertyName)": {
                "lineStart": 809,
                "lineEnd": 816
            },
            "org.postgresql.ds.common.BaseDataSource.writeBaseObject(ObjectOutputStream out)": {
                "lineStart": 818,
                "lineEnd": 825
            },
            "org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream in)": {
                "lineStart": 827,
                "lineEnd": 834
            },
            "org.postgresql.ds.common.BaseDataSource.initializeFrom(BaseDataSource source)": {
                "lineStart": 836,
                "lineEnd": 844
            },
            "org.postgresql.ds.common.BaseDataSource.getPreferQueryMode()": {
                "lineStart": 846,
                "lineEnd": 848
            },
            "org.postgresql.ds.common.BaseDataSource.setPreferQueryMode(PreferQueryMode preferQueryMode)": {
                "lineStart": 850,
                "lineEnd": 852
            },
            "org.postgresql.ds.common.BaseDataSource.getAutosave()": {
                "lineStart": 854,
                "lineEnd": 856
            },
            "org.postgresql.ds.common.BaseDataSource.setAutosave(AutoSave autoSave)": {
                "lineStart": 858,
                "lineEnd": 860
            },
            "org.postgresql.ds.common.BaseDataSource.getCleanupSavepoints()": {
                "lineStart": 862,
                "lineEnd": 864
            },
            "org.postgresql.ds.common.BaseDataSource.setCleanupSavepoints(boolean cleanupSavepoints)": {
                "lineStart": 866,
                "lineEnd": 868
            },
            "org.postgresql.ds.common.BaseDataSource.getReWriteBatchedInserts()": {
                "lineStart": 870,
                "lineEnd": 872
            },
            "org.postgresql.ds.common.BaseDataSource.setReWriteBatchedInserts(boolean reWrite)": {
                "lineStart": 874,
                "lineEnd": 876
            },
            "org.postgresql.ds.common.BaseDataSource.getHideUnprivilegedObjects()": {
                "lineStart": 878,
                "lineEnd": 880
            },
            "org.postgresql.ds.common.BaseDataSource.setHideUnprivilegedObjects(boolean hideUnprivileged)": {
                "lineStart": 882,
                "lineEnd": 884
            },
            "org.postgresql.ds.common.BaseDataSource.getMaxResultBuffer()": {
                "lineStart": 886,
                "lineEnd": 888
            },
            "org.postgresql.ds.common.BaseDataSource.setMaxResultBuffer(String maxResultBuffer)": {
                "lineStart": 890,
                "lineEnd": 892
            },
            "org.postgresql.ds.common.BaseDataSource.getParentLogger()": {
                "lineStart": 894,
                "lineEnd": 896
            },
            "org.postgresql.ds.common.BaseDataSource.isSsl()": {
                "lineStart": 898,
                "lineEnd": 900
            },
            "org.postgresql.ds.common.BaseDataSource.getSslfactoryarg()": {
                "lineStart": 902,
                "lineEnd": 904
            },
            "org.postgresql.ds.common.BaseDataSource.setSslfactoryarg(final String arg)": {
                "lineStart": 906,
                "lineEnd": 908
            },
            "org.postgresql.ds.common.BaseDataSource.getSslcert()": {
                "lineStart": 910,
                "lineEnd": 912
            },
            "org.postgresql.ds.common.BaseDataSource.setSslcert(final String file)": {
                "lineStart": 914,
                "lineEnd": 916
            },
            "org.postgresql.ds.common.BaseDataSource.getSslmode()": {
                "lineStart": 918,
                "lineEnd": 920
            },
            "org.postgresql.ds.common.BaseDataSource.setSslmode(final String mode)": {
                "lineStart": 922,
                "lineEnd": 924
            },
            "org.postgresql.ds.common.BaseDataSource.getSslhostnameverifier()": {
                "lineStart": 926,
                "lineEnd": 928
            },
            "org.postgresql.ds.common.BaseDataSource.setSslhostnameverifier(final String className)": {
                "lineStart": 930,
                "lineEnd": 932
            },
            "org.postgresql.ds.common.BaseDataSource.getSslkey()": {
                "lineStart": 934,
                "lineEnd": 936
            },
            "org.postgresql.ds.common.BaseDataSource.setSslkey(final String file)": {
                "lineStart": 938,
                "lineEnd": 940
            },
            "org.postgresql.ds.common.BaseDataSource.getSslrootcert()": {
                "lineStart": 942,
                "lineEnd": 944
            },
            "org.postgresql.ds.common.BaseDataSource.setSslrootcert(final String file)": {
                "lineStart": 946,
                "lineEnd": 948
            },
            "org.postgresql.ds.common.BaseDataSource.getSslpasswordcallback()": {
                "lineStart": 950,
                "lineEnd": 952
            },
            "org.postgresql.ds.common.BaseDataSource.setSslpasswordcallback(final String className)": {
                "lineStart": 954,
                "lineEnd": 956
            },
            "org.postgresql.ds.common.BaseDataSource.getSslpassword()": {
                "lineStart": 958,
                "lineEnd": 960
            },
            "org.postgresql.ds.common.BaseDataSource.setSslpassword(final String sslpassword)": {
                "lineStart": 962,
                "lineEnd": 964
            },
            "org.postgresql.ds.common.BaseDataSource.getRecvBufferSize()": {
                "lineStart": 966,
                "lineEnd": 968
            },
            "org.postgresql.ds.common.BaseDataSource.setRecvBufferSize(final int nbytes)": {
                "lineStart": 970,
                "lineEnd": 972
            },
            "org.postgresql.ds.common.BaseDataSource.isAllowEncodingChanges()": {
                "lineStart": 974,
                "lineEnd": 976
            },
            "org.postgresql.ds.common.BaseDataSource.isLogUnclosedConnections()": {
                "lineStart": 978,
                "lineEnd": 980
            },
            "org.postgresql.ds.common.BaseDataSource.isTcpKeepAlive()": {
                "lineStart": 982,
                "lineEnd": 984
            },
            "org.postgresql.ds.common.BaseDataSource.isReadOnly()": {
                "lineStart": 986,
                "lineEnd": 988
            },
            "org.postgresql.ds.common.BaseDataSource.isDisableColumnSanitiser()": {
                "lineStart": 990,
                "lineEnd": 992
            },
            "org.postgresql.ds.common.BaseDataSource.isLoadBalanceHosts()": {
                "lineStart": 994,
                "lineEnd": 996
            },
            "org.postgresql.ds.common.BaseDataSource.isCleanupSavePoints()": {
                "lineStart": 998,
                "lineEnd": 1000
            },
            "org.postgresql.ds.common.BaseDataSource.setCleanupSavePoints(final boolean cleanupSavepoints)": {
                "lineStart": 1002,
                "lineEnd": 1004
            },
            "org.postgresql.ds.common.BaseDataSource.isReWriteBatchedInserts()": {
                "lineStart": 1006,
                "lineEnd": 1008
            }
        },
        "17aa8985-PgConnection.java": {
            "org.postgresql.jdbc.PgConnection.<init>(HostSpec[] hostSpecs, String user, String database, Properties info, String url)": {
                "lineStart": 129,
                "lineEnd": 215
            }
        },
        "525ac146-PgSQLXML.java": {
            "org.postgresql.jdbc.PgSQLXML.getSource(Class<T> sourceClass)": {
                "lineStart": 98,
                "lineEnd": 132
            },
            "org.postgresql.jdbc.PgSQLXML.setResult(Class<T> resultClass)": {
                "lineStart": 156,
                "lineEnd": 198
            },
            "org.postgresql.jdbc.PgSQLXML.ensureInitialized()": {
                "lineStart": 213,
                "lineEnd": 260
            },
            "org.postgresql.jdbc.PgSQLXML$NonPrintingErrorHandler.error(SAXParseException e)": {
                "lineStart": 271,
                "lineEnd": 272
            },
            "org.postgresql.jdbc.PgSQLXML$NonPrintingErrorHandler.fatalError(SAXParseException e)": {
                "lineStart": 274,
                "lineEnd": 275
            },
            "org.postgresql.jdbc.PgSQLXML$NonPrintingErrorHandler.warning(SAXParseException e)": {
                "lineStart": 277,
                "lineEnd": 278
            }
        }
    },
    "CVE-2022-39135": {
        "8c8164752-XmlFunctions.java": {
            "org.apache.calcite.runtime.XmlFunctions.extractValue(@Nullable String input, @Nullable String xpath)": {
                "lineStart": 48,
                "lineEnd": 75
            },
            "org.apache.calcite.runtime.XmlFunctions.extractXml(@Nullable String xml, @Nullable String xpath, @Nullable String namespace)": {
                "lineStart": 105,
                "lineEnd": 136
            },
            "org.apache.calcite.runtime.XmlFunctions.existsNode(@Nullable String xml, @Nullable String xpath, @Nullable String namespace)": {
                "lineStart": 142,
                "lineEnd": 176
            }
        }
    },
    "CVE-2022-0673": {
        "a5517456-CacheResourceException.java": {
            "org.eclipse.lemminx.uriresolver.CacheResourceException.<init>(String resourceURI, String message)": {
                "lineStart": 6,
                "lineEnd": 8
            },
            "org.eclipse.lemminx.uriresolver.CacheResourceException.<init>(String resourceURI, String message, Throwable cause)": {
                "lineStart": 10,
                "lineEnd": 13
            },
            "org.eclipse.lemminx.uriresolver.CacheResourceException.getResourceURI()": {
                "lineStart": 15,
                "lineEnd": 17
            },
            "org.eclipse.lemminx.uriresolver.CacheResourceException.isDTD()": {
                "lineStart": 19,
                "lineEnd": 21
            }
        },
        "271de044-CacheResourcesManager.java": {
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.getResourceCachePath(String resourceURI)": {
                "lineStart": 173,
                "lineEnd": 176
            },
            "org.eclipse.lemminx.uriresolver.CacheResourcesManager.getResourceCachePath(URI uri)": {
                "lineStart": 178,
                "lineEnd": 181
            }
        },
        "d64e471f-FilesUtils.java": {
            "org.eclipse.lemminx.utils.FilesUtils.getCachePathSetting()": {
                "lineStart": 24,
                "lineEnd": 26
            },
            "org.eclipse.lemminx.utils.FilesUtils.setCachePathSetting(String cachePathSetting)": {
                "lineStart": 28,
                "lineEnd": 37
            },
            "org.eclipse.lemminx.utils.FilesUtils.<init>()": {
                "lineStart": 39,
                "lineEnd": 40
            },
            "org.eclipse.lemminx.utils.FilesUtils.resetDeployPath()": {
                "lineStart": 47,
                "lineEnd": 49
            },
            "org.eclipse.lemminx.utils.FilesUtils.normalizePath(String pathString)": {
                "lineStart": 51,
                "lineEnd": 65
            },
            "org.eclipse.lemminx.utils.FilesUtils.getDeployedBasePath()": {
                "lineStart": 67,
                "lineEnd": 87
            },
            "org.eclipse.lemminx.utils.FilesUtils.getDeployedPath(Path path)": {
                "lineStart": 89,
                "lineEnd": 91
            },
            "org.eclipse.lemminx.utils.FilesUtils.saveToFile(InputStream in, Path outFile)": {
                "lineStart": 93,
                "lineEnd": 95
            },
            "org.eclipse.lemminx.utils.FilesUtils.saveToFile(String content, Path outFile)": {
                "lineStart": 97,
                "lineEnd": 107
            },
            "org.eclipse.lemminx.utils.FilesUtils.getOffsetAfterScheme(String uri)": {
                "lineStart": 109,
                "lineEnd": 116
            },
            "org.eclipse.lemminx.utils.FilesUtils.getFilePathSlash(String text)": {
                "lineStart": 118,
                "lineEnd": 124
            },
            "org.eclipse.lemminx.utils.FilesUtils.convertToWindowsPath(String pathString)": {
                "lineStart": 126,
                "lineEnd": 141
            },
            "org.eclipse.lemminx.utils.FilesUtils.pathEndsWithFile(String pathString)": {
                "lineStart": 143,
                "lineEnd": 146
            },
            "org.eclipse.lemminx.utils.FilesUtils.isIncludedInDeployedPath(Path resourceCachePath)": {
                "lineStart": 148,
                "lineEnd": 150
            },
            "org.eclipse.lemminx.utils.FilesUtils.removeFileScheme(String fileURI)": {
                "lineStart": 152,
                "lineEnd": 154
            },
            "org.eclipse.lemminx.utils.FilesUtils.removeFileScheme(String fileURI, boolean removeLastSlash)": {
                "lineStart": 156,
                "lineEnd": 168
            },
            "org.eclipse.lemminx.utils.FilesUtils.toFile(String fileUri)": {
                "lineStart": 170,
                "lineEnd": 174
            },
            "org.eclipse.lemminx.utils.FilesUtils.getPath(String uri)": {
                "lineStart": 176,
                "lineEnd": 185
            },
            "org.eclipse.lemminx.utils.FilesUtils.encodePath(String path)": {
                "lineStart": 187,
                "lineEnd": 189
            }
        }
    },
    "CVE-2023-43500": {
        "e76950d-AnnotationHelper.java": {
            "com.sonyericsson.jenkins.plugins.bfa.AnnotationHelper.getBefore()": {
                "lineStart": 7,
                "lineEnd": 15
            }
        },
        "b3bf970-CauseManagement.java": {
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIconFileName()": {
                "lineStart": 34,
                "lineEnd": 42
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDisplayName()": {
                "lineStart": 44,
                "lineEnd": 55
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getUrlName()": {
                "lineStart": 57,
                "lineEnd": 59
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getImageUrl(String size, String name)": {
                "lineStart": 61,
                "lineEnd": 63
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getShallowCauses()": {
                "lineStart": 65,
                "lineEnd": 77
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.setErrorMessage(String message)": {
                "lineStart": 79,
                "lineEnd": 81
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isError(StaplerRequest request)": {
                "lineStart": 83,
                "lineEnd": 85
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getErrorMessage(StaplerRequest request)": {
                "lineStart": 87,
                "lineEnd": 89
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getDynamic(String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 91,
                "lineEnd": 99
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)": {
                "lineStart": 101,
                "lineEnd": 119
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwner()": {
                "lineStart": 121,
                "lineEnd": 123
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getOwnerUrl()": {
                "lineStart": 125,
                "lineEnd": 127
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getIndicationDescriptors()": {
                "lineStart": 129,
                "lineEnd": 131
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getPermission()": {
                "lineStart": 133,
                "lineEnd": 135
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getRemovePermission()": {
                "lineStart": 137,
                "lineEnd": 139
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.isUnderTest()": {
                "lineStart": 141,
                "lineEnd": 143
            },
            "com.sonyericsson.jenkins.plugins.bfa.CauseManagement.getInstance()": {
                "lineStart": 145,
                "lineEnd": 154
            }
        },
        "5b1e514-MongoDBKnowledgeBase.java": {
            "com.sonyericsson.jenkins.plugins.bfa.db.MongoDBKnowledgeBase$MongoDBKnowledgeBaseDescriptor.doTestConnection(@QueryParameter(\"host\") final String host, @QueryParameter(\"port\") final int port, @QueryParameter(\"dbName\") final String dbName, @QueryParameter(\"userName\") final String userName, @QueryParameter(\"password\") final String password, @QueryParameter(\"tls\") final boolean tls, @QueryParameter(\"retrywrites\") final boolean retryWrites)": {
                "lineStart": 623,
                "lineEnd": 639
            }
        }
    },
    "CVE-2022-41401": {
        "336ca25bf-ImportingUtilities.java": {
            "com.google.refine.importing.ImportingUtilities.retrieveContentFromPostRequest(HttpServletRequest request, Properties parameters, File rawDataDir, ObjectNode retrievalRecord, final Progress progress)": {
                "lineStart": 117,
                "lineEnd": 323
            }
        }
    },
    "CVE-2022-37866": {
        "3dacb7d5-IvyPatternHelper.java": {
            "org.apache.ivy.core.IvyPatternHelper.substitute(String pattern, String org, String module, String branch, String revision, String artifact, String type, String ext, String conf, ArtifactOrigin origin, Map<String, String> extraModuleAttributes, Map<String, String> extraArtifactAttributes)": {
                "lineStart": 75,
                "lineEnd": 119
            },
            "org.apache.ivy.core.IvyPatternHelper.substituteTokens(String pattern, Map<String, Object> tokens, boolean external)": {
                "lineStart": 180,
                "lineEnd": 280
            }
        },
        "497a5363-DefaultRepositoryCacheManager.java": {
            "org.apache.ivy.core.cache.DefaultRepositoryCacheManager.getCachedDataFile(ModuleRevisionId mRevId)": {
                "lineStart": 525,
                "lineEnd": 527
            },
            "org.apache.ivy.core.cache.DefaultRepositoryCacheManager.getCachedDataFile(String resolverName, ModuleRevisionId mRevId)": {
                "lineStart": 529,
                "lineEnd": 531
            },
            "org.apache.ivy.core.cache.DefaultRepositoryCacheManager.download(Artifact artifact, ArtifactResourceResolver resourceResolver, ResourceDownloader resourceDownloader, CacheDownloadOptions options)": {
                "lineStart": 792,
                "lineEnd": 885
            },
            "org.apache.ivy.core.cache.DefaultRepositoryCacheManager.downloadRepositoryResource(final Resource resource, String name, String type, String extension, CacheResourceOptions options, Repository repository)": {
                "lineStart": 915,
                "lineEnd": 1002
            }
        },
        "52c3400f-DefaultResolutionCacheManager.java": {
            "org.apache.ivy.core.cache.DefaultResolutionCacheManager.saveResolvedModuleDescriptor(ModuleDescriptor md)": {
                "lineStart": 143,
                "lineEnd": 156
            },
            "org.apache.ivy.core.cache.DefaultResolutionCacheManager.saveLocalParents(ModuleRevisionId baseMrevId, ModuleDescriptor md, File mdFile, Properties paths)": {
                "lineStart": 158,
                "lineEnd": 172
            }
        },
        "7333e32e-ResolveEngine.java": {
            "org.apache.ivy.core.resolve.ResolveEngine.resolve(ModuleDescriptor md, ResolveOptions options)": {
                "lineStart": 120,
                "lineEnd": 254
            }
        },
        "d50f047c-RetrieveEngine.java": {
            "org.apache.ivy.core.retrieve.RetrieveEngine.determineArtifactsToCopy(ModuleRevisionId mrid, String destFilePattern, RetrieveOptions options)": {
                "lineStart": 242,
                "lineEnd": 375
            }
        },
        "c4a31f3d-XmlReportOutputter.java": {
            "org.apache.ivy.plugins.report.XmlReportOutputter.output(ConfigurationResolveReport report, String resolveId, String[] confs, ResolutionCacheManager cacheMgr)": {
                "lineStart": 26,
                "lineEnd": 44
            }
        },
        "fa13de76-FileRepository.java": {
            "org.apache.ivy.plugins.repository.file.FileRepository.get(String source, File destination)": {
                "lineStart": 28,
                "lineEnd": 31
            },
            "org.apache.ivy.plugins.repository.file.FileRepository.put(File source, String destination, boolean overwrite)": {
                "lineStart": 33,
                "lineEnd": 36
            },
            "org.apache.ivy.plugins.repository.file.FileRepository.getFile(String source)": {
                "lineStart": 98,
                "lineEnd": 104
            }
        }
    },
    "CVE-2020-1961": {
        "aec38b878e-ClassFreeUberspect.java": {
            "org.apache.syncope.core.provisioning.java.jexl.ClassFreeUberspect.<init>()": {
                "lineStart": 6,
                "lineEnd": 8
            },
            "org.apache.syncope.core.provisioning.java.jexl.ClassFreeUberspect.getPropertyGet(final Object obj, final Object identifier)": {
                "lineStart": 10,
                "lineEnd": 12
            },
            "org.apache.syncope.core.provisioning.java.jexl.ClassFreeUberspect.getMethod(final Object obj, final String method, final Object... args)": {
                "lineStart": 14,
                "lineEnd": 16
            }
        },
        "037113e8d5-EmptyClassLoader.java": {
            "org.apache.syncope.core.provisioning.java.jexl.EmptyClassLoader.loadClass(final String name)": {
                "lineStart": 3,
                "lineEnd": 5
            },
            "org.apache.syncope.core.provisioning.java.jexl.EmptyClassLoader.loadClass(final String name, final boolean resolve)": {
                "lineStart": 7,
                "lineEnd": 9
            }
        },
        "d02042a3dd-JexlUtils.java": {
            "org.apache.syncope.core.provisioning.java.jexl.JexlUtils.getEngine()": {
                "lineStart": 40,
                "lineEnd": 49
            }
        },
        "a00e070d1e-DefaultNotificationManager.java": {
            "org.apache.syncope.core.provisioning.java.notification.DefaultNotificationManager.createTasks(final String who, final AuditElements.EventCategoryType type, final String category, final String subcategory, final String event, final Result condition, final Object before, final Object output, final Object... input)": {
                "lineStart": 186,
                "lineEnd": 270
            }
        }
    }
}