commit ad20d53c4107b9dc0b71555239e9cc7668f36776
Author: Michael Zillgith <michael.zillgith@mz-automation.de>
Date:   Fri Jan 6 14:31:31 2023 +0000

    - updated multi_client_server example

diff --git a/lib60870-C/examples/multi_client_server/multi_client_server.c b/lib60870-C/examples/multi_client_server/multi_client_server.c
index 18606bd..0c6a9c9 100644
--- a/lib60870-C/examples/multi_client_server/multi_client_server.c
+++ b/lib60870-C/examples/multi_client_server/multi_client_server.c
@@ -210,16 +210,6 @@ main(int argc, char** argv)
         goto exit_program;
     }
 
-    CS101_ASDU newAsdu = CS101_ASDU_create(appLayerParameters, false, CS101_COT_INITIALIZED, 0, 1, false, false);
-
-    InformationObject io = (InformationObject) EndOfInitialization_create(NULL, 0);
-
-    CS101_ASDU_addInformationObject(newAsdu, io);
-
-    InformationObject_destroy(io);
-
-    CS104_Slave_enqueueASDU(slave, newAsdu);
-
     int16_t scaledValue = 0;
 
     while (running) {
@@ -231,22 +221,26 @@ main(int argc, char** argv)
             printf("Connected clients: %i\n", openConnections);
         }
 
-        Thread_sleep(1000);
+        CS101_ASDU periodicAsdu = CS101_ASDU_create(appLayerParameters, false, CS101_COT_PERIODIC, 0, 1, false, false);
 
-        CS101_ASDU newAsdu = CS101_ASDU_create(appLayerParameters, false, CS101_COT_PERIODIC, 0, 1, false, false);
+        if (periodicAsdu) {
+            InformationObject io = (InformationObject) MeasuredValueScaled_create(NULL, 110, scaledValue, IEC60870_QUALITY_GOOD);
 
-        InformationObject io = (InformationObject) MeasuredValueScaled_create(NULL, 110, scaledValue, IEC60870_QUALITY_GOOD);
+            if (io) {
+                scaledValue++;
 
-        scaledValue++;
+                CS101_ASDU_addInformationObject(periodicAsdu, io);
 
-        CS101_ASDU_addInformationObject(newAsdu, io);
+                InformationObject_destroy(io);
 
-        InformationObject_destroy(io);
+                /* Add ASDU to slave event queue */
+                CS104_Slave_enqueueASDU(slave, periodicAsdu);
+            }
 
-        /* Add ASDU to slave event queue */
-        CS104_Slave_enqueueASDU(slave, newAsdu);
+            CS101_ASDU_destroy(periodicAsdu);
+        }
 
-        CS101_ASDU_destroy(newAsdu);
+        Thread_sleep(1000);
     }
 
     CS104_Slave_stop(slave);
