commit 1bdda93e348c160c84e30da3637acef26d0348de
Author: pancake <pancake@nopcode.org>
Date:   Thu Oct 19 17:43:43 2023 +0200

    Fix oobread in the java disassembler ##asan
    
    * Causes UB when performing analysis, not exploitable
    * https://huntr.com/bounties/bbfe1f76-8fa1-4a8c-909d-65b16e970be0/
    * Reported by @gandalf4a

diff --git a/shlr/java/code.c b/shlr/java/code.c
index 97347eb8d1..efafecf8c9 100644
--- a/shlr/java/code.c
+++ b/shlr/java/code.c
@@ -206,9 +206,9 @@ R_API int java_print_opcode(RBinJavaObj *obj, ut64 addr, int idx, const ut8 *byt
 	case 0xa6: // if_acmpne
 	case 0xa7: // goto
 	case 0xa8: // jsr
-		if (len > 1) {
-			snprintf (output, outlen, "%s 0x%04"PFMT64x, JAVA_OPS[idx].name,
-					(addr + (short)USHORT (bytes, 1)));
+		if (len > 3) {
+			const short delta = USHORT (bytes, 1);
+			snprintf (output, outlen, "%s 0x%04"PFMT64x, JAVA_OPS[idx].name, addr + delta);
 			output[outlen - 1] = 0;
 			return update_bytes_consumed (JAVA_OPS[idx].size);
 		}
