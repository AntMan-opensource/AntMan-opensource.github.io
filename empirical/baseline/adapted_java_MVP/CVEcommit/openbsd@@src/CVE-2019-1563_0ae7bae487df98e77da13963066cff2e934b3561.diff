commit 0ae7bae487df98e77da13963066cff2e934b3561
Author: tb <tb@openbsd.org>
Date:   Fri Oct 4 18:03:55 2019 +0000

    Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey.
    (Note that the CMS code is currently disabled.)
    
    Port of Edlinger's Fix for CVE-2019-1563 from OpenSSL 1.1.1 (old license)
    
    tests from bluhm@
    ok jsing
    
    commit e21f8cf78a125cd3c8c0d1a1a6c8bb0b901f893f
    Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
    Date:   Sun Sep 1 00:16:28 2019 +0200
    
        Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey
    
        An attack is simple, if the first CMS_recipientInfo is valid but the
        second CMS_recipientInfo is chosen ciphertext. If the second
        recipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct
        encryption key will be replaced by garbage, and the message cannot be
        decoded, but if the RSA decryption fails, the correct encryption key is
        used and the recipient will not notice the attack.
    
        As a work around for this potential attack the length of the decrypted
        key must be equal to the cipher default key length, in case the
        certifiate is not given and all recipientInfo are tried out.
    
        The old behaviour can be re-enabled in the CMS code by setting the
        CMS_DEBUG_DECRYPT flag.
    
        Reviewed-by: Matt Caswell <matt@openssl.org>
        (Merged from https://github.com/openssl/openssl/pull/9777)
    
        (cherry picked from commit 5840ed0cd1e6487d247efbc1a04136a41d7b3a37)

diff --git a/lib/libcrypto/cms/cms_env.c b/lib/libcrypto/cms/cms_env.c
index 8640f459fbd..74d957eee08 100644
--- a/lib/libcrypto/cms/cms_env.c
+++ b/lib/libcrypto/cms/cms_env.c
@@ -1,4 +1,4 @@
-/* $OpenBSD: cms_env.c,v 1.22 2019/08/11 11:07:40 jsing Exp $ */
+/* $OpenBSD: cms_env.c,v 1.23 2019/10/04 18:03:56 tb Exp $ */
 /*
  * Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
  * project.
@@ -426,6 +426,7 @@ cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 	EVP_PKEY *pkey = ktri->pkey;
 	unsigned char *ek = NULL;
 	size_t eklen;
+	size_t fixlen = 0;
 	int ret = 0;
 	CMS_EncryptedContentInfo *ec;
 
@@ -436,6 +437,19 @@ cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 		return 0;
 	}
 
+	if (cms->d.envelopedData->encryptedContentInfo->havenocert &&
+	    !cms->d.envelopedData->encryptedContentInfo->debug) {
+		X509_ALGOR *calg = ec->contentEncryptionAlgorithm;
+		const EVP_CIPHER *ciph;
+
+		if ((ciph = EVP_get_cipherbyobj(calg->algorithm)) == NULL) {
+			CMSerror(CMS_R_UNKNOWN_CIPHER);
+			return 0;
+		}
+
+		fixlen = EVP_CIPHER_key_length(ciph);
+	}
+
 	ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);
 	if (ktri->pctx == NULL)
 		return 0;
@@ -453,8 +467,11 @@ cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 	}
 
 	if (EVP_PKEY_decrypt(ktri->pctx, NULL, &eklen, ktri->encryptedKey->data,
-	    ktri->encryptedKey->length) <= 0)
+	    ktri->encryptedKey->length) <= 0 || eklen == 0 ||
+	    (fixlen != 0 && eklen != fixlen)) {
+		CMSerror(CMS_R_CMS_LIB);
 		goto err;
+	}
 
 	ek = malloc(eklen);
 
diff --git a/lib/libcrypto/cms/cms_lcl.h b/lib/libcrypto/cms/cms_lcl.h
index a8ccaf4488e..8083e5537d4 100644
--- a/lib/libcrypto/cms/cms_lcl.h
+++ b/lib/libcrypto/cms/cms_lcl.h
@@ -1,4 +1,4 @@
-/* $OpenBSD: cms_lcl.h,v 1.11 2019/08/11 10:26:04 jsing Exp $ */
+/* $OpenBSD: cms_lcl.h,v 1.12 2019/10/04 18:03:56 tb Exp $ */
 /*
  * Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
  * project.
@@ -170,6 +170,8 @@ struct CMS_EncryptedContentInfo_st {
 	size_t keylen;
 	/* Set to 1 if we are debugging decrypt and don't fake keys for MMA */
 	int debug;
+	/* Set to 1 if we have no cert and need exta safety measures for MMA */
+	int havenocert;
 };
 
 struct CMS_RecipientInfo_st {
diff --git a/lib/libcrypto/cms/cms_smime.c b/lib/libcrypto/cms/cms_smime.c
index d39ee19aa53..367810f40e8 100644
--- a/lib/libcrypto/cms/cms_smime.c
+++ b/lib/libcrypto/cms/cms_smime.c
@@ -1,4 +1,4 @@
-/* $OpenBSD: cms_smime.c,v 1.23 2019/08/11 14:51:15 jsing Exp $ */
+/* $OpenBSD: cms_smime.c,v 1.24 2019/10/04 18:03:56 tb Exp $ */
 /*
  * Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
  * project.
@@ -823,6 +823,10 @@ CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert, BIO *dcont,
 		cms->d.envelopedData->encryptedContentInfo->debug = 1;
 	else
 		cms->d.envelopedData->encryptedContentInfo->debug = 0;
+	if (!cert)
+		cms->d.envelopedData->encryptedContentInfo->havenocert = 1;
+	else
+		cms->d.envelopedData->encryptedContentInfo->havenocert = 0;
 	if (!pk && !cert && !dcont && !out)
 		return 1;
 	if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))
diff --git a/lib/libcrypto/pkcs7/pk7_doit.c b/lib/libcrypto/pkcs7/pk7_doit.c
index d0c27e98a95..81a72f6815a 100644
--- a/lib/libcrypto/pkcs7/pk7_doit.c
+++ b/lib/libcrypto/pkcs7/pk7_doit.c
@@ -1,4 +1,4 @@
-/* $OpenBSD: pk7_doit.c,v 1.43 2019/03/13 20:34:00 tb Exp $ */
+/* $OpenBSD: pk7_doit.c,v 1.44 2019/10/04 18:03:55 tb Exp $ */
 /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
  * All rights reserved.
  *
@@ -191,7 +191,7 @@ err:
 
 static int
 pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen, PKCS7_RECIP_INFO *ri,
-    EVP_PKEY *pkey)
+    EVP_PKEY *pkey, size_t fixlen)
 {
 	EVP_PKEY_CTX *pctx = NULL;
 	unsigned char *ek = NULL;
@@ -222,8 +222,9 @@ pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen, PKCS7_RECIP_INFO *ri,
 		goto err;
 	}
 
-	if (EVP_PKEY_decrypt(pctx, ek, &eklen,
-	    ri->enc_key->data, ri->enc_key->length) <= 0) {
+	if (EVP_PKEY_decrypt(pctx, ek, &eklen, ri->enc_key->data,
+	    ri->enc_key->length) <= 0 || eklen == 0 ||
+	    (fixlen != 0 && eklen != fixlen)) {
 		ret = 0;
 		PKCS7error(ERR_R_EVP_LIB);
 		goto err;
@@ -535,14 +536,14 @@ PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
 			for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rsk); i++) {
 				ri = sk_PKCS7_RECIP_INFO_value(rsk, i);
 
-				if (pkcs7_decrypt_rinfo(&ek, &eklen,
-				    ri, pkey) < 0)
+				if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,
+				    EVP_CIPHER_key_length(evp_cipher)) < 0)
 					goto err;
 				ERR_clear_error();
 			}
 		} else {
 			/* Only exit on fatal errors, not decrypt failure */
-			if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)
+			if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey, 0) < 0)
 				goto err;
 			ERR_clear_error();
 		}
