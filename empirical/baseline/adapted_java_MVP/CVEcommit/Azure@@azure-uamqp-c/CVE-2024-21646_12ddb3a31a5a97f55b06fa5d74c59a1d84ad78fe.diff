commit 12ddb3a31a5a97f55b06fa5d74c59a1d84ad78fe
Author: Eric Wolz <ericwol@microsoft.com>
Date:   Tue Dec 5 16:07:53 2023 -0800

    int overflow for binary_value size malloc (#444)
    
    * int overflow for binary_value size malloc
    
    * update PR feedback
    
    * pr feedback

diff --git a/src/amqpvalue.c b/src/amqpvalue.c
index e3fe324..6bee86a 100644
--- a/src/amqpvalue.c
+++ b/src/amqpvalue.c
@@ -5912,7 +5912,17 @@ static int internal_decoder_decode_bytes(INTERNAL_DECODER_DATA* internal_decoder
                             }
                             else
                             {
-                                internal_decoder_data->decode_to_value->value.binary_value.bytes = (unsigned char*)malloc((size_t)internal_decoder_data->decode_to_value->value.binary_value.length + 1);
+                                size_t malloc_size = (size_t)internal_decoder_data->decode_to_value->value.binary_value.length + 1;
+                                if (malloc_size == 0)
+                                {
+                                    internal_decoder_data->decode_to_value->value.binary_value.bytes = NULL;
+                                    LogError("Invalid binary_value size exceeded max allocation");
+                                }
+                                else
+                                {
+                                    internal_decoder_data->decode_to_value->value.binary_value.bytes = (unsigned char*)malloc(malloc_size);
+                                }
+
                                 if (internal_decoder_data->decode_to_value->value.binary_value.bytes == NULL)
                                 {
                                     /* Codes_SRS_AMQPVALUE_01_326: [If any allocation failure occurs during decoding, amqpvalue_decode_bytes shall fail and return a non-zero value.] */
