commit fcd18ce3101f245b083b30655c27b239dc72221e
Author: Mihai Maruseac <mihaimaruseac@google.com>
Date:   Tue Nov 9 14:54:52 2021 -0800

    Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.
    
    In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.
    
    PiperOrigin-RevId: 408713061
    Change-Id: I3771475b0c72a2844a3854086966562fd33f2da5

diff --git a/tensorflow/core/grappler/costs/op_level_cost_estimator.cc b/tensorflow/core/grappler/costs/op_level_cost_estimator.cc
index 5e328542ab1..2bb62edf645 100644
--- a/tensorflow/core/grappler/costs/op_level_cost_estimator.cc
+++ b/tensorflow/core/grappler/costs/op_level_cost_estimator.cc
@@ -1555,7 +1555,13 @@ int64_t OpLevelCostEstimator::CalculateTensorSize(
   int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);
   int size = DataTypeSize(BaseType(tensor.dtype()));
   VLOG(2) << "Count: " << count << " DataTypeSize: " << size;
-  return count * size;
+  int64_t tensor_size = MultiplyWithoutOverflow(count, size);
+  if (tensor_size < 0) {
+    VLOG(1) << "Overflow encountered when computing tensor size, multiplying "
+            << count << " with " << size;
+    return -1;
+  }
+  return tensor_size;
 }
 
 int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,
