commit c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd
Author: Mihai Maruseac <mihaimaruseac@google.com>
Date:   Wed Nov 10 13:51:15 2021 -0800

    Fix memory leak when a graph node is invalid.
    
    If a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.
    
    PiperOrigin-RevId: 408968108
    Change-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c

diff --git a/tensorflow/core/common_runtime/immutable_executor_state.cc b/tensorflow/core/common_runtime/immutable_executor_state.cc
index 1f728334e2b..25822540f02 100644
--- a/tensorflow/core/common_runtime/immutable_executor_state.cc
+++ b/tensorflow/core/common_runtime/immutable_executor_state.cc
@@ -131,6 +131,7 @@ Status ImmutableExecutorState::Initialize(const Graph& graph) {
 
     Status s = params_.create_kernel(n->properties(), &item->kernel);
     if (!s.ok()) {
+      params_.delete_kernel(item->kernel);
       item->kernel = nullptr;
       s = AttachDef(s, *n);
       return s;
