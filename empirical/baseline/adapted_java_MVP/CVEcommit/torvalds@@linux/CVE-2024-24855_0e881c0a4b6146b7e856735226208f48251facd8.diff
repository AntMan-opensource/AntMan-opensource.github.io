commit 0e881c0a4b6146b7e856735226208f48251facd8
Author: Tuo Li <islituo@gmail.com>
Date:   Fri Jun 30 10:47:48 2023 +0800

    scsi: lpfc: Fix a possible data race in lpfc_unregister_fcf_rescan()
    
    The variable phba->fcf.fcf_flag is often protected by the lock
    phba->hbalock() when is accessed. Here is an example in
    lpfc_unregister_fcf_rescan():
    
      spin_lock_irq(&phba->hbalock);
      phba->fcf.fcf_flag |= FCF_INIT_DISC;
      spin_unlock_irq(&phba->hbalock);
    
    However, in the same function, phba->fcf.fcf_flag is assigned with 0
    without holding the lock, and thus can cause a data race:
    
      phba->fcf.fcf_flag = 0;
    
    To fix this possible data race, a lock and unlock pair is added when
    accessing the variable phba->fcf.fcf_flag.
    
    Reported-by: BassCheck <bass@buaa.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Link: https://lore.kernel.org/r/20230630024748.1035993-1-islituo@gmail.com
    Reviewed-by: Justin Tee <justin.tee@broadcom.com>
    Reviewed-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/drivers/scsi/lpfc/lpfc_hbadisc.c b/drivers/scsi/lpfc/lpfc_hbadisc.c
index 499849b58ee4..fdd7f69d87ef 100644
--- a/drivers/scsi/lpfc/lpfc_hbadisc.c
+++ b/drivers/scsi/lpfc/lpfc_hbadisc.c
@@ -6944,7 +6944,9 @@ lpfc_unregister_fcf_rescan(struct lpfc_hba *phba)
 	if (rc)
 		return;
 	/* Reset HBA FCF states after successful unregister FCF */
+	spin_lock_irq(&phba->hbalock);
 	phba->fcf.fcf_flag = 0;
+	spin_unlock_irq(&phba->hbalock);
 	phba->fcf.current_rec.flag = 0;
 
 	/*
