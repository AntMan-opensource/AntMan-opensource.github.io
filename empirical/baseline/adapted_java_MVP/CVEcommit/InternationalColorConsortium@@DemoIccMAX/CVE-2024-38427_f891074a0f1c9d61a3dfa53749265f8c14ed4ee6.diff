commit f891074a0f1c9d61a3dfa53749265f8c14ed4ee6
Author: David Hoyt <h02332@gmail.com>
Date:   Mon May 20 09:26:44 2024 -0700

    Update: Fix the Compile Error in IccUtil.cpp, Fix a return value in IccTagXml.cpp (#66)
    
    * Update IccTagXml.cpp Fix return value
    
    Change the unconditional return statement at the end of the CIccTagXmlProfileSequenceId::ParseXml function from false to true.
    
    * Update IccUtil.cpp Hoyt's PATCH for ccProfLib/IccUtil.cpp:2064:8: error: integer value 4294967295 is outside the valid range
    
    Update IccUtil.cpp Hoyt's PATCH for ccProfLib/IccUtil.cpp:2064:8: error: integer value 4294967295 is outside the valid range
    
    Distribution Compile Error:
    -----------------------------
    make -j$(nproc) 2>&1 | grep 'error:'
    
    DemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2064:8: error: integer value 4294967295 is outside the valid range of values [0, 1] for this enumeration type [-Wenum-constexpr-conversion]
    DemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2068:5/Users/xss/Downloads/DemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2064:8: :error:  integer value 4294967295 is outside the valid range of values [0, 1] for this enumeration type [-Wenum-constexpr-conversion]warning:
    DemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2085:8: error: integer value 4294967295 is outside the valid range of values [0, 3] for this enumeration type [-Wenum-constexpr-conversion]
    DemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2085:8: error: integer value 4294967295 is outside the valid range of values [0, 3] for this enumeration type [-Wenum-constexpr-conversion]
    
    
    
    
    Hoyt's Patch
    ---------------
    diff -u   ../IccProfLib/IccUtil.cpp.dist ../IccProfLib/IccUtil.cpp
    --- ../IccProfLib/IccUtil.cpp.dist      2024-05-14 08:10:38
    +++ ../IccProfLib/IccUtil.cpp   2024-05-14 08:23:25
    @@ -2054,39 +2054,36 @@
    
     const icChar *CIccInfo::GetMeasurementFlareName(icMeasurementFlare val)
     {
    -  switch ((int)val) {
    +  switch (val) { // Directly switch on the enum without casting to int
       case icFlare0:
    -    return "Flare 0";
    +    return "Flare 0"; // Properly handle the 0% flare
    
       case icFlare100:
    -    return "Flare 100";
    -
    -  case icMaxEnumFlare:
    -    return "Max Flare";
    +    return "Flare 100"; // Properly handle the 100% flare
    
       default:
    -    sprintf(m_szStr, "Unknown Flare '%d'", (int)val);
    +    // Handle icMaxEnumFlare explicitly here if needed
    +    if (val == icMaxEnumFlare) {
    +      return "Max Flare"; // Special handling for the max sentinel value
    +    }
    +    // General default case for truly unexpected values
    +          std::snprintf(m_szStr, sizeof(m_szStr), "Unknown Flare '%d'", (int)val);
         return m_szStr;
       }
     }
    
    +
     const icChar *CIccInfo::GetMeasurementGeometryName(icMeasurementGeometry val)
     {
    -  switch ((int)val) {
    +  switch (val) {  // Directly use enum type, casting is not needed
       case icGeometryUnknown:
         return "Geometry Unknown";
    -
       case icGeometry045or450:
         return "Geometry 0-45 or 45-0";
    -
       case icGeometry0dord0:
         return "Geometry 0-d or d-0";
    -
    -  case icMaxEnumGeometry:
    -    return "Max Geometry";
    -
    -  default:
    -    sprintf(m_szStr, "Unknown Geometry '%d'", (int)val);
    +  default:
    +          std::snprintf(m_szStr, sizeof(m_szStr), "Unknown Geometry '%d'", (int)val);
         return m_szStr;
       }
     }
    
    
    Compile Result:
    make -j$(nproc) 2>&1 | grep 'error:'

diff --git a/IccProfLib/IccUtil.cpp b/IccProfLib/IccUtil.cpp
index 3afecf6..feeaf38 100644
--- a/IccProfLib/IccUtil.cpp
+++ b/IccProfLib/IccUtil.cpp
@@ -2054,39 +2054,36 @@ const icChar *CIccInfo::GetPathEntrySigName(icUInt32Number sig)
 
 const icChar *CIccInfo::GetMeasurementFlareName(icMeasurementFlare val)
 {
-  switch ((int)val) {
+  switch (val) { // Directly switch on the enum without casting to int
   case icFlare0:
-    return "Flare 0";
+    return "Flare 0"; // Properly handle the 0% flare
 
   case icFlare100:
-    return "Flare 100";
-
-  case icMaxEnumFlare:
-    return "Max Flare";
+    return "Flare 100"; // Properly handle the 100% flare
 
   default:
-    sprintf(m_szStr, "Unknown Flare '%d'", (int)val);
+    // Handle icMaxEnumFlare explicitly here if needed
+    if (val == icMaxEnumFlare) {
+      return "Max Flare"; // Special handling for the max sentinel value
+    }
+    // General default case for truly unexpected values
+          std::snprintf(m_szStr, sizeof(m_szStr), "Unknown Flare '%d'", (int)val);
     return m_szStr;
   }
 }
 
+
 const icChar *CIccInfo::GetMeasurementGeometryName(icMeasurementGeometry val)
 {
-  switch ((int)val) {
+  switch (val) {  // Directly use enum type, casting is not needed
   case icGeometryUnknown:
     return "Geometry Unknown";
-
   case icGeometry045or450:
     return "Geometry 0-45 or 45-0";
-
   case icGeometry0dord0:
     return "Geometry 0-d or d-0";
-
-  case icMaxEnumGeometry:
-    return "Max Geometry";
-
   default:
-    sprintf(m_szStr, "Unknown Geometry '%d'", (int)val);
+          std::snprintf(m_szStr, sizeof(m_szStr), "Unknown Geometry '%d'", (int)val);
     return m_szStr;
   }
 }
diff --git a/IccXML/IccLibXML/IccTagXml.cpp b/IccXML/IccLibXML/IccTagXml.cpp
index 216ef13..2612ded 100644
--- a/IccXML/IccLibXML/IccTagXml.cpp
+++ b/IccXML/IccLibXML/IccTagXml.cpp
@@ -4199,7 +4199,7 @@ bool CIccTagXmlProfileSequenceId::ParseXml(xmlNode *pNode, std::string &parseStr
     m_list->push_back(desc);
   }
 
-  return false;
+  return true;
 }
 
 
