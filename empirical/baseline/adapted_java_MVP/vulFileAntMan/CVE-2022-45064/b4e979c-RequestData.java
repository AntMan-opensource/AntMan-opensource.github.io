package org.apache.sling.engine.impl.request;
import static org.apache.sling.api.SlingConstants.SLING_CURRENT_SERVLET_NAME;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.request.RecursionTooDeepException;
import org.apache.sling.api.request.RequestPathInfo;
import org.apache.sling.api.request.RequestProgressTracker;
import org.apache.sling.api.request.RequestUtil;
import org.apache.sling.api.request.TooManyCallsException;
import org.apache.sling.api.request.builder.Builders;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.ServletResolver;
import org.apache.sling.api.wrappers.SlingHttpServletRequestWrapper;
import org.apache.sling.api.wrappers.SlingHttpServletResponseWrapper;
import org.apache.sling.engine.impl.SlingHttpServletRequestImpl;
import org.apache.sling.engine.impl.SlingHttpServletResponseImpl;
import org.apache.sling.engine.impl.SlingMainServlet;
import org.apache.sling.engine.impl.SlingRequestProcessorImpl;
import org.apache.sling.engine.impl.adapter.SlingServletRequestAdapter;
import org.apache.sling.engine.impl.adapter.SlingServletResponseAdapter;
import org.apache.sling.engine.impl.parameters.ParameterSupport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class RequestData {
    private static final Logger log = LoggerFactory.getLogger(RequestData.class);
    public static final String REQUEST_RESOURCE_PATH_ATTR = "$$sling.request.resource$$";
    private static String REQUEST_MAX_CALL_OVERRIDE = "sling.max.calls";
    private final SlingRequestProcessorImpl slingRequestProcessor;
    private final long startTimestamp;
    private final HttpServletRequest servletRequest;
    private final HttpServletResponse servletResponse;
    private final SlingHttpServletRequest slingRequest;
    private final SlingHttpServletResponse slingResponse;
    private ParameterSupport parameterSupport;
    private ResourceResolver resourceResolver;
    private final RequestProgressTracker requestProgressTracker;
    private ContentData currentContentData;
    private int servletCallCounter;
    private String activeServletName;
    private int recursionDepth;
    private int peakRecusionDepth;
    private static final Set<Character> SKIPPED_TRAVERSAL_CHARS = new HashSet<>();
    static {
        SKIPPED_TRAVERSAL_CHARS.add('[');
        SKIPPED_TRAVERSAL_CHARS.add('}');
    }
    
    public RequestData(SlingRequestProcessorImpl slingRequestProcessor, HttpServletRequest request, HttpServletResponse response) {
        this.startTimestamp = System.currentTimeMillis();
        this.slingRequestProcessor = slingRequestProcessor;
        this.servletRequest = request;
        this.servletResponse = response;
        this.slingRequest = new SlingHttpServletRequestImpl(this, this.servletRequest);
        this.slingResponse = new SlingHttpServletResponseImpl(this, this.servletResponse);
        if ( request instanceof SlingHttpServletRequest ) {
            this.requestProgressTracker = ((SlingHttpServletRequest)request).getRequestProgressTracker();
        }
         else {
            final Object o = request.getAttribute(RequestProgressTracker.class.getName());
            if (o instanceof RequestProgressTracker) {
                this.requestProgressTracker = (RequestProgressTracker)o;
            }
             else {
                log.warn("RequestProgressTracker not found in request attributes");
                this.requestProgressTracker = Builders.newRequestProgressTracker();
                this.requestProgressTracker.log("Method={0}, PathInfo={1}", request.getMethod(), request.getPathInfo());
            }
            
        }
        
    }
    
    public Resource initResource(ResourceResolver resourceResolver) {
        this.resourceResolver = resourceResolver;
        requestProgressTracker.startTimer("ResourceResolution");
        final SlingHttpServletRequest request = getSlingRequest();
        StringBuffer requestURL = servletRequest.getRequestURL();
        String path = request.getPathInfo();
        if (requestURL.indexOf(";") > -1 && !path.contains(";")) {
            try {
                final URL rUrl = new URL(requestURL.toString());
                final String prefix = request.getContextPath().concat(request.getServletPath());
                path = rUrl.getPath().substring(prefix.length());
            }
             catch ( final MalformedURLException e) {
            }
            
        }
        
        Resource resource = resourceResolver.resolve(request, path);
        if (request.getAttribute(REQUEST_RESOURCE_PATH_ATTR) == null) {
            request.setAttribute(REQUEST_RESOURCE_PATH_ATTR, resource.getPath());
        }
        
        requestProgressTracker.logTimer("ResourceResolution", "URI={0} resolves to Resource={1}", getServletRequest().getRequestURI(), resource);
        return resource;
    }
    
    public void initServlet(final Resource resource, final ServletResolver sr) {
        RequestPathInfo requestPathInfo = new SlingRequestPathInfo(resource);
        ContentData contentData = setContent(resource, requestPathInfo);
	    requestProgressTracker.log("Resource Path Info: {0}", requestPathInfo);
        requestProgressTracker.startTimer("ServletResolution");
        Servlet servlet = sr.resolveServlet(slingRequest);
        requestProgressTracker.logTimer("ServletResolution", "URI={0} handled by Servlet={1}", getServletRequest().getRequestURI(), (servlet == null ? "-none-" : RequestUtil.getServletName(servlet)));
        contentData.setServlet(servlet);
    }
    
    public SlingRequestProcessorImpl getSlingRequestProcessor() {
        return slingRequestProcessor;
    }
    
    public HttpServletRequest getServletRequest() {
        return servletRequest;
    }
    
    public HttpServletResponse getServletResponse() {
        return servletResponse;
    }
    
    public SlingHttpServletRequest getSlingRequest() {
        return slingRequest;
    }
    
    public SlingHttpServletResponse getSlingResponse() {
        return slingResponse;
    }
    
    public static SlingHttpServletRequest unwrap(ServletRequest request) {
        if (request instanceof SlingHttpServletRequest) {
            return (SlingHttpServletRequest) request;
        }
        
        while (request instanceof ServletRequestWrapper) {
            request = ((ServletRequestWrapper) request).getRequest();
            if (request instanceof SlingHttpServletRequest) {
                return (SlingHttpServletRequest) request;
            }
            
        }
        
        throw new IllegalArgumentException( "ServletRequest not wrapping SlingHttpServletRequest");
    }
    
    public static SlingHttpServletRequestImpl unwrap( SlingHttpServletRequest request) {
        while (request instanceof SlingHttpServletRequestWrapper) {
            request = ((SlingHttpServletRequestWrapper) request).getSlingRequest();
        }
        
        if (request instanceof SlingHttpServletRequestImpl) {
            return (SlingHttpServletRequestImpl) request;
        }
        
        throw new IllegalArgumentException( "SlingHttpServletRequest not of correct type");
    }
    
    public static SlingHttpServletResponse unwrap(ServletResponse response) {
        if (response instanceof SlingHttpServletResponse) {
            return (SlingHttpServletResponse) response;
        }
        
        while (response instanceof ServletResponseWrapper) {
            response = ((ServletResponseWrapper) response).getResponse();
            if (response instanceof SlingHttpServletResponse) {
                return (SlingHttpServletResponse) response;
            }
            
        }
        
        throw new IllegalArgumentException( "ServletResponse not wrapping SlingHttpServletResponse");
    }
    
    public static SlingHttpServletResponseImpl unwrap( SlingHttpServletResponse response) {
        while (response instanceof SlingHttpServletResponseWrapper) {
            response = ((SlingHttpServletResponseWrapper) response).getSlingResponse();
        }
        
        if (response instanceof SlingHttpServletResponseImpl) {
            return (SlingHttpServletResponseImpl) response;
        }
        
        throw new IllegalArgumentException( "SlingHttpServletResponse not of correct type");
    }
    
    public static RequestData getRequestData(ServletRequest request) {
        return unwrap(unwrap(request)).getRequestData();
    }
    
    public static RequestData getRequestData(SlingHttpServletRequest request) {
        return unwrap(request).getRequestData();
    }
    
    public static SlingHttpServletRequest toSlingHttpServletRequest( ServletRequest request) {
        SlingHttpServletRequest cRequest = unwrap(request);
        RequestData.unwrap(cRequest);
        if (cRequest == request) {
            return cRequest;
        }
        
        if (!(request instanceof HttpServletRequest)) {
            throw new IllegalArgumentException("Request is not an HTTP request");
        }
        
        return new SlingServletRequestAdapter(cRequest, (HttpServletRequest) request);
    }
    
    public static SlingHttpServletResponse toSlingHttpServletResponse( ServletResponse response) {
        SlingHttpServletResponse cResponse = unwrap(response);
        if (cResponse == response) {
            return cResponse;
        }
        
        if (!(response instanceof HttpServletResponse)) {
            throw new IllegalArgumentException( "Response is not an HTTP response");
        }
        
        return new SlingServletResponseAdapter(cResponse, (HttpServletResponse) response);
    }
    
    public static void service(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException, ServletException {
        if (!isValidRequest(request.getRequestPathInfo().getResourcePath(), request.getRequestPathInfo().getSelectors())) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Malformed request syntax");
            return;
        }
        
        RequestData requestData = RequestData.getRequestData(request);
        Servlet servlet = requestData.getContentData().getServlet();
        if (servlet == null) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "No Servlet to handle request");
        }
         else {
            String name = RequestUtil.getServletName(servlet);
            if (requestData.hasServletMaxCallCount(request)) {
                throw new TooManyCallsException(name);
            }
            
            Object oldValue = request.getAttribute(SLING_CURRENT_SERVLET_NAME);
            request.setAttribute(SLING_CURRENT_SERVLET_NAME, name);
            String timerName = name + "#" + requestData.servletCallCounter;
            requestData.servletCallCounter++;
            requestData.getRequestProgressTracker().startTimer(timerName);
            try {
                String callerServlet = requestData.setActiveServletName(name);
                servlet.service(request, response);
                requestData.setActiveServletName(callerServlet);
            }
             finally {
                request.setAttribute(SLING_CURRENT_SERVLET_NAME, oldValue);
                requestData.getRequestProgressTracker().logTimer(timerName);
            }
            
        }
        
    }
    
    static boolean isValidRequest(String resourcePath, String... selectors) {
       for (String selector : selectors) {
            if (selector.trim().isEmpty()) {
                return false;
            }
            
        }
        
        return resourcePath == null || !traversesParentPath(resourcePath);
    }
    
    public ContentData setContent(final Resource resource, final RequestPathInfo requestPathInfo) {
        if ( this.recursionDepth >=  this.slingRequestProcessor.getMaxIncludeCounter()) {
            throw new RecursionTooDeepException(requestPathInfo.getResourcePath());
        }
        
        this.recursionDepth++;
        if (this.recursionDepth > this.peakRecusionDepth) {
            this.peakRecusionDepth = this.recursionDepth;
        }
        
        currentContentData = new ContentData(resource, requestPathInfo);
        return currentContentData;
    }
    
    public void resetContent(final ContentData data) {
        this.recursionDepth--;
        currentContentData = data;
    }
    
    public ContentData getContentData() {
        return currentContentData;
    }
    
    public ResourceResolver getResourceResolver() {
        return resourceResolver;
    }
    
    public RequestProgressTracker getRequestProgressTracker() {
        return requestProgressTracker;
    }
    
    public int getPeakRecusionDepth() {
        return peakRecusionDepth;
    }
    
    public int getServletCallCount() {
        return servletCallCounter;
    }
    
    private boolean hasServletMaxCallCount(final ServletRequest request) {
        log.debug("Servlet call counter : {}", getServletCallCount());
        int maxCallCounter = this.slingRequestProcessor.getMaxCallCounter();
        Object reqMaxOverride = request.getAttribute(REQUEST_MAX_CALL_OVERRIDE);
        if (reqMaxOverride instanceof Number) {
            maxCallCounter = ((Number) reqMaxOverride).intValue();
        }
        
        return (maxCallCounter >= 0) && getServletCallCount() >= maxCallCounter;
    }
    
    public long getElapsedTimeMsec() {
        return System.currentTimeMillis() - startTimestamp;
    }
    
    public String setActiveServletName(String servletName) {
        String old = activeServletName;
        activeServletName = servletName;
        return old;
    }
    
    public String getActiveServletName() {
        return activeServletName;
    }
    
    public ServletInputStream getInputStream() throws IOException {
        if (parameterSupport != null && parameterSupport.requestDataUsed()) {
            throw new IllegalStateException( "Request Data has already been read");
        }
        
        return getServletRequest().getInputStream();
    }
    
    public BufferedReader getReader() throws UnsupportedEncodingException, IOException {
        if (parameterSupport != null && parameterSupport.requestDataUsed()) {
            throw new IllegalStateException( "Request Data has already been read");
        }
        
        return getServletRequest().getReader();
    }
    
    public ParameterSupport getParameterSupport() {
        if (parameterSupport == null) {
            parameterSupport = ParameterSupport.getInstance(getServletRequest());
        }
        
        return parameterSupport;
    }
    
    private static boolean traversesParentPath(String path) {
        int index = 0;
        while (index < path.length()) {
            int charCount = 0;
            int dotCount = 0;
            while (index < path.length() && path.charAt(index) != '/') {
                char c = path.charAt(index);
                if (!SKIPPED_TRAVERSAL_CHARS.contains(c)) {
                    if (c == '.') {
                        dotCount++;
                    }
                    
                    charCount++;
                }
                
                index++;
            }
            
            if (charCount > 1 && dotCount == charCount) {
                return true;
            }
            
            index++;
        }
        
        return false;
    }
    
}


