package org.apache.sling.engine.impl.helper;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.EventListener;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import javax.servlet.Filter;
import javax.servlet.FilterRegistration;
import javax.servlet.RequestDispatcher;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.ServletRegistration;
import javax.servlet.ServletRegistration.Dynamic;
import javax.servlet.SessionCookieConfig;
import javax.servlet.SessionTrackingMode;
import javax.servlet.descriptor.JspConfigDescriptor;
import org.apache.sling.engine.impl.Config;
import org.apache.sling.engine.impl.ProductInfoProvider;
import org.apache.sling.engine.impl.SlingHttpContext;
import org.apache.sling.engine.impl.SlingMainServlet;
import org.apache.sling.engine.impl.request.SlingRequestDispatcher;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceRegistration;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.http.whiteboard.HttpWhiteboardConstants;
import org.osgi.service.http.whiteboard.propertytypes.HttpWhiteboardContextSelect;
import org.osgi.service.http.whiteboard.propertytypes.HttpWhiteboardListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@Component(service = ServletContextListener.class, configurationPid = Config.PID)
@HttpWhiteboardContextSelect("(" + HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME + "=" + SlingHttpContext.SERVLET_CONTEXT_NAME + ")")
public class SlingServletContext implements ServletContext, ServletContextListener {
    public static final String TARGET = "(name=" + SlingHttpContext.SERVLET_CONTEXT_NAME + ")";
    private final Logger log = LoggerFactory.getLogger(getClass());
    private final ProductInfoProvider productInfoProvider;
    private final BundleContext bundleContext;
    private volatile String serverInfo;
    private volatile String configuredServerInfo;
    private volatile ServletContext servletContext;
    private volatile ServiceRegistration<ServletContext> registration;
    public SlingServletContext(final Config config,  final BundleContext bundleContext, @Reference final ProductInfoProvider infoProvider) {
        this.bundleContext = bundleContext;
        this.productInfoProvider = infoProvider;
        this.setup(config);
    }
    
    protected void modified(final Config config) {
        setup(config);
    }
    
    private void setup(final Config config) {
        if (config.sling_serverinfo() != null && !config.sling_serverinfo().isEmpty()) {
            this.configuredServerInfo = config.sling_serverinfo();
        }
         else {
            this.configuredServerInfo = null;
        }
        
        this.setServerInfo();
    }
    
    private void setServerInfo() {
        if ( this.configuredServerInfo != null ) {
            this.serverInfo = this.configuredServerInfo;
        }
         else {
            final String containerProductInfo;
            if (getServletContext() == null) {
                containerProductInfo = "unregistered";
            }
             else {
                final String containerInfo = getServletContext().getServerInfo();
                if (containerInfo != null && containerInfo.length() > 0) {
                    int lbrace = containerInfo.indexOf('(');
                    if (lbrace < 0) {
                        lbrace = containerInfo.length();
                    }
                    
                    containerProductInfo = containerInfo.substring(0, lbrace).trim();
                }
                 else {
                    containerProductInfo = "unknown";
                }
                
            }
            
            this.serverInfo = String.format("%s (%s, %s %s, %s %s %s)", this.productInfoProvider.getProductInfo(), containerProductInfo, System.getProperty("java.vm.name"), System.getProperty("java.version"), System.getProperty("os.name"), System.getProperty("os.version"), System.getProperty("os.arch"));
        }
        
    }
    
    public void contextDestroyed(final ServletContextEvent sce) {
        synchronized ( this ) {
            this.servletContext = null;
            this.setServerInfo();
            if ( this.registration != null ) {
                this.registration.unregister();
                this.registration = null;    
            }
            
        }
        
    }
    
    public void contextInitialized(final ServletContextEvent sce) {
        this.servletContext = sce.getServletContext();
        this.setServerInfo();
        final Thread thread = new Thread("SlingServletContext registration") {
            public void run() {
                synchronized (SlingServletContext.this) {
                    if ( servletContext != null ) {
                        final Dictionary<String, Object> props = new Hashtable<String, Object>();
                        props.put("name", SlingHttpContext.SERVLET_CONTEXT_NAME); 
                        registration = bundleContext.registerService(ServletContext.class, SlingServletContext.this, props);        
                    }
                    
                }
                
            }
            
        };
        thread.setDaemon(true);
        thread.start();
    }
    
    public String getServletContextName() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getServletContextName();
        }
        
        return null;
    }
    
    public String getContextPath() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getContextPath();
        }
        
        return null;
    }
    
    public String getInitParameter(String name) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getInitParameter(name);
        }
        
        return null;
    }
    
    public Enumeration<String> getInitParameterNames() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getInitParameterNames();
        }
        
        return null;
    }
    
    public Object getAttribute(String name) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getAttribute(name);
        }
        
        return null;
    }
    
    public Enumeration<String> getAttributeNames() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getAttributeNames();
        }
        
        return Collections.enumeration(Collections.<String>emptyList());
    }
    
    public void removeAttribute(String name) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            delegatee.removeAttribute(name);
        }
        
    }
    
    public void setAttribute(String name, Object object) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            delegatee.setAttribute(name, object);
        }
        
    }
    
    public String getServerInfo() {
        return this.serverInfo;
    }
    
    public int getMajorVersion() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getMajorVersion();
        }
        
        return 3; 
    }
    
    public int getMinorVersion() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getMinorVersion();
        }
        
        return 0; 
    }
    
    public String getMimeType(String file) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getMimeType(file);
        }
        
        return null;
    }
    
    public RequestDispatcher getRequestDispatcher(String path) {
        if (path == null) {
            log.error("getRequestDispatcher: No path, cannot create request dispatcher");
            return null;
        }
        
        return new SlingRequestDispatcher(path, null);
    }
    
    public RequestDispatcher getNamedDispatcher(String name) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getNamedDispatcher(name);
        }
        
        return null;
    }
    
    public URL getResource(String path) throws MalformedURLException {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getResource(path);
        }
        
        return null;
    }
    
    public InputStream getResourceAsStream(String path) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getResourceAsStream(path);
        }
        
        return null;
    }
    
    public Set<String> getResourcePaths(String parentPath) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getResourcePaths(parentPath);
        }
        
        return null;
    }
    
    public String getRealPath(String path) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getRealPath(path);
        }
        
        return null;
    }
    
    public void log(String message, Throwable throwable) {
        log.error(message, throwable);
    }
    
    public void log(String message) {
        log.info(message);
    }
    
    public void log(Exception exception, String message) {
        log(message, exception);
    }
    
    public ServletContext getContext(String uripath) {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            ServletContext otherContext = delegatee.getContext(uripath);
            if (otherContext != null && otherContext != delegatee) {
                return wrapServletContext(otherContext);
            }
            
        }
        
        return null;
    }
    
    public Servlet getServlet(String name) {
        return null;
    }
    
    public Enumeration<String> getServletNames() {
        return Collections.enumeration(Collections.<String>emptyList());
    }
    
    public Enumeration<Servlet> getServlets() {
        return Collections.enumeration(Collections.<Servlet>emptyList());
    }
    
    public int getEffectiveMajorVersion() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getEffectiveMajorVersion();
        }
        
        return 3;
    }
    
    public int getEffectiveMinorVersion() {
        ServletContext delegatee = getServletContext();
        if (delegatee != null) {
            return delegatee.getEffectiveMinorVersion();
        }
        
        return 0;
    }
    
    public boolean setInitParameter(String name, String value) {
        throw new IllegalStateException();
    }
    
    public SessionCookieConfig getSessionCookieConfig() {
        return getServletContext().getSessionCookieConfig();
    }
    
    public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes) {
        throw new IllegalStateException();
    }
    
    public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
        return getServletContext().getDefaultSessionTrackingModes();
    }
    
    public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
        return getServletContext().getEffectiveSessionTrackingModes();
    }
    
    public JspConfigDescriptor getJspConfigDescriptor() {
        return getServletContext().getJspConfigDescriptor();
    }
    
    public ClassLoader getClassLoader() {
        throw new SecurityException();
    }
    
    public void declareRoles(String... roleNames) {
        throw new IllegalStateException();
    }
    
    public Dynamic addServlet(String servletName, String className) {
        throw new IllegalStateException();
    }
    
    public Dynamic addServlet(String servletName, Servlet servlet) {
        throw new IllegalStateException();
    }
    
    public Dynamic addServlet(String servletName, Class<? extends Servlet> servletClass) {
        throw new IllegalStateException();
    }
    
    public <T extends Servlet> T createServlet(Class<T> clazz) {
        throw new IllegalStateException();
    }
    
    public ServletRegistration getServletRegistration(String servletName) {
        throw new IllegalStateException();
    }
    
    public Map<String, ? extends ServletRegistration> getServletRegistrations() {
        throw new IllegalStateException();
    }
    
    public javax.servlet.FilterRegistration.Dynamic addFilter(String filterName, String className) {
        throw new IllegalStateException();
    }
    
    public javax.servlet.FilterRegistration.Dynamic addFilter(String filterName, Filter filter) {
        throw new IllegalStateException();
    }
    
    public javax.servlet.FilterRegistration.Dynamic addFilter(String filterName, Class<? extends Filter> filterClass) {
        throw new IllegalStateException();
    }
    
    public <T extends Filter> T createFilter(Class<T> clazz) {
        throw new IllegalStateException();
    }
    
    public FilterRegistration getFilterRegistration(String filterName) {
        throw new IllegalStateException();
    }
    
    public Map<String, ? extends FilterRegistration> getFilterRegistrations() {
        throw new IllegalStateException();
    }
    
    public void addListener(String className) {
        throw new IllegalStateException();
    }
    
    public <T extends EventListener> void addListener(T t) {
        throw new IllegalStateException();
    }
    
    public void addListener(Class<? extends EventListener> listenerClass) {
        throw new IllegalStateException();
    }
    
    public <T extends EventListener> T createListener(Class<T> clazz) {
        throw new IllegalStateException();
    }
    
    public String getVirtualServerName() {
        return getServletContext().getVirtualServerName();
    }
    
    protected ServletContext getServletContext() {
        return this.servletContext;
    }
    
    protected ServletContext wrapServletContext(final ServletContext context) {
        return new ExternalServletContextWrapper(context);
    }
    
}


