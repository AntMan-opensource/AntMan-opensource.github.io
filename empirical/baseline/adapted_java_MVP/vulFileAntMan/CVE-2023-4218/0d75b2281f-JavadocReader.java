package org.eclipse.jdt.internal.ui.javadocexport;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.eclipse.core.runtime.Assert;
public class JavadocReader extends Object {
	private InputStream fInputStream;
	 public JavadocReader(InputStream inputStream) {
		Assert.isNotNull(inputStream);
		fInputStream= new BufferedInputStream(inputStream);
	}
	
	 public void close() throws IOException {
		if (fInputStream != null){
			fInputStream.close();
}
	}
	
	public Element readXML() throws IOException, SAXException {
		DocumentBuilderFactory factory= DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		DocumentBuilder parser= null;
		try {
			parser= factory.newDocumentBuilder();
		}
		 catch (ParserConfigurationException ex) {
			throw new IOException(ex.getMessage());
		}
		 finally {
			 }
			 
		 parser.setErrorHandler(new DefaultHandler());
		Element xmlJavadocDesc= parser.parse(new InputSource(fInputStream)).getDocumentElement();
		NodeList targets= xmlJavadocDesc.getChildNodes();
		for (int i= 0; i < targets.getLength(); i++) {
			Node target= targets.item(i);
			 if ("target".equals(target.getNodeName())) { 
				NodeList children= target.getChildNodes();
				for (int j= 0; j < children.getLength(); j++) {
					Node child= children.item(j);
					if ("javadoc".equals(child.getNodeName()) && (child.getNodeType() == Node.ELEMENT_NODE)) { 
						return (Element) child;
					}
					
				}
				
			}
			
		}
		
		return null;
	}
	
}


