package org.eclipse.jdt.internal.ui.jarpackager;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.ltk.core.refactoring.RefactoringCore;
import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;
import org.eclipse.ltk.core.refactoring.RefactoringDescriptorProxy;
import org.eclipse.ltk.core.refactoring.history.IRefactoringHistoryService;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.ui.jarpackager.IJarDescriptionWriter;
import org.eclipse.jdt.ui.jarpackager.JarPackageData;
import org.eclipse.jdt.internal.ui.IJavaStatusConstants;
import org.eclipse.jdt.internal.ui.JavaPlugin;
public class JarPackageWriter extends Object implements IJarDescriptionWriter {
	private final OutputStream fOutputStream;
	private final String fEncoding;
	 public JarPackageWriter(OutputStream outputStream, String encoding) {
		Assert.isNotNull(outputStream);
		fOutputStream= new BufferedOutputStream(outputStream);
		fEncoding= encoding;
	}
	
	public void write(JarPackageData jarPackage) throws CoreException {
		try  {
			writeXML(jarPackage);
		}
		 catch (IOException ex) {
			String message= (ex.getLocalizedMessage() != null ? ex.getLocalizedMessage() : ""); 
			throw new CoreException(new Status(IStatus.ERROR, JavaPlugin.getPluginId(), IJavaStatusConstants.INTERNAL_ERROR, message, ex));
		}
		
	}
	
	 public void writeXML(JarPackageData jarPackage) throws IOException {
		Assert.isNotNull(jarPackage);
		DocumentBuilder docBuilder= null;
		DocumentBuilderFactory factory= DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		try {
	    	docBuilder= factory.newDocumentBuilder();
		}
		 catch (ParserConfigurationException ex) {
			throw new IOException(JarPackagerMessages.JarWriter_error_couldNotGetXmlBuilder);
		}
		
		Document document= docBuilder.newDocument();
		 Element xmlJarDesc= document.createElement(JarPackagerUtil.DESCRIPTION_EXTENSION);
		document.appendChild(xmlJarDesc);
		xmlWriteJarLocation(jarPackage, document, xmlJarDesc);
		xmlWriteOptions(jarPackage, document, xmlJarDesc);
		xmlWriteRefactoring(jarPackage, document, xmlJarDesc);
		xmlWriteSelectedProjects(jarPackage, document, xmlJarDesc);
		if (jarPackage.areGeneratedFilesExported()){
			xmlWriteManifest(jarPackage, document, xmlJarDesc);
}
		xmlWriteSelectedElements(jarPackage, document, xmlJarDesc);
		try {
			 Transformer transformer=TransformerFactory.newInstance().newTransformer();
			transformer.setOutputProperty(OutputKeys.METHOD, "xml"); 
			transformer.setOutputProperty(OutputKeys.ENCODING, fEncoding);
			transformer.setOutputProperty(OutputKeys.INDENT, "yes"); 
			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4"); 
			DOMSource source = new DOMSource(document);
			StreamResult result = new StreamResult(fOutputStream);
			transformer.transform(source, result);
		}
		 catch (TransformerException e) {
			throw new IOException(JarPackagerMessages.JarWriter_error_couldNotTransformToXML);
		}
		
	}
	
	private void xmlWriteJarLocation(JarPackageData jarPackage, Document document, Element xmlJarDesc) throws DOMException {
		Element jar= document.createElement(JarPackagerUtil.JAR_EXTENSION);
		xmlJarDesc.appendChild(jar);
		jar.setAttribute("path", jarPackage.getJarLocation().toPortableString()); 
	}
	
	private void xmlWriteOptions(JarPackageData jarPackage, Document document, Element xmlJarDesc) throws DOMException {
		Element options= document.createElement("options"); 
		xmlJarDesc.appendChild(options);
		options.setAttribute("overwrite", "" + jarPackage.allowOverwrite()); 
		options.setAttribute("compress", "" + jarPackage.isCompressed()); 
		options.setAttribute("exportErrors", "" + jarPackage.areErrorsExported()); 
		options.setAttribute("exportWarnings", "" + jarPackage.exportWarnings()); 
		options.setAttribute("saveDescription", "" + jarPackage.isDescriptionSaved()); 
		options.setAttribute("descriptionLocation", jarPackage.getDescriptionLocation().toPortableString()); 
		options.setAttribute("useSourceFolders", "" + jarPackage.useSourceFolderHierarchy()); 
		options.setAttribute("buildIfNeeded", "" + jarPackage.isBuildingIfNeeded()); 
		options.setAttribute("includeDirectoryEntries", "" + jarPackage.areDirectoryEntriesIncluded());  
		options.setAttribute("storeRefactorings", "" + jarPackage.isRefactoringAware());  
	}
	
	private void xmlWriteRefactoring(JarPackageData jarPackage, Document document, Element xmlJarDesc) throws DOMException {
		Element refactoring= document.createElement("storedRefactorings"); 
		xmlJarDesc.appendChild(refactoring);
		refactoring.setAttribute("structuralOnly", "" + jarPackage.isExportStructuralOnly()); 
		refactoring.setAttribute("deprecationInfo", "" + jarPackage.isDeprecationAware()); 
		final IProject[] projects= jarPackage.getRefactoringProjects();
		if (projects != null) {
			for (int index= 0; index < projects.length; index++){
				refactoring.setAttribute("project" + (index + 1), projects[index].getName()); 
}
		}
		
		final RefactoringDescriptorProxy[] proxies= jarPackage.getRefactoringDescriptors();
		if (proxies != null && proxies.length > 0) {
			int count= 1;
			IRefactoringHistoryService service= RefactoringCore.getHistoryService();
			try {
				service.connect();
				for (int index= 0; index < proxies.length; index++, count++) {
					try {
						final ByteArrayOutputStream stream= new ByteArrayOutputStream();
						service.writeRefactoringDescriptors(new RefactoringDescriptorProxy[] { proxies[index]}, stream, RefactoringDescriptor.NONE, true, null);
						refactoring.setAttribute("refactoring" + count, stream.toString("UTF-8")); 
					}
					 catch (CoreException exception) {
						JavaPlugin.log(exception);
					}
					 catch (UnsupportedEncodingException exception) {
						Assert.isTrue(false);
					}
					
				}
				
			}
			 finally {
				service.disconnect();
			}
			
		}
		
	}
	
	private void xmlWriteManifest(JarPackageData jarPackage, Document document, Element xmlJarDesc) throws DOMException {
		Element manifest= document.createElement("manifest"); 
		xmlJarDesc.appendChild(manifest);
		manifest.setAttribute("manifestVersion", jarPackage.getManifestVersion()); 
		manifest.setAttribute("usesManifest", "" + jarPackage.usesManifest()); 
		manifest.setAttribute("reuseManifest", "" + jarPackage.isManifestReused()); 
		manifest.setAttribute("saveManifest", "" + jarPackage.isManifestSaved()); 
		manifest.setAttribute("generateManifest", "" + jarPackage.isManifestGenerated()); 
		manifest.setAttribute("manifestLocation", jarPackage.getManifestLocation().toPortableString()); 
		if (jarPackage.getManifestMainClass() != null){
			manifest.setAttribute("mainClassHandleIdentifier", jarPackage.getManifestMainClass().getHandleIdentifier()); 
}
		xmlWriteSealingInfo(jarPackage, document, manifest);
	}
	
	private void xmlWriteSealingInfo(JarPackageData jarPackage, Document document, Element manifest) throws DOMException {
		Element sealing= document.createElement("sealing"); 
		manifest.appendChild(sealing);
		sealing.setAttribute("sealJar", "" + jarPackage.isJarSealed()); 
		Element packagesToSeal= document.createElement("packagesToSeal"); 
		sealing.appendChild(packagesToSeal);
		add(jarPackage.getPackagesToSeal(), packagesToSeal, document);
		Element packagesToUnSeal= document.createElement("packagesToUnSeal"); 
		sealing.appendChild(packagesToUnSeal);
		add(jarPackage.getPackagesToUnseal(), packagesToUnSeal, document);
	}
	
	private void xmlWriteSelectedElements(JarPackageData jarPackage, Document document, Element xmlJarDesc) throws DOMException {
		Element selectedElements= document.createElement("selectedElements"); 
		xmlJarDesc.appendChild(selectedElements);
		selectedElements.setAttribute("exportClassFiles", "" + jarPackage.areClassFilesExported()); 
		selectedElements.setAttribute("exportOutputFolder", "" + jarPackage.areOutputFoldersExported()); 
		selectedElements.setAttribute("exportJavaFiles", "" + jarPackage.areJavaFilesExported()); 
		for (Object element : jarPackage.getElements()) {
			if (element instanceof IResource){
				add((IResource)element, selectedElements, document);
}
			else if (element instanceof IJavaElement){
				add((IJavaElement)element, selectedElements, document);
}
			 }
			 
	}
	
	private void xmlWriteSelectedProjects(JarPackageData jarPackage, Document document, Element xmlJarDesc) throws DOMException {
		Element selectedElements= document.createElement("selectedProjects"); 
		xmlJarDesc.appendChild(selectedElements);
		for (IProject element : jarPackage.getRefactoringProjects()) {
			if (element != null){
				add(element, selectedElements, document);
}
		}
		
	}
	
	public void close() throws CoreException {
    	if (fOutputStream != null) {
			try {
				fOutputStream.close();
			}
			 catch (IOException ex) {
				String message= (ex.getLocalizedMessage() != null ? ex.getLocalizedMessage() : ""); 
				throw new CoreException(new Status(IStatus.ERROR, JavaPlugin.getPluginId(), IJavaStatusConstants.INTERNAL_ERROR, message, ex));
			}
			
    	}
    	
	}
	
	private void add(IResource resource, Element parent, Document document) {
		if (resource.getType() == IResource.PROJECT) {
			Element element= document.createElement("project"); 
			parent.appendChild(element);
			element.setAttribute("name", resource.getName()); 
		}
		 else if (resource.getType() == IResource.FILE) {
			Element element= document.createElement("file"); 
			parent.appendChild(element);
			element.setAttribute("path", resource.getFullPath().toString()); 
		}
		 else if (resource.getType() == IResource.FOLDER) {
			Element element= document.createElement("folder"); 
			parent.appendChild(element);
			element.setAttribute("path", resource.getFullPath().toString()); 
		}
		
	}
	
	private void add(IJavaElement javaElement, Element parent, Document document) {
		Element element= document.createElement("javaElement"); 
		parent.appendChild(element);
		element.setAttribute("handleIdentifier", javaElement.getHandleIdentifier()); 
	}
	
	private void add(IPackageFragment[] packages, Element parent, Document document) {
		for (IPackageFragment p : packages) {
			Element pkg= document.createElement("package"); 
			parent.appendChild(pkg);
			pkg.setAttribute("handleIdentifier", p.getHandleIdentifier()); 
		}
		
	}
	
	public IStatus getStatus() {
		return Status.OK_STATUS;
	}
	
}


