package org.eclipse.jdt.internal.ui.jarpackagerfat;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.eclipse.core.runtime.IPath;
import org.eclipse.debug.core.ILaunchConfiguration;
public class UnpackFatJarAntExporter extends FatJarAntExporter {
	public UnpackFatJarAntExporter(IPath antScriptLocation, IPath jarLocation, ILaunchConfiguration launchConfiguration) {
		super(antScriptLocation, jarLocation, launchConfiguration);
	}
	
	protected void buildANTScript(IPath antScriptLocation, String projectName, IPath absJarfile, String mainClass, SourceInfo[] sourceInfos) throws IOException {
		try (OutputStream outputStream = new FileOutputStream(antScriptLocation.toFile())) {
			String absJarname= absJarfile.toString();
			DocumentBuilder docBuilder= null;
			DocumentBuilderFactory factory= DocumentBuilderFactory.newInstance();
			factory.setValidating(false);
			try {
				docBuilder= factory.newDocumentBuilder();
			}
			 catch (ParserConfigurationException ex) {
				throw new IOException(FatJarPackagerMessages.FatJarPackageAntScript_error_couldNotGetXmlBuilder);
			}
			
			Document document= docBuilder.newDocument();
			Node comment;
			 Element project= document.createElement("project"); 
			project.setAttribute("name", "Create Runnable Jar for Project " + projectName); 
			project.setAttribute("default", "create_run_jar"); 
			document.appendChild(project);
			comment= document.createComment("this file was created by Eclipse Runnable JAR Export Wizard"); 
			project.appendChild(comment);
			comment= document.createComment("ANT 1.7 is required                                        "); 
			project.appendChild(comment);
			addBaseDirProperties(document, project);
			Element target= document.createElement("target"); 
			target.setAttribute("name", "create_run_jar"); 
			project.appendChild(target);
			Element jar= document.createElement("jar"); 
			jar.setAttribute("destfile", substituteBaseDirs(absJarname)); 
			jar.setAttribute("filesetmanifest", "mergewithoutmain"); 
			target.appendChild(jar);
			Element manifest= document.createElement("manifest"); 
			jar.appendChild(manifest);
			Element attribute= document.createElement("attribute"); 
			attribute.setAttribute("name", "Main-Class"); 
			attribute.setAttribute("value", mainClass); 
			manifest.appendChild(attribute);
			attribute= document.createElement("attribute"); 
			attribute.setAttribute("name", "Class-Path"); 
			attribute.setAttribute("value", "."); 
			manifest.appendChild(attribute);
			for (SourceInfo sourceInfo : sourceInfos) {
				if (sourceInfo.isJar) {
					Element zipfileset= document.createElement("zipfileset"); 
					zipfileset.setAttribute("src", substituteBaseDirs(sourceInfo.absPath)); 
					zipfileset.setAttribute("excludes", "META-INF/*.SF"); 
					jar.appendChild(zipfileset);
				}
				 else {
					Element fileset= document.createElement("fileset"); 
					fileset.setAttribute("dir", substituteBaseDirs(sourceInfo.absPath)); 
					jar.appendChild(fileset);
				}
				
			}
			
			try {
				 Transformer transformer= TransformerFactory.newInstance().newTransformer();
				transformer.setOutputProperty(OutputKeys.METHOD, "xml"); 
				transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8"); 
				transformer.setOutputProperty(OutputKeys.INDENT, "yes"); 
				transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4"); 
				DOMSource source= new DOMSource(document);
				StreamResult result= new StreamResult(outputStream);
				transformer.transform(source, result);
			}
			 catch (TransformerException e) {
				throw new IOException(FatJarPackagerMessages.FatJarPackageAntScript_error_couldNotTransformToXML);
			}
			
		}
		
	}
	
}


