package org.eclipse.ltk.internal.core.refactoring;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.ltk.core.refactoring.IRefactoringCoreStatusCodes;
import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;
public final class RefactoringSessionTransformer {
	 private static final class AttributeComparator implements Comparator<Attr> {
		public int compare(final Attr o1, final Attr o2) {
			return Collator.getInstance().compare(o1.getName(), o2.getName());
		}
		
	}
	
	 private Document fDocument= null;
	 private final boolean fProjects;
	 private Node fRefactoring= null;
	 private List<Attr> fRefactoringArguments= null;
	 private Node fSession= null;
	 private List<Attr> fSessionArguments= null;
	 public RefactoringSessionTransformer(final boolean projects) {
		fProjects= projects;
	}
	
	 private void addArguments(final Node node, final List<Attr> list) {
		final NamedNodeMap map= node.getAttributes();
		if (map != null) {
			Collections.sort(list, new AttributeComparator());
			for (Attr attribute : list) {
				map.setNamedItem(attribute);
			}
			
		}
		
	}
	
	 public void beginRefactoring(final String id, long stamp, final String project, final String description, final String comment, final int flags) throws CoreException {
		Assert.isNotNull(id);
		Assert.isNotNull(description);
		Assert.isTrue(flags >= RefactoringDescriptor.NONE);
		try {
			if (fDocument == null){
				fDocument= DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
}
		}
		 catch (ParserConfigurationException | FactoryConfigurationError exception) {
			throw new CoreException(new Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.REFACTORING_HISTORY_IO_ERROR, exception.getLocalizedMessage(), null));
		}
		
		if (fRefactoring == null) {
			try {
				fRefactoringArguments= new ArrayList<>(16);
				fRefactoring= fDocument.createElement(IRefactoringSerializationConstants.ELEMENT_REFACTORING);
				Attr attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_ID);
				attribute.setValue(id);
				fRefactoringArguments.add(attribute);
				if (stamp >= 0) {
					attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_STAMP);
					attribute.setValue(Long.toString(stamp));
					fRefactoringArguments.add(attribute);
				}
				
				if (flags != RefactoringDescriptor.NONE) {
					attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_FLAGS);
					attribute.setValue(String.valueOf(flags));
					fRefactoringArguments.add(attribute);
				}
				
				attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_DESCRIPTION);
				attribute.setValue(description);
				fRefactoringArguments.add(attribute);
				if (comment != null && !"".equals(comment)) { 
					attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_COMMENT);
					attribute.setValue(comment);
					fRefactoringArguments.add(attribute);
				}
				
				if (project != null && fProjects) {
					attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_PROJECT);
					attribute.setValue(project);
					fRefactoringArguments.add(attribute);
				}
				
				if (fSession == null){
					fDocument.appendChild(fRefactoring);
}
				else{
					fSession.appendChild(fRefactoring);
}
			}
			 catch (DOMException exception) {
				throw new CoreException(new Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.REFACTORING_HISTORY_FORMAT_ERROR, exception.getLocalizedMessage(), null));
			}
			
		}
		
	}
	
	 public void beginSession(final String comment, final String version) throws CoreException {
		if (fDocument == null) {
			try {
				fDocument= DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
				fSession= fDocument.createElement(IRefactoringSerializationConstants.ELEMENT_SESSION);
				fSessionArguments= new ArrayList<>(2);
				Attr attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_VERSION);
				attribute.setValue(version);
				fSessionArguments.add(attribute);
				if (comment != null && !"".equals(comment)) { 
					attribute= fDocument.createAttribute(IRefactoringSerializationConstants.ATTRIBUTE_COMMENT);
					attribute.setValue(comment);
					fSessionArguments.add(attribute);
				}
				
				fDocument.appendChild(fSession);
			}
			 catch (DOMException exception) {
				throw new CoreException(new Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.REFACTORING_HISTORY_FORMAT_ERROR, exception.getLocalizedMessage(), null));
			}
			 catch (ParserConfigurationException exception) {
				throw new CoreException(new Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.REFACTORING_HISTORY_IO_ERROR, exception.getLocalizedMessage(), null));
			}
			
		}
		
	}
	
	 public void createArgument(final String name, final String value) throws CoreException {
		Assert.isNotNull(name);
		Assert.isTrue(!"".equals(name)); 
		Assert.isNotNull(value);
		if (fDocument != null && fRefactoringArguments != null) {
			try {
				final Attr attribute= fDocument.createAttribute(name);
				attribute.setValue(value);
				fRefactoringArguments.add(attribute);
			}
			 catch (DOMException exception) {
				throw new CoreException(new Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.REFACTORING_HISTORY_FORMAT_ERROR, exception.getLocalizedMessage(), null));
			}
			
		}
		
	}
	
	 public void endRefactoring() {
		if (fRefactoring != null && fRefactoringArguments != null){
			addArguments(fRefactoring, fRefactoringArguments);
}
		fRefactoringArguments= null;
		fRefactoring= null;
	}
	
	 public void endSession() {
		if (fSession != null && fSessionArguments != null){
			addArguments(fSession, fSessionArguments);
}
		fSessionArguments= null;
		fSession= null;
	}
	
	 public Document getResult() {
		final Document document= fDocument;
		fDocument= null;
		return document;
	}
	
}


