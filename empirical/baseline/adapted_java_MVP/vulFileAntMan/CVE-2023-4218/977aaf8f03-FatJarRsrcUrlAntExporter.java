package org.eclipse.jdt.internal.ui.jarpackagerfat;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.eclipse.core.runtime.IPath;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.jdt.internal.ui.JavaPlugin;
public class FatJarRsrcUrlAntExporter extends FatJarAntExporter {
	public FatJarRsrcUrlAntExporter(IPath antScriptLocation, IPath jarLocation, ILaunchConfiguration launchConfiguration) {
		super(antScriptLocation, jarLocation, launchConfiguration);
	}
	
	protected void buildANTScript(IPath antScriptLocation, String projectName, IPath absJarfile, String mainClass, SourceInfo[] sourceInfos) throws FileNotFoundException, IOException {
		File antScriptFile= antScriptLocation.toFile();
		buildANTScript(new FileOutputStream(antScriptFile), projectName, absJarfile, mainClass, sourceInfos);
		copyJarInJarLoader(new File(antScriptFile.getParentFile(), FatJarRsrcUrlBuilder.JAR_RSRC_LOADER_ZIP));
	}
	
	private void copyJarInJarLoader(File targetFile) throws IOException {
		try (InputStream is= JavaPlugin.getDefault().getBundle().getEntry(FatJarRsrcUrlBuilder.JAR_RSRC_LOADER_ZIP).openStream(); OutputStream os= new FileOutputStream(targetFile);) {
			byte[] buf= new byte[1024];
			while (true) {
				int cnt= is.read(buf);
				if (cnt <= 0){
					break;
}
				os.write(buf, 0, cnt);
			}
			
		}
		
	}
	
	protected void buildANTScript(OutputStream outputStream, String projectName, IPath absJarfile, String mainClass, SourceInfo[] sourceInfos) throws IOException {
		String absJarname= absJarfile.toString();
		DocumentBuilder docBuilder= null;
		DocumentBuilderFactory factory= DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		try {
			docBuilder= factory.newDocumentBuilder();
		}
		 catch (ParserConfigurationException ex) {
			throw new IOException(FatJarPackagerMessages.FatJarPackageAntScript_error_couldNotGetXmlBuilder);
		}
		
		Document document= docBuilder.newDocument();
		Node comment;
		 Element project= document.createElement("project"); 
		project.setAttribute("name", "Create Runnable Jar for Project " + projectName + " with Jar-in-Jar Loader"); 
		project.setAttribute("default", "create_run_jar"); 
		comment= document.createComment("this file was created by Eclipse Runnable JAR file Export Wizard"); 
		project.appendChild(comment);
		comment= document.createComment("ANT 1.7 is required"); 
		project.appendChild(comment);
		document.appendChild(project);
		addBaseDirProperties(document, project);
		Element target= document.createElement("target"); 
		target.setAttribute("name", "create_run_jar"); 
		project.appendChild(target);
		Element jar= document.createElement("jar"); 
		jar.setAttribute("destfile", substituteBaseDirs(absJarname)); 
		target.appendChild(jar);
		Element manifest= document.createElement("manifest"); 
		jar.appendChild(manifest);
		Element attribute= document.createElement("attribute"); 
		attribute.setAttribute("name", "Main-Class"); 
		attribute.setAttribute("value", JIJConstants.LOADER_MAIN_CLASS); 
		manifest.appendChild(attribute);
		attribute= document.createElement("attribute"); 
		attribute.setAttribute("name", JIJConstants.REDIRECTED_MAIN_CLASS_MANIFEST_NAME); 
		attribute.setAttribute("value", mainClass); 
		manifest.appendChild(attribute);
		attribute= document.createElement("attribute"); 
		attribute.setAttribute("name", "Class-Path"); 
		attribute.setAttribute("value", "."); 
		manifest.appendChild(attribute);
		attribute= document.createElement("attribute"); 
		attribute.setAttribute("name", JIJConstants.REDIRECTED_CLASS_PATH_MANIFEST_NAME); 
		StringBuilder rsrcClassPath= new StringBuilder();
		rsrcClassPath.append(JIJConstants.CURRENT_DIR);
		for (SourceInfo sourceInfo : sourceInfos) {
			if (sourceInfo.isJar) {
				rsrcClassPath.append(" ")  .append(new File(sourceInfo.absPath).getName());
			}
			
		}
		
		attribute.setAttribute("value", rsrcClassPath.toString()); 
		manifest.appendChild(attribute);
		Element zipfileset= document.createElement("zipfileset"); 
		zipfileset.setAttribute("src", FatJarRsrcUrlBuilder.JAR_RSRC_LOADER_ZIP); 
		jar.appendChild(zipfileset);
		for (SourceInfo sourceInfo : sourceInfos) {
			if (sourceInfo.isJar) {
				File jarFile= new File(sourceInfo.absPath);
				Element fileset= document.createElement("zipfileset"); 
				fileset.setAttribute("dir", substituteBaseDirs(jarFile.getParent())); 
				fileset.setAttribute("includes", jarFile.getName()); 
				jar.appendChild(fileset);
			}
			 else {
				Element fileset= document.createElement("fileset"); 
				fileset.setAttribute("dir", substituteBaseDirs(sourceInfo.absPath)); 
				jar.appendChild(fileset);
			}
			
		}
		
		try {
			 Transformer transformer= TransformerFactory.newInstance().newTransformer();
			transformer.setOutputProperty(OutputKeys.METHOD, "xml"); 
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8"); 
			transformer.setOutputProperty(OutputKeys.INDENT, "yes"); 
			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4"); 
			DOMSource source= new DOMSource(document);
			StreamResult result= new StreamResult(outputStream);
			transformer.transform(source, result);
		}
		 catch (TransformerException e) {
			throw new IOException(FatJarPackagerMessages.FatJarPackageAntScript_error_couldNotTransformToXML);
		}
		
	}
	
}


