package org.xwiki.localization.wiki.internal;
import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Provider;
import javax.inject.Singleton;
import org.apache.commons.lang3.EnumUtils;
import org.slf4j.Logger;
import org.xwiki.bridge.event.DocumentCreatedEvent;
import org.xwiki.bridge.event.DocumentDeletedEvent;
import org.xwiki.bridge.event.DocumentUpdatedEvent;
import org.xwiki.bridge.event.WikiReadyEvent;
import org.xwiki.cache.Cache;
import org.xwiki.cache.CacheException;
import org.xwiki.cache.CacheManager;
import org.xwiki.cache.config.CacheConfiguration;
import org.xwiki.component.annotation.Component;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.component.descriptor.ComponentInstantiationStrategy;
import org.xwiki.component.descriptor.DefaultComponentDescriptor;
import org.xwiki.component.internal.multi.ComponentManagerManager;
import org.xwiki.component.manager.ComponentLifecycleException;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.component.manager.ComponentRepositoryException;
import org.xwiki.component.phase.Disposable;
import org.xwiki.component.phase.Initializable;
import org.xwiki.component.phase.InitializationException;
import org.xwiki.localization.TranslationBundle;
import org.xwiki.localization.TranslationBundleDoesNotExistsException;
import org.xwiki.localization.TranslationBundleFactory;
import org.xwiki.localization.message.TranslationMessageParser;
import org.xwiki.localization.wiki.internal.TranslationDocumentModel.Scope;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.WikiReference;
import org.xwiki.observation.EventListener;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.event.Event;
import org.xwiki.query.Query;
import org.xwiki.query.QueryManager;
import org.xwiki.security.authorization.AccessDeniedException;
import org.xwiki.security.authorization.AuthorizationManager;
import org.xwiki.security.authorization.Right;
import org.xwiki.wiki.descriptor.WikiDescriptorManager;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.StringProperty;
public class DocumentTranslationBundleFactory implements TranslationBundleFactory, Initializable, Disposable {
    public final static String ID = "document";
    public static final String ID_PREFIX = ID + ':';
    private static final List<Event> EVENTS = Arrays.<Event>asList(new DocumentUpdatedEvent(), new DocumentDeletedEvent(), new DocumentCreatedEvent());
    private static final List<Event> WIKIEVENTS = Arrays.<Event>asList(new WikiReadyEvent());
    private Provider<ComponentManager> componentManagerProvider;
    private EntityReferenceSerializer<String> uidSerializer;
    private EntityReferenceSerializer<String> serializer;
    private DocumentReferenceResolver<String> currentResolver;
    private CacheManager cacheManager;
    private ObservationManager observation;
    private Provider<XWikiContext> xcontextProvider;
    private TranslationMessageParser translationParser;
    private ComponentManagerManager cmManager;
    private WikiDescriptorManager wikiManager;
    private Logger logger;
    private QueryManager queryManager;
    private AuthorizationManager authorizationManager;
    private Cache<TranslationBundle> onDemandBundleCache;
    private final EventListener listener = new EventListener() {
        public void onEvent(Event event, Object arg1, Object arg2) {
            translationDocumentUpdated((XWikiDocument) arg1);
        }
        
        public String getName() {
            return "localization.bundle.document";
        }
        
        public List<Event> getEvents() {
            return EVENTS;
        }
        
    };
    private final EventListener wikilistener = new EventListener() {
        public void onEvent(Event event, Object arg1, Object arg2) {
            loadTranslations(((WikiReadyEvent) event).getWikiId());
        }
        
        public String getName() {
            return "localization.wikiready";
        }
        
        public List<Event> getEvents() {
            return WIKIEVENTS;
        }
        
    };
    public void initialize() throws InitializationException {
        CacheConfiguration cacheConfiguration = new CacheConfiguration("localization.bundle.document");
        try {
            this.onDemandBundleCache = this.cacheManager.createNewCache(cacheConfiguration);
        }
         catch (CacheException e) {
            this.logger.error("Failed to create cache [{}]", cacheConfiguration.getConfigurationId(), e);
        }
        
        loadTranslations(this.wikiManager.getMainWikiId());
        this.observation.addListener(this.listener);
        this.observation.addListener(this.wikilistener);
    }
    
    private void loadTranslations(String wiki) {
        XWikiContext xcontext = this.xcontextProvider.get();
        WikiReference wikiReference = new WikiReference(wiki);
        try {
            Query query = this.queryManager.createQuery(String.format( "select distinct doc.fullName from Document doc, doc.object(%s) as translation", TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE_STRING), Query.XWQL);
            query.setWiki(wiki);
            List<String> documents = query.execute();
            for (String documentName : documents) {
                DocumentReference reference = currentResolver.resolve(documentName, wikiReference);
                XWikiDocument document = xcontext.getWiki().getDocument(reference, xcontext);
                try {
                    registerTranslationBundle(document);
                }
                 catch (Exception e) {
                    this.logger.error("Failed to register translation bundle from document [{}]", document.getDocumentReference(), e);
                }
                
            }
            
        }
         catch (Exception e) {
            this.logger.error("Failed to load existing translations", e);
        }
        
    }
    
    public TranslationBundle getBundle(String bundleId) throws TranslationBundleDoesNotExistsException {
        String roleHint = ID_PREFIX + bundleId;
        if (this.componentManagerProvider.get().hasComponent(TranslationBundle.class, roleHint)) {
            try {
                return this.componentManagerProvider.get().getInstance(TranslationBundle.class, roleHint);
            }
             catch (ComponentLookupException e) {
                this.logger.debug("Failed to lookup component [{}] with hint [{}].", TranslationBundle.class, bundleId, e);
            }
            
        }
        
        return getOnDemandDocumentBundle(this.currentResolver.resolve(bundleId));
    }
    
    private TranslationBundle getOnDemandDocumentBundle(DocumentReference documentReference) throws TranslationBundleDoesNotExistsException {
        String uid = this.uidSerializer.serialize(documentReference);
        TranslationBundle bundle = this.onDemandBundleCache.get(uid);
        if (bundle == null) {
            synchronized (this.onDemandBundleCache) {
                bundle = this.onDemandBundleCache.get(uid);
                if (bundle == null) {
                    bundle = createOnDemandDocumentBundle(documentReference, uid);
                    this.onDemandBundleCache.set(uid, bundle);
                }
                
            }
            
        }
        
        return bundle;
    }
    
    private OnDemandDocumentTranslationBundle createOnDemandDocumentBundle(DocumentReference documentReference, String uid) throws TranslationBundleDoesNotExistsException {
        XWikiContext context = this.xcontextProvider.get();
        XWikiDocument document;
        try {
            document = context.getWiki().getDocument(documentReference, context);
        }
         catch (XWikiException e) {
            throw new TranslationBundleDoesNotExistsException("Failed to get translation document", e);
        }
        
        if (document.isNew()) {
            throw new TranslationBundleDoesNotExistsException(String.format("Document [%s] does not exists", documentReference));
        }
        
        OnDemandDocumentTranslationBundle documentBundle;
        try {
            documentBundle = new OnDemandDocumentTranslationBundle(ID_PREFIX, document.getDocumentReference(), this.componentManagerProvider.get(), this.translationParser, this, uid);
        }
         catch (ComponentLookupException e) {
            throw new TranslationBundleDoesNotExistsException("Failed to create document bundle", e);
        }
        
        return documentBundle;
    }
    
    private ComponentDocumentTranslationBundle createComponentDocumentBundle(XWikiDocument document, ComponentDescriptor<TranslationBundle> descriptor) throws TranslationBundleDoesNotExistsException {
        ComponentDocumentTranslationBundle documentBundle;
        try {
            documentBundle = new ComponentDocumentTranslationBundle(ID_PREFIX, document.getDocumentReference(), this.componentManagerProvider.get(), this.translationParser, descriptor);
        }
         catch (ComponentLookupException e) {
            throw new TranslationBundleDoesNotExistsException("Failed to create document bundle", e);
        }
        
        return documentBundle;
    }
    
    void clear(String uid) {
        this.onDemandBundleCache.remove(uid);
    }
    
    private void translationDocumentUpdated(XWikiDocument document) {
        if (!document.getOriginalDocument().isNew()) {
            unregisterTranslationBundle(document.getOriginalDocument());
        }
        
        if (!document.isNew()) {
            try {
                registerTranslationBundle(document);
            }
             catch (Exception e) {
                this.logger.error("Failed to register translation bundle from document [{}]", document.getDocumentReference(), e);
            }
            
        }
        
    }
    
    private Scope getScope(XWikiDocument document) {
        BaseObject obj = document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE);
        if (obj != null) {
            return getScope(obj);
        }
        
        return null;
    }
    
    private Scope getScope(BaseObject obj) {
        if (obj != null) {
            StringProperty scopeProperty = (StringProperty) obj.getField(TranslationDocumentModel.TRANSLATIONCLASS_PROP_SCOPE);
            if (scopeProperty != null) {
                String scopeString = scopeProperty.getValue();
                return EnumUtils.getEnum(Scope.class, scopeString.toUpperCase());
            }
            
        }
        
        return null;
    }
    
    private void unregisterTranslationBundle(XWikiDocument document) {
        Scope scope = getScope(document);
        if (scope != null && scope != Scope.ON_DEMAND) {
            ComponentDescriptor<TranslationBundle> descriptor = createComponentDescriptor(document.getDocumentReference());
            getComponentManager(document, scope, true).unregisterComponent(descriptor);
        }
        
        this.onDemandBundleCache.remove(this.uidSerializer.serialize(document.getDocumentReference()));
    }
    
    private void registerTranslationBundle(XWikiDocument document) throws TranslationBundleDoesNotExistsException, ComponentRepositoryException, AccessDeniedException {
        Scope scope = getScope(document);
        if (scope != null && scope != Scope.ON_DEMAND) {
            checkRegistrationAuthorization(document, scope);
            ComponentDescriptor<TranslationBundle> descriptor = createComponentDescriptor(document.getDocumentReference());
            ComponentDocumentTranslationBundle bundle = createComponentDocumentBundle(document, descriptor);
            getComponentManager(document, scope, true).registerComponent(descriptor, bundle);
        }
        
    }
    
    private void checkRegistrationAuthorization(XWikiDocument document, Scope scope) throws AccessDeniedException {
        switch (scope) {
            case GLOBAL:
                this.authorizationManager.checkAccess(Right.PROGRAM, document.getAuthorReference(), null);
                break;
            case WIKI:
                this.authorizationManager.checkAccess(Right.ADMIN, document.getAuthorReference(), document .getDocumentReference().getWikiReference());
                break;
            default: break;
        }
        
    }
    
    private ComponentDescriptor<TranslationBundle> createComponentDescriptor(DocumentReference documentReference) {
        DefaultComponentDescriptor<TranslationBundle> descriptor = new DefaultComponentDescriptor<TranslationBundle>();
        descriptor.setImplementation(ComponentDocumentTranslationBundle.class);
        descriptor.setInstantiationStrategy(ComponentInstantiationStrategy.SINGLETON);
        descriptor.setRoleHint(ID_PREFIX + this.serializer.serialize(documentReference));
        descriptor.setRoleType(TranslationBundle.class);
        return descriptor;
    }
    
    private ComponentManager getComponentManager(XWikiDocument document, Scope scope, boolean create) {
        String hint;
        switch (scope) {
            case WIKI:
                hint = "wiki:" + document.getDocumentReference().getWikiReference().getName();
                break;
            case USER:
                hint = "user:" + this.serializer.serialize(document.getAuthorReference());
                break;
            default: hint = null;
                break;
        }
        
        return this.cmManager.getComponentManager(hint, create);
    }
    
    public void dispose() throws ComponentLifecycleException {
        this.observation.removeListener(this.listener.getName());
        this.observation.removeListener(this.wikilistener.getName());
    }
    
}


