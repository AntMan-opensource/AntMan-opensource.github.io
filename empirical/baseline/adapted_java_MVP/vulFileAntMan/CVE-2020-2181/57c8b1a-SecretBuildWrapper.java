package org.jenkinsci.plugins.credentialsbinding.impl;
import hudson.Extension;
import hudson.Launcher;
import hudson.console.ConsoleLogFilter;
import hudson.console.LineTransformationOutputStream;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.model.Run;
import hudson.tasks.BuildWrapper;
import hudson.tasks.BuildWrapperDescriptor;
import org.jenkinsci.plugins.credentialsbinding.MultiBinding;
import org.jenkinsci.plugins.credentialsbinding.masking.SecretPatterns;
import org.kohsuke.stapler.DataBoundConstructor;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import java.io.IOException;
import java.io.OutputStream;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
@SuppressWarnings({"rawtypes", "unchecked"}) 
public class SecretBuildWrapper extends BuildWrapper {
    private  List<? extends MultiBinding<?>> bindings;
    private final static Map<AbstractBuild<?, ?>, Collection<String>> secretsForBuild = new WeakHashMap<AbstractBuild<?, ?>, Collection<String>>();
    public static @CheckForNull Pattern getPatternForBuild(@Nonnull AbstractBuild<?, ?> build) {
        if (secretsForBuild.containsKey(build)) {
            return SecretPatterns.getAggregateSecretPattern(secretsForBuild.get(build));
        }
         else {
            return null;
        }
        
    }
    
    @DataBoundConstructor public SecretBuildWrapper(List<? extends MultiBinding<?>> bindings) { this.bindings = bindings == null ? Collections.<MultiBinding<?>>emptyList() : bindings; }
    public List<? extends MultiBinding<?>> getBindings() {
        return bindings;
    }
    
    public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) throws IOException, InterruptedException, Run.RunnerAbortedException {
        return new Filter(build.getCharset().name()).decorateLogger(build, logger);
    }
    
 public Environment setUp(AbstractBuild build, final Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
        final List<MultiBinding.MultiEnvironment> m = new ArrayList<MultiBinding.MultiEnvironment>();
        Set<String> secrets = new HashSet<String>();
        for (MultiBinding binding : bindings) {
            MultiBinding.MultiEnvironment e = binding.bind(build, build.getWorkspace(), launcher, listener);
            m.add(e);
            secrets.addAll(e.getValues().values());
        }
        
        if (!secrets.isEmpty()) {
            secretsForBuild.put(build, secrets);
        }
        
        return new Environment() {
 public void buildEnvVars(Map<String,String> env) {
                for (MultiBinding.MultiEnvironment e : m) {
                    for (Map.Entry<String,String> pair : e.getValues().entrySet()) {
                        env.put(pair.getKey(), pair.getValue().replace("$", "$$$$"));
                    }
                    
                }
                
            }
            
 public boolean tearDown(AbstractBuild build, BuildListener listener) throws IOException, InterruptedException {
                for (MultiBinding.MultiEnvironment e : m) {
                    e.getUnbinder().unbind(build, build.getWorkspace(), launcher, listener);
                }
                
                secretsForBuild.remove(build);
                return true;
            }
            
        };
    }
    
 public void makeSensitiveBuildVariables(AbstractBuild build, Set<String> sensitiveVariables) {
        for (MultiBinding binding : bindings) {
            sensitiveVariables.addAll(binding.variables());
        }
        
    }
    
    protected Object readResolve() {
        if (bindings == null) {
            bindings = Collections.emptyList();
        }
        
        return this;
    }
    
    private static final class Filter extends ConsoleLogFilter {
        private final String charsetName;
        Filter(String charsetName) {
            this.charsetName = charsetName;
        }
        
 public OutputStream decorateLogger(final AbstractBuild build, final OutputStream logger) throws IOException, InterruptedException {
            return new LineTransformationOutputStream() {                 Pattern p;
 protected void eol(byte[] b, int len) throws IOException {
                    if (p == null) {
                        p = getPatternForBuild(build);
                    }
                    
                    if (p != null && !p.toString().isEmpty()) {
                        Matcher m = p.matcher(new String(b, 0, len, charsetName));
                        if (m.find()) {
                            logger.write(m.replaceAll("****").getBytes(charsetName));
                        }
                         else {
                            logger.write(b, 0, len);
                        }
                        
                    }
                     else {
                        logger.write(b, 0, len);
                    }
                    
                }
                
 public void flush() throws IOException {
                    logger.flush();
                }
                
 public void close() throws IOException {
                    super.close();
                    logger.close();
                }
                
            };
        }
        
    }
    
    @Extension(ordinal = 100) public static class DescriptorImpl extends BuildWrapperDescriptor { @Override public boolean isApplicable(AbstractProject<?, ?> item) { return true; }
 public String getDisplayName() {
            return Messages.SecretBuildWrapper_use_secret_text_s_or_file_s_();
        }
        
    }
    
}


