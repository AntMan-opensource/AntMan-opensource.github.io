package hudson.model;
import com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter;
import hudson.Util;
import hudson.security.ACL;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import jenkins.model.Jenkins;
import jenkins.security.ApiTokenProperty;
import org.kohsuke.stapler.HttpResponses;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.springframework.security.access.AccessDeniedException;
public final class BuildAuthorizationToken {
    private final String token;
    public BuildAuthorizationToken(String token) {
        this.token = token;
    }
    
    public static BuildAuthorizationToken create(StaplerRequest req) {
        if (req.getParameter("pseudoRemoteTrigger") != null) {
            String token = Util.fixEmpty(req.getParameter("authToken"));
            if(token!=null) return new BuildAuthorizationToken(token);
        }
        
        return null;
    }
    
 public static void checkPermission(AbstractProject<?,?> project, BuildAuthorizationToken token, StaplerRequest req, StaplerResponse rsp) throws IOException {
        checkPermission((Job<?,?>) project, token, req, rsp);
    }
    
    public static void checkPermission(Job<?,?> project, BuildAuthorizationToken token, StaplerRequest req, StaplerResponse rsp) throws IOException {
        if (!Jenkins.get().isUseSecurity()){
            return;    
}
        if(token!=null && token.token != null) {
            String providedToken = req.getParameter("token");
            if (providedToken != null && providedToken.equals(token.token)){
                return;
}
            if (providedToken != null){
                throw new AccessDeniedException(Messages.BuildAuthorizationToken_InvalidTokenProvided());
}
        }
        
        project.checkPermission(Item.BUILD);
        if (req.getMethod().equals("POST")) {
            return;
        }
        
        if (req.getAttribute(ApiTokenProperty.class.getName()) instanceof User) {
            return;
        }
        
        rsp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
        rsp.addHeader("Allow", "POST");
        throw HttpResponses.forwardToView(project, "requirePOST.jelly");
    }
    
    public String getToken() {
        return token;
    }
    
    public static final class ConverterImpl extends AbstractSingleValueConverter {
        public boolean canConvert(Class type) {
            return type== BuildAuthorizationToken.class;
        }
        
        public Object fromString(String str) {
            return new BuildAuthorizationToken(str);
        }
        
        public String toString(Object obj) {
            return ((BuildAuthorizationToken)obj).token;
        }
        
    }
    
}


