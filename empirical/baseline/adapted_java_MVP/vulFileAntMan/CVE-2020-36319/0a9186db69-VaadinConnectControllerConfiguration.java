package com.vaadin.flow.server.connect;
import java.lang.reflect.Method;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jackson.JacksonProperties;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
import com.vaadin.flow.server.connect.auth.VaadinConnectAccessChecker;
import static com.vaadin.flow.server.connect.VaadinConnectController.VAADIN_ENDPOINT_MAPPER_BEAN_QUALIFIER;
public class VaadinConnectControllerConfiguration {
    private final VaadinEndpointProperties vaadinEndpointProperties;
    public VaadinConnectControllerConfiguration( VaadinEndpointProperties vaadinEndpointProperties) {
        this.vaadinEndpointProperties = vaadinEndpointProperties;
    }
    
    public WebMvcRegistrations webMvcRegistrationsHandlerMapping() {
        return new WebMvcRegistrations() { 

            public RequestMappingHandlerMapping getRequestMappingHandlerMapping() {
                return new RequestMappingHandlerMapping() { 

                    protected void registerHandlerMethod(Object handler, Method method, RequestMappingInfo mapping) {
                        if (VaadinConnectController.class .equals(method.getDeclaringClass())) {
                            mapping = prependConnectPrefixUrl(mapping);
                        }
                        
                        super.registerHandlerMethod(handler, method, mapping);
                    }
                    
                };
            }
            
        };
    }
    
    private RequestMappingInfo prependConnectPrefixUrl( RequestMappingInfo mapping) {
        PatternsRequestCondition connectEndpointPattern = new PatternsRequestCondition( vaadinEndpointProperties.getVaadinEndpointPrefix()) .combine(mapping.getPatternsCondition());
        return new RequestMappingInfo(mapping.getName(), connectEndpointPattern, mapping.getMethodsCondition(), mapping.getParamsCondition(), mapping.getHeadersCondition(), mapping.getConsumesCondition(), mapping.getProducesCondition(), mapping.getCustomCondition());
    }
    
    public EndpointNameChecker endpointNameChecker() {
        return new EndpointNameChecker();
    }
    
    public VaadinConnectAccessChecker accessChecker() {
        return new VaadinConnectAccessChecker();
    }
    
    public ExplicitNullableTypeChecker typeChecker() {
        return new ExplicitNullableTypeChecker();
    }
    
    public ObjectMapper vaadinEndpointMapper(ApplicationContext context) {
        ObjectMapper objectMapper = new ObjectMapper();
        JacksonProperties jacksonProperties = context .getBean(JacksonProperties.class);
        if (jacksonProperties.getVisibility().isEmpty()) {
            objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        }
        
        return objectMapper;
    }
    
}


