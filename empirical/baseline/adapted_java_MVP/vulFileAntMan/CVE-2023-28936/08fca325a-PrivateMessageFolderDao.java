package org.apache.openmeetings.db.dao.user;
import static org.apache.openmeetings.db.util.DaoHelper.UNSUPPORTED;
import static org.apache.openmeetings.db.util.DaoHelper.setLimits;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.apache.openmeetings.db.dao.IDataProviderDao;
import org.apache.openmeetings.db.entity.user.PrivateMessageFolder;
import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
public class PrivateMessageFolderDao implements IDataProviderDao<PrivateMessageFolder> {
	private static final Logger log = LoggerFactory.getLogger(PrivateMessageFolderDao.class);
	private EntityManager em;
	public Long addPrivateMessageFolder(String folderName, Long userId) {
		try {
			PrivateMessageFolder privateMessageFolder = new PrivateMessageFolder();
			privateMessageFolder.setFolderName(folderName);
			privateMessageFolder.setUserId(userId);
			privateMessageFolder.setInserted(new Date());
			privateMessageFolder = em.merge(privateMessageFolder);
			return privateMessageFolder.getId();
		}
		 catch (Exception e) {
			log.error("[addPrivateMessageFolder]",e);
		}
		
		return null;
	}
	
	public Long addPrivateMessageFolderObj(PrivateMessageFolder folder) {
		folder.setInserted(new Date());
		folder = em.merge(folder);
		return folder.getId();
	}
	
	public PrivateMessageFolder get(Long id) {
		final String hql = "select c from PrivateMessageFolder c where c.id = :id ";
		List<PrivateMessageFolder> list = em.createQuery(hql, PrivateMessageFolder.class) .setParameter("id", id).getResultList();
		return list.size() == 1 ? list.get(0) : null;
	}
	
	public List<PrivateMessageFolder> get(long start, long count) {
		return setLimits( em.createQuery("SELECT c FROM PrivateMessageFolder c ORDER BY c.id", PrivateMessageFolder.class) , start, count) .getResultList();
	}
	
	public PrivateMessageFolder update(PrivateMessageFolder folder, Long userId) {
		if (folder.getId() == null) {
			em.persist(folder);
		}
		 else {
			folder = em.merge(folder);
		}
		
		return folder;
	}
	
	public void delete(PrivateMessageFolder folder, Long userId) {
		folder = em.find(PrivateMessageFolder.class, folder.getId());
		em.remove(folder);
	}
	
	public List<PrivateMessageFolder> get(String search, long start, long count, SortParam<String> order) {
		throw UNSUPPORTED;
	}
	
	public long count() {
		throw UNSUPPORTED;
	}
	
	public long count(String search) {
		throw UNSUPPORTED;
	}
	
}


