package org.apache.openmeetings.db.dao.user;
import static org.apache.openmeetings.db.util.DaoHelper.getRoot;
import static org.apache.openmeetings.db.util.DaoHelper.setLimits;
import java.util.Collection;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.apache.openmeetings.db.dao.IGroupAdminDataProviderDao;
import org.apache.openmeetings.db.entity.user.Group;
import org.apache.openmeetings.db.entity.user.GroupUser;
import org.apache.openmeetings.db.util.DaoHelper;
import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
public class GroupDao implements IGroupAdminDataProviderDao<Group> {
	private static final List<String> searchFields = List.of("name");
	private static final List<String> guSearchFields = List.copyOf(searchFields.stream().map(n -> "group." + n).toList());
	private EntityManager em;
	public Group get(Long id) {
		List<Group> list = em.createNamedQuery("getGroupById", Group.class) .setParameter("id", id).getResultList();
		return list.size() == 1 ? list.get(0) : null;
	}
	
	public Group get(String name) {
		List<Group> groups = em.createNamedQuery("getGroupByName", Group.class).setParameter("name", name).getResultList();
		return groups == null || groups.isEmpty() ? null : groups.get(0);
	}
	
	public Group getExternal(String name) {
		List<Group> groups = em.createNamedQuery("getExtGroupByName", Group.class).setParameter("name", name).getResultList();
		Group g = groups == null || groups.isEmpty() ? null : groups.get(0);
		if (g == null) {
			g = update(new Group().setExternal(true).setName(name), null);
		}
		
		return g;
	}
	
	public List<Group> get(long start, long count) {
		return setLimits(em.createNamedQuery("getNondeletedGroups", Group.class), start, count) .getResultList();
	}
	
	public List<Group> get(String search, long start, long count, SortParam<String> sort) {
		return DaoHelper.get(em, Group.class, false, search, searchFields, true , null , sort, start, count);
	}
	
	private Predicate getAdminFilter(Long adminId, CriteriaBuilder builder, CriteriaQuery<?> query) {
		Root<GroupUser> root = getRoot(query, GroupUser.class);
		return builder.and(builder.equal(root.get("user").get("id"), adminId) , builder.isTrue(root.get("moderator")));
	}
	
	public List<Group> adminGet(String search, Long adminId, long start, long count, SortParam<String> sort) {
		return DaoHelper.get(em, GroupUser.class, Group.class , (builder, root) -> root.get("group") , true, search, guSearchFields, true , (b, q) -> getAdminFilter(adminId, b, q) , sort, start, count);
	}
	
	public long count() {
		return em.createNamedQuery("countGroups", Long.class).getSingleResult();
	}
	
	public long count(String search) {
		return DaoHelper.count(em, Group.class, search, searchFields, true, null);
	}
	
	public long adminCount(String search, Long adminId) {
		return DaoHelper.count(em, GroupUser.class , (builder, root) -> builder.countDistinct(root.get("group")) , search, guSearchFields, false , (b, q) -> getAdminFilter(adminId, b, q.distinct(true)));
	}
	
	public List<Group> get(Collection<Long> ids) {
		return em.createNamedQuery("getGroupsByIds", Group.class).setParameter("ids", ids).getResultList();
	}
	
	public List<Group> getLimited() {
		return em.createNamedQuery("getLimitedGroups", Group.class).getResultList();
	}
	
	public List<Group> getGroupsForUserNotifications() {
		return em.createNamedQuery("getGroupsForUserNotifications", Group.class).getResultList();
	}
	
	public Group update(Group entity, Long userId) {
		if (entity.getId() == null) {
			if (userId != null) {
				entity.setInsertedby(userId);
			}
			
			em.persist(entity);
		}
		 else {
			if (userId != null) {
				entity.setUpdatedby(userId);
			}
			
			entity = em.merge(entity);
		}
		
		return entity;
	}
	
	public void delete(Group g, Long userId) {
		em.createNamedQuery("deleteGroupUsersByGroup").setParameter("id", g.getId()).executeUpdate();
		g.setDeleted(true);
		if (userId != null) {
			g.setUpdatedby(userId);
		}
		
		em.merge(g);
	}
	
}


