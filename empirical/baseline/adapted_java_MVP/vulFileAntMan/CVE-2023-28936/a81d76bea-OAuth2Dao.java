package org.apache.openmeetings.db.dao.server;
import static org.apache.openmeetings.db.util.DaoHelper.setLimits;
import static org.apache.openmeetings.util.OpenmeetingsVariables.isAllowRegisterOauth;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import org.apache.openmeetings.db.dao.IDataProviderDao;
import org.apache.openmeetings.db.dao.basic.ConfigurationDao;
import org.apache.openmeetings.db.entity.server.LdapConfig;
import org.apache.openmeetings.db.entity.server.OAuthServer;
import org.apache.openmeetings.db.util.DaoHelper;
import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
public class OAuth2Dao implements IDataProviderDao<OAuthServer> {
	private static final List<String> searchFields = List.of("name");
	private EntityManager em;
	private ConfigurationDao cfgDao;
	public List<OAuthServer> getActive() {
		if (!isAllowRegisterOauth()) {
			return List.of();
		}
		
		TypedQuery<OAuthServer> query = em.createNamedQuery("getEnabledOAuthServers", OAuthServer.class);
		return query.getResultList();
	}
	
	public OAuthServer get(Long id) {
		List<OAuthServer> list = em.createNamedQuery("getOAuthServerById", OAuthServer.class) .setParameter("id", id).getResultList();
		return list.size() == 1 ? list.get(0) : null;
	}
	
	public List<OAuthServer> get(long start, long count) {
		return setLimits(em.createNamedQuery("getAllOAuthServers", OAuthServer.class) , start, count).getResultList();
	}
	
	public List<OAuthServer> get(String search, long start, long count, SortParam<String> sort) {
		return DaoHelper.get(em, OAuthServer.class, false, search, searchFields, true, null, sort, start, count);
	}
	
	public long count() {
		TypedQuery<Long> q = em.createNamedQuery("countOAuthServers", Long.class);
		return q.getSingleResult();
	}
	
	public long count(String search) {
		return DaoHelper.count(em, LdapConfig.class, search, searchFields, true, null);
	}
	
	public OAuthServer update(OAuthServer server, Long userId) {
		if (server.getId() == null) {
			em.persist(server);
		}
		 else {
			server = em.merge(server);
		}
		
		cfgDao.updateCsp();
		return server;
	}
	
	public void delete(OAuthServer server, Long userId) {
		server.setDeleted(true);
		update(server, userId);
	}
	
}


