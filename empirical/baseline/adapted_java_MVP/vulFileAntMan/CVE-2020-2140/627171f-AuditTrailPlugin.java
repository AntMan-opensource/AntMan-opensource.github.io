package hudson.plugins.audit_trail;
import hudson.DescriptorExtensionList;
import hudson.Extension;
import hudson.XmlFile;
import hudson.model.AbstractBuild;
import hudson.model.Descriptor;
import hudson.model.Run;
import hudson.util.FormValidation;
import jenkins.model.GlobalConfiguration;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
import org.jenkinsci.Symbol;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.DoNotUse;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import javax.annotation.PostConstruct;
import javax.servlet.ServletException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
public class AuditTrailPlugin extends GlobalConfiguration {
    private static final Logger LOGGER = Logger.getLogger(AuditTrailPlugin.class.getName());
    private String pattern = ".*/(?:configSubmit|doDelete|postBuildResult|enable|disable|" + "cancelQueue|stop|toggleLogKeep|doWipeOutWorkspace|createItem|createView|toggleOffline|" + "cancelQuietDown|quietDown|restart|exit|safeExit)";
    private boolean logBuildCause = true;
    private List<AuditLogger> loggers = new ArrayList<>();
    private transient String log;
    public String getPattern() { return pattern; }
    public boolean getLogBuildCause() { return logBuildCause; }
    public List<AuditLogger> getLoggers() { return loggers; }
    public AuditTrailPlugin() {
        load();
    }
    
    public boolean configure(StaplerRequest req, JSONObject formData) {
        loggers.forEach(AuditLogger::cleanUp);
        req.bindJSON(this, formData);
        return true;
    }
    
    public void setPattern(String pattern) {
        this.pattern = Optional.ofNullable(pattern).orElse("");
        updateFilterPattern();
        save();
    }
    
    public void setLogBuildCause(boolean logBuildCause) {
        this.logBuildCause = logBuildCause;
        save();
    }
    
    private void updateFilterPattern() {
        try {
            AuditTrailFilter.setPattern(pattern);
        }
         catch (PatternSyntaxException ex) {
            ex.printStackTrace();
        }
        
    }
    
    public DescriptorExtensionList<AuditLogger, Descriptor<AuditLogger>> getLoggerDescriptors() {
        return AuditLogger.all();
    }
    
    public void setLoggers(List<AuditLogger> loggers) {
        this.loggers = Optional.ofNullable(loggers).orElse(Collections.emptyList());
    }
    
    public void onFinalized(Run run) {
        LOGGER.warning("AuditTrailPlugin#onFinalized does nothing anymore, please update your script");
    }
    
    public void onFinalized(AbstractBuild build) {
        LOGGER.warning("AuditTrailPlugin#onFinalized does nothing anymore, please update your script");
    }
    
    private Object readResolve() {
        if (log != null) {
            if (loggers == null) {
                loggers = new ArrayList<>();
            }
            
            LogFileAuditLogger logger = new LogFileAuditLogger(log, 1, 1);
            if (!loggers.contains(logger)){
                loggers.add(logger);
}
            log = null;
        }
        
        updateFilterPattern();
        return this;
    }
    
    public FormValidation doRegexCheck(@QueryParameter final String value) throws IOException, ServletException {
        try {
            Pattern.compile(value);
            return FormValidation.ok();
        }
         catch (Exception ex) {
            return FormValidation.errorWithMarkup("Invalid <a href=\"" + "http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" + "\">regular expression</a> (" + ex.getMessage() + ")");
        }
        
    }
    
    protected XmlFile getConfigFile() {
        return new XmlFile(new File(Jenkins.get().getRootDir(),"audit-trail.xml"));
    }
    
}


