package org.xmlunit.util;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import org.xmlunit.ConfigurationException;
public class TransformerFactoryConfigurer {
    private final Map<String, Object> attributes, safeAttributes;
    private final Map<String, Boolean> features, safeFeatures;
    private TransformerFactoryConfigurer(Map<String, Object> attributes, Map<String, Object> safeAttributes, Map<String, Boolean> features, Map<String, Boolean> safeFeatures) {
        this.attributes = attributes;
        this.safeAttributes = safeAttributes;
        this.features = features;
        this.safeFeatures = safeFeatures;
    }
    
    public TransformerFactory configure(TransformerFactory factory) {
        for (Map.Entry<String, Object> attr : attributes.entrySet()) {
            try {
                factory.setAttribute(attr.getKey(), attr.getValue());
            }
             catch (IllegalArgumentException ex) {
                throw new ConfigurationException("Error setting attribute " + attr.getKey(), ex);
            }
            
        }
        
        for (Map.Entry<String, Object> attr : safeAttributes.entrySet()) {
            try {
                factory.setAttribute(attr.getKey(), attr.getValue());
            }
             catch (IllegalArgumentException ex) {
            }
            
        }
        
        for (Map.Entry<String, Boolean> feat : features.entrySet()) {
            try {
                factory.setFeature(feat.getKey(), feat.getValue());
            }
             catch (TransformerConfigurationException ex) {
                throw new ConfigurationException("Error setting feature " + feat.getKey(), ex);
            }
            
        }
        
        for (Map.Entry<String, Boolean> feat : safeFeatures.entrySet()) {
            try {
                factory.setFeature(feat.getKey(), feat.getValue());
            }
             catch (TransformerConfigurationException ex) {
            }
            
        }
        
        return factory;
    }
    
    public static Builder builder() {
        return new Builder();
    }
    
    public static final TransformerFactoryConfigurer Default = builder() .withDTDLoadingDisabled() .build();
    public static final TransformerFactoryConfigurer NoExternalAccess = builder() .withDTDLoadingDisabled() .withExternalStylesheetLoadingDisabled() .build();
    public static class Builder {
        private final Map<String, Object> attributes = new HashMap<String, Object>();
        private final Map<String, Object> safeAttributes = new HashMap<String, Object>();
        private final Map<String, Boolean> features = new HashMap<String, Boolean>();
        private final Map<String, Boolean> safeFeatures = new HashMap<String, Boolean>();
        public TransformerFactoryConfigurer build() {
            return new TransformerFactoryConfigurer(Collections.unmodifiableMap(attributes), Collections.unmodifiableMap(safeAttributes), Collections.unmodifiableMap(features), Collections.unmodifiableMap(safeFeatures));
        }
        
        public Builder withAttribute(String key, Object value) {
            attributes.put(key, value);
            return this;
        }
        
        public Builder withSafeAttribute(String key, Object value) {
            safeAttributes.put(key, value);
            return this;
        }
        
        public Builder withFeature(String key, boolean value) {
            features.put(key, value);
            return this;
        }
        
        public Builder withSafeFeature(String key, boolean value) {
            safeFeatures.put(key, value);
            return this;
        }
        
        public Builder withDTDLoadingDisabled() {
            return withSafeAttribute("http://javax.xml.XMLConstants/property/accessExternalDTD", "");
        }
        
        public Builder withExternalStylesheetLoadingDisabled() {
            return withSafeAttribute("http://javax.xml.XMLConstants/property/accessExternalStylesheet", "");
        }
        
    }
    
}


