package org.apache.druid.sql.calcite.view;
import com.google.common.annotations.VisibleForTesting;
import com.google.inject.Inject;
import org.apache.calcite.schema.TableMacro;
import org.apache.druid.java.util.common.ISE;
import org.apache.druid.server.security.Escalator;
import org.apache.druid.sql.calcite.planner.PlannerFactory;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
public class InProcessViewManager implements ViewManager {
  private final ConcurrentMap<String, DruidViewMacro> views;
  private final Escalator escalator;
  private final DruidViewMacroFactory druidViewMacroFactory;
  public InProcessViewManager( final Escalator escalator, final DruidViewMacroFactory druidViewMacroFactory ) {
    this.views = new ConcurrentHashMap<>();
    this.escalator = escalator;
    this.druidViewMacroFactory = druidViewMacroFactory;
  }
  
  public void createView(final PlannerFactory plannerFactory, final String viewName, final String viewSql) {
    final TableMacro oldValue = views.putIfAbsent(viewName, druidViewMacroFactory.create(plannerFactory, escalator, viewSql));
    if (oldValue != null) {
      throw new ISE("View[%s] already exists", viewName);
    }
    
  }
  
  public void alterView(final PlannerFactory plannerFactory, final String viewName, final String viewSql) {
    final TableMacro oldValue = views.replace(viewName, druidViewMacroFactory.create(plannerFactory, escalator, viewSql));
    if (oldValue != null) {
      throw new ISE("View[%s] does not exist", viewName);
    }
    
  }
  
  public void dropView(final String viewName) {
    final TableMacro oldValue = views.remove(viewName);
    if (oldValue == null) {
      throw new ISE("View[%s] does not exist", viewName);
    }
    
  }
  
  public Map<String, DruidViewMacro> getViews() {
    return views;
  }
  
}


