package org.apache.druid.sql.calcite.view;
import com.google.common.collect.ImmutableList;
import com.google.inject.Inject;
import com.google.inject.assistedinject.Assisted;
import org.apache.calcite.rel.type.RelDataType;
import org.apache.calcite.rel.type.RelDataTypeImpl;
import org.apache.calcite.schema.FunctionParameter;
import org.apache.calcite.schema.TableMacro;
import org.apache.calcite.schema.TranslatableTable;
import org.apache.calcite.schema.impl.ViewTable;
import org.apache.druid.server.security.Escalator;
import org.apache.druid.sql.calcite.planner.DruidPlanner;
import org.apache.druid.sql.calcite.planner.PlannerFactory;
import org.apache.druid.sql.calcite.schema.DruidSchemaName;
import java.util.List;
public class DruidViewMacro implements TableMacro {
  private final PlannerFactory plannerFactory;
  private final Escalator escalator;
  private final String viewSql;
  private final String druidSchemaName;
  public DruidViewMacro( @Assisted final PlannerFactory plannerFactory, @Assisted final Escalator escalator, @Assisted final String viewSql, @DruidSchemaName String druidSchemaName ) {
    this.plannerFactory = plannerFactory;
    this.escalator = escalator;
    this.viewSql = viewSql;
    this.druidSchemaName = druidSchemaName;
  }
  
  public TranslatableTable apply(final List<Object> arguments) {
    final RelDataType rowType;
    try (final DruidPlanner planner = plannerFactory.createPlanner(null)) {
      rowType = planner.plan(viewSql).rowType();
    }
    
    catch (Exception e) {
      throw new RuntimeException(e);
    }
    
    return new ViewTable( null, RelDataTypeImpl.proto(rowType), viewSql, ImmutableList.of(druidSchemaName), null );
  }
  
  public List<FunctionParameter> getParameters() {
    return ImmutableList.of();
  }
  
}


