package org.ballerinalang.cli.module;
import me.tongfei.progressbar.ProgressBar;
import me.tongfei.progressbar.ProgressBarStyle;
import org.ballerinalang.cli.module.util.ErrorUtil;
import org.ballerinalang.cli.module.util.Utils;
import org.ballerinalang.jvm.JSONParser;
import org.ballerinalang.jvm.values.MapValue;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.ws.rs.core.HttpHeaders;
import static org.ballerinalang.cli.module.util.CliModuleConstants.BALLERINA_PLATFORM;
import static org.ballerinalang.cli.module.util.CliModuleConstants.BAL_LANG_SPEC_VERSION;
import static org.ballerinalang.cli.module.util.CliModuleConstants.IDENTITY;
import static org.ballerinalang.cli.module.util.CliModuleConstants.RESOLVED_REQUESTED_URI;
import static org.ballerinalang.cli.module.util.Utils.convertToUrl;
import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;
import static org.ballerinalang.cli.module.util.Utils.getStatusCode;
import static org.ballerinalang.cli.module.util.Utils.initializeSsl;
import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;
public class Pull {
    private static final String VERSION_REGEX = "(\\d+\\.)(\\d+\\.)(\\d+)";
    private static PrintStream outStream = System.out;
    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();
    private Pull() {
    }
    
    public static void execute(String url, String modulePathInBaloCache, String moduleNameWithOrg, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild, boolean isNightlyBuild, String langSpecVersion, String platform) {
        if (isBuild) {
            logFormatter = new BuildLogFormatter();
        }
        
        HttpURLConnection conn = null;
        try {
            initializeSsl();
            conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost, proxyPort, proxyUsername, proxyPassword);
            conn.setInstanceFollowRedirects(false);
            setRequestMethod(conn, Utils.RequestMethod.GET);
            conn.setRequestProperty(BALLERINA_PLATFORM, platform);
            conn.setRequestProperty(BAL_LANG_SPEC_VERSION, langSpecVersion);
            conn.setRequestProperty(HttpHeaders.ACCEPT_ENCODING, IDENTITY);
            boolean redirect = false;
            if (getStatusCode(conn) == HttpURLConnection.HTTP_MOVED_TEMP) {
                redirect = true;
            }
             else {
                handleErrorResponse(conn, url, moduleNameWithOrg);
            }
            
            if (redirect) {
                String newUrl = conn.getHeaderField(HttpHeaders.LOCATION);
                String contentDisposition = conn.getHeaderField(HttpHeaders.CONTENT_DISPOSITION);
                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername, proxyPassword);
                conn.setRequestProperty(HttpHeaders.CONTENT_DISPOSITION, contentDisposition);
                createBaloInHomeRepo(conn, modulePathInBaloCache, moduleNameWithOrg, isNightlyBuild, newUrl, contentDisposition);
            }
            
        }
         catch (Exception e) {
            throw ErrorUtil.createCommandException(e.getMessage());
        }
         finally {
            if (conn != null) {
                conn.disconnect();
            }
            
            Authenticator.setDefault(null);
        }
        
    }
    
    private static void createBaloInHomeRepo(HttpURLConnection conn, String modulePathInBaloCache, String moduleNameWithOrg, boolean isNightlyBuild, String newUrl, String contentDisposition) {
        long responseContentLength = conn.getContentLengthLong();
        if (responseContentLength <= 0) {
            createError("invalid response from the server, please try again");
        }
        
        String resolvedURI = conn.getHeaderField(RESOLVED_REQUESTED_URI);
        if (resolvedURI == null || resolvedURI.equals("")) {
            resolvedURI = newUrl;
        }
        
        String[] uriParts = resolvedURI.split("/");
        String moduleVersion = uriParts[uriParts.length - 3];
        validateModuleVersion(moduleVersion);
        String baloFile = getBaloFileName(contentDisposition, uriParts[uriParts.length - 1]);
        Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);
        Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);
        if (baloPath.toFile().exists()) {
            createError("module already exists in the home repository: " + baloPath.toString());
        }
        
        createBaloFileDirectory(baloCacheWithModulePath);
        writeBaloFile(conn, baloPath, moduleNameWithOrg + ":" + moduleVersion, responseContentLength);
        handleNightlyBuild(isNightlyBuild, baloCacheWithModulePath);
    }
    
    private static void writeBaloFile(HttpURLConnection conn, Path baloPath, String fullModuleName, long resContentLength) {
        try (InputStream inputStream = conn.getInputStream(); FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {
            writeAndHandleProgress(inputStream, outputStream, resContentLength / 1024, fullModuleName);
        }
         catch (IOException e) {
            createError("error occurred copying the balo file: " + e.getMessage());
        }
        
    }
    
    private static void writeAndHandleProgress(InputStream inputStream, FileOutputStream outputStream, long totalSizeInKB, String fullModuleName) {
        int count;
        byte[] buffer = new byte[1024];
        try (ProgressBar progressBar = new ProgressBar(fullModuleName + " [central.ballerina.io -> home repo] ", totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, " KB", 1)) {
            while ((count = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, count);
                progressBar.step();
            }
            
        }
         catch (IOException e) {
            outStream.println(logFormatter.formatLog(fullModuleName + "pulling the module from central failed"));
        }
         finally {
            outStream.println(logFormatter.formatLog(fullModuleName + " pulled from central successfully"));
        }
        
    }
    
    private static void handleNightlyBuild(boolean isNightlyBuild, Path baloCacheWithModulePath) {
        if (isNightlyBuild) {
            Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), "nightly.build");
            if (!nightlyBuildMetaFile.toFile().exists()) {
                createNightlyBuildMetaFile(nightlyBuildMetaFile);
            }
            
        }
        
    }
    
    private static void validateModuleVersion(String moduleVersion) {
        if (!moduleVersion.matches(VERSION_REGEX)) {
            createError("module version could not be detected");
        }
        
    }
    
    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFilePath) {
        try {
            Files.createFile(nightlyBuildMetaFilePath);
        }
         catch (Exception e) {
            createError("error occurred while creating nightly.build file.");
        }
        
    }
    
    private static void createBaloFileDirectory(Path fullPathToStoreBalo) {
        try {
            Files.createDirectory(fullPathToStoreBalo);
        }
         catch (IOException e) {
            createError("error creating directory for balo file");
        }
        
    }
    
    private static void handleErrorResponse(HttpURLConnection conn, String url, String moduleFullName) {
        try (BufferedReader reader = new BufferedReader( new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {
            StringBuilder result = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line);
            }
            
            MapValue payload = (MapValue) JSONParser.parse(result.toString());
            createError("error: " + payload.getStringValue("message"));
        }
         catch (IOException e) {
            createError("failed to pull the module '" + moduleFullName + "' from the remote repository '" + url + "'");
        }
        
    }
    
    private static void createError(String errMessage) {
        throw ErrorUtil.createCommandException(logFormatter.formatLog(errMessage));
    }
    
    private static String getBaloFileName(String contentDisposition, String baloFile) {
        if (contentDisposition != null && !contentDisposition.equals("")) {
            return contentDisposition.substring("attachment; filename=".length());
        }
         else {
            return baloFile;
        }
        
    }
    
}

class DefaultLogFormatter {
    String formatLog(String msg) {
        return msg;
    }
    
}

class BuildLogFormatter extends DefaultLogFormatter {
    @Override
 String formatLog(String msg) {
        return "\t" + msg;
    }
    
}


