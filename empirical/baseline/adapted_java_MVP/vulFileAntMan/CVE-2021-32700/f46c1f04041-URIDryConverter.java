package org.wso2.ballerinalang.compiler.packaging.converters;
import org.ballerinalang.jvm.JSONParser;
import org.ballerinalang.jvm.values.MapValue;
import org.ballerinalang.model.elements.PackageID;
import org.ballerinalang.repository.CompilerInput;
import org.ballerinalang.toml.model.Manifest;
import org.wso2.ballerinalang.compiler.util.Name;
import org.wso2.ballerinalang.util.TomlParserUtils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.PasswordAuthentication;
import java.net.Proxy;
import java.net.URI;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
public class URIDryConverter extends URIConverter {
    private static boolean loggedError = false;
    private static final Pattern semVerPatchPattern = Pattern.compile("(\\d+)\\.(\\d+)");
    private PrintStream errStream = System.err;
    private Proxy proxy;
    private static TrustManager[] trustAllCerts = new TrustManager[]{             new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return new java.security.cert.X509Certificate[]{};
                }
                
                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
                
                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
                
            }
            
    };
    public URIDryConverter(URI base, Map<PackageID, Manifest> dependencyManifests) {
        this(base, dependencyManifests, false);
    }
    
    public URIDryConverter(URI base, Map<PackageID, Manifest> dependencyManifests, boolean isBuild) {
        super(base, dependencyManifests, isBuild);
        this.base = URI.create(base.toString() + "/modules/info/");
        try {
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            proxy = getProxy();
        }
         catch (NoSuchAlgorithmException | KeyManagementException e) {
        }
        
    }
    
    public Stream<CompilerInput> finalize(URI remoteURI, PackageID moduleID) {
        try {
            Matcher matcher = semVerPatchPattern.matcher(moduleID.version.value);
            if ("".equals(moduleID.version.value) || "*".equals(moduleID.version.value) || matcher.matches()) {
                HttpURLConnection conn;
                if (null == this.proxy) {
                    conn = (HttpURLConnection) remoteURI.toURL().openConnection();
                }
                 else {
                    conn = (HttpURLConnection) remoteURI.toURL().openConnection(this.proxy);
                }
                
                conn.setInstanceFollowRedirects(false);
                conn.setRequestMethod("GET");
                int statusCode = conn.getResponseCode();
                if (statusCode == 200) {
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {
                        StringBuilder result = new StringBuilder();
                        String line;
                        while ((line = reader.readLine()) != null) {
                            result.append(line);
                        }
                        
                        Object payload = JSONParser.parse(result.toString());
                        if (payload instanceof MapValue) {
                            MapValue moduleInfo = ((MapValue) payload).getMapValue("module");
                            String version = moduleInfo.getStringValue("version");
                            moduleID.version = new Name(version);
                        }
                        
                    }
                    
                }
                 else if (statusCode == 400 && !loggedError) {
                    try (BufferedReader errorStream = new BufferedReader( new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {
                        String errorContent = errorStream.lines().collect(Collectors.joining("\n"));
                        this.errStream.println("error: could not connect to remote repository to find the latest " + "version of module: " + moduleID.toString() + ". use '--offline' " + "flag to build in offline mode. reason: " + errorContent);
                        setErrorLoggedStatusAsTrue();
                    }
                    
                }
                 else if (statusCode == 500 && !loggedError) {
                    this.errStream.println("error: could not connect to remote repository to find the latest " + "version of module: " + moduleID.toString() + ". use '--offline' " + "flag to build in offline mode.");
                    setErrorLoggedStatusAsTrue();
                }
                
                conn.disconnect();
                Authenticator.setDefault(null);
            }
            
        }
         catch (IOException e) {
        }
        
        return Stream.empty();
    }
    
    private static void setErrorLoggedStatusAsTrue() {
        loggedError = true;
    }
    
    private Proxy getProxy() {
        org.ballerinalang.toml.model.Proxy proxy = TomlParserUtils.readSettings().getProxy();
        if (!"".equals(proxy.getHost())) {
            InetSocketAddress proxyInet = new InetSocketAddress(proxy.getHost(), proxy.getPort());
            if (!"".equals(proxy.getUserName()) && "".equals(proxy.getPassword())) {
                Authenticator authenticator = new RemoteAuthenticator();
                Authenticator.setDefault(authenticator);
            }
            
            return new Proxy(Proxy.Type.HTTP, proxyInet);
        }
        
        return null;
    }
    
    static class RemoteAuthenticator extends Authenticator {
        org.ballerinalang.toml.model.Proxy proxy;
        public RemoteAuthenticator() {
            proxy = TomlParserUtils.readSettings().getProxy();
        }
        
        protected PasswordAuthentication getPasswordAuthentication() {
            return (new PasswordAuthentication(this.proxy.getUserName(), this.proxy.getPassword().toCharArray()));
        }
        
    }
    
}


