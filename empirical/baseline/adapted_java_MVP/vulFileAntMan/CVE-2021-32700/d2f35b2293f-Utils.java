package org.ballerinalang.cli.module.util;
import java.io.IOException;
import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.PasswordAuthentication;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import static org.ballerinalang.cli.module.util.CliModuleConstants.SSL;
public class Utils {
    public enum RequestMethod {
        GET, POST }
    private static TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {         public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new java.security.cert.X509Certificate[] {};
        }
        
        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
        }
        
        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
        }
        
    } };
    public static Proxy getProxy(String proxyHost, int proxyPort, String proxyUsername, String proxyPassword) {
        if (!"".equals(proxyHost)) {
            InetSocketAddress proxyInet = new InetSocketAddress(proxyHost, proxyPort);
            if (!"".equals(proxyUsername) && "".equals(proxyPassword)) {
                Authenticator authenticator = new Authenticator() {
 public PasswordAuthentication getPasswordAuthentication() {
                        return (new PasswordAuthentication(proxyUsername, proxyPassword.toCharArray()));
                    }
                    
                };
                Authenticator.setDefault(authenticator);
            }
            
            return new Proxy(Proxy.Type.HTTP, proxyInet);
        }
        
        return null;
    }
    
    public static URL convertToUrl(String url) {
        try {
            return new URL(url);
        }
         catch (MalformedURLException e) {
            throw ErrorUtil.createCommandException(e.getMessage());
        }
        
    }
    
    public static void initializeSsl() {
        try {
            SSLContext sc = SSLContext.getInstance(SSL);
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        }
         catch (NoSuchAlgorithmException | KeyManagementException e) {
            throw ErrorUtil.createCommandException("initializing SSL failed: " + e.getMessage());
        }
        
    }
    
    public static HttpURLConnection createHttpUrlConnection(URL url, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword) {
        try {
            Proxy proxy = getProxy(proxyHost, proxyPort, proxyUsername, proxyPassword);
            if (proxy == null) {
                return (HttpURLConnection) url.openConnection();
            }
             else {
                return (HttpURLConnection) url.openConnection(proxy);
            }
            
        }
         catch (IOException e) {
            throw ErrorUtil.createCommandException(e.getMessage());
        }
        
    }
    
    public static void setRequestMethod(HttpURLConnection conn, RequestMethod method) {
        try {
            conn.setRequestMethod(getRequestMethodAsString(method));
        }
         catch (ProtocolException e) {
            throw ErrorUtil.createCommandException(e.getMessage());
        }
        
    }
    
    private static String getRequestMethodAsString(RequestMethod method) {
        switch (method) {
        case GET:
            return "GET";
        case POST:
            return "POST";
        default: throw ErrorUtil.createCommandException("invalid request method:" + method);
        }
        
    }
    
    public static int getStatusCode(HttpURLConnection conn) {
        try {
            return conn.getResponseCode();
        }
         catch (IOException e) {
            throw ErrorUtil .createCommandException("connection to the remote repository host failed: " + e.getMessage());
        }
        
    }
    
}


