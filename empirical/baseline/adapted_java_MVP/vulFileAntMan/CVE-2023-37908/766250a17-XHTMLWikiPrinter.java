package org.xwiki.rendering.renderer.printer;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.xml.sax.Attributes;
import org.xml.sax.helpers.AttributesImpl;
import org.xwiki.stability.Unstable;
import org.xwiki.xml.html.HTMLElementSanitizer;
public class XHTMLWikiPrinter extends XMLWikiPrinter {
    public static final String TRANSLATED_ATTRIBUTE_PREFIX = "data-xwiki-translated-attribute-";
    protected final HTMLElementSanitizer htmlElementSanitizer;
    private int spaceCount;
    private boolean isInCData;
    private boolean isInPreserveElement;
    private boolean elementEnded;
    private boolean hasTextBeenPrinted;
    private boolean isStandalone;
    public XHTMLWikiPrinter(WikiPrinter printer) {
        this(printer, null);
    }
    
    public XHTMLWikiPrinter(WikiPrinter printer, HTMLElementSanitizer htmlElementSanitizer) {
        super(printer);
        this.htmlElementSanitizer = htmlElementSanitizer;
    }
    
    public void setStandalone() {
        this.isStandalone = true;
    }
    
    public void printXML(String str) {
        handleSpaceWhenInText();
        super.printXML(str);
        this.hasTextBeenPrinted = true;
        this.isStandalone = false;
    }
    
    public void printXMLElement(String name) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLElement(name);
        }
        
    }
    
    public void printXMLElement(String name, String[][] attributes) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLElement(name, cleanAttributes(name, attributes));
        }
        
    }
    
    public void printXMLElement(String name, Map<String, String> attributes) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLElement(name, cleanAttributes(name, attributes));
        }
        
    }
    
    public void printXMLStartElement(String name) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLStartElement(name);
        }
        
    }
    
    public void printXMLStartElement(String name, String[][] attributes) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLStartElement(name, cleanAttributes(name, attributes));
        }
        
    }
    
    public void printXMLStartElement(String name, Map<String, String> attributes) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLStartElement(name, cleanAttributes(name, attributes));
        }
        
    }
    
    public void printXMLStartElement(String name, Attributes attributes) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenStartElement();
            super.printXMLStartElement(name, cleanAttributes(name, attributes));
        }
        
    }
    
    public void printXMLEndElement(String name) {
        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {
            handleSpaceWhenEndlement();
            super.printXMLEndElement(name);
            this.elementEnded = true;
        }
        
    }
    
    public void printXMLComment(String content) {
        printXMLComment(content, false);
    }
    
    public void printXMLComment(String content, boolean escape) {
        handleSpaceWhenStartElement();
        super.printXMLComment(content, escape);
        this.elementEnded = true;
    }
    
    public void printXMLStartCData() {
        handleSpaceWhenStartElement();
        super.printXMLStartCData();
    }
    
    public void printXMLEndCData() {
        handleSpaceWhenEndlement();
        super.printXMLEndCData();
    }
    
    public void printSpace() {
        this.spaceCount++;
    }
    
    public void printRaw(String raw) {
        handleSpaceWhenStartElement();
        String escapedRaw = raw.replace("{{/html}}", "&#123;&#123;/html}}");
        StringBuilder prefix = new StringBuilder();
        for (Character nextChar : List.of('{', '/', 'h', 't', 'm', 'l', '}', '}')) {
            prefix.append(nextChar);
            if (escapedRaw.endsWith(prefix.toString())) {
                escapedRaw = escapedRaw.substring(0, escapedRaw.length() - prefix.length()) + "&#123;" + prefix.substring(1);
                break;
            }
            
        }
        
        super.printRaw(escapedRaw);
        this.elementEnded = true;
    }
    
    private void handleSpaceWhenInText() {
        if (this.elementEnded || this.hasTextBeenPrinted) {
            handleSpaceWhenStartElement();
        }
         else {
            handleSpaceWhenEndlement();
        }
        
    }
    
    private Map<String, String> cleanAttributes(String elementName, Map<String, String> attributes) {
        Map<String, String> cleanAttributes;
        if (this.htmlElementSanitizer == null || attributes == null) {
            cleanAttributes = attributes;
        }
         else {
            cleanAttributes = new LinkedHashMap<>();
            for (Map.Entry<String, String> e : attributes.entrySet()) {
                if (this.htmlElementSanitizer.isAttributeAllowed(elementName, e.getKey(), e.getValue())) {
                    cleanAttributes.put(e.getKey(), e.getValue());
                }
                 else {
                    cleanAttributes.put(TRANSLATED_ATTRIBUTE_PREFIX + e.getKey(), e.getValue());
                }
                
            }
            
        }
        
        return cleanAttributes;
    }
    
    private String[][] cleanAttributes(String elementName, String[][] attributes) {
        String[][] allowedAttributes;
        if (this.htmlElementSanitizer == null || attributes == null) {
            allowedAttributes = attributes;
        }
         else {
            allowedAttributes = Arrays.stream(attributes) .map(entry -> {
                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, entry[0], entry[1])) {
                        return entry;
                    }
                     else {
                        return new String[] { TRANSLATED_ATTRIBUTE_PREFIX + entry[0], entry[1] };
                    }
                    
                }
) .toArray(String[][]::new);
        }
        
        return allowedAttributes;
    }
    
    private Attributes cleanAttributes(String elementName, Attributes attributes) {
        Attributes allowedAttribute;
        if (this.htmlElementSanitizer == null || attributes == null) {
            allowedAttribute = attributes;
        }
         else {
            allowedAttribute = new AttributesImpl();
            for (int i = 0; i < attributes.getLength(); ++i) {
                if (this.htmlElementSanitizer.isAttributeAllowed(elementName, attributes.getQName(i), attributes.getValue(i))){
                    ((AttributesImpl) allowedAttribute).addAttribute(null, null, attributes.getQName(i), null, attributes.getValue(i));
                }
                 else {
                    ((AttributesImpl) allowedAttribute).addAttribute(null, null, TRANSLATED_ATTRIBUTE_PREFIX + attributes.getQName(i), null, attributes.getValue(i));
                }
                
            }
            
        }
        
        return allowedAttribute;
    }
    
    private void handleSpaceWhenStartElement() {
        if (this.spaceCount > 0) {
            if (!this.isInCData && !this.isInPreserveElement) {
                if (this.isStandalone && !this.hasTextBeenPrinted) {
                    printEntity("&nbsp;");
                }
                 else {
                    super.printXML(" ");
                }
                
                for (int i = 0; i < this.spaceCount - 1; i++) {
                    printEntity("&nbsp;");
                }
                
            }
             else {
                super.printXML(StringUtils.repeat(' ', this.spaceCount));
            }
            
            this.isStandalone = false;
        }
        
        this.spaceCount = 0;
        this.elementEnded = false;
        this.hasTextBeenPrinted = false;
    }
    
    private void handleSpaceWhenEndlement() {
        if (!this.isInCData && !this.isInPreserveElement) {
            for (int i = 0; i < this.spaceCount; i++) {
                printEntity("&nbsp;");
            }
            
        }
         else {
            super.printXML(StringUtils.repeat(' ', this.spaceCount));
        }
        
        this.spaceCount = 0;
        this.elementEnded = false;
        this.hasTextBeenPrinted = false;
    }
    
}


