package org.jenkinsci.plugin.gitea.credentials;
import com.cloudbees.plugins.credentials.CredentialsDescriptor;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.CredentialsScope;
import com.cloudbees.plugins.credentials.impl.BaseStandardCredentials;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.Extension;
import hudson.util.FormValidation;
import hudson.util.Secret;
import jenkins.model.Jenkins;
import org.apache.commons.lang.StringUtils;
import org.jenkinsci.Symbol;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
public class PersonalAccessTokenImpl extends BaseStandardCredentials implements PersonalAccessToken {
    private final Secret token;
    public PersonalAccessTokenImpl(@CheckForNull CredentialsScope scope, @CheckForNull String id, @CheckForNull String description, @NonNull String token) {
        super(scope, id, description);
        this.token = Secret.fromString(token);
    }
    
    public Secret getToken() {
        return token;
    }
    
    public static class DescriptorImpl extends CredentialsDescriptor {
        public String getDisplayName() {
            return Messages.PersonalAccessTokenImpl_displayName();
        }
        
        public FormValidation doCheckToken(@QueryParameter String value) {
            if (value == null || value.isEmpty()) {
                return FormValidation.error(Messages.PersonalAccessTokenImpl_tokenRequired());
            }
            
            Secret secret = Secret.fromString(value);
            if (StringUtils.equals(value, secret.getPlainText())) {
                if (value.length() != 40) {
                    return FormValidation.error(Messages.PersonalAccessTokenImpl_tokenWrongLength());
                }
                
            }
             else if (secret.getPlainText().length() != 40) {
                return FormValidation.warning(Messages.PersonalAccessTokenImpl_tokenWrongLength());
            }
            
            return FormValidation.ok();
        }
        
    }
    
}


