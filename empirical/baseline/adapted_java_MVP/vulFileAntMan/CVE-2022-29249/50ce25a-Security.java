package io.github.javaezlib.javaez.extensions;
import io.github.javaezlib.javaez.backend.ErrorSystem;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Base64;
public class Security {
    public static String lockText(String text, String password) {
        try {
            byte[] salt = genSaltFromPassword(password);
            PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, 65536, 256);
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            SecretKey originalKey = factory.generateSecret(keySpec);
            SecretKey key = new SecretKeySpec(originalKey.getEncoded(), "AES");
            byte[] iv = new byte[16];
            new SecureRandom().nextBytes(iv);
            IvParameterSpec ivParamSpec =  new IvParameterSpec(iv);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, key, ivParamSpec);
            byte[] encrypted = cipher.doFinal(text.getBytes(StandardCharsets.UTF_8));
            byte[] full = new byte[encrypted.length + iv.length];
            int index = 0;
            for(byte b : iv) {
                full[index] = b;
                index++;
            }
            
            for(byte b : encrypted) {
                full[index] = b;
                index++;
            }
            
            return Base64.getEncoder().encodeToString(full);
        }
         catch(Exception ex) {
            ErrorSystem.handleError("Could not lock text.");
            return null;
        }
        
    }
    
    public static String unlockText(String text, String password) {
        try {
            byte[] salt = genSaltFromPassword(password);
            PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, 65536, 256);
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            SecretKey originalKey = factory.generateSecret(keySpec);
            SecretKey key = new SecretKeySpec(originalKey.getEncoded(), "AES");
            byte[] encrypted = Base64.getDecoder().decode(text);
            byte[] iv = Arrays.copyOfRange(encrypted, 0, 16);
            byte[] encData = Arrays.copyOfRange(encrypted, 16, encrypted.length);
            IvParameterSpec ivParamSpec = new IvParameterSpec(iv);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, key, ivParamSpec);
            byte[] decrypted = cipher.doFinal(encData);
            return new String(decrypted, StandardCharsets.UTF_8);
        }
         catch(Exception ex) {
            ErrorSystem.handleError("Could not unlock text.");
            return null;
        }
        
    }
    
    private static byte[] genSaltFromPassword(String password) {
        StringBuilder sb = new StringBuilder();
        sb.append(password);
        sb.reverse();
        String reversed = sb.toString();
        return reversed.getBytes(StandardCharsets.UTF_8);
    }
    
}


