package org.apache.inlong.manager.workflow.core.impl;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.apache.inlong.manager.common.enums.ErrorCodeEnum;
import org.apache.inlong.manager.common.enums.ProcessStatus;
import org.apache.inlong.manager.common.enums.TaskStatus;
import org.apache.inlong.manager.common.util.Preconditions;
import org.apache.inlong.manager.dao.entity.WorkflowProcessEntity;
import org.apache.inlong.manager.dao.entity.WorkflowTaskEntity;
import org.apache.inlong.manager.dao.mapper.WorkflowTaskEntityMapper;
import org.apache.inlong.manager.pojo.workflow.form.process.ProcessForm;
import org.apache.inlong.manager.workflow.WorkflowAction;
import org.apache.inlong.manager.workflow.WorkflowContext;
import org.apache.inlong.manager.workflow.core.ProcessService;
import org.apache.inlong.manager.workflow.core.ProcessorExecutor;
import org.apache.inlong.manager.workflow.core.WorkflowContextBuilder;
import org.apache.inlong.manager.workflow.definition.WorkflowTask;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
public class ProcessServiceImpl implements ProcessService {
    private ProcessorExecutor processorExecutor;
    private WorkflowTaskEntityMapper taskEntityMapper;
    private WorkflowContextBuilder workflowContextBuilder;
    public WorkflowContext start(String name, String applicant, ProcessForm form) {
        Preconditions.expectNotBlank(name, ErrorCodeEnum.INVALID_PARAMETER, "process name cannot be null");
        Preconditions.expectNotBlank(applicant, ErrorCodeEnum.INVALID_PARAMETER, "applicant cannot be null");
        Preconditions.expectNotNull(form, "form cannot be null");
        WorkflowContext context = workflowContextBuilder.buildContextForProcess(name, applicant, form);
        this.processorExecutor.executeStart(context.getProcess().getStartEvent(), context);
        return context;
    }
    
    public WorkflowContext continueProcess(Integer processId, String operator, String remark) {
        Preconditions.expectNotBlank(operator, ErrorCodeEnum.INVALID_PARAMETER, "operator cannot be null");
        Preconditions.expectNotNull(processId, "processId cannot be null");
        WorkflowContext context = workflowContextBuilder.buildContextForProcess(processId);
        WorkflowProcessEntity processEntity = context.getProcessEntity();
        ProcessStatus processStatus = ProcessStatus.valueOf(processEntity.getStatus());
        Preconditions.expectTrue(processStatus == ProcessStatus.PROCESSING, String.format("processId=%s should be in processing", processId));
        List<WorkflowTaskEntity> startElements = Lists.newArrayList();
        startElements.addAll(taskEntityMapper.selectByProcess(processId, TaskStatus.PENDING));
        startElements.addAll(taskEntityMapper.selectByProcess(processId, TaskStatus.FAILED));
        for (WorkflowTaskEntity taskEntity : startElements) {
            String taskName = taskEntity.getName();
            WorkflowTask task = context.getProcess().getTaskByName(taskName);
            context.setActionContext(new WorkflowContext.ActionContext() .setAction(WorkflowAction.COMPLETE) .setTaskEntity(taskEntity) .setOperator(operator) .setRemark(remark) .setTask(task));
            this.processorExecutor.executeStart(task, context);
        }
        
        return context;
    }
    
    public WorkflowContext cancel(Integer processId, String operator, String remark) {
        Preconditions.expectNotBlank(operator, ErrorCodeEnum.INVALID_PARAMETER, "operator cannot be null");
        Preconditions.expectNotNull(processId, "processId cannot be null");
        WorkflowContext context = workflowContextBuilder.buildContextForProcess(processId);
        List<WorkflowTaskEntity> pendingTasks = taskEntityMapper.selectByProcess(processId, TaskStatus.PENDING);
        for (WorkflowTaskEntity taskEntity : pendingTasks) {
            WorkflowTask task = context.getProcess().getTaskByName(taskEntity.getName());
            context.setActionContext(new WorkflowContext.ActionContext() .setAction(WorkflowAction.CANCEL) .setTaskEntity(taskEntity) .setOperator(operator) .setRemark(remark) .setTask(task));
            this.processorExecutor.executeComplete(task, context);
        }
        
        return context;
    }
    
}


