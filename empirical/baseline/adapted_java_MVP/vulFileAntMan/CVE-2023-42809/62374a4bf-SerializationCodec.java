package org.redisson.codec;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import org.redisson.client.codec.BaseCodec;
import org.redisson.client.handler.State;
import org.redisson.client.protocol.Decoder;
import org.redisson.client.protocol.Encoder;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.ByteBufInputStream;
import io.netty.buffer.ByteBufOutputStream;
public class SerializationCodec extends BaseCodec {
    private final Decoder<Object> decoder = new Decoder<Object>() {
        public Object decode(ByteBuf buf, State state) throws IOException {
            try {
                ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader();
                try {
                    ByteBufInputStream in = new ByteBufInputStream(buf);
                    ObjectInputStream inputStream;
                    if (classLoader != null) {
                        Thread.currentThread().setContextClassLoader(classLoader);
                        inputStream = new CustomObjectInputStream(classLoader, in);
                    }
                     else {
                        inputStream = new ObjectInputStream(in);
                    }
                    
                    return inputStream.readObject();
                }
                 finally {
                    Thread.currentThread().setContextClassLoader(currentThreadClassLoader);
                }
                
            }
             catch (IOException e) {
                throw e;
            }
             catch (Exception e) {
                throw new IOException(e);
            }
            
        }
        
    };
    private final Encoder encoder = new Encoder() { 

        public ByteBuf encode(Object in) throws IOException {
            ByteBuf out = ByteBufAllocator.DEFAULT.buffer();
            try {
                ByteBufOutputStream result = new ByteBufOutputStream(out);
                ObjectOutputStream outputStream = new ObjectOutputStream(result);
                outputStream.writeObject(in);
                outputStream.close();
                return result.buffer();
            }
             catch (IOException e) {
                out.release();
                throw e;
            }
            
        }
        
    };
    private final ClassLoader classLoader;
    public SerializationCodec() {
        this(null);
    }
    
    public SerializationCodec(ClassLoader classLoader) {
        this.classLoader = classLoader;
    }
    
    public SerializationCodec(ClassLoader classLoader, SerializationCodec codec) {
        this.classLoader = classLoader;
    }
    
    public Decoder<Object> getValueDecoder() {
        return decoder;
    }
    
    public Encoder getValueEncoder() {
        return encoder;
    }
    
    public ClassLoader getClassLoader() {
        if (classLoader != null) {
            return classLoader;
        }
        
        return getClass().getClassLoader();
    }
    
}


