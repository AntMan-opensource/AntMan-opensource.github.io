package org.opensearch.ad.util;
import java.time.Clock;
import java.time.Instant;
import java.util.AbstractMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import org.opensearch.action.ActionRequest;
public class Throttler {
    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;
    private final Clock clock;
    public Throttler(Clock clock) {
        this.negativeCache = new ConcurrentHashMap<>();
        this.clock = clock;
    }
    
    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(String detectorId) {
        return Optional.ofNullable(negativeCache.get(detectorId));
    }
    
    public synchronized boolean insertFilteredQuery(String detectorId, ActionRequest request) {
        return negativeCache.putIfAbsent(detectorId, new AbstractMap.SimpleEntry<>(request, clock.instant())) == null;
    }
    
    public void clearFilteredQuery(String detectorId) {
        negativeCache.remove(detectorId);
    }
    
}


