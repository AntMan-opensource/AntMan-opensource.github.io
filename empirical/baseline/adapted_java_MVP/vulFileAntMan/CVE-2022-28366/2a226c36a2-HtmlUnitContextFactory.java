package com.gargoylesoftware.htmlunit.javascript;
import static com.gargoylesoftware.htmlunit.BrowserVersionFeatures.JS_ARGUMENTS_READ_ONLY_ACCESSED_FROM_FUNCTION;
import static com.gargoylesoftware.htmlunit.BrowserVersionFeatures.JS_ENUM_NUMBERS_FIRST;
import static com.gargoylesoftware.htmlunit.BrowserVersionFeatures.JS_ERROR_STACK;
import static com.gargoylesoftware.htmlunit.BrowserVersionFeatures.JS_FUNCTION_DECLARED_FORWARD_IN_BLOCK;
import static com.gargoylesoftware.htmlunit.BrowserVersionFeatures.JS_GET_PROTOTYPE_OF_STRING;
import static com.gargoylesoftware.htmlunit.BrowserVersionFeatures.JS_IGNORES_LAST_LINE_CONTAINING_UNCOMMENTED;
import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.ScriptPreProcessor;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.HtmlElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.javascript.regexp.HtmlUnitRegExpProxy;
import net.sourceforge.htmlunit.corejs.javascript.Callable;
import net.sourceforge.htmlunit.corejs.javascript.Context;
import net.sourceforge.htmlunit.corejs.javascript.ContextFactory;
import net.sourceforge.htmlunit.corejs.javascript.ErrorReporter;
import net.sourceforge.htmlunit.corejs.javascript.Evaluator;
import net.sourceforge.htmlunit.corejs.javascript.Function;
import net.sourceforge.htmlunit.corejs.javascript.Script;
import net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime;
import net.sourceforge.htmlunit.corejs.javascript.Scriptable;
import net.sourceforge.htmlunit.corejs.javascript.WrapFactory;
import net.sourceforge.htmlunit.corejs.javascript.debug.Debugger;
public class HtmlUnitContextFactory extends ContextFactory {
    private static final int INSTRUCTION_COUNT_THRESHOLD = 10_000;
    private final WebClient webClient_;
    private final BrowserVersion browserVersion_;
    private long timeout_;
    private Debugger debugger_;
    private final ErrorReporter errorReporter_;
    private final WrapFactory wrapFactory_ = new HtmlUnitWrapFactory();
    private boolean deminifyFunctionCode_ = false;
    public HtmlUnitContextFactory(final WebClient webClient) {
        webClient_ = webClient;
        browserVersion_ = webClient.getBrowserVersion();
        errorReporter_ = new StrictErrorReporter();
    }
    
    public void setTimeout(final long timeout) {
        timeout_ = timeout;
    }
    
    public long getTimeout() {
        return timeout_;
    }
    
    public void setDebugger(final Debugger debugger) {
        debugger_ = debugger;
    }
    
    public Debugger getDebugger() {
        return debugger_;
    }
    
    public void setDeminifyFunctionCode(final boolean deminify) {
        deminifyFunctionCode_ = deminify;
    }
    
    public boolean isDeminifyFunctionCode() {
        return deminifyFunctionCode_;
    }
    
    private class TimeoutContext extends Context {
        private long startTime_;
        protected TimeoutContext(final ContextFactory factory) {
            super(factory);
        }
        
        public void startClock() {
            startTime_ = System.currentTimeMillis();
        }
        
        public void terminateScriptIfNecessary() {
            if (timeout_ > 0) {
                final long currentTime = System.currentTimeMillis();
                if (currentTime - startTime_ > timeout_) {
                    throw new TimeoutError(timeout_, currentTime - startTime_);
                }
                
            }
            
        }
        
        protected Script compileString(String source, final Evaluator compiler, final ErrorReporter compilationErrorReporter, final String sourceName, final int lineno, final Object securityDomain) {
            final boolean isWindowEval = compiler != null;
            if (!isWindowEval) {
                final String sourceCodeTrimmed = source.trim();
                if (sourceCodeTrimmed.startsWith("<!--")) {
                    source = source.replaceFirst("<!--", "// <!--");
                }
                
                if (browserVersion_.hasFeature(JS_IGNORES_LAST_LINE_CONTAINING_UNCOMMENTED) && sourceCodeTrimmed.endsWith("-->")) {
                    final int lastDoubleSlash = source.lastIndexOf("//");
                    final int lastNewLine = Math.max(source.lastIndexOf('\n'), source.lastIndexOf('\r'));
                    if (lastNewLine > lastDoubleSlash) {
                        source = source.substring(0, lastNewLine);
                    }
                    
                }
                
            }
            
            final HtmlPage page = (HtmlPage) Context.getCurrentContext() .getThreadLocal(JavaScriptEngine.KEY_STARTING_PAGE);
            source = preProcess(page, source, sourceName, lineno, null);
            return super.compileString(source, compiler, compilationErrorReporter, sourceName, lineno, securityDomain);
        }
        
        protected Function compileFunction(final Scriptable scope, String source, final Evaluator compiler, final ErrorReporter compilationErrorReporter, final String sourceName, final int lineno, final Object securityDomain) {
            if (deminifyFunctionCode_) {
                final Function f = super.compileFunction(scope, source, compiler, compilationErrorReporter, sourceName, lineno, securityDomain);
                source = decompileFunction(f, 4).trim().replace("\n    ", "\n");
            }
            
            return super.compileFunction(scope, source, compiler, compilationErrorReporter, sourceName, lineno, securityDomain);
        }
        
    }
    
    protected String preProcess( final HtmlPage htmlPage, final String sourceCode, final String sourceName, final int lineNumber, final HtmlElement htmlElement) {
        String newSourceCode = sourceCode;
        final ScriptPreProcessor preProcessor = webClient_.getScriptPreProcessor();
        if (preProcessor != null) {
            newSourceCode = preProcessor.preProcess(htmlPage, sourceCode, sourceName, lineNumber, htmlElement);
            if (newSourceCode == null) {
                newSourceCode = "";
            }
            
        }
        
        return newSourceCode;
    }
    
    protected Context makeContext() {
        final TimeoutContext cx = new TimeoutContext(this);
        cx.setOptimizationLevel(-1);
        cx.setInstructionObserverThreshold(INSTRUCTION_COUNT_THRESHOLD);
        configureErrorReporter(cx);
        cx.setWrapFactory(wrapFactory_);
        if (debugger_ != null) {
            cx.setDebugger(debugger_, null);
        }
        
        ScriptRuntime.setRegExpProxy(cx, new HtmlUnitRegExpProxy(ScriptRuntime.getRegExpProxy(cx), browserVersion_));
        cx.setMaximumInterpreterStackDepth(10_000);
        return cx;
    }
    
    protected void configureErrorReporter(final Context context) {
        context.setErrorReporter(errorReporter_);
    }
    
    protected void observeInstructionCount(final Context cx, final int instructionCount) {
        final TimeoutContext tcx = (TimeoutContext) cx;
        tcx.terminateScriptIfNecessary();
    }
    
    protected Object doTopCall(final Callable callable, final Context cx, final Scriptable scope, final Scriptable thisObj, final Object[] args) {
        final TimeoutContext tcx = (TimeoutContext) cx;
        tcx.startClock();
        return super.doTopCall(callable, cx, scope, thisObj, args);
    }
    
    protected boolean hasFeature(final Context cx, final int featureIndex) {
        switch (featureIndex) {
            case Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER:
                return true;
            case Context.FEATURE_NON_ECMA_GET_YEAR:
                return false;
            case Context.FEATURE_HTMLUNIT_ASK_OBJECT_TO_WRITE_READONLY:
                return true;
            case Context.FEATURE_HTMLUNIT_JS_CATCH_JAVA_EXCEPTION:
                return false;
            case Context.FEATURE_HTMLUNIT_ARGUMENTS_IS_OBJECT:
                return false;
            case Context.FEATURE_HTMLUNIT_FUNCTION_NULL_SETTER:
                return true;
            case Context.FEATURE_HTMLUNIT_FN_ARGUMENTS_IS_RO_VIEW:
                return browserVersion_.hasFeature(JS_ARGUMENTS_READ_ONLY_ACCESSED_FROM_FUNCTION);
            case Context.FEATURE_HTMLUNIT_EVAL_LOCAL_SCOPE:
                return false;
            case Context.FEATURE_HTMLUNIT_ERROR_STACK:
                return browserVersion_.hasFeature(JS_ERROR_STACK);
            case Context.FEATURE_HTMLUNIT_CONSTRUCTOR:
                return true;
            case Context.FEATURE_HTMLUNIT_FUNCTION_OBJECT_METHOD:
                return false;
            case Context.FEATURE_HTMLUNIT_FUNCTION_DECLARED_FORWARD_IN_BLOCK:
                return browserVersion_.hasFeature(JS_FUNCTION_DECLARED_FORWARD_IN_BLOCK);
            case Context.FEATURE_HTMLUNIT_PARSE_INT_RADIX_10:
                return true;
            case Context.FEATURE_HTMLUNIT_ENUM_NUMBERS_FIRST:
                return browserVersion_.hasFeature(JS_ENUM_NUMBERS_FIRST);
            case Context.FEATURE_HTMLUNIT_GET_PROTOTYPE_OF_STRING:
                return browserVersion_.hasFeature(JS_GET_PROTOTYPE_OF_STRING);
            default: return super.hasFeature(cx, featureIndex);
        }
        
    }
    
}


