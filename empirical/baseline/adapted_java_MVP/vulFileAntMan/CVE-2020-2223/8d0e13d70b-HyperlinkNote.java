package hudson.console;
import hudson.Extension;
import hudson.MarkupText;
import jenkins.model.Jenkins;
import org.jenkinsci.Symbol;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.StaplerRequest;
import java.io.IOException;
import java.util.function.BiFunction;
import java.util.logging.Level;
import java.util.logging.Logger;
public class HyperlinkNote extends ConsoleNote {
    private final String url;
    private final int length;
    public HyperlinkNote(String url, int length) {
        this.url = url;
        this.length = length;
    }
    
    public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {
        String url = this.url;
        if (url.startsWith("/")) {
            StaplerRequest req = Stapler.getCurrentRequest();
            if (req!=null) {
                url = req.getContextPath()+url;
            }
             else {
                url = Jenkins.get().getRootUrl()+url.substring(1);
            }
            
        }
        
        text.addMarkup(charPos, charPos + length, "<a href='" + url + "'"+extraAttributes()+">", "</a>");
        return null;
    }
    
    protected String extraAttributes() {
        return "";
    }
    
    public static String encodeTo(String url, String text) {
        return encodeTo(url, text, HyperlinkNote::new);
    }
    
    @Restricted(NoExternalUse.class)
    static String encodeTo(String url, String text, BiFunction<String, Integer, ConsoleNote> constructor) {
        text = text.replace('\n', ' ');
        try {
            return constructor.apply(url,text.length()).encode()+text;
        }
         catch (IOException e) {
            LOGGER.log(Level.WARNING, "Failed to serialize "+HyperlinkNote.class,e);
            return text;
        }
        
    }
    
    @Extension @Symbol("hyperlink")
    public static class DescriptorImpl extends ConsoleAnnotationDescriptor {
        public String getDisplayName() {
            return "Hyperlinks";
        }
        
    }
    
    private static final Logger LOGGER = Logger.getLogger(HyperlinkNote.class.getName());
    private static final long serialVersionUID = 3908468829358026949L;
}


