package org.apache.openmeetings.webservice.util;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import org.apache.openmeetings.webservice.NetTestWebService;
import org.apache.openmeetings.webservice.NetTestWebService.TestType;
public class RateLimitRequestFilter implements ContainerRequestFilter {
	private static final String ATTR_LAST_ACCESS_TIME = "LAST_ACCESS_TIME";
	private static final long ALLOWED_TIME = 3000;
	private HttpServletRequest request;
	public void filter(ContainerRequestContext context) {
		HttpSession session = request.getSession(false);
		if (session == null) {
			context.abortWith(Response.status(Status.FORBIDDEN).build());
			return;
		}
		
		List<String> typeList = context.getUriInfo().getQueryParameters().get("type");
		if (typeList != null && !typeList.isEmpty()) {
			TestType type = NetTestWebService.getTypeByString(typeList.get(0));
			if (TestType.PING == type || TestType.JITTER == type) {
				return;
			}
			
		}
		
		Long lastAccessed = (Long)session.getAttribute(ATTR_LAST_ACCESS_TIME);
		session.setAttribute(ATTR_LAST_ACCESS_TIME, System.currentTimeMillis());
		if (lastAccessed != null && System.currentTimeMillis() - lastAccessed.longValue() < ALLOWED_TIME) {
			context.abortWith(Response.status(Status.TOO_MANY_REQUESTS).build());
		}
		
	}
	
}


