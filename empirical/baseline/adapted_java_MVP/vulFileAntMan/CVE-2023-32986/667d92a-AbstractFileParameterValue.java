package io.jenkins.plugins.file_parameters;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.EnvVars;
import hudson.FilePath;
import hudson.Launcher;
import hudson.Util;
import hudson.model.ParameterValue;
import hudson.model.Run;
import hudson.model.TaskListener;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.StaplerResponse;
public abstract class AbstractFileParameterValue extends ParameterValue {
    @CheckForNull public String filename;
    protected AbstractFileParameterValue(String name) {
        super(name);
    }
    
    protected InputStream open(@CheckForNull Run<?,?> build) throws IOException, InterruptedException {
        assert Util.isOverridden(AbstractFileParameterValue.class, getClass(), "createTempFile", Run.class, FilePath.class, EnvVars.class, Launcher.class, TaskListener.class);
        if (build == null) {
            throw new IOException("Cannot operate outside of a build context");
        }
        
        FilePath tempDir = new FilePath(Util.createTempDir());
        FilePath f = createTempFile(build, tempDir, new EnvVars(EnvVars.masterEnvVars), new Launcher.LocalLauncher(TaskListener.NULL), TaskListener.NULL);
        return new FilterInputStream(f.read()) {
            public void close() throws IOException {
                super.close();
                try {
                    tempDir.deleteRecursive();
                }
                 catch (InterruptedException x) {
                    throw new IOException(x);
                }
                
            }
            
        };
    }
    
    protected FilePath createTempFile(@NonNull Run<?,?> build, @NonNull FilePath tempDir, @NonNull EnvVars env, @NonNull Launcher launcher, @NonNull TaskListener listener) throws IOException, InterruptedException {
        assert Util.isOverridden(AbstractFileParameterValue.class, getClass(), "open", Run.class);
        FilePath f = tempDir.createTempFile(StringUtils.rightPad(name, 3, 'x'), null);
        try (InputStream is = open(build)) {
            f.copyFrom(is);
        }
        
        return f;
    }
    
    public void doDownload(@AncestorInPath Run<?,?> build, StaplerResponse rsp) throws Exception {
        rsp.setContentType("application/octet-stream");
        try (InputStream is = open(build); OutputStream os = rsp.getOutputStream()) {
            IOUtils.copy(is, os);
        }
        
    }
    
 public void buildEnvironment(Run<?, ?> build, EnvVars env) {
        super.buildEnvironment(build, env);
        if (filename != null) {
            env.put(name + "_FILENAME", filename);
        }
        
    }
    
}


