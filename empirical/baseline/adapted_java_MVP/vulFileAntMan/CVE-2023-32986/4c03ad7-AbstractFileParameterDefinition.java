package io.jenkins.plugins.file_parameters;
import hudson.cli.CLICommand;
import hudson.model.ParameterDefinition;
import hudson.model.ParameterValue;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;
import javax.servlet.ServletException;
import net.sf.json.JSONObject;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadBase;
import org.kohsuke.stapler.StaplerRequest;
abstract class AbstractFileParameterDefinition extends ParameterDefinition {
    protected AbstractFileParameterDefinition(String name) {
        super(name);
    }
    
    protected abstract Class<? extends AbstractFileParameterValue> valueType();
    protected abstract AbstractFileParameterValue createValue(String name, InputStream src) throws IOException;
 public ParameterValue createValue(StaplerRequest req, JSONObject jo) {
        AbstractFileParameterValue p = req.bindJSON(valueType(), jo);
        p.setDescription(getDescription());
        return p;
    }
    
 public ParameterValue createValue(StaplerRequest req) {
        try {
            FileItem src;
            try {
                src = req.getFileItem(getName());
            }
             catch (ServletException x) {
                if (x.getCause() instanceof FileUploadBase.InvalidContentTypeException) {
                    src = null;
                }
                 else {
                    throw x;
                }
                
            }
            
            if (src == null) {
                return null;
            }
            
            AbstractFileParameterValue p;
            try (InputStream in = src.getInputStream()) {
                p = createValue(getName(), in);
            }
            
            src.delete();
            p.setDescription(getDescription());
            p.filename = src.getName();
            return p;
        }
         catch (ServletException | IOException x) {
            throw new RuntimeException(x);
        }
        
    }
    
    public ParameterValue createValue(CLICommand command, String value) throws IOException, InterruptedException {
        AbstractFileParameterValue p;
        if (value.isEmpty()) {
            p = createValue(getName(), command.stdin);
        }
         else {
            byte[] data = Base64.getDecoder().decode(value);
            p = createValue(getName(), new ByteArrayInputStream(data));
        }
        
        p.setDescription(getDescription());
        return p;
    }
    
}


