package io.jenkins.plugins.file_parameters;
import hudson.EnvVars;
import hudson.model.Run;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.io.IOUtils;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
public final class Base64FileParameterValue extends AbstractFileParameterValue {
    private String base64;
    @DataBoundConstructor public Base64FileParameterValue(String name) throws IOException { super(name); }
    @DataBoundSetter public void setFile(FileItem file) throws IOException { base64 = Base64.getEncoder().encodeToString(IOUtils.toByteArray(file.getInputStream()));
        filename = file.getName();
        file.delete();
    }
    
    Base64FileParameterValue(String name, InputStream src) throws IOException {
        super(name);
        base64 = Base64.getEncoder().encodeToString(IOUtils.toByteArray(src));
    }
    
    @DataBoundSetter public void setBase64(String base64) throws IOException { this.base64 = base64; }
 public void buildEnvironment(Run<?, ?> build, EnvVars env) {
        super.buildEnvironment(build, env);
        env.put(name, base64);
    }
    
 public Object getValue() {
        return base64;
    }
    
 protected InputStream open(Run<?, ?> build) throws IOException {
        return new ByteArrayInputStream(Base64.getDecoder().decode(base64));
    }
    
}


