package hudson.util;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.XStreamException;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.collections.CollectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.converters.reflection.SerializableConverter;
import com.thoughtworks.xstream.core.ClassLoaderReference;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.mapper.Mapper;
import java.util.Collection;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import jenkins.util.xstream.CriticalXStreamException;
@SuppressWarnings({"rawtypes", "unchecked"})
public class RobustCollectionConverter extends CollectionConverter {
    private final SerializableConverter sc;
    public RobustCollectionConverter(XStream xs) {
        this(xs.getMapper(), xs.getReflectionProvider());
    }
    
    public RobustCollectionConverter(Mapper mapper, ReflectionProvider reflectionProvider) {
        super(mapper);
        sc = new SerializableConverter(mapper, reflectionProvider, new ClassLoaderReference(null));
    }
    
    public boolean canConvert(Class type) {
        return super.canConvert(type) || type == CopyOnWriteArrayList.class || type == CopyOnWriteArraySet.class;
    }
    
    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
        String s = reader.getAttribute("serialization");
        if (s != null && s.equals("custom")) {
            return sc.unmarshal(reader, context);
        }
         else {
            return super.unmarshal(reader, context);
        }
        
    }
    
    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {
        while (reader.hasMoreChildren()) {
            reader.moveDown();
            try {
                Object item = readBareItem(reader, context, collection);
                collection.add(item);
            }
             catch (CriticalXStreamException e) {
                throw e;
            }
             catch (XStreamException | LinkageError e) {
                RobustReflectionConverter.addErrorInContext(context, e);
            }
            
            reader.moveUp();
        }
        
    }
    
}


