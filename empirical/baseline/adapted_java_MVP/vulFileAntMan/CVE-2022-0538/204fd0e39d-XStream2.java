package hudson.util;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.ConversionException;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.ConverterLookup;
import com.thoughtworks.xstream.converters.ConverterMatcher;
import com.thoughtworks.xstream.converters.ConverterRegistry;
import com.thoughtworks.xstream.converters.DataHolder;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.SingleValueConverter;
import com.thoughtworks.xstream.converters.SingleValueConverterWrapper;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.extended.DynamicProxyConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.core.ClassLoaderReference;
import com.thoughtworks.xstream.core.JVM;
import com.thoughtworks.xstream.core.util.Fields;
import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.io.ReaderWrapper;
import com.thoughtworks.xstream.io.xml.KXml2Driver;
import com.thoughtworks.xstream.mapper.CannotResolveClassException;
import com.thoughtworks.xstream.mapper.Mapper;
import com.thoughtworks.xstream.mapper.MapperWrapper;
import com.thoughtworks.xstream.security.AnyTypePermission;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.PluginManager;
import hudson.PluginWrapper;
import hudson.XmlFile;
import hudson.diagnosis.OldDataMonitor;
import hudson.model.Label;
import hudson.model.Result;
import hudson.model.Saveable;
import hudson.remoting.ClassFilter;
import hudson.util.xstream.ImmutableListConverter;
import hudson.util.xstream.ImmutableMapConverter;
import hudson.util.xstream.ImmutableSetConverter;
import hudson.util.xstream.ImmutableSortedSetConverter;
import hudson.util.xstream.MapperDelegate;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import jenkins.model.Jenkins;
import jenkins.util.xstream.SafeURLConverter;
public class XStream2 extends XStream {
    private static final Logger LOGGER = Logger.getLogger(XStream2.class.getName());
    private RobustReflectionConverter reflectionConverter;
    private final ThreadLocal<Boolean> oldData = new ThreadLocal<>();
    private final @CheckForNull ClassOwnership classOwnership;
    private final Map<String, Class<?>> compatibilityAliases = new ConcurrentHashMap<>();
    private MapperInjectionPoint mapperInjectionPoint;
    public static HierarchicalStreamDriver getDefaultDriver() {
        return new KXml2Driver();
    }
    
    public XStream2() {
        super(getDefaultDriver());
        init();
        classOwnership = null;
    }
    
    public XStream2(HierarchicalStreamDriver hierarchicalStreamDriver) {
        super(hierarchicalStreamDriver);
        init();
        classOwnership = null;
    }
    
    public XStream2(ReflectionProvider reflectionProvider, HierarchicalStreamDriver driver, ClassLoaderReference classLoaderReference, Mapper mapper, ConverterLookup converterLookup, ConverterRegistry converterRegistry) {
        super(reflectionProvider, driver, classLoaderReference, mapper, converterLookup, converterRegistry);
        init();
        classOwnership = null;
    }
    
    XStream2(ClassOwnership classOwnership) {
        super(getDefaultDriver());
        init();
        this.classOwnership = classOwnership;
    }
    
    public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
        return unmarshal(reader, root, dataHolder, false);
    }
    
    public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder, boolean nullOut) {
        Jenkins h = Jenkins.getInstanceOrNull();
        if (h != null && h.pluginManager != null && h.pluginManager.uberClassLoader != null) {
            setClassLoader(h.pluginManager.uberClassLoader);
        }
        
        Object o;
        if (root == null || !nullOut) {
            o = super.unmarshal(reader, root, dataHolder);
        }
         else {
            Set<String> topLevelFields = new HashSet<>();
            o = super.unmarshal(new ReaderWrapper(reader) {
                int depth;
                public void moveUp() {
                    if (--depth == 0) {
                        topLevelFields.add(getNodeName());
                    }
                    
                    super.moveUp();
                }
                
                public void moveDown() {
                    try {
                        super.moveDown();
                    }
                     finally {
                        depth++;
                    }
                    
                }
                
            }, root, dataHolder);
            if (o == root && getConverterLookup().lookupConverterForType(o.getClass()) instanceof RobustReflectionConverter) {
                getReflectionProvider().visitSerializableFields(o, (String name, Class type, Class definedIn, Object value) -> {
                    if (topLevelFields.contains(name)) {
                        return;
                    }
                    
                    Field f = Fields.find(definedIn, name);
                    Object v;
                    if (type.isPrimitive()) {
                        v = ReflectionUtils.getVmDefaultValueForPrimitiveType(type);
                        if (v.equals(value)) {
                            return;
                        }
                        
                    }
                     else {
                        if (value == null) {
                            return;
                        }
                        
                        v = null;
                    }
                    
                    LOGGER.log(Level.FINE, "JENKINS-21017: nulling out {0} in {1}", new Object[] {f, o});
                    Fields.write(f, o, v);
                }
                
);
            }
            
        }
        
        if (oldData.get() != null) {
            oldData.remove();
            if (o instanceof Saveable) OldDataMonitor.report((Saveable) o, "1.106");
        }
        
        return o;
    }
    
    protected void setupConverters() {
        super.setupConverters();
        reflectionConverter = new RobustReflectionConverter(getMapper(), JVM.newReflectionProvider(), new PluginClassOwnership());
        registerConverter(reflectionConverter, PRIORITY_VERY_LOW + 1);
    }
    
    public void addCriticalField(Class<?> clazz, String field) {
        reflectionConverter.addCriticalField(clazz, field);
    }
    
    static String trimVersion(String version) {
        return version.replaceFirst(" .+$", "");
    }
    
    private void init() {
        addImmutableType(Result.class, false);
        denyTypes(new Class[] { void.class, Void.class });
        registerConverter(new RobustCollectionConverter(getMapper(), getReflectionProvider()), 10);
        registerConverter(new RobustMapConverter(getMapper()), 10);
        registerConverter(new ImmutableMapConverter(getMapper(), getReflectionProvider()), 10);
        registerConverter(new ImmutableSortedSetConverter(getMapper(), getReflectionProvider()), 10);
        registerConverter(new ImmutableSetConverter(getMapper(), getReflectionProvider()), 10);
        registerConverter(new ImmutableListConverter(getMapper(), getReflectionProvider()), 10);
        registerConverter(new CopyOnWriteMap.Tree.ConverterImpl(getMapper()), 10); 
        registerConverter(new DescribableList.ConverterImpl(getMapper()), 10); 
        registerConverter(new Label.ConverterImpl(), 10);
        registerConverter(new SafeURLConverter(), 10);
        registerConverter(new AssociatedConverterImpl(this), -10);
        registerConverter(new BlacklistedTypesConverter(), PRIORITY_VERY_HIGH); 
        addPermission(AnyTypePermission.ANY); 
        registerConverter(new DynamicProxyConverter(getMapper(), new ClassLoaderReference(getClassLoader())) { 
 public boolean canConvert(Class type) {
                return  type != null && super.canConvert(type);
            }
            
 public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
                throw new ConversionException("<dynamic-proxy> not supported");
            }
            
        }, PRIORITY_VERY_HIGH);
    }
    
    protected MapperWrapper wrapMapper(MapperWrapper next) {
        Mapper m = new CompatibilityMapper(new MapperWrapper(next) {
            public String serializedClass(Class type) {
                if (type != null && ImmutableMap.class.isAssignableFrom(type)){
                    return super.serializedClass(ImmutableMap.class);
}
                else if (type != null && ImmutableList.class.isAssignableFrom(type)){
                    return super.serializedClass(ImmutableList.class);
}
                else{
                    return super.serializedClass(type);
}
            }
            
        }
        
);
        mapperInjectionPoint = new MapperInjectionPoint(m);
        return mapperInjectionPoint;
    }
    
    public Mapper getMapperInjectionPoint() {
        return mapperInjectionPoint.getDelegate();
    }
    
 public void toXML(Object obj, OutputStream out) {
        super.toXML(obj, out);
    }
    
    public void toXMLUTF8(Object obj, OutputStream out) throws IOException {
        Writer w = new OutputStreamWriter(out, StandardCharsets.UTF_8);
        w.write("<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n");
        toXML(obj, w);
    }
    
    public void setMapper(Mapper m) {
        mapperInjectionPoint.setDelegate(m);
    }
    
    static final class MapperInjectionPoint extends MapperDelegate {
        MapperInjectionPoint(Mapper wrapped) {
            super(wrapped);
        }
        
        public Mapper getDelegate() {
            return delegate;
        }
        
        public void setDelegate(Mapper m) {
            delegate = m;
        }
        
    }
    
    public void addCompatibilityAlias(String oldClassName, Class newClass) {
        compatibilityAliases.put(oldClassName, newClass);
    }
    
    private class CompatibilityMapper extends MapperWrapper {
        private CompatibilityMapper(Mapper wrapped) {
            super(wrapped);
        }
        
        public Class realClass(String elementName) {
            Class s = compatibilityAliases.get(elementName);
            if (s != null)    return s;
            try {
                return super.realClass(elementName);
            }
             catch (CannotResolveClassException e) {
                if (elementName.indexOf('-') >= 0) try {
                    Class c = super.realClass(elementName.replace('-', '$'));
                    oldData.set(Boolean.TRUE);
                    return c;
                }
                 catch (CannotResolveClassException e2) {
 
}

                throw e;
            }
            
        }
        
    }
    
    private static final class AssociatedConverterImpl implements Converter {
        private final XStream xstream;
        private final ConcurrentHashMap<Class<?>, Converter> cache = new ConcurrentHashMap<>();
        private AssociatedConverterImpl(XStream xstream) {
            this.xstream = xstream;
        }
        
        private Converter findConverter(@CheckForNull Class<?> t) {
            if (t == null) {
                return null;
            }
            
            Converter result = cache.get(t);
            if (result != null){
                return result == this ? null : result;
}
            try {
                final ClassLoader classLoader = t.getClassLoader();
                if (classLoader == null) {
                    return null;
                }
                
                Class<?> cl = classLoader.loadClass(t.getName() + "$ConverterImpl");
                Constructor<?> c = cl.getConstructors()[0];
                Class<?>[] p = c.getParameterTypes();
                Object[] args = new Object[p.length];
                for (int i = 0; i < p.length; i++) {
                    if (p[i] == XStream.class || p[i] == XStream2.class){
                        args[i] = xstream;
}
                    else if (p[i] == Mapper.class){
                        args[i] = xstream.getMapper();
}
                    else{
                        throw new InstantiationError("Unrecognized constructor parameter: " + p[i]);
}
                }
                
                ConverterMatcher cm = (ConverterMatcher) c.newInstance(args);
                result = cm instanceof SingleValueConverter ? new SingleValueConverterWrapper((SingleValueConverter) cm) : (Converter) cm;
                cache.put(t, result);
                return result;
            }
             catch (ClassNotFoundException e) {
                cache.put(t, this);  
                return null;
            }
             catch (IllegalAccessException e) {
                IllegalAccessError x = new IllegalAccessError();
                x.initCause(e);
                throw x;
            }
             catch (InstantiationException | InvocationTargetException e) {
                InstantiationError x = new InstantiationError();
                x.initCause(e);
                throw x;
            }
            
        }
        
        public boolean canConvert(Class type) {
            return findConverter(type) != null;
        }
        
        @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
        public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
            findConverter(source.getClass()).marshal(source, writer, context);
        }
        
        @SuppressFBWarnings(value = "NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", justification = "TODO needs triage")
        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
            return findConverter(context.getRequiredType()).unmarshal(reader, context);
        }
        
    }
    
    public abstract static class PassthruConverter<T> implements Converter {
        private Converter converter;
        protected PassthruConverter(XStream2 xstream) {
            converter = xstream.reflectionConverter;
        }
        
        public boolean canConvert(Class type) {
            return false;
        }
        
        public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
            converter.marshal(source, writer, context);
        }
        
        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
            Object obj = converter.unmarshal(reader, context);
            callback((T) obj, context);
            return obj;
        }
        
        protected abstract void callback(T obj, UnmarshallingContext context);
    }
    
    interface ClassOwnership {
        @CheckForNull String ownerOf(Class<?> clazz); }
    class PluginClassOwnership implements ClassOwnership {
        private PluginManager pm;
 public String ownerOf(Class<?> clazz) {
            if (classOwnership != null) {
                return classOwnership.ownerOf(clazz);
            }
            
            if (pm == null) {
                Jenkins j = Jenkins.getInstanceOrNull();
                if (j != null) {
                    pm = j.getPluginManager();
                }
                
            }
            
            if (pm == null) {
                return null;
            }
            
            PluginWrapper p = pm.whichPlugin(clazz);
            return p != null ? p.getShortName() + '@' + trimVersion(p.getVersion()) : null;
        }
        
    }
    
    private static class BlacklistedTypesConverter implements Converter {
        public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
            throw new UnsupportedOperationException("Refusing to marshal " + source.getClass().getName() + " for security reasons; see https://www.jenkins.io/redirect/class-filter/");
        }
        
        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
            throw new ConversionException("Refusing to unmarshal " + reader.getNodeName() + " for security reasons; see https://www.jenkins.io/redirect/class-filter/");
        }
        
        public boolean canConvert(Class type) {
            if (type == null) {
                return false;
            }
            
            String name = type.getName();
            return ClassFilter.DEFAULT.isBlacklisted(name) || ClassFilter.DEFAULT.isBlacklisted(type);
        }
        
    }
    
}


