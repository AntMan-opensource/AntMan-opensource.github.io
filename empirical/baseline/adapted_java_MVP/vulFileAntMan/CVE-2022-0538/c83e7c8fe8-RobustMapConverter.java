package hudson.util;
import com.thoughtworks.xstream.XStreamException;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.collections.MapConverter;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.mapper.Mapper;
import java.util.Map;
import jenkins.util.xstream.CriticalXStreamException;
@SuppressWarnings({"rawtypes", "unchecked"})
final class RobustMapConverter extends MapConverter {
    private static final Object ERROR = new Object();
    RobustMapConverter(Mapper mapper) {
        super(mapper);
    }
    
 protected void putCurrentEntryIntoMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target) {
        Object key = read(reader, context, map);
        Object value = read(reader, context, map);
        if (key != ERROR && value != ERROR) {
            target.put(key, value);
        }
        
    }
    
    private Object read(HierarchicalStreamReader reader, UnmarshallingContext context, Map map) {
        reader.moveDown();
        try {
            return readBareItem(reader, context, map);
        }
         catch (CriticalXStreamException x) {
            throw x;
        }
         catch (XStreamException | LinkageError x) {
            RobustReflectionConverter.addErrorInContext(context, x);
            return ERROR;
        }
         finally {
            reader.moveUp();
        }
        
    }
    
}


