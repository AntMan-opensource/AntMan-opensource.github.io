package org.apache.sling.servlets.resolver.internal;
import org.apache.sling.api.SlingException;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceUtil;
import org.apache.sling.api.scripting.SlingScript;
import org.apache.sling.api.scripting.SlingScriptResolver;
import org.apache.sling.api.servlets.ServletResolver;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
@Component(service = { SlingScriptResolver.class }, configurationPid = ResolverConfig.PID, property = { Constants.SERVICE_DESCRIPTION + "=Apache Sling Script Resolver", Constants.SERVICE_VENDOR + "=The Apache Software Foundation" })
public class SlingScriptResolverImpl implements SlingScriptResolver {
    private String[] executionPaths;
    private void activate(final ResolverConfig config) {
        this.executionPaths = SlingServletResolver.getExecutionPaths(config.servletresolver_paths());
    }
    
    public SlingScript findScript(final ResourceResolver resourceResolver, final String name) throws SlingException {
        SlingScript script = null;
        if (name.startsWith("/")) {
            final String path = ResourceUtil.normalize(name);
            if ( SlingServletResolver.isPathAllowed(path, this.executionPaths) ) {
                final Resource resource = resourceResolver.getResource(path);
                if ( resource != null ) {
                    script = resource.adaptTo(SlingScript.class);
                }
                
            }
            
        }
         else {
            final String[] path = resourceResolver.getSearchPath();
            for (int i = 0; script == null && i < path.length; i++) {
                final String scriptPath = ResourceUtil.normalize(path[i] + name);
                if ( SlingServletResolver.isPathAllowed(scriptPath, this.executionPaths) ) {
                    final Resource resource = resourceResolver.getResource(scriptPath);
                    if (resource != null) {
                        script = resource.adaptTo(SlingScript.class);
                    }
                    
                }
                
            }
            
        }
        
        if (script != null) {
            SlingServletResolver.LOGGER.debug("findScript: Using script {} for {}", script.getScriptResource().getPath(), name);
        }
         else {
            SlingServletResolver.LOGGER.info("findScript: No script {} found in path", name);
        }
        
        return script;
    }
    
}


