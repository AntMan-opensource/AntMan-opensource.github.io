package org.apache.sling.servlets.resolver.internal;
import static org.apache.sling.api.SlingConstants.ERROR_MESSAGE;
import static org.apache.sling.api.SlingConstants.ERROR_SERVLET_NAME;
import static org.apache.sling.api.SlingConstants.ERROR_STATUS;
import static org.apache.sling.api.SlingConstants.SLING_CURRENT_SERVLET_NAME;
import static org.apache.sling.api.servlets.ServletResolverConstants.DEFAULT_ERROR_HANDLER_RESOURCE_TYPE;
import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.atomic.AtomicReference;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.sling.api.SlingConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.request.RequestProgressTracker;
import org.apache.sling.api.request.RequestUtil;
import org.apache.sling.api.request.SlingRequestEvent;
import org.apache.sling.api.request.SlingRequestListener;
import org.apache.sling.api.resource.LoginException;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.resource.ResourceUtil;
import org.apache.sling.api.resource.SyntheticResource;
import org.apache.sling.api.servlets.ErrorHandler;
import org.apache.sling.api.servlets.OptingServlet;
import org.apache.sling.api.servlets.ServletResolver;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.apache.sling.serviceusermapping.ServiceUserMapped;
import org.apache.sling.servlets.resolver.internal.defaults.DefaultErrorHandlerServlet;
import org.apache.sling.servlets.resolver.internal.defaults.DefaultServlet;
import org.apache.sling.servlets.resolver.internal.helper.AbstractResourceCollector;
import org.apache.sling.servlets.resolver.internal.helper.LocationCollector;
import org.apache.sling.servlets.resolver.internal.helper.NamedScriptResourceCollector;
import org.apache.sling.servlets.resolver.internal.helper.ResourceCollector;
import org.apache.sling.servlets.resolver.internal.resolution.ResolutionCache;
import org.apache.sling.servlets.resolver.internal.resource.MergingServletResourceProvider;
import org.apache.sling.servlets.resolver.internal.resource.SlingServletConfig;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.metatype.annotations.Designate;
import org.osgi.util.tracker.ServiceTracker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@Component(name = ResolverConfig.PID, service = { ServletResolver.class, ErrorHandler.class, SlingRequestListener.class }, property = { Constants.SERVICE_DESCRIPTION + "=Apache Sling Servlet Resolver and Error Handler", Constants.SERVICE_VENDOR + "=The Apache Software Foundation" })
@Designate(ocd = ResolverConfig.class)
public class SlingServletResolver implements ServletResolver, SlingRequestListener, ErrorHandler {
    private static final String SERVICE_USER = "scripts";
    public static final Logger LOGGER = LoggerFactory.getLogger(SlingServletResolver.class);
    private ResourceResolverFactory resourceResolverFactory;
    @Reference(target = "(|(" + ServiceUserMapped.SUBSERVICENAME + "=" + SERVICE_USER + ")(!(" + ServiceUserMapped.SUBSERVICENAME + "=*)))")
    private ServiceUserMapped scriptServiceUserMapped;
    private ResolutionCache resolutionCache;
    private ServletContext servletContext;
    private AtomicReference<Servlet> defaultServlet = new AtomicReference<>();
    private AtomicReference<Servlet> fallbackErrorServlet = new AtomicReference<>();
    private AtomicReference<ResourceResolver> sharedScriptResolver = new AtomicReference<>();
    private final ThreadLocal<ResourceResolver> perThreadScriptResolver = new ThreadLocal<>();
    private AtomicReference<String[]> executionPaths = new AtomicReference<>();
    private AtomicReference<String[]> defaultExtensions = new AtomicReference<>();
    private boolean useResourceCaching;
    private final PathBasedServletAcceptor pathBasedServletAcceptor = new PathBasedServletAcceptor();
    private static final Servlet forbiddenPathServlet = new HttpServlet() {         private static final long serialVersionUID = 1L;
        public void service(HttpServletRequest request, HttpServletResponse response) throws IOException {
            response.sendError(HttpServletResponse.SC_FORBIDDEN);
        }
        
    };
    public Servlet resolveServlet(final SlingHttpServletRequest request) {
        final Resource resource = request.getResource();
        final RequestProgressTracker progressTracker = request.getRequestProgressTracker();
        final String timerName = "resolveServlet(" + resource.getPath() + ")";
        progressTracker.startTimer(timerName);
        final String resourceType = resource.getResourceType();
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("resolveServlet called for resource {}", resource);
        }
        
        final ResourceResolver scriptResolver = this.getScriptResourceResolver();
        Servlet servlet = null;
        if ( resourceType.length() > 0 ) {
            servlet = resolveServletInternal(request, null, resourceType, scriptResolver);
        }
        
        if (servlet == null) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("No specific servlet found, trying default");
            }
            
            servlet = getDefaultServlet();
        }
        
        progressTracker.logTimer(timerName, "Using servlet {0}", RequestUtil.getServletName(servlet));
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Servlet {} found for resource={}", RequestUtil.getServletName(servlet), resource);
        }
        
        return servlet;
    }
    
    public Servlet resolveServlet(final Resource resource, final String scriptName) {
        if ( resource == null ) {
            throw new IllegalArgumentException("Resource must not be null");
        }
        
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("resolveServlet called for resource {} with script name {}", resource, scriptName);
        }
        
        final ResourceResolver scriptResolver = this.getScriptResourceResolver();
        final Servlet servlet = resolveServletInternal(null, resource, scriptName, scriptResolver);
        if (LOGGER.isDebugEnabled()) {
            if (servlet != null) {
                LOGGER.debug("Servlet {} found for resource {} and script name {}", RequestUtil.getServletName(servlet), resource, scriptName);
            }
             else {
                LOGGER.debug("No servlet found for resource {} and script name {}", resource, scriptName);
            }
            
        }
        
        return servlet;
    }
    
    public Servlet resolveServlet(final ResourceResolver resolver, final String scriptName) {
        if ( resolver == null ) {
            throw new IllegalArgumentException("Resource resolver must not be null");
        }
        
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("resolveServlet called for for script name {}", scriptName);
        }
        
        final ResourceResolver scriptResolver = this.getScriptResourceResolver();
        final Servlet servlet = resolveServletInternal(null, (Resource)null, scriptName, scriptResolver);
        if (LOGGER.isDebugEnabled()) {
            if (servlet != null) {
                LOGGER.debug("Servlet {} found for script name {}", RequestUtil.getServletName(servlet), scriptName);
            }
             else {
                LOGGER.debug("No servlet found for script name {}", scriptName);
            }
            
        }
        
        return servlet;
    }
    
    private Servlet getServlet(final Resource scriptResource) {
        if ( scriptResource == null ) {
            return null;
        }
        
        if (scriptResource.getResourceResolver() == this.sharedScriptResolver || "sling/bundle/resource".equals(scriptResource.getResourceSuperType()) ) {
            return scriptResource.adaptTo(Servlet.class);
        }
        
        return new ScriptResource(scriptResource, perThreadScriptResolver::get, this.sharedScriptResolver.get()).adaptTo(Servlet.class);
    }
    
    public void handleError(final int status, final String message, final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws IOException {
        if (request.getAttribute(SlingConstants.ERROR_REQUEST_URI) != null) {
            LOGGER.error("handleError: Recursive invocation. Not further handling status {}({})", status, message);
            return;
        }
        
        RequestProgressTracker progressTracker = request.getRequestProgressTracker();
        String timerName = "handleError:status=" + status;
        progressTracker.startTimer(timerName);
        final ResourceResolver scriptResolver = this.getScriptResourceResolver();
        try {
            Resource resource = getErrorResource(request);
            String extension = request.getRequestPathInfo().getExtension();
            ResourceCollector locationUtil = new ResourceCollector(String.valueOf(status), DEFAULT_ERROR_HANDLER_RESOURCE_TYPE, resource, extension, this.executionPaths.get(), this.useResourceCaching);
            Servlet servlet = getServletInternal(locationUtil, request, scriptResolver);
            if (servlet == null) {
                servlet = getDefaultErrorServlet(request, resource, scriptResolver);
            }
            
            request.setAttribute(ERROR_STATUS, Integer.valueOf(status));
            request.setAttribute(ERROR_MESSAGE, message);
            Object servletName = request.getAttribute(SLING_CURRENT_SERVLET_NAME);
            if (servletName instanceof String) {
                request.setAttribute(ERROR_SERVLET_NAME, servletName);
            }
            
            progressTracker.logTimer(timerName, "Using handler {0}", RequestUtil.getServletName(servlet));
            handleError(servlet, request, response);
        }
         finally {
            progressTracker.logTimer(timerName, "Error handler finished");
        }
        
    }
    
    public void handleError(final Throwable throwable, final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws IOException {
        if (request.getAttribute(SlingConstants.ERROR_REQUEST_URI) != null) {
            LOGGER.error("handleError: Recursive invocation. Not further handling Throwable:", throwable);
            return;
        }
        
        RequestProgressTracker progressTracker = request.getRequestProgressTracker();
        String timerName = "handleError:throwable=" + throwable.getClass().getName();
        progressTracker.startTimer(timerName);
        final ResourceResolver scriptResolver = this.getScriptResourceResolver();
        try {
            Servlet servlet = null;
            Resource resource = getErrorResource(request);
            Class<?> tClass = throwable.getClass();
            while (servlet == null && tClass != Object.class) {
                String extension = request.getRequestPathInfo().getExtension();
                ResourceCollector locationUtil = new ResourceCollector(tClass.getSimpleName(), DEFAULT_ERROR_HANDLER_RESOURCE_TYPE, resource, extension, this.executionPaths.get(), this.useResourceCaching);
                servlet = getServletInternal(locationUtil, request, scriptResolver);
                tClass = tClass.getSuperclass();
            }
            
            if (servlet == null) {
                servlet = getDefaultErrorServlet(request, resource, scriptResolver);
            }
            
            request.setAttribute(SlingConstants.ERROR_EXCEPTION, throwable);
            request.setAttribute(SlingConstants.ERROR_EXCEPTION_TYPE, throwable.getClass());
            request.setAttribute(SlingConstants.ERROR_MESSAGE, throwable.getMessage());
            progressTracker.logTimer(timerName, "Using handler {0}", RequestUtil.getServletName(servlet));
            handleError(servlet, request, response);
        }
         finally {
            progressTracker.logTimer(timerName, "Error handler finished");
        }
        
    }
    
    private ResourceResolver getScriptResourceResolver() {
        ResourceResolver scriptResolver = this.perThreadScriptResolver.get();
        if ( scriptResolver == null ) {
            synchronized ( this.sharedScriptResolver ) {
            	 invalidateCache(this.sharedScriptResolver.get());
                this.sharedScriptResolver.get().refresh();
            }
            
            scriptResolver = this.sharedScriptResolver.get();
        }
        
        return scriptResolver;
    }
    
    public void onEvent(final SlingRequestEvent event) {
        if ( event.getType() == SlingRequestEvent.EventType.EVENT_INIT ) {
            try {
            	ResourceResolver clone = this.sharedScriptResolver.get().clone(null);
            	this.perThreadScriptResolver.set(clone);
            }
             catch (final LoginException e) {
                LOGGER.error("Unable to create new script resolver clone", e);
            }
            
        }
         else if ( event.getType() == SlingRequestEvent.EventType.EVENT_DESTROY ) {
            final ResourceResolver resolver = this.perThreadScriptResolver.get();
            if ( resolver != null ) {
                this.perThreadScriptResolver.remove();
                resolver.close();
            }
            
        }
        
    }
    
    private Resource getErrorResource(final SlingHttpServletRequest request) {
        Resource res = request.getResource();
        if (res == null) { 
            res = new SyntheticResource(request.getResourceResolver(), request.getPathInfo(), DEFAULT_ERROR_HANDLER_RESOURCE_TYPE);
        }
        
        return res;
    }
    
    private Servlet resolveServletInternal(final SlingHttpServletRequest request, final Resource resource, final String scriptNameOrResourceType, final ResourceResolver resolver) {
        Servlet servlet = null;
        if (scriptNameOrResourceType.charAt(0) == '/') {
            final String scriptPath = ResourceUtil.normalize(scriptNameOrResourceType);
            if (scriptPath != null &&  isPathAllowed(scriptPath, this.executionPaths.get()) ) {
                final Resource res = AbstractResourceCollector.getResourceOrNull(resolver,scriptPath,useResourceCaching);
                servlet = this.getServlet(res);
                if (servlet != null && !pathBasedServletAcceptor.accept(request, servlet)) {
                    if(LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Servlet {} rejected by {} returning FORBIDDEN status", RequestUtil.getServletName(servlet), pathBasedServletAcceptor.getClass().getSimpleName());
                    }
                    
                    servlet = forbiddenPathServlet;
                }
                 else if (servlet != null && LOGGER.isDebugEnabled()) {
                    LOGGER.debug("Servlet {} found using absolute resource type {}", RequestUtil.getServletName(servlet), scriptNameOrResourceType);
                }
                
            }
             else {
                if ( request != null ) {
                    request.getRequestProgressTracker().log( "Will not look for a servlet at {0} as it is not in the list of allowed paths", scriptNameOrResourceType );
                }
                
            }
            
        }
        
        if ( servlet == null ) {
            final AbstractResourceCollector locationUtil;
            if ( request != null ) {
                locationUtil = ResourceCollector.create(request, this.executionPaths.get(), this.defaultExtensions.get(), this.useResourceCaching);
            }
             else {
                locationUtil = NamedScriptResourceCollector.create(scriptNameOrResourceType, resource, this.executionPaths.get(), this.useResourceCaching);
            }
            
            servlet = getServletInternal(locationUtil, request, resolver);
            if (servlet != null && LOGGER.isDebugEnabled()) {
                LOGGER.debug("getServletInternal returns servlet {}", RequestUtil.getServletName(servlet));
            }
            
        }
        
        return servlet;
    }
    
    private Servlet getServletInternal(final AbstractResourceCollector locationUtil, final SlingHttpServletRequest request, final ResourceResolver resolver) {
        final ResolutionCache localCache = this.resolutionCache;
        final Servlet scriptServlet = localCache.get(locationUtil);
        if (scriptServlet != null) {
            if ( LOGGER.isDebugEnabled() ) {
                LOGGER.debug("Using cached servlet {}", RequestUtil.getServletName(scriptServlet));
            }
            
            return scriptServlet;
        }
        
        final Collection<Resource> candidates = locationUtil.getServlets(resolver, localCache.getScriptEngineExtensions());
        if (LOGGER.isDebugEnabled()) {
            if (candidates.isEmpty()) {
                LOGGER.debug("No servlet candidates found");
            }
             else {
                LOGGER.debug("Ordered list of servlet candidates follows");
                for (Resource candidateResource : candidates) {
                    LOGGER.debug("Servlet candidate: {}", candidateResource.getPath());
                }
                
            }
            
        }
        
        boolean hasOptingServlet = false;
        for (final Resource candidateResource : candidates) {
            LOGGER.debug("Checking if candidate resource {} adapts to servlet and accepts request", candidateResource .getPath());
            Servlet candidate = this.getServlet(candidateResource);
            if (candidate != null) {
                final boolean isOptingServlet = candidate instanceof OptingServlet;
                boolean servletAcceptsRequest = !isOptingServlet || (request != null && ((OptingServlet) candidate).accepts(request));
                if (servletAcceptsRequest) {
                    if (!hasOptingServlet && !isOptingServlet ) {
                        localCache.put(locationUtil, candidate);
                    }
                    
                    LOGGER.debug("Using servlet provided by candidate resource {}", candidateResource.getPath());
                    return candidate;
                }
                
                if (isOptingServlet) {
                    hasOptingServlet = true;
                }
                
                LOGGER.debug("Candidate {} does not accept request, ignored", candidateResource.getPath());
            }
             else {
                LOGGER.debug("Candidate {} does not adapt to a servlet, ignored", candidateResource.getPath());
            }
            
        }
        
        return null;
    }
    
    private Servlet getDefaultServlet() {
        Servlet servlet = defaultServlet.get();
        if (servlet == null) {
            try {
                servlet = new DefaultServlet();
                servlet.init(new SlingServletConfig(servletContext, null, "Apache Sling Core Default Servlet"));
                defaultServlet.set(servlet);
            }
             catch (final ServletException se) {
                LOGGER.error("Failed to initialize default servlet", se);
            }
            
        }
        
        return servlet;
    }
    
    private Servlet getDefaultErrorServlet( final SlingHttpServletRequest request, final Resource resource, final ResourceResolver resolver) {
        String extension = request.getRequestPathInfo().getExtension();
        final ResourceCollector locationUtil = new ResourceCollector( ServletResolverConstants.DEFAULT_ERROR_HANDLER_METHOD, DEFAULT_ERROR_HANDLER_RESOURCE_TYPE, resource, extension, this.executionPaths.get(), this.useResourceCaching);
        final Servlet servlet = getServletInternal(locationUtil, request, resolver);
        if (servlet != null) {
            return servlet;
        }
        
        Servlet fallbackServlet = fallbackErrorServlet.get();
        if (fallbackServlet == null) {
            try {
                fallbackServlet = new DefaultErrorHandlerServlet();
                fallbackServlet.init(new SlingServletConfig(servletContext, null, "Sling (Ad Hoc) Default Error Handler Servlet"));
                fallbackErrorServlet.set(fallbackServlet);
            }
             catch (ServletException se) {
                LOGGER.error("Failed to initialize error servlet", se);
            }
            
        }
        
        return fallbackServlet;
    }
    
    private void handleError(final Servlet errorHandler, final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws IOException {
        request.setAttribute(SlingConstants.ERROR_REQUEST_URI, request.getRequestURI());
        if (request.getAttribute(SlingConstants.ERROR_SERVLET_NAME) == null) {
            request.setAttribute(SlingConstants.ERROR_SERVLET_NAME, errorHandler.getServletConfig().getServletName());
        }
        
        try {
            HandleErrorSlingHttpServletResponse wrappedResponse = new HandleErrorSlingHttpServletResponse(response);
            errorHandler.service(request, wrappedResponse);
            if (wrappedResponse.isOpen()) {
                wrappedResponse.flushBuffer();
                wrappedResponse.getWriter().close();
            }
            
        }
         catch (final Throwable t) { 
            LOGGER.error("Calling the error handler resulted in an error", t);
            LOGGER.error("Original error " + request.getAttribute(SlingConstants.ERROR_EXCEPTION_TYPE), (Throwable) request.getAttribute(SlingConstants.ERROR_EXCEPTION));
            final IOException x = new IOException("Error handler failed: " + t.getClass().getName());
            x.initCause(t);
            throw x;
        }
        
    }
    
    private ServiceTracker<MergingServletResourceProvider, MergingServletResourceProvider> tracker;
    protected void activate(final BundleContext context, final ResolverConfig config) throws LoginException {
        this.tracker = new ServiceTracker<>(context, MergingServletResourceProvider.class, null);
        this.tracker.open();
        this.sharedScriptResolver.set( ScriptResourceResolver.wrap(resourceResolverFactory.getServiceResourceResolver(Collections.singletonMap(ResourceResolverFactory.SUBSERVICE, (Object)SERVICE_USER)), this.tracker::getService) );
        this.executionPaths.set(getExecutionPaths(config.servletresolver_paths()));
        this.defaultExtensions.set(config.servletresolver_defaultExtensions());
        this.useResourceCaching = config.enable_resource_caching();
        this.getDefaultServlet();
    }
    
    protected void modified(final BundleContext context, final ResolverConfig config) throws LoginException {
        this.deactivate();
        this.activate(context, config);
    }
    
    protected void deactivate() {
        this.tracker.close();
        this.resolutionCache.flushCache();
        Servlet servlet = fallbackErrorServlet.get();
        if (servlet != null) {
            try {
                servlet.destroy();
            }
             catch (Throwable t) { 
            }
             finally {
                fallbackErrorServlet.set(null);
            }
            
        }
        
        if (this.sharedScriptResolver != null) {
            ResourceResolver rr = this.sharedScriptResolver.get();
            if (rr != null) {
                rr.close();
            }
            
            this.sharedScriptResolver.set(null);
        }
        
        this.executionPaths.set(null);
        this.defaultExtensions.set(null);
    }
    
    public static boolean isPathAllowed(final String path, final String[] executionPaths) {
        if (executionPaths == null || executionPaths.length == 0) {
            LOGGER.debug("Accepting servlet at '{}' as there are no configured execution paths.", path);
            return true;
        }
        
        if (path == null || path.length() == 0) {
            LOGGER.debug("Ignoring servlet with empty path.");
            return false;
        }
        
        for (final String config : executionPaths) {
            if (config.endsWith("/")) {
                if (path.startsWith(config)) {
                    LOGGER.debug( "Accepting servlet at '{}' as the path is prefixed with configured execution path '{}'.", path, config);
                    return true;
                }
                
            }
             else if (path.equals(config)) {
                LOGGER.debug( "Accepting servlet at '{}' as the path equals configured execution path '{}'.", path, config);
                return true;
            }
            
        }
        
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug( "Ignoring servlet at '{}' as the path is not in the configured execution paths.", path);
        }
        
        return false;
    }
    
    public static String[] getExecutionPaths(final String[] paths) {
        String[] executionPaths = paths;
        if ( executionPaths != null ) {
            if ( executionPaths.length == 0 ) {
                executionPaths = null;
            }
             else {
                boolean hasRoot = false;
                for(final String path : executionPaths) {
                    if ( path == null || path.length() == 0 || path.equals("/") ) {
                        hasRoot = true;
                        break;
                    }
                    
                }
                
                if ( hasRoot ) {
                    executionPaths = null;
                }
                
            }
            
        }
        
        return executionPaths;
    }
    
	protected void invalidateCache(ResourceResolver r) {
		LocationCollector.clearCache(r);
		AbstractResourceCollector.clearCache(r);
	}
	
}


