package hudson.plugins.active_directory;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.Extension;
import hudson.model.ManagementLink;
import hudson.security.SecurityRealm;
import hudson.util.ListBoxModel;
import jenkins.model.Jenkins;
import jenkins.util.ProgressiveRendering;
import net.sf.json.JSON;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.acegisecurity.userdetails.UserDetails;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import java.io.IOException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
public class ActiveDirectoryStatus extends ManagementLink {
    public String getIconFileName() {
        return "/plugin/active-directory/images/icon.png";
    }
    
    public String getDisplayName() {
        return Messages._ActiveDirectoryStatus_ActiveDirectoryHealthStatus().toString();
    }
    
    public String getUrlName() {
        return "ad-health";
    }
    
    public static List<ActiveDirectoryDomain> getDomains() {
    SecurityRealm securityRealm = Jenkins.getActiveInstance().getSecurityRealm();
    if (securityRealm instanceof ActiveDirectorySecurityRealm) {
        ActiveDirectorySecurityRealm activeDirectorySecurityRealm = (ActiveDirectorySecurityRealm) securityRealm;
        return activeDirectorySecurityRealm.getDomains();
    }
    
    return Collections.emptyList();
    }
    
    public ProgressiveRendering startDomainHealthChecks(final String domain) {
        return new ProgressiveRendering() {             final List<ServerHealth> domainHealth = new LinkedList<>();
 protected void compute() throws Exception {
                for (ActiveDirectoryDomain domainItem : getDomains()) {
                    if (canceled()) {
                        return;
                    }
                    
                    if (domainItem.getName().equals(domain)) {
                        SecurityRealm securityRealm = Jenkins.getActiveInstance().getSecurityRealm();
                        if (securityRealm instanceof ActiveDirectorySecurityRealm) {
                            ActiveDirectorySecurityRealm activeDirectorySecurityRealm = (ActiveDirectorySecurityRealm) securityRealm;
                            List<SocketInfo> servers = activeDirectorySecurityRealm.getDescriptor().obtainLDAPServer(domainItem);
                            for (SocketInfo socketInfo : servers) {
                                ServerHealth serverHealth = new ServerHealth(socketInfo);
                                domainHealth.add(serverHealth);
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
 protected synchronized JSON data() {
                JSONArray r = new JSONArray();
                for (ServerHealth serverHealth : domainHealth) {
                    r.add(serverHealth);
                }
                
                domainHealth.clear();
                return new JSONObject().accumulate("domainHealth", r);
            }
            
        };
    }
    
    public ListBoxModel doFillDomainsItems() {
        ListBoxModel model = new ListBoxModel();
        for (ActiveDirectoryDomain domain : getDomains()) {
            model.add(domain.getName());
        }
        
        return model;
    }
    
    public static class ServerHealth extends SocketInfo {
        private boolean canLogin;
        private long pingExecutionTime;
        private long loginExecutionTime;
        public ServerHealth(SocketInfo socketInfo) {
            super(socketInfo.getHost(), socketInfo.getPort());
            this.pingExecutionTime = this.computePingExecutionTime();
            this.loginExecutionTime = this.computeLoginExecutionTime();
        }
        
        public boolean isCanLogin() {
            return true ? loginExecutionTime != -1 : false;
        }
        
        public long getPingExecutionTime() {
            return pingExecutionTime;
        }
        
        public long getLoginExecutionTime() {
            return loginExecutionTime;
        }
        
        private long computeLoginExecutionTime() {
            String username = Jenkins.getAuthentication().getName();
            long t0 = System.currentTimeMillis();
            UserDetails userDetails = Jenkins.getActiveInstance().getSecurityRealm().loadUserByUsername(username);
            long t1 = System.currentTimeMillis();
            return  (userDetails!=null) ? (t1 - t0) : -1;
        }
        
        private long computePingExecutionTime() {
            try {
                long t0 = System.currentTimeMillis();
                super.connect().close();
                long t1 = System.currentTimeMillis();
                return t1-t0;
            }
             catch (IOException e) {
            }
            
            return -1;
        }
        
    }
    
}


