package org.jeecg.common.util.security;
import lombok.extern.slf4j.Slf4j;
import java.util.*;
public abstract class AbstractQueryBlackListHandler {
    public static Map<String, String> ruleMap = new HashMap<>();
    static {
        ruleMap.put("sys_user", "password,salt");
    }
    
    protected abstract List<QueryTable> getQueryTableInfo(String sql);
    public boolean isPass(String sql) {
        List<QueryTable> list = null;
        try {
            list = this.getQueryTableInfo(sql.toLowerCase());
        }
         catch (Exception e) {
            log.warn("校验sql语句，解析报错：{}",e.getMessage());
        }
        
        if(list==null){
            return true;
        }
        
        log.info("--获取sql信息--", list.toString());
        boolean flag = true;
        for (QueryTable table : list) {
            String name = table.getName();
            String fieldString = ruleMap.get(name);
            if (fieldString != null) {
                if ("*".equals(fieldString) || table.isAll()) {
                    flag = false;
                    log.warn("sql黑名单校验，表【"+name+"】禁止查询");
                    break;
                }
                 else if (table.existSameField(fieldString)) {
                    flag = false;
                    break;
                }
                
            }
            
        }
        
        return flag;
    }
    
    protected class QueryTable {
        private String name;
        private String alias;
        private Set<String> fields;
        private boolean all;
        public QueryTable() {
        }
        
        public QueryTable(String name, String alias) {
            this.name = name;
            this.alias = alias;
            this.all = false;
            this.fields = new HashSet<>();
        }
        
        public void addField(String field) {
            this.fields.add(field);
        }
        
        public String getName() {
            return name;
        }
        
        public Set<String> getFields() {
            return new HashSet<>(fields);
        }
        
        public void setName(String name) {
            this.name = name;
        }
        
        public void setFields(Set<String> fields) {
            this.fields = fields;
        }
        
        public String getAlias() {
            return alias;
        }
        
        public void setAlias(String alias) {
            this.alias = alias;
        }
        
        public boolean isAll() {
            return all;
        }
        
        public void setAll(boolean all) {
            this.all = all;
        }
        
        public boolean existSameField(String fieldString) {
            String[] arr = fieldString.split(",");
            for (String exp : fields) {
                for (String config : arr) {
                    if (exp.equals(config)) {
                        log.warn("sql黑名单校验，表【"+name+"】中字段【"+config+"】禁止查询");
                        return true;
                    }
                     else {
                        String aliasColumn = config;
                        if (alias != null && alias.length() > 0) {
                            aliasColumn = alias + "." + config;
                        }
                        
                        if (exp.indexOf(aliasColumn) > 0) {
                            log.warn("sql黑名单校验，表【"+name+"】中字段【"+config+"】禁止查询");
                            return true;
                        }
                        
                    }
                    
                }
                
            }
            
            return false;
        }
        
        public String toString() {
            return "QueryTable{" + "name='" + name + '\'' + ", alias='" + alias + '\'' + ", fields=" + fields + ", all=" + all + '}';
        }
        
    }
    
    public String getError(){
        return "系统设置了安全规则，敏感表和敏感字段禁止查询，联系管理员授权!";
    }
    
}


