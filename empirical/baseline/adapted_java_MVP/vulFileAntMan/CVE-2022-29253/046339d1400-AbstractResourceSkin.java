package com.xpn.xwiki.internal.skin;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.commons.configuration2.BaseConfiguration;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.filter.input.InputSource;
import org.xwiki.skin.Resource;
import org.xwiki.skin.Skin;
import static org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage;
public abstract class AbstractResourceSkin extends AbstractSkin {
    protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractResourceSkin.class);
    private Configuration properties;
    public AbstractResourceSkin(String id, InternalSkinManager skinManager, InternalSkinConfiguration configuration, Logger logger) {
        super(id, skinManager, configuration, logger);
    }
    
    abstract AbstractResource<InputSource> createResource(String resourcePath, String resourceName);
    abstract URL getResourceURL(String resourcePath);
    public String getOutputSyntaxString() {
        return getProperties().getString("outputSyntax");
    }
    
    protected Skin createParent() {
        Skin skin;
        String parentId = getProperties().getString("parent");
        if (parentId != null) {
            if (parentId.isEmpty()) {
                skin = VOID;
            }
             else {
                skin = this.skinManager.getSkin(parentId);
            }
            
        }
         else {
            skin = null;
        }
        
        return skin;
    }
    
    public Resource<?> getLocalResource(String resourceName) {
        String resourcePath = getSkinResourcePath(resourceName);
        if (resourcePath != null && getResourceURL(resourcePath) != null) {
            return createResource(resourcePath, resourceName);
        }
        
        return null;
    }
    
    protected String getPropertiesPath() {
        return getSkinFolder() + "skin.properties";
    }
    
    protected String getSkinFolder() {
        return "skins/" + this.id + '/';
    }
    
    protected Configuration getProperties() {
        if (this.properties == null) {
            URL url = getResourceURL(getPropertiesPath());
            if (url != null) {
                try {
                    this.properties = new Configurations().properties(url);
                }
                 catch (ConfigurationException e) {
                    LOGGER.error("Failed to load skin [{}] properties file ([])", this.id, url, getRootCauseMessage(e));
                    this.properties = new BaseConfiguration();
                }
                
            }
             else {
                LOGGER.debug("No properties found for skin [{}]", this.id);
                this.properties = new BaseConfiguration();
            }
            
        }
        
        return this.properties;
    }
    
    private String getSkinResourcePath(String resource) {
        String skinFolder = getSkinFolder();
        String resourcePath = skinFolder + resource;
        Path normalizedResource = Paths.get(resourcePath).normalize();
        if (!normalizedResource.startsWith(skinFolder)) {
            LOGGER.warn("Direct access to skin file [{}] refused. Possible break-in attempt!", normalizedResource);
            return null;
        }
        
        return resourcePath;
    }
    
}


