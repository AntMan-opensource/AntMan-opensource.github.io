package org.apache.inlong.manager.service.node.starrocks;
import org.apache.inlong.manager.common.consts.DataNodeType;
import org.apache.inlong.manager.common.enums.ErrorCodeEnum;
import org.apache.inlong.manager.common.exceptions.BusinessException;
import org.apache.inlong.manager.common.util.CommonBeanUtils;
import org.apache.inlong.manager.common.util.Preconditions;
import org.apache.inlong.manager.dao.entity.DataNodeEntity;
import org.apache.inlong.manager.pojo.node.DataNodeInfo;
import org.apache.inlong.manager.pojo.node.DataNodeRequest;
import org.apache.inlong.manager.pojo.node.starrocks.StarRocksDataNodeDTO;
import org.apache.inlong.manager.pojo.node.starrocks.StarRocksDataNodeInfo;
import org.apache.inlong.manager.pojo.node.starrocks.StarRocksDataNodeRequest;
import org.apache.inlong.manager.service.node.AbstractDataNodeOperator;
import org.apache.inlong.manager.service.resource.sink.starrocks.StarRocksJdbcUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.sql.Connection;
public class StarRocksDataNodeOperator extends AbstractDataNodeOperator {
    private static final Logger LOGGER = LoggerFactory.getLogger(StarRocksDataNodeOperator.class);
    private ObjectMapper objectMapper;
    public Boolean accept(String dataNodeType) {
        return getDataNodeType().equals(dataNodeType);
    }
    
    public String getDataNodeType() {
        return DataNodeType.STARROCKS;
    }
    
    public DataNodeInfo getFromEntity(DataNodeEntity entity) {
        if (entity == null) {
            throw new BusinessException(ErrorCodeEnum.DATA_NODE_NOT_FOUND);
        }
        
        StarRocksDataNodeInfo starRocksDataNodeInfo = new StarRocksDataNodeInfo();
        CommonBeanUtils.copyProperties(entity, starRocksDataNodeInfo);
        if (StringUtils.isNotBlank(entity.getExtParams())) {
            StarRocksDataNodeDTO dto = StarRocksDataNodeDTO.getFromJson(entity.getExtParams());
            CommonBeanUtils.copyProperties(dto, starRocksDataNodeInfo);
        }
        
        return starRocksDataNodeInfo;
    }
    
    protected void setTargetEntity(DataNodeRequest request, DataNodeEntity targetEntity) {
        StarRocksDataNodeRequest nodeRequest = (StarRocksDataNodeRequest) request;
        CommonBeanUtils.copyProperties(nodeRequest, targetEntity, true);
        try {
            StarRocksDataNodeDTO dto = StarRocksDataNodeDTO.getFromRequest(nodeRequest, targetEntity.getExtParams());
            targetEntity.setExtParams(objectMapper.writeValueAsString(dto));
        }
         catch (Exception e) {
            throw new BusinessException(ErrorCodeEnum.SOURCE_INFO_INCORRECT, String.format("Failed to build extParams for StarRocks node: %s", e.getMessage()));
        }
        
    }
    
    public Boolean testConnection(DataNodeRequest request) {
        String jdbcUrl = request.getUrl();
        String username = request.getUsername();
        String password = request.getToken();
        Preconditions.expectNotBlank(jdbcUrl, ErrorCodeEnum.INVALID_PARAMETER, "connection jdbcUrl cannot be empty");
        try (Connection ignored = StarRocksJdbcUtils.getConnection(jdbcUrl, username, password)) {
            LOGGER.info("StarRocks connection not null - connection success for jdbcUrl={}, username={}, password={}", jdbcUrl, username, password);
            return true;
        }
         catch (Exception e) {
            String errMsg = String.format("StarRocks connection failed for jdbcUrl=%s, username=%s, password=%s", jdbcUrl, username, password);
            LOGGER.error(errMsg, e);
            throw new BusinessException(errMsg);
        }
        
    }
    
}


