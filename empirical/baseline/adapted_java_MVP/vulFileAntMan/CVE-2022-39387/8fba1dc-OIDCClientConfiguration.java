package org.xwiki.contrib.oidc.auth.internal;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.servlet.http.HttpSession;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.xwiki.component.annotation.Component;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.container.Container;
import org.xwiki.container.Request;
import org.xwiki.container.Session;
import org.xwiki.container.servlet.ServletSession;
import org.xwiki.contrib.oidc.OIDCIdToken;
import org.xwiki.contrib.oidc.OIDCUserInfo;
import org.xwiki.contrib.oidc.internal.OIDCConfiguration;
import org.xwiki.contrib.oidc.provider.internal.OIDCManager;
import org.xwiki.contrib.oidc.provider.internal.endpoint.AuthorizationOIDCEndpoint;
import org.xwiki.contrib.oidc.provider.internal.endpoint.LogoutOIDCEndpoint;
import org.xwiki.contrib.oidc.provider.internal.endpoint.TokenOIDCEndpoint;
import org.xwiki.contrib.oidc.provider.internal.endpoint.UserInfoOIDCEndpoint;
import org.xwiki.instance.InstanceIdManager;
import org.xwiki.properties.ConverterManager;
import com.nimbusds.oauth2.sdk.Scope;
import com.nimbusds.oauth2.sdk.auth.ClientAuthenticationMethod;
import com.nimbusds.oauth2.sdk.auth.Secret;
import com.nimbusds.oauth2.sdk.http.HTTPRequest;
import com.nimbusds.oauth2.sdk.id.ClientID;
import com.nimbusds.oauth2.sdk.token.BearerAccessToken;
import com.nimbusds.openid.connect.sdk.OIDCClaimsRequest;
import com.nimbusds.openid.connect.sdk.OIDCScopeValue;
import com.nimbusds.openid.connect.sdk.claims.ClaimsSetRequest;
import com.nimbusds.openid.connect.sdk.claims.IDTokenClaimsSet;
@Component(roles = OIDCClientConfiguration.class)
public class OIDCClientConfiguration extends OIDCConfiguration {
    public class GroupMapping {
        private final Map<String, Set<String>> xwikiMapping;
        private final Map<String, Set<String>> providerMapping;
        public GroupMapping(int size) {
            this.xwikiMapping = new HashMap<>(size);
            this.providerMapping = new HashMap<>(size);
        }
        
        public Set<String> fromXWiki(String xwikiGroup) {
            return this.xwikiMapping.get(xwikiGroup);
        }
        
        public Set<String> fromProvider(String providerGroup) {
            return this.providerMapping.get(providerGroup);
        }
        
        public Map<String, Set<String>> getXWikiMapping() {
            return this.xwikiMapping;
        }
        
        public Map<String, Set<String>> getProviderMapping() {
            return this.providerMapping;
        }
        
    }
    
    public static final String PROP_XWIKIPROVIDER = "oidc.xwikiprovider";
    public static final String PROP_USER_NAMEFORMATER = "oidc.user.nameFormater";
    public static final String DEFAULT_USER_NAMEFORMATER = "${oidc.issuer.host._clean}-${oidc.user.preferredUsername._clean}";
    public static final String PROP_USER_SUBJECTFORMATER = "oidc.user.subjectFormater";
    public static final String PROP_USER_MAPPING = "oidc.user.mapping";
    public static final String DEFAULT_USER_SUBJECTFORMATER = "${oidc.user.subject}";
    public static final String PROPPREFIX_ENDPOINT = "oidc.endpoint.";
    public static final String PROP_ENDPOINT_AUTHORIZATION = PROPPREFIX_ENDPOINT + AuthorizationOIDCEndpoint.HINT;
    public static final String PROP_ENDPOINT_TOKEN = PROPPREFIX_ENDPOINT + TokenOIDCEndpoint.HINT;
    public static final String PROP_ENDPOINT_USERINFO = PROPPREFIX_ENDPOINT + UserInfoOIDCEndpoint.HINT;
    public static final String PROP_ENDPOINT_LOGOUT = PROPPREFIX_ENDPOINT + LogoutOIDCEndpoint.HINT;
    public static final String PROP_CLIENTID = "oidc.clientid";
    public static final String PROP_SECRET = "oidc.secret";
    public static final String PROP_SKIPPED = "oidc.skipped";
    public static final String PROP_ENDPOINT_TOKEN_AUTH_METHOD = PROPPREFIX_ENDPOINT + TokenOIDCEndpoint.HINT + ".auth_method";
    public static final String PROP_ENDPOINT_USERINFO_METHOD = PROPPREFIX_ENDPOINT + UserInfoOIDCEndpoint.HINT + ".method";
    public static final String PROP_ENDPOINT_USERINFO_HEADERS = PROPPREFIX_ENDPOINT + UserInfoOIDCEndpoint.HINT + ".headers";
    public static final String PROP_ENDPOINT_LOGOUT_METHOD = PROPPREFIX_ENDPOINT + LogoutOIDCEndpoint.HINT + ".method";
    public static final String PROP_USERINFOREFRESHRATE = "oidc.userinforefreshrate";
    public static final String PROP_SCOPE = "oidc.scope";
    public static final String PROP_USERINFOCLAIMS = "oidc.userinfoclaims";
    public static final List<String> DEFAULT_USERINFOCLAIMS = Arrays.asList(OIDCUserInfo.CLAIM_XWIKI_ACCESSIBILITY, OIDCUserInfo.CLAIM_XWIKI_COMPANY, OIDCUserInfo.CLAIM_XWIKI_DISPLAYHIDDENDOCUMENTS, OIDCUserInfo.CLAIM_XWIKI_EDITOR, OIDCUserInfo.CLAIM_XWIKI_USERTYPE);
    public static final String PROP_IDTOKENCLAIMS = "oidc.idtokenclaims";
    public static final List<String> DEFAULT_IDTOKENCLAIMS = Arrays.asList(OIDCIdToken.CLAIM_XWIKI_INSTANCE_ID);
    public static final String PROP_GROUPS_MAPPING = "oidc.groups.mapping";
    public static final String PROP_GROUPS_ALLOWED = "oidc.groups.allowed";
    public static final String PROP_GROUPS_FORBIDDEN = "oidc.groups.forbidden";
    public static final String PROP_GROUPS_PREFIX = "oidc.groups.prefix";
    public static final String PROP_GROUPS_SEPARATOR = "oidc.groups.separator";
    public static final String PROP_INITIAL_REQUEST = "xwiki.initialRequest";
    public static final String PROP_STATE = "oidc.state";
    public static final String PROP_SESSION_ACCESSTOKEN = "oidc.accesstoken";
    public static final String PROP_SESSION_IDTOKEN = "oidc.idtoken";
    public static final String PROP_SESSION_USERINFO_EXPORATIONDATE = "oidc.session.userinfoexpirationdate";
    private static final String XWIKI_GROUP_PREFIX = "XWiki.";
    private InstanceIdManager instance;
    private OIDCManager manager;
    private Container container;
    private ConverterManager converter;
    private Logger logger;
    private ConfigurationSource configuration;
    private HttpSession getHttpSession() {
        Session session = this.container.getSession();
        if (session instanceof ServletSession) {
            HttpSession httpSession = ((ServletSession) session).getHttpSession();
            this.logger.debug("Session: {}", httpSession.getId());
            return httpSession;
        }
        
        return null;
    }
    
    private <T> T getSessionAttribute(String name) {
        HttpSession session = getHttpSession();
        if (session != null) {
            return (T) session.getAttribute(name);
        }
        
        return null;
    }
    
    private <T> T removeSessionAttribute(String name) {
        HttpSession session = getHttpSession();
        if (session != null) {
            try {
                return (T) session.getAttribute(name);
            }
             finally {
                session.removeAttribute(name);
            }
            
        }
        
        return null;
    }
    
    private void setSessionAttribute(String name, Object value) {
        HttpSession session = getHttpSession();
        if (session != null) {
            session.setAttribute(name, value);
        }
        
    }
    
    private String getRequestParameter(String key) {
        Request request = this.container.getRequest();
        if (request != null) {
            return (String) request.getProperty(key);
        }
        
        return null;
    }
    
    public Map<String, String> getMap(String key) {
        List<String> list = getProperty(key, List.class);
        Map<String, String> mapping;
        if (list != null && !list.isEmpty()) {
            mapping = new HashMap<>(list.size());
            for (String listItem : list) {
                int index = listItem.indexOf('=');
                if (index != -1) {
                    mapping.put(listItem.substring(0, index), listItem.substring(index + 1));
                }
                
            }
            
        }
         else {
            mapping = null;
        }
        
        return mapping;
    }
    
    protected <T> T getProperty(String key, Class<T> valueClass) {
        String requestValue = getRequestParameter(key);
        if (requestValue != null) {
            return this.converter.convert(valueClass, requestValue);
        }
        
        T sessionValue = getSessionAttribute(key);
        if (sessionValue != null) {
            return sessionValue;
        }
        
        return this.configuration.getProperty(key, valueClass);
    }
    
    protected <T> T getProperty(String key, T def) {
        String requestValue = getRequestParameter(key);
        if (requestValue != null) {
            return this.converter.convert(def.getClass(), requestValue);
        }
        
        T sessionValue = getSessionAttribute(key);
        if (sessionValue != null) {
            return sessionValue;
        }
        
        return this.configuration.getProperty(key, def);
    }
    
    public String getSubjectFormater() {
        String userFormatter = getProperty(PROP_USER_SUBJECTFORMATER, String.class);
        if (userFormatter == null) {
            userFormatter = DEFAULT_USER_SUBJECTFORMATER;
        }
        
        return userFormatter;
    }
    
    public String getXWikiUserNameFormater() {
        String userFormatter = getProperty(PROP_USER_NAMEFORMATER, String.class);
        if (userFormatter == null) {
            userFormatter = DEFAULT_USER_NAMEFORMATER;
        }
        
        return userFormatter;
    }
    
    public Map<String, String> getUserMapping() {
        return getMap(PROP_USER_MAPPING);
    }
    
    public URL getXWikiProvider() {
        return getProperty(PROP_XWIKIPROVIDER, URL.class);
    }
    
    private Endpoint getEndPoint(String hint) throws URISyntaxException {
        String uriString = getProperty(PROPPREFIX_ENDPOINT + hint, String.class);
        URI uri;
        if (uriString == null) {
            if (getProperty(PROP_XWIKIPROVIDER, String.class) != null) {
                uri = this.manager.createEndPointURI(getXWikiProvider().toString(), hint);
            }
             else {
                uri = null;
            }
            
        }
         else {
            uri = new URI(uriString);
        }
        
        if (uri == null) {
            return null;
        }
        
        Map<String, List<String>> headers = new LinkedHashMap<>();
        List<String> entries = getProperty(PROPPREFIX_ENDPOINT + hint + ".headers", List.class);
        if (entries != null) {
            for (String entry : entries) {
                int index = entry.indexOf(':');
                if (index > 0 && index < entry.length() - 1) {
                    headers.computeIfAbsent(entry.substring(0, index), key -> new ArrayList<>()) .add(entry.substring(index + 1));
                }
                
            }
            
        }
        
        return new Endpoint(uri, headers);
    }
    
    public Endpoint getAuthorizationOIDCEndpoint() throws URISyntaxException {
        return getEndPoint(AuthorizationOIDCEndpoint.HINT);
    }
    
    public Endpoint getTokenOIDCEndpoint() throws URISyntaxException {
        return getEndPoint(TokenOIDCEndpoint.HINT);
    }
    
    public Endpoint getUserInfoOIDCEndpoint() throws URISyntaxException {
        return getEndPoint(UserInfoOIDCEndpoint.HINT);
    }
    
    public Endpoint getLogoutOIDCEndpoint() throws URISyntaxException {
        return getEndPoint(LogoutOIDCEndpoint.HINT);
    }
    
    public ClientID getClientID() {
        String clientId = getProperty(PROP_CLIENTID, String.class);
        return new ClientID(clientId != null ? clientId : this.instance.getInstanceId().getInstanceId());
    }
    
    public Secret getSecret() {
        String secret = getProperty(PROP_SECRET, String.class);
        if (StringUtils.isBlank(secret)) {
            return null;
        }
         else {
            return new Secret(secret);
        }
        
    }
    
    public ClientAuthenticationMethod getTokenEndPointAuthMethod() {
        String authMethod = getProperty(PROP_ENDPOINT_TOKEN_AUTH_METHOD, String.class);
        if ("client_secret_post".equalsIgnoreCase(authMethod)) {
            return ClientAuthenticationMethod.CLIENT_SECRET_POST;
        }
         else {
            return ClientAuthenticationMethod.CLIENT_SECRET_BASIC;
        }
        
    }
    
    public HTTPRequest.Method getUserInfoEndPointMethod() {
        return getProperty(PROP_ENDPOINT_USERINFO_METHOD, HTTPRequest.Method.GET);
    }
    
    public HTTPRequest.Method getLogoutEndPointMethod() {
        return getProperty(PROP_ENDPOINT_LOGOUT_METHOD, HTTPRequest.Method.GET);
    }
    
    public String getSessionState() {
        return getSessionAttribute(PROP_STATE);
    }
    
    public boolean isSkipped() {
        return getProperty(PROP_SKIPPED, false);
    }
    
    public OIDCClaimsRequest getClaimsRequest() {
        OIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();
        List<String> idtokenclaims = getIDTokenClaims();
        if (idtokenclaims != null && !idtokenclaims.isEmpty()) {
            ClaimsSetRequest idtokenclaimsRequest = new ClaimsSetRequest();
            for (String claim : idtokenclaims) {
                idtokenclaimsRequest.add(claim);
            }
            
            claimsRequest.withIDTokenClaimsRequest(idtokenclaimsRequest);
        }
        
        List<String> userinfoclaims = getUserInfoClaims();
        if (userinfoclaims != null && !userinfoclaims.isEmpty()) {
            ClaimsSetRequest userinfoclaimsRequest = new ClaimsSetRequest();
            for (String claim : userinfoclaims) {
                userinfoclaimsRequest.add(claim);
            }
            
            claimsRequest.withUserInfoClaimsRequest(userinfoclaimsRequest);
        }
        
        return claimsRequest;
    }
    
    public List<String> getIDTokenClaims() {
        return getProperty(PROP_IDTOKENCLAIMS, DEFAULT_IDTOKENCLAIMS);
    }
    
    public List<String> getUserInfoClaims() {
        return getProperty(PROP_USERINFOCLAIMS, DEFAULT_USERINFOCLAIMS);
    }
    
    public int getUserInfoRefreshRate() {
        return getProperty(PROP_USERINFOREFRESHRATE, 600000);
    }
    
    public Scope getScope() {
        List<String> scopeValues = getProperty(PROP_SCOPE, List.class);
        if (CollectionUtils.isEmpty(scopeValues)) {
            return new Scope(OIDCScopeValue.OPENID, OIDCScopeValue.PROFILE, OIDCScopeValue.EMAIL, OIDCScopeValue.ADDRESS, OIDCScopeValue.PHONE);
        }
        
        return new Scope(scopeValues.toArray(new String[0]));
    }
    
    public GroupMapping getGroupMapping() {
        List<String> groupsMapping = getProperty(PROP_GROUPS_MAPPING, List.class);
        GroupMapping groups;
        if (groupsMapping != null && !groupsMapping.isEmpty()) {
            groups = new GroupMapping(groupsMapping.size());
            for (String groupMapping : groupsMapping) {
                int index = groupMapping.indexOf('=');
                if (index != -1) {
                    String xwikiGroup = toXWikiGroup(groupMapping.substring(0, index));
                    String providerGroup = groupMapping.substring(index + 1);
                    Set<String> providerGroups = groups.xwikiMapping.computeIfAbsent(xwikiGroup, k -> new HashSet<>());
                    providerGroups.add(providerGroup);
                    Set<String> xwikiGroups = groups.providerMapping.computeIfAbsent(providerGroup, k -> new HashSet<>());
                    xwikiGroups.add(xwikiGroup);
                }
                
            }
            
        }
         else {
            groups = null;
        }
        
        return groups;
    }
    
    public String toXWikiGroup(String group) {
        return group.startsWith(XWIKI_GROUP_PREFIX) ? group : XWIKI_GROUP_PREFIX + group;
    }
    
    public List<String> getAllowedGroups() {
        List<String> groups = getProperty(PROP_GROUPS_ALLOWED, List.class);
        return groups != null && !groups.isEmpty() ? groups : null;
    }
    
    public List<String> getForbiddenGroups() {
        List<String> groups = getProperty(PROP_GROUPS_FORBIDDEN, List.class);
        return groups != null && !groups.isEmpty() ? groups : null;
    }
    
    public String getGroupPrefix() {
        String groupPrefix = getProperty(PROP_GROUPS_PREFIX, String.class);
        return groupPrefix != null && !groupPrefix.isEmpty() ? groupPrefix : null;
    }
    
    public String getGroupSeparator() {
        return getProperty(PROP_GROUPS_SEPARATOR, String.class);
    }
    
    public Date removeUserInfoExpirationDate() {
        return removeSessionAttribute(PROP_SESSION_USERINFO_EXPORATIONDATE);
    }
    
    public void setUserInfoExpirationDate(Date date) {
        setSessionAttribute(PROP_SESSION_USERINFO_EXPORATIONDATE, date);
    }
    
    public void resetUserInfoExpirationDate() {
        LocalDateTime expiration = LocalDateTime.now().plusMillis(getUserInfoRefreshRate());
        setUserInfoExpirationDate(expiration.toDate());
    }
    
    public BearerAccessToken getAccessToken() {
        return getSessionAttribute(PROP_SESSION_ACCESSTOKEN);
    }
    
    public void setAccessToken(BearerAccessToken accessToken) {
        setSessionAttribute(PROP_SESSION_ACCESSTOKEN, accessToken);
    }
    
    public IDTokenClaimsSet getIdToken() {
        return getSessionAttribute(PROP_SESSION_IDTOKEN);
    }
    
    public void setIdToken(IDTokenClaimsSet idToken) {
        setSessionAttribute(PROP_SESSION_IDTOKEN, idToken);
    }
    
    public URI getSuccessRedirectURI() {
        URI uri = getSessionAttribute(PROP_INITIAL_REQUEST);
        if (uri == null) {
        }
        
        return uri;
    }
    
    public void setSuccessRedirectURI(URI uri) {
        setSessionAttribute(PROP_INITIAL_REQUEST, uri);
    }
    
    public boolean isGroupSync() {
        String groupClaim = getGroupClaim();
        return getUserInfoClaims().contains(groupClaim);
    }
    
}


