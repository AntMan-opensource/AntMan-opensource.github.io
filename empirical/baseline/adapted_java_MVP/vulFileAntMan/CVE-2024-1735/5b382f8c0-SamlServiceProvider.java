package com.linecorp.armeria.server.saml;
import static java.util.Objects.requireNonNull;
import java.util.Collection;
import java.util.Map;
import java.util.function.Function;
import org.opensaml.security.credential.Credential;
import org.opensaml.xmlsec.signature.support.SignatureConstants;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.linecorp.armeria.common.HttpRequest;
import com.linecorp.armeria.common.SessionProtocol;
import com.linecorp.armeria.common.annotation.Nullable;
import com.linecorp.armeria.server.HttpService;
import com.linecorp.armeria.server.HttpServiceWithRoutes;
import com.linecorp.armeria.server.Route;
import com.linecorp.armeria.server.Server;
import com.linecorp.armeria.server.auth.Authorizer;
public final class SamlServiceProvider {
    public static SamlServiceProviderBuilder builder() {
        return new SamlServiceProviderBuilder();
    }
    
    private final Authorizer<HttpRequest> authorizer;
    private final String entityId;
    private final String hostname;
    private final Credential signingCredential;
    private final Credential encryptionCredential;
    private final String signatureAlgorithm;
    private final SamlPortConfigAutoFiller portConfigAutoFiller;
    private final Route metadataRoute;
    private final Map<String, SamlIdentityProviderConfig> idpConfigs;
    private final SamlIdentityProviderConfig defaultIdpConfig;
    private final SamlIdentityProviderConfigSelector idpConfigSelector;
    private final Collection<SamlAssertionConsumerConfig> acsConfigs;
    private final SamlAssertionConsumerConfig defaultAcsConfig;
    private final Collection<SamlEndpoint> sloEndpoints;
    private final SamlRequestIdManager requestIdManager;
    private final SamlSingleSignOnHandler ssoHandler;
    private final SamlSingleLogoutHandler sloHandler;
    SamlServiceProvider(Authorizer<HttpRequest> authorizer, String entityId, @Nullable String hostname, Credential signingCredential, Credential encryptionCredential, String signatureAlgorithm, SamlPortConfigAutoFiller portConfigAutoFiller, String metadataPath, Map<String, SamlIdentityProviderConfig> idpConfigs, @Nullable SamlIdentityProviderConfig defaultIdpConfig, SamlIdentityProviderConfigSelector idpConfigSelector, Collection<SamlAssertionConsumerConfig> acsConfigs, Collection<SamlEndpoint> sloEndpoints, SamlRequestIdManager requestIdManager, SamlSingleSignOnHandler ssoHandler, SamlSingleLogoutHandler sloHandler) {
        this.authorizer = requireNonNull(authorizer, "authorizer");
        this.entityId = requireNonNull(entityId, "entityId");
        this.hostname = hostname;
        this.signingCredential = requireNonNull(signingCredential, "signingCredential");
        this.encryptionCredential = requireNonNull(encryptionCredential, "encryptionCredential");
        this.signatureAlgorithm = requireNonNull(signatureAlgorithm, "signatureAlgorithm");
        this.portConfigAutoFiller = requireNonNull(portConfigAutoFiller, "portConfigAutoFiller");
        metadataRoute = Route.builder().exact(requireNonNull(metadataPath, "metadataPath")).build();
        this.idpConfigs = ImmutableMap.copyOf(requireNonNull(idpConfigs, "idpConfigs"));
        this.defaultIdpConfig = defaultIdpConfig;
        this.idpConfigSelector = requireNonNull(idpConfigSelector, "idpConfigSelector");
        this.acsConfigs = ImmutableList.copyOf(requireNonNull(acsConfigs, "acsConfigs"));
        this.sloEndpoints = ImmutableList.copyOf(requireNonNull(sloEndpoints, "sloEndpoints"));
        this.requestIdManager = requireNonNull(requestIdManager, "requestIdManager");
        this.ssoHandler = requireNonNull(ssoHandler, "ssoHandler");
        this.sloHandler = requireNonNull(sloHandler, "sloHandler");
        defaultAcsConfig = acsConfigs.stream().filter(SamlAssertionConsumerConfig::isDefault).findFirst() .orElseThrow(() -> new IllegalArgumentException( "no default assertion consumer config"));
    }
    
    Authorizer<HttpRequest> authorizer() {
        return authorizer;
    }
    
    String entityId() {
        return entityId;
    }
    
    @Nullable
    String hostname() {
        return hostname;
    }
    
    Credential signingCredential() {
        return signingCredential;
    }
    
    Credential encryptionCredential() {
        return encryptionCredential;
    }
    
    String signatureAlgorithm() {
        return signatureAlgorithm;
    }
    
    SamlPortConfigAutoFiller portConfigAutoFiller() {
        return portConfigAutoFiller;
    }
    
    Route metadataRoute() {
        return metadataRoute;
    }
    
    Map<String, SamlIdentityProviderConfig> idpConfigs() {
        return idpConfigs;
    }
    
    @Nullable
    SamlIdentityProviderConfig defaultIdpConfig() {
        return defaultIdpConfig;
    }
    
    SamlIdentityProviderConfigSelector idpConfigSelector() {
        return idpConfigSelector;
    }
    
    Collection<SamlAssertionConsumerConfig> acsConfigs() {
        return acsConfigs;
    }
    
    SamlAssertionConsumerConfig defaultAcsConfig() {
        return defaultAcsConfig;
    }
    
    Collection<SamlEndpoint> sloEndpoints() {
        return sloEndpoints;
    }
    
    SamlRequestIdManager requestIdManager() {
        return requestIdManager;
    }
    
    SamlSingleSignOnHandler ssoHandler() {
        return ssoHandler;
    }
    
    SamlSingleLogoutHandler sloHandler() {
        return sloHandler;
    }
    
    public Function<? super HttpService, ? extends HttpService> newSamlDecorator() {
        return delegate -> new SamlDecorator(this, delegate);
    }
    
    public HttpServiceWithRoutes newSamlService() {
        return new SamlService(this);
    }
    
}


