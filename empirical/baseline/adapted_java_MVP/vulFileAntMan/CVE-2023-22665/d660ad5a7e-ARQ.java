package org.apache.jena.query;
import org.apache.jena.http.sys.HttpRequestModifier;
import org.apache.jena.http.sys.RegistryRequestModifier;
import org.apache.jena.riot.RIOT;
import org.apache.jena.riot.resultset.ResultSetLang;
import org.apache.jena.riot.system.RiotLib;
import org.apache.jena.sparql.ARQConstants;
import org.apache.jena.sparql.SystemARQ;
import org.apache.jena.sparql.algebra.optimize.TransformOrderByDistinctApplication;
import org.apache.jena.sparql.core.assembler.AssemblerUtils;
import org.apache.jena.sparql.exec.http.QuerySendMode;
import org.apache.jena.sparql.expr.aggregate.AggregateRegistry;
import org.apache.jena.sparql.function.FunctionRegistry;
import org.apache.jena.sparql.mgt.ARQMgt;
import org.apache.jena.sparql.mgt.Explain;
import org.apache.jena.sparql.mgt.Explain.InfoLevel;
import org.apache.jena.sparql.mgt.SystemInfo;
import org.apache.jena.sparql.pfunction.PropertyFunctionRegistry;
import org.apache.jena.sparql.service.ServiceExecutorRegistry;
import org.apache.jena.sparql.util.Context;
import org.apache.jena.sparql.util.MappingRegistry;
import org.apache.jena.sparql.util.Symbol;
import org.apache.jena.sys.JenaSystem;
import org.apache.jena.util.Metadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class ARQ {
    private static volatile boolean initialized = false;
    private static final Object initLock = new Object();
    public static final String logExecName = "org.apache.jena.arq.exec";
    public static final String logInfoName = "org.apache.jena.arq.info";
    private static final Logger logInfo = LoggerFactory.getLogger(logInfoName);
    public static final String logHttpRequestName = "org.apache.jena.arq.service";
    private static final Logger logExec = LoggerFactory.getLogger(logExecName);
    private static final Logger logHttpRequest = LoggerFactory.getLogger(logHttpRequestName);
    public static Logger getExecLogger() { return logExec; }
    public static Logger getInfoLogger() { return logInfo; }
    public static Logger getHttpRequestLogger() { return logHttpRequest; }
    public static final Symbol symLogExec           = SystemARQ.allocSymbol("logExec");
    public static Explain.InfoLevel getExecutionLogging() { return ARQ.getContext().get(ARQ.symLogExec); }
    public static void setExecutionLogging(Explain.InfoLevel infoLevel) {
        if ( InfoLevel.NONE.equals(infoLevel) ) {
            ARQ.getContext().unset(ARQ.symLogExec);
            return;
        }
        
        ARQ.getContext().set(ARQ.symLogExec, infoLevel);
    }
    
    public static final String arqIRI = "http://jena.hpl.hp.com/#arq";
    public static final String arqParamNS = "http://jena.apache.org/ARQ#";
    public static final String arqSymbolPrefix = "arq";
    public static final Symbol strictSPARQL = SystemARQ.allocSymbol("strictSPARQL");
    public static final Symbol constantBNodeLabels = SystemARQ.allocSymbol("constantBNodeLabels");
    public static final Symbol enablePropertyFunctions = SystemARQ.allocSymbol("enablePropertyFunctions");
    public static final Symbol enableExecutionTimeLogging = SystemARQ.allocSymbol("enableExecutionTimeLogging");
    public static final Symbol outputGraphBNodeLabels = SystemARQ.allocSymbol("outputGraphBNodeLabels");
    public static final Symbol inputGraphBNodeLabels = SystemARQ.allocSymbol("inputGraphBNodeLabels");
    public static void enableBlankNodeResultLabels() { enableBlankNodeResultLabels(true); }
    public static void enableBlankNodeResultLabels(boolean val) {
        Boolean b = val;
        getContext().set(inputGraphBNodeLabels, b);
        getContext().set(outputGraphBNodeLabels, b);
    }
    
    public static final Symbol queryTimeout = SystemARQ.allocSymbol("queryTimeout");
    public static final Symbol stageGenerator = SystemARQ.allocSymbol("stageGenerator");
    public static final Symbol hideNonDistiguishedVariables = SystemARQ.allocSymbol("hideNonDistiguishedVariables");
    public static final Symbol useSAX = SystemARQ.allocSymbol("useSAX");
    public static final boolean allowDuplicateSelectColumns = false;
    public static final Symbol regexImpl =  SystemARQ.allocSymbol("regexImpl");
    public static final Symbol javaRegex =  SystemARQ.allocSymbol("javaRegex");
    public static final Symbol xercesRegex =  SystemARQ.allocSymbol("xercesRegex");
    public static final Symbol serviceParams = SystemARQ.allocSymbol("serviceParams");
    public static final Symbol httpServiceSendMode = SystemARQ.allocSymbol("httpServiceSendMode");
    public static final Symbol httpRegistryRequestModifer = SystemARQ.allocSymbol("httpRegistryRequestModifer");
    public static final Symbol httpRequestModifer = SystemARQ.allocSymbol("httpRequestModifer");
    public static final Symbol httpServiceAllowed = SystemARQ.allocSymbol("httpServiceAllowed");
    public static final Symbol httpQueryClient       = SystemARQ.allocSymbol("httpQueryClient");
    public static final Symbol httpServiceContext    = SystemARQ.allocSymbol("httpServiceContext");
    public static final Symbol httpQueryTimeout      = SystemARQ.allocSymbol("httpQueryTimeout");
    public static final Symbol fixupUndefinedPrefixes   = SystemARQ.allocSymbol("fixupPrefixes");
    public static final Symbol spillToDiskThreshold = SystemARQ.allocSymbol("spillToDiskThreshold");
    public static void enableOptimizer(boolean state) {
        enableOptimizer(ARQ.getContext(), state);
    }
    
    public static void enableOptimizer(Context context, boolean state) {
        context.set(ARQ.optimization, state);
    }
    
    public static final Symbol optimization = SystemARQ.allocSymbol("optimization");
    public static final Symbol optPathFlatten = SystemARQ.allocSymbol("optPathFlatten");
    public static final Symbol optPathFlattenAlgebra = SystemARQ.allocSymbol("optPathFlattenAlgebra");
    public static final Symbol optFilterPlacement = SystemARQ.allocSymbol("optFilterPlacement");
    public static final Symbol optFilterPlacementBGP = SystemARQ.allocSymbol("optFilterPlacementBGP");
    public static final Symbol optFilterPlacementConservative = SystemARQ.allocSymbol("optFilterPlacementConservative");
    public static final Symbol optTopNSorting = SystemARQ.allocSymbol("optTopNSorting");
    public static final Symbol topNSortingThreshold = SystemARQ.allocSymbol("topNSortingThreshold");
    public static final Symbol optDistinctToReduced = SystemARQ.allocSymbol("optDistinctToReduced");
    public static final Symbol optOrderByDistinctApplication = SystemARQ.allocSymbol("optOrderByDistinctApplication");
    public static final Symbol optFilterEquality = SystemARQ.allocSymbol("optFilterEquality");
    public static final Symbol optFilterInequality = SystemARQ.allocSymbol("optFilterInequality");
    public static final Symbol optFilterImplicitJoin = SystemARQ.allocSymbol("optFilterImplicitJoin");
    public static final Symbol optImplicitLeftJoin = SystemARQ.allocSymbol("optImplicitLeftJoin");
    public static final Symbol optExprConstantFolding = SystemARQ.allocSymbol("optExprConstantFolding");
    public static final Symbol optFilterConjunction = SystemARQ.allocSymbol("optFilterConjunction");
    public static final Symbol optFilterExpandOneOf = SystemARQ.allocSymbol("optFilterExpandOneOf");
    public static final Symbol optFilterDisjunction = SystemARQ.allocSymbol("optFilterDisjunction");
    public static final Symbol optPromoteTableEmpty = SystemARQ.allocSymbol("optPromoteTableEmpty");
    public static final Symbol optIndexJoinStrategy = SystemARQ.allocSymbol("optIndexJoinStrategy");
    public static final Symbol optInlineAssignments = SystemARQ.allocSymbol("optInlineAssignments");
    public static final Symbol optInlineAssignmentsAggressive = SystemARQ.allocSymbol("optInlineAssignmentsAggressive");
    public static final Symbol optMergeBGPs = SystemARQ.allocSymbol("optMergeBGPs");
    public static final Symbol optMergeExtends = SystemARQ.allocSymbol("optMergeExtends");
    public static final Symbol optReorderBGP = SystemARQ.allocSymbol("optReorderBGP");
    public static final Symbol propertyFunctions = SystemARQ.allocSymbol("propertyFunctions");
    public static final Symbol extensionValueTypes = SystemARQ.allocSymbol("extensionValueTypesExpr");
    public static Symbol symJavaScriptFunctions = SystemARQ.allocSymbol("js-functions");
    public static Symbol symJavaScriptLibFile = SystemARQ.allocSymbol("js-library");
    public static final Symbol generateToList = SystemARQ.allocSymbol("generateToList");
    public static void setStrictMode() { setStrictMode(ARQ.getContext()); }
    public static void setStrictMode(Context context) {
        SystemARQ.StrictDateTimeFO      = true;
        SystemARQ.ValueExtensions       = false;
        SystemARQ.EnableRomanNumerals   = false;
        context.set(optimization,                   false);
        context.set(hideNonDistiguishedVariables,   true);
        context.set(strictSPARQL,                   true);
        context.set(enablePropertyFunctions,        false);
        context.set(extensionValueTypes,            false);
        context.set(constantBNodeLabels,            false);
        context.set(generateToList,                 true);
        context.set(regexImpl,                      xercesRegex);
    }
    
    public static boolean isStrictMode()       { return ARQ.getContext().isTrue(strictSPARQL); }
    public static void setNormalMode() {
        SystemARQ.StrictDateTimeFO      = false;
        SystemARQ.ValueExtensions       = true;
        SystemARQ.EnableRomanNumerals   = false;
        setNormalMode(ARQ.getContext());
    }
    
    public static void setNormalMode(Context context) {
        context.set(optimization,                   true);
        context.set(hideNonDistiguishedVariables,   false);
        context.set(strictSPARQL,                   false);
        context.set(enablePropertyFunctions,        true);
        context.set(extensionValueTypes,            true);
        context.set(constantBNodeLabels,            true);
        context.set(generateToList,                 false);
        context.set(regexImpl,                      javaRegex);
    }
    
    public static final String PATH         = "org.apache.jena.arq";
    static private String metadataLocation  = "org/apache/jena/arq/arq-properties.xml";
    static private Metadata metadata        = new Metadata(metadataLocation);
    public static final String NAME         = "ARQ";
    public static final String VERSION      = metadata.get(PATH+".version", "unknown");
    public static final String BUILD_DATE   = metadata.get(PATH+".build.datetime", "unset");
    public static void init() {
        if ( initialized ){
            return;
}
        synchronized(initLock) {
            if ( initialized ){
                return;
}
            initialized = true;
            JenaSystem.logLifecycle("ARQ.init - start");
            RIOT.init();
            ARQConstants.init();
            setARQSettings();
            ARQConstants.getGlobalPrefixMap();
            ResultSetLang.init();
            ARQMgt.init();         
            MappingRegistry.addPrefixMapping(ARQ.arqSymbolPrefix, ARQ.arqParamNS);
            SystemInfo sysInfo = new SystemInfo(ARQ.arqIRI, ARQ.PATH, ARQ.VERSION, ARQ.BUILD_DATE);
            SystemARQ.registerSubSystem(sysInfo);
            AssemblerUtils.init();
            RIOT.register();
            FunctionRegistry.init();
            ServiceExecutorRegistry.init();
            AggregateRegistry.init();
            PropertyFunctionRegistry.init();
            JenaSystem.logLifecycle("ARQ.init - finish");
        }
        
    }
    
    private static void setARQSettings() {
        SystemARQ.StrictDateTimeFO      = false;
        SystemARQ.ValueExtensions       = true;
        SystemARQ.EnableRomanNumerals   = false;
        Context context = RIOT.getContext();
        context.unset(optimization);
        context.set(strictSPARQL,                  false);
        context.set(constantBNodeLabels,           true);
        context.set(enablePropertyFunctions,       true);
        context.set(regexImpl,                     javaRegex);
    }
    
    public static Context getContext() {
        return RIOT.getContext();
    }
    
    public static void set(Symbol symbol, boolean value)  { getContext().set(symbol, value); }
    public static void setTrue(Symbol symbol)             { getContext().setTrue(symbol); }
    public static void setFalse(Symbol symbol)            { getContext().setFalse(symbol); }
    public static void unset(Symbol symbol)               { getContext().unset(symbol); }
    public static boolean isTrue(Symbol symbol)           { return getContext().isTrue(symbol); }
    public static boolean isFalse(Symbol symbol)          { return getContext().isFalse(symbol); }
    public static boolean isTrueOrUndef(Symbol symbol)    { return getContext().isTrueOrUndef(symbol); }
    public static boolean isFalseOrUndef(Symbol symbol)   { return getContext().isFalseOrUndef(symbol); }
}


