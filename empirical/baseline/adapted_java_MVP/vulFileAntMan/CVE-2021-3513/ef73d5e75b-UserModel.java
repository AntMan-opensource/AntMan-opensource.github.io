package org.keycloak.models;
import org.keycloak.provider.ProviderEvent;
import org.keycloak.storage.SearchableModelField;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
public interface UserModel extends RoleMapperModel {
    String USERNAME = "username";
    String FIRST_NAME = "firstName";
    String LAST_NAME = "lastName";
    String EMAIL = "email";
    String EMAIL_VERIFIED = "emailVerified";
    String LOCALE = "locale";
    String ENABLED = "enabled";
    String IDP_ALIAS = "keycloak.session.realm.users.query.idp_alias";
    String IDP_USER_ID = "keycloak.session.realm.users.query.idp_user_id";
    String INCLUDE_SERVICE_ACCOUNT = "keycloak.session.realm.users.query.include_service_account";
    String GROUPS = "keycloak.session.realm.users.query.groups";
    String SEARCH = "keycloak.session.realm.users.query.search";
    String EXACT = "keycloak.session.realm.users.query.exact";
    Comparator<UserModel> COMPARE_BY_USERNAME = Comparator.comparing(UserModel::getUsername, String.CASE_INSENSITIVE_ORDER);
    public static class SearchableFields {
        public static final SearchableModelField<UserModel> ID              = new SearchableModelField<>("id", String.class);
        public static final SearchableModelField<UserModel> REALM_ID        = new SearchableModelField<>("realmId", String.class);
        public static final SearchableModelField<UserModel> USERNAME        = new SearchableModelField<>("username", String.class);
        public static final SearchableModelField<UserModel> FIRST_NAME      = new SearchableModelField<>("firstName", String.class);
        public static final SearchableModelField<UserModel> LAST_NAME       = new SearchableModelField<>("lastName", String.class);
        public static final SearchableModelField<UserModel> EMAIL           = new SearchableModelField<>("email", String.class);
        public static final SearchableModelField<UserModel> ENABLED         = new SearchableModelField<>("enabled", Boolean.class);
        public static final SearchableModelField<UserModel> EMAIL_VERIFIED  = new SearchableModelField<>("emailVerified", Boolean.class);
        public static final SearchableModelField<UserModel> FEDERATION_LINK = new SearchableModelField<>("federationLink", String.class);
        public static final SearchableModelField<UserModel> IDP_AND_USER    = new SearchableModelField<>("idpAlias:idpUserId", String.class);
        public static final SearchableModelField<UserModel> ASSIGNED_ROLE   = new SearchableModelField<>("assignedRole", String.class);
        public static final SearchableModelField<UserModel> ASSIGNED_GROUP  = new SearchableModelField<>("assignedGroup", String.class);
        public static final SearchableModelField<UserModel> CONSENT_FOR_CLIENT = new SearchableModelField<>("clientConsent", String.class);
        public static final SearchableModelField<UserModel> CONSENT_CLIENT_FEDERATION_LINK = new SearchableModelField<>("clientConsentFederationLink", String.class);
        public static final SearchableModelField<UserModel> CONSENT_WITH_CLIENT_SCOPE = new SearchableModelField<>("consentWithClientScope", String.class);
        public static final SearchableModelField<UserModel> SERVICE_ACCOUNT_CLIENT = new SearchableModelField<>("serviceAccountClientId", String.class);
        public static final SearchableModelField<UserModel> ATTRIBUTE       = new SearchableModelField<>("attribute", String[].class);
    }
    
    interface UserRemovedEvent extends ProviderEvent {
        RealmModel getRealm();
        UserModel getUser();
        KeycloakSession getKeycloakSession();
    }
    
    String getId();
    String getUsername();
    void setUsername(String username);
    Long getCreatedTimestamp();
    void setCreatedTimestamp(Long timestamp);
    boolean isEnabled();
    void setEnabled(boolean enabled);
    void setSingleAttribute(String name, String value);
    void setAttribute(String name, List<String> values);
    void removeAttribute(String name);
    String getFirstAttribute(String name);
    @Deprecated
    List<String> getAttribute(String name);
    default Stream<String> getAttributeStream(final String name) {
        List<String> value = this.getAttribute(name);
        return value != null ? value.stream() : Stream.empty();
    }
    
    Map<String, List<String>> getAttributes();
    @Deprecated
    Set<String> getRequiredActions();
    default Stream<String> getRequiredActionsStream() {
        Set<String> value = this.getRequiredActions();
        return value != null ? value.stream() : Stream.empty();
    }
    
    void addRequiredAction(String action);
    void removeRequiredAction(String action);
    default void addRequiredAction(RequiredAction action) {
        if (action == null) return;
        String actionName = action.name();
        addRequiredAction(actionName);
    }
    
    default void removeRequiredAction(RequiredAction action) {
        if (action == null) return;
        String actionName = action.name();
        removeRequiredAction(actionName);
    }
    
    String getFirstName();
    void setFirstName(String firstName);
    String getLastName();
    void setLastName(String lastName);
    String getEmail();
    void setEmail(String email);
    boolean isEmailVerified();
    void setEmailVerified(boolean verified);
    @Deprecated
    Set<GroupModel> getGroups();
    default Stream<GroupModel> getGroupsStream() {
        Set<GroupModel> value = this.getGroups();
        return value != null ? value.stream() : Stream.empty();
    }
    
    @Deprecated
    default Set<GroupModel> getGroups(int first, int max) {
        return getGroupsStream(null, first, max).collect(Collectors.toSet());
    }
    
    @Deprecated
    default Set<GroupModel> getGroups(String search, int first, int max) {
        return getGroupsStream(search, first, max) .collect(Collectors.toCollection(LinkedHashSet::new));
    }
    
    default Stream<GroupModel> getGroupsStream(String search, Integer first, Integer max) {
        if (search != null) search = search.toLowerCase();
        final String finalSearch = search;
        Stream<GroupModel> groupModelStream = getGroupsStream() .filter(group -> finalSearch == null || group.getName().toLowerCase().contains(finalSearch));
        if (first != null && first > 0) {
            groupModelStream = groupModelStream.skip(first);
        }
        
        if (max != null && max >= 0) {
            groupModelStream = groupModelStream.limit(max);
        }
        
        return groupModelStream;
    }
    
    default long getGroupsCount() {
        return getGroupsCountByNameContaining(null);
    }
    
    default long getGroupsCountByNameContaining(String search) {
        if (search == null) {
            return getGroupsStream().count();
        }
        
        String s = search.toLowerCase();
        return getGroupsStream().filter(group -> group.getName().toLowerCase().contains(s)).count();
    }
    
    void joinGroup(GroupModel group);
    void leaveGroup(GroupModel group);
    boolean isMemberOf(GroupModel group);
    String getFederationLink();
    void setFederationLink(String link);
    String getServiceAccountClientLink();
    void setServiceAccountClientLink(String clientInternalId);
    enum RequiredAction {
        VERIFY_EMAIL, UPDATE_PROFILE, CONFIGURE_TOTP, UPDATE_PASSWORD, TERMS_AND_CONDITIONS }
    interface Streams extends UserModel, RoleMapperModel.Streams {
        @Override
        default List<String> getAttribute(String name) {
            return this.getAttributeStream(name).collect(Collectors.toList());
        }
        
        @Override
        Stream<String> getAttributeStream(final String name);
        @Override
        default Set<String> getRequiredActions() {
            return this.getRequiredActionsStream().collect(Collectors.toSet());
        }
        
        @Override
        Stream<String> getRequiredActionsStream();
        @Override
        default Set<GroupModel> getGroups() {
            return this.getGroupsStream().collect(Collectors.toSet());
        }
        
        @Override
        Stream<GroupModel> getGroupsStream();
    }
    
}


