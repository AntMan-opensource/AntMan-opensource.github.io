package org.keycloak.authentication.authenticators.x509;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import javax.ws.rs.core.MultivaluedHashMap;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import org.keycloak.authentication.AuthenticationFlowContext;
import org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator;
import org.keycloak.events.Details;
import org.keycloak.events.Errors;
import org.keycloak.forms.login.LoginFormsProvider;
import org.keycloak.models.ModelDuplicateException;
import org.keycloak.models.UserModel;
import org.keycloak.models.utils.FormMessage;
public class X509ClientCertificateAuthenticator extends AbstractX509ClientCertificateAuthenticator {
    public void close() {
    }
    
    public void authenticate(AuthenticationFlowContext context) {
        try {
            dumpContainerAttributes(context);
            X509Certificate[] certs = getCertificateChain(context);
            if (certs == null || certs.length == 0) {
                logger.debug("[X509ClientCertificateAuthenticator:authenticate] x509 client certificate is not available for mutual SSL.");
                context.attempted();
                return;
            }
            
            saveX509CertificateAuditDataToAuthSession(context, certs[0]);
            recordX509CertificateAuditDataViaContextEvent(context);
            X509AuthenticatorConfigModel config = null;
            if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {
                config = new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());
            }
            
            if (config == null) {
                logger.warn("[X509ClientCertificateAuthenticator:authenticate] x509 Client Certificate Authentication configuration is not available.");
                context.challenge(createInfoResponse(context, "X509 client authentication has not been configured yet"));
                context.attempted();
                return;
            }
            
            try {
                CertificateValidator.CertificateValidatorBuilder builder = certificateValidationParameters(context.getSession(), config);
                CertificateValidator validator = builder.build(certs);
                validator.checkRevocationStatus() .validateKeyUsage() .validateExtendedKeyUsage() .validateTimestamps();
            }
             catch(Exception e) {
                logger.error(e.getMessage(), e);
                String errorMessage = "Certificate validation's failed.";
                context.challenge(createErrorResponse(context, certs[0].getSubjectDN().getName(), errorMessage, e.getMessage()));
                context.attempted();
                return;
            }
            
            Object userIdentity = getUserIdentityExtractor(config).extractUserIdentity(certs);
            if (userIdentity == null) {
                context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);
                logger.warnf("[X509ClientCertificateAuthenticator:authenticate] Unable to extract user identity from certificate.");
                String errorMessage = "Unable to extract user identity from specified certificate";
                context.challenge(createErrorResponse(context, certs[0].getSubjectDN().getName(), errorMessage));
                context.attempted();
                return;
            }
            
            UserModel user;
            try {
                context.getEvent().detail(Details.USERNAME, userIdentity.toString());
                context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME, userIdentity.toString());
                user = getUserIdentityToModelMapper(config).find(context, userIdentity);
            }
            
            catch(ModelDuplicateException e) {
                logger.modelDuplicateException(e);
                String errorMessage = "X509 certificate authentication's failed.";
                context.challenge(createErrorResponse(context, certs[0].getSubjectDN().getName(), errorMessage, e.getMessage()));
                context.attempted();
                return;
            }
            
            if (invalidUser(context, user)) {
                String errorMessage = "X509 certificate authentication's failed.";
                context.challenge(createErrorResponse(context, certs[0].getSubjectDN().getName(), errorMessage, "Invalid user"));
                context.attempted();
                return;
            }
            
            if (!userEnabled(context, user)) {
                String errorMessage = "X509 certificate authentication's failed.";
                context.challenge(createErrorResponse(context, certs[0].getSubjectDN().getName(), errorMessage, "User is disabled"));
                context.attempted();
                return;
            }
            
            if (context.getRealm().isBruteForceProtected()) {
                if (context.getProtector().isTemporarilyDisabled(context.getSession(), context.getRealm(), user)) {
                    context.getEvent().user(user);
                    context.getEvent().error(Errors.USER_TEMPORARILY_DISABLED);
                    String errorMessage = "X509 certificate authentication's failed.";
                    context.challenge(createErrorResponse(context, certs[0].getSubjectDN().getName(), errorMessage, "User is temporarily disabled. Contact administrator."));
                    context.attempted();
                    return;
                }
                
            }
            
            context.setUser(user);
            if (!config.getConfirmationPageDisallowed()) {
                context.forceChallenge(createSuccessResponse(context, certs[0].getSubjectDN().getName()));
            }
            
            else {
                context.success();
            }
            
        }
        
        catch(Exception e) {
            logger.errorf("[X509ClientCertificateAuthenticator:authenticate] Exception: %s", e.getMessage());
            context.attempted();
        }
        
    }
    
    private Response createErrorResponse(AuthenticationFlowContext context, String subjectDN, String errorMessage, String ... errorParameters) {
        return createResponse(context, subjectDN, false, errorMessage, errorParameters);
    }
    
    private Response createSuccessResponse(AuthenticationFlowContext context, String subjectDN) {
        return createResponse(context, subjectDN, true, null, null);
    }
    
    private Response createResponse(AuthenticationFlowContext context, String subjectDN, boolean isUserEnabled, String errorMessage, Object[] errorParameters) {
        LoginFormsProvider form = context.form();
        if (errorMessage != null && errorMessage.trim().length() > 0) {
            List<FormMessage> errors = new LinkedList<>();
            errors.add(new FormMessage(errorMessage));
            if (errorParameters != null) {
                for (Object errorParameter : errorParameters) {
                    if (errorParameter == null) continue;
                    for (String part : errorParameter.toString().split("\n")) {
                        errors.add(new FormMessage(part));
                    }
                    
                }
                
            }
            
            form.setErrors(errors);
        }
        
        MultivaluedMap<String,String> formData = new MultivaluedHashMap<>();
        formData.add("username", context.getUser() != null ? context.getUser().getUsername() : "unknown user");
        formData.add("subjectDN", subjectDN);
        formData.add("isUserEnabled", String.valueOf(isUserEnabled));
        form.setFormData(formData);
        return form.createX509ConfirmPage();
    }
    
    private void dumpContainerAttributes(AuthenticationFlowContext context) {
        Enumeration<String> attributeNames = context.getHttpRequest().getAttributeNames();
        while(attributeNames.hasMoreElements()) {
            String a = attributeNames.nextElement();
            logger.tracef("[X509ClientCertificateAuthenticator:dumpContainerAttributes] \"%s\"", a);
        }
        
    }
    
    private boolean userEnabled(AuthenticationFlowContext context, UserModel user) {
        if (!user.isEnabled()) {
            context.getEvent().user(user);
            context.getEvent().error(Errors.USER_DISABLED);
            return false;
        }
        
        return true;
    }
    
    private boolean invalidUser(AuthenticationFlowContext context, UserModel user) {
        if (user == null) {
            context.getEvent().error(Errors.USER_NOT_FOUND);
            return true;
        }
        
        return false;
    }
    
    public void action(AuthenticationFlowContext context) {
        MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();
        if (formData.containsKey("cancel")) {
            context.clearUser();
            context.attempted();
            return;
        }
        
        if (context.getUser() != null) {
            recordX509CertificateAuditDataViaContextEvent(context);
            context.success();
            return;
        }
        
        context.attempted();
    }
    
}


