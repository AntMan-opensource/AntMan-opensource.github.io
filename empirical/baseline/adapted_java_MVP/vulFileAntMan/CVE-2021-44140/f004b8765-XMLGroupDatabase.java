package org.apache.wiki.auth.authorize;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wiki.api.core.Engine;
import org.apache.wiki.api.exceptions.NoRequiredPropertyException;
import org.apache.wiki.auth.NoSuchPrincipalException;
import org.apache.wiki.auth.WikiPrincipal;
import org.apache.wiki.auth.WikiSecurityException;
import org.apache.wiki.util.TextUtil;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.security.Principal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;
public class XMLGroupDatabase implements GroupDatabase {
    private static final Logger log = LogManager.getLogger( XMLGroupDatabase.class );
    public static final String    PROP_DATABASE    = "jspwiki.xmlGroupDatabaseFile";
    private static final String   DEFAULT_DATABASE = "groupdatabase.xml";
    private static final String   CREATED          = "created";
    private static final String   CREATOR          = "creator";
    private static final String   GROUP_TAG        = "group";
    private static final String   GROUP_NAME       = "name";
    private static final String   LAST_MODIFIED    = "lastModified";
    private static final String   MODIFIER         = "modifier";
    private static final String   MEMBER_TAG       = "member";
    private static final String   PRINCIPAL        = "principal";
    private static final String  DATE_FORMAT       = "yyyy.MM.dd 'at' HH:mm:ss:SSS z";
    private Document              m_dom;
    private final DateFormat            m_defaultFormat  = DateFormat.getDateTimeInstance();
    private File                  m_file;
    private Engine                m_engine;
    private final Map<String, Group>    m_groups         = new ConcurrentHashMap<>();
    public void delete( final Group group ) throws WikiSecurityException {
        final String index = group.getName();
        final boolean exists = m_groups.containsKey( index );
        if ( !exists ){
            throw new NoSuchPrincipalException( "Not in database: " + group.getName() );
        }
        
        m_groups.remove( index );
        saveDOM();
    }
    
    public Group[] groups() throws WikiSecurityException {
        buildDOM();
        final Collection<Group> groups = m_groups.values();
        return groups.toArray( new Group[0] );
    }
    
    public void initialize( final Engine engine, final Properties props ) throws NoRequiredPropertyException, WikiSecurityException {
        m_engine = engine;
        final File defaultFile;
        if ( engine.getRootPath() == null ) {
            log.warn( "Cannot identify JSPWiki root path" );
            defaultFile = new File( "WEB-INF/" + DEFAULT_DATABASE ).getAbsoluteFile();
        }
         else {
            defaultFile = new File( engine.getRootPath() + "/WEB-INF/" + DEFAULT_DATABASE );
        }
        
        final String file = TextUtil.getStringProperty(props, PROP_DATABASE , defaultFile.getAbsolutePath());
        if ( file == null ) {
            log.warn( "XML group database property " + PROP_DATABASE + " not found; trying " + defaultFile );
            m_file = defaultFile;
        }
         else {
            m_file = new File( file );
        }
        
        log.info( "XML group database at " + m_file.getAbsolutePath() );
        buildDOM();
    }
    
    public void save( final Group group, final Principal modifier ) throws WikiSecurityException {
        if ( group == null || modifier == null ) {
            throw new IllegalArgumentException( "Group or modifier cannot be null." );
        }
        
        checkForRefresh();
        final String index = group.getName();
        final boolean isNew = !( m_groups.containsKey( index ) );
        final Date modDate = new Date( System.currentTimeMillis() );
        if ( isNew ){
            group.setCreated( modDate );
            group.setCreator( modifier.getName() );
        }
        
        group.setModifier( modifier.getName() );
        group.setLastModified( modDate );
        m_groups.put( index, group );
        saveDOM();
    }
    
    private void buildDOM() {
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setValidating( false );
        factory.setExpandEntityReferences( false );
        factory.setIgnoringComments( true );
        factory.setNamespaceAware( false );
        try {
            m_dom = factory.newDocumentBuilder().parse( m_file );
            log.debug( "Database successfully initialized" );
            m_lastModified = m_file.lastModified();
            m_lastCheck    = System.currentTimeMillis();
        }
         catch( final ParserConfigurationException e ) {
            log.error( "Configuration error: " + e.getMessage() );
        }
         catch( final SAXException e ) {
            log.error( "SAX error: " + e.getMessage() );
        }
         catch( final FileNotFoundException e ) {
            log.info( "Group database not found; creating from scratch..." );
        }
         catch( final IOException e ) {
            log.error( "IO error: " + e.getMessage() );
        }
        
        if ( m_dom == null ) {
            try {
                m_dom = factory.newDocumentBuilder().newDocument();
                m_dom.appendChild( m_dom.createElement( "groups" ) );
            }
             catch( final ParserConfigurationException e ) {
                log.fatal( "Could not create in-memory DOM" );
            }
            
        }
        
        if ( m_dom != null ) {
            final NodeList groupNodes = m_dom.getElementsByTagName( GROUP_TAG );
            for( int i = 0; i < groupNodes.getLength(); i++ ) {
                final Element groupNode = (Element) groupNodes.item( i );
                final String groupName = groupNode.getAttribute( GROUP_NAME );
                if ( groupName == null ) {
                    log.warn( "Detected null group name in XMLGroupDataBase. Check your group database." );
                }
                
                else{
                    final Group group = buildGroup( groupNode, groupName );
                    m_groups.put( groupName, group );
                }
                
            }
            
        }
        
    }
    
    private long m_lastCheck;
    private long m_lastModified;
    private void checkForRefresh() {
        final long time = System.currentTimeMillis();
        if( time - m_lastCheck > 60*1000L ) {
            final long lastModified = m_file.lastModified();
            if( lastModified > m_lastModified ) {
                buildDOM();
            }
            
        }
        
    }
    
    private Group buildGroup( final Element groupNode, final String name ) {
        if ( groupNode == null || name == null ) {
            throw new IllegalArgumentException( "DOM element or name cannot be null." );
        }
        
        final Group group = new Group( name, m_engine.getApplicationName() );
        final NodeList members = groupNode.getElementsByTagName( MEMBER_TAG );
        for( int i = 0; i < members.getLength(); i++ ) {
            final Element memberNode = (Element) members.item( i );
            final String principalName = memberNode.getAttribute( PRINCIPAL );
            final Principal member = new WikiPrincipal( principalName );
            group.add( member );
        }
        
        final String creator = groupNode.getAttribute( CREATOR );
        final String created = groupNode.getAttribute( CREATED );
        final String modifier = groupNode.getAttribute( MODIFIER );
        final String modified = groupNode.getAttribute( LAST_MODIFIED );
        try {
            group.setCreated( new SimpleDateFormat( DATE_FORMAT ).parse( created ) );
            group.setLastModified( new SimpleDateFormat( DATE_FORMAT ).parse( modified ) );
        }
         catch ( final ParseException e ) {
            try {
                group.setCreated( m_defaultFormat.parse( created ) );
                group.setLastModified( m_defaultFormat.parse( modified ) );
            }
             catch ( final ParseException e2 ) {
                log.warn( "Could not parse 'created' or 'lastModified' " + "attribute for " + " group'" + group.getName() + "'." + " It may have been tampered with." );
            }
            
        }
        
        group.setCreator( creator );
        group.setModifier( modifier );
        return group;
    }
    
    private void saveDOM() throws WikiSecurityException {
        if ( m_dom == null ) {
            log.fatal( "Group database doesn't exist in memory." );
        }
        
        final File newFile = new File( m_file.getAbsolutePath() + ".new" );
        try( final BufferedWriter io = new BufferedWriter( new OutputStreamWriter( new FileOutputStream( newFile ), StandardCharsets.UTF_8 ) ) ) {              io.write( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" );
            io.write( "<groups>\n" );
            for( final Group group : m_groups.values() ) {
                io.write( "  <" + GROUP_TAG + " " );
                io.write( GROUP_NAME );
                io.write( "=\"" + StringEscapeUtils.escapeXml11( group.getName() )+ "\" " );
                io.write( CREATOR );
                io.write( "=\"" + StringEscapeUtils.escapeXml11( group.getCreator() ) + "\" " );
                io.write( CREATED );
                io.write( "=\"" + new SimpleDateFormat( DATE_FORMAT ).format( group.getCreated() ) + "\" " );
                io.write( MODIFIER );
                io.write( "=\"" + group.getModifier() + "\" " );
                io.write( LAST_MODIFIED );
                io.write( "=\"" + new SimpleDateFormat( DATE_FORMAT ).format( group.getLastModified() ) + "\"" );
                io.write( ">\n" );
                for( final Principal member : group.members() ) {
                    io.write( "    <" + MEMBER_TAG + " " );
                    io.write( PRINCIPAL );
                    io.write( "=\"" + StringEscapeUtils.escapeXml11(member.getName()) + "\" " );
                    io.write( "/>\n" );
                }
                
                io.write( "  </" + GROUP_TAG + ">\n" );
            }
            
            io.write( "</groups>" );
        }
         catch( final IOException e ) {
            throw new WikiSecurityException( e.getLocalizedMessage(), e );
        }
        
        final File backup = new File( m_file.getAbsolutePath() + ".old" );
        if ( backup.exists() && !backup.delete()) {
            log.error( "Could not delete old group database backup: " + backup );
        }
        
        if ( !m_file.renameTo( backup ) ) {
            log.error( "Could not create group database backup: " + backup );
        }
        
        if ( !newFile.renameTo( m_file ) ) {
            log.error( "Could not save database: " + backup + " restoring backup." );
            if ( !backup.renameTo( m_file ) ) {
                log.error( "Restore failed. Check the file permissions." );
            }
            
            log.error( "Could not save database: " + m_file + ". Check the file permissions" );
        }
        
    }
    
}


