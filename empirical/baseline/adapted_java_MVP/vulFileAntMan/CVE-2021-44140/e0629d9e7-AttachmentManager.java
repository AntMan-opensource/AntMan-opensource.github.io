package org.apache.wiki.attachment;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.wiki.api.core.Attachment;
import org.apache.wiki.api.core.Context;
import org.apache.wiki.api.core.Page;
import org.apache.wiki.api.exceptions.ProviderException;
import org.apache.wiki.api.exceptions.WikiException;
import org.apache.wiki.api.providers.AttachmentProvider;
import org.apache.wiki.api.providers.WikiProvider;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.List;
public interface AttachmentManager {
    String PROP_PROVIDER = "jspwiki.attachmentProvider";
    String PROP_MAXSIZE  = "jspwiki.attachment.maxsize";
    String PROP_ALLOWEDEXTENSIONS = "jspwiki.attachment.allowed";
    String PROP_FORBIDDENEXTENSIONS = "jspwiki.attachment.forbidden";
    String PROP_FORCEDOWNLOAD = "jspwiki.attachment.forceDownload";
    String CACHE_NAME = "jspwiki.dynamicAttachmentCache";
    int DEFAULT_CACHECAPACITY = 1_000;
    boolean attachmentsEnabled();
    default Attachment getAttachmentInfo( final String name ) throws ProviderException {
        return getAttachmentInfo( name, WikiProvider.LATEST_VERSION );
    }
    
    default Attachment getAttachmentInfo( final String name, final int version ) throws ProviderException {
        if( name == null ) {
            return null;
        }
        
        return getAttachmentInfo( null, name, version );
    }
    
    default Attachment getAttachmentInfo( final Context context, final String attachmentname ) throws ProviderException {
        return getAttachmentInfo( context, attachmentname, WikiProvider.LATEST_VERSION );
    }
    
    Attachment getAttachmentInfo( Context context, String attachmentname, int version ) throws ProviderException;
    String getAttachmentInfoName( Context context, String attachmentname );
    List< Attachment > listAttachments( Page wikipage ) throws ProviderException;
    default boolean hasAttachments( final Page wikipage ) {
        try {
            return listAttachments( wikipage ).size() > 0;
        }
         catch( final Exception e ) {
            LogManager.getLogger( AttachmentManager.class ).info( e.getMessage(), e );
        }
        
        return false;
    }
    
    boolean forceDownload( String name );
    default InputStream getAttachmentStream( final Attachment att ) throws IOException, ProviderException {
        return getAttachmentStream( null, att );
    }
    
    InputStream getAttachmentStream( Context ctx, Attachment att ) throws ProviderException, IOException;
    void storeDynamicAttachment( Context ctx, DynamicAttachment att );
    DynamicAttachment getDynamicAttachment( String name );
    default void storeAttachment( final Attachment att, final File source ) throws IOException, ProviderException {
        try( final FileInputStream in = new FileInputStream( source ) ) {             storeAttachment( att, in );
        }
        
    }
    
    void storeAttachment( Attachment att, InputStream in ) throws IOException, ProviderException;
    List< Attachment > getVersionHistory( String attachmentName ) throws ProviderException;
    Collection< Attachment > getAllAttachments() throws ProviderException;
    AttachmentProvider getCurrentProvider();
    void deleteVersion( Attachment att ) throws ProviderException;
    void deleteAttachment( Attachment att ) throws ProviderException;
    static String validateFileName( String filename ) throws WikiException {
        if( filename == null || filename.trim().isEmpty() ) {
            LogManager.getLogger( AttachmentManager.class ).error( "Empty file name given." );
            throw new WikiException(  "attach.empty.file" );
        }
        
        final String[] splitpath = filename.split( "[/\\\\]" );
        filename = splitpath[splitpath.length-1];
        filename = filename.trim();
        if( filename.toLowerCase().endsWith( ".jsp" ) || filename.toLowerCase().endsWith( ".jspf" ) ) {
            LogManager.getLogger( AttachmentManager.class ) .info( "Attempt to upload a file with a .jsp/.jspf extension.  In certain cases this " + "can trigger unwanted security side effects, so we're preventing it." );
            throw new WikiException(  "attach.unwanted.file"  );
        }
        
        return StringUtils.replaceChars( filename, "#?\"'", "____" );
    }
    
}


