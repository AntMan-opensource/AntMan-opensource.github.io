package org.apache.wiki.rss;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wiki.WatchDog;
import org.apache.wiki.WikiBackgroundThread;
import org.apache.wiki.api.core.Engine;
import org.apache.wiki.util.FileUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
public class RSSThread extends WikiBackgroundThread {
    private static final Logger log = LogManager.getLogger( RSSThread.class );
    private final File m_rssFile;
    private final RSSGenerator m_generator;
    private WatchDog m_watchdog;
    public RSSThread( final Engine engine, final File rssFile, final int rssInterval ) {
        super( engine, rssInterval );
        m_generator = engine.getManager( RSSGenerator.class );
        m_rssFile = rssFile;
        setName("JSPWiki RSS Generator");
        log.debug( "RSS file will be at "+m_rssFile.getAbsolutePath() );
        log.debug( "RSS refresh interval (seconds): "+rssInterval );
    }
    
    public void startupTask() {
        m_watchdog = WatchDog.getCurrentWatchDog( getEngine() );
    }
    
    public void backgroundTask() throws Exception {
        if( m_generator.isEnabled() ) {
            m_watchdog.enterState( "Generating RSS feed", 60 );
            final String feed = m_generator.generate();
            log.debug( "Regenerating RSS feed to " + m_rssFile );
            try( final Reader in  = new StringReader( feed ); final Writer out = new BufferedWriter( new OutputStreamWriter( new FileOutputStream( m_rssFile ), StandardCharsets.UTF_8 ) ) ) {                 FileUtil.copyContents( in, out );
            }
             catch( final IOException e ) {
                log.error( "Cannot generate RSS feed to " + m_rssFile.getAbsolutePath(), e );
                m_generator.setEnabled( false );
            }
             finally {
                m_watchdog.exitState();
            }
            
        }
        
    }
    
}


