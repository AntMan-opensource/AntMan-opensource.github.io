package org.apache.wiki.providers;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wiki.api.core.Page;
import org.apache.wiki.api.exceptions.ProviderException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;
public class FileSystemProvider extends AbstractFileProvider {
    private static final Logger log = LogManager.getLogger( FileSystemProvider.class );
    public static final String PROP_EXT = ".properties";
    public void putPageText( final Page page, final String text ) throws ProviderException {
        try {
            super.putPageText( page, text );
            putPageProperties( page );
        }
         catch( final IOException e ) {
            log.error( "Saving failed" );
        }
        
    }
    
    private void putPageProperties( final Page page ) throws IOException {
        final Properties props = new Properties();
        final String author = page.getAuthor();
        final String changenote = page.getAttribute( Page.CHANGENOTE );
        final String viewcount = page.getAttribute( Page.VIEWCOUNT );
        if( author != null ) {
            props.setProperty( Page.AUTHOR, author );
        }
        
        if( changenote != null ) {
            props.setProperty( Page.CHANGENOTE, changenote );
        }
        
        if( viewcount != null ) {
            props.setProperty( Page.VIEWCOUNT, viewcount );
        }
        
        getCustomProperties( page, props );
        final File file = new File( getPageDirectory(), mangleName( page.getName() ) + PROP_EXT );
        try( final OutputStream out = new FileOutputStream( file ) ) {             props.store( out, "JSPWiki page properties for page "+page.getName() );
        }
        
    }
    
    private void getPageProperties( final Page page ) throws IOException {
        final File file = new File( getPageDirectory(), mangleName( page.getName() ) + PROP_EXT );
        if( file.exists() ) {
            try( final InputStream in = new FileInputStream( file ) ) {                 final Properties  props = new Properties();
                props.load( in );
                page.setAuthor( props.getProperty( Page.AUTHOR ) );
                final String changenote = props.getProperty( Page.CHANGENOTE );
                if( changenote != null ) {
                    page.setAttribute( Page.CHANGENOTE, changenote );
                }
                
                final String viewcount = props.getProperty( Page.VIEWCOUNT );
                if( viewcount != null ) {
                    page.setAttribute( Page.VIEWCOUNT, viewcount );
                }
                
                setCustomProperties( page, props );
            }
            
        }
        
    }
    
    public Page getPageInfo( final String page, final int version ) throws ProviderException {
        final Page p = super.getPageInfo( page, version );
        if( p != null ) {
            try {
                getPageProperties( p );
            }
             catch( final IOException e ) {
                log.error( "Unable to read page properties", e );
                throw new ProviderException( "Unable to read page properties, check logs." );
            }
            
        }
        
        return p;
    }
    
    public void deletePage( final String pageName) throws ProviderException {
        super.deletePage( pageName );
        final File file = new File( getPageDirectory(), mangleName(pageName)+PROP_EXT );
        if( file.exists() ) {
            file.delete();
        }
        
    }
    
    public void movePage( final String from, final String to ) throws ProviderException {
        final File fromPage = findPage( from );
        final File toPage = findPage( to );
        fromPage.renameTo( toPage );
    }
    
}


