package org.apache.wiki.filters;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wiki.api.core.Context;
import org.apache.wiki.api.core.Engine;
import org.apache.wiki.api.exceptions.FilterException;
import org.apache.wiki.api.exceptions.WikiException;
import org.apache.wiki.api.filters.PageFilter;
import org.apache.wiki.event.WikiEventManager;
import org.apache.wiki.event.WikiPageEvent;
import org.apache.wiki.modules.BaseModuleManager;
import org.apache.wiki.modules.WikiModuleInfo;
import org.apache.wiki.util.ClassUtil;
import org.apache.wiki.util.PriorityList;
import org.apache.wiki.util.XmlUtil;
import org.jdom2.Element;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
public class DefaultFilterManager extends BaseModuleManager implements FilterManager {
    private final PriorityList< PageFilter > m_pageFilters = new PriorityList<>();
    private final Map< String, PageFilterInfo > m_filterClassMap = new HashMap<>();
    private static final Logger log = LogManager.getLogger(DefaultFilterManager.class);
    public DefaultFilterManager( final Engine engine, final Properties props ) throws WikiException {
        super( engine );
        initialize( props );
    }
    
    public void addPageFilter( final PageFilter f, final int priority ) throws IllegalArgumentException {
        if( f == null ) {
            throw new IllegalArgumentException("Attempt to provide a null filter - this should never happen.  Please check your configuration (or if you're a developer, check your own code.)");
        }
        
        m_pageFilters.add( f, priority );
    }
    
    private void initPageFilter( final String className, final Properties props ) {
        try {
            final PageFilterInfo info = m_filterClassMap.get( className );
            if( info != null && !checkCompatibility( info ) ) {
                log.warn( "Filter '" + info.getName() + "' not compatible with this version of JSPWiki" );
                return;
            }
            
            final int priority = 0; 
            final Class< ? > cl = ClassUtil.findClass( "org.apache.wiki.filters", className );
            final PageFilter filter = (PageFilter)cl.newInstance();
            filter.initialize( m_engine, props );
            addPageFilter( filter, priority );
            log.info("Added page filter "+cl.getName()+" with priority "+priority);
        }
         catch( final ClassNotFoundException e ) {
            log.error("Unable to find the filter class: "+className);
        }
         catch( final InstantiationException e ) {
            log.error("Cannot create filter class: "+className);
        }
         catch( final IllegalAccessException e ) {
            log.error("You are not allowed to access class: "+className);
        }
         catch( final ClassCastException e ) {
            log.error("Suggested class is not a PageFilter: "+className);
        }
         catch( final FilterException e ) {
            log.error("Filter "+className+" failed to initialize itself.", e);
        }
        
    }
    
    protected void initialize( final Properties props ) throws WikiException {
        InputStream xmlStream = null;
        final String xmlFile = props.getProperty( PROP_FILTERXML ) ;
        try {
            registerFilters();
            if( m_engine.getServletContext() != null ) {
                log.debug( "Attempting to locate " + DEFAULT_XMLFILE + " from servlet context." );
                if( xmlFile == null ) {
                    xmlStream = m_engine.getServletContext().getResourceAsStream( DEFAULT_XMLFILE );
                }
                 else {
                    xmlStream = m_engine.getServletContext().getResourceAsStream( xmlFile );
                }
                
            }
            
            if( xmlStream == null ) {
                log.debug( "Attempting to locate filters.xml from class path." );
                if( xmlFile == null ) {
                    xmlStream = getClass().getResourceAsStream( "/filters.xml" );
                }
                 else {
                    xmlStream = getClass().getResourceAsStream( xmlFile );
                }
                
            }
            
            if( (xmlStream == null) && (xmlFile != null) ) {
                log.debug("Attempting to load property file "+xmlFile);
                xmlStream = new FileInputStream( new File(xmlFile) );
            }
            
            if( xmlStream == null ) {
                log.info( "Cannot find property file for filters (this is okay, expected to find it as: '" + DEFAULT_XMLFILE + "')" );
                return;
            }
            
            parseConfigFile( xmlStream );
        }
         catch( final IOException e ) {
            log.error("Unable to read property file", e);
        }
         finally {
            try {
                if( xmlStream != null ) {
                    xmlStream.close();
                }
                
            }
             catch( final IOException ioe ) {
            }
            
        }
        
    }
    
    private void parseConfigFile( final InputStream xmlStream ) {
    	final List< Element > pageFilters = XmlUtil.parse( xmlStream, "/pagefilters/filter" );
        for( final Element f : pageFilters ) {
            final String filterClass = f.getChildText( "class" );
            final Properties props = new Properties();
            final List<Element> params = f.getChildren( "param" );
            for( final Element p : params ) {
                props.setProperty( p.getChildText( "name" ), p.getChildText( "value" ) );
            }
            
            initPageFilter( filterClass, props );
        }
        
    }
    
    public String doPreTranslateFiltering( final Context context, String pageData ) throws FilterException {
        fireEvent( WikiPageEvent.PRE_TRANSLATE_BEGIN, context );
        for( final PageFilter f : m_pageFilters ) {
            pageData = f.preTranslate( context, pageData );
        }
        
        fireEvent( WikiPageEvent.PRE_TRANSLATE_END, context );
        return pageData;
    }
    
    public String doPostTranslateFiltering( final Context context, String htmlData ) throws FilterException {
        fireEvent( WikiPageEvent.POST_TRANSLATE_BEGIN, context );
        for( final PageFilter f : m_pageFilters ) {
            htmlData = f.postTranslate( context, htmlData );
        }
        
        fireEvent( WikiPageEvent.POST_TRANSLATE_END, context );
        return htmlData;
    }
    
    public String doPreSaveFiltering( final Context context, String pageData ) throws FilterException {
        fireEvent( WikiPageEvent.PRE_SAVE_BEGIN, context );
        for( final PageFilter f : m_pageFilters ) {
            pageData = f.preSave( context, pageData );
        }
        
        fireEvent( WikiPageEvent.PRE_SAVE_END, context );
        return pageData;
    }
    
    public void doPostSaveFiltering( final Context context, final String pageData ) throws FilterException {
        fireEvent( WikiPageEvent.POST_SAVE_BEGIN, context );
        for( final PageFilter f : m_pageFilters ) {
            f.postSave( context, pageData );
        }
        
        fireEvent( WikiPageEvent.POST_SAVE_END, context );
    }
    
    public List< PageFilter > getFilterList() {
        return m_pageFilters;
    }
    
    public void destroy() {
        for( final PageFilter f : m_pageFilters ) {
            f.destroy( m_engine );
        }
        
    }
    
    public void fireEvent( final int type, final Context context ) {
        if( WikiEventManager.isListening(this ) && WikiPageEvent.isValidType( type ) )  {
            WikiEventManager.fireEvent(this, new WikiPageEvent( m_engine, type, context.getPage().getName() ) );
        }
        
    }
    
    public Collection< WikiModuleInfo > modules() {
        return modules( m_filterClassMap.values().iterator() );
    }
    
    public PageFilterInfo getModuleInfo( final String moduleName ) {
        return m_filterClassMap.get(moduleName);
    }
    
    private void registerFilters() {
        log.info( "Registering filters" );
        final List< Element > filters = XmlUtil.parse( PLUGIN_RESOURCE_LOCATION, "/modules/filter" );
        for( final Element pluginEl : filters ) {
            final String className = pluginEl.getAttributeValue( "class" );
            final PageFilterInfo filterInfo = PageFilterInfo.newInstance( className, pluginEl );
            if( filterInfo != null ) {
                registerFilter( filterInfo );
            }
            
        }
        
    }
    
    private void registerFilter( final PageFilterInfo pluginInfo ) {
        m_filterClassMap.put( pluginInfo.getName(), pluginInfo );
    }
    
    private static final class PageFilterInfo extends WikiModuleInfo {
        private PageFilterInfo( final String name ) {
            super( name );
        }
        
        protected static PageFilterInfo newInstance( final String className, final Element pluginEl ) {
            if( className == null || className.isEmpty() ) {
                return null;
            }
            
            final PageFilterInfo info = new PageFilterInfo( className );
            info.initializeFromXML( pluginEl );
            return info;
        }
        
    }
    
}


