package org.apache.wiki.auth.login;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wiki.api.core.Engine;
import org.apache.wiki.auth.WikiPrincipal;
import org.apache.wiki.util.FileUtil;
import org.apache.wiki.util.HttpUtil;
import org.apache.wiki.util.TextUtil;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.LoginException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.util.UUID;
public class CookieAuthenticationLoginModule extends AbstractLoginModule {
    private static final Logger log = LogManager.getLogger( CookieAuthenticationLoginModule.class );
    private static final String LOGIN_COOKIE_NAME = "JSPWikiUID";
    protected static final String COOKIE_DIR = "logincookies";
    public static final String PROP_LOGIN_EXPIRY_DAYS = "jspwiki.cookieAuthentication.expiry";
    private static final int DEFAULT_EXPIRY_DAYS = 14;
    private static long c_lastScrubTime;
    private static final long SCRUB_PERIOD = 60 * 60 * 1000L; 
    public boolean login() throws LoginException {
        final HttpRequestCallback hcb = new HttpRequestCallback();
        final WikiEngineCallback wcb = new WikiEngineCallback();
        final Callback[] callbacks = new Callback[] { hcb, wcb };
        try {
            m_handler.handle( callbacks );
            final HttpServletRequest request = hcb.getRequest();
            final String uid = getLoginCookie( request );
            if( uid != null ) {
                final Engine engine = wcb.getEngine();
                final File cookieFile = getCookieFile( engine, uid );
                if( cookieFile != null && cookieFile.exists() && cookieFile.canRead() ) {
                    try( final Reader in = new BufferedReader( new InputStreamReader( new FileInputStream( cookieFile ), StandardCharsets.UTF_8 ) ) ) {                         final String username = FileUtil.readContents( in );
                        if( log.isDebugEnabled() ) {
                            log.debug( "Logged in cookie authenticated name=" + username );
                        }
                        
                        m_principals.add( new WikiPrincipal( username, WikiPrincipal.LOGIN_NAME ) );
                        return cookieFile.setLastModified( System.currentTimeMillis() );
                    }
                     catch( final IOException e ) {
                        return false;
                    }
                    
                }
                
            }
            
        }
         catch( final IOException e ) {
            final String message = "IO exception; disallowing login.";
            log.error( message, e );
            throw new LoginException( message );
        }
         catch( final UnsupportedCallbackException e ) {
            final String message = "Unable to handle callback; disallowing login.";
            log.error( message, e );
            throw new LoginException( message );
        }
        
        return false;
    }
    
    private static File getCookieFile( final Engine engine, final String uid ) {
        final File cookieDir = new File( engine.getWorkDir(), COOKIE_DIR );
        if( !cookieDir.exists() ) {
            cookieDir.mkdirs();
        }
        
        if( !cookieDir.canRead() ) {
            log.error( "Cannot read from cookie directory!" + cookieDir.getAbsolutePath() );
            return null;
        }
        
        if( !cookieDir.canWrite() ) {
            log.error( "Cannot write to cookie directory!" + cookieDir.getAbsolutePath() );
            return null;
        }
        
        final long now = System.currentTimeMillis();
        if( now > ( c_lastScrubTime + SCRUB_PERIOD ) ) {
            scrub( TextUtil.getIntegerProperty( engine.getWikiProperties(), PROP_LOGIN_EXPIRY_DAYS, DEFAULT_EXPIRY_DAYS ), cookieDir );
            c_lastScrubTime = now;
        }
        
        return new File( cookieDir, uid );
    }
    
    private static String getLoginCookie( final HttpServletRequest request ) {
        return HttpUtil.retrieveCookieValue( request, LOGIN_COOKIE_NAME );
    }
    
    public static void setLoginCookie( final Engine engine, final HttpServletResponse response, final String username ) {
        final UUID uid = UUID.randomUUID();
        final int days = TextUtil.getIntegerProperty( engine.getWikiProperties(), PROP_LOGIN_EXPIRY_DAYS, DEFAULT_EXPIRY_DAYS );
        final Cookie userId = getLoginCookie( uid.toString() );
        userId.setMaxAge( days * 24 * 60 * 60 );
        response.addCookie( userId );
        final File cf = getCookieFile( engine, uid.toString() );
        if( cf != null ) {
            try( final Writer out = new BufferedWriter( new OutputStreamWriter( new FileOutputStream( cf ), StandardCharsets.UTF_8 ) ) ) {                 FileUtil.copyContents( new StringReader( username ), out );
                if( log.isDebugEnabled() ) {
                    log.debug( "Created login cookie for user " + username + " for " + days + " days" );
                }
                
            }
             catch( final IOException ex ) {
                log.error( "Unable to create cookie file to store user id: " + uid );
            }
            
        }
        
    }
    
    public static void clearLoginCookie( final Engine engine, final HttpServletRequest request, final HttpServletResponse response ) {
        final Cookie userId = getLoginCookie( "" );
        userId.setMaxAge( 0 );
        response.addCookie( userId );
        final String uid = getLoginCookie( request );
        if( uid != null ) {
            final File cf = getCookieFile( engine, uid );
            if( cf != null ) {
                if( !cf.delete() ) {
                    log.debug( "Error deleting cookie login " + uid );
                }
                
            }
            
        }
        
    }
    
    private static Cookie getLoginCookie( final String value ) {
        final Cookie c = new Cookie( LOGIN_COOKIE_NAME, value );
        c.setHttpOnly( true );  
        c.setSecure( true ); 
        return c;
    }
    
    private static synchronized void scrub( final int days, final File cookieDir ) {
        log.debug( "Scrubbing cookieDir..." );
        final File[] files = cookieDir.listFiles();
        final long obsoleteDateLimit = System.currentTimeMillis() - ( ( long )days + 1 ) * 24 * 60 * 60 * 1000L;
        int deleteCount = 0;
        for( int i = 0; i < files.length; i++ ) {
            final File f = files[ i ];
            final long lastModified = f.lastModified();
            if( lastModified < obsoleteDateLimit ) {
                if( f.delete() ) {
                    deleteCount++;
                }
                 else {
                    log.debug( "Error deleting cookie login with index " + i );
                }
                
            }
            
        }
        
        log.debug( "Removed " + deleteCount + " obsolete cookie logins" );
    }
    
}


