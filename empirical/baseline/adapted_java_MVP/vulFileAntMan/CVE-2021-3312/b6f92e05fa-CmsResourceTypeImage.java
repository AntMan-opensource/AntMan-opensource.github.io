package org.opencms.file.types;
import org.opencms.configuration.CmsConfigurationException;
import org.opencms.db.CmsSecurityManager;
import org.opencms.file.CmsFile;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsProperty;
import org.opencms.file.CmsPropertyDefinition;
import org.opencms.file.CmsResource;
import org.opencms.file.CmsResourceFilter;
import org.opencms.file.CmsVfsException;
import org.opencms.loader.CmsDumpLoader;
import org.opencms.loader.CmsImageLoader;
import org.opencms.loader.CmsImageScaler;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.main.OpenCms;
import org.opencms.security.CmsPermissionSet;
import org.opencms.security.CmsSecurityException;
import org.opencms.util.CmsStringUtil;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.apache.commons.logging.Log;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
public class CmsResourceTypeImage extends A_CmsResourceType {
    protected static class CmsImageAdjuster {
        private byte[] m_content;
        private CmsImageScaler m_imageDownScaler;
        private List<CmsProperty> m_properties;
        private String m_rootPath;
        public CmsImageAdjuster( byte[] content, String rootPath, List<CmsProperty> properties, CmsImageScaler downScaler) {
            m_content = content;
            m_rootPath = rootPath;
            m_properties = properties;
            m_imageDownScaler = downScaler;
        }
        
        public void adjust() {
            CmsImageScaler scaler = new CmsImageScaler(getContent(), getRootPath());
            if (!scaler.isValid()) {
                return;
            }
            
            if (scaler.isDownScaleRequired(m_imageDownScaler)) {
                CmsImageScaler downScaler = scaler.getDownScaler(m_imageDownScaler);
                m_content = downScaler.scaleImage(m_content, m_rootPath);
                scaler.setHeight(downScaler.getHeight());
                scaler.setWidth(downScaler.getWidth());
            }
            
            CmsProperty p = new CmsProperty(CmsPropertyDefinition.PROPERTY_IMAGE_SIZE, null, scaler.toString());
            List<CmsProperty> result = new ArrayList<CmsProperty>();
            if ((m_properties != null) && (m_properties.size() > 0)) {
                result.addAll(m_properties);
                result.remove(p);
            }
            
            result.add(p);
            m_properties = result;
        }
        
        public byte[] getContent() {
            return m_content;
        }
        
        public List<CmsProperty> getProperties() {
            return m_properties;
        }
        
        public String getRootPath() {
            return m_rootPath;
        }
        
    }
    
    private static class SvgSize {
        private double m_size;
        private String m_unit;
        public static SvgSize parse(String s) {
            if (CmsStringUtil.isEmptyOrWhitespaceOnly(s)) {
                return null;
            }
            
            s = s.trim();
            double length = -1;
            int unitPos;
            String unit = "";
            for (unitPos = s.length(); unitPos >= 0; unitPos--) {
                String prefix = s.substring(0, unitPos);
                unit = s.substring(unitPos);
                try {
                    length = Double.parseDouble(prefix);
                    break;
                }
                 catch (NumberFormatException e) {
                }
                
            }
            
            if (length < 0) {
                LOG.warn("Invalid string for SVG size: " + s);
                return null;
            }
            
            SvgSize result = new SvgSize();
            result.m_size = length;
            result.m_unit = unit;
            return result;
        }
        
        public double getSize() {
            return m_size;
        }
        
        public String getUnit() {
            return m_unit;
        }
        
        public String toString() {
            return m_size + m_unit;
        }
        
    }
    
    public static final Log LOG = CmsLog.getLog(CmsResourceTypeImage.class);
    public static final String PROPERTY_VALUE_UNLIMITED = "unlimited";
    private static final String GALLERY_PREVIEW_PROVIDER = "org.opencms.ade.galleries.preview.CmsImagePreviewProvider";
    private static CmsImageScaler m_downScaler;
    private static boolean m_staticFrozen;
    private static int m_staticLoaderId;
    private static int m_staticTypeId;
    private static final int RESOURCE_TYPE_ID = 3;
    private static final String RESOURCE_TYPE_NAME = "image";
    private static final long serialVersionUID = -8708850913653288684L;
    public CmsResourceTypeImage() {
        super();
        m_typeId = RESOURCE_TYPE_ID;
        m_typeName = RESOURCE_TYPE_NAME;
    }
    
    public static CmsImageScaler getDownScaler(CmsObject cms, String rootPath) {
        if (m_downScaler == null) {
            return null;
        }
        
        String parentFolder = CmsResource.getParentFolder(rootPath);
        parentFolder = cms.getRequestContext().removeSiteRoot(parentFolder);
        try {
            CmsProperty fileSizeProperty = cms.readPropertyObject( parentFolder, CmsPropertyDefinition.PROPERTY_IMAGE_SIZE, true);
            if (!fileSizeProperty.isNullProperty()) {
                String value = fileSizeProperty.getValue().trim();
                if (CmsStringUtil.isNotEmpty(value)) {
                    if (PROPERTY_VALUE_UNLIMITED.equals(value)) {
                        return null;
                    }
                     else {
                        CmsImageScaler scaler = new CmsImageScaler(value);
                        if (scaler.isValid()) {
                            return scaler;
                        }
                        
                    }
                    
                }
                
            }
            
        }
         catch (CmsException e) {
        }
        
        return (CmsImageScaler)m_downScaler.clone();
    }
    
    public static int getStaticTypeId() {
        return m_staticTypeId;
    }
    
    public static String getStaticTypeName() {
        return RESOURCE_TYPE_NAME;
    }
    
    public CmsResource createResource( CmsObject cms, CmsSecurityManager securityManager, String resourcename, byte[] content, List<CmsProperty> properties) throws CmsException {
        if (resourcename.toLowerCase().endsWith(".svg")) {
            List<CmsProperty> prop2 = tryAddImageSizeFromSvg(content, properties);
            properties = prop2;
        }
         else if (CmsImageLoader.isEnabled()) {
            String rootPath = cms.getRequestContext().addSiteRoot(resourcename);
            CmsImageScaler downScaler = getDownScaler(cms, rootPath);
            CmsImageAdjuster adjuster = new CmsImageAdjuster(content, rootPath, properties, downScaler);
            adjuster.adjust();
            content = adjuster.getContent();
            properties = adjuster.getProperties();
        }
        
        return super.createResource(cms, securityManager, resourcename, content, properties);
    }
    
    public String getGalleryPreviewProvider() {
        if (m_galleryPreviewProvider == null) {
            m_galleryPreviewProvider = getConfiguration().getString( CONFIGURATION_GALLERY_PREVIEW_PROVIDER, GALLERY_PREVIEW_PROVIDER);
        }
        
        return m_galleryPreviewProvider;
    }
    
    public int getLoaderId() {
        return m_staticLoaderId;
    }
    
    public CmsResource importResource( CmsObject cms, CmsSecurityManager securityManager, String resourcename, CmsResource resource, byte[] content, List<CmsProperty> properties) throws CmsException {
        if (resourcename.toLowerCase().endsWith(".svg")) {
            properties = tryAddImageSizeFromSvg(content, properties);
        }
         else if (CmsImageLoader.isEnabled()) {
            if (content != null) {
                CmsImageScaler downScaler = getDownScaler(cms, resource.getRootPath());
                CmsImageAdjuster adjuster = new CmsImageAdjuster( content, resource.getRootPath(), properties, downScaler);
                adjuster.adjust();
                content = adjuster.getContent();
                properties = adjuster.getProperties();
            }
            
        }
        
        return super.importResource(cms, securityManager, resourcename, resource, content, properties);
    }
    
    public void initConfiguration(String name, String id, String className) throws CmsConfigurationException {
        if ((OpenCms.getRunLevel() > OpenCms.RUNLEVEL_2_INITIALIZING) && m_staticFrozen) {
            throw new CmsConfigurationException( Messages.get().container( Messages.ERR_CONFIG_FROZEN_3, this.getClass().getName(), getStaticTypeName(), new Integer(getStaticTypeId())));
        }
        
        if (!RESOURCE_TYPE_NAME.equals(name)) {
            throw new CmsConfigurationException( Messages.get().container( Messages.ERR_INVALID_RESTYPE_CONFIG_NAME_3, this.getClass().getName(), RESOURCE_TYPE_NAME, name));
        }
        
        m_staticFrozen = true;
        super.initConfiguration(RESOURCE_TYPE_NAME, id, className);
        m_staticTypeId = m_typeId;
        if (CmsImageLoader.isEnabled()) {
            m_staticLoaderId = CmsImageLoader.RESOURCE_LOADER_ID_IMAGE_LOADER;
            String downScaleParams = CmsImageLoader.getDownScaleParams();
            if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(downScaleParams)) {
                m_downScaler = new CmsImageScaler(downScaleParams);
                if (!m_downScaler.isValid()) {
                    m_downScaler = null;
                }
                
            }
            
        }
         else {
            m_staticLoaderId = CmsDumpLoader.RESOURCE_LOADER_ID;
            m_downScaler = null;
        }
        
    }
    
    public void replaceResource( CmsObject cms, CmsSecurityManager securityManager, CmsResource resource, int type, byte[] content, List<CmsProperty> properties) throws CmsException {
        if (resource.getRootPath().toLowerCase().endsWith(".svg")) {
            List<CmsProperty> newProperties = tryAddImageSizeFromSvg(content, properties);
            if (properties != newProperties) { 
                writePropertyObjects(cms, securityManager, resource, newProperties);
            }
            
        }
         else if (CmsImageLoader.isEnabled()) {
            securityManager.checkPermissions( cms.getRequestContext(), resource, CmsPermissionSet.ACCESS_WRITE, true, CmsResourceFilter.ALL);
            CmsImageScaler downScaler = getDownScaler(cms, resource.getRootPath());
            CmsImageAdjuster adjuster = new CmsImageAdjuster(content, resource.getRootPath(), properties, downScaler);
            adjuster.adjust();
            content = adjuster.getContent();
            if (adjuster.getProperties() != null) {
                writePropertyObjects(cms, securityManager, resource, adjuster.getProperties());
            }
            
        }
        
        super.replaceResource(cms, securityManager, resource, type, content, properties);
    }
    
    public CmsFile writeFile(CmsObject cms, CmsSecurityManager securityManager, CmsFile resource) throws CmsException, CmsVfsException, CmsSecurityException {
        if (CmsImageLoader.isEnabled()) {
            securityManager.checkPermissions( cms.getRequestContext(), resource, CmsPermissionSet.ACCESS_WRITE, true, CmsResourceFilter.ALL);
            CmsImageScaler downScaler = getDownScaler(cms, resource.getRootPath());
            CmsImageAdjuster adjuster = new CmsImageAdjuster( resource.getContents(), resource.getRootPath(), null, downScaler);
            adjuster.adjust();
            resource.setContents(adjuster.getContent());
            if (adjuster.getProperties() != null) {
                writePropertyObjects(cms, securityManager, resource, adjuster.getProperties());
            }
            
        }
        
        return super.writeFile(cms, securityManager, resource);
    }
    
    protected List<CmsProperty> tryAddImageSizeFromSvg(byte[] content, List<CmsProperty> properties) {
        if ((content == null) || (content.length == 0)) {
            return properties;
        }
        
        List<CmsProperty> newProps = properties;
        try {
            double w = -1, h = -1;
            SAXReader reader = new SAXReader();
            Document doc = reader.read(new ByteArrayInputStream(content));
            Element node = (Element)(doc.selectSingleNode("/svg"));
            if (node != null) {
                String widthStr = node.attributeValue("width");
                String heightStr = node.attributeValue("height");
                SvgSize width = SvgSize.parse(widthStr);
                SvgSize height = SvgSize.parse(heightStr);
                if ((width != null) && (height != null) && Objects.equals(width.getUnit(), height.getUnit())) {
                    w = width.getSize();
                    h = height.getSize();
                }
                 else {
                    String viewboxStr = node.attributeValue("viewBox");
                    if (viewboxStr != null) {
                        viewboxStr = viewboxStr.replace(",", " ");
                        String[] viewboxParts = viewboxStr.trim().split(" +");
                        if (viewboxParts.length == 4) {
                            w = Double.parseDouble(viewboxParts[2]);
                            h = Double.parseDouble(viewboxParts[3]);
                        }
                        
                    }
                    
                }
                
                if ((w > 0) && (h > 0)) {
                    String propValue = "w:" + (int)Math.round(w) + ",h:" + (int)Math.round(h);
                    Map<String, CmsProperty> propsMap = properties == null ? new HashMap<>() : CmsProperty.toObjectMap(properties);
                    propsMap.put( CmsPropertyDefinition.PROPERTY_IMAGE_SIZE, new CmsProperty(CmsPropertyDefinition.PROPERTY_IMAGE_SIZE, null, propValue));
                    newProps = new ArrayList<>(propsMap.values());
                }
                
            }
            
        }
         catch (Exception e) {
            LOG.error("Error while trying to determine size of SVG: " + e.getLocalizedMessage(), e);
        }
        
        return newProps;
    }
    
}

