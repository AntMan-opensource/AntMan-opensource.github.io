package org.opencms.xml;
import org.opencms.configuration.CmsConfigurationManager;
import org.opencms.db.CmsDriverManager;
import org.opencms.db.CmsPublishedResource;
import org.opencms.file.CmsFile;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsResource;
import org.opencms.file.CmsResourceFilter;
import org.opencms.main.CmsEvent;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.main.I_CmsEventListener;
import org.opencms.main.OpenCms;
import org.opencms.monitor.CmsMemoryMonitor;
import org.opencms.util.CmsCollectionsGenericWrapper;
import org.opencms.util.CmsFileUtil;
import org.opencms.util.CmsUUID;
import org.opencms.xml.page.CmsXmlPage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.commons.logging.Log;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
public class CmsXmlEntityResolver implements EntityResolver, I_CmsEventListener {
    public static final int CONTENT_DEFINITION_CACHE_SIZE = 2048;
    public static final String INTERNAL_SCHEME = "internal://";
    public static final String OPENCMS_SCHEME = "opencms://";
    private static final String[][] LEGACY_TRANSLATIONS = {{"opencms://system/modules/org.opencms.ade.config/schemas/", "internal://org/opencms/xml/adeconfig/"}, {
            "opencms://system/modules/org.opencms.ade.containerpage/schemas/", "internal://org/opencms/xml/containerpage/"}, {"opencms://system/modules/org.opencms.ade.sitemap/schemas/", "internal://org/opencms/xml/adeconfig/sitemap/"}, {"opencms://system/modules/org.opencms.ugc/schemas/", "internal://org/opencms/ugc/"}, {"opencms://system/modules/org.opencms.jsp.search/schemas/", "internal://org/opencms/jsp/search/"}
    };
    private static final Log LOG = CmsLog.getLog(CmsXmlEntityResolver.class);
    private static Map<String, CmsXmlContentDefinition> m_cacheContentDefinitions;
    private static Map<String, byte[]> m_cachePermanent;
    private static Map<String, byte[]> m_cacheTemporary;
    private static final String XMLPAGE_OLD_DTD_LOCATION = "org/opencms/xml/page/xmlpage.dtd";
    private static final String XMLPAGE_OLD_DTD_SYSTEM_ID_1 = "http://www.opencms.org/dtd/6.0/xmlpage.dtd";
    private static final String XMLPAGE_OLD_DTD_SYSTEM_ID_2 = "/system/shared/page.dtd";
    private static final String XMLPAGE_XSD_LOCATION = "org/opencms/xml/page/xmlpage.xsd";
    private CmsObject m_cms;
    public CmsXmlEntityResolver(CmsObject cms) {
        initCaches();
        m_cms = cms;
    }
    
    public static void cacheSystemId(String systemId, byte[] content) {
        initCaches();
        m_cachePermanent.put(systemId, content);
    }
    
    public static boolean isCachedSystemId(String systemId) {
        if (m_cachePermanent != null) {
            return m_cachePermanent.containsKey(systemId);
        }
        
        return false;
    }
    
    public static boolean isInternalId(String schema) {
        String translatedId = translateLegacySystemId(schema);
        if (translatedId.startsWith(INTERNAL_SCHEME)) {
            return true;
        }
        
        return false;
    }
    
    protected static void initialize(CmsObject adminCms, byte[] typeSchemaBytes) {
        CmsXmlEntityResolver resolver = new CmsXmlEntityResolver(adminCms);
        OpenCms.addCmsEventListener( resolver, new int[] {                 I_CmsEventListener.EVENT_CLEAR_CACHES, I_CmsEventListener.EVENT_PUBLISH_PROJECT, I_CmsEventListener.EVENT_RESOURCE_MODIFIED, I_CmsEventListener.EVENT_RESOURCE_MOVED, I_CmsEventListener.EVENT_RESOURCE_DELETED});
        cacheSystemId(CmsXmlContentDefinition.XSD_INCLUDE_OPENCMS, typeSchemaBytes);
    }
    
    private static void initCaches() {
        if (m_cacheTemporary == null) {
            m_cacheTemporary = CmsMemoryMonitor.createLRUCacheMap(1024);
            m_cachePermanent = new ConcurrentHashMap<String, byte[]>(32);
            m_cacheContentDefinitions = CmsMemoryMonitor.createLRUCacheMap(CONTENT_DEFINITION_CACHE_SIZE);
        }
        
        if (OpenCms.getRunLevel() > OpenCms.RUNLEVEL_1_CORE_OBJECT) {
            if ((OpenCms.getMemoryMonitor() != null) && !OpenCms.getMemoryMonitor().isMonitoring(CmsXmlEntityResolver.class.getName() + ".cacheTemporary")) {
                Map<String, byte[]> cacheTemporary = CmsMemoryMonitor.createLRUCacheMap(128);
                cacheTemporary.putAll(m_cacheTemporary);
                m_cacheTemporary = cacheTemporary;
                OpenCms.getMemoryMonitor().register( CmsXmlEntityResolver.class.getName() + ".cacheTemporary", cacheTemporary);
                Map<String, byte[]> cachePermanent = new ConcurrentHashMap<String, byte[]>(32);
                cachePermanent.putAll(m_cachePermanent);
                m_cachePermanent = cachePermanent;
                OpenCms.getMemoryMonitor().register( CmsXmlEntityResolver.class.getName() + ".cachePermanent", cachePermanent);
                Map<String, CmsXmlContentDefinition> cacheContentDefinitions = CmsMemoryMonitor.createLRUCacheMap( CONTENT_DEFINITION_CACHE_SIZE);
                cacheContentDefinitions.putAll(m_cacheContentDefinitions);
                m_cacheContentDefinitions = cacheContentDefinitions;
                OpenCms.getMemoryMonitor().register( CmsXmlEntityResolver.class.getName() + ".cacheContentDefinitions", cacheContentDefinitions);
            }
            
        }
        
    }
    
    private static String translateLegacySystemId(String systemId) {
        String result = systemId;
        for (String[] translation : LEGACY_TRANSLATIONS) {
            if (systemId.startsWith(translation[0])) {
                result = translation[1] + systemId.substring(translation[0].length());
                break;
            }
            
        }
        
        if (OpenCms.getRepositoryManager() != null) {
            result = OpenCms.getResourceManager().getXsdTranslator().translateResource(result);
        }
        
        return result;
    }
    
    public void cacheContentDefinition(String systemId, CmsXmlContentDefinition contentDefinition) {
        String cacheKey = getCacheKeyForCurrentProject(systemId);
        m_cacheContentDefinitions.put(cacheKey, contentDefinition);
        if (LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().getBundle().key(Messages.LOG_ERR_CACHED_SYSTEM_ID_1, cacheKey));
        }
        
    }
    
    public void cmsEvent(CmsEvent event) {
        CmsResource resource;
        switch (event.getType()) {
            case I_CmsEventListener.EVENT_PUBLISH_PROJECT:
                CmsUUID publishHistoryId = new CmsUUID((String)event.getData().get(I_CmsEventListener.KEY_PUBLISHID));
                if (isSchemaDefinitionInPublishList(publishHistoryId)) {
                    m_cacheTemporary.clear();
                    m_cacheContentDefinitions.clear();
                    if (LOG.isDebugEnabled()) {
                        LOG.debug(Messages.get().getBundle().key(Messages.LOG_ERR_FLUSHED_CACHES_0));
                    }
                    
                }
                
                break;
            case I_CmsEventListener.EVENT_CLEAR_CACHES:
                m_cacheTemporary.clear();
                m_cacheContentDefinitions.clear();
                if (LOG.isDebugEnabled()) {
                    LOG.debug(Messages.get().getBundle().key(Messages.LOG_ERR_FLUSHED_CACHES_0));
                }
                
                break;
            case I_CmsEventListener.EVENT_RESOURCE_MODIFIED:
                Object change = event.getData().get(I_CmsEventListener.KEY_CHANGE);
                if ((change != null) && change.equals(new Integer(CmsDriverManager.NOTHING_CHANGED))) {
                    return;
                }
                
                resource = (CmsResource)event.getData().get(I_CmsEventListener.KEY_RESOURCE);
                uncacheSystemId(resource.getRootPath());
                break;
            case I_CmsEventListener.EVENT_RESOURCE_DELETED:
            case I_CmsEventListener.EVENT_RESOURCE_MOVED:
                List<CmsResource> resources = CmsCollectionsGenericWrapper.list( event.getData().get(I_CmsEventListener.KEY_RESOURCES));
                for (int i = 0; i < resources.size(); i++) {
                    resource = resources.get(i);
                    uncacheSystemId(resource.getRootPath());
                }
                
                break;
            default: }
    }
    
    public CmsXmlContentDefinition getCachedContentDefinition(String systemId) {
        String cacheKey = getCacheKeyForCurrentProject(systemId);
        CmsXmlContentDefinition result = m_cacheContentDefinitions.get(cacheKey);
        if ((result != null) && LOG.isDebugEnabled()) {
            LOG.debug(Messages.get().getBundle().key(Messages.LOG_CACHE_LOOKUP_SUCCEEDED_1, cacheKey));
        }
        
        return result;
    }
    
    public InputSource resolveEntity(String publicId, String systemId) throws IOException {
        byte[] content;
        systemId = translateLegacySystemId(systemId);
        content = m_cachePermanent.get(systemId);
        if (content != null) {
            return createInputSource(content, systemId);
        }
         else if (systemId.equals(CmsXmlPage.XMLPAGE_XSD_SYSTEM_ID)) {
            try (InputStream stream = getClass().getClassLoader().getResourceAsStream(XMLPAGE_XSD_LOCATION)) {
                content = CmsFileUtil.readFully(stream);
                m_cachePermanent.put(systemId, content);
                return createInputSource(content, systemId);
            }
             catch (Throwable t) {
                LOG.error( Messages.get().getBundle().key(Messages.LOG_XMLPAGE_XSD_NOT_FOUND_1, XMLPAGE_XSD_LOCATION), t);
            }
            
        }
         else if (systemId.equals(XMLPAGE_OLD_DTD_SYSTEM_ID_1) || systemId.endsWith(XMLPAGE_OLD_DTD_SYSTEM_ID_2)) {
            try (InputStream stream = getClass().getClassLoader().getResourceAsStream(XMLPAGE_OLD_DTD_LOCATION)) {
                content = CmsFileUtil.readFully(stream);
                m_cachePermanent.put(systemId, content);
                return createInputSource(content, systemId);
            }
             catch (Throwable t) {
                LOG.error( Messages.get().getBundle().key(Messages.LOG_XMLPAGE_DTD_NOT_FOUND_1, XMLPAGE_OLD_DTD_LOCATION), t);
            }
            
        }
         else if ((m_cms != null) && systemId.startsWith(OPENCMS_SCHEME)) {
            String cacheSystemId = systemId.substring(OPENCMS_SCHEME.length() - 1);
            String cacheKey = getCacheKey( cacheSystemId, m_cms.getRequestContext().getCurrentProject().isOnlineProject());
            content = m_cacheTemporary.get(cacheKey);
            if (content != null) {
                return createInputSource(content, systemId);
            }
            
            String storedSiteRoot = m_cms.getRequestContext().getSiteRoot();
            try {
                m_cms.getRequestContext().setSiteRoot("/");
                CmsFile file = m_cms.readFile(cacheSystemId, CmsResourceFilter.IGNORE_EXPIRATION);
                content = file.getContents();
                m_cacheTemporary.put(cacheKey, content);
                if (LOG.isDebugEnabled()) {
                    LOG.debug(Messages.get().getBundle().key(Messages.LOG_ERR_CACHED_SYS_ID_1, cacheKey));
                }
                
                return createInputSource(content, systemId);
            }
             catch (CmsException e) {
                throw new IOException( Messages.get().getBundle().key(Messages.LOG_ENTITY_RESOLVE_FAILED_1, systemId), e);
            }
             finally {
                m_cms.getRequestContext().setSiteRoot(storedSiteRoot);
            }
            
        }
         else if (systemId.startsWith(INTERNAL_SCHEME)) {
            String location = systemId.substring(INTERNAL_SCHEME.length());
            try (InputStream stream = getClass().getClassLoader().getResourceAsStream(location)) {
                content = CmsFileUtil.readFully(stream);
                m_cachePermanent.put(systemId, content);
                return createInputSource(content, systemId);
            }
             catch (Throwable t) {
                LOG.error(t.getLocalizedMessage(), t);
            }
            
        }
         else if (systemId.substring(0, systemId.lastIndexOf("/") + 1).equalsIgnoreCase( CmsConfigurationManager.DEFAULT_DTD_PREFIX)) {
            String location = null;
            try {
                String dtdFilename = systemId.substring(systemId.lastIndexOf("/") + 1);
                location = CmsConfigurationManager.DEFAULT_DTD_LOCATION + dtdFilename;
                InputStream stream = getClass().getClassLoader().getResourceAsStream(location);
                content = CmsFileUtil.readFully(stream);
                m_cachePermanent.put(systemId, content);
                return createInputSource(content, systemId);
            }
             catch (Throwable t) {
                LOG.error(Messages.get().getBundle().key(Messages.LOG_DTD_NOT_FOUND_1, location), t);
            }
            
        }
        
        return null;
    }
    
    public void uncacheSystemId(String systemId) {
        Object o;
        o = m_cacheTemporary.remove(getCacheKey(systemId, false));
        if (null != o) {
            m_cacheContentDefinitions.clear();
            if (LOG.isDebugEnabled()) {
                LOG.debug( Messages.get().getBundle().key(Messages.LOG_ERR_UNCACHED_SYS_ID_1, getCacheKey(systemId, false)));
            }
            
        }
         else {
            o = m_cacheContentDefinitions.remove(getCacheKey(systemId, false));
            if ((null != o) && LOG.isDebugEnabled()) {
                LOG.debug( Messages.get().getBundle().key( Messages.LOG_ERR_UNCACHED_CONTENT_DEF_1, getCacheKey(systemId, false)));
            }
            
        }
        
    }
    
    InputSource createInputSource(byte[] data, String systemId) {
        InputSource result = new InputSource(new ByteArrayInputStream(data));
        result.setSystemId(systemId);
        return result;
    }
    
    private String getCacheKey(String systemId, boolean online) {
        if (online) {
            return "online_".concat(systemId);
        }
        
        return "offline_".concat(systemId);
    }
    
    private String getCacheKeyForCurrentProject(String systemId) {
        boolean project = (m_cms != null) ? m_cms.getRequestContext().getCurrentProject().isOnlineProject() : false;
        if (systemId.startsWith(OPENCMS_SCHEME)) {
            systemId = systemId.substring(OPENCMS_SCHEME.length() - 1);
        }
        
        return getCacheKey(systemId, project);
    }
    
    private boolean isSchemaDefinitionInPublishList(CmsUUID publishHistoryId) {
        if (m_cms == null) {
            return true;
        }
        
        try {
            List<CmsPublishedResource> publishedResources = m_cms.readPublishedResources(publishHistoryId);
            for (CmsPublishedResource cmsPublishedResource : publishedResources) {
                String resourceRootPath = cmsPublishedResource.getRootPath();
                String resourceRootPathLowerCase = resourceRootPath.toLowerCase();
                if (resourceRootPathLowerCase.endsWith(".xsd") || resourceRootPathLowerCase.endsWith(".dtd") || m_cacheTemporary.containsKey(getCacheKey(resourceRootPath, true))) {
                    return true;
                }
                
            }
            
        }
         catch (CmsException e) {
            LOG.warn(e.getMessage(), e);
        }
        
        return false;
    }
    
}

