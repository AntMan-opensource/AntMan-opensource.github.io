package com.xpn.xwiki.doc;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.lang.ref.SoftReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.inject.Provider;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.velocity.VelocityContext;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DocumentResult;
import org.dom4j.io.OutputFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.suigeneris.jrcs.diff.Diff;
import org.suigeneris.jrcs.diff.DifferentiationFailedException;
import org.suigeneris.jrcs.diff.Revision;
import org.suigeneris.jrcs.diff.delta.Delta;
import org.suigeneris.jrcs.rcs.Version;
import org.suigeneris.jrcs.util.ToString;
import org.xwiki.bridge.DocumentModelBridge;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.component.util.DefaultParameterizedType;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContextException;
import org.xwiki.context.ExecutionContextManager;
import org.xwiki.display.internal.DocumentDisplayer;
import org.xwiki.display.internal.DocumentDisplayerParameters;
import org.xwiki.filter.input.DefaultInputStreamInputSource;
import org.xwiki.filter.input.InputSource;
import org.xwiki.filter.input.StringInputSource;
import org.xwiki.filter.instance.input.DocumentInstanceInputProperties;
import org.xwiki.filter.instance.output.DocumentInstanceOutputProperties;
import org.xwiki.filter.output.DefaultOutputStreamOutputTarget;
import org.xwiki.filter.output.DefaultWriterOutputTarget;
import org.xwiki.filter.output.OutputTarget;
import org.xwiki.filter.xar.input.XARInputProperties;
import org.xwiki.filter.xar.output.XAROutputProperties;
import org.xwiki.filter.xml.output.DefaultResultOutputTarget;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.link.LinkException;
import org.xwiki.link.LinkStore;
import org.xwiki.localization.ContextualLocalizationManager;
import org.xwiki.localization.LocaleUtils;
import org.xwiki.model.EntityType;
import org.xwiki.model.document.DocumentAuthors;
import org.xwiki.model.internal.document.DefaultDocumentAuthors;
import org.xwiki.model.internal.reference.DefaultSymbolScheme;
import org.xwiki.model.internal.reference.EntityReferenceFactory;
import org.xwiki.model.internal.reference.LocalStringEntityReferenceSerializer;
import org.xwiki.model.internal.reference.LocalUidStringEntityReferenceSerializer;
import org.xwiki.model.reference.AttachmentReference;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceProvider;
import org.xwiki.model.reference.EntityReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.LocalDocumentReference;
import org.xwiki.model.reference.ObjectPropertyReference;
import org.xwiki.model.reference.ObjectReference;
import org.xwiki.model.reference.ObjectReferenceResolver;
import org.xwiki.model.reference.PageReference;
import org.xwiki.model.reference.PageReferenceResolver;
import org.xwiki.model.reference.SpaceReference;
import org.xwiki.model.reference.WikiReference;
import org.xwiki.query.Query;
import org.xwiki.query.QueryException;
import org.xwiki.query.QueryFilter;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.Block.Axes;
import org.xwiki.rendering.block.HeaderBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.SectionBlock;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.block.match.ClassBlockMatcher;
import org.xwiki.rendering.block.match.MacroBlockMatcher;
import org.xwiki.rendering.internal.parser.LinkParser;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;
import org.xwiki.rendering.parser.ContentParser;
import org.xwiki.rendering.parser.MissingParserException;
import org.xwiki.rendering.parser.ParseException;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.renderer.BlockRenderer;
import org.xwiki.rendering.renderer.printer.DefaultWikiPrinter;
import org.xwiki.rendering.renderer.printer.WikiPrinter;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.syntax.SyntaxRegistry;
import org.xwiki.rendering.transformation.RenderingContext;
import org.xwiki.rendering.transformation.TransformationContext;
import org.xwiki.rendering.transformation.TransformationException;
import org.xwiki.rendering.transformation.TransformationManager;
import org.xwiki.rendering.util.ErrorBlockGenerator;
import org.xwiki.security.authorization.ContextualAuthorizationManager;
import org.xwiki.security.authorization.Right;
import org.xwiki.stability.Unstable;
import org.xwiki.store.TemporaryAttachmentSessionsManager;
import org.xwiki.store.merge.MergeDocumentResult;
import org.xwiki.store.merge.MergeManager;
import org.xwiki.user.GuestUserReference;
import org.xwiki.user.UserConfiguration;
import org.xwiki.user.UserReference;
import org.xwiki.user.UserReferenceResolver;
import org.xwiki.user.UserReferenceSerializer;
import org.xwiki.velocity.VelocityContextFactory;
import org.xwiki.velocity.VelocityManager;
import org.xwiki.velocity.XWikiVelocityContext;
import org.xwiki.velocity.XWikiVelocityException;
import org.xwiki.xar.internal.model.XarDocumentModel;
import org.xwiki.xml.XMLUtils;
import org.xwiki.xml.html.HTMLUtils;
import com.xpn.xwiki.CoreConfiguration;
import com.xpn.xwiki.XWiki;
import com.xpn.xwiki.XWikiConstant;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.api.DocumentSection;
import com.xpn.xwiki.criteria.impl.RevisionCriteria;
import com.xpn.xwiki.doc.merge.MergeConfiguration;
import com.xpn.xwiki.doc.merge.MergeResult;
import com.xpn.xwiki.doc.rcs.XWikiRCSNodeInfo;
import com.xpn.xwiki.internal.cache.rendering.RenderingCache;
import com.xpn.xwiki.internal.doc.BaseObjects;
import com.xpn.xwiki.internal.doc.XWikiAttachmentList;
import com.xpn.xwiki.internal.filter.XWikiDocumentFilterUtils;
import com.xpn.xwiki.internal.render.OldRendering;
import com.xpn.xwiki.internal.xml.DOMXMLWriter;
import com.xpn.xwiki.internal.xml.XMLWriter;
import com.xpn.xwiki.objects.BaseCollection;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.BaseObjectReference;
import com.xpn.xwiki.objects.BaseProperty;
import com.xpn.xwiki.objects.LargeStringProperty;
import com.xpn.xwiki.objects.ListProperty;
import com.xpn.xwiki.objects.ObjectDiff;
import com.xpn.xwiki.objects.PropertyInterface;
import com.xpn.xwiki.objects.classes.BaseClass;
import com.xpn.xwiki.objects.classes.ListClass;
import com.xpn.xwiki.objects.classes.PropertyClass;
import com.xpn.xwiki.objects.classes.StaticListClass;
import com.xpn.xwiki.objects.classes.TextAreaClass;
import com.xpn.xwiki.store.AttachmentRecycleBinStore;
import com.xpn.xwiki.store.XWikiAttachmentStoreInterface;
import com.xpn.xwiki.store.XWikiHibernateAttachmentStore;
import com.xpn.xwiki.store.XWikiStoreInterface;
import com.xpn.xwiki.store.XWikiVersioningStoreInterface;
import com.xpn.xwiki.user.api.XWikiRightService;
import com.xpn.xwiki.util.Util;
import com.xpn.xwiki.validation.XWikiValidationInterface;
import com.xpn.xwiki.validation.XWikiValidationStatus;
import com.xpn.xwiki.web.EditForm;
import com.xpn.xwiki.web.ObjectAddForm;
import com.xpn.xwiki.web.ObjectPolicyType;
import com.xpn.xwiki.web.Utils;
import com.xpn.xwiki.web.XWikiRequest;
public class XWikiDocument implements DocumentModelBridge, Cloneable {
    private static final Logger LOGGER = LoggerFactory.getLogger(XWikiDocument.class);
    private static final String TM_FAILEDDOCUMENTPARSE = "core.document.error.failedParse";
    public static class XWikiAttachmentToRemove {
        private XWikiAttachment attachment;
        private boolean toRecycleBin;
        public XWikiAttachmentToRemove(XWikiAttachment attachment, boolean toRecycleBin) {
            this.attachment = attachment;
            this.toRecycleBin = toRecycleBin;
        }
        
        public XWikiAttachment getAttachment() {
            return this.attachment;
        }
        
        public boolean isToRecycleBin() {
            return this.toRecycleBin;
        }
        
        public int hashCode() {
            return this.attachment.hashCode();
        }
        
        public boolean equals(Object obj) {
            if (obj instanceof XWikiAttachmentToRemove) {
                return this.attachment.equals(((XWikiAttachmentToRemove) obj).getAttachment());
            }
            
            return false;
        }
        
        public String toString() {
            return this.attachment.toString();
        }
        
    }
    
    private static final Pattern HTML_TAG_PATTERN = Pattern.compile( "</?+(html|img|a|i|br?|embed|script|form|input|textarea|object|font|li|[dou]l|table|center|hr|p) ?([^>]*+)>");
    public static final EntityReference COMMENTSCLASS_REFERENCE = new LocalDocumentReference("XWiki", "XWikiComments");
    public static final EntityReference SHEETCLASS_REFERENCE = new LocalDocumentReference("XWiki", "SheetClass");
    public static final int HAS_ATTACHMENTS = 1;
    public static final int HAS_OBJECTS = 2;
    public static final int HAS_CLASS = 4;
    public static final String CKEY_SDOC = "sdoc";
    public static final String DB_SPACE_SEP = ":";
    public static final String SPACE_NAME_SEP = ".";
    private static final LocalStringEntityReferenceSerializer LOCAL_REFERENCE_SERIALIZER = new LocalStringEntityReferenceSerializer(new DefaultSymbolScheme());
    private static DocumentReferenceResolver<String> getCurrentDocumentReferenceResolver() {
        return Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, "current");
    }
    
    private static EntityReferenceResolver<ResourceReference> getResourceReferenceEntityReferenceResolver() {
        return Utils .getComponent(new DefaultParameterizedType(null, EntityReferenceResolver.class, ResourceReference.class));
    }
    
    private static EntityReferenceResolver<String> getXClassEntityReferenceResolver() {
        return Utils.getComponent(EntityReferenceResolver.TYPE_STRING, "xclass");
    }
    
    private static DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver() {
        return Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, "currentmixed");
    }
    
    private static DocumentReferenceResolver<EntityReference> getCurrentReferenceDocumentReferenceResolver() {
        return Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, "current");
    }
    
    private static EntityReferenceResolver<String> getRelativeEntityReferenceResolver() {
        return Utils.getComponent(EntityReferenceResolver.TYPE_STRING, "relative");
    }
    
    private static EntityReferenceSerializer<String> getCompactEntityReferenceSerializer() {
        return Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "compact");
    }
    
    private static EntityReferenceSerializer<String> getCompactWikiEntityReferenceSerializer() {
        return Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "compactwiki");
    }
    
    private static ObjectReferenceResolver<EntityReference> getCurrentReferenceObjectReferenceResolver() {
        return Utils.getComponent(ObjectReferenceResolver.TYPE_REFERENCE, "current");
    }
    
    private static SyntaxRegistry getSyntaxRegistry() {
        return Utils.getComponent(SyntaxRegistry.class);
    }
    
    private static LinkParser getLinkParser() {
        return Utils.getComponent(LinkParser.class);
    }
    
    private static UserConfiguration getUserConfiguration() {
        return Utils.getComponent(UserConfiguration.class);
    }
    
    private String title;
    private EntityReference parentReference;
    private DocumentReference documentReference;
    private String content;
    private String meta;
    private String format;
    private String customClass;
    private Date contentUpdateDate;
    private Date updateDate;
    private Date creationDate;
    protected Version version;
    private long id = 0;
    private boolean mostRecent = true;
    private boolean isNew = true;
    private DocumentReference templateDocumentReference;
    private Locale locale;
    private Locale defaultLocale;
    private boolean hidden = false;
    private String comment;
    private Syntax syntax;
    private boolean isMinorEdit = false;
    private boolean isContentDirty = true;
    private boolean isMetaDataDirty = true;
    private int elements = HAS_OBJECTS | HAS_ATTACHMENTS;
    private BaseClass xClass;
    private String xClassXML;
    private Map<DocumentReference, BaseObjects> xObjects = new ConcurrentSkipListMap<>();
    private Map<DocumentReference, List<BaseObject>> publicXObjects = new Map<DocumentReference, List<BaseObject>>() {
        public List<BaseObject> put(DocumentReference key, List<BaseObject> value) {
            return xObjects.put(key, value instanceof BaseObjects ? (BaseObjects) value : new BaseObjects(value));
        }
        
        public void putAll(Map<? extends DocumentReference, ? extends List<BaseObject>> m) {
            m.forEach(this::put);
        }
        
        public int size() {
            return xObjects.size();
        }
        
        public boolean isEmpty() {
            return xObjects.isEmpty();
        }
        
        public boolean containsKey(Object key) {
            return xObjects.containsKey(key);
        }
        
        public boolean containsValue(Object value) {
            return xObjects.containsValue(value);
        }
        
        public List<BaseObject> get(Object key) {
            return xObjects.get(key);
        }
        
        public List<BaseObject> remove(Object key) {
            return xObjects.remove(key);
        }
        
        public void clear() {
            xObjects.clear();            
        }
        
        public Set<DocumentReference> keySet() {
            return xObjects.keySet();
        }
        
        public Collection<List<BaseObject>> values() {
            return (Collection) xObjects.values();
        }
        
        public Set<Entry<DocumentReference, List<BaseObject>>> entrySet() {
            return (Set) xObjects.entrySet();
        }
        
    };
    private final XWikiAttachmentList attachmentList = new XWikiAttachmentList(XWikiDocument.this);
    private boolean fromCache = false;
    private List<BaseObject> xObjectsToRemove = new ArrayList<BaseObject>();
    private List<XWikiAttachmentToRemove> attachmentsToRemove = new ArrayList<XWikiAttachmentToRemove>();
    private String defaultTemplate;
    private String validationScript;
    private Object wikiNode;
    private SoftReference<XWikiDocumentArchive> archive;
    private XWikiStoreInterface store;
    private XWikiDocument originalDocument;
    private DocumentDisplayer documentDisplayer;
    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;
    private DocumentReferenceResolver<String> explicitDocumentReferenceResolver;
    private DocumentReferenceResolver<EntityReference> explicitReferenceDocumentReferenceResolver;
    private PageReferenceResolver<EntityReference> pageReferenceResolver;
    private EntityReferenceSerializer<String> uidStringEntityReferenceSerializer;
    private Provider<OldRendering> oldRenderingProvider;
    private JobProgressManager progress;
    private ContextualLocalizationManager localization;
    private VelocityContextFactory velocityContextFactory;
    private EntityReferenceFactory entityReferenceFactory;
    private XDOM xdomCache;
    private RenderingCache renderingCache;
    private DocumentReference parentReferenceCache;
    private DocumentReference documentReferenceWithLocaleCache;
    private PageReference pageReferenceCache;
    private PageReference pageReferenceWithLocaleCache;
    private String keyCache;
    private String localKeyCache;
    private RenderingContext renderingContext;
    private final DefaultDocumentAuthors authors = new DefaultDocumentAuthors(this);
    public XWikiDocument(DocumentReference reference) {
        init(reference);
    }
    
    public XWikiDocument(DocumentReference reference, Locale locale) {
        init(reference);
        this.locale = locale;
    }
    
    @Deprecated
(since = "2.2M1")
    public XWikiDocument() {
        this(null);
    }
    
    @Deprecated
(since = "2.2M1")
    public XWikiDocument(String space, String name) {
        this(null, space, name);
    }
    
    @Deprecated
(since = "2.2M1")
    public XWikiDocument(String wiki, String space, String name) {
        EntityReference contextReference = null;
        if (!StringUtils.isEmpty(space)) {
            contextReference = new EntityReference(space, EntityType.SPACE);
        }
        
        DocumentReference reference = getCurrentDocumentReferenceResolver().resolve(name, contextReference);
        if (!StringUtils.isEmpty(wiki)) {
            reference = reference.replaceParent(reference.getWikiReference(), new WikiReference(wiki));
        }
        
        init(reference);
    }
    
    private DocumentReferenceResolver<String> getExplicitDocumentReferenceResolver() {
        if (this.explicitDocumentReferenceResolver == null) {
            this.explicitDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, "explicit");
        }
        
        return this.explicitDocumentReferenceResolver;
    }
    
    private DocumentReferenceResolver<EntityReference> getExplicitReferenceDocumentReferenceResolver() {
        if (this.explicitReferenceDocumentReferenceResolver == null) {
            this.explicitReferenceDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, "explicit");
        }
        
        return this.explicitReferenceDocumentReferenceResolver;
    }
    
    private PageReferenceResolver<EntityReference> getPageReferenceResolver() {
        if (this.pageReferenceResolver == null) {
            this.pageReferenceResolver = Utils.getComponent(PageReferenceResolver.TYPE_REFERENCE);
        }
        
        return this.pageReferenceResolver;
    }
    
    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer() {
        if (this.defaultEntityReferenceSerializer == null) {
            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);
        }
        
        return this.defaultEntityReferenceSerializer;
    }
    
    private EntityReferenceSerializer<String> getUidStringEntityReferenceSerializer() {
        if (this.uidStringEntityReferenceSerializer == null) {
            this.uidStringEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "uid");
        }
        
        return this.uidStringEntityReferenceSerializer;
    }
    
    private ContextualLocalizationManager getLocalization() {
        if (this.localization == null) {
            this.localization = Utils.getComponent(ContextualLocalizationManager.class);
        }
        
        return this.localization;
    }
    
    private OldRendering getOldRendering() {
        if (this.oldRenderingProvider == null) {
            this.oldRenderingProvider = Utils.getComponent(OldRendering.TYPE_PROVIDER);
        }
        
        return this.oldRenderingProvider.get();
    }
    
    private JobProgressManager getProgress() {
        if (this.progress == null) {
            this.progress = Utils.getComponent(JobProgressManager.class);
        }
        
        return this.progress;
    }
    
    private VelocityContextFactory getVelocityContextFactory() {
        if (this.velocityContextFactory == null) {
            this.velocityContextFactory = Utils.getComponent(VelocityContextFactory.class);
        }
        
        return this.velocityContextFactory;
    }
    
    private EntityReferenceFactory getEntityReferenceFactory() {
        if (this.entityReferenceFactory == null && Utils.getRootComponentManager() != null) {
            try {
                this.entityReferenceFactory = Utils.getRootComponentManager().getInstance(EntityReferenceFactory.class);
            }
             catch (ComponentLookupException e) {
            }
            
        }
        
        return this.entityReferenceFactory;
    }
    
    private <E extends EntityReference> E intern(E reference) {
        EntityReferenceFactory factory = getEntityReferenceFactory();
        return factory != null ? factory.getReference(reference) : reference;
    }
    
    private String localizePlainOrKey(String key, Object... parameters) {
        return StringUtils.defaultString(getLocalization().getTranslationPlain(key, parameters), key);
    }
    
    private UserReferenceSerializer<DocumentReference> getUserReferenceDocumentReferenceSerializer() {
        return Utils.getComponent(UserReferenceSerializer.TYPE_DOCUMENT_REFERENCE, "document");
    }
    
    private UserReferenceResolver<DocumentReference> getUserReferenceDocumentReferenceResolver() {
        return Utils.getComponent(UserReferenceResolver.TYPE_DOCUMENT_REFERENCE, "document");
    }
    
    private UserReferenceSerializer<String> getUserReferenceStringSerializer() {
        return Utils.getComponent(UserReferenceSerializer.TYPE_STRING);
    }
    
    private UserReferenceResolver<String> getUserReferenceStringResolver() {
        return Utils.getComponent(UserReferenceResolver.TYPE_STRING);
    }
    
    private UserReferenceSerializer<String> getUserReferenceCompactWikiSerializer() {
        return Utils.getComponent(UserReferenceSerializer.TYPE_STRING, "compactwiki/document");
    }
    
    private LinkStore getLinkStore() {
        return Utils.getComponent(LinkStore.class);        
    }
    
    public XWikiStoreInterface getStore(XWikiContext context) {
        return context.getWiki().getStore();
    }
    
    @Deprecated
(since = "9.9RC1")
    public XWikiAttachmentStoreInterface getAttachmentStore(XWikiContext context) {
        return context.getWiki().getAttachmentStore();
    }
    
    public XWikiVersioningStoreInterface getVersioningStore(XWikiContext context) {
        return context.getWiki().getVersioningStore();
    }
    
    public XWikiStoreInterface getStore() {
        return this.store;
    }
    
    public void setStore(XWikiStoreInterface store) {
        this.store = store;
    }
    
    private RenderingContext getRenderingContext() {
        if (this.renderingContext == null) {
            this.renderingContext = Utils.getComponent(RenderingContext.class);
        }
        
        return this.renderingContext;
    }
    
    private String getLocalKey() {
        if (this.localKeyCache == null) {
            this.localKeyCache = LocalUidStringEntityReferenceSerializer.INSTANCE.serialize(getDocumentReferenceWithLocale());
        }
        
        return this.localKeyCache;
    }
    
    public String getKey() {
        if (this.keyCache == null) {
            this.keyCache = getUidStringEntityReferenceSerializer().serialize(getDocumentReferenceWithLocale());
        }
        
        return this.keyCache;
    }
    
    public int hashCode() {
        return (int) Util.getHash(getLocalKey());
    }
    
    public long getId() {
        this.id = Util.getHash(getLocalKey());
        return this.id;
    }
    
    public void setId(long id) {
        this.id = id;
    }
    
    @Deprecated
(since = "2.2M1")
    public String getSpace() {
        return LOCAL_REFERENCE_SERIALIZER.serialize(getDocumentReference().getLastSpaceReference());
    }
    
    @Deprecated
(since = "2.2M1")
    public void setSpace(String spaces) {
        if (spaces != null) {
            DocumentReference reference = getDocumentReference();
            EntityReference spaceReference = getRelativeEntityReferenceResolver().resolve(spaces, EntityType.SPACE);
            spaceReference = spaceReference.appendParent(getDocumentReference().getWikiReference());
            setDocumentReferenceInternal( new DocumentReference(reference.getName(), new SpaceReference(spaceReference)));
        }
        
    }
    
    public String getWeb() {
        return getSpace();
    }
    
    public void setWeb(String space) {
        setSpace(space);
    }
    
    public String getVersion() {
        return getRCSVersion().toString();
    }
    
    public void setVersion(String version) {
        if (!StringUtils.isEmpty(version)) {
            this.version = new Version(version);
        }
        
    }
    
    public Version getRCSVersion() {
        if (this.version == null) {
            return new Version("1.1");
        }
        
        return this.version;
    }
    
    public void setRCSVersion(Version version) {
        this.version = version;
    }
    
    public XWikiDocument getOriginalDocument() {
        return this.originalDocument;
    }
    
    public void setOriginalDocument(XWikiDocument originalDocument) {
        this.originalDocument = originalDocument;
    }
    
    public DocumentReference getParentReference() {
        if (this.parentReferenceCache == null && getRelativeParentReference() != null) {
            this.parentReferenceCache = intern(getExplicitReferenceDocumentReferenceResolver() .resolve(getRelativeParentReference(), getDocumentReference()));
        }
        
        return this.parentReferenceCache;
    }
    
    @Deprecated
(since = "2.2M1")
    public String getParent() {
        String parentReferenceAsString;
        if (getParentReference() != null) {
            parentReferenceAsString = getDefaultEntityReferenceSerializer().serialize(getRelativeParentReference());
        }
         else {
            parentReferenceAsString = "";
        }
        
        return parentReferenceAsString;
    }
    
    @Deprecated
(since = "2.2M1")
    public XWikiDocument getParentDoc() {
        return new XWikiDocument(getParentReference());
    }
    
    public void setParentReference(EntityReference parentReference) {
        if (!Objects.equals(getRelativeParentReference(), parentReference)) {
            this.parentReference = intern(parentReference);
            this.parentReferenceCache = null;
            setMetaDataDirty(true);
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public void setParent(String parent) {
        if (StringUtils.isEmpty(parent)) {
            setParentReference((EntityReference) null);
        }
         else {
            setParentReference(getRelativeEntityReferenceResolver().resolve(parent, EntityType.DOCUMENT));
        }
        
    }
    
    public String getContent() {
        return this.content;
    }
    
    public void setContent(String content) {
        if (content == null) {
            content = "";
        }
        
        boolean notEqual = !content.equals(this.content);
        this.content = content;
        if (notEqual) {
            this.xdomCache = null;
            setContentDirty(true);
            setWikiNode(null);
        }
        
    }
    
    public void setContent(XDOM content) throws XWikiException {
        setContent(renderXDOM(content, getSyntax()));
    }
    
    private RenderingCache getRenderingCache() {
        if (this.renderingCache == null) {
            this.renderingCache = Utils.getComponent((Type) RenderingCache.class);
        }
        
        return this.renderingCache;
    }
    
    private DocumentDisplayer getDocumentDisplayer() {
        if (this.documentDisplayer == null) {
            this.documentDisplayer = Utils.getComponent((Type) DocumentDisplayer.class, "configured");
        }
        
        return this.documentDisplayer;
    }
    
    private Syntax getOutputSyntax() {
        return getRenderingContext().getTargetSyntax();
    }
    
    private String display(Syntax targetSyntax, boolean executionContextIsolated, boolean transformationContextIsolated, boolean transformationContextRestricted, boolean translate) throws XWikiException {
        getProgress().startStep(this, "document.progress.render", "Render document [{}] in syntax [{}]", getDocumentReference(), targetSyntax);
        try {
            getProgress().pushLevelProgress(3, getDocumentReference());
            getProgress().startStep(getDocumentReference(), "document.progress.render.translatedcontent", "Get translated content");
            XWikiContext xcontext = getXWikiContext();
            XWikiDocument tdoc = translate ? getTranslatedDocument(xcontext) : this;
            String translatedContent = tdoc.getContent();
            getProgress().startStep(getDocumentReference(), "document.progress.render.cache", "Try to get content from the cache");
            String renderedContent = getRenderingCache().getRenderedContent(tdoc.getDocumentReferenceWithLocale(), translatedContent, xcontext);
            if (renderedContent == null) {
                getProgress().startStep(getDocumentReference(), "document.progress.render.execute", "Execute content");
                DocumentDisplayerParameters parameters = new DocumentDisplayerParameters();
                parameters.setExecutionContextIsolated(executionContextIsolated);
                parameters.setTransformationContextIsolated(transformationContextIsolated);
                parameters.setTransformationContextRestricted(transformationContextRestricted);
                parameters.setContentTranslated(tdoc != this);
                parameters.setTargetSyntax(targetSyntax);
                XDOM contentXDOM = getDocumentDisplayer().display(this, parameters);
                renderedContent = renderXDOM(contentXDOM, targetSyntax);
                getRenderingCache().setRenderedContent(getDocumentReference(), translatedContent, renderedContent, xcontext);
            }
            
            return renderedContent;
        }
         finally {
            getProgress().popLevelProgress(getDocumentReference());
            getProgress().endStep(this);
        }
        
    }
    
    public String getRenderedContent(Syntax targetSyntax, XWikiContext context) throws XWikiException {
        return getRenderedContent(targetSyntax, true, context);
    }
    
    public String getRenderedContent(boolean transformationContextIsolated, XWikiContext context) throws XWikiException {
        return getRenderedContent(getOutputSyntax(), transformationContextIsolated, context);
    }
    
    public String displayDocument(XWikiContext context) throws XWikiException {
        return displayDocument(getOutputSyntax(), context);
    }
    
    public String displayDocument(boolean restricted, XWikiContext context) throws XWikiException {
        return displayDocument(getOutputSyntax(), restricted, context);
    }
    
    public String displayDocument(Syntax targetSyntax, XWikiContext context) throws XWikiException {
        return getRenderedContent(targetSyntax, true, false, context, false);
    }
    
    public String displayDocument(Syntax targetSyntax, boolean restricted, XWikiContext context) throws XWikiException {
        return getRenderedContent(targetSyntax, true, restricted, context, false);
    }
    
    public String getRenderedContent(Syntax targetSyntax, boolean transformationContextIsolated, XWikiContext context) throws XWikiException {
        return getRenderedContent(targetSyntax, transformationContextIsolated, false, context, true);
    }
    
    private String getRenderedContent(Syntax targetSyntax, boolean transformationContextIsolated, boolean transformationContextRestricted, XWikiContext context, boolean retrieveTranslation) throws XWikiException {
        Object currentSdoc = context.get("sdoc");
        try {
            XWikiDocument sdoc;
            if (retrieveTranslation) {
                sdoc = getTranslatedDocument(context);
            }
             else {
                sdoc = this;
            }
            
            context.put("sdoc", sdoc);
            return display(targetSyntax, false, transformationContextIsolated, transformationContextRestricted, retrieveTranslation);
        }
         finally {
            context.put("sdoc", currentSdoc);
        }
        
    }
    
    public String getRenderedContent(XWikiContext context) throws XWikiException {
        return getRenderedContent(getOutputSyntax(), context);
    }
    
    public String getRenderedContent(String text, String syntaxId, XWikiContext context) {
        return getRenderedContent(text, syntaxId, getOutputSyntax().toIdString(), context);
    }
    
    public String getRenderedContent(String text, String syntaxId, boolean restrictedTransformationContext, XWikiContext context) {
        return getRenderedContent(text, syntaxId, getOutputSyntax().toIdString(), restrictedTransformationContext, context);
    }
    
    public String getRenderedContent(String text, String syntaxId, boolean restrictedTransformationContext, XWikiDocument sDocument, XWikiContext context) {
        return getRenderedContent(text, syntaxId, getOutputSyntax().toIdString(), restrictedTransformationContext, sDocument, context);
    }
    
    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId, XWikiContext context) {
        return getRenderedContent(text, sourceSyntaxId, targetSyntaxId, false, context);
    }
    
    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId, boolean restrictedTransformationContext, XWikiContext context) {
        return getRenderedContent(text, sourceSyntaxId, targetSyntaxId, restrictedTransformationContext, null, context);
    }
    
    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId, boolean restrictedTransformationContext, XWikiDocument sDocument, XWikiContext context) {
        try {
            return getRenderedContent(text, Syntax.valueOf(sourceSyntaxId), Syntax.valueOf(targetSyntaxId), restrictedTransformationContext, sDocument, true, context);
        }
         catch (ParseException e) {
            LOGGER.warn("Failed to render content [{}]", text, e);
        }
        
        return "";
    }
    
    public String getRenderedContent(String text, Syntax sourceSyntaxId, XWikiDocument sDocument, boolean isolated, XWikiContext context) {
        return getRenderedContent(text, sourceSyntaxId, getOutputSyntax(), false, sDocument, isolated, context);
    }
    
    public String getRenderedContent(String text, Syntax sourceSyntaxId, boolean restrictedTransformationContext, XWikiDocument sDocument, boolean isolated, XWikiContext context) {
        return getRenderedContent(text, sourceSyntaxId, getOutputSyntax(), restrictedTransformationContext, sDocument, isolated, context);
    }
    
    public String getRenderedContent(String text, Syntax sourceSyntaxId, Syntax targetSyntaxId, boolean restrictedTransformationContext, XWikiDocument sDocument, boolean isolated, XWikiContext context) {
        Map<String, Object> backup = null;
        getProgress().startStep(this, "document.progress.renderText", "Execute content [{}] in the context of document [{}]", StringUtils.substring(text, 0, 100) + (text.length() >= 100 ? "..." : ""), getDocumentReference());
        XWikiDocument currentSDocument = (XWikiDocument) context.get(CKEY_SDOC);
        try {
            if (isolated && context.getDoc() != this) {
                backup = new HashMap<>();
                backupContext(backup, context);
                setAsContextDoc(context);
            }
            
            if (sDocument != null) {
                context.put(CKEY_SDOC, sDocument);
            }
            
            XWikiDocument fakeDocument = new XWikiDocument(getDocumentReference());
            fakeDocument.setSyntax(sourceSyntaxId);
            fakeDocument.setContent(text);
            return fakeDocument.display(targetSyntaxId, false, isolated, restrictedTransformationContext, false);
        }
         catch (Exception e) {
            LOGGER.warn("Failed to render content [{}]", text, e);
        }
         finally {
            if (backup != null) {
                restoreContext(backup, context);
            }
            
            context.put(CKEY_SDOC, currentSDocument);
            getProgress().endStep(this);
        }
        
        return "";
    }
    
    public String getEscapedContent(XWikiContext context) throws XWikiException {
        return XMLUtils.escape(getTranslatedContent(context));
    }
    
    @Deprecated
(since = "2.2M1")
    public String getName() {
        return getDocumentReference().getName();
    }
    
    @Deprecated
(since = "2.2M1")
    public void setName(String name) {
        if (name != null) {
            DocumentReference reference = getDocumentReference();
            setDocumentReferenceInternal( new DocumentReference(name, new SpaceReference(reference.getParent()), reference.getLocale()));
        }
        
    }
    
    public DocumentReference getDocumentReference() {
        return this.documentReference;
    }
    
    public PageReference getPageReference() {
        if (this.pageReferenceCache == null) {
            this.pageReferenceCache = intern(getPageReferenceResolver().resolve(getDocumentReference()));
        }
        
        return this.pageReferenceCache;
    }
    
    public PageReference getPageReferenceWithLocale() {
        if (this.pageReferenceWithLocaleCache == null) {
            this.pageReferenceWithLocaleCache = intern(new PageReference(getPageReference(), getLocale()));
        }
        
        return this.pageReferenceWithLocaleCache;
    }
    
    public DocumentReference getDocumentReferenceWithLocale() {
        if (this.documentReferenceWithLocaleCache == null) {
            this.documentReferenceWithLocaleCache = intern(new DocumentReference(this.documentReference, getLocale()));
        }
        
        return this.documentReferenceWithLocaleCache;
    }
    
    @Deprecated
(since = "2.2M1")
    public String getFullName() {
        return LOCAL_REFERENCE_SERIALIZER.serialize(getDocumentReference());
    }
    
    @Deprecated
(since = "2.2M1")
    public String getPrefixedFullName() {
        return getDefaultEntityReferenceSerializer().serialize(getDocumentReference());
    }
    
    @Deprecated
(since = "2.2.3")
    public void setDocumentReference(DocumentReference reference) {
        if (reference != null) {
            DocumentReference referenceWithoutLocale = reference.getLocale() != null ? new DocumentReference(reference, (Locale) null) : reference;
            if (!referenceWithoutLocale.equals(getDocumentReference())) {
                setDocumentReferenceInternal(referenceWithoutLocale);
            }
            
        }
        
    }
    
    private void setDocumentReferenceInternal(DocumentReference reference) {
        this.documentReference = intern(reference);
        setMetaDataDirty(true);
        this.keyCache = null;
        this.localKeyCache = null;
        this.parentReferenceCache = null;
        this.documentReferenceWithLocaleCache = null;
        this.pageReferenceCache = null;
        this.pageReferenceWithLocaleCache = null;
    }
    
    @Deprecated
(since = "2.2M1")
    public void setFullName(String name) {
        setFullName(name, null);
    }
    
    @Deprecated
(since = "2.2M1")
    public void setFullName(String fullName, XWikiContext context) {
        if (fullName != null) {
            setDocumentReference(getCurrentMixedDocumentReferenceResolver().resolve(fullName));
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public String getWikiName() {
        return getDatabase();
    }
    
    @Deprecated
(since = "2.2M1")
    public String getSpaceName() {
        return this.getSpace();
    }
    
    @Deprecated
(since = "2.2M1")
    public String getPageName() {
        return this.getName();
    }
    
    public String getTitle() {
        return (this.title != null) ? this.title : "";
    }
    
    public String getRenderedTitle(Syntax outputSyntax, XWikiContext context) {
        DocumentDisplayerParameters parameters = new DocumentDisplayerParameters();
        parameters.setTitleDisplayed(true);
        parameters.setExecutionContextIsolated(true);
        parameters.setTargetSyntax(outputSyntax);
        try {
            XDOM titleXDOM = getDocumentDisplayer().display(this, parameters);
            return renderXDOM(titleXDOM, outputSyntax);
        }
         catch (Exception e) {
            LOGGER.error("Failed to render title for [{}]", getDocumentReference(), e);
            return getDocumentReference().getName();
        }
        
    }
    
    public String getRenderedTitle(XWikiContext context) {
        return getRenderedTitle(getOutputSyntax(), context);
    }
    
    public void setTitle(String title) {
        if (title != null && !title.equals(this.title)) {
            setContentDirty(true);
        }
        
        this.title = title;
    }
    
    public String getFormat() {
        return this.format != null ? this.format : "";
    }
    
    public void setFormat(String format) {
        if (!format.equals(this.format)) {
            this.format = format;
            setMetaDataDirty(true);
        }
        
    }
    
    private DocumentReference userStringToReference(String userString) {
        DocumentReference userReference;
        if (StringUtils.isEmpty(userString)) {
            userReference = null;
        }
         else {
            userReference = getExplicitReferenceDocumentReferenceResolver().resolve( getXClassEntityReferenceResolver().resolve(userString, EntityType.DOCUMENT), getDocumentReference());
            if (userReference.getName().equals(XWikiRightService.GUEST_USER)) {
                userReference = null;
            }
            
        }
        
        return userReference;
    }
    
    private String userReferenceToString(DocumentReference userReference) {
        String userString;
        if (userReference != null) {
            userString = getCompactWikiEntityReferenceSerializer().serialize(userReference, getDocumentReference());
        }
         else {
            userString = XWikiRightService.GUEST_USER_FULLNAME;
        }
        
        return userString;
    }
    
    private String userReferenceToString(UserReference userReference) {
        if ("document".equals(getUserConfiguration().getStoreHint())) {
            return getUserReferenceCompactWikiSerializer().serialize(userReference, getDocumentReference());
        }
         else {
            return getUserReferenceStringSerializer().serialize(userReference);
        }
        
    }
    
    private UserReference userStringToUserReference(String userString) {
        if ("document".equals(getUserConfiguration().getStoreHint())) {
            return getUserReferenceStringResolver().resolve(userString, getDocumentReference().getWikiReference());
        }
         else {
            return getUserReferenceStringResolver().resolve(userString);
        }
        
    }
    
    @Deprecated
(since = "14.0RC1")
    public DocumentReference getAuthorReference() {
        UserReference effectiveMetadataAuthor = getAuthors().getEffectiveMetadataAuthor();
        if (this.getAuthors().getEffectiveMetadataAuthor() != null && effectiveMetadataAuthor != GuestUserReference.INSTANCE) {
            return this.getUserReferenceDocumentReferenceSerializer().serialize(effectiveMetadataAuthor);
        }
         else {
            return null;
        }
        
    }
    
    @Deprecated
(since = "14.0RC1")
    public void setAuthorReference(DocumentReference authorReference) {
        if (authorReference == null) {
            this.authors.setEffectiveMetadataAuthor(GuestUserReference.INSTANCE);
        }
         else {
            if (authorReference.getName().equals(XWikiRightService.GUEST_USER)) {
                LOGGER.warn("A reference to XWikiGuest user has been set instead of null. This is probably a mistake.", new Exception("See stack trace"));
            }
            
            UserReference user = this.getUserReferenceDocumentReferenceResolver().resolve(authorReference);
            this.authors.setEffectiveMetadataAuthor(user);
            this.authors.setOriginalMetadataAuthor(user);
        }
        
    }
    
    public String getAuthor() {
        return userReferenceToString(getAuthorReference());
    }
    
    @Deprecated
(since = "3.0M3")
    public void setAuthor(String author) {
        setAuthorReference(userStringToReference(author));
    }
    
    @Deprecated
(since = "14.0RC1")
    public DocumentReference getContentAuthorReference() {
        UserReference contentAuthor = this.getAuthors().getContentAuthor();
        if (contentAuthor != null && contentAuthor != GuestUserReference.INSTANCE) {
            return this.getUserReferenceDocumentReferenceSerializer().serialize(contentAuthor);
        }
         else {
            return null;
        }
        
    }
    
    @Deprecated
(since = "14.0RC1")
    public void setContentAuthorReference(DocumentReference contentAuthorReference) {
        if (contentAuthorReference == null) {
            this.authors.setContentAuthor(GuestUserReference.INSTANCE);
        }
         else {
            if (contentAuthorReference.getName().equals(XWikiRightService.GUEST_USER)) {
                LOGGER.warn("A reference to XWikiGuest user has been set instead of null. This is probably a mistake.", new Exception("See stack trace"));
            }
            
            UserReference user = this.getUserReferenceDocumentReferenceResolver().resolve(contentAuthorReference);
            this.authors.setContentAuthor(user);
        }
        
    }
    
    @Deprecated
(since = "3.0M3")
    public String getContentAuthor() {
        return userReferenceToString(getContentAuthorReference());
    }
    
    @Deprecated
(since = "3.0M3")
    public void setContentAuthor(String contentAuthor) {
        setContentAuthorReference(userStringToReference(contentAuthor));
    }
    
    @Deprecated
(since = "14.0RC1")
    public DocumentReference getCreatorReference() {
        UserReference creator = this.getAuthors().getCreator();
        if (creator != null && creator != GuestUserReference.INSTANCE) {
            return this.getUserReferenceDocumentReferenceSerializer().serialize(creator);
        }
         else {
            return null;
        }
        
    }
    
    @Deprecated
(since = "14.0RC1")
    public void setCreatorReference(DocumentReference creatorReference) {
        if (creatorReference == null) {
            this.authors.setCreator(GuestUserReference.INSTANCE);
        }
         else {
            if (creatorReference.getName().equals(XWikiRightService.GUEST_USER)) {
                LOGGER.warn("A reference to XWikiGuest user has been set instead of null. This is probably a mistake.", new Exception("See stack trace"));
            }
            
            UserReference user = this.getUserReferenceDocumentReferenceResolver().resolve(creatorReference);
            this.authors.setCreator(user);
        }
        
    }
    
    @Deprecated
(since = "3.0M2")
    public String getCreator() {
        return userReferenceToString(getCreatorReference());
    }
    
    @Deprecated
(since = "3.0M2")
    public void setCreator(String creator) {
        setCreatorReference(userStringToReference(creator));
    }
    
    public Date getDate() {
        if (this.updateDate == null) {
            return new Date();
        }
         else {
            return this.updateDate;
        }
        
    }
    
    public void setDate(Date date) {
        if ((date != null) && (!date.equals(this.updateDate))) {
            setMetaDataDirty(true);
        }
        
        if (date != null) {
            date.setTime((date.getTime() / 1000) * 1000);
        }
        
        this.updateDate = date;
    }
    
    public Date getCreationDate() {
        if (this.creationDate == null) {
            return new Date();
        }
         else {
            return this.creationDate;
        }
        
    }
    
    public void setCreationDate(Date date) {
        if ((date != null) && (!date.equals(this.creationDate))) {
            setMetaDataDirty(true);
        }
        
        if (date != null) {
            date.setTime((date.getTime() / 1000) * 1000);
        }
        
        this.creationDate = date;
    }
    
    public Date getContentUpdateDate() {
        if (this.contentUpdateDate == null) {
            return new Date();
        }
         else {
            return this.contentUpdateDate;
        }
        
    }
    
    public void setContentUpdateDate(Date date) {
        if ((date != null) && (!date.equals(this.contentUpdateDate))) {
            setMetaDataDirty(true);
        }
        
        if (date != null) {
            date.setTime((date.getTime() / 1000) * 1000);
        }
        
        this.contentUpdateDate = date;
    }
    
    public String getMeta() {
        return this.meta;
    }
    
    public void setMeta(String meta) {
        if (meta == null) {
            if (this.meta != null) {
                setMetaDataDirty(true);
            }
            
        }
         else if (!meta.equals(this.meta)) {
            setMetaDataDirty(true);
        }
        
        this.meta = meta;
    }
    
    public void appendMeta(String meta) {
        StringBuilder buf = new StringBuilder(this.meta);
        buf.append(meta);
        buf.append("\n");
        this.meta = buf.toString();
        setMetaDataDirty(true);
    }
    
    public boolean isContentDirty() {
        return this.isContentDirty;
    }
    
    public void incrementVersion() {
        this.version = getNextVersion(this.version, isMinorEdit());
    }
    
    public static Version getNextVersion(Version version, boolean minorEdit) {
        if (version == null) {
            return new Version("1.1");
        }
        
        if (minorEdit) {
            return version.next();
        }
         else {
            return version.getBranchPoint().next().newBranch(1);
        }
        
    }
    
    public void setContentDirty(boolean contentDirty) {
        this.isContentDirty = contentDirty;
    }
    
    public boolean isMetaDataDirty() {
        return this.isMetaDataDirty;
    }
    
    public void setMetaDataDirty(boolean metaDataDirty) {
        this.isMetaDataDirty = metaDataDirty;
    }
    
    public String getAttachmentURL(String filename, XWikiContext context) {
        return getAttachmentURL(filename, "download", context);
    }
    
    public String getAttachmentURL(String filename, String action, XWikiContext context) {
        return getAttachmentURL(filename, action, null, context);
    }
    
    public String getExternalAttachmentURL(String filename, String action, XWikiContext context) {
        URL url = context.getURLFactory().createAttachmentURL(filename, getSpace(), getName(), action, null, getDatabase(), context);
        return url.toString();
    }
    
    public String getAttachmentURL(String filename, String action, String querystring, XWikiContext context) {
        if (StringUtils.isEmpty(filename)) {
            return null;
        }
        
        return context.getWiki().getAttachmentURL(new AttachmentReference(filename, this.getDocumentReference()), action, querystring, context);
    }
    
    public String getAttachmentRevisionURL(String filename, String revision, XWikiContext context) {
        return getAttachmentRevisionURL(filename, revision, null, context);
    }
    
    public String getAttachmentRevisionURL(String filename, String revision, String querystring, XWikiContext context) {
        if (StringUtils.isEmpty(filename)) {
            return null;
        }
        
        return context.getWiki().getAttachmentRevisionURL(new AttachmentReference(filename, getDocumentReference()), revision, querystring, context);
    }
    
    public String getURL(String action, String params, boolean redirect, XWikiContext context) {
        URL url = context.getURLFactory().createURL(getSpace(), getName(), action, params, null, getDatabase(), context);
        if (redirect && isRedirectAbsolute(context)) {
            if (url == null) {
                return null;
            }
             else {
                return url.toString();
            }
            
        }
         else {
            return context.getURLFactory().getURL(url, context);
        }
        
    }
    
    private boolean isRedirectAbsolute(XWikiContext context) {
        return StringUtils.equals("1", context.getWiki().Param("xwiki.redirect.absoluteurl"));
    }
    
    public String getURL(String action, boolean redirect, XWikiContext context) {
        return getURL(action, null, redirect, context);
    }
    
    public String getURL(String action, XWikiContext context) {
        return getURL(action, false, context);
    }
    
    public String getURL(String action, String querystring, XWikiContext context) {
        URL url = context.getURLFactory().createURL(getSpace(), getName(), action, querystring, null, getDatabase(), context);
        return context.getURLFactory().getURL(url, context);
    }
    
    public String getURL(String action, String querystring, String anchor, XWikiContext context) {
        URL url = context.getURLFactory().createURL(getSpace(), getName(), action, querystring, anchor, getDatabase(), context);
        return context.getURLFactory().getURL(url, context);
    }
    
    public String getExternalURL(String action, XWikiContext context) {
        URL url = context.getURLFactory().createExternalURL(getSpace(), getName(), action, null, null, getDatabase(), context);
        return url.toString();
    }
    
    public String getExternalURL(String action, String querystring, XWikiContext context) {
        URL url = context.getURLFactory().createExternalURL(getSpace(), getName(), action, querystring, null, getDatabase(), context);
        return url.toString();
    }
    
    public String getParentURL(XWikiContext context) throws XWikiException {
        XWikiDocument doc = new XWikiDocument(getParentReference());
        URL url = context.getURLFactory().createURL(doc.getSpace(), doc.getName(), "view", null, null, getDatabase(), context);
        return context.getURLFactory().getURL(url, context);
    }
    
    public XWikiDocumentArchive getDocumentArchive(XWikiContext context) throws XWikiException {
        loadArchive(context);
        return getDocumentArchive();
    }
    
    public com.xpn.xwiki.api.Document newDocument(String customClassName, XWikiContext context) {
        if (!((customClassName == null) || (customClassName.equals("")))) {
            try {
                return newDocument(Class.forName(customClassName), context);
            }
             catch (ClassNotFoundException e) {
                LOGGER.error("Failed to get java Class object from class name", e);
            }
            
        }
        
        return new com.xpn.xwiki.api.Document(this, context);
    }
    
    public com.xpn.xwiki.api.Document newDocument(Class<?> customClass, XWikiContext context) {
        if (customClass != null) {
            try {
                Class<?>[] classes = new Class[] { XWikiDocument.class, XWikiContext.class };
                Object[] args = new Object[] { this, context };
                return (com.xpn.xwiki.api.Document) customClass.getConstructor(classes).newInstance(args);
            }
             catch (Exception e) {
                LOGGER.error("Failed to create a custom Document object", e);
            }
            
        }
        
        return new com.xpn.xwiki.api.Document(this, context);
    }
    
    public com.xpn.xwiki.api.Document newDocument(XWikiContext context) {
        String customClass = getCustomClass();
        return newDocument(customClass, context);
    }
    
    public void loadArchive(XWikiContext context) throws XWikiException {
        if ((this.archive == null || this.archive.get() == null)) {
            XWikiDocumentArchive arch;
            if (this.isNew()) {
                arch = new XWikiDocumentArchive(getDocumentReference().getWikiReference(), getId());
            }
             else {
                arch = getVersioningStore(context).getXWikiDocumentArchive(this, context);
            }
            
            this.archive = new SoftReference<>(arch);
        }
        
    }
    
    public XWikiDocumentArchive getDocumentArchive() {
        if (this.archive != null) {
            return this.archive.get();
        }
        
        return null;
    }
    
    public XWikiDocumentArchive loadDocumentArchive() {
        XWikiDocumentArchive arch = getDocumentArchive();
        if (arch != null) {
            return arch;
        }
        
        if (this.isNew()) {
            arch = new XWikiDocumentArchive(getDocumentReference().getWikiReference(), getId());
            setDocumentArchive(arch);
            return arch;
        }
        
        XWikiContext xcontext = getXWikiContext();
        try {
            arch = getVersioningStore(xcontext).getXWikiDocumentArchive(this, xcontext);
            setDocumentArchive(arch);
            return arch;
        }
         catch (Exception e) {
            LOGGER.warn("Could not get document archive", e);
            return null;
        }
        
    }
    
    public void setDocumentArchive(XWikiDocumentArchive arch) {
        if (arch != null) {
            this.archive = new SoftReference<XWikiDocumentArchive>(arch);
        }
         else {
            this.archive = null;
        }
        
    }
    
    public void setDocumentArchive(String sarch) throws XWikiException {
        XWikiDocumentArchive xda = new XWikiDocumentArchive(getDocumentReference().getWikiReference(), getId());
        xda.setArchive(sarch);
        setDocumentArchive(xda);
    }
    
    public Version[] getRevisions(XWikiContext context) throws XWikiException {
        return getVersioningStore(context).getXWikiDocVersions(this, context);
    }
    
    public String[] getRecentRevisions(int nb, XWikiContext context) throws XWikiException {
        try {
            Version[] revisions = getVersioningStore(context).getXWikiDocVersions(this, context);
            int length = nb;
            if (nb == 0) {
                length = revisions.length;
            }
            
            if (revisions.length < length) {
                length = revisions.length;
            }
            
            String[] recentrevs = new String[length];
            for (int i = 1; i <= length; i++) {
                recentrevs[i - 1] = revisions[revisions.length - i].toString();
            }
            
            return recentrevs;
        }
         catch (Exception e) {
            return new String[0];
        }
        
    }
    
    public List<String> getRevisions(RevisionCriteria criteria, XWikiContext context) throws XWikiException {
        List<String> results = new ArrayList<String>();
        Version[] revisions = getRevisions(context);
        XWikiRCSNodeInfo nextNodeinfo = null;
        XWikiRCSNodeInfo nodeinfo;
        for (Version revision : revisions) {
            nodeinfo = nextNodeinfo;
            nextNodeinfo = getRevisionInfo(revision.toString(), context);
            if (nodeinfo == null) {
                continue;
            }
            
            if (criteria.getIncludeMinorVersions() || !nextNodeinfo.isMinorEdit()) {
                if (criteria.getAuthor().equals("") || criteria.getAuthor().equals(nodeinfo.getAuthor())) {
                    Date versionDate = nodeinfo.getDate();
                    if (versionDate.after(criteria.getMinDate()) && versionDate.before(criteria.getMaxDate())) {
                        results.add(nodeinfo.getVersion().toString());
                    }
                    
                }
                
            }
            
        }
        
        nodeinfo = nextNodeinfo;
        if (nodeinfo != null) {
            if (criteria.getAuthor().equals("") || criteria.getAuthor().equals(nodeinfo.getAuthor())) {
                Date versionDate = nodeinfo.getDate();
                if (versionDate.after(criteria.getMinDate()) && versionDate.before(criteria.getMaxDate())) {
                    results.add(nodeinfo.getVersion().toString());
                }
                
            }
            
        }
        
        return criteria.getRange().subList(results);
    }
    
    public XWikiRCSNodeInfo getRevisionInfo(String version, XWikiContext context) throws XWikiException {
        return getDocumentArchive(context).getNode(new Version(version));
    }
    
    public boolean isMostRecent() {
        return this.mostRecent;
    }
    
    public void setMostRecent(boolean mostRecent) {
        this.mostRecent = mostRecent;
    }
    
    public BaseClass getXClass() {
        if (this.xClass == null) {
            BaseClass emptyClass = new BaseClass();
            emptyClass.setDirty(false);
            this.setXClass(emptyClass);
        }
        
        return this.xClass;
    }
    
    public void setXClass(BaseClass xwikiClass) {
        xwikiClass.setOwnerDocument(this);
        this.xClass = xwikiClass;
    }
    
    public Map<DocumentReference, List<BaseObject>> getXObjects() {
        return (Map) this.publicXObjects;
    }
    
    public void setXObjects(Map<DocumentReference, List<BaseObject>> objects) {
        if (objects == null) {
            objects = new HashMap<>();
        }
        
        boolean isDirty = false;
        for (List<BaseObject> objList : objects.values()) {
            for (BaseObject obj : objList) {
                obj.setOwnerDocument(this);
                isDirty = true;
            }
            
        }
        
        if (isDirty) {
            setMetaDataDirty(true);
        }
        
        Map<DocumentReference, BaseObjects> objectsCopy = new ConcurrentSkipListMap<>();
        objects.forEach((k, v) -> objectsCopy.put(k, new BaseObjects(v)));
        this.xObjects = objectsCopy;
    }
    
    public BaseObject getXObject() {
        return getXObject(getDocumentReference());
    }
    
    @Deprecated
(since = "2.2M1")
    public BaseObject getxWikiObject() {
        return getXObject(getDocumentReference());
    }
    
    public List<BaseClass> getXClasses(XWikiContext context) {
        List<BaseClass> list = new ArrayList<BaseClass>();
        for (DocumentReference classReference : getXObjects().keySet()) {
            BaseClass bclass = null;
            List<BaseObject> objects = getXObjects(classReference);
            for (BaseObject obj : objects) {
                if (obj != null) {
                    bclass = obj.getXClass(context);
                    if (bclass != null) {
                        break;
                    }
                    
                }
                
            }
            
            if (bclass != null) {
                list.add(bclass);
            }
            
        }
        
        return list;
    }
    
    public int createXObject(EntityReference classReference, XWikiContext context) throws XWikiException {
        DocumentReference absoluteClassReference = resolveClassReference(classReference);
        BaseObject object = BaseClass.newCustomClassInstance(absoluteClassReference, context);
        object.setOwnerDocument(this);
        object.setXClassReference(classReference);
        BaseObjects objects = this.xObjects.get(absoluteClassReference);
        if (objects == null) {
            objects = new BaseObjects();
            this.xObjects.put(absoluteClassReference, objects);
        }
        
        objects.add(object);
        int nb = objects.size() - 1;
        object.setNumber(nb);
        setMetaDataDirty(true);
        return nb;
    }
    
    @Deprecated
(since = "2.2M1")
    public int createNewObject(String className, XWikiContext context) throws XWikiException {
        return createXObject( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), context);
    }
    
    public int getXObjectSize(DocumentReference classReference) {
        try {
            return getXObjects().get(classReference).size();
        }
         catch (Exception e) {
            return 0;
        }
        
    }
    
    public int getXObjectSize(EntityReference classReference) {
        return getXObjectSize(resolveClassReference(classReference));
    }
    
    @Deprecated
(since = "2.2M1")
    public int getObjectNumbers(String className) {
        return getXObjectSize(resolveClassReference(className));
    }
    
    public List<BaseObject> getXObjects(DocumentReference classReference) {
        List<BaseObject> xobjects = null;
        if (classReference != null) {
            xobjects = getXObjects().get(classReference);
        }
        
        return xobjects != null ? xobjects : Collections.emptyList();
    }
    
    public List<BaseObject> getXObjects(EntityReference reference) {
        if (reference.getType() == EntityType.DOCUMENT) {
            return getXObjects( getCurrentReferenceDocumentReferenceResolver().resolve(reference, getDocumentReference()));
        }
        
        return Collections.emptyList();
    }
    
    @Deprecated
(since = "2.2M1")
    public Vector<BaseObject> getObjects(String className) {
        List<BaseObject> result = this.xObjects.get(resolveClassReference(className));
        return result == null ? null : new Vector<BaseObject>(result);
    }
    
    public void setXObjects(DocumentReference classReference, List<BaseObject> objects) {
        List<BaseObject> existingbjects = this.xObjects.get(classReference);
        if (existingbjects != null) {
            existingbjects.clear();
        }
        
        for (BaseObject obj : objects) {
            obj.setOwnerDocument(this);
        }
        
        this.xObjects.put(classReference, new BaseObjects(objects));
        setMetaDataDirty(true);
    }
    
    public BaseObject getXObject(EntityReference reference) {
        if (reference instanceof DocumentReference) {
            return getXObject((DocumentReference) reference);
        }
         else if (reference.getType() == EntityType.DOCUMENT) {
            return getXObject( getCurrentReferenceDocumentReferenceResolver().resolve(reference, getDocumentReference()));
        }
         else if (reference.getType() == EntityType.OBJECT) {
            return getXObject(getCurrentReferenceObjectReferenceResolver().resolve(reference, getDocumentReference()));
        }
        
        return null;
    }
    
    public BaseObject getXObject(DocumentReference classReference) {
        BaseObject result = null;
        List<BaseObject> objects = getXObjects().get(classReference);
        if (objects != null) {
            for (BaseObject object : objects) {
                if (object != null) {
                    result = object;
                    break;
                }
                
            }
            
        }
        
        return result;
    }
    
    public BaseObject getXObject(ObjectReference objectReference) {
        BaseObjectReference baseObjectReference = getBaseObjectReference(objectReference);
        return baseObjectReference.getObjectNumber() == null ? this.getXObject(baseObjectReference.getXClassReference()) : getXObject(baseObjectReference.getXClassReference(), baseObjectReference.getObjectNumber());
    }
    
    public BaseObject getXObject(ObjectReference objectReference, boolean create, XWikiContext context) throws XWikiException {
        BaseObjectReference baseObjectReference = getBaseObjectReference(objectReference);
        if (baseObjectReference.getObjectNumber() == null) {
            return getXObject(baseObjectReference.getXClassReference(), create, context);
        }
         else {
            return getXObject(baseObjectReference.getXClassReference(), baseObjectReference.getObjectNumber(), create, context);
        }
        
    }
    
    private BaseObjectReference getBaseObjectReference(ObjectReference objectReference) {
        if (objectReference instanceof BaseObjectReference) {
            return (BaseObjectReference) objectReference;
        }
         else {
            return new BaseObjectReference(objectReference);
        }
        
    }
    
    public BaseProperty<ObjectPropertyReference> getXObjectProperty(ObjectPropertyReference objectPropertyReference) {
        BaseObject object = getXObject((ObjectReference) objectPropertyReference.getParent());
        if (object != null) {
            return (BaseProperty<ObjectPropertyReference>) object.getField(objectPropertyReference.getName());
        }
        
        return null;
    }
    
    @Deprecated
(since = "2.2M1")
    public BaseObject getObject(String className) {
        return getXObject(resolveClassReference(className));
    }
    
    public BaseObject getXObject(DocumentReference classReference, int nb) {
        List<BaseObject> objects = getXObjects().get(classReference);
        if (objects != null && objects.size() > nb) {
            return objects.get(nb);
        }
        
        return null;
    }
    
    public BaseObject getXObject(EntityReference classReference, int number, boolean create, XWikiContext xcontext) throws XWikiException {
        DocumentReference absoluteClassReference = resolveClassReference(classReference);
        BaseObject xobject = getXObject(absoluteClassReference, number);
        if (xobject == null && create) {
            xobject = BaseClass.newCustomClassInstance(absoluteClassReference, xcontext);
            setXObject(number, xobject);
        }
        
        return xobject;
    }
    
    public BaseObject getXObject(EntityReference classReference, int nb) {
        return getXObject( getCurrentReferenceDocumentReferenceResolver().resolve(classReference, getDocumentReference()), nb);
    }
    
    @Deprecated
(since = "2.2M1")
    public BaseObject getObject(String className, int nb) {
        return getXObject(resolveClassReference(className), nb);
    }
    
    public BaseObject getXObject(DocumentReference classReference, String key, String value) {
        return getXObject(classReference, key, value, false);
    }
    
    @Deprecated
(since = "2.2M1")
    public BaseObject getObject(String className, String key, String value) {
        return getObject(className, key, value, false);
    }
    
    public BaseObject getXObject(EntityReference reference, String key, String value, boolean failover) {
        if (reference instanceof DocumentReference) {
            return getXObject((DocumentReference) reference, key, value, failover);
        }
         else if (reference.getType() == EntityType.DOCUMENT) {
            return getXObject(getCurrentReferenceDocumentReferenceResolver().resolve(reference, getDocumentReference()), key, value, failover);
        }
        
        return null;
    }
    
    public BaseObject getXObject(DocumentReference classReference, String key, String value, boolean failover) {
        try {
            if (value == null) {
                if (failover) {
                    return getXObject(classReference);
                }
                 else {
                    return null;
                }
                
            }
            
            List<BaseObject> objects = getXObjects().get(classReference);
            if ((objects == null) || (objects.size() == 0)) {
                return null;
            }
            
            for (BaseObject obj : objects) {
                if (obj != null) {
                    if (value.equals(obj.getStringValue(key))) {
                        return obj;
                    }
                    
                }
                
            }
            
            if (failover) {
                return getXObject(classReference);
            }
             else {
                return null;
            }
            
        }
         catch (Exception e) {
            if (failover) {
                return getXObject(classReference);
            }
            
            LOGGER.warn("Exception while accessing objects for document [{}]: {}", getDocumentReference(), e.getMessage(), e);
            return null;
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public BaseObject getObject(String className, String key, String value, boolean failover) {
        return getXObject(resolveClassReference(className), key, value, failover);
    }
    
    public void addXObject(DocumentReference classReference, BaseObject object) {
        List<BaseObject> vobj = this.xObjects.get(classReference);
        if (vobj == null) {
            setXObject(classReference, 0, object);
        }
         else {
            setXObject(classReference, vobj.size(), object);
        }
        
    }
    
    public void addXObject(BaseObject object) {
        object.setOwnerDocument(this);
        List<BaseObject> vobj = this.xObjects.get(object.getXClassReference());
        if (vobj == null) {
            setXObject(0, object);
        }
         else {
            setXObject(vobj.size(), object);
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public void addObject(String className, BaseObject object) {
        addXObject(resolveClassReference(className), object);
    }
    
    public void setXObject(DocumentReference classReference, int nb, BaseObject object) {
        if (object != null) {
            object.setOwnerDocument(this);
            object.setNumber(nb);
        }
        
        BaseObjects objects = this.xObjects.get(classReference);
        if (objects == null) {
            objects = new BaseObjects();
            this.xObjects.put(classReference, objects);
        }
        
        while (nb >= objects.size()) {
            objects.add(null);
        }
        
        objects.set(nb, object);
        setMetaDataDirty(true);
    }
    
    public void setXObject(int nb, BaseObject object) {
        object.setOwnerDocument(this);
        object.setNumber(nb);
        BaseObjects objects = this.xObjects.get(object.getXClassReference());
        if (objects == null) {
            objects = new BaseObjects();
            this.xObjects.put(object.getXClassReference(), objects);
        }
        
        while (nb >= objects.size()) {
            objects.add(null);
        }
        
        objects.set(nb, object);
        setMetaDataDirty(true);
    }
    
    @Deprecated
(since = "2.2M1")
    public void setObject(String className, int nb, BaseObject object) {
        setXObject(resolveClassReference(className), nb, object);
    }
    
    public boolean isNew() {
        return this.isNew;
    }
    
    public void setNew(boolean aNew) {
        this.isNew = aNew;
    }
    
    public void mergeXClass(XWikiDocument templatedoc) {
        BaseClass bclass = getXClass();
        BaseClass tbclass = templatedoc.getXClass();
        if (tbclass != null) {
            if (bclass == null) {
                setXClass(tbclass.clone());
            }
             else {
                getXClass().merge(tbclass.clone());
            }
            
        }
        
        setMetaDataDirty(true);
    }
    
    @Deprecated
(since = "2.2M1")
    public void mergexWikiClass(XWikiDocument templatedoc) {
        mergeXClass(templatedoc);
    }
    
    public void mergeXObjects(XWikiDocument templateDoc) {
        for (Map.Entry<DocumentReference, List<BaseObject>> entry : templateDoc.getXObjects().entrySet()) {
            DocumentReference classReference = entry.getKey().replaceParent(entry.getKey().getWikiReference(), getDocumentReference().getWikiReference());
            if (getXObjectSize(classReference) == 0) {
                for (BaseObject object : entry.getValue()) {
                    if (object != null) {
                        addXObject(object.duplicate());
                    }
                    
                }
                
            }
            
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public void mergexWikiObjects(XWikiDocument templatedoc) {
        mergeXObjects(templatedoc);
    }
    
    public void cloneXObjects(XWikiDocument templatedoc) {
        cloneXObjects(templatedoc, true);
    }
    
    public void duplicateXObjects(XWikiDocument templatedoc) {
        cloneXObjects(templatedoc, false);
    }
    
    private void cloneXObjects(XWikiDocument templatedoc, boolean keepsIdentity) {
        this.xObjects.clear();
        for (Map.Entry<DocumentReference, List<BaseObject>> entry : templatedoc.getXObjects().entrySet()) {
            List<BaseObject> tobjects = entry.getValue();
            for (BaseObject otherObject : tobjects) {
                if (otherObject != null) {
                    if (keepsIdentity) {
                        addXObject(otherObject.clone());
                    }
                     else {
                        BaseObject newObject = otherObject.duplicate(getDocumentReference());
                        setXObject(newObject.getNumber(), newObject);
                    }
                    
                }
                 else if (keepsIdentity) {
                    addXObject(entry.getKey(), null);
                }
                
            }
            
        }
        
    }
    
    public DocumentReference getTemplateDocumentReference() {
        return this.templateDocumentReference;
    }
    
    @Deprecated
(since = "2.2M1")
    public String getTemplate() {
        String templateReferenceAsString;
        DocumentReference templateDocumentReference = getTemplateDocumentReference();
        if (templateDocumentReference != null) {
            templateReferenceAsString = LOCAL_REFERENCE_SERIALIZER.serialize(templateDocumentReference);
        }
         else {
            templateReferenceAsString = "";
        }
        
        return templateReferenceAsString;
    }
    
    public void setTemplateDocumentReference(DocumentReference templateDocumentReference) {
        if (!Objects.equals(getTemplateDocumentReference(), templateDocumentReference)) {
            this.templateDocumentReference = templateDocumentReference;
            setMetaDataDirty(true);
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public void setTemplate(String template) {
        DocumentReference templateReference = null;
        if (!StringUtils.isEmpty(template)) {
            templateReference = getCurrentMixedDocumentReferenceResolver().resolve(template);
        }
        
        setTemplateDocumentReference(templateReference);
    }
    
    public String displayPrettyName(String fieldname, XWikiContext context) {
        return displayPrettyName(fieldname, false, true, context);
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, XWikiContext context) {
        return displayPrettyName(fieldname, showMandatory, true, context);
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, XWikiContext context) {
        try {
            BaseObject object = getXObject();
            if (object == null) {
                object = getFirstObject(fieldname, context);
            }
            
            return displayPrettyName(fieldname, showMandatory, before, object, context);
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public String displayPrettyName(String fieldname, BaseObject obj, XWikiContext context) {
        return displayPrettyName(fieldname, false, true, obj, context);
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, BaseObject obj, XWikiContext context) {
        return displayPrettyName(fieldname, showMandatory, true, obj, context);
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, BaseObject obj, XWikiContext context) {
        try {
            PropertyClass pclass = (PropertyClass) obj.getXClass(context).get(fieldname);
            String dprettyName = "";
            if (showMandatory) {
                dprettyName = context.getWiki().addMandatory(context);
            }
            
            if (before) {
                return dprettyName + pclass.getPrettyName(context);
            }
             else {
                return pclass.getPrettyName(context) + dprettyName;
            }
            
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public String displayTooltip(String fieldname, XWikiContext context) {
        try {
            BaseObject object = getXObject();
            if (object == null) {
                object = getFirstObject(fieldname, context);
            }
            
            return displayTooltip(fieldname, object, context);
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public String displayTooltip(String fieldname, BaseObject obj, XWikiContext context) {
        String result = "";
        try {
            PropertyClass pclass = (PropertyClass) obj.getXClass(context).get(fieldname);
            String tooltip = pclass.getTooltip(context);
            if ((tooltip != null) && (!tooltip.trim().equals(""))) {
                String img = "<img src=\"" + context.getWiki().getSkinFile("info.gif", context) + "\" class=\"tooltip_image\" align=\"middle\" />";
                result = context.getWiki().addTooltip(img, tooltip, context);
            }
            
        }
         catch (Exception e) {
        }
        
        return result;
    }
    
    public String display(String fieldname, XWikiContext context) {
        String result = "";
        try {
            BaseObject object = getXObject();
            if (object == null) {
                object = getFirstObject(fieldname, context);
            }
            
            result = display(fieldname, object, context);
        }
         catch (Exception e) {
            LOGGER.error("Failed to display field [" + fieldname + "] of document [" + getDefaultEntityReferenceSerializer().serialize(getDocumentReference()) + "]", e);
        }
        
        return result;
    }
    
    public String display(String fieldname, BaseObject obj, XWikiContext context) {
        String type = null;
        try {
            type = (String) context.get("display");
        }
         catch (Exception e) {
        }
        
        if (type == null) {
            type = "view";
        }
        
        return display(fieldname, type, obj, context);
    }
    
    public String display(String fieldname, String mode, XWikiContext context) {
        return display(fieldname, mode, "", context);
    }
    
    public String display(String fieldname, String type, BaseObject obj, XWikiContext context) {
        return display(fieldname, type, obj, true, context);
    }
    
    public String display(String fieldname, String type, BaseObject obj, boolean isolated, XWikiContext context) {
        return display(fieldname, type, "", obj, isolated, context);
    }
    
    public String display(String fieldname, String mode, String prefix, XWikiContext context) {
        try {
            BaseObject object = getXObject();
            if (object == null) {
                object = getFirstObject(fieldname, context);
            }
            
            if (object == null) {
                return "";
            }
             else {
                return display(fieldname, mode, prefix, object, context);
            }
            
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public String display(String fieldname, String type, BaseObject obj, String wrappingSyntaxId, XWikiContext context) {
        return display(fieldname, type, "", obj, wrappingSyntaxId, context);
    }
    
    public String display(String fieldname, String type, String pref, BaseObject obj, XWikiContext context) {
        return display(fieldname, type, pref, obj, true, context);
    }
    
    public String display(String fieldname, String type, String pref, BaseObject obj, boolean isolated, XWikiContext context) {
        return display(fieldname, type, pref, obj, context.getWiki().getCurrentContentSyntaxId(getSyntaxId(), context), isolated, context);
    }
    
    public String display(String fieldname, String type, String pref, BaseObject obj, String wrappingSyntaxId, XWikiContext context) {
        return display(fieldname, type, pref, obj, wrappingSyntaxId, true, context);
    }
    
    public String display(String fieldname, String type, String pref, BaseObject obj, String wrappingSyntaxId, boolean isolated, XWikiContext context) {
        if (obj == null) {
            return "";
        }
        
        boolean isInRenderingEngine = BooleanUtils.toBoolean((Boolean) context.get("isInRenderingEngine"));
        HashMap<String, Object> backup = new HashMap<String, Object>();
        XWikiDocument currentSDoc = (XWikiDocument )context.get(CKEY_SDOC);
        try {
            if (isolated) {
                backupContext(backup, context);
                setAsContextDoc(context);
            }
            
            XWikiDocument sdoc = obj.getOwnerDocument();
            if (sdoc != null && !Objects.equals(sdoc.getContentAuthorReference(), sdoc.getAuthorReference())) {
                sdoc = sdoc.clone();
                sdoc.setContentAuthorReference(sdoc.getAuthorReference());
                context.put(CKEY_SDOC, sdoc);
            }
            
            type = type.toLowerCase();
            StringBuffer result = new StringBuffer();
            PropertyClass pclass = (PropertyClass) obj.getXClass(context).get(fieldname);
            String prefix = pref + LOCAL_REFERENCE_SERIALIZER.serialize(obj.getXClass(context).getDocumentReference()) + "_" + obj.getNumber() + "_";
            if (pclass == null) {
                return "";
            }
             else if (pclass.isCustomDisplayed(context)) {
                pclass.displayCustom(result, fieldname, prefix, type, obj, context);
            }
             else if (type.equals("view")) {
                pclass.displayView(result, fieldname, prefix, obj, isolated, context);
            }
             else if (type.equals("rendered")) {
                String fcontent = pclass.displayView(fieldname, prefix, obj, context);
                if (is10Syntax(wrappingSyntaxId)) {
                    result.append(getRenderedContent(fcontent, getSyntaxId(), context));
                }
                 else {
                    result.append(fcontent);
                }
                
            }
             else if (type.equals("edit")) {
                context.addDisplayedField(fieldname);
                if (is10Syntax(wrappingSyntaxId)) {
                    if (isInRenderingEngine) {
                        result.append("{pre}");
                    }
                    
                }
                
                pclass.displayEdit(result, fieldname, prefix, obj, context);
                if (is10Syntax(wrappingSyntaxId)) {
                    if (isInRenderingEngine) {
                        result.append("{/pre}");
                    }
                    
                }
                
            }
             else if (type.equals("hidden")) {
                if (is10Syntax(wrappingSyntaxId) && isInRenderingEngine) {
                    result.append("{pre}");
                }
                
                pclass.displayHidden(result, fieldname, prefix, obj, context);
                if (is10Syntax(wrappingSyntaxId) && isInRenderingEngine) {
                    result.append("{/pre}");
                }
                
            }
             else if (type.equals("search")) {
                Method searchMethod = null;
                for (Method method : pclass.getClass().getMethods()) {
                    if (method.getName().equals("displaySearch") && method.getParameterTypes().length == 5) {
                        searchMethod = method;
                        break;
                    }
                    
                }
                
                if (searchMethod != null) {
                    if (is10Syntax(wrappingSyntaxId) && isInRenderingEngine) {
                        result.append("{pre}");
                    }
                    
                    prefix = LOCAL_REFERENCE_SERIALIZER.serialize(obj.getXClass(context).getDocumentReference()) + "_";
                    searchMethod.invoke(pclass, result, fieldname, prefix, context.get("query"), context);
                    if (is10Syntax(wrappingSyntaxId) && isInRenderingEngine) {
                        result.append("{/pre}");
                    }
                    
                }
                 else {
                    pclass.displayView(result, fieldname, prefix, obj, context);
                }
                
            }
             else {
                pclass.displayView(result, fieldname, prefix, obj, context);
            }
            
            if (isInRenderingEngine && !is10Syntax(wrappingSyntaxId) && HTMLUtils.containsElementText(result)) {
                result.insert(0, "{{html clean=\"false\" wiki=\"false\"}}");
                result.append("{{/html}}");
            }
            
            return result.toString();
        }
         catch (Exception ex) {
            LOGGER.warn("Failed to display field [" + fieldname + "] in [" + type + "] mode for Object of Class [" + getDefaultEntityReferenceSerializer().serialize(obj.getDocumentReference()) + "]", ex);
            return "";
        }
         finally {
            if (!backup.isEmpty()) {
                restoreContext(backup, context);
            }
            
            context.put(CKEY_SDOC, currentSDoc);
        }
        
    }
    
    public String displayForm(DocumentReference classReference, String header, String format, XWikiContext context) {
        return displayForm(classReference, header, format, true, context);
    }
    
    @Deprecated
(since = "2.2M1")
    public String displayForm(String className, String header, String format, XWikiContext context) {
        return displayForm(className, header, format, true, context);
    }
    
    public String displayForm(DocumentReference classReference, String header, String format, boolean linebreak, XWikiContext context) {
        List<BaseObject> objects = getXObjects(classReference);
        if (format.endsWith("\\n")) {
            linebreak = true;
        }
        
        BaseObject firstobject = null;
        Iterator<BaseObject> foit = objects.iterator();
        while ((firstobject == null) && foit.hasNext()) {
            firstobject = foit.next();
        }
        
        if (firstobject == null) {
            return "";
        }
        
        BaseClass bclass = firstobject.getXClass(context);
        if (bclass.getPropertyList().size() == 0) {
            return "";
        }
        
        StringBuilder result = new StringBuilder();
        VelocityContext vcontext;
        try {
            vcontext = getVelocityContextFactory().createContext();
        }
         catch (XWikiVelocityException e) {
            LOGGER.error("Failed to create a standard VelocityContext", e);
            vcontext = new XWikiVelocityContext();
        }
        
        for (String propertyName : bclass.getPropertyList()) {
            PropertyClass pclass = (PropertyClass) bclass.getField(propertyName);
            vcontext.put(pclass.getName(), pclass.getPrettyName());
        }
        
        result.append(evaluate(header, context.getDoc().getPrefixedFullName(), vcontext, context));
        if (linebreak) {
            result.append("\n");
        }
        
        for (int i = 0; i < objects.size(); i++) {
            vcontext.put("id", Integer.valueOf(i + 1));
            BaseObject object = objects.get(i);
            if (object != null) {
                for (String name : bclass.getPropertyList()) {
                    vcontext.put(name, display(name, object, context));
                }
                
                result.append(evaluate(format, context.getDoc().getPrefixedFullName(), vcontext, context));
                if (linebreak) {
                    result.append("\n");
                }
                
            }
            
        }
        
        return result.toString();
    }
    
    private String evaluate(String content, String name, VelocityContext vcontext, XWikiContext context) {
        StringWriter writer = new StringWriter();
        try {
            VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);
            velocityManager.getVelocityEngine().evaluate(vcontext, writer, name, content);
            return writer.toString();
        }
         catch (Exception e) {
            LOGGER.error("Error while parsing velocity template namespace [{}]", name, e);
            Object[] args = { name };
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_RENDERING_VELOCITY_EXCEPTION, "Error while parsing velocity page {0}", e, args);
            return Util.getHTMLExceptionMessage(xe, context);
        }
        
    }
    
    @Deprecated
(since = "2.2M1")
    public String displayForm(String className, String header, String format, boolean linebreak, XWikiContext context) {
        return displayForm(resolveClassReference(className), header, format, linebreak, context);
    }
    
    public String displayForm(DocumentReference classReference, XWikiContext context) {
        List<BaseObject> objects = getXObjects(classReference);
        if (objects == null) {
            return "";
        }
        
        BaseObject firstobject = null;
        Iterator<BaseObject> foit = objects.iterator();
        while ((firstobject == null) && foit.hasNext()) {
            firstobject = foit.next();
        }
        
        if (firstobject == null) {
            return "";
        }
        
        BaseClass bclass = firstobject.getXClass(context);
        if (bclass.getPropertyList().size() == 0) {
            return "";
        }
        
        StringBuilder result = new StringBuilder();
        result.append("{table}\n");
        boolean first = true;
        for (String propertyName : bclass.getPropertyList()) {
            if (first == true) {
                first = false;
            }
             else {
                result.append("|");
            }
            
            PropertyClass pclass = (PropertyClass) bclass.getField(propertyName);
            result.append(pclass.getPrettyName());
        }
        
        result.append("\n");
        for (int i = 0; i < objects.size(); i++) {
            BaseObject object = objects.get(i);
            if (object != null) {
                first = true;
                for (String propertyName : bclass.getPropertyList()) {
                    if (first == true) {
                        first = false;
                    }
                     else {
                        result.append("|");
                    }
                    
                    String data = display(propertyName, object, context);
                    data = data.trim();
                    data = data.replaceAll("\n", " ");
                    if (data.length() == 0) {
                        result.append("&nbsp;");
                    }
                     else {
                        result.append(data);
                    }
                    
                }
                
                result.append("\n");
            }
            
        }
        
        result.append("{table}\n");
        return result.toString();
    }
    
    @Deprecated
(since = "2.2M1")
    public String displayForm(String className, XWikiContext context) {
        return displayForm(resolveClassReference(className), context);
    }
    
    public boolean isFromCache() {
        return this.fromCache;
    }
    
    public void setFromCache(boolean fromCache) {
        this.fromCache = fromCache;
    }
    
    public void readDocMetaFromForm(EditForm eform, XWikiContext context) throws XWikiException {
        String defaultLanguage = eform.getDefaultLanguage();
        if (defaultLanguage != null) {
            setDefaultLanguage(defaultLanguage);
        }
        
        String defaultTemplate = eform.getDefaultTemplate();
        if (defaultTemplate != null) {
            setDefaultTemplate(defaultTemplate);
        }
        
        String creator = eform.getCreator();
        if ((creator != null) && (!creator.equals(getCreator()))) {
            if ((getCreatorReference().equals(context.getUserReference())) || (context.getWiki().getRightService().hasAdminRights(context))) {
                setCreator(creator);
            }
            
        }
        
        String parent = eform.getParent();
        if (parent != null) {
            setParent(parent);
        }
        
        String comment = eform.getComment();
        if (comment != null) {
            setComment(comment);
        }
        
        setMinorEdit(eform.isMinorEdit());
        String tags = eform.getTags();
        if (!StringUtils.isEmpty(tags)) {
            setTags(tags, context);
        }
        
        String syntaxId = eform.getSyntaxId();
        if (syntaxId != null) {
            setSyntax(resolveSyntax(syntaxId));
        }
        
        if (eform.getHidden() != null) {
            setHidden("1".equals(eform.getHidden()));
        }
        
    }
    
    private Syntax resolveSyntax(String syntaxId) {
        Syntax syntax;
        try {
            syntax = getSyntaxRegistry().resolveSyntax(syntaxId);
        }
         catch (ParseException e) {
            syntax = getDefaultDocumentSyntax();
            LOGGER.warn("Failed to set syntax [{}] for [{}], setting syntax [{}] instead.", syntaxId, getDefaultEntityReferenceSerializer().serialize(getDocumentReference()), syntax.toIdString(), e);
        }
        
        return syntax;
    }
    
    public void setTags(String tagsStr, XWikiContext context) throws XWikiException {
        BaseClass tagsClass = context.getWiki().getTagClass(context);
        StaticListClass tagProp = (StaticListClass) tagsClass.getField(XWikiConstant.TAG_CLASS_PROP_TAGS);
        BaseObject tags = getObject(XWikiConstant.TAG_CLASS, true, context);
        tags.safeput(XWikiConstant.TAG_CLASS_PROP_TAGS, tagProp.fromString(tagsStr));
        setMetaDataDirty(true);
    }
    
    public String getTags(XWikiContext context) {
        ListProperty prop = (ListProperty) getTagProperty(context);
        return prop != null ? prop.toFormString() : "";
    }
    
    public List<String> getTagsList(XWikiContext context) {
        List<String> tagList = null;
        BaseProperty prop = getTagProperty(context);
        if (prop != null) {
            tagList = (List<String>) prop.getValue();
        }
        
        return tagList;
    }
    
    private BaseProperty getTagProperty(XWikiContext context) {
        BaseObject tags = getObject(XWikiConstant.TAG_CLASS);
        return tags != null ? ((BaseProperty) tags.safeget(XWikiConstant.TAG_CLASS_PROP_TAGS)) : null;
    }
    
    public List<String> getTagsPossibleValues(XWikiContext context) {
        List<String> list;
        try {
            BaseClass tagsClass = context.getWiki().getTagClass(context);
            String possibleValues = ((StaticListClass) tagsClass.getField(XWikiConstant.TAG_CLASS_PROP_TAGS)).getValues();
            return ListClass.getListFromString(possibleValues);
        }
         catch (XWikiException e) {
            LOGGER.error("Failed to get tag class", e);
            list = Collections.emptyList();
        }
        
        return list;
    }
    
    public void readTranslationMetaFromForm(EditForm eform, XWikiContext context) throws XWikiException {
        String content = eform.getContent();
        if (content != null) {
            content = context.getUtil().substitute("s/<br class=\"htmlarea\" \\/>/\r\n/g", content);
            setContent(content);
        }
        
        String title = eform.getTitle();
        if (title != null) {
            setTitle(title);
        }
        
    }
    
    public void readObjectsFromForm(EditForm eform, XWikiContext context) throws XWikiException {
        for (DocumentReference reference : getXObjects().keySet()) {
            List<BaseObject> oldObjects = getXObjects(reference);
            BaseObjects newObjects = new BaseObjects();
            while (newObjects.size() < oldObjects.size()) {
                newObjects.add(null);
            }
            
            for (int i = 0; i < oldObjects.size(); i++) {
                BaseObject oldobject = oldObjects.get(i);
                if (oldobject != null) {
                    BaseClass baseclass = oldobject.getXClass(context);
                    BaseObject newobject = (BaseObject) baseclass.fromMap( eform.getObject( LOCAL_REFERENCE_SERIALIZER.serialize(baseclass.getDocumentReference()) + "_" + i), oldobject);
                    newobject.setNumber(oldobject.getNumber());
                    newobject.setGuid(oldobject.getGuid());
                    newobject.setOwnerDocument(this);
                    newObjects.set(newobject.getNumber(), newobject);
                }
                
            }
            
            getXObjects().put(reference, newObjects);
        }
        
    }
    
    public void readObjectsFromFormUpdateOrCreate(EditForm eform, XWikiContext context) throws XWikiException {
        Map<String, SortedMap<Integer, Map<String, String[]>>> updateOrCreateMap = eform.getUpdateOrCreateMap();
        for (Entry<String, SortedMap<Integer, Map<String, String[]>>> requestClassEntries : updateOrCreateMap .entrySet()) {
            String className = requestClassEntries.getKey();
            DocumentReference requestClassReference = getCurrentDocumentReferenceResolver().resolve(className);
            SortedMap<Integer, Map<String, String[]>> requestObjectMap = requestClassEntries.getValue();
            for (Entry<Integer, Map<String, String[]>> requestObjectEntry : requestObjectMap.entrySet()) {
                Integer requestObjectNumber = requestObjectEntry.getKey();
                Map<String, String[]> requestObjectPropertyMap = requestObjectEntry.getValue();
                List<String> properties = new ArrayList<>(requestObjectPropertyMap.keySet());
                try {
                    BaseClass xClass = context.getWiki().getDocument(requestClassReference, context).getXClass();
                    for (String property : properties) {
                        if (!xClass.getPropertyList().contains(property)) {
                            requestObjectPropertyMap.remove(property);
                        }
                        
                    }
                    
                }
                 catch (XWikiException e) {
                    LOGGER.warn("Failed to load document [{}], ignoring properties update [{}]. Reason: [{}]", requestClassReference, StringUtils.join(properties, ","), ExceptionUtils.getRootCauseMessage(e));
                    continue;
                }
                
                if (!requestObjectPropertyMap.isEmpty()) {
                    BaseObject oldObject = getXObject(requestClassReference, requestObjectNumber, true, context);
                    BaseClass baseClass = oldObject.getXClass(context);
                    BaseObject newObject = (BaseObject) baseClass.fromMap(requestObjectPropertyMap, oldObject);
                    newObject.setNumber(oldObject.getNumber());
                    newObject.setGuid(oldObject.getGuid());
                    newObject.setOwnerDocument(this);
                    setXObject(requestObjectNumber, newObject);
                }
                
            }
            
        }
        
    }
    
    public void readFromForm(EditForm eform, XWikiContext context) throws XWikiException {
        readDocMetaFromForm(eform, context);
        readTranslationMetaFromForm(eform, context);
        readAddedUpdatedAndRemovedObjectsFromForm(eform, context);
        readTemporaryUploadedFiles(eform);
    }
    
    private TemporaryAttachmentSessionsManager getTemporaryAttachmentManager() {
        return Utils.getComponent(TemporaryAttachmentSessionsManager.class);
    }
    
    public void readTemporaryUploadedFiles(EditForm editForm) {
        getTemporaryAttachmentManager().attachTemporaryAttachmentsInDocument(this, editForm.getTemporaryUploadedFiles());
    }
    
    public void readAddedUpdatedAndRemovedObjectsFromForm(EditForm eform, XWikiContext context) throws XWikiException {
        Map<String, List<Integer>> objectsToAdd = eform.getObjectsToAdd();
        for (String className : objectsToAdd.keySet()) {
            DocumentReference classReference = resolveClassReference(className);
            List<Integer> classIds = objectsToAdd.get(className);
            for (Integer classId : classIds) {
                getXObject(classReference, classId, true, context);
            }
            
        }
        
        ObjectPolicyType objectPolicy = eform.getObjectPolicy();
        if (objectPolicy == null || objectPolicy.equals(ObjectPolicyType.UPDATE)) {
            readObjectsFromForm(eform, context);
        }
         else if (objectPolicy.equals(ObjectPolicyType.UPDATE_OR_CREATE)) {
            readObjectsFromFormUpdateOrCreate(eform, context);
        }
        
        Map<String, List<Integer>> objectsToRemove = eform.getObjectsToRemove();
        for (String className : objectsToRemove.keySet()) {
            DocumentReference classReference = resolveClassReference(className);
            List<Integer> classIds = objectsToRemove.get(className);
            for (Integer classId : classIds) {
                BaseObject xObject = getXObject(classReference, classId);
                if (xObject != null) {
                    removeXObject(xObject);
                }
                
            }
            
        }
        
    }
    
    public void readFromTemplate(DocumentReference templateDocumentReference, XWikiContext context) throws XWikiException {
        if (templateDocumentReference != null) {
            String content = getContent();
            if (!content.equals("\n") && !content.equals("") && !isNew()) {
                Object[] args = { getDefaultEntityReferenceSerializer().serialize(getDocumentReference()) };
                throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY, "Cannot add a template to document {0} because it already has content", null, args);
            }
             else {
                XWiki xwiki = context.getWiki();
                XWikiDocument templatedoc = xwiki.getDocument(templateDocumentReference, context);
                if (templatedoc.isNew()) {
                    Object[] args = { getDefaultEntityReferenceSerializer().serialize(templateDocumentReference), getCompactEntityReferenceSerializer().serialize(getDocumentReference()) };
                    throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_APP_TEMPLATE_DOES_NOT_EXIST, "Template document {0} does not exist when adding to document {1}", null, args);
                }
                 else {
                    setTemplateDocumentReference(templateDocumentReference);
                    setTitle(templatedoc.getTitle());
                    setContent(templatedoc.getContent());
                    setSyntax(templatedoc.getSyntax());
                    if (getParentReference() == null) {
                        setParentReference(templatedoc.getRelativeParentReference());
                    }
                    
                    if (isNew()) {
                        setXObjects(new TreeMap<DocumentReference, List<BaseObject>>());
                    }
                    
                    mergeXObjects(templatedoc);
                    copyAttachments(templatedoc, false);
                }
                
            }
            
        }
        
    }
    
    public void clone(XWikiDocument document) {
        this.id = document.id;
        setDocumentReference(document.getDocumentReference());
        setRCSVersion(document.getRCSVersion());
        setDocumentArchive(document.getDocumentArchive());
        setAuthorReference(document.getAuthorReference());
        setContentAuthorReference(document.getContentAuthorReference());
        setContent(document.getContent());
        setCreationDate(document.getCreationDate());
        setDate(document.getDate());
        setCustomClass(document.getCustomClass());
        setContentUpdateDate(document.getContentUpdateDate());
        setTitle(document.getTitle());
        setFormat(document.getFormat());
        setFromCache(document.isFromCache());
        setElements(document.getElements());
        setMeta(document.getMeta());
        setMostRecent(document.isMostRecent());
        setNew(document.isNew());
        setStore(document.getStore());
        setTemplateDocumentReference(document.getTemplateDocumentReference());
        setParentReference(document.getRelativeParentReference());
        setCreatorReference(document.getCreatorReference());
        setDefaultLocale(document.getDefaultLocale());
        setDefaultTemplate(document.getDefaultTemplate());
        setValidationScript(document.getValidationScript());
        setLocale(document.getLocale());
        setXClass(document.getXClass().clone());
        setXClassXML(document.getXClassXML());
        setComment(document.getComment());
        setMinorEdit(document.isMinorEdit());
        setSyntax(document.getSyntax());
        setHidden(document.isHidden());
        cloneXObjects(document);
        cloneAttachments(document);
        setContentDirty(document.isContentDirty());
        setMetaDataDirty(document.isMetaDataDirty());
        this.elements = document.elements;
        this.originalDocument = document.originalDocument;
    }
    
    public XWikiDocument clone() {
        return cloneInternal(getDocumentReference(), true, false);
    }
    
    public XWikiDocument duplicate(DocumentReference newDocumentReference) {
        return cloneInternal(newDocumentReference, false, false);
    }
    
    private void cloneDocumentArchive(XWikiDocument originalDocument) throws XWikiException {
        XWikiDocumentArchive documentArchive = originalDocument.getDocumentArchive();
        if (documentArchive != null) {
            this.setDocumentArchive(documentArchive.clone(this.getId(), getXWikiContext()));
        }
        
    }
    
    private XWikiDocument cloneInternal(DocumentReference newDocumentReference, boolean keepsIdentity, boolean cloneArchive) {
        XWikiDocument doc = null;
        try {
            Constructor<? extends XWikiDocument> constructor = getClass().getConstructor(DocumentReference.class);
            doc = constructor.newInstance(newDocumentReference);
            doc.setLocale(getLocale());
            doc.version = this.version;
            doc.id = this.id;
            if (cloneArchive) {
                doc.cloneDocumentArchive(this);
            }
             else {
                doc.setDocumentArchive((XWikiDocumentArchive) null);
            }
            
            doc.getAuthors().copyAuthors(getAuthors());
            doc.setContent(getContent());
            doc.setCreationDate(getCreationDate());
            doc.setDate(getDate());
            doc.setCustomClass(getCustomClass());
            doc.setContentUpdateDate(getContentUpdateDate());
            doc.setTitle(getTitle());
            doc.setFormat(getFormat());
            doc.setFromCache(isFromCache());
            doc.setElements(getElements());
            doc.setMeta(getMeta());
            doc.setMostRecent(isMostRecent());
            doc.setNew(isNew());
            doc.setStore(getStore());
            doc.setTemplateDocumentReference(getTemplateDocumentReference());
            doc.setParentReference(getRelativeParentReference());
            doc.setDefaultLocale(getDefaultLocale());
            doc.setDefaultTemplate(getDefaultTemplate());
            doc.setValidationScript(getValidationScript());
            doc.setComment(getComment());
            doc.setMinorEdit(isMinorEdit());
            doc.setSyntax(getSyntax());
            doc.setHidden(isHidden());
            if (this.xClass != null) {
                doc.setXClass(this.xClass.clone());
            }
            
            if (keepsIdentity) {
                doc.setXClassXML(getXClassXML());
                doc.cloneXObjects(this);
                doc.cloneAttachments(this);
            }
             else {
                doc.getXClass().setCustomMapping(null);
                doc.duplicateXObjects(this);
                doc.copyAttachments(this);
            }
            
            doc.setContentDirty(isContentDirty());
            doc.setMetaDataDirty(isMetaDataDirty());
            doc.elements = this.elements;
            doc.originalDocument = this.originalDocument;
        }
         catch (Exception e) {
            LOGGER.error("Exception while cloning document", e);
        }
        
        return doc;
    }
    
    private void cloneAttachments(final XWikiDocument sourceDocument) {
        this.getAttachmentList().clear();
        for (XWikiAttachment attach : sourceDocument.getAttachmentList()) {
            XWikiAttachment newAttach = (XWikiAttachment) attach.clone();
            setAttachment(newAttach);
        }
        
    }
    
    public void copyAttachments(XWikiDocument sourceDocument) {
        copyAttachments(sourceDocument, true);
    }
    
    private void copyAttachments(XWikiDocument sourceDocument, boolean overwrite) {
        if (overwrite) {
            getAttachmentList().clear();
        }
        
        for (XWikiAttachment attachment : sourceDocument.getAttachmentList()) {
            if (overwrite || this.getAttachment(attachment.getFilename()) == null) {
                try {
                    copyAttachment(attachment, true);
                }
                 catch (XWikiException e) {
                    LOGGER.warn("Cannot copy attachment [{}] from [{}] to [{}]. Root cause is [{}].", attachment.getFilename(), sourceDocument.getDocumentReference(), this.getDocumentReference(), ExceptionUtils.getRootCauseMessage(e));
                    continue;
                }
                
            }
            
        }
        
    }
    
    private void copyAttachment(XWikiAttachment attachment, boolean reset) throws XWikiException {
        XWikiContext xcontext = getXWikiContext();
        XWikiAttachment newAttachment = attachment.clone();
        newAttachment.setDoc(attachment.getDoc(), false);
        newAttachment.loadAttachmentContent(xcontext);
        newAttachment.getAttachment_content().setContentDirty(true);
        if (reset) {
            newAttachment.setRCSVersion(null);
            newAttachment.setAuthorReference(xcontext.getUserReference());
            newAttachment.setDate(new Date());
        }
        
        setAttachment(newAttachment);
    }
    
    public void loadAttachmentsContent(XWikiContext context) throws XWikiException {
        for (XWikiAttachment attachment : getAttachmentList()) {
            attachment.loadAttachmentContent(context);
        }
        
    }
    
    public void loadAttachmentsContentSafe(XWikiContext context) {
        for (XWikiAttachment attachment : getAttachmentList()) {
            try {
                attachment.loadAttachmentContent(context);
            }
             catch (XWikiException e) {
                LOGGER.warn("Failed to load attachment [{}]: {}", attachment.getReference(), ExceptionUtils.getRootCauseMessage(e));
            }
            
        }
        
    }
    
    public void loadAttachments(XWikiContext context) throws XWikiException {
        for (XWikiAttachment attachment : getAttachmentList()) {
            attachment.loadAttachmentContent(context);
            attachment.loadArchive(context);
        }
        
    }
    
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        
        XWikiDocument doc = (XWikiDocument) object;
        if (!getDocumentReference().equals(doc.getDocumentReference())) {
            return false;
        }
        
        if (!getDefaultLocale().equals(doc.getDefaultLocale())) {
            return false;
        }
        
        if (!getLocale().equals(doc.getLocale())) {
            return false;
        }
        
        if (getTranslation() != doc.getTranslation()) {
            return false;
        }
        
        if (ObjectUtils.notEqual(getAuthorReference(), doc.getAuthorReference())) {
            return false;
        }
        
        if (ObjectUtils.notEqual(getContentAuthorReference(), doc.getContentAuthorReference())) {
            return false;
        }
        
        if (ObjectUtils.notEqual(getCreatorReference(), doc.getCreatorReference())) {
            return false;
        }
        
        if (!getVersion().equals(doc.getVersion())) {
            return false;
        }
        
        if (getDate().getTime() != doc.getDate().getTime()) {
            return false;
        }
        
        if (getContentUpdateDate().getTime() != doc.getContentUpdateDate().getTime()) {
            return false;
        }
        
        if (getCreationDate().getTime() != doc.getCreationDate().getTime()) {
            return false;
        }
        
        if (!getComment().equals(doc.getComment())) {
            return false;
        }
        
        if (isMinorEdit() != doc.isMinorEdit()) {
            return false;
        }
        
        if (!equalsData(doc)) {
            return false;
        }
        
        return true;
    }
    
    public boolean equalsData(XWikiDocument otherDocument) {
        if (this == otherDocument) {
            return true;
        }
        
        if (ObjectUtils.notEqual(getParentReference(), otherDocument.getParentReference())) {
            return false;
        }
        
        if (!getFormat().equals(otherDocument.getFormat())) {
            return false;
        }
        
        if (!getTitle().equals(otherDocument.getTitle())) {
            return false;
        }
        
        if (!getContent().equals(otherDocument.getContent())) {
            return false;
        }
        
        if (!getDefaultTemplate().equals(otherDocument.getDefaultTemplate())) {
            return false;
        }
        
        if (!getValidationScript().equals(otherDocument.getValidationScript())) {
            return false;
        }
        
        if (ObjectUtils.notEqual(getSyntax(), otherDocument.getSyntax())) {
            return false;
        }
        
        if (isHidden() != otherDocument.isHidden()) {
            return false;
        }
        
        if (!getXClass().equals(otherDocument.getXClass())) {
            return false;
        }
        
        Set<DocumentReference> myObjectClassReferences = getXObjects().keySet();
        Set<DocumentReference> otherObjectClassReferences = otherDocument.getXObjects().keySet();
        if (!myObjectClassReferences.equals(otherObjectClassReferences)) {
            return false;
        }
        
        for (DocumentReference reference : myObjectClassReferences) {
            List<BaseObject> myObjects = getXObjects(reference);
            List<BaseObject> otherObjects = otherDocument.getXObjects(reference);
            if (myObjects.size() != otherObjects.size()) {
                return false;
            }
            
            for (int i = 0; i < myObjects.size(); i++) {
                if ((myObjects.get(i) == null && otherObjects.get(i) != null) || (myObjects.get(i) != null && otherObjects.get(i) == null)) {
                    return false;
                }
                
                if (myObjects.get(i) == null && otherObjects.get(i) == null) {
                    continue;
                }
                
                if (!myObjects.get(i).equals(otherObjects.get(i))) {
                    return false;
                }
                
            }
            
        }
        
        List<XWikiAttachment> attachments = getAttachmentList();
        List<XWikiAttachment> otherAttachments = otherDocument.getAttachmentList();
        if (attachments.size() != otherAttachments.size()) {
            return false;
        }
        
        for (XWikiAttachment attachment : attachments) {
            XWikiAttachment otherAttachment = otherDocument.getAttachment(attachment.getFilename());
            try {
                if (otherAttachment == null || !attachment.equalsData(otherAttachment, null)) {
                    return false;
                }
                
            }
             catch (XWikiException e) {
                throw new RuntimeException( String.format("Failed to compare attachments with reference [%s]", attachment.getReference()), e);
            }
            
        }
        
        return true;
    }
    
    public String getXMLContent(XWikiContext context) throws XWikiException {
        XWikiDocument tdoc = getTranslatedDocument(context);
        return tdoc.toXML(true, true, false, false, context);
    }
    
    public String toXML(XWikiContext context) throws XWikiException {
        return toXML(true, false, false, false, context);
    }
    
    public String toFullXML(XWikiContext context) throws XWikiException {
        return toXML(true, false, true, true, context);
    }
    
    @Deprecated
(since = "4.1M2")
    public void addToZip(ZipOutputStream zos, String zipname, boolean withVersions, XWikiContext context) throws XWikiException, IOException {
        ZipEntry zipentry = new ZipEntry(zipname);
        zos.putNextEntry(zipentry);
        toXML(zos, true, false, true, withVersions, context);
        zos.closeEntry();
    }
    
    @Deprecated
(since = "4.2M2")
    public void addToZip(ZipOutputStream zos, boolean withVersions, XWikiContext context) throws XWikiException, IOException {
        String zipname = getDocumentReference().getLastSpaceReference().getName() + "/" + getDocumentReference().getName();
        String language = getLanguage();
        if (!StringUtils.isEmpty(language)) {
            zipname += "." + language;
        }
        
        addToZip(zos, zipname, withVersions, context);
    }
    
    @Deprecated
(since = "4.1M2")
    public void addToZip(ZipOutputStream zos, XWikiContext context) throws XWikiException, IOException {
        addToZip(zos, true, context);
    }
    
    public String toXML(boolean bWithObjects, boolean bWithRendering, boolean bWithAttachmentContent, boolean bWithVersions, XWikiContext context) throws XWikiException {
        StringWriter writer = new StringWriter();
        toXML(new DefaultWriterOutputTarget(writer), bWithObjects, bWithRendering, bWithAttachmentContent, bWithVersions, true, context != null ? context.getWiki().getEncoding() : StandardCharsets.UTF_8.name());
        return writer.toString();
    }
    
    @Deprecated
(since = "9.0RC1")
    public Document toXMLDocument(XWikiContext context) throws XWikiException {
        return toXMLDocument(true, false, false, false, context);
    }
    
    @Deprecated
(since = "9.0RC1")
    public Document toXMLDocument(boolean bWithObjects, boolean bWithRendering, boolean bWithAttachmentContent, boolean bWithVersions, XWikiContext context) throws XWikiException {
        Document doc = new DOMDocument();
        DOMXMLWriter wr = new DOMXMLWriter(doc, new OutputFormat("", true, context.getWiki().getEncoding()));
        try {
            toXML(wr, bWithObjects, bWithRendering, bWithAttachmentContent, bWithVersions, context);
            return doc;
        }
         catch (IOException e) {
            throw new RuntimeException(e);
        }
        
    }
    
    @Deprecated
(since = "9.0RC1")
    public void toXML(XMLWriter wr, boolean bWithObjects, boolean bWithRendering, boolean bWithAttachmentContent, boolean bWithVersions, XWikiContext context) throws XWikiException, IOException {
        DocumentResult domResult = new DocumentResult();
        toXML(new DefaultResultOutputTarget(domResult), bWithObjects, bWithRendering, bWithAttachmentContent, bWithVersions, true, context != null ? context.getWiki().getEncoding() : StandardCharsets.UTF_8.name());
        wr.write(domResult.getDocument().getRootElement());
    }
    
    public void toXML(OutputStream out, boolean bWithObjects, boolean bWithRendering, boolean bWithAttachmentContent, boolean bWithVersions, XWikiContext context) throws XWikiException, IOException {
        toXML(new DefaultOutputStreamOutputTarget(out), bWithObjects, bWithRendering, bWithAttachmentContent, bWithVersions, true, context != null ? context.getWiki().getEncoding() : StandardCharsets.UTF_8.name());
    }
    
    public void toXML(OutputTarget out, boolean bWithObjects, boolean bWithRendering, boolean bWithAttachmentContent, boolean bWithVersions, boolean format, String encoding) throws XWikiException {
        DocumentInstanceInputProperties documentProperties = new DocumentInstanceInputProperties();
        documentProperties.setWithWikiObjects(bWithObjects);
        documentProperties.setWithWikiDocumentContentHTML(bWithRendering);
        documentProperties.setWithWikiAttachmentsContent(bWithAttachmentContent);
        documentProperties.setWithJRCSRevisions(bWithVersions);
        documentProperties.setWithRevisions(false);
        XAROutputProperties xarProperties = new XAROutputProperties();
        xarProperties.setPreserveVersion(bWithVersions);
        xarProperties.setEncoding(encoding);
        xarProperties.setFormat(format);
        xarProperties.setTarget(out);
        toXML(documentProperties, xarProperties);
    }
    
    public void toXML(DocumentInstanceInputProperties documentProperties, XAROutputProperties xarProperties) throws XWikiException {
        try {
            Utils.getComponent(XWikiDocumentFilterUtils.class).exportEntity(this, xarProperties.getTarget(), xarProperties, documentProperties);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_DOC, XWikiException.ERROR_XWIKI_DOC_EXPORT, "Error serializing XML", e, null);
        }
        
    }
    
    protected String encodedXMLStringAsUTF8(String xmlString) {
        if (xmlString == null) {
            return "";
        }
        
        int length = xmlString.length();
        char character;
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < length; i++) {
            character = xmlString.charAt(i);
            switch (character) {
                case '&':
                    result.append("&amp;");
                    break;
                case '"':
                    result.append("&quot;");
                    break;
                case '<':
                    result.append("&lt;");
                    break;
                case '>':
                    result.append("&gt;");
                    break;
                case '\n':
                    result.append("\n");
                    break;
                case '\r':
                    result.append("\r");
                    break;
                case '\t':
                    result.append("\t");
                    break;
                default: if (character < 0x20) {
                    }
                     else if (character > 0x7F) {
                        result.append("&#x");
                        result.append(Integer.toHexString(character).toUpperCase());
                        result.append(";");
                    }
                     else {
                        result.append(character);
                    }
                    
                    break;
            }
            
        }
        
        return result.toString();
    }
    
    protected String getElement(Element docel, String name) {
        Element el = docel.element(name);
        if (el == null) {
            return "";
        }
         else {
            return el.getText();
        }
        
    }
    
    public void fromXML(String xml) throws XWikiException {
        fromXML(xml, false);
    }
    
    public void fromXML(InputStream is) throws XWikiException {
        fromXML(is, false);
    }
    
    public void fromXML(InputSource source, boolean withArchive) throws XWikiException {
        DocumentInstanceOutputProperties documentProperties = new DocumentInstanceOutputProperties();
        XWikiContext xcontext = getXWikiContext();
        if (xcontext != null) {
            documentProperties.setDefaultReference(getXWikiContext().getWikiReference());
        }
        
        XARInputProperties xarProperties = new XARInputProperties();
        xarProperties.setWithHistory(withArchive);
        try {
            Utils.getComponent(XWikiDocumentFilterUtils.class).importEntity(XWikiDocument.class, this, source, xarProperties, documentProperties);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_DOC, XWikiException.ERROR_DOC_XML_PARSING, "Error parsing xml", e, null);
        }
        
        setMetaDataDirty(false);
        setContentDirty(false);
    }
    
    public void fromXML(String source, boolean withArchive) throws XWikiException {
        fromXML(new StringInputSource(source), withArchive);
    }
    
    public void fromXML(InputStream source, boolean withArchive) throws XWikiException {
        fromXML(new DefaultInputStreamInputSource(source), withArchive);
    }
    
    @Deprecated
(since = "9.0RC1")
    public void fromXML(Document domdoc, boolean withArchive) throws XWikiException {
        StringWriter writer = new StringWriter();
        try {
            org.dom4j.io.XMLWriter domWriter = new org.dom4j.io.XMLWriter(writer);
            domWriter.write(domdoc);
            domWriter.flush();
        }
         catch (IOException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_DOC, XWikiException.ERROR_DOC_XML_PARSING, "Error parsing xml", e, null);
        }
        
        fromXML(writer.toString(), withArchive);
    }
    
    public static boolean containsXMLWikiDocument(Document domdoc) {
        return domdoc.getRootElement().getName().equals(XarDocumentModel.ELEMENT_DOCUMENT);
    }
    
    public void setAttachmentList(List<XWikiAttachment> list) {
        if (this.attachmentList != list) {
            this.attachmentList.clear();
            this.attachmentList.addAll(list);
        }
        
    }
    
    public List<XWikiAttachment> getAttachmentList() {
        return this.attachmentList;
    }
    
    public void saveAllAttachments(XWikiContext context) throws XWikiException {
        saveAllAttachments(true, true, context);
    }
    
    public void saveAllAttachments(boolean updateParent, boolean transaction, XWikiContext context) throws XWikiException {
        for (XWikiAttachment attachment : this.attachmentList) {
            saveAttachmentContent(attachment, false, transaction, context);
        }
        
        if (updateParent) {
            context.getWiki().saveDocument(this, context);
        }
        
    }
    
    public void saveAttachmentsContent(List<XWikiAttachment> attachments, XWikiContext context) throws XWikiException {
        for (XWikiAttachment attachment : attachments) {
            saveAttachmentContent(attachment, context);
        }
        
    }
    
    public void saveAttachmentContent(XWikiAttachment attachment, XWikiContext context) throws XWikiException {
        saveAttachmentContent(attachment, true, true, context);
    }
    
    public void saveAttachmentContent(XWikiAttachment attachment, boolean updateParent, boolean transaction, XWikiContext context) throws XWikiException {
        String currentWiki = context.getWikiId();
        try {
            if (getDatabase() != null) {
                context.setWikiId(getDatabase());
            }
            
            XWikiAttachmentStoreInterface store = resolveXWikiAttachmentStoreInterface(attachment.getContentStore(), context);
            store.saveAttachmentContent(attachment, false, context, transaction);
            setMetaDataDirty(true);
            if (updateParent) {
                context.getWiki().saveDocument(this, context);
            }
            
        }
         catch (OutOfMemoryError e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_APP_JAVA_HEAP_SPACE, "Out Of Memory Exception");
        }
         finally {
            if (currentWiki != null) {
                context.setWikiId(currentWiki);
            }
            
        }
        
    }
    
    @Deprecated
(since = "9.9RC1")
    public void loadAttachmentContent(XWikiAttachment attachment, XWikiContext context) throws XWikiException {
        String database = context.getWikiId();
        try {
            if (getDatabase() != null) {
                context.setWikiId(getDatabase());
            }
            
            attachment.loadAttachmentContent(context);
        }
         finally {
            if (database != null) {
                context.setWikiId(database);
            }
            
        }
        
    }
    
    public XWikiAttachment removeAttachment(XWikiAttachment attachment) {
        return removeAttachment(attachment, true);
    }
    
    public XWikiAttachment removeAttachment(XWikiAttachment attachmentToRemove, boolean toRecycleBin) {
        if (this.attachmentList.remove(attachmentToRemove)) {
            this.attachmentsToRemove.add(new XWikiAttachmentToRemove(attachmentToRemove, toRecycleBin));
            setMetaDataDirty(true);
        }
         else {
            attachmentToRemove = null;
        }
        
        return attachmentToRemove;
    }
    
    public List<XWikiAttachmentToRemove> getAttachmentsToRemove() {
        return this.attachmentsToRemove;
    }
    
    public void clearAttachmentsToRemove() {
        this.attachmentsToRemove.clear();
    }
    
    public List<DocumentReference> getBackLinkedReferences(XWikiContext context) throws XWikiException {
        Set<EntityReference> references;
        try {
            references = getLinkStore().resolveBackLinkedEntities(getDocumentReference());
        }
         catch (LinkException e) {
            throw new XWikiException("Failed to load backlinks for reference [" + getDocumentReference() + "]", e);
        }
        
        Set<DocumentReference> documentReferences = new HashSet<>(references.size());
        for (EntityReference entityReference : references) {
            DocumentReference linkReference = context.getWiki().getDocumentReference(entityReference, context);
            if (linkReference.getLocale() != null) {
                linkReference = new DocumentReference(linkReference, (Locale) null);
            }
            
            documentReferences.add(linkReference);
        }
        
        return new ArrayList<>(documentReferences);
    }
    
    @Deprecated
(since = "2.2M2")
    public List<String> getBackLinkedPages(XWikiContext context) throws XWikiException {
        List<DocumentReference> references = getBackLinkedReferences(context);
        EntityReferenceSerializer<String> serializer = getCompactWikiEntityReferenceSerializer();
        List<String> documentNames = new ArrayList<>(references.size());
        for (DocumentReference reference : references) {
            documentNames.add(serializer.serialize(reference));
        }
        
        return documentNames;
    }
    
    public Set<XWikiLink> getUniqueWikiLinkedPages(XWikiContext context) throws XWikiException {
        Set<XWikiLink> links;
        if (is10Syntax()) {
            links = new LinkedHashSet<>(getStore(context).loadLinks(getId(), context, true));
        }
         else {
            Set<String> linkedPages = getUniqueLinkedPages(context);
            links = new LinkedHashSet<>(linkedPages.size());
            for (String linkedPage : linkedPages) {
                XWikiLink wikiLink = new XWikiLink();
                wikiLink.setDocId(getId());
                wikiLink.setFullName(LOCAL_REFERENCE_SERIALIZER.serialize(getDocumentReference()));
                wikiLink.setLink(linkedPage);
                links.add(wikiLink);
            }
            
        }
        
        return links;
    }
    
    private Set<DocumentReference> getUniqueLinkedPages10(XWikiContext context) {
        Set<DocumentReference> pageNames;
        try {
            List<String> list = context.getUtil().getUniqueMatches(getContent(), "\\[(.*?)\\]", 1);
            pageNames = new HashSet<DocumentReference>(list.size());
            DocumentReference currentDocumentReference = getDocumentReference();
            for (String name : list) {
                int i1 = name.indexOf('>');
                if (i1 != -1) {
                    name = name.substring(i1 + 1);
                }
                
                i1 = name.indexOf("&gt;");
                if (i1 != -1) {
                    name = name.substring(i1 + 4);
                }
                
                i1 = name.indexOf('#');
                if (i1 != -1) {
                    name = name.substring(0, i1);
                }
                
                i1 = name.indexOf('?');
                if (i1 != -1) {
                    name = name.substring(0, i1);
                }
                
                if (name.trim().equals("") || (name.indexOf('$') != -1) || (name.indexOf("://") != -1) || (name.indexOf('"') != -1) || (name.indexOf('\'') != -1) || (name.indexOf("..") != -1) || (name.indexOf(':') != -1) || (name.indexOf('=') != -1)) {
                    continue;
                }
                
                String newname = StringUtils.replace(Util.noaccents(name), " ", "");
                if (newname.indexOf('.') == -1) {
                    newname = getSpace() + "." + name;
                }
                
                if (context.getWiki().exists(newname, context)) {
                    name = newname;
                }
                 else {
                    if (name.indexOf('.') == -1) {
                        name = getSpace() + "." + name;
                    }
                    
                }
                
                if (!StringUtils.isEmpty(name)) {
                    DocumentReference documentReference = getCurrentDocumentReferenceResolver().resolve(name);
                    if (!documentReference.equals(currentDocumentReference)) {
                        pageNames.add(documentReference);
                    }
                    
                }
                
            }
            
            return pageNames;
        }
         catch (Exception e) {
            LOGGER.error("Failed to get linked documents", e);
            return null;
        }
        
    }
    
    private Set<EntityReference> getUniqueLinkedEntityReferences(XWikiContext context, Map<EntityType, Set<ResourceType>> entityTypes) {
        Set<EntityReference> references;
        XWikiDocument contextDoc = context.getDoc();
        WikiReference contextWikiReference = context.getWikiReference();
        try {
            context.setDoc(this);
            context.setWikiReference(getDocumentReference().getWikiReference());
            if (is10Syntax()) {
                references = (Set) getUniqueLinkedPages10(context);
            }
             else {
                references = new LinkedHashSet<>();
                XDOM dom = getXDOM();
                getUniqueLinkedEntityReferences(dom, entityTypes, references);
                for (List<BaseObject> xobjects : getXObjects().values()) {
                    xobjects.stream() .forEach(xobject -> getUniqueLinkedEntityReferences(xobject, entityTypes, references, context));
                }
                
            }
            
        }
         finally {
            context.setDoc(contextDoc);
            context.setWikiReference(contextWikiReference);
        }
        
        return references;
    }
    
    private void getUniqueLinkedEntityReferences(BaseObject xobject, Map<EntityType, Set<ResourceType>> entityTypes, Set<EntityReference> references, XWikiContext xcontext) {
        if (xobject == null) {
            return;
        }
        
        BaseClass xclass = xobject.getXClass(xcontext);
        for (Object fieldClass : xclass.getProperties()) {
            if (fieldClass instanceof TextAreaClass && ((TextAreaClass) fieldClass).isWikiContent()) {
                TextAreaClass textAreaClass = (TextAreaClass) fieldClass;
                PropertyInterface field = xobject.getField(textAreaClass.getName());
                if (field instanceof LargeStringProperty) {
                    LargeStringProperty largeField = (LargeStringProperty) field;
                    try {
                        XDOM dom = parseContent(getSyntax(), largeField.getValue(), getDocumentReference());
                        getUniqueLinkedEntityReferences(dom, entityTypes, references);
                    }
                     catch (XWikiException e) {
                        LOGGER.warn("Failed to extract links from xobject property [{}], skipping it. Error: {}", largeField.getReference(), ExceptionUtils.getRootCauseMessage(e));
                    }
                    
                }
                
            }
            
        }
        
    }
    
    private void getUniqueLinkedEntityReferences(XDOM dom, Map<EntityType, Set<ResourceType>> entityTypes, Set<EntityReference> references) {
        Set<EntityReference> uniqueLinkedEntityReferences = getLinkParser().getUniqueLinkedEntityReferences(dom, entityTypes, getDocumentReference());
        references.addAll(uniqueLinkedEntityReferences);
    }
    
    private Set<DocumentReference> toDocumentReferenceSet(Collection<? extends EntityReference> entityReferences, DocumentReference baseReference) {
        Set<DocumentReference> documentReferences = new LinkedHashSet<>(entityReferences.size());
        for (EntityReference entityRefefence : entityReferences) {
            documentReferences.add(getCurrentReferenceDocumentReferenceResolver().resolve(entityRefefence, EntityType.DOCUMENT, baseReference));
        }
        
        return documentReferences;
    }
    
    public Set<String> getUniqueLinkedPages(XWikiContext context) {
        Set<EntityReference> references = getUniqueLinkedEntityReferences(context, Map.of( EntityType.DOCUMENT, Set.of( ResourceType.SPACE, ResourceType.DOCUMENT, ResourceType.ATTACHMENT), EntityType.PAGE, Set.of( ResourceType.PAGE, ResourceType.PAGE_ATTACHMENT) ));
        Set<String> documentNames = new LinkedHashSet<>(references.size());
        XWikiDocument contextDoc = context.getDoc();
        String contextWiki = context.getWikiId();
        EntityReferenceSerializer<String> serializer;
        try {
            context.setDoc(this);
            context.setWikiId(getDocumentReference().getWikiReference().getName());
            if (is10Syntax()) {
                serializer = getCompactEntityReferenceSerializer();
            }
             else {
                serializer = getCompactWikiEntityReferenceSerializer();
            }
            
            for (EntityReference reference : references) {
                DocumentReference linkDocumentReference = context.getWiki().getDocumentReference(reference, context);
                documentNames.add(serializer.serialize(linkDocumentReference));
            }
            
        }
         finally {
            context.setDoc(contextDoc);
            context.setWikiId(contextWiki);
        }
        
        return documentNames;
    }
    
    public Set<EntityReference> getUniqueLinkedEntities(XWikiContext context) {
        return getUniqueLinkedEntityReferences(context, Map.of( EntityType.DOCUMENT, Set.of( ResourceType.SPACE, ResourceType.DOCUMENT), EntityType.PAGE, Set.of( ResourceType.PAGE), EntityType.ATTACHMENT, Set.of( ResourceType.ATTACHMENT), EntityType.PAGE_ATTACHMENT, Set.of( ResourceType.PAGE_ATTACHMENT) ));
    }
    
    public List<DocumentReference> getChildrenReferences(XWikiContext context) throws XWikiException {
        return getChildrenReferences(0, 0, context);
    }
    
    @Deprecated
(since = "2.2M2")
    public List<String> getChildren(XWikiContext context) throws XWikiException {
        return getChildren(0, 0, context);
    }
    
    public List<DocumentReference> getChildrenReferences(int nb, int start, XWikiContext context) throws XWikiException {
        List<DocumentReference> children = new ArrayList<DocumentReference>();
        try {
            Query query = getStore().getQueryManager() .createQuery("select distinct doc.fullName from XWikiDocument doc where " + "doc.parent=:prefixedFullName or doc.parent=:fullName or (doc.parent=:name and doc.space=:space)", Query.XWQL);
            query.addFilter(Utils.getComponent(QueryFilter.class, "hidden"));
            query.bindValue("prefixedFullName", getDefaultEntityReferenceSerializer().serialize(getDocumentReference()));
            query.bindValue("fullName", LOCAL_REFERENCE_SERIALIZER.serialize(getDocumentReference()));
            query.bindValue("name", getDocumentReference().getName());
            query.bindValue("space", LOCAL_REFERENCE_SERIALIZER.serialize(getDocumentReference().getLastSpaceReference()));
            query.setLimit(nb).setOffset(start);
            List<String> queryResults = query.execute();
            WikiReference wikiReference = this.getDocumentReference().getWikiReference();
            for (String fullName : queryResults) {
                children.add(getCurrentDocumentReferenceResolver().resolve(fullName, wikiReference));
            }
            
        }
         catch (QueryException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_UNKNOWN, String.format("Failed to retrieve children for document [%s]", this.getDocumentReference()), e);
        }
        
        return children;
    }
    
    @Deprecated
(since = "2.2M2")
    public List<String> getChildren(int nb, int start, XWikiContext context) throws XWikiException {
        List<String> childrenNames = new ArrayList<String>();
        for (DocumentReference reference : getChildrenReferences(nb, start, context)) {
            childrenNames.add(LOCAL_REFERENCE_SERIALIZER.serialize(reference));
        }
        
        return childrenNames;
    }
    
    public void renameProperties(DocumentReference classReference, Map<String, String> fieldsToRename) {
        List<BaseObject> objects = this.xObjects.get(classReference);
        if (objects == null) {
            return;
        }
        
        boolean isDirty = false;
        for (BaseObject bobject : objects) {
            if (bobject == null) {
                continue;
            }
            
            for (Map.Entry<String, String> entry : fieldsToRename.entrySet()) {
                String origname = entry.getKey();
                String newname = entry.getValue();
                BaseProperty origprop = (BaseProperty) bobject.safeget(origname);
                if (origprop != null) {
                    BaseProperty prop = origprop.clone();
                    bobject.removeField(origname);
                    prop.setName(newname);
                    bobject.addField(newname, prop);
                    isDirty = true;
                }
                
            }
            
        }
        
        if (isDirty) {
            setMetaDataDirty(true);
        }
        
    }
    
    @Deprecated
(since = "2.2M2")
    public void renameProperties(String className, Map<String, String> fieldsToRename) {
        renameProperties(resolveClassReference(className), fieldsToRename);
    }
    
    public void addXObjectToRemove(BaseObject object) {
        getXObjectsToRemove().add(object);
        object.setOwnerDocument(null);
        setMetaDataDirty(true);
    }
    
    public void addXObjectsToRemoveFromVersion(XWikiDocument previousVersion) {
        if (previousVersion == null) {
            return;
        }
        
        for (List<BaseObject> objects : previousVersion.getXObjects().values()) {
            for (BaseObject originalObj : objects) {
                if (originalObj != null) {
                    BaseObject newObj = getXObject(originalObj.getXClassReference(), originalObj.getNumber());
                    if (newObj == null) {
                        this.addXObjectToRemove(originalObj);
                    }
                    
                }
                
            }
            
        }
        
    }
    
    @Deprecated
(since = "2.2M2")
    public void addObjectsToRemove(BaseObject object) {
        addXObjectToRemove(object);
    }
    
    public List<BaseObject> getXObjectsToRemove() {
        return this.xObjectsToRemove;
    }
    
    @Deprecated
(since = "2.2M2")
    public ArrayList<BaseObject> getObjectsToRemove() {
        return (ArrayList<BaseObject>) getXObjectsToRemove();
    }
    
    public void setXObjectsToRemove(List<BaseObject> objectsToRemove) {
        this.xObjectsToRemove = objectsToRemove;
        setMetaDataDirty(true);
    }
    
    public List<String> getIncludedPages(XWikiContext context) {
        try {
            return getIncludedPagesInternal(context);
        }
         catch (Exception e) {
            LOGGER.error("Failed to get included pages for [{}]", getDocumentReference(), e);
            return Collections.emptyList();
        }
        
    }
    
    private List<String> getIncludedPagesInternal(XWikiContext context) {
        if (is10Syntax()) {
            return getIncludedPagesForXWiki10Syntax(getContent(), context);
        }
         else {
            XDOM dom = getXDOM();
            List<String> result = new ArrayList<String>();
            List<MacroBlock> macroBlocks = dom.getBlocks(new ClassBlockMatcher(MacroBlock.class), Block.Axes.DESCENDANT);
            for (MacroBlock macroBlock : macroBlocks) {
                if (macroBlock.getId().equalsIgnoreCase("include") || macroBlock.getId().equalsIgnoreCase("display")) {
                    String documentName = macroBlock.getParameters().get("reference");
                    if (StringUtils.isEmpty(documentName)) {
                        documentName = macroBlock.getParameters().get("document");
                        if (StringUtils.isEmpty(documentName)) {
                            continue;
                        }
                        
                    }
                    
                    DocumentReference documentReference = getExplicitDocumentReferenceResolver().resolve(documentName, getDocumentReference());
                    if (this.getDocumentReference().equals(documentReference)) {
                        continue;
                    }
                    
                    documentName = LOCAL_REFERENCE_SERIALIZER.serialize(documentReference);
                    result.add(documentName);
                }
                 else if (macroBlock.getId().equalsIgnoreCase("velocity") && !StringUtils.isEmpty(macroBlock.getContent())) {
                    result.addAll(getIncludedPagesForXWiki10Syntax(macroBlock.getContent(), context));
                }
                
            }
            
            return result;
        }
        
    }
    
    private List<String> getIncludedPagesForXWiki10Syntax(String content, XWikiContext context) {
        try {
            String pattern = "#include(Topic|InContext|Form|Macros|parseGroovyFromPage)\\([\"'](.*?)[\"']\\)";
            List<String> list = context.getUtil().getUniqueMatches(content, pattern, 2);
            for (int i = 0; i < list.size(); i++) {
                String name = list.get(i);
                if (name.indexOf('.') == -1) {
                    list.set(i, getSpace() + "." + name);
                }
                
            }
            
            return list;
        }
         catch (Exception e) {
            LOGGER.error("Failed to extract include target from provided content [" + content + "]", e);
            return null;
        }
        
    }
    
    public List<String> getIncludedMacros(XWikiContext context) {
        return context.getWiki().getIncludedMacros(getSpace(), getContent(), context);
    }
    
    public String displayRendered(PropertyClass pclass, String prefix, BaseCollection object, XWikiContext context) throws XWikiException {
        String result = pclass.displayView(pclass.getName(), prefix, object, context);
        return getRenderedContent(result, Syntax.XWIKI_1_0.toIdString(), context);
    }
    
    public String displayView(PropertyClass pclass, String prefix, BaseCollection object, XWikiContext context) {
        return (pclass == null) ? "" : pclass.displayView(pclass.getName(), prefix, object, context);
    }
    
    public String displayEdit(PropertyClass pclass, String prefix, BaseCollection object, XWikiContext context) {
        return (pclass == null) ? "" : pclass.displayEdit(pclass.getName(), prefix, object, context);
    }
    
    public String displayHidden(PropertyClass pclass, String prefix, BaseCollection object, XWikiContext context) {
        return (pclass == null) ? "" : pclass.displayHidden(pclass.getName(), prefix, object, context);
    }
    
    public XWikiAttachment getAttachment(String filename) {
        XWikiAttachment output = this.attachmentList.getByFilename(filename);
        if (output != null) {
            return output;
        }
        
        for (XWikiAttachment attach : getAttachmentList()) {
            if (attach.getFilename().startsWith(filename + ".")) {
                return attach;
            }
            
        }
        
        return null;
    }
    
    public XWikiAttachment getExactAttachment(String filename) {
        return this.attachmentList.getByFilename(filename);
    }
    
    @Deprecated
(since = "9.10RC1")
    public void addAttachment(XWikiAttachment attachment) {
        setAttachment(attachment);
    }
    
    public XWikiAttachment setAttachment(XWikiAttachment attachment) {
        return this.attachmentList.set(attachment);
    }
    
    public XWikiAttachment addAttachment(String fileName, byte[] content, XWikiContext context) throws XWikiException {
        try {
            return setAttachment(fileName, new ByteArrayInputStream(content != null ? content : new byte[0]), context);
        }
         catch (IOException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_DOC, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to set Attachment content", e);
        }
        
    }
    
    @Deprecated
(since = "9.10RC1")
    public XWikiAttachment addAttachment(String fileName, InputStream content, XWikiContext context) throws XWikiException, IOException {
        return setAttachment(fileName, content, context);
    }
    
    public XWikiAttachment setAttachment(String fileName, InputStream content, XWikiContext context) throws IOException {
        int i = fileName.indexOf('\\');
        if (i == -1) {
            i = fileName.indexOf('/');
        }
        
        String filename = fileName.substring(i + 1);
        XWikiAttachment attachment = getExactAttachment(filename);
        if (attachment == null) {
            attachment = new XWikiAttachment(this, filename);
            setAttachment(attachment);
        }
        
        attachment.setContent(content);
        attachment.setAuthorReference(context.getUserReference());
        return attachment;
    }
    
    public BaseObject getFirstObject(String fieldname) {
        return getFirstObject(fieldname, null);
    }
    
    public BaseObject getFirstObject(String fieldname, XWikiContext context) {
        Collection<List<BaseObject>> objectscoll = getXObjects().values();
        if (objectscoll == null) {
            return null;
        }
        
        for (List<BaseObject> objects : objectscoll) {
            for (BaseObject obj : objects) {
                if (obj != null) {
                    BaseClass bclass = obj.getXClass(context);
                    if (bclass != null) {
                        Set<String> set = bclass.getPropertyList();
                        if ((set != null) && set.contains(fieldname)) {
                            return obj;
                        }
                        
                    }
                    
                    Set<String> set = obj.getPropertyList();
                    if ((set != null) && set.contains(fieldname)) {
                        return obj;
                    }
                    
                }
                
            }
            
        }
        
        return null;
    }
    
    public void setProperty(EntityReference classReference, String fieldName, BaseProperty value) {
        BaseObject bobject = prepareXObject(classReference);
        bobject.safeput(fieldName, value);
    }
    
    @Deprecated
(since = "2.2M2")
    public void setProperty(String className, String fieldName, BaseProperty value) {
        setProperty(getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), fieldName, value);
    }
    
    public int getIntValue(DocumentReference classReference, String fieldName) {
        return getIntValue(classReference, fieldName, 0);
    }
    
    public int getIntValue(DocumentReference classReference, String fieldName, int defaultValue) {
        BaseObject obj = getXObject(classReference, 0);
        if (obj == null) {
            return defaultValue;
        }
        
        return obj.getIntValue(fieldName, defaultValue);
    }
    
    @Deprecated
(since = "2.2M2")
    public int getIntValue(String className, String fieldName) {
        return getIntValue(resolveClassReference(className), fieldName);
    }
    
    public long getLongValue(DocumentReference classReference, String fieldName) {
        BaseObject obj = getXObject(classReference, 0);
        if (obj == null) {
            return 0;
        }
        
        return obj.getLongValue(fieldName);
    }
    
    @Deprecated
(since = "2.2M2")
    public long getLongValue(String className, String fieldName) {
        return getLongValue(resolveClassReference(className), fieldName);
    }
    
    public String getStringValue(EntityReference classReference, String fieldName) {
        return getStringValue(resolveClassReference(classReference), fieldName);
    }
    
    public String getStringValue(DocumentReference classReference, String fieldName) {
        BaseObject obj = getXObject(classReference);
        if (obj == null) {
            return "";
        }
        
        String result = obj.getStringValue(fieldName);
        if (result.equals(" ")) {
            return "";
        }
         else {
            return result;
        }
        
    }
    
    @Deprecated
(since = "2.2M2")
    public String getStringValue(String className, String fieldName) {
        return getStringValue(resolveClassReference(className), fieldName);
    }
    
    public int getIntValue(String fieldName) {
        BaseObject object = getFirstObject(fieldName, null);
        if (object == null) {
            return 0;
        }
         else {
            return object.getIntValue(fieldName);
        }
        
    }
    
    public long getLongValue(String fieldName) {
        BaseObject object = getFirstObject(fieldName, null);
        if (object == null) {
            return 0;
        }
         else {
            return object.getLongValue(fieldName);
        }
        
    }
    
    public String getStringValue(String fieldName) {
        BaseObject object = getFirstObject(fieldName, null);
        if (object == null) {
            return "";
        }
        
        String result = object.getStringValue(fieldName);
        if (result.equals(" ")) {
            return "";
        }
         else {
            return result;
        }
        
    }
    
    public void setStringValue(EntityReference classReference, String fieldName, String value) {
        BaseObject bobject = prepareXObject(classReference);
        bobject.setStringValue(fieldName, value);
    }
    
    @Deprecated
(since = "2.2M2")
    public void setStringValue(String className, String fieldName, String value) {
        setStringValue( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), fieldName, value);
    }
    
    public List getListValue(DocumentReference classReference, String fieldName) {
        BaseObject obj = getXObject(classReference);
        if (obj == null) {
            return new ArrayList();
        }
        
        return obj.getListValue(fieldName);
    }
    
    @Deprecated
(since = "2.2M2")
    public List getListValue(String className, String fieldName) {
        return getListValue(resolveClassReference(className), fieldName);
    }
    
    public List getListValue(String fieldName) {
        BaseObject object = getFirstObject(fieldName, null);
        if (object == null) {
            return new ArrayList();
        }
        
        return object.getListValue(fieldName);
    }
    
    public void setStringListValue(EntityReference classReference, String fieldName, List value) {
        BaseObject bobject = prepareXObject(classReference);
        bobject.setStringListValue(fieldName, value);
    }
    
    @Deprecated
(since = "2.2M2")
    public void setStringListValue(String className, String fieldName, List value) {
        setStringListValue( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), fieldName, value);
    }
    
    public void setDBStringListValue(EntityReference classReference, String fieldName, List value) {
        BaseObject bobject = prepareXObject(classReference);
        bobject.setDBStringListValue(fieldName, value);
    }
    
    @Deprecated
(since = "2.2M2")
    public void setDBStringListValue(String className, String fieldName, List value) {
        setDBStringListValue( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), fieldName, value);
    }
    
    public void setLargeStringValue(EntityReference classReference, String fieldName, String value) {
        BaseObject bobject = prepareXObject(classReference);
        bobject.setLargeStringValue(fieldName, value);
    }
    
    @Deprecated
(since = "2.2M2")
    public void setLargeStringValue(String className, String fieldName, String value) {
        setLargeStringValue( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), fieldName, value);
    }
    
    public void setIntValue(EntityReference classReference, String fieldName, int value) {
        BaseObject bobject = prepareXObject(classReference);
        bobject.setIntValue(fieldName, value);
    }
    
    @Deprecated
(since = "2.2M2")
    public void setIntValue(String className, String fieldName, int value) {
        setIntValue(getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), fieldName, value);
    }
    
    @Deprecated
(since = "2.2M1")
    public String getDatabase() {
        return getDocumentReference().getWikiReference().getName();
    }
    
    @Deprecated
(since = "2.2M1")
    public void setDatabase(String database) {
        if (database != null) {
            DocumentReference reference = getDocumentReference();
            WikiReference wiki = reference.getWikiReference();
            WikiReference newWiki = new WikiReference(database);
            if (!newWiki.equals(wiki)) {
                setDocumentReferenceInternal(reference.replaceParent(wiki, newWiki));
            }
            
        }
        
    }
    
    @Deprecated
(since = "4.3M2")
    public String getLanguage() {
        return getLocale().toString();
    }
    
    @Deprecated
(since = "4.3M2")
    public void setLanguage(String language) {
        setLocale(LocaleUtils.toLocale(Util.normalizeLanguage(language), Locale.ROOT));
    }
    
    public Locale getLocale() {
        return this.locale != null ? this.locale : Locale.ROOT;
    }
    
    public void setLocale(Locale locale) {
        this.locale = locale;
        setMetaDataDirty(true);
        this.keyCache = null;
        this.localKeyCache = null;
        this.documentReferenceWithLocaleCache = null;
        this.pageReferenceWithLocaleCache = null;
    }
    
    @Deprecated
(since = "4.3M2")
    public String getDefaultLanguage() {
        return getDefaultLocale().toString();
    }
    
    @Deprecated
(since = "4.3M2")
    public void setDefaultLanguage(String defaultLanguage) {
        setDefaultLocale(LocaleUtils.toLocale(defaultLanguage, Locale.ROOT));
    }
    
    public Locale getDefaultLocale() {
        return this.defaultLocale != null ? this.defaultLocale : Locale.ROOT;
    }
    
    public void setDefaultLocale(Locale defaultLocale) {
        this.defaultLocale = defaultLocale;
        setMetaDataDirty(true);
    }
    
    public int getTranslation() {
        return getLocale().equals(Locale.ROOT) ? 0 : 1;
    }
    
    @Deprecated
(since = "5.4.6")
    public void setTranslation(int translation) {
    }
    
    public String getTranslatedContent(XWikiContext context) throws XWikiException {
        String language = context.getWiki().getLanguagePreference(context);
        return getTranslatedContent(language, context);
    }
    
    public String getTranslatedContent(String locale, XWikiContext context) throws XWikiException {
        XWikiDocument tdoc = getTranslatedDocument(locale, context);
        return tdoc.getContent();
    }
    
    public XWikiDocument getTranslatedDocument(XWikiContext context) throws XWikiException {
        String locale = context.getWiki().getLanguagePreference(context);
        return getTranslatedDocument(locale, context);
    }
    
    @Deprecated
(since = "4.3M2")
    public XWikiDocument getTranslatedDocument(String language, XWikiContext context) throws XWikiException {
        return getTranslatedDocument(LocaleUtils.toLocale(language, Locale.ROOT), context);
    }
    
    public XWikiDocument getTranslatedDocument(Locale locale, XWikiContext context) throws XWikiException {
        XWikiDocument tdoc = this;
        if (locale != null && !locale.equals(Locale.ROOT) && !locale.equals(getDefaultLocale())) {
            try {
                tdoc = context.getWiki().getDocument(new DocumentReference(getDocumentReference(), locale), context);
                if (!tdoc.isNew()) {
                    return tdoc;
                }
                
            }
             catch (Exception e) {
                LOGGER.error("Error when loading document {} for locale {}", getDocumentReference(), locale, e);
            }
            
            tdoc = getTranslatedDocument(LocaleUtils.getParentLocale(locale), context);
        }
        
        return tdoc;
    }
    
    @Deprecated
(since = "4.3M1")
    public String getRealLanguage(XWikiContext context) throws XWikiException {
        return getRealLanguage();
    }
    
    @Deprecated
(since = "4.3M1")
    public String getRealLanguage() {
        String lang = getLanguage();
        if (lang.equals("")) {
            return getDefaultLanguage();
        }
         else {
            return lang;
        }
        
    }
    
    public Locale getRealLocale() {
        Locale locale = getLocale();
        if (locale.equals(Locale.ROOT)) {
            locale = getDefaultLocale();
        }
        
        return locale;
    }
    
    @Deprecated
(since = "5.1M2")
    public List<String> getTranslationList(XWikiContext context) throws XWikiException {
        if (getStore() != null) {
            return getStore().getTranslationList(this, context);
        }
         else {
            return Collections.emptyList();
        }
        
    }
    
    public List<Locale> getTranslationLocales(XWikiContext context) throws XWikiException {
        List<String> translations = getTranslationList(context);
        List<Locale> locales = new ArrayList<Locale>(translations.size());
        for (String translationString : translations) {
            locales.add(LocaleUtils.toLocale(translationString));
        }
        
        return locales;
    }
    
    public List<Delta> getXMLDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        return getDeltas( Diff.diff(ToString.stringToArray(fromDoc.toXML(context)), ToString.stringToArray(toDoc.toXML(context))));
    }
    
    public List<Delta> getContentDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        return getDeltas( Diff.diff(ToString.stringToArray(fromDoc.getContent()), ToString.stringToArray(toDoc.getContent())));
    }
    
    public List<Delta> getContentDiff(String fromRev, String toRev, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        XWikiDocument fromDoc = context.getWiki().getDocument(this, fromRev, context);
        XWikiDocument toDoc = context.getWiki().getDocument(this, toRev, context);
        if (fromDoc == null) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR, String.format("The revision [%s] cannot be found in [%s] for making diff.", fromRev, this.getDocumentReference()));
        }
        
        if (toRev == null) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR, String.format("The revision [%s] cannot be found in [%s] for making diff.", toRev, this.getDocumentReference()));
        }
        
        return getContentDiff(fromDoc, toDoc, context);
    }
    
    public List<Delta> getContentDiff(String fromRev, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        XWikiDocument revdoc = context.getWiki().getDocument(this, fromRev, context);
        return getContentDiff(revdoc, this, context);
    }
    
    public List<Delta> getLastChanges(XWikiContext context) throws XWikiException, DifferentiationFailedException {
        Version version = getRCSVersion();
        try {
            String prev = getDocumentArchive(context).getPrevVersion(version).toString();
            XWikiDocument prevDoc = context.getWiki().getDocument(this, prev, context);
            return getDeltas( Diff.diff(ToString.stringToArray(prevDoc.getContent()), ToString.stringToArray(getContent())));
        }
         catch (Exception ex) {
            LOGGER.debug("Exception getting differences from previous version: " + ex.getMessage());
        }
        
        return new ArrayList<Delta>();
    }
    
    public List<Delta> getRenderedContentDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        String originalContent = fromDoc.getRenderedContent(context);
        String newContent = toDoc.getRenderedContent(context);
        return getDeltas(Diff.diff(ToString.stringToArray(originalContent), ToString.stringToArray(newContent)));
    }
    
    public List<Delta> getRenderedContentDiff(String fromRev, String toRev, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        XWikiDocument fromDoc = context.getWiki().getDocument(this, fromRev, context);
        XWikiDocument toDoc = context.getWiki().getDocument(this, toRev, context);
        return getRenderedContentDiff(fromDoc, toDoc, context);
    }
    
    public List<Delta> getRenderedContentDiff(String fromRev, XWikiContext context) throws XWikiException, DifferentiationFailedException {
        XWikiDocument revdoc = context.getWiki().getDocument(this, fromRev, context);
        return getRenderedContentDiff(revdoc, this, context);
    }
    
    protected List<Delta> getDeltas(Revision rev) {
        List<Delta> list = new ArrayList<Delta>();
        for (int i = 0; i < rev.size(); i++) {
            list.add(rev.getDelta(i));
        }
        
        return list;
    }
    
    public List<MetaDataDiff> getMetaDataDiff(String fromRev, String toRev, XWikiContext context) throws XWikiException {
        XWikiDocument fromDoc = context.getWiki().getDocument(this, fromRev, context);
        XWikiDocument toDoc = context.getWiki().getDocument(this, toRev, context);
        return getMetaDataDiff(fromDoc, toDoc, context);
    }
    
    public List<MetaDataDiff> getMetaDataDiff(String fromRev, XWikiContext context) throws XWikiException {
        XWikiDocument revdoc = context.getWiki().getDocument(this, fromRev, context);
        return getMetaDataDiff(revdoc, this, context);
    }
    
    public List<MetaDataDiff> getMetaDataDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) throws XWikiException {
        List<MetaDataDiff> list = new ArrayList<MetaDataDiff>();
        if (fromDoc == null || toDoc == null) {
            return list;
        }
        
        if (!fromDoc.getTitle().equals(toDoc.getTitle())) {
            list.add(new MetaDataDiff("title", fromDoc.getTitle(), toDoc.getTitle()));
        }
        
        if (ObjectUtils.notEqual(fromDoc.getRelativeParentReference(), toDoc.getRelativeParentReference())) {
            list.add(new MetaDataDiff("parent", fromDoc.getParent(), toDoc.getParent()));
        }
        
        UserReference fromDocOriginalAuthor = fromDoc.getAuthors().getOriginalMetadataAuthor();
        UserReference toDocOriginalAuthor = toDoc.getAuthors().getOriginalMetadataAuthor();
        if (ObjectUtils.notEqual(fromDocOriginalAuthor, toDocOriginalAuthor)) {
            list.add(new MetaDataDiff("author", userReferenceToString(fromDocOriginalAuthor), userReferenceToString(toDocOriginalAuthor)));
        }
        
        if (ObjectUtils.notEqual(fromDoc.getDocumentReference(), toDoc.getDocumentReference())) {
            list.add(new MetaDataDiff("reference", fromDoc.getDocumentReference(), toDoc.getDocumentReference()));
        }
        
        if (!fromDoc.getSpace().equals(toDoc.getSpace())) {
            list.add(new MetaDataDiff("web", fromDoc.getSpace(), toDoc.getSpace()));
        }
        
        if (!fromDoc.getName().equals(toDoc.getName())) {
            list.add(new MetaDataDiff("name", fromDoc.getName(), toDoc.getName()));
        }
        
        if (ObjectUtils.notEqual(fromDoc.getLocale(), toDoc.getLocale())) {
            list.add(new MetaDataDiff("language", fromDoc.getLanguage(), toDoc.getLanguage()));
        }
        
        if (ObjectUtils.notEqual(fromDoc.getDefaultLocale(), toDoc.getDefaultLocale())) {
            list.add(new MetaDataDiff("defaultLanguage", fromDoc.getDefaultLanguage(), toDoc.getDefaultLanguage()));
        }
        
        if (ObjectUtils.notEqual(fromDoc.getSyntax(), toDoc.getSyntax())) {
            list.add(new MetaDataDiff("syntax", fromDoc.getSyntax(), toDoc.getSyntax()));
        }
        
        if (fromDoc.isHidden() != toDoc.isHidden()) {
            list.add(new MetaDataDiff("hidden", fromDoc.isHidden(), toDoc.isHidden()));
        }
        
        return list;
    }
    
    public List<List<ObjectDiff>> getObjectDiff(String fromRev, String toRev, XWikiContext context) throws XWikiException {
        XWikiDocument fromDoc = context.getWiki().getDocument(this, fromRev, context);
        XWikiDocument toDoc = context.getWiki().getDocument(this, toRev, context);
        return getObjectDiff(fromDoc, toDoc, context);
    }
    
    public List<List<ObjectDiff>> getObjectDiff(String fromRev, XWikiContext context) throws XWikiException {
        XWikiDocument revdoc = context.getWiki().getDocument(this, fromRev, context);
        return getObjectDiff(revdoc, this, context);
    }
    
    public List<List<ObjectDiff>> getObjectDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) {
        List<List<ObjectDiff>> difflist = new ArrayList<List<ObjectDiff>>();
        for (List<BaseObject> objects : fromDoc.getXObjects().values()) {
            for (BaseObject originalObj : objects) {
                if (originalObj != null) {
                    BaseObject newObj = toDoc.getXObject(originalObj.getXClassReference(), originalObj.getNumber());
                    List<ObjectDiff> dlist;
                    if (newObj == null) {
                        dlist = new BaseObject().getDiff(originalObj, context);
                        ObjectDiff deleteMarker = new ObjectDiff(originalObj.getXClassReference(), originalObj.getNumber(), originalObj.getGuid(), ObjectDiff.ACTION_OBJECTREMOVED, "", "", "", "");
                        dlist.add(0, deleteMarker);
                    }
                     else {
                        dlist = newObj.getDiff(originalObj, context);
                    }
                    
                    if (!dlist.isEmpty()) {
                        difflist.add(dlist);
                    }
                    
                }
                
            }
            
        }
        
        for (List<BaseObject> objects : toDoc.getXObjects().values()) {
            for (BaseObject newObj : objects) {
                if (newObj != null) {
                    BaseObject originalObj = fromDoc.getXObject(newObj.getXClassReference(), newObj.getNumber());
                    if (originalObj == null) {
                        originalObj = new BaseObject();
                        originalObj.setXClassReference(newObj.getRelativeXClassReference());
                        originalObj.setNumber(newObj.getNumber());
                        originalObj.setGuid(newObj.getGuid());
                        List<ObjectDiff> dlist = newObj.getDiff(originalObj, context);
                        ObjectDiff addMarker = new ObjectDiff(newObj.getXClassReference(), newObj.getNumber(), newObj.getGuid(), ObjectDiff.ACTION_OBJECTADDED, "", "", "", "");
                        dlist.add(0, addMarker);
                        if (!dlist.isEmpty()) {
                            difflist.add(dlist);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return difflist;
    }
    
    public List<List<ObjectDiff>> getClassDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) {
        List<List<ObjectDiff>> difflist = new ArrayList<List<ObjectDiff>>();
        BaseClass oldClass = fromDoc.getXClass();
        BaseClass newClass = toDoc.getXClass();
        if ((newClass == null) && (oldClass == null)) {
            return difflist;
        }
        
        List<ObjectDiff> dlist = newClass.getDiff(oldClass, context);
        if (!dlist.isEmpty()) {
            difflist.add(dlist);
        }
        
        return difflist;
    }
    
    public List<AttachmentDiff> getAttachmentDiff(XWikiDocument fromDoc, XWikiDocument toDoc, XWikiContext context) {
        List<AttachmentDiff> difflist = new ArrayList<AttachmentDiff>();
        for (XWikiAttachment origAttach : fromDoc.getAttachmentList()) {
            String fileName = origAttach.getFilename();
            XWikiAttachment newAttach = toDoc.getAttachment(fileName);
            origAttach = retrieveDeletedAttachment(fromDoc, origAttach, context);
            if (newAttach == null) {
                difflist.add(new AttachmentDiff(fileName, org.xwiki.diff.Delta.Type.DELETE, origAttach, newAttach));
            }
             else {
                newAttach = retrieveDeletedAttachment(toDoc, newAttach, context);
                try {
                    if (!origAttach.equalsData(newAttach, context)) {
                        difflist .add(new AttachmentDiff(fileName, org.xwiki.diff.Delta.Type.CHANGE, origAttach, newAttach));
                    }
                    
                }
                 catch (XWikiException e) {
                    LOGGER.error("Failed to compare attachments [{}] and [{}]", origAttach.getReference(), newAttach.getReference(), e);
                }
                
            }
            
        }
        
        for (XWikiAttachment newAttach : toDoc.getAttachmentList()) {
            String fileName = newAttach.getFilename();
            XWikiAttachment origAttach = fromDoc.getAttachment(fileName);
            newAttach = retrieveDeletedAttachment(toDoc, newAttach, context);
            if (origAttach == null) {
                difflist.add(new AttachmentDiff(fileName, org.xwiki.diff.Delta.Type.INSERT, origAttach, newAttach));
            }
            
        }
        
        return difflist;
    }
    
    private XWikiAttachment retrieveDeletedAttachment(XWikiDocument doc, XWikiAttachment attachment, XWikiContext context) {
        XWikiAttachment result = null;
        InputStream is = null;
        try {
            is = attachment.getContentInputStream(context);
            if (is == null) {
                AttachmentRecycleBinStore attachmentRecycleBinStore = context.getWiki().getAttachmentRecycleBinStore();
                List<DeletedAttachment> allDeletedAttachments = attachmentRecycleBinStore.getAllDeletedAttachments(doc, context, true);
                for (DeletedAttachment deletedAttachment : allDeletedAttachments) {
                    XWikiAttachment restoredAttachment = deletedAttachment.restoreAttachment();
                    if (restoredAttachment.getDate().before(attachment.getDate())) {
                        break;
                    }
                    
                    result = restoredAttachment;
                }
                
                if (result != null) {
                    if (!Objects.equals(attachment.getVersion(), result.getVersion())) {
                        result = result.getAttachmentRevision(attachment.getVersion(), context);
                    }
                    
                }
                
            }
            
        }
         catch (XWikiException e) {
            LOGGER.error("Error while trying to load deleted attachment [{}] for doc [{}]", attachment, doc, e);
        }
         finally {
            if (is != null) {
                try {
                    is.close();
                }
                 catch (IOException ex) {
                }
                
            }
            
        }
        
        if (result == null) {
            result = attachment;
        }
         else {
            result.setDoc(doc);
        }
        
        return result;
    }
    
    @Deprecated
(since = "12.5RC1")
    public void rename(DocumentReference newDocumentReference, XWikiContext context) throws XWikiException {
        rename(newDocumentReference, getBackLinkedReferences(context), context);
    }
    
    @Deprecated
(since = "12.5RC1")
    public void rename(DocumentReference newDocumentReference, List<DocumentReference> backlinkDocumentReferences, XWikiContext context) throws XWikiException {
        rename(newDocumentReference, backlinkDocumentReferences, getChildrenReferences(context), context);
    }
    
    @Deprecated
(since = "12.5RC1")
    public void rename(DocumentReference newDocumentReference, List<DocumentReference> backlinkDocumentReferences, List<DocumentReference> childDocumentReferences, XWikiContext context) throws XWikiException {
        if (isNew() || getDocumentReference().equals(newDocumentReference)) {
            return;
        }
        
        context.getWiki().renameByCopyAndDelete(this, newDocumentReference, backlinkDocumentReferences, childDocumentReferences, context);
    }
    
    public XWikiDocument cloneRename(DocumentReference newDocumentReference, XWikiContext context) throws XWikiException {
        loadAttachments(context);
        loadArchive(context);
        return this.cloneInternal(newDocumentReference, true, true);
    }
    
    public XWikiDocument copyDocument(DocumentReference newDocumentReference, XWikiContext context) throws XWikiException {
        return copyDocument(newDocumentReference, true, context);
    }
    
    public XWikiDocument copyDocument(DocumentReference newDocumentReference, boolean cloneArchive, XWikiContext context) throws XWikiException {
        loadAttachments(context);
        if (cloneArchive) {
            loadArchive(context);
        }
        
        XWikiDocument newdoc = cloneInternal(newDocumentReference, false, cloneArchive);
        if (StringUtils.equals(newdoc.getTitle(), getPrettyName(this.getDocumentReference()))) {
            newdoc.setTitle(getPrettyName(newDocumentReference));
        }
        
        newdoc.setOriginalDocument(null);
        newdoc.setContentDirty(true);
        newdoc.setNew(true);
        return newdoc;
    }
    
    private String getPrettyName(DocumentReference documentReference) {
        EntityReferenceProvider defaultEntityReferenceProvider = Utils.getComponent(EntityReferenceProvider.class);
        if (defaultEntityReferenceProvider.getDefaultReference(documentReference.getType()).getName() .equals(documentReference.getName())) {
            return documentReference.getLastSpaceReference().getName();
        }
        
        return documentReference.getName();
    }
    
    @Deprecated
(since = "2.2M1")
    public XWikiDocument copyDocument(String newDocumentName, XWikiContext context) throws XWikiException {
        return copyDocument(getCurrentMixedDocumentReferenceResolver().resolve(newDocumentName), context);
    }
    
    public XWikiLock getLock(XWikiContext context) throws XWikiException {
        XWikiLock theLock = getStore(context).loadLock(getId(), context, true);
        if (theLock != null) {
            int timeout = context.getWiki().getXWikiPreferenceAsInt("lock_Timeout", 30 * 60, context);
            if (theLock.getDate().getTime() + timeout * 1000 < new Date().getTime()) {                 getStore(context).deleteLock(theLock, context, true);
                theLock = null;
            }
            
        }
        
        return theLock;
    }
    
    public void setLock(String userName, XWikiContext context) throws XWikiException {
        XWikiLock lock = new XWikiLock(getId(), userName);
        getStore(context).saveLock(lock, context, true);
    }
    
    public void removeLock(XWikiContext context) throws XWikiException {
        XWikiLock lock = getStore(context).loadLock(getId(), context, true);
        if (lock != null) {
            getStore(context).deleteLock(lock, context, true);
        }
        
    }
    
    public void insertText(String text, String marker, XWikiContext context) throws XWikiException {
        setContent(StringUtils.replaceOnce(getContent(), marker, text + marker));
        context.getWiki().saveDocument(this, context);
    }
    
    public Object getWikiNode() {
        return this.wikiNode;
    }
    
    public void setWikiNode(Object wikiNode) {
        this.wikiNode = wikiNode;
    }
    
    public String getXClassXML() {
        return this.xClassXML;
    }
    
    @Deprecated
(since = "2.2M1")
    public String getxWikiClassXML() {
        return getXClassXML();
    }
    
    public void setXClassXML(String xClassXML) {
        this.xClassXML = xClassXML;
    }
    
    @Deprecated
(since = "2.2M1")
    public void setxWikiClassXML(String xClassXML) {
        setXClassXML(xClassXML);
    }
    
    public int getElements() {
        return this.elements;
    }
    
    public void setElements(int elements) {
        this.elements = elements;
    }
    
    public void setElement(int element, boolean toggle) {
        if (toggle) {
            this.elements = this.elements | element;
        }
         else {
            this.elements = this.elements & (~element);
        }
        
    }
    
    public boolean hasElement(int element) {
        return ((this.elements & element) == element);
    }
    
    public String getDefaultEditMode(XWikiContext context) throws XWikiException {
        try {
            return getDefaultEditModeInternal(context);
        }
         catch (Exception e) {
            LOGGER.error("Failed to get the default edit mode for [{}]", getDocumentReference(), e);
            return "edit";
        }
        
    }
    
    private String getDefaultEditModeInternal(XWikiContext context) throws XWikiException {
        String editModeProperty = "defaultEditMode";
        DocumentReference editModeClass = getCurrentReferenceDocumentReferenceResolver().resolve(XWikiConstant.EDIT_MODE_CLASS);
        BaseObject editModeObject = this.getXObject(editModeClass);
        if (editModeObject != null) {
            String defaultEditMode = editModeObject.getStringValue(editModeProperty);
            if (StringUtils.isEmpty(defaultEditMode)) {
                return "edit";
            }
             else {
                return defaultEditMode;
            }
            
        }
        
        com.xpn.xwiki.XWiki xwiki = context.getWiki();
        if (is10Syntax()) {
            if (getContent().indexOf("includeForm(") != -1) {
                return "inline";
            }
            
        }
         else {
            for (Block macroBlock : getXDOM().getBlocks(new MacroBlockMatcher("include"), Axes.CHILD)) {
                String includedDocumentReference = macroBlock.getParameter("reference");
                if (includedDocumentReference == null) {
                    includedDocumentReference = macroBlock.getParameter("document");
                }
                
                if (includedDocumentReference != null) {
                    DocumentReference documentReference = getCurrentMixedDocumentReferenceResolver().resolve(includedDocumentReference);
                    XWikiDocument includedDocument = xwiki.getDocument(documentReference, context);
                    if (!includedDocument.isNew()) {
                        editModeObject = includedDocument.getXObject(editModeClass);
                        if (editModeObject == null) {
                            editModeObject = includedDocument.getXObject(SHEETCLASS_REFERENCE);
                        }
                        
                        if (editModeObject != null) {
                            String defaultEditMode = editModeObject.getStringValue(editModeProperty);
                            if (StringUtils.isBlank(defaultEditMode)) {
                                return "inline";
                            }
                             else {
                                return defaultEditMode;
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return "edit";
    }
    
    public String getDefaultEditURL(XWikiContext context) throws XWikiException {
        String editMode = getDefaultEditMode(context);
        if ("inline".equals(editMode)) {
            return getEditURL("inline", "", context);
        }
         else {
            com.xpn.xwiki.XWiki xwiki = context.getWiki();
            String editor = xwiki.getEditorPreference(context);
            return getEditURL("edit", editor, context);
        }
        
    }
    
    public String getEditURL(String action, String mode, XWikiContext context) throws XWikiException {
        com.xpn.xwiki.XWiki xwiki = context.getWiki();
        String language = "";
        XWikiDocument tdoc = (XWikiDocument) context.get("tdoc");
        String realLang = tdoc.getRealLanguage(context);
        if ((xwiki.isMultiLingual(context) == true) && (!realLang.equals(""))) {
            language = realLang;
        }
        
        return getEditURL(action, mode, language, context);
    }
    
    public String getEditURL(String action, String mode, String language, XWikiContext context) {
        StringBuilder editparams = new StringBuilder();
        if (!mode.equals("")) {
            editparams.append("xpage=");
            editparams.append(mode);
        }
        
        if (!language.equals("")) {
            if (!mode.equals("")) {
                editparams.append("&");
            }
            
            editparams.append("language=");
            editparams.append(language);
        }
        
        return getURL(action, editparams.toString(), context);
    }
    
    public String getDefaultTemplate() {
        if (this.defaultTemplate == null) {
            return "";
        }
         else {
            return this.defaultTemplate;
        }
        
    }
    
    public void setDefaultTemplate(String defaultTemplate) {
        this.defaultTemplate = defaultTemplate;
        setMetaDataDirty(true);
    }
    
    public Vector<BaseObject> getComments() {
        return getComments(true);
    }
    
    public Syntax getSyntax() {
        if (isNew() && this.syntax == null) {
            this.syntax = getDefaultDocumentSyntax();
        }
        
        return this.syntax;
    }
    
    @Deprecated
(since = "2.3M1")
    public String getSyntaxId() {
        return getSyntax().toIdString();
    }
    
    public void setSyntax(Syntax syntax) {
        if (ObjectUtils.notEqual(this.syntax, syntax)) {
            this.syntax = syntax;
            this.xdomCache = null;
        }
        
    }
    
    @Deprecated
(since = "2.3M1")
    public void setSyntaxId(String syntaxId) {
        Syntax syntax;
        if (StringUtils.isBlank(syntaxId)) {
            syntax = Syntax.XWIKI_1_0;
        }
         else {
            syntax = resolveSyntax(syntaxId);
        }
        
        setSyntax(syntax);
    }
    
    public Vector<BaseObject> getComments(boolean asc) {
        List<BaseObject> list = getXObjects(COMMENTSCLASS_REFERENCE);
        if (list == null) {
            return null;
        }
         else if (asc) {
            return new Vector<BaseObject>(list);
        }
         else {
            Vector<BaseObject> newlist = new Vector<BaseObject>();
            for (int i = list.size() - 1; i >= 0; i--) {
                newlist.add(list.get(i));
            }
            
            return newlist;
        }
        
    }
    
    public boolean isCurrentUserCreator(XWikiContext context) {
        return isCreator(context.getUserReference());
    }
    
    public boolean isCreator(String username) {
        if (username.equals(XWikiRightService.GUEST_USER_FULLNAME)) {
            return false;
        }
        
        return username.equals(getCreator());
    }
    
    public boolean isCreator(DocumentReference username) {
        if (username == null) {
            return false;
        }
        
        return username.equals(getCreatorReference());
    }
    
    public boolean isCurrentUserPage(XWikiContext context) {
        DocumentReference userReference = context.getUserReference();
        if (userReference == null) {
            return false;
        }
        
        return userReference.equals(getDocumentReference());
    }
    
    public boolean isCurrentLocalUserPage(XWikiContext context) {
        final DocumentReference userRef = context.getUserReference();
        return userRef != null && userRef.equals(this.getDocumentReference());
    }
    
    public void resetArchive(XWikiContext context) throws XWikiException {
        boolean hasVersioning = context.getWiki().hasVersioning(context);
        if (hasVersioning) {
            WikiReference currentWiki = context.getWikiReference();
            try {
                context.setWikiReference(getDocumentReference().getWikiReference());
                getVersioningStore(context).resetRCSArchive(this, true, context);
            }
             finally {
                context.setWikiReference(currentWiki);
            }
            
        }
        
    }
    
    public BaseObject addXObjectFromRequest(XWikiContext context) throws XWikiException {
        ObjectAddForm form = new ObjectAddForm();
        form.setRequest(context.getRequest());
        form.readRequest();
        EntityReference classReference = getXClassEntityReferenceResolver().resolve(form.getClassName(), EntityType.DOCUMENT, getDocumentReference());
        BaseObject object = newXObject(classReference, context);
        BaseClass baseclass = object.getXClass(context);
        baseclass.fromMap(form.getObject(LOCAL_REFERENCE_SERIALIZER.serialize(resolveClassReference(classReference))), object);
        return object;
    }
    
    public BaseObject addXObjectFromRequest(EntityReference classReference, XWikiContext context) throws XWikiException {
        return addXObjectFromRequest(classReference, "", 0, context);
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject addObjectFromRequest(String className, XWikiContext context) throws XWikiException {
        return addObjectFromRequest(className, "", 0, context);
    }
    
    public BaseObject addXObjectFromRequest(DocumentReference classReference, String prefix, XWikiContext context) throws XWikiException {
        return addXObjectFromRequest(classReference, prefix, 0, context);
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject addObjectFromRequest(String className, String prefix, XWikiContext context) throws XWikiException {
        return addObjectFromRequest(className, prefix, 0, context);
    }
    
    public List<BaseObject> addXObjectsFromRequest(DocumentReference classReference, XWikiContext context) throws XWikiException {
        return addXObjectsFromRequest(classReference, "", context);
    }
    
    @Deprecated
(since = "2.2M2")
    public List<BaseObject> addObjectsFromRequest(String className, XWikiContext context) throws XWikiException {
        return addObjectsFromRequest(className, "", context);
    }
    
    public List<BaseObject> addXObjectsFromRequest(DocumentReference classReference, String pref, XWikiContext context) throws XWikiException {
        @SuppressWarnings("unchecked")
        Map<String, String[]> map = context.getRequest().getParameterMap();
        List<Integer> objectsNumberDone = new ArrayList<Integer>();
        List<BaseObject> objects = new ArrayList<BaseObject>();
        String start = pref + LOCAL_REFERENCE_SERIALIZER.serialize(classReference) + "_";
        for (String name : map.keySet()) {
            if (name.startsWith(start)) {
                int pos = name.indexOf('_', start.length() + 1);
                String prefix = name.substring(0, pos);
                int num = Integer.decode(prefix.substring(prefix.lastIndexOf('_') + 1)).intValue();
                if (!objectsNumberDone.contains(Integer.valueOf(num))) {
                    objectsNumberDone.add(Integer.valueOf(num));
                    objects.add(addXObjectFromRequest(classReference, pref, num, context));
                }
                
            }
            
        }
        
        return objects;
    }
    
    @Deprecated
(since = "2.2M2")
    public List<BaseObject> addObjectsFromRequest(String className, String pref, XWikiContext context) throws XWikiException {
        return addXObjectsFromRequest(resolveClassReference(className), pref, context);
    }
    
    public BaseObject addXObjectFromRequest(DocumentReference classReference, int num, XWikiContext context) throws XWikiException {
        return addXObjectFromRequest(classReference, "", num, context);
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject addObjectFromRequest(String className, int num, XWikiContext context) throws XWikiException {
        return addObjectFromRequest(className, "", num, context);
    }
    
    public BaseObject addXObjectFromRequest(EntityReference classReference, String prefix, int num, XWikiContext context) throws XWikiException {
        BaseObject object = newXObject(classReference, context);
        BaseClass baseclass = object.getXClass(context);
        String newPrefix = prefix + LOCAL_REFERENCE_SERIALIZER.serialize(resolveClassReference(classReference)) + "_" + num;
        baseclass.fromMap(Util.getObject(context.getRequest(), newPrefix), object);
        return object;
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject addObjectFromRequest(String className, String prefix, int num, XWikiContext context) throws XWikiException {
        return addXObjectFromRequest(resolveClassReference(className), prefix, num, context);
    }
    
    public BaseObject updateXObjectFromRequest(EntityReference classReference, XWikiContext context) throws XWikiException {
        return updateXObjectFromRequest(classReference, "", context);
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject updateObjectFromRequest(String className, XWikiContext context) throws XWikiException {
        return updateObjectFromRequest(className, "", context);
    }
    
    public BaseObject updateXObjectFromRequest(EntityReference classReference, String prefix, XWikiContext context) throws XWikiException {
        return updateXObjectFromRequest(classReference, prefix, 0, context);
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject updateObjectFromRequest(String className, String prefix, XWikiContext context) throws XWikiException {
        return updateObjectFromRequest(className, prefix, 0, context);
    }
    
    public BaseObject updateXObjectFromRequest(EntityReference classReference, String prefix, int num, XWikiContext context) throws XWikiException {
        DocumentReference absoluteClassReference = resolveClassReference(classReference);
        int nb;
        BaseObject oldobject = getXObject(absoluteClassReference, num);
        if (oldobject == null) {
            nb = createXObject(classReference, context);
            oldobject = getXObject(absoluteClassReference, nb);
        }
         else {
            nb = oldobject.getNumber();
        }
        
        BaseClass baseclass = oldobject.getXClass(context);
        String newPrefix = prefix + LOCAL_REFERENCE_SERIALIZER.serialize(absoluteClassReference) + "_" + nb;
        BaseObject newobject = (BaseObject) baseclass.fromMap(Util.getObject(context.getRequest(), newPrefix), oldobject);
        newobject.setNumber(oldobject.getNumber());
        newobject.setGuid(oldobject.getGuid());
        setXObject(nb, newobject);
        return newobject;
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject updateObjectFromRequest(String className, String prefix, int num, XWikiContext context) throws XWikiException {
        return updateXObjectFromRequest( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), prefix, num, context);
    }
    
    public List<BaseObject> updateXObjectsFromRequest(EntityReference classReference, XWikiContext context) throws XWikiException {
        return updateXObjectsFromRequest(classReference, "", context);
    }
    
    @Deprecated
(since = "2.2M2")
    public List<BaseObject> updateObjectsFromRequest(String className, XWikiContext context) throws XWikiException {
        return updateObjectsFromRequest(className, "", context);
    }
    
    public List<BaseObject> updateXObjectsFromRequest(EntityReference classReference, String pref, XWikiContext context) throws XWikiException {
        DocumentReference absoluteClassReference = resolveClassReference(classReference);
        @SuppressWarnings("unchecked")
        Map<String, String[]> map = context.getRequest().getParameterMap();
        List<Integer> objectsNumberDone = new ArrayList<Integer>();
        List<BaseObject> objects = new ArrayList<BaseObject>();
        String start = pref + LOCAL_REFERENCE_SERIALIZER.serialize(absoluteClassReference) + "_";
        for (String name : map.keySet()) {
            if (name.startsWith(start)) {
                int pos = name.indexOf('_', start.length() + 1);
                String prefix = name.substring(0, pos);
                int num = Integer.decode(prefix.substring(prefix.lastIndexOf('_') + 1)).intValue();
                if (!objectsNumberDone.contains(Integer.valueOf(num))) {
                    objectsNumberDone.add(Integer.valueOf(num));
                    objects.add(updateXObjectFromRequest(classReference, pref, num, context));
                }
                
            }
            
        }
        
        return objects;
    }
    
    @Deprecated
(since = "2.2M2")
    public List<BaseObject> updateObjectsFromRequest(String className, String pref, XWikiContext context) throws XWikiException {
        return updateXObjectsFromRequest( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), pref, context);
    }
    
    public boolean isAdvancedContent() {
        String[] matches = { "<%", "#set", "#include", "#if", "public class", "/* Advanced content */", "## Advanced content", "/* Programmatic content */", "## Programmatic content" };
        String content2 = getContent().toLowerCase();
        for (String match : matches) {
            if (content2.indexOf(match.toLowerCase()) != -1) {
                return true;
            }
            
        }
        
        if (HTML_TAG_PATTERN.matcher(content2).find()) {
            return true;
        }
        
        return false;
    }
    
    public boolean isProgrammaticContent() {
        String[] matches = { "<%", "\\$xwiki.xWiki", "$xcontext.context", "$doc.document", "$xwiki.getXWiki()", "$xcontext.getContext()", "$doc.getDocument()", "WithProgrammingRights(", "/* Programmatic content */", "## Programmatic content", "$xwiki.search(", "$xwiki.createUser", "$xwiki.createNewWiki", "$xwiki.addToAllGroup", "$xwiki.sendMessage", "$xwiki.copyDocument", "$xwiki.copyWikiWeb", "$xwiki.copySpaceBetweenWikis", "$xwiki.parseGroovyFromString", "$doc.toXML()", "$doc.toXMLDocument()", };
        String content2 = getContent().toLowerCase();
        for (String match : matches) {
            if (content2.indexOf(match.toLowerCase()) != -1) {
                return true;
            }
            
        }
        
        return false;
    }
    
    public boolean removeXObject(BaseObject object) {
        List<BaseObject> objects = this.xObjects.get(object.getXClassReference());
        if (objects == null) {
            return false;
        }
        
        int objectPosition = object.getNumber();
        if (objectPosition < objects.size()) {
            BaseObject storedObject = objects.get(objectPosition);
            if (storedObject == null || !storedObject.equals(object)) {
                objectPosition = objects.indexOf(object);
            }
            
        }
         else {
            objectPosition = -1;
        }
        
        if (objectPosition < 0) {
            return false;
        }
        
        objects.set(objectPosition, null);
        addXObjectToRemove(object);
        return true;
    }
    
    @Deprecated
(since = "2.2M1")
    public boolean removeObject(BaseObject object) {
        return removeXObject(object);
    }
    
    public boolean removeXObjects(DocumentReference classReference) {
        List<BaseObject> objects = this.xObjects.get(classReference);
        if (objects == null) {
            return false;
        }
        
        for (BaseObject object : objects) {
            if (object != null) {
                addXObjectToRemove(object);
            }
            
        }
        
        int currentSize = objects.size();
        objects.clear();
        for (int i = 0; i < currentSize; i++) {
            objects.add(null);
        }
        
        return true;
    }
    
    public boolean removeXObjects(EntityReference reference) {
        return removeXObjects( getCurrentReferenceDocumentReferenceResolver().resolve(reference, getDocumentReference()));
    }
    
    @Deprecated
(since = "2.2M1")
    public boolean removeObjects(String className) {
        return removeXObjects(resolveClassReference(className));
    }
    
    public List<DocumentSection> getSections() throws XWikiException {
        if (is10Syntax()) {
            return getSections10();
        }
         else {
            List<DocumentSection> splitSections = new ArrayList<DocumentSection>();
            List<HeaderBlock> headers = getFilteredHeaders();
            int sectionNumber = 1;
            for (HeaderBlock header : headers) {
                int documentSectionIndex = -1;
                String documentSectionLevel = StringUtils.repeat("1.", header.getLevel().getAsInt() - 1) + "1";
                DocumentSection docSection = new DocumentSection(sectionNumber++, documentSectionIndex, documentSectionLevel, renderXDOM(new XDOM(header.getChildren()), getSyntax()));
                splitSections.add(docSection);
            }
            
            return splitSections;
        }
        
    }
    
    private XWikiContext getXWikiContext() {
        Provider<XWikiContext> xcontextProvider = Utils.getComponent(XWikiContext.TYPE_PROVIDER);
        if (xcontextProvider != null) {
            return xcontextProvider.get();
        }
        
        return null;
    }
    
    private List<HeaderBlock> getFilteredHeaders() {
        List<HeaderBlock> filteredHeaders = new ArrayList<HeaderBlock>();
        int sectionDepth = 2;
        XWikiContext context = getXWikiContext();
        if (context != null) {
            sectionDepth = (int) context.getWiki().getSectionEditingDepth();
        }
        
        final XDOM xdom = getXDOM();
        if (!xdom.getChildren().isEmpty()) {
            Block currentBlock = xdom.getChildren().get(0);
            while (currentBlock != null) {
                if (currentBlock instanceof SectionBlock) {
                    Block nextChildrenBlock = currentBlock.getChildren().get(0);
                    if (nextChildrenBlock instanceof HeaderBlock) {
                        HeaderBlock headerBlock = (HeaderBlock) nextChildrenBlock;
                        if (headerBlock.getLevel().getAsInt() <= sectionDepth) {
                            filteredHeaders.add(headerBlock);
                        }
                        
                    }
                    
                    currentBlock = nextChildrenBlock;
                }
                 else {
                    Block nextSibling = currentBlock.getNextSibling();
                    if (nextSibling == null) {
                        currentBlock = currentBlock.getParent();
                        while (currentBlock != null) {
                            if (currentBlock.getNextSibling() != null) {
                                currentBlock = currentBlock.getNextSibling();
                                break;
                            }
                            
                            currentBlock = currentBlock.getParent();
                        }
                        
                    }
                     else {
                        currentBlock = nextSibling;
                    }
                    
                }
                
            }
            
        }
        
        return filteredHeaders;
    }
    
    private List<DocumentSection> getSections10() {
        Pattern headingPattern = Pattern.compile("^[ \\t]*+(1(\\.1){0,1}+)[ \\t]++(.++)$", Pattern.MULTILINE);
        Matcher matcher = headingPattern.matcher(getContent());
        List<DocumentSection> splitSections = new ArrayList<DocumentSection>();
        int sectionNumber = 0;
        while (matcher.find()) { ++sectionNumber;
            String sectionLevel = matcher.group(1);
            String sectionTitle = matcher.group(3);
            int sectionIndex = matcher.start();
            DocumentSection docSection = new DocumentSection(sectionNumber, sectionIndex, sectionLevel, sectionTitle);
            splitSections.add(docSection);
        }
        
        return splitSections;
    }
    
    public DocumentSection getDocumentSection(int sectionNumber) throws XWikiException {
        return getSections().get(sectionNumber - 1);
    }
    
    public String getContentOfSection(int sectionNumber) throws XWikiException {
        String content = null;
        if (is10Syntax()) {
            content = getContentOfSection10(sectionNumber);
        }
         else {
            List<HeaderBlock> headers = getFilteredHeaders();
            if (headers.size() >= sectionNumber) {
                SectionBlock section = headers.get(sectionNumber - 1).getSection();
                content = renderXDOM(new XDOM(Collections.<Block>singletonList(section)), getSyntax());
            }
            
        }
        
        return content;
    }
    
    private String getContentOfSection10(int sectionNumber) throws XWikiException {
        List<DocumentSection> splitSections = getSections();
        int indexEnd = 0;
        DocumentSection section = splitSections.get(sectionNumber - 1);
        int indexStart = section.getSectionIndex();
        String sectionLevel = section.getSectionLevel();
        for (int i = sectionNumber; i < splitSections.size(); i++) {
            DocumentSection nextSection = splitSections.get(i);
            String nextLevel = nextSection.getSectionLevel();
            if (sectionLevel.equals(nextLevel) || sectionLevel.length() > nextLevel.length()) {
                indexEnd = nextSection.getSectionIndex();
                break;
            }
            
        }
        
        String sectionContent = null;
        if (indexStart < 0) {
            indexStart = 0;
        }
        
        if (indexEnd == 0) {
            sectionContent = getContent().substring(indexStart);
        }
         else {
            sectionContent = getContent().substring(indexStart, indexEnd);
        }
        
        return sectionContent;
    }
    
    public String updateDocumentSection(int sectionNumber, String newSectionContent) throws XWikiException {
        String content;
        if (is10Syntax()) {
            content = updateDocumentSection10(sectionNumber, newSectionContent);
        }
         else {
            HeaderBlock header = getFilteredHeaders().get(sectionNumber - 1);
            XDOM xdom = (XDOM) header.getRoot();
            List<Block> blocks = parseContent(newSectionContent).getChildren();
            int sectionLevel = header.getLevel().getAsInt();
            for (int level = 1; level < sectionLevel && blocks.size() == 1 && blocks.get(0) instanceof SectionBlock; ++level) {
                blocks = blocks.get(0).getChildren();
            }
            
            Block section = header.getSection();
            section.getParent().replaceChild(blocks, section);
            content = renderXDOM(xdom, getSyntax());
        }
        
        return content;
    }
    
    private String updateDocumentSection10(int sectionNumber, String newSectionContent) throws XWikiException {
        StringBuilder newContent = new StringBuilder();
        DocumentSection docSection = getDocumentSection(sectionNumber);
        int numberOfSections = getSections().size();
        int indexSection = docSection.getSectionIndex();
        if (numberOfSections == 1) {
            String contentBegin = getContent().substring(0, indexSection);
            newContent = newContent.append(contentBegin).append(newSectionContent);
            return newContent.toString();
        }
         else if (sectionNumber == numberOfSections) {
            String contentBegin = getContent().substring(0, indexSection);
            newContent = newContent.append(contentBegin).append(newSectionContent);
            return newContent.toString();
        }
         else {
            String sectionLevel = docSection.getSectionLevel();
            int nextSectionIndex = 0;
            for (int i = sectionNumber; i < numberOfSections; i++) {
                DocumentSection nextSection = getDocumentSection(i + 1); 
                String nextSectionLevel = nextSection.getSectionLevel();
                if (sectionLevel.equals(nextSectionLevel)) {
                    nextSectionIndex = nextSection.getSectionIndex();
                    break;
                }
                 else if (sectionLevel.length() > nextSectionLevel.length()) {
                    nextSectionIndex = nextSection.getSectionIndex();
                    break;
                }
                
            }
            
            if (nextSectionIndex == 0) {
                newContent = newContent.append(getContent().substring(0, indexSection)).append(newSectionContent);
                return newContent.toString();
            }
             else {
                String contentAfter = getContent().substring(nextSectionIndex);
                String contentBegin = getContent().substring(0, indexSection);
                newContent = newContent.append(contentBegin).append(newSectionContent).append(contentAfter);
            }
            
            return newContent.toString();
        }
        
    }
    
    public String getVersionHashCode(XWikiContext context) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        }
         catch (NoSuchAlgorithmException ex) {
            LOGGER.error("Cannot create MD5 object", ex);
            return hashCode() + "";
        }
        
        try {
            String valueBeforeMD5 = toXML(true, false, true, false, context);
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuilder sb = new StringBuilder();
            for (byte element : array) {
                int b = element & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                
                sb.append(Integer.toHexString(b));
            }
            
            return sb.toString();
        }
         catch (Exception ex) {
            LOGGER.error("Exception while computing document hash", ex);
        }
        
        return hashCode() + "";
    }
    
    public static String getInternalPropertyName(String propname, XWikiContext context) {
        ContextualLocalizationManager localizationManager = Utils.getComponent(ContextualLocalizationManager.class);
        String cpropname = StringUtils.capitalize(propname);
        return localizationManager == null ? cpropname : localizationManager.getTranslationPlain(cpropname);
    }
    
    public String getInternalProperty(String propname) {
        String methodName = "get" + StringUtils.capitalize(propname);
        try {
            Method method = getClass().getDeclaredMethod(methodName, (Class[]) null);
            return (String) method.invoke(this, (Object[]) null);
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public String getCustomClass() {
        if (this.customClass == null) {
            return "";
        }
        
        return this.customClass;
    }
    
    public void setCustomClass(String customClass) {
        this.customClass = customClass;
        setMetaDataDirty(true);
    }
    
    public void setValidationScript(String validationScript) {
        this.validationScript = validationScript;
        setMetaDataDirty(true);
    }
    
    public String getValidationScript() {
        if (this.validationScript == null) {
            return "";
        }
         else {
            return this.validationScript;
        }
        
    }
    
    public String getComment() {
        if (this.comment == null) {
            return "";
        }
        
        return this.comment;
    }
    
    public void setComment(String comment) {
        this.comment = comment;
    }
    
    public boolean isMinorEdit() {
        return this.isMinorEdit;
    }
    
    public void setMinorEdit(boolean isMinor) {
        this.isMinorEdit = isMinor;
    }
    
    protected Boolean getMinorEdit1() {
        return Boolean.valueOf(isMinorEdit());
    }
    
    protected void setMinorEdit1(Boolean isMinor) {
        this.isMinorEdit = (isMinor != null && isMinor.booleanValue());
    }
    
    public BaseObject newXObject(EntityReference classReference, XWikiContext context) throws XWikiException {
        int nb = createXObject(classReference, context);
        return getXObject(resolveClassReference(classReference), nb);
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject newObject(String className, XWikiContext context) throws XWikiException {
        return newXObject( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), context);
    }
    
    public BaseObject getXObject(DocumentReference classReference, boolean create, XWikiContext context) {
        try {
            BaseObject obj = getXObject(classReference);
            if ((obj == null) && create) {
                return newXObject(classReference, context);
            }
            
            if (obj == null) {
                return null;
            }
             else {
                return obj;
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public BaseObject getXObject(EntityReference classReference, boolean create, XWikiContext context) {
        try {
            BaseObject obj = getXObject(classReference);
            if ((obj == null) && create) {
                return newXObject(classReference, context);
            }
            
            if (obj == null) {
                return null;
            }
             else {
                return obj;
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    @Deprecated
(since = "2.2M2")
    public BaseObject getObject(String className, boolean create, XWikiContext context) {
        return getXObject( getXClassEntityReferenceResolver().resolve(className, EntityType.DOCUMENT, getDocumentReference()), create, context);
    }
    
    public boolean validate(XWikiContext context) throws XWikiException {
        return validate(null, context);
    }
    
    public boolean validate(String[] classNames, XWikiContext context) throws XWikiException {
        boolean isValid = true;
        if ((classNames == null) || (classNames.length == 0)) {
            for (DocumentReference classReference : getXObjects().keySet()) {
                BaseClass bclass = context.getWiki().getXClass(classReference, context);
                List<BaseObject> objects = getXObjects(classReference);
                for (BaseObject obj : objects) {
                    if (obj != null) {
                        isValid &= bclass.validateObject(obj, context);
                    }
                    
                }
                
            }
            
        }
         else {
            for (String className : classNames) {
                List<BaseObject> objects = getXObjects(getCurrentMixedDocumentReferenceResolver().resolve(className));
                if (objects != null) {
                    for (BaseObject obj : objects) {
                        if (obj != null) {
                            BaseClass bclass = obj.getXClass(context);
                            isValid &= bclass.validateObject(obj, context);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        String validationScript = "";
        XWikiRequest req = context.getRequest();
        if (req != null) {
            validationScript = req.get("xvalidation");
        }
        
        if ((validationScript == null) || (validationScript.trim().equals(""))) {
            validationScript = getValidationScript();
        }
        
        if ((validationScript != null) && (!validationScript.trim().equals(""))) {
            isValid &= executeValidationScript(context, validationScript);
        }
        
        return isValid;
    }
    
    public static void backupContext(Map<String, Object> backup, XWikiContext context) {
        backup.put("doc", context.getDoc());
        backup.put("cdoc", context.get("cdoc"));
        backup.put("tdoc", context.get("tdoc"));
        backup.put(CKEY_SDOC, context.get(CKEY_SDOC));
        Execution execution = Utils.getComponent(Execution.class);
        try {
            execution.pushContext(Utils.getComponent(ExecutionContextManager.class).clone(execution.getContext()));
        }
         catch (ExecutionContextException e) {
            throw new RuntimeException("Failed to clone the Execution Context", e);
        }
        
        execution.getContext().setProperty(XWikiContext.EXECUTIONCONTEXT_KEY, context);
    }
    
    public static void restoreContext(Map<String, Object> backup, XWikiContext context) {
        Execution execution = Utils.getComponent(Execution.class);
        execution.popContext();
        context.setDoc((XWikiDocument) backup.get("doc"));
        context.put("cdoc", backup.get("cdoc"));
        context.put("tdoc", backup.get("tdoc"));
        context.put(CKEY_SDOC, backup.get(CKEY_SDOC));
    }
    
    public void setAsContextDoc(XWikiContext context) {
        context.setDoc(this);
        context.remove("cdoc");
        context.remove("tdoc");
        context.remove(CKEY_SDOC);
    }
    
    public String getPreviousVersion() {
        XWikiDocumentArchive archive = loadDocumentArchive();
        if (archive != null) {
            Version prevVersion = archive.getPrevVersion(getRCSVersion());
            if (prevVersion != null) {
                return prevVersion.toString();
            }
            
        }
        
        return null;
    }
    
    public String toString() {
        return getFullName();
    }
    
    public void setHidden(Boolean hidden) {
        if (hidden == null) {
            this.hidden = false;
        }
         else {
            this.hidden = hidden;
        }
        
    }
    
    public Boolean isHidden() {
        return this.hidden;
    }
    
    public void convertSyntax(String targetSyntaxId, XWikiContext context) throws XWikiException {
        try {
            convertSyntax(Syntax.valueOf(targetSyntaxId), context);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to convert document to syntax [" + targetSyntaxId + "]", e);
        }
        
    }
    
    public void convertSyntax(Syntax targetSyntax, XWikiContext context) throws XWikiException {
        setContent(performSyntaxConversion(getContent(), getDocumentReference(), getSyntax(), targetSyntax));
        Map<DocumentReference, List<BaseObject>> objectsByClass = getXObjects();
        for (List<BaseObject> objects : objectsByClass.values()) {
            for (BaseObject bobject : objects) {
                if (bobject != null) {
                    BaseClass bclass = bobject.getXClass(context);
                    for (Object fieldClass : bclass.getProperties()) {
                        if (fieldClass instanceof TextAreaClass && ((TextAreaClass) fieldClass).isWikiContent()) {
                            TextAreaClass textAreaClass = (TextAreaClass) fieldClass;
                            PropertyInterface field = bobject.getField(textAreaClass.getName());
                            if (field instanceof LargeStringProperty) {
                                LargeStringProperty largeField = (LargeStringProperty) field;
                                largeField.setValue(performSyntaxConversion(largeField.getValue(), getDocumentReference(), getSyntax(), targetSyntax));
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        setSyntax(targetSyntax);
    }
    
    public XDOM getXDOM() {
        if (this.xdomCache == null) {
            try {
                this.xdomCache = parseContent(getContent());
            }
             catch (XWikiException e) {
                ErrorBlockGenerator errorBlockGenerator = Utils.getComponent(ErrorBlockGenerator.class);
                return new XDOM(errorBlockGenerator.generateErrorBlocks(false, TM_FAILEDDOCUMENTPARSE, "Failed to parse document content", null, e));
            }
            
        }
        
        return this.xdomCache.clone();
    }
    
    public boolean is10Syntax() {
        return is10Syntax(getSyntaxId());
    }
    
    public boolean is10Syntax(String syntaxId) {
        return Syntax.XWIKI_1_0.toIdString().equalsIgnoreCase(syntaxId);
    }
    
    private void init(DocumentReference reference) {
        if (reference == null) {
            setDocumentReference( Utils.<Provider<DocumentReference>>getComponent(DocumentReference.TYPE_PROVIDER).get());
        }
         else {
            setDocumentReference(reference);
        }
        
        this.updateDate = new Date();
        this.updateDate.setTime((this.updateDate.getTime() / 1000) * 1000);
        this.contentUpdateDate = new Date();
        this.contentUpdateDate.setTime((this.contentUpdateDate.getTime() / 1000) * 1000);
        this.creationDate = new Date();
        this.creationDate.setTime((this.creationDate.getTime() / 1000) * 1000);
        this.content = "";
        this.format = "";
        this.locale = Locale.ROOT;
        this.defaultLocale = Locale.ROOT;
        this.customClass = "";
        this.comment = "";
    }
    
    private boolean executeValidationScript(XWikiContext context, String validationScript) {
        try {
            ContextualAuthorizationManager authorization = Utils.getComponent(ContextualAuthorizationManager.class);
            DocumentReference validationScriptReference = getCurrentDocumentReferenceResolver().resolve(validationScript, getDocumentReference());
            authorization.checkAccess(Right.PROGRAM, validationScriptReference);
            XWikiValidationInterface validObject = (XWikiValidationInterface) context.getWiki().parseGroovyFromPage(validationScript, context);
            return validObject.validateDocument(this, context);
        }
         catch (Throwable e) {
            XWikiValidationStatus.addExceptionToContext(getFullName(), "", e, context);
            return false;
        }
        
    }
    
    private static String performSyntaxConversion(String content, DocumentReference source, Syntax currentSyntaxId, Syntax targetSyntax) throws XWikiException {
        try {
            XDOM dom = parseContent(currentSyntaxId, content, source);
            return performSyntaxConversion(dom, targetSyntax, null);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to convert document to syntax [" + targetSyntax + "]", e);
        }
        
    }
    
    private static String performSyntaxConversion(XDOM content, Syntax targetSyntax, TransformationContext txContext) throws XWikiException {
        try {
            if (txContext != null) {
                TransformationManager transformations = Utils.getComponent(TransformationManager.class);
                if (txContext.getXDOM() == null) {
                    txContext.setXDOM(content);
                }
                
                try {
                    transformations.performTransformations(content, txContext);
                }
                 catch (TransformationException te) {
                }
                
            }
            
            return renderXDOM(content, targetSyntax);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to convert document to syntax [" + targetSyntax + "]", e);
        }
        
    }
    
    protected static String renderXDOM(XDOM content, Syntax targetSyntax) throws XWikiException {
        try {
            BlockRenderer renderer = Utils.getComponent(BlockRenderer.class, targetSyntax.toIdString());
            WikiPrinter printer = new DefaultWikiPrinter();
            renderer.render(content, printer);
            return printer.toString();
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to render document to syntax [" + targetSyntax + "]", e);
        }
        
    }
    
    private XDOM parseContent(String content) throws XWikiException {
        return parseContent(getSyntax(), content, getDocumentReference());
    }
    
    private static XDOM parseContent(Syntax syntax, String content, DocumentReference source) throws XWikiException {
        ContentParser parser = Utils.getComponent(ContentParser.class);
        try {
            return parser.parse(content, syntax, source);
        }
         catch (MissingParserException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to find a parser for syntax [" + syntax.toIdString() + "]", e);
        }
         catch (ParseException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to parse content of syntax [" + syntax.toIdString() + "]", e);
        }
        
    }
    
    private Syntax getDefaultDocumentSyntax() {
        Syntax syntax = Utils.getComponent(CoreConfiguration.class).getDefaultDocumentSyntax();
        if (syntax == null || (!Utils.getComponentManager().hasComponent(Parser.class, syntax.toIdString()) && !Syntax.XWIKI_2_1.equals(syntax))) {
            LOGGER.warn("Failed to find parser for the default syntax [{}]. Defaulting to xwiki/2.1 syntax.", syntax);
            syntax = Syntax.XWIKI_2_1;
        }
        
        return syntax;
    }
    
    public DocumentReference resolveClassReference(String documentName) {
        DocumentReference defaultReference = new DocumentReference(getDocumentReference().getWikiReference().getName(), XWiki.SYSTEM_SPACE, getDocumentReference().getName());
        return getExplicitDocumentReferenceResolver().resolve(documentName, defaultReference);
    }
    
    private DocumentReference resolveClassReference(EntityReference reference) {
        if (reference instanceof DocumentReference) {
            return (DocumentReference) reference;
        }
         else if (reference instanceof LocalDocumentReference) {
            return new DocumentReference((LocalDocumentReference) reference, getDocumentReference().getWikiReference());
        }
         else {
            DocumentReference defaultReference = new DocumentReference(getDocumentReference().getWikiReference().getName(), XWiki.SYSTEM_SPACE, getDocumentReference().getName());
            return getExplicitReferenceDocumentReferenceResolver().resolve(reference, defaultReference);
        }
        
    }
    
    public EntityReference getRelativeParentReference() {
        return this.parentReference;
    }
    
    private BaseObject prepareXObject(EntityReference classReference) {
        DocumentReference absoluteClassReference = resolveClassReference(classReference);
        BaseObject bobject = getXObject(absoluteClassReference);
        if (bobject == null) {
            bobject = new BaseObject();
            bobject.setXClassReference(classReference);
            addXObject(bobject);
        }
        
        bobject.setDocumentReference(getDocumentReference());
        setMetaDataDirty(true);
        return bobject;
    }
    
    @Deprecated
(since = "11.8RC1")
    public MergeResult merge(XWikiDocument previousDocument, XWikiDocument newDocument, MergeConfiguration configuration, XWikiContext context) {
        MergeManager mergeManager = Utils.getComponent(MergeManager.class);
        MergeDocumentResult mergeDocumentResult = mergeManager.mergeDocument(previousDocument, newDocument, this, configuration);
        MergeResult mergeResult = new MergeResult();
        mergeResult.getLog().addAll(mergeDocumentResult.getLog());
        mergeResult.setModified(mergeResult.isModified() || mergeDocumentResult.isModified());
        if (!configuration.isProvidedVersionsModifiables()){
            this.apply((XWikiDocument) mergeDocumentResult.getMergeResult());
        }
        
        return mergeResult;
    }
    
    public boolean apply(XWikiDocument document) {
        return apply(document, true);
    }
    
    public boolean apply(XWikiDocument document, boolean clean) {
        boolean modified = false;
        if (!StringUtils.equals(getContent(), document.getContent())) {
            setContent(document.getContent());
            modified = true;
        }
        
        if (ObjectUtils.notEqual(getSyntax(), document.getSyntax())) {
            setSyntax(document.getSyntax());
            modified = true;
        }
        
        if (ObjectUtils.notEqual(getDefaultLocale(), document.getDefaultLocale())) {
            setDefaultLocale(document.getDefaultLocale());
            modified = true;
        }
        
        if (!StringUtils.equals(getTitle(), document.getTitle())) {
            setTitle(document.getTitle());
            modified = true;
        }
        
        if (!StringUtils.equals(getDefaultTemplate(), document.getDefaultTemplate())) {
            setDefaultTemplate(document.getDefaultTemplate());
            modified = true;
        }
        
        if (ObjectUtils.notEqual(getRelativeParentReference(), document.getRelativeParentReference())) {
            setParentReference(document.getRelativeParentReference());
            modified = true;
        }
        
        if (!StringUtils.equals(getCustomClass(), document.getCustomClass())) {
            setCustomClass(document.getCustomClass());
            modified = true;
        }
        
        if (!StringUtils.equals(getValidationScript(), document.getValidationScript())) {
            setValidationScript(document.getValidationScript());
            modified = true;
        }
        
        if (isHidden() != document.isHidden()) {
            setHidden(document.isHidden());
            modified = true;
        }
        
        if (clean) {
            for (List<BaseObject> objects : getXObjects().values()) {
                for (BaseObject originalObj : new ArrayList<BaseObject>(objects)) {                     if (originalObj != null) { BaseObject newObj = document.getXObject(originalObj.getXClassReference(), originalObj.getNumber());
                        if (newObj == null) {
                            removeXObject(originalObj);
                            modified = true;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        for (List<BaseObject> objects : document.getXObjects().values()) {
            for (BaseObject newObj : objects) {
                if (newObj != null) {
                    BaseObject originalObj = getXObject(newObj.getXClassReference(), newObj.getNumber());
                    if (originalObj == null) {
                        setXObject(newObj.getNumber(), newObj);
                        modified = true;
                    }
                     else {
                        modified |= originalObj.apply(newObj, clean);
                    }
                    
                }
                
            }
            
        }
        
        modified |= getXClass().apply(document.getXClass(), clean);
        if (ObjectUtils.notEqual(getXClassXML(), document.getXClassXML())) {
            setXClassXML(document.getXClassXML());
            modified = true;
        }
        
        if (clean) {
            for (XWikiAttachment attachment : new ArrayList<XWikiAttachment>(getAttachmentList())) {                 if (document.getAttachment(attachment.getFilename()) == null) { removeAttachment(attachment);
                }
                
            }
            
        }
        
        for (XWikiAttachment attachment : document.getAttachmentList()) {
            XWikiAttachment originalAttachment = getAttachment(attachment.getFilename());
            if (originalAttachment == null) {
                addAttachment(attachment);
            }
             else {
                originalAttachment.apply(attachment);
            }
            
        }
        
        return modified;
    }
    
    private XWikiAttachmentStoreInterface resolveXWikiAttachmentStoreInterface(String storeType, XWikiContext xcontext) {
        XWikiAttachmentStoreInterface store = getXWikiAttachmentStoreInterface(storeType);
        if (store != null) {
            return store;
        }
        
        return xcontext.getWiki().getDefaultAttachmentContentStore();
    }
    
    private XWikiAttachmentStoreInterface getXWikiAttachmentStoreInterface(String storeType) {
        if (storeType != null && !storeType.equals(XWikiHibernateAttachmentStore.HINT)) {
            try {
                return Utils.getContextComponentManager().getInstance(XWikiAttachmentStoreInterface.class, storeType);
            }
             catch (ComponentLookupException e) {
                LOGGER.warn("Can't find attachment content store for type [{}]", storeType, e);
            }
            
        }
        
        return null;
    }
    
    public int getLocalReferenceMaxLength() {
        return getStore().getLimitSize(this.getXWikiContext(), this.getClass(), "fullName");
    }
    
    public DocumentAuthors getAuthors() {
        return this.authors;
    }
    
    private String getOriginalMetadataAuthorReference() {
        if (this.getAuthors().getOriginalMetadataAuthor() == null || this.getAuthors().getOriginalMetadataAuthor() == GuestUserReference.INSTANCE) {
            return "";
        }
         else {
            return userReferenceToString(this.getAuthors().getOriginalMetadataAuthor());
        }
        
    }
    
    private void setOriginalMetadataAuthorReference(String serializedUserReference) {
        if (!StringUtils.isEmpty(serializedUserReference)) {
            UserReference userReference = userStringToUserReference(serializedUserReference);
            this.authors.setOriginalMetadataAuthor(userReference);
        }
        
    }
    
    public void initialize() {
        setSyntax(getSyntax());
    }
    
}


