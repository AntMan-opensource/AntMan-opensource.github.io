package edu.stanford.nlp.process; 
import edu.stanford.nlp.util.logging.Redwood;
import java.io.*;
import java.util.*;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import java.util.function.Function;
import edu.stanford.nlp.io.IOUtils;
import edu.stanford.nlp.util.XMLUtils;
public class TransformXML<T>  {
  private static Redwood.RedwoodChannels log = Redwood.channels(TransformXML.class);
  private final SAXParser saxParser;
  public SAXInterface<T> buildSaxInterface() { return new SAXInterface<>(); }
  public static class SAXInterface<T> extends DefaultHandler {
    protected List<String> elementsToBeTransformed;
    protected StringBuilder textToBeTransformed;
    protected PrintWriter outWriter = new PrintWriter(System.out, true);
    protected Function<String,T> function;
    protected int depth = 0;
    public SAXInterface() {
      elementsToBeTransformed = new ArrayList<>();
      depth = 0;
      openingTag = null;
      textToBeTransformed = new StringBuilder();
    }
    
    String openingTag;
    private void outputTextAndTag(String qName, Attributes attributes, boolean close) {
      outWriter.print(XMLUtils.escapeXML(textToBeTransformed.toString()));
      textToBeTransformed = new StringBuilder();
      outWriter.print('<');
      if (close) {
        outWriter.print('/');
      }
      
      outWriter.print(qName);
      if (attributes != null) {
        for (int i = 0; i < attributes.getLength(); i++) {
          outWriter.print(' ');
          outWriter.print(attributes.getQName(i));
          outWriter.print("=\"");
          outWriter.print(XMLUtils.escapeXML(attributes.getValue(i)));
          outWriter.print('"');
        }
        
      }
      
      outWriter.print(">\n");
    }
    
    public void endDocument() {
      outWriter.print(XMLUtils.escapeXML(textToBeTransformed.toString()));
      outWriter.flush();
    }
    
    public void startElement(String uri, String localName, String qName,  Attributes attributes) throws SAXException {
      if (depth == 0) {
        outputTextAndTag(qName, attributes, false);
      }
      
      if (elementsToBeTransformed.contains(qName)) {
        if (depth == 0) {
          openingTag = qName;
        }
         ++depth;
      }
      
    }
    
    public void endElement(String uri, String localName, String qName)  throws SAXException  {
      if (depth == 0) {
        outputTextAndTag(qName, null, true);
      }
       else {
        if (elementsToBeTransformed.contains(qName)) { --depth;
          if (depth == 0) {
            String text = textToBeTransformed.toString().trim();
            processText(text);
            textToBeTransformed = new StringBuilder();
            outWriter.print("</" + openingTag + ">\n");
          }
          
        }
        
      }
      
    }
    
    public void processText(String text) {
      if (text.length() > 0) {
        text = function.apply(text).toString();
        outWriter.print(XMLUtils.escapeXML(text));
        outWriter.print('\n');
      }
      
    }
    
    public void characters(char[] buf, int offset, int len) throws SAXException {
      textToBeTransformed.append(buf, offset, len);
    }
    
  }
   
  public static class NoEscapingSAXInterface<T> extends SAXInterface<T> {
    public void processText(String text) {
      if (text.length() > 0) {
        text = function.apply(text).toString();
        outWriter.print(text);
        outWriter.print('\n');
      }
      
    }
        
  }
  
  public TransformXML() {
    try {
      saxParser = SAXParserFactory.newInstance().newSAXParser();
    }
     catch (Exception e) {
      log.info("Error configuring XML parser: " + e);
      throw new RuntimeException(e);
    }
    
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, File in) {
    InputStream ins = null;
    try {
      ins = new BufferedInputStream(new FileInputStream(in));
      transformXML(tags, fn, ins, System.out);
    }
     catch (Exception e) {
      log.info("Error reading file " + in + ": " + e);
      e.printStackTrace();
    }
     finally {
      IOUtils.closeIgnoringExceptions(ins);
    }
    
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, File in, File out) {
    InputStream ins = null;
    OutputStream outs = null;
    try {
      ins = new BufferedInputStream(new FileInputStream(in));
      outs = new BufferedOutputStream(new FileOutputStream(out));
      transformXML(tags, fn, ins, outs);
    }
     catch (Exception e) {
      log.info("Error reading file " + in + " or writing file " + out + ": " + e);
      e.printStackTrace();
    }
     finally {
      IOUtils.closeIgnoringExceptions(ins);
      IOUtils.closeIgnoringExceptions(outs);
    }
    
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, InputStream in) {
    transformXML(tags, fn, in, System.out);
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, InputStream in, OutputStream out) {
    transformXML(tags, fn, in, new OutputStreamWriter(out),  buildSaxInterface());
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, InputStream in, Writer w) {
    transformXML(tags, fn, in, w, buildSaxInterface());
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, InputStream in, Writer w, SAXInterface<T> handler) {
    transformXML(tags, fn, new InputSource(in), w, handler);
  }
    
  public void transformXML(String[] tags, Function<String,T> fn, Reader in, Writer w, SAXInterface<T> handler) {
    transformXML(tags, fn, new InputSource(in), w, handler);
  }
  
  public void transformXML(String[] tags, Function<String,T> fn, InputSource in, Writer w, SAXInterface<T> saxInterface) {
    saxInterface.outWriter = new PrintWriter(w, true);
    saxInterface.function = fn;
    saxInterface.elementsToBeTransformed = new ArrayList<>();
    saxInterface.elementsToBeTransformed.addAll(Arrays.asList(tags));
    try {
      saxParser.parse(in, saxInterface);
    }
     catch (Exception e) {
      throw new RuntimeException(e);
    }
    
  }
  
}
 

