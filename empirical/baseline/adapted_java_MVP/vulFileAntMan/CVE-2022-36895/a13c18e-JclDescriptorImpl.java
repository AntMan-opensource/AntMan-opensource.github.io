package com.compuware.jenkins.build;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.common.StandardCredentials;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.compuware.jenkins.common.configuration.CpwrGlobalConfiguration;
import com.compuware.jenkins.common.configuration.HostConnection;
import hudson.AbortException;
import hudson.Util;
import hudson.model.AbstractProject;
import hudson.model.Describable;
import hudson.model.Item;
import hudson.security.ACL;
import hudson.tasks.BuildStep;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.ListBoxModel.Option;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
public abstract class JclDescriptorImpl<T extends BuildStep & Describable<T>> extends BuildStepDescriptor<Builder> {
	private static final Logger LOGGER = Logger.getLogger("hudson.JclDescriptorImpl"); 
	 public JclDescriptorImpl() {
		load();
	}
	
	public boolean isApplicable(Class<? extends AbstractProject> aClass) {
		 return true;
	}
	
	public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
		save();
		return super.configure(req, formData);
	}
	
	 public FormValidation doCheckConnectionId(@QueryParameter String connectionId) {
		String tempValue = StringUtils.trimToEmpty(connectionId);
		if (tempValue.isEmpty()) {
			return FormValidation.error(Messages.checkHostConnectionError());
		}
		
		return FormValidation.ok();
	}
	
	 public FormValidation doCheckCredentialsId(@QueryParameter String credentialsId) {
		String tempValue = StringUtils.trimToEmpty(credentialsId);
		if (tempValue.isEmpty()) {
			return FormValidation.error(Messages.checkLoginCredentialsError());
		}
		
		return FormValidation.ok();
	}
	
	 public FormValidation doCheckMaxConditionCode(@QueryParameter String maxConditionCode) {
		String tempValue = StringUtils.trimToEmpty(maxConditionCode);
		if (tempValue.isEmpty()) {
			return FormValidation.error(Messages.checkMaxConditionCodeError());
		}
		
		return FormValidation.ok();
	}
	
	 public ListBoxModel doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project) {
		CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
		HostConnection[] hostConnections = globalConfig.getHostConnections();
		ListBoxModel model = new ListBoxModel();
		model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
		for (HostConnection connection : hostConnections) {
			boolean isSelected = false;
			if (connectionId != null) {
				isSelected = connectionId.matches(connection.getConnectionId());
			}
			
			model.add(new Option(connection.getDescription() + " [" + connection.getHostPort() + ']',  connection.getConnectionId(), isSelected));
		}
		
		return model;
	}
	
	 public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project) {
		List<StandardCredentials> creds = CredentialsProvider.lookupCredentials(StandardCredentials.class, project, ACL.SYSTEM, Collections.<DomainRequirement>emptyList());
		ListBoxModel model = new ListBoxModel();
		model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
		for (StandardCredentials c : creds) {
			boolean isSelected = false;
			if (credentialsId != null) {
				isSelected = credentialsId.matches(c.getId());
			}
			
			String description = Util.fixEmptyAndTrim(c.getDescription());
			try {
				model.add(new Option(CpwrGlobalConfiguration.get().getCredentialsUser(c) + (description != null ? (" (" + description + ')') : StringUtils.EMPTY), c.getId(), isSelected)); 
			}
			 catch (AbortException e) {
				LOGGER.log(Level.WARNING, e.getMessage());
			}
			
		}
		
		return model;
	}
	
}


