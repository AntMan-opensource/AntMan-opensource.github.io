package org.jenkinsci.plugins.badge.actions;
import hudson.Extension;
import hudson.ExtensionList;
import hudson.model.Item;
import hudson.model.Job;
import hudson.model.Run;
import hudson.security.ACL;
import hudson.security.Permission;
import hudson.security.PermissionScope;
import hudson.util.HttpResponses;
import java.io.IOException;
import jenkins.model.Jenkins;
import org.acegisecurity.context.SecurityContext;
import org.acegisecurity.context.SecurityContextHolder;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.WebMethod;
import hudson.model.UnprotectedRootAction;
import org.jenkinsci.plugins.badge.*;
import org.jenkinsci.plugins.badge.extensionpoints.JobSelectorExtensionPoint;
import org.jenkinsci.plugins.badge.extensionpoints.InternalRunSelectorExtensionPoint;
import org.jenkinsci.plugins.badge.extensionpoints.RunSelectorExtensionPoint;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
public class PublicBuildStatusAction implements UnprotectedRootAction {
    public final static Permission VIEW_STATUS = new Permission(Item.PERMISSIONS, "ViewStatus", Messages._ViewStatus_Permission(), Item.READ, PermissionScope.ITEM);
    private static final Jenkins jInstance = Jenkins.getInstance();
    private IconRequestHandler iconRequestHandler;
    public PublicBuildStatusAction() throws IOException {
        iconRequestHandler = new IconRequestHandler();
    }
    
    public String getUrlName() {
        return "buildStatus";
    }
    
    public String getIconFileName() {
        return null;
    }
    
    public String getDisplayName() {
        return null;
    }
    
    @WebMethod(name = "icon")
    public HttpResponse doIcon(StaplerRequest req, StaplerResponse rsp, @QueryParameter String job,  @QueryParameter String build, @QueryParameter String style,  @QueryParameter String subject, @QueryParameter String status,  @QueryParameter String color, @QueryParameter String animatedOverlayColor,  @QueryParameter String config, @QueryParameter String link) {
        if (job == null) {
            return PluginImpl.iconRequestHandler.handleIconRequest(style, subject, status, color, animatedOverlayColor, link);
        }
         else {
            Job<?, ?> project = getProject(job, false);
            if(build != null && project != null) {
                Run<?, ?> run = getRun(project, build, false);
                return iconRequestHandler.handleIconRequestForRun(run, style, subject, status, color, animatedOverlayColor, config, link);
            }
             else {
                return iconRequestHandler.handleIconRequestForJob(project, style, subject, status, color, animatedOverlayColor, config, link);
            }
            
        }
        
    }
    
    @WebMethod(name = "icon.svg")
    public HttpResponse doIconDotSvg(StaplerRequest req, StaplerResponse rsp, @QueryParameter String job,  @QueryParameter String build, @QueryParameter String style,  @QueryParameter String subject, @QueryParameter String status,  @QueryParameter String color, @QueryParameter String animatedOverlayColor,  @QueryParameter String config, @QueryParameter String link) {
        return doIcon(req, rsp, job, build, style, subject, status, color, animatedOverlayColor, config, link);
    }
    
    public String doText(StaplerRequest req, StaplerResponse rsp, @QueryParameter String job, @QueryParameter String build) {
        if (job == null) {
            return "Missing query parameter: job";
        }
        
        Job<?, ?> project = getProject(job, true);
        if(build != null) {
            Run<?, ?> run = getRun(project, build, true);
            return run.getIconColor().getDescription();
        }
         else {
            return project.getIconColor().getDescription();
        }
        
    }
    
    private static Job<?, ?> getProject(String job, Boolean throwErrorWhenNotFound) {
        Job<?, ?> p = null;
        if (job != null) {
            SecurityContext orig = ACL.impersonate(ACL.SYSTEM);
            try {
                for (JobSelectorExtensionPoint jobSelector : ExtensionList.lookup(JobSelectorExtensionPoint.class)) {
                    p = jobSelector.select(job);
                    if (p != null) {
                        break;
                    }
                    
                }
                
                if (p == null && jInstance != null) {
                    p = jInstance.getItemByFullName(job, Job.class);
                }
                
           }
            finally {
                SecurityContextHolder.setContext(orig);
            }
            
        }
        
        if(throwErrorWhenNotFound && (p == null || !p.hasPermission(VIEW_STATUS))){
            throw HttpResponses.notFound();            
        }
        
        return p;
    }
    
    @SuppressFBWarnings(value = "NP_LOAD_OF_KNOWN_NULL_VALUE", justification = "'run' is only null for the first enclosing for(token) run")
    public static Run<?, ?> getRun(Job<?, ?> project, String build, Boolean throwErrorWhenNotFound) {
        Run<?, ?> run = null;
        if (project != null && build != null) {
            SecurityContext orig = ACL.impersonate(ACL.SYSTEM);
            try {
                for (String token : build.split(",")) {
                    Run newRun = null;
                    for (InternalRunSelectorExtensionPoint runSelector : ExtensionList.lookup(InternalRunSelectorExtensionPoint.class)) {
                        newRun = runSelector.select(project, token, run);
                        if (newRun != null) {
                            break;
                        }
                        
                    }
                    
                    if (newRun == null) {
                        for (RunSelectorExtensionPoint runSelector : ExtensionList.lookup(RunSelectorExtensionPoint.class)) {
                            newRun = runSelector.select(project, token, run);
                            if (newRun != null) {
                                break;
                            }
                            
                        }
                        
                    }
                    
                    if (newRun != null) {
                        run = newRun;
                    }
                     else {
                        break;
                    }
                    
                }
                
            }
             finally {
                SecurityContextHolder.setContext(orig);
            }
                
        }
        
        if(throwErrorWhenNotFound && (run == null || !run.hasPermission(VIEW_STATUS))){
            throw HttpResponses.notFound();
        }
        
        return run;
    }
    
}


