package org.springframework.cloud.dataflow.server.controller;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.cloud.dataflow.core.PlatformTaskExecutionInformation;
import org.springframework.cloud.dataflow.core.TaskManifest;
import org.springframework.cloud.dataflow.rest.job.TaskJobExecutionRel;
import org.springframework.cloud.dataflow.rest.resource.CurrentTaskExecutionsResource;
import org.springframework.cloud.dataflow.rest.resource.TaskExecutionResource;
import org.springframework.cloud.dataflow.rest.util.DeploymentPropertiesUtils;
import org.springframework.cloud.dataflow.rest.util.TaskSanitizer;
import org.springframework.cloud.dataflow.server.controller.support.TaskExecutionControllerDeleteAction;
import org.springframework.cloud.dataflow.server.repository.NoSuchTaskDefinitionException;
import org.springframework.cloud.dataflow.server.repository.NoSuchTaskExecutionException;
import org.springframework.cloud.dataflow.server.repository.TaskDefinitionRepository;
import org.springframework.cloud.dataflow.server.service.TaskDeleteService;
import org.springframework.cloud.dataflow.server.service.TaskExecutionInfoService;
import org.springframework.cloud.dataflow.server.service.TaskExecutionService;
import org.springframework.cloud.task.repository.TaskExecution;
import org.springframework.cloud.task.repository.TaskExplorer;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedModel;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;
import org.springframework.http.HttpStatus;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
public class TaskExecutionController {
	private final Assembler taskAssembler = new Assembler();
	private final TaskExecutionService taskExecutionService;
	private final TaskExecutionInfoService taskExecutionInfoService;
	private final TaskDeleteService taskDeleteService;
	private final TaskExplorer explorer;
	private final TaskDefinitionRepository taskDefinitionRepository;
	private final TaskSanitizer taskSanitizer = new TaskSanitizer();
	 public TaskExecutionController(TaskExplorer explorer, TaskExecutionService taskExecutionService, TaskDefinitionRepository taskDefinitionRepository, TaskExecutionInfoService taskExecutionInfoService, TaskDeleteService taskDeleteService) {
		Assert.notNull(explorer, "explorer must not be null");
		Assert.notNull(taskExecutionService, "taskExecutionService must not be null");
		Assert.notNull(taskDefinitionRepository, "taskDefinitionRepository must not be null");
		Assert.notNull(taskExecutionInfoService, "taskDefinitionRetriever must not be null");
		Assert.notNull(taskDeleteService, "taskDeleteService must not be null");
		this.taskExecutionService = taskExecutionService;
		this.explorer = explorer;
		this.taskDefinitionRepository = taskDefinitionRepository;
		this.taskExecutionInfoService = taskExecutionInfoService;
		this.taskDeleteService = taskDeleteService;
	}
	
	 @RequestMapping(value = "", method = RequestMethod.GET)
	public PagedModel<TaskExecutionResource> list(Pageable pageable, PagedResourcesAssembler<TaskJobExecutionRel> assembler) {
		Page<TaskExecution> taskExecutions = this.explorer.findAll(pageable);
		Page<TaskJobExecutionRel> result = getPageableRelationships(taskExecutions, pageable);
		return assembler.toModel(result, this.taskAssembler);
	}
	
	 @RequestMapping(value = "", method = RequestMethod.GET, params = "name")
	public PagedModel<TaskExecutionResource> retrieveTasksByName(@RequestParam("name") String taskName, Pageable pageable, PagedResourcesAssembler<TaskJobExecutionRel> assembler) {
		this.taskDefinitionRepository.findById(taskName) .orElseThrow(() -> new NoSuchTaskDefinitionException(taskName));
		Page<TaskExecution> taskExecutions = this.explorer.findTaskExecutionsByName(taskName, pageable);
		Page<TaskJobExecutionRel> result = getPageableRelationships(taskExecutions, pageable);
		return assembler.toModel(result, this.taskAssembler);
	}
	
	 @RequestMapping(value = "", method = RequestMethod.POST, params = "name")
	public long launch(@RequestParam("name") String taskName, @RequestParam(required = false) String properties, @RequestParam(required = false) String arguments) {
		Map<String, String> propertiesToUse = DeploymentPropertiesUtils.parse(properties);
		List<String> argumentsToUse = DeploymentPropertiesUtils.parseArgumentList(arguments, " ");
		return this.taskExecutionService.executeTask(taskName, propertiesToUse, argumentsToUse);
	}
	
	 @RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public TaskExecutionResource view(@PathVariable("id") long id) {
		TaskExecution taskExecution = this.explorer.getTaskExecution(id);
		if (taskExecution == null) {
			throw new NoSuchTaskExecutionException(id);
		}
		
		taskExecution = this.taskSanitizer.sanitizeTaskExecutionArguments(taskExecution);
		TaskManifest taskManifest = this.taskExecutionService.findTaskManifestById(id);
		taskManifest = this.taskSanitizer.sanitizeTaskManifest(taskManifest);
		TaskJobExecutionRel taskJobExecutionRel = new TaskJobExecutionRel(taskExecution, new ArrayList<>(this.explorer.getJobExecutionIdsByTaskExecutionId(taskExecution.getExecutionId())), taskManifest);
		return this.taskAssembler.toModel(taskJobExecutionRel);
	}
	
	@RequestMapping(value = "/current", method = RequestMethod.GET)
	public Collection<CurrentTaskExecutionsResource> getCurrentTaskExecutionsInfo() {
		List<PlatformTaskExecutionInformation> executionInformation = taskExecutionInfoService .findAllPlatformTaskExecutionInformation().getTaskExecutionInformation();
		List<CurrentTaskExecutionsResource> resources = new ArrayList<>();
		executionInformation.forEach(platformTaskExecutionInformation -> {
			CurrentTaskExecutionsResource currentTaskExecutionsResource = CurrentTaskExecutionsResource.fromTaskExecutionInformation(platformTaskExecutionInformation);
			resources.add(currentTaskExecutionsResource);
		}
		
);
		return resources;
	}
	
	 @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public void cleanup( @PathVariable("id") Set<Long> ids, @RequestParam(defaultValue = "CLEANUP", name="action") TaskExecutionControllerDeleteAction[] actions) {
		final Set<TaskExecutionControllerDeleteAction> actionsAsSet = new HashSet<>(Arrays.asList(actions));
		this.taskDeleteService.cleanupExecutions(actionsAsSet, ids);
	}
	
	 @RequestMapping(value = "/{id}", method = RequestMethod.POST)
	public void stop(@PathVariable("id") Set<Long> ids, @RequestParam(defaultValue = "", name="platform") String platform) {
		this.taskExecutionService.stopTaskExecution(ids, platform);
	}
	
	private Page<TaskJobExecutionRel> getPageableRelationships(Page<TaskExecution> taskExecutions, Pageable pageable) {
		List<TaskJobExecutionRel> taskJobExecutionRels = new ArrayList<>();
		for (TaskExecution taskExecution : taskExecutions.getContent()) {
			TaskManifest taskManifest = this.taskExecutionService.findTaskManifestById(taskExecution.getExecutionId());
			taskManifest = this.taskSanitizer.sanitizeTaskManifest(taskManifest);
			List<Long> jobExecutionIds = new ArrayList<>( this.explorer.getJobExecutionIdsByTaskExecutionId(taskExecution.getExecutionId()));
			taskJobExecutionRels .add(new TaskJobExecutionRel(this.taskSanitizer.sanitizeTaskExecutionArguments(taskExecution), jobExecutionIds, taskManifest));
		}
		
		return new PageImpl<>(taskJobExecutionRels, pageable, taskExecutions.getTotalElements());
	}
	
	 private static class Assembler extends RepresentationModelAssemblerSupport<TaskJobExecutionRel, TaskExecutionResource> {
		public Assembler() {
			super(TaskExecutionController.class, TaskExecutionResource.class);
		}
		
		public TaskExecutionResource toModel(TaskJobExecutionRel taskJobExecutionRel) {
			return createModelWithId(taskJobExecutionRel.getTaskExecution().getExecutionId(), taskJobExecutionRel);
		}
		
		public TaskExecutionResource instantiateModel(TaskJobExecutionRel taskJobExecutionRel) {
			return new TaskExecutionResource(taskJobExecutionRel);
		}
		
	}
	
}


