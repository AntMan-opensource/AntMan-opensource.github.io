package org.apache.inlong.manager.pojo.sink.mysql;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Strings;
import io.swagger.annotations.ApiModelProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.apache.inlong.manager.common.enums.ErrorCodeEnum;
import org.apache.inlong.manager.common.exceptions.BusinessException;
import org.apache.inlong.manager.common.util.JsonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;
public class MySQLSinkDTO {
    private static final String SENSITIVE_PARAM_TRUE = "autoDeserialize=true";
    private static final String SENSITIVE_PARAM_FALSE = "autoDeserialize=false";
    private static final Logger LOGGER = LoggerFactory.getLogger(MySQLSinkDTO.class);
    @ApiModelProperty("MySQL JDBC URL, such as jdbc:mysql://host:port/database")
    private String jdbcUrl;
    @ApiModelProperty("Username for JDBC URL")
    private String username;
    @ApiModelProperty("User password")
    private String password;
    @ApiModelProperty("Target table name")
    private String tableName;
    @ApiModelProperty("Primary key")
    private String primaryKey;
    @ApiModelProperty("Properties for MySQL")
    private Map<String, Object> properties;
    public static MySQLSinkDTO getFromRequest(MySQLSinkRequest request) {
        String url = filterSensitive(request.getJdbcUrl());
        return MySQLSinkDTO.builder() .jdbcUrl(url) .username(request.getUsername()) .password(request.getPassword()) .primaryKey(request.getPrimaryKey()) .tableName(request.getTableName()) .properties(request.getProperties()) .build();
    }
    
    public static MySQLSinkDTO getFromJson(@NotNull String extParams) {
        try {
            return JsonUtils.parseObject(extParams, MySQLSinkDTO.class);
        }
         catch (Exception e) {
            LOGGER.error("fetch mysql sink info failed from json params: " + extParams, e);
            throw new BusinessException(ErrorCodeEnum.SINK_INFO_INCORRECT.getMessage() + ": " + e.getMessage());
        }
        
    }
    
    public static MySQLTableInfo getTableInfo(MySQLSinkDTO mySQLSink, List<MySQLColumnInfo> columnList) {
        MySQLTableInfo tableInfo = new MySQLTableInfo();
        String dbName = getDbNameFromUrl(mySQLSink.getJdbcUrl());
        tableInfo.setDbName(dbName);
        tableInfo.setTableName(mySQLSink.getTableName());
        tableInfo.setPrimaryKey(mySQLSink.getPrimaryKey());
        tableInfo.setColumns(columnList);
        return tableInfo;
    }
    
    private static String getDbNameFromUrl(String jdbcUrl) {
        String database = null;
        if (Strings.isNullOrEmpty(jdbcUrl)) {
            throw new IllegalArgumentException("Invalid JDBC url.");
        }
        
        jdbcUrl = jdbcUrl.toLowerCase();
        if (jdbcUrl.startsWith("jdbc:impala")) {
            jdbcUrl = jdbcUrl.replace(":impala", "");
        }
        
        int pos1;
        if (!jdbcUrl.startsWith("jdbc:") || (pos1 = jdbcUrl.indexOf(':', 5)) == -1) {
            throw new IllegalArgumentException("Invalid JDBC url.");
        }
        
        String connUri = jdbcUrl.substring(pos1 + 1);
        if (connUri.startsWith("//")) {
            int pos = connUri.indexOf('/', 2);
            if (pos != -1) {
                database = connUri.substring(pos + 1);
            }
            
        }
         else {
            database = connUri;
        }
        
        if (Strings.isNullOrEmpty(database)) {
            throw new IllegalArgumentException("Invalid JDBC URL: " + jdbcUrl);
        }
        
        if (database.contains("?")) {
            database = database.substring(0, database.indexOf("?"));
        }
        
        if (database.contains(";")) {
            database = database.substring(0, database.indexOf(";"));
        }
        
        return database;
    }
    
    protected static String filterSensitive(String url) {
        if (StringUtils.isBlank(url)) {
            return url;
        }
        
        String resultUrl = url;
        if (StringUtils.containsIgnoreCase(url, SENSITIVE_PARAM_TRUE)) {
            resultUrl = StringUtils.replaceIgnoreCase(url, SENSITIVE_PARAM_TRUE, SENSITIVE_PARAM_FALSE);
        }
        
        LOGGER.debug("the origin url [{}] was replaced to: [{}]", url, resultUrl);
        return resultUrl;
    }
    
}


