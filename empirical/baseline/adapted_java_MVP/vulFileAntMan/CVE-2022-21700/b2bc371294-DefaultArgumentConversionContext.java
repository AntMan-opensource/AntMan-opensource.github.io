package io.micronaut.core.convert;
import io.micronaut.core.annotation.Internal;
import io.micronaut.core.type.Argument;
import java.nio.charset.Charset;
import java.util.*;
@Internal
class DefaultArgumentConversionContext<T> implements ArgumentConversionContext<T> {
    private final Argument<T> argument;
    private final Locale finalLocale;
    private final Charset finalCharset;
    private final List<ConversionError> conversionErrors = new ArrayList<>(3);
    DefaultArgumentConversionContext(Argument<T> argument, Locale finalLocale, Charset finalCharset) {
        this.argument = argument;
        this.finalLocale = finalLocale;
        this.finalCharset = finalCharset;
    }
    
    public Argument[] getTypeParameters() {
        return argument.getTypeParameters();
    }
    
    public Map<String, Argument<?>> getTypeVariables() {
        return argument.getTypeVariables();
    }
    
    public Locale getLocale() {
        return finalLocale;
    }
    
    public Charset getCharset() {
        return finalCharset;
    }
    
    public void reject(Exception exception) {
        if (exception != null) {
            conversionErrors.add(() -> exception);
        }
        
    }
    
    public void reject(Object value, Exception exception) {
        if (exception != null) {
            conversionErrors.add(new ConversionError() {
                public Optional<Object> getOriginalValue() {
                    return value != null ? Optional.of(value) : Optional.empty();
                }
                
                public Exception getCause() {
                    return exception;
                }
                
            }
            
);
        }
        
    }
    
    public Optional<ConversionError> getLastError() {
        if (!conversionErrors.isEmpty()) {
            return Optional.of(conversionErrors.get(conversionErrors.size() - 1));
        }
        
        return Optional.empty();
    }
    
    public Iterator<ConversionError> iterator() {
        return Collections.unmodifiableCollection(conversionErrors).iterator();
    }
    
    public Argument<T> getArgument() {
        return argument;
    }
    
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
        DefaultArgumentConversionContext<?> that = (DefaultArgumentConversionContext<?>) o;
        return Objects.equals(getArgument(), that.getArgument()) && Objects.equals(finalLocale, that.finalLocale) && Objects.equals(finalCharset, that.finalCharset);
    }
    
    public int hashCode() {
        return Objects.hash(argument, finalLocale, finalCharset);
    }
    
    public String toString() {
        return argument.toString();
    }
    
}


