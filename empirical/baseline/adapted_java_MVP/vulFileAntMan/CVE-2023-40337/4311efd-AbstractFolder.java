package com.cloudbees.hudson.plugins.folder;
import com.cloudbees.hudson.plugins.folder.computed.ComputedFolder;
import com.cloudbees.hudson.plugins.folder.config.AbstractFolderConfiguration;
import com.cloudbees.hudson.plugins.folder.health.FolderHealthMetric;
import com.cloudbees.hudson.plugins.folder.health.FolderHealthMetricDescriptor;
import com.cloudbees.hudson.plugins.folder.icons.StockFolderIcon;
import com.cloudbees.hudson.plugins.folder.views.AbstractFolderViewHolder;
import com.cloudbees.hudson.plugins.folder.views.DefaultFolderViewHolder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.AbortException;
import hudson.BulkChange;
import hudson.Extension;
import hudson.Util;
import static hudson.Util.fixEmpty;
import hudson.XmlFile;
import hudson.init.InitMilestone;
import hudson.init.Initializer;
import hudson.model.AbstractItem;
import hudson.model.Action;
import hudson.model.AllView;
import hudson.model.Computer;
import hudson.model.Descriptor;
import hudson.model.Executor;
import hudson.model.Failure;
import hudson.model.HealthReport;
import hudson.model.Item;
import hudson.model.ItemGroup;
import hudson.model.ItemGroupMixIn;
import hudson.model.Items;
import hudson.model.Job;
import hudson.model.ModifiableViewGroup;
import hudson.model.Queue;
import hudson.model.Result;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.model.TopLevelItem;
import hudson.model.View;
import hudson.model.ViewGroupMixIn;
import hudson.model.listeners.ItemListener;
import hudson.model.listeners.RunListener;
import static hudson.model.queue.Executables.getParentOf;
import hudson.model.queue.WorkUnit;
import hudson.search.CollectionSearchIndex;
import hudson.search.SearchIndexBuilder;
import hudson.search.SearchItem;
import hudson.security.ACL;
import hudson.security.ACLContext;
import hudson.util.AlternativeUiTextProvider;
import hudson.util.CopyOnWriteMap;
import hudson.util.DescribableList;
import hudson.util.FormApply;
import hudson.util.FormValidation;
import hudson.util.Function1;
import hudson.util.HttpResponses;
import hudson.views.DefaultViewsTabBar;
import hudson.views.ViewsTabBar;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
import javax.servlet.ServletException;
import jenkins.model.Jenkins;
import jenkins.model.ModelObjectWithChildren;
import jenkins.model.ProjectNamingStrategy;
import jenkins.model.TransientActionFactory;
import net.sf.json.JSONObject;
import org.acegisecurity.AccessDeniedException;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.HttpRedirect;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerFallback;
import org.kohsuke.stapler.StaplerOverridable;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.interceptor.RequirePOST;
@SuppressWarnings({"unchecked", "rawtypes"}) 
public abstract class AbstractFolder<I extends TopLevelItem> extends AbstractItem implements TopLevelItem, ItemGroup<I>, ModifiableViewGroup, StaplerFallback, ModelObjectWithChildren, StaplerOverridable {
    private static final Logger LOGGER = Logger.getLogger(AbstractFolder.class.getName());
    private static final Random ENTROPY = new Random();
    private static final int HEALTH_REPORT_CACHE_REFRESH_MIN = Math.max(10, Math.min(1440, Integer.getInteger( AbstractFolder.class.getName()+".healthReportCacheRefreshMin", 60 )));
    private static long loadingTick;
    private static final AtomicInteger jobTotal = new AtomicInteger();
    private static final AtomicInteger jobEncountered = new AtomicInteger();
    private static final AtomicBoolean loadJobTotalRan = new AtomicBoolean();
    private static final int TICK_INTERVAL = 15000;
    @Initializer(before=InitMilestone.JOB_LOADED, fatal=false)
    public static void loadJobTotal() {
        if (!loadJobTotalRan.compareAndSet(false, true)) {
            return; 
        }
        
        scan(new File(Jenkins.get().getRootDir(), "jobs"), 0);
    }
    
    private static void scan(File d, int depth) {
        File[] projects = d.listFiles();
        if (projects == null) {
            return;
        }
        
        for (File project : projects) {
            if (!new File(project, "config.xml").isFile()) {
                continue;
            }
            
            if (depth > 0) {
                jobTotal.incrementAndGet();
            }
            
            File jobs = new File(project, "jobs"); 
            if (jobs.isDirectory()) {
                scan(jobs, depth + 1);
            }
            
        }
        
    }
    
    protected transient Map<String,I> items = new CopyOnWriteMap.Tree<String,I>(String.CASE_INSENSITIVE_ORDER);
    private DescribableList<AbstractFolderProperty<?>,AbstractFolderPropertyDescriptor> properties;
    private  AbstractFolderViewHolder folderViews;
    private transient  CopyOnWriteArrayList<View> views;
    private transient volatile ViewsTabBar viewsTabBar;
    private transient volatile String primaryView;
    private transient  ViewGroupMixIn viewGroupMixIn;
    private DescribableList<FolderHealthMetric,FolderHealthMetricDescriptor> healthMetrics;
    private FolderIcon icon;
    private transient volatile long nextHealthReportsRefreshMillis;
    private transient volatile List<HealthReport> healthReports;
    protected AbstractFolder(ItemGroup parent, String name) {
        super(parent, name);
    }
    
    protected void init() {
        if (properties == null) {
            properties = new DescribableList<AbstractFolderProperty<?>,AbstractFolderPropertyDescriptor>(this);
        }
         else {
            properties.setOwner(this);
        }
        
        for (AbstractFolderProperty p : properties) {
            p.setOwner(this);
        }
        
        if (icon == null) {
            icon = newDefaultFolderIcon();
        }
        
        icon.setOwner(this);
        if (folderViews == null) {
            if (views != null && !views.isEmpty()) {
                if (primaryView != null) {
                    primaryView = DefaultFolderViewHolder.migrateLegacyPrimaryAllViewLocalizedName(views, primaryView);
                }
                
                folderViews = new DefaultFolderViewHolder(views, primaryView, viewsTabBar == null ? newDefaultViewsTabBar() : viewsTabBar);
            }
             else {
                folderViews = newFolderViewHolder();
            }
            
            views = null;
            primaryView = null;
            viewsTabBar = null;
        }
        
        viewGroupMixIn = new ViewGroupMixIn(this) {
            protected List<View> views() {
                return folderViews.getViews();
            }
            
            protected String primaryView() {
                String primaryView = folderViews.getPrimaryView();
                return primaryView == null ? folderViews.getViews().get(0).getViewName() : primaryView;
            }
            
            protected void primaryView(String name) {
                folderViews.setPrimaryView(name);
            }
            
            public void addView(View v) throws IOException {
                if (folderViews.isViewsModifiable()) {
                    super.addView(v);
                }
                
            }
            
            public boolean canDelete(View view) {
                return folderViews.isViewsModifiable() && super.canDelete(view);
            }
            
            public synchronized void deleteView(View view) throws IOException {
                if (folderViews.isViewsModifiable()) {
                    super.deleteView(view);
                }
                
            }
            
        };
        if (healthMetrics == null) {
            healthMetrics = new DescribableList<>(this, AbstractFolderConfiguration.get().getHealthMetrics());
        }
        
    }
    
    protected DefaultViewsTabBar newDefaultViewsTabBar() {
        return new DefaultViewsTabBar();
    }
    
    protected AbstractFolderViewHolder newFolderViewHolder() {
        CopyOnWriteArrayList views = new CopyOnWriteArrayList<View>();
        try {
            initViews(views);
        }
         catch (IOException e) {
            LOGGER.log(Level.WARNING, "Failed to set up the initial view", e);
        }
        
        return new DefaultFolderViewHolder(views, null, newDefaultViewsTabBar());
    }
    
    protected FolderIcon newDefaultFolderIcon() {
        return new StockFolderIcon();
    }
    
    protected void initViews(List<View> views) throws IOException {
        AllView v = new AllView("All", this);
        views.add(v);
    }
    
    public static <K, V extends TopLevelItem> Map<K, V> loadChildren(AbstractFolder<V> parent, File modulesDir, Function1<? extends K, ? super V> key) {
        CopyOnWriteMap.Tree<K, V> configurations = new CopyOnWriteMap.Tree<K, V>();
        if (!modulesDir.isDirectory() && !modulesDir.mkdirs()) { 
            LOGGER.log(Level.SEVERE, "Could not create {0} for folder {1}", new Object[]{modulesDir, parent.getFullName()});
            return configurations;
        }
        
        File[] subdirs = modulesDir.listFiles(new FileFilter() {
            public boolean accept(File child) {
                return child.isDirectory();
            }
            
        }
        
);
        if (subdirs == null) {
            return configurations;
        }
        
        final ChildNameGenerator<AbstractFolder<V>,V> childNameGenerator = parent.childNameGenerator();
        Map<String,V> byDirName = new HashMap<String, V>();
        if (parent.items != null) {
            if (childNameGenerator == null) {
                for (V item : parent.items.values()) {
                    byDirName.put(item.getName(), item);
                }
                
            }
             else {
                for (V item : parent.items.values()) {
                    String itemName = childNameGenerator.dirNameFromItem(parent, item);
                    if (itemName == null) {
                        itemName = childNameGenerator.dirNameFromLegacy(parent, item.getName());
                    }
                    
                    byDirName.put(itemName, item);
                }
                
            }
            
        }
        
        for (File subdir : subdirs) {
            try {
                boolean legacy;
                String childName;
                if (childNameGenerator == null) {
                    childName = subdir.getName();
                    legacy = false;
                }
                 else {
                    File nameFile = new File(subdir, ChildNameGenerator.CHILD_NAME_FILE);
                    if (nameFile.isFile()) {
                        childName = StringUtils.trimToNull(FileUtils.readFileToString(nameFile, "UTF-8"));
                        if (childName == null) {
                            LOGGER.log(Level.WARNING, "{0} was empty, assuming child name is {1}", new Object[]{nameFile, subdir.getName()});
                            legacy = true;
                            childName = subdir.getName();
                        }
                         else {
                            legacy = false;
                        }
                        
                    }
                     else {
                        legacy = true;
                        childName = subdir.getName();
                    }
                    
                }
                
                V item = byDirName.get(childName);
                boolean itemNeedsSave = false;
                if (item == null) {
                    XmlFile xmlFile = Items.getConfigFile(subdir);
                    if (xmlFile.exists()) {
                        item = (V) xmlFile.read();
                        String name;
                        if (childNameGenerator == null) {
                            name = subdir.getName();
                        }
                         else {
                            String dirName = childNameGenerator.dirNameFromItem(parent, item);
                            if (dirName == null) {
                                dirName = childNameGenerator.dirNameFromLegacy(parent, childName);
                                BulkChange bc = new BulkChange(item); 
                                try {
                                    childNameGenerator.recordLegacyName(parent, item, childName);
                                    itemNeedsSave = true;
                                }
                                 catch (IOException e) {
                                    LOGGER.log(Level.WARNING, "Ignoring {0} as could not record legacy name", subdir);
                                    continue;
                                }
                                 finally {
                                    bc.abort();
                                }
                                
                            }
                            
                            if (!subdir.getName().equals(dirName)) {
                                File newSubdir = parent.getRootDirFor(dirName);
                                if (newSubdir.exists()) {
                                    LOGGER.log(Level.WARNING, "Ignoring {0} as folder naming rules collide with {1}", new Object[]{subdir, newSubdir});
                                    continue;
                                }
                                
                                LOGGER.log(Level.INFO, "Moving {0} to {1} in accordance with folder naming rules", new Object[]{subdir, newSubdir});
                                if (!subdir.renameTo(newSubdir)) {
                                    LOGGER.log(Level.WARNING, "Failed to move {0} to {1}. Ignoring this item", new Object[]{subdir, newSubdir});
                                    continue;
                                }
                                
                            }
                            
                            File nameFile = new File(parent.getRootDirFor(dirName), ChildNameGenerator.CHILD_NAME_FILE);
                            name = childNameGenerator.itemNameFromItem(parent, item);
                            if (name == null) {
                                name = childNameGenerator.itemNameFromLegacy(parent, childName);
                                FileUtils.writeStringToFile(nameFile, name, "UTF-8");
                                BulkChange bc = new BulkChange(item); 
                                try {
                                    childNameGenerator.recordLegacyName(parent, item, childName);
                                    itemNeedsSave = true;
                                }
                                 catch (IOException e) {
                                    LOGGER.log(Level.WARNING, "Ignoring {0} as could not record legacy name", subdir);
                                    continue;
                                }
                                 finally {
                                    bc.abort();
                                }
                                
                            }
                             else if (!childName.equals(name) || legacy) {
                                FileUtils.writeStringToFile(nameFile, name, "UTF-8");
                            }
                            
                        }
                        
                        item.onLoad(parent, name);
                    }
                     else {
                        LOGGER.log(Level.WARNING, "could not find file " + xmlFile.getFile());
                        continue;
                    }
                    
                }
                 else {
                    String name;
                    if (childNameGenerator == null) {
                        name = subdir.getName();
                    }
                     else {
                        File nameFile = new File(subdir, ChildNameGenerator.CHILD_NAME_FILE);
                        name = childNameGenerator.itemNameFromItem(parent, item);
                        if (name == null) {
                            name = childNameGenerator.itemNameFromLegacy(parent, childName);
                            FileUtils.writeStringToFile(nameFile, name, "UTF-8");
                            BulkChange bc = new BulkChange(item); 
                            try {
                                childNameGenerator.recordLegacyName(parent, item, childName);
                                itemNeedsSave = true;
                            }
                             catch (IOException e) {
                                LOGGER.log(Level.WARNING, "Ignoring {0} as could not record legacy name", subdir);
                                continue;
                            }
                             finally {
                                bc.abort();
                            }
                            
                        }
                         else if (!childName.equals(name) || legacy) {
                            FileUtils.writeStringToFile(nameFile, name, "UTF-8");
                        }
                        
                        if (!subdir.getName().equals(name) && item instanceof AbstractItem && ((AbstractItem) item).getDisplayNameOrNull() == null) {
                            BulkChange bc = new BulkChange(item);
                            try {
                                ((AbstractItem) item).setDisplayName(childName);
                            }
                             finally {
                                bc.abort();
                            }
                            
                        }
                        
                    }
                    
                    item.onLoad(parent, name);
                }
                
                if (itemNeedsSave) {
                    try {
                        item.save();
                    }
                     catch (IOException e) {
                        LOGGER.log(Level.WARNING, "Could not update {0} after applying folder naming rules", item.getFullName());
                    }
                    
                }
                
                configurations.put(key.call(item), item);
            }
             catch (Exception e) {
                Logger.getLogger(ItemGroupMixIn.class.getName()).log(Level.WARNING, "could not load " + subdir, e);
            }
            
        }
        
        return configurations;
    }
    
    protected final I itemsPut(String name, I item) {
        ChildNameGenerator<AbstractFolder<I>, I> childNameGenerator = childNameGenerator();
        if (childNameGenerator != null) {
            File nameFile = new File(getRootDirFor(item), ChildNameGenerator.CHILD_NAME_FILE);
            String oldName;
            if (nameFile.isFile()) {
                try {
                    oldName = StringUtils.trimToNull(FileUtils.readFileToString(nameFile, "UTF-8"));
                }
                 catch (IOException e) {
                    oldName = null;
                }
                
            }
             else {
                oldName = null;
            }
            
            if (!name.equals(oldName)) {
                try {
                    FileUtils.writeStringToFile(nameFile, name, "UTF-8");
                }
                 catch (IOException e) {
                    LOGGER.log(Level.WARNING, "Could not create " + nameFile);
                }
                
            }
            
        }
        
        return items.put(name, item);
    }
    
    public void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException {
        super.onLoad(parent, name);
        init();
        final Thread t = Thread.currentThread();
        String n = t.getName();
        try {
            if (items == null) {
                Item current = parent.getItem(name);
                if (current != null && current.getClass() == getClass()) {
                    this.items = ((AbstractFolder) current).items;
                }
                
            }
            
            final ChildNameGenerator<AbstractFolder<I>,I> childNameGenerator = childNameGenerator();
            items = loadChildren(this, getJobsDir(), new Function1<String,I>() {
                public String call(I item) {
                    String fullName = item.getFullName();
                    t.setName("Loading job " + fullName);
                    float percentage = 100.0f * jobEncountered.incrementAndGet() / Math.max(1, jobTotal.get());
                    long now = System.currentTimeMillis();
                    if (loadingTick == 0) {
                        loadingTick = now;
                    }
                     else if (now - loadingTick > TICK_INTERVAL) {
                        LOGGER.log(Level.INFO, String.format("Loading job %s (%.1f%%)", fullName, percentage));
                        loadingTick = now;
                    }
                    
                    if (childNameGenerator == null) {
                        return item.getName();
                    }
                     else {
                        String name = childNameGenerator.itemNameFromItem(AbstractFolder.this, item);
                        if (name == null) {
                            return childNameGenerator.itemNameFromLegacy(AbstractFolder.this, item.getName());
                        }
                        
                        return name;
                    }
                    
                }
                
            }
            
);
        }
         finally {
            t.setName(n);
        }
        
    }
    
    private ChildNameGenerator<AbstractFolder<I>,I> childNameGenerator() {
        return getDescriptor().childNameGenerator();
    }
    
    public AbstractFolderDescriptor getDescriptor() {
        return (AbstractFolderDescriptor) Jenkins.get().getDescriptorOrDie(getClass());
    }
    
    public DescribableList<AbstractFolderProperty<?>,AbstractFolderPropertyDescriptor> getProperties() {
        return properties;
    }
    
    public void addProperty(AbstractFolderProperty p) throws IOException {
        if (!p.getDescriptor().isApplicable(getClass())) {
            throw new IllegalArgumentException(p.getClass().getName() + " cannot be applied to " + getClass().getName());
        }
        
        p.setOwner(this);
        properties.add(p);
    }
    
    protected File getJobsDir() {
        return new File(getRootDir(), "jobs");
    }
    
    protected final File getRootDirFor(String name) {
        return new File(getJobsDir(), name);
    }
    
    public File getRootDirFor(I child) {
        ChildNameGenerator<AbstractFolder<I>,I> childNameGenerator = childNameGenerator();
        if (childNameGenerator == null) {
            return getRootDirFor(child.getName());
        }
        
        String name = childNameGenerator.dirNameFromItem(this, child);
        if (name == null) {
            name = childNameGenerator.dirNameFromLegacy(this, child.getName());
        }
        
        return getRootDirFor(name);
    }
    
    public String getUrlChildPrefix() {
        return "job";
    }
    
    public I getJob(String name) {
        return getItem(name);
    }
    
    public String getPronoun() {
        return AlternativeUiTextProvider.get(PRONOUN, this, getDescriptor().getDisplayName());
    }
    
    public Collection<?> getOverrides() {
        List<Object> r = new ArrayList<Object>();
        for (AbstractFolderProperty<?> p : properties) {
            r.addAll(p.getItemContainerOverrides());
        }
        
        return r;
    }
    
    public void addView(View v) throws IOException {
        viewGroupMixIn.addView(v);
    }
    
    public boolean canDelete(View view) {
        return viewGroupMixIn.canDelete(view);
    }
    
    public void deleteView(View view) throws IOException {
        viewGroupMixIn.deleteView(view);
    }
    
    public View getView(String name) {
        return viewGroupMixIn.getView(name);
    }
    
    public Collection<View> getViews() {
        return viewGroupMixIn.getViews();
    }
    
    public AbstractFolderViewHolder getFolderViews() {
        return folderViews;
    }
    
    public void resetFolderViews() {
        folderViews = newFolderViewHolder();
    }
    
    public View getPrimaryView() {
        return viewGroupMixIn.getPrimaryView();
    }
    
    public void setPrimaryView(View v) {
        if (folderViews.isPrimaryModifiable()) {
            folderViews.setPrimaryView(v.getViewName());
        }
        
    }
    
    public void onViewRenamed(View view, String oldName, String newName) {
        viewGroupMixIn.onViewRenamed(view, oldName, newName);
    }
    
    public ViewsTabBar getViewsTabBar() {
        return folderViews.getTabBar();
    }
    
    public ItemGroup<? extends TopLevelItem> getItemGroup() {
        return this;
    }
    
    public List<Action> getViewActions() {
        return Collections.emptyList();
    }
    
    public View getStaplerFallback() {
        return getPrimaryView();
    }
    
    protected SearchIndexBuilder makeSearchIndex() {
        return super.makeSearchIndex().add(new CollectionSearchIndex<TopLevelItem>() {
            protected SearchItem get(String key) {
                return Jenkins.get().getItem(key, grp());
            }
            
            protected Collection<TopLevelItem> all() {
                return Items.getAllItems(grp(), TopLevelItem.class);
            }
            
            protected String getName(TopLevelItem j) {
                return j.getRelativeNameFrom(grp());
            }
            
            private ItemGroup<?> grp() {
                return AbstractFolder.this;
            }
            
        }
        
);
    }
    
    public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) {
        ContextMenu menu = new ContextMenu();
        for (View view : getViews()) {
            menu.add(view.getAbsoluteUrl(),view.getDisplayName());
        }
        
        return menu;
    }
    
    public synchronized void doCreateView(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, ParseException, Descriptor.FormException {
        checkPermission(View.CREATE);
        addView(View.create(req, rsp, this));
    }
    
    public FormValidation doViewExistsCheck(@QueryParameter String value) {
        checkPermission(View.CREATE);
        String view = fixEmpty(value);
        if (view == null) {
            return FormValidation.ok();
        }
        
        if (getView(view) == null) {
            return FormValidation.ok();
        }
         else {
            return FormValidation.error(Messages.Hudson_ViewAlreadyExists(view));
        }
        
    }
    
    public HealthReport getBuildHealth() {
        List<HealthReport> reports = getBuildHealthReports();
        return reports.isEmpty() ? new HealthReport() : reports.get(0);
    }
    
    public void invalidateBuildHealthReports() {
        healthReports = null;
    }
    
    @Exported(name = "healthReport")
    public List<HealthReport> getBuildHealthReports() {
        if (healthMetrics == null || healthMetrics.isEmpty()) {
            return Collections.emptyList();
        }
        
        List<HealthReport> reports = healthReports;
        if (reports != null && nextHealthReportsRefreshMillis > System.currentTimeMillis()) {
            return reports;
        }
        
        nextHealthReportsRefreshMillis = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(HEALTH_REPORT_CACHE_REFRESH_MIN * 3 / 4) + ENTROPY.nextInt((int)TimeUnit.MINUTES.toMillis(HEALTH_REPORT_CACHE_REFRESH_MIN / 2));
        reports = new ArrayList<HealthReport>();
        List<FolderHealthMetric.Reporter> reporters = new ArrayList<FolderHealthMetric.Reporter>(healthMetrics.size());
        boolean recursive = false;
        boolean topLevelOnly = true;
        for (FolderHealthMetric metric : healthMetrics) {
            recursive = recursive || metric.getType().isRecursive();
            topLevelOnly = topLevelOnly && metric.getType().isTopLevelItems();
            reporters.add(metric.reporter());
        }
        
        for (AbstractFolderProperty<?> p : getProperties()) {
            for (FolderHealthMetric metric : p.getHealthMetrics()) {
                recursive = recursive || metric.getType().isRecursive();
                topLevelOnly = topLevelOnly && metric.getType().isTopLevelItems();
                reporters.add(metric.reporter());
            }
            
        }
        
        if (recursive) {
            Stack<Iterable<? extends Item>> stack = new Stack<Iterable<? extends Item>>();
            stack.push(getItems());
            if (topLevelOnly) {
                while (!stack.isEmpty()) {
                    for (Item item : stack.pop()) {
                        if (item instanceof TopLevelItem) {
                            for (FolderHealthMetric.Reporter reporter : reporters) {
                                reporter.observe(item);
                            }
                            
                            if (item instanceof Folder) {
                                stack.push(((Folder) item).getItems());
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
             else {
                while (!stack.isEmpty()) {
                    for (Item item : stack.pop()) {
                        for (FolderHealthMetric.Reporter reporter : reporters) {
                            reporter.observe(item);
                        }
                        
                        if (item instanceof Folder) {
                            stack.push(((Folder) item).getItems());
                        }
                        
                    }
                    
                }
                
            }
            
        }
         else {
            for (Item item: getItems()) {
                for (FolderHealthMetric.Reporter reporter : reporters) {
                    reporter.observe(item);
                }
                
            }
            
        }
        
        for (FolderHealthMetric.Reporter reporter : reporters) {
            reports.addAll(reporter.report());
        }
        
        for (AbstractFolderProperty<?> p : getProperties()) {
            reports.addAll(p.getHealthReports());
        }
        
        Collections.sort(reports);
        healthReports = reports; 
        return reports;
    }
    
    public DescribableList<FolderHealthMetric, FolderHealthMetricDescriptor> getHealthMetrics() {
        return healthMetrics;
    }
    
    public HttpResponse doLastBuild(StaplerRequest req) {
        return HttpResponses.redirectToDot();
    }
    
    public FolderIcon getIcon() {
        return icon;
    }
    
    public void setIcon(FolderIcon icon) {
        this.icon = icon;
        icon.setOwner(this);
    }
    
    public FolderIcon getIconColor() {
        return icon;
    }
    
    public Collection<? extends Job> getAllJobs() {
        Set<Job> jobs = new HashSet<Job>();
        for (Item i : getItems()) {
            jobs.addAll(i.getAllJobs());
        }
        
        return jobs;
    }
    
    public Collection<I> getItems() {
        return getItems(item -> true);
    }
    
    public Collection<I> getItems(Predicate<I> pred) {
        List<I> viewableItems = new ArrayList<I>();
        for (I item : items.values()) {
            if (pred.test(item) && item.hasPermission(Item.READ)) {
                viewableItems.add(item);
            }
            
        }
        
        return viewableItems;
    }
    
    public boolean hasVisibleItems() {
        for (I item : items.values()) {
            if (item.hasPermission(Item.READ)) {
                return true;
            }
            
        }
        
        return false;
    }
    
    public I getItem(String name) throws AccessDeniedException {
        if (items == null) {
            return null;
        }
        
        I item = items.get(name);
        if (item == null) {
            return null;
        }
        
        if (!item.hasPermission(Item.READ)) {
            if (item.hasPermission(Item.DISCOVER)) {
                throw new AccessDeniedException("Please log in to access " + name);
            }
            
            return null;
        }
        
        return item;
    }
    
    public void onRenamed(I item, String oldName, String newName) throws IOException {
        items.remove(oldName);
        items.put(newName, item);
        for (View v : folderViews.getViews()) {
            v.onJobRenamed(item, oldName, newName);
        }
        
        save();
    }
    
    public void onDeleted(I item) throws IOException {
        ItemListener.fireOnDeleted(item);
        items.remove(item.getName());
        for (View v : folderViews.getViews()) {
            v.onJobRenamed(item, item.getName(), null);
        }
        
        save();
    }
    
    public void delete() throws IOException, InterruptedException {
        checkPermission(DELETE);
        boolean responsibleForAbortingBuilds = !ItemDeletion.contains(this);
        boolean ownsRegistration = ItemDeletion.register(this);
        if (!ownsRegistration && ItemDeletion.isRegistered(this)) {
            throw new Failure(Messages.AbstractFolder_BeingDeleted(getPronoun()));
        }
        
        try {
            if (responsibleForAbortingBuilds || ownsRegistration) {
                Queue queue = Queue.getInstance();
                if (this instanceof Queue.Task) {
                    queue.cancel((Queue.Task) this);
                }
                
                for (Queue.Item i : queue.getItems()) {
                    Item item = ItemDeletion.getItemOf(i.task);
                    while (item != null) {
                        if (item == this) {
                            queue.cancel(i);
                            break;
                        }
                        
                        if (item.getParent() instanceof Item) {
                            item = (Item) item.getParent();
                        }
                         else {
                            break;
                        }
                        
                    }
                    
                }
                
                Map<Executor, Queue.Executable> buildsInProgress = new LinkedHashMap<>();
                for (Computer c : Jenkins.get().getComputers()) {
                    for (Executor e : c.getAllExecutors()) {
                        WorkUnit workUnit = e.getCurrentWorkUnit();
                        if (workUnit != null) {
                            Queue.Executable executable = workUnit.getExecutable();
                            if (executable != null) {
                                Item item = ItemDeletion.getItemOf(getParentOf(executable));
                                if (item != null) {
                                    while (item != null) {
                                        if (item == this) {
                                            buildsInProgress.put(e, e.getCurrentExecutable());
                                            e.interrupt(Result.ABORTED);
                                            break;
                                        }
                                        
                                        if (item.getParent() instanceof Item) {
                                            item = (Item) item.getParent();
                                        }
                                         else {
                                            break;
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
                if (!buildsInProgress.isEmpty()) {
                    long expiration = System.nanoTime() + TimeUnit.SECONDS.toNanos(15);
                    while (!buildsInProgress.isEmpty() && expiration - System.nanoTime() > 0L) {
                        for (Iterator<Map.Entry<Executor, Queue.Executable>> iterator = buildsInProgress.entrySet().iterator(); iterator.hasNext(); ) {
                            Map.Entry<Executor, Queue.Executable> entry = iterator.next();
                            if (!entry.getKey().isAlive() || entry.getValue() != entry.getKey().getCurrentExecutable()) {
                                iterator.remove();
                            }
                            
                            entry.getKey().interrupt(Result.ABORTED);
                        }
                        
                        Thread.sleep(50L);
                    }
                    
                    if (!buildsInProgress.isEmpty()) {
                        throw new Failure(Messages.AbstractFolder_FailureToStopBuilds( buildsInProgress.size(), getFullDisplayName() ));
                    }
                    
                }
                
            }
            
            try (ACLContext oldContext = ACL.as(ACL.SYSTEM)) {
                for (Item i : new ArrayList<Item>(items.values())) {                     try { i.delete();
                    }
                     catch (AbortException e) {
                        throw (AbortException) new AbortException( "Failed to delete " + i.getFullDisplayName() + " : " + e.getMessage()).initCause(e);
                    }
                     catch (IOException e) {
                        throw new IOException("Failed to delete " + i.getFullDisplayName(), e);
                    }
                    
                }
                
            }
            
            synchronized (this) {
                performDelete();
            }
            
        }
         finally {
            if (ownsRegistration) {
                ItemDeletion.deregister(this);
            }
            
        }
        
        getParent().onDeleted(AbstractFolder.this);
        Jenkins.get().rebuildDependencyGraphAsync();
    }
    
    public boolean isDisabled() {
        return false;
    }
    
    protected void setDisabled(boolean disabled) {
        throw new UnsupportedOperationException("must be implemented if supportsMakeDisabled is overridden");
    }
    
    public boolean supportsMakeDisabled() {
        return false;
    }
    
    public void makeDisabled(boolean disabled) throws IOException {
        if (isDisabled() == disabled) {
            return; 
        }
        
        if (disabled && !supportsMakeDisabled()) {
            return; 
        }
        
        setDisabled(disabled);
        if (disabled && this instanceof Queue.Task) {
            Jenkins.get().getQueue().cancel((Queue.Task)this);
        }
        
        save();
        ItemListener.fireOnUpdated(this);
    }
    
    public HttpResponse doDisable() throws IOException, ServletException {
        checkPermission(CONFIGURE);
        makeDisabled(true);
        return new HttpRedirect(".");
    }
    
    public HttpResponse doEnable() throws IOException, ServletException {
        checkPermission(CONFIGURE);
        makeDisabled(false);
        return new HttpRedirect(".");
    }
    
    public synchronized void save() throws IOException {
        if (folderViews != null) {
            folderViews.invalidateCaches();
        }
        
        if (BulkChange.contains(this)) {
            return;
        }
        
        super.save();
        ItemListener.fireOnUpdated(this);
    }
    
    public void renameTo(String newName) throws IOException {
        super.renameTo(newName);
    }
    
    public synchronized void doSubmitDescription(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        getPrimaryView().doSubmitDescription(req, rsp);
    }
    
    public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, Descriptor.FormException {
        checkPermission(CONFIGURE);
        req.setCharacterEncoding("UTF-8");
        JSONObject json = req.getSubmittedForm();
        BulkChange bc = new BulkChange(this);
        try {
            description = json.getString("description");
            displayName = Util.fixEmpty(json.optString("displayNameOrNull"));
            if (folderViews.isTabBarModifiable() && json.has("viewsTabBar")) {
                folderViews.setTabBar(req.bindJSON(ViewsTabBar.class, json.getJSONObject("viewsTabBar")));
            }
            
            if (folderViews.isPrimaryModifiable() && json.has("primaryView")) {
                folderViews.setPrimaryView(json.getString("primaryView"));
            }
            
            properties.rebuild(req, json, getDescriptor().getPropertyDescriptors());
            for (AbstractFolderProperty p : properties) {
                p.setOwner(this);
            }
            
            healthMetrics.replaceBy(req.bindJSONToList(FolderHealthMetric.class, json.get("healthMetrics")));
            icon = req.bindJSON(FolderIcon.class, req.getSubmittedForm().getJSONObject("icon"));
            icon.setOwner(this);
            submit(req, rsp);
            makeDisabled(!json.optBoolean("enable"));
            save();
            bc.commit();
        }
         finally {
            bc.abort();
        }
        
        ProjectNamingStrategy namingStrategy = Jenkins.get().getProjectNamingStrategy();
            if (namingStrategy.isForceExistingJobs()) {
                namingStrategy.checkName(name);
            }
            
            FormApply.success(getSuccessfulDestination()).generateResponse(req, rsp, this);
    }
    
    protected String getSuccessfulDestination() {
        return ".";
    }
    
    protected void submit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, Descriptor.FormException {}
    public boolean isNameEditable() {
        return true;
    }
    
    protected void checkRename(String newName) {
        for (Job<?,?> job : getAllJobs()) {
            if (job.isBuilding()) {
                throw new Failure("Unable to rename a folder while a job inside it is building.");
            }
            
        }
        
        String blocker = renameBlocker();
        if (blocker != null) {
            throw new Failure(blocker);
        }
        
    }
    
    protected String renameBlocker() {
        return null;
    }
    
    private static void invalidateBuildHealthReports(Item item) {
        while (item != null) {
            if (item instanceof AbstractFolder) {
                ((AbstractFolder) item).invalidateBuildHealthReports();
            }
            
            if (item.getParent() instanceof Item) {
                item = (Item) item.getParent();
            }
             else {
                break;
            }
            
        }
        
    }
    
    public static class ItemListenerImpl extends ItemListener {
        public void onCreated(Item item) {
            invalidateBuildHealthReports(item);
        }
        
        public void onCopied(Item src, Item item) {
            invalidateBuildHealthReports(item);
        }
        
        public void onDeleted(Item item) {
            invalidateBuildHealthReports(item);
        }
        
        public void onRenamed(Item item, String oldName, String newName) {
            invalidateBuildHealthReports(item);
        }
        
        public void onLocationChanged(Item item, String oldFullName, String newFullName) {
            invalidateBuildHealthReports(item);
        }
        
        public void onUpdated(Item item) {
            invalidateBuildHealthReports(item);
        }
        
    }
    
    public static class RunListenerImpl extends RunListener<Run> {
        public void onCompleted(Run run, @NonNull TaskListener listener) {
            invalidateBuildHealthReports(run.getParent());
        }
        
        public void onFinalized(Run run) {
            invalidateBuildHealthReports(run.getParent());
        }
        
        public void onStarted(Run run, TaskListener listener) {
            invalidateBuildHealthReports(run.getParent());
        }
        
        public void onDeleted(Run run) {
            invalidateBuildHealthReports(run.getParent());
        }
        
    }
    
}


