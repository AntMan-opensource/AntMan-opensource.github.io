package ratpack.session.clientside;
import com.google.inject.Provides;
import com.google.inject.Scopes;
import com.google.inject.Singleton;
import io.netty.util.CharsetUtil;
import ratpack.guice.ConfigurableModule;
import ratpack.session.SessionId;
import ratpack.session.SessionStore;
import ratpack.session.clientside.internal.ClientSideSessionStore;
import ratpack.session.clientside.internal.DefaultCrypto;
import ratpack.session.clientside.internal.DefaultSigner;
import ratpack.session.clientside.internal.NoCrypto;
import javax.crypto.spec.SecretKeySpec;
public class ClientSideSessionModule extends ConfigurableModule<ClientSideSessionConfig> {
  protected void configure() {
    bind(SessionStore.class).to(ClientSideSessionStore.class).in(Scopes.SINGLETON);
  }
  
  @Singleton
  Signer signer(ClientSideSessionConfig config) {
    byte[] token = config.getSecretToken().getBytes(CharsetUtil.UTF_8);
    return new DefaultSigner(new SecretKeySpec(token, config.getMacAlgorithm()));
  }
  
  @Singleton
  Crypto crypto(ClientSideSessionConfig config) {
    if (config.getSecretKey() == null || config.getCipherAlgorithm() == null) {
      return NoCrypto.INSTANCE;
    }
     else {
      return new DefaultCrypto(config.getSecretKey().getBytes(CharsetUtil.UTF_8), config.getCipherAlgorithm());
    }
    
  }
  
}


