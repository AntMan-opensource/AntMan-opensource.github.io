package org.apache.tapestry5.http;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.tapestry5.commons.util.CollectionFactory;
import org.apache.tapestry5.http.internal.TapestryHttpInternalConstants;
import org.apache.tapestry5.ioc.internal.util.InternalUtils;
public final class ContentType {
    private final String baseType;
    private final String subType;
    private final Map<String, String> parameters;
    private static final Pattern PATTERN = Pattern.compile("^(.+)/([^;]+)(;(.+=[^;]+))*$");
    public ContentType(String contentType) {
        Matcher matcher = PATTERN.matcher(contentType);
        if (!matcher.matches()){
            throw new IllegalArgumentException(String.format("Not a parseable content type '%s'.", contentType));
        }
        
        this.baseType = matcher.group(1);
        this.subType = matcher.group(2);
        this.parameters = parseKeyValues(matcher.group(4));
    }
    
    private ContentType(String baseType, String subType, Map<String, String> parameters) {
        this.baseType = baseType;
        this.subType = subType;
        this.parameters = parameters;
    }
    
    private static Map<String, String> parseKeyValues(String keyValues) {
        if (keyValues == null){
            return Collections.emptyMap();
        }
        
        Map<String, String> parameters = CollectionFactory.newCaseInsensitiveMap();
        StringTokenizer tk = new StringTokenizer(keyValues, ";");
        while (tk.hasMoreTokens()){
            String token = tk.nextToken();
            int sep = token.indexOf('=');
            parameters.put(token.substring(0, sep), token.substring(sep + 1));
        }
        
        return parameters;
    }
    
    public boolean equals(Object o) {
        if (o == null) return false;
        if (o.getClass() != this.getClass()) return false;
        ContentType ct = (ContentType) o;
        return baseType.equals(ct.baseType) && subType.equals(ct.subType) && parameters.equals(ct.parameters);
    }
    
    public int hashCode()  {
        return Objects.hash(baseType, subType, parameters);
    }
    
    public String getBaseType() {
        return baseType;
    }
    
    public String getSubType() {
        return subType;
    }
    
    public String getMimeType() {
        return baseType + "/" + subType;
    }
    
    public List<String> getParameterNames() {
        return InternalUtils.sortedKeys(parameters);
    }
    
    public String getCharset() {
        return getParameter(TapestryHttpInternalConstants.CHARSET_CONTENT_TYPE_PARAMETER);
    }
    
    public String getParameter(String key) {
        assert key != null;
        return parameters.get(key);
    }
    
    private String unparse() {
        StringBuilder buffer = new StringBuilder(getMimeType());
        for (String parameterName : getParameterNames()){
            buffer.append(';');
            buffer.append(parameterName);
            buffer.append('=');
            buffer.append(parameters.get(parameterName));
        }
        
        return buffer.toString();
    }
    
    public ContentType withParameter(String key, String value) {
        assert InternalUtils.isNonBlank(key);
        assert InternalUtils.isNonBlank(value);
        Map<String, String> newParameters = CollectionFactory.newCaseInsensitiveMap();
        newParameters.putAll(parameters);
        newParameters.put(key, value);
        return new ContentType(baseType, subType, newParameters);
    }
    
    public ContentType withCharset(String charset) {
        return withParameter(TapestryHttpInternalConstants.CHARSET_CONTENT_TYPE_PARAMETER, charset);
    }
    
    public String toString() {
        return unparse();
    }
    
    public boolean hasParameters() {
        return !parameters.isEmpty();
    }
    
}


