package org.apache.inlong.manager.service.sink;
import org.apache.inlong.manager.pojo.common.PageResult;
import org.apache.inlong.manager.pojo.common.UpdateResult;
import org.apache.inlong.manager.pojo.group.InlongGroupInfo;
import org.apache.inlong.manager.pojo.sink.ParseFieldRequest;
import org.apache.inlong.manager.pojo.sink.SinkApproveDTO;
import org.apache.inlong.manager.pojo.sink.SinkBriefInfo;
import org.apache.inlong.manager.pojo.sink.SinkField;
import org.apache.inlong.manager.pojo.sink.SinkPageRequest;
import org.apache.inlong.manager.pojo.sink.SinkRequest;
import org.apache.inlong.manager.pojo.sink.StreamSink;
import org.apache.inlong.manager.pojo.stream.InlongStreamInfo;
import org.apache.inlong.manager.pojo.user.UserInfo;
import javax.annotation.Nullable;
import java.util.List;
import java.util.Map;
public interface StreamSinkService {
    Integer save(SinkRequest request, String operator);
    Integer save(SinkRequest request, UserInfo opInfo);
    StreamSink get(Integer id);
    StreamSink get(Integer id, UserInfo opInfo);
    List<StreamSink> listSink(String groupId, @Nullable String streamId);
    List<SinkBriefInfo> listBrief(String groupId, String streamId);
    Map<String, List<StreamSink>> getSinksMap(InlongGroupInfo groupInfo, List<InlongStreamInfo> streamInfos);
    Integer getCount(String groupId, String streamId);
    PageResult<? extends StreamSink> listByCondition(SinkPageRequest request);
    List<? extends StreamSink> listByCondition(SinkPageRequest request, UserInfo opInfo);
    Boolean update(SinkRequest sinkRequest, String operator);
    Boolean update(SinkRequest sinkRequest, UserInfo opInfo);
    UpdateResult updateByKey(SinkRequest sinkRequest, String operator);
    void updateStatus(Integer id, int status, String log);
    Boolean delete(Integer id, Boolean startProcess, String operator);
    Boolean delete(Integer id, Boolean startProcess, UserInfo opInfo);
    Boolean deleteByKey(String groupId, String streamId, String name, Boolean startProcess, String operator);
    Boolean logicDeleteAll(String groupId, String streamId, String operator);
    Boolean deleteAll(String groupId, String streamId, String operator);
    List<String> getExistsStreamIdList(String groupId, String sinkType, List<String> streamIdList);
    List<String> getSinkTypeList(String groupId, String streamId);
    Boolean updateAfterApprove(List<SinkApproveDTO> sinkApproveList, String operator);
    List<SinkField> parseFields(ParseFieldRequest parseFieldRequest);
}


