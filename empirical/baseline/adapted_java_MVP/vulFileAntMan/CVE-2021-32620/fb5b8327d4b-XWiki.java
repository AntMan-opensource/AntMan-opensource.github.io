package com.xpn.xwiki;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileTime;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.zip.ZipOutputStream;
import javax.annotation.Priority;
import javax.inject.Provider;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.naming.NamingException;
import javax.script.ScriptContext;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.httpclient.Credentials;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.URIException;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.util.URIUtil;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.reflect.FieldUtils;
import org.apache.velocity.VelocityContext;
import org.hibernate.HibernateException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.bridge.event.DocumentCreatedEvent;
import org.xwiki.bridge.event.DocumentCreatingEvent;
import org.xwiki.bridge.event.DocumentDeletedEvent;
import org.xwiki.bridge.event.DocumentDeletingEvent;
import org.xwiki.bridge.event.DocumentRolledBackEvent;
import org.xwiki.bridge.event.DocumentRollingBackEvent;
import org.xwiki.bridge.event.DocumentUpdatedEvent;
import org.xwiki.bridge.event.DocumentUpdatingEvent;
import org.xwiki.bridge.event.WikiCopiedEvent;
import org.xwiki.bridge.event.WikiDeletedEvent;
import org.xwiki.cache.Cache;
import org.xwiki.classloader.ClassLoaderManager;
import org.xwiki.component.event.ComponentDescriptorAddedEvent;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.component.manager.NamespacedComponentManager;
import org.xwiki.component.util.DefaultParameterizedType;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.container.servlet.HttpServletUtils;
import org.xwiki.context.Execution;
import org.xwiki.edit.EditConfiguration;
import org.xwiki.job.Job;
import org.xwiki.job.JobException;
import org.xwiki.job.JobExecutor;
import org.xwiki.job.annotation.Serializable;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.job.event.status.JobStatus.State;
import org.xwiki.localization.ContextualLocalizationManager;
import org.xwiki.localization.LocaleUtils;
import org.xwiki.mail.MailListener;
import org.xwiki.mail.MailSender;
import org.xwiki.mail.MailSenderConfiguration;
import org.xwiki.mail.MailStatusResultSerializer;
import org.xwiki.mail.XWikiAuthenticator;
import org.xwiki.model.EntityType;
import org.xwiki.model.reference.AttachmentReference;
import org.xwiki.model.reference.AttachmentReferenceResolver;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.LocalDocumentReference;
import org.xwiki.model.reference.ObjectReference;
import org.xwiki.model.reference.PageReference;
import org.xwiki.model.reference.PageReferenceResolver;
import org.xwiki.model.reference.RegexEntityReference;
import org.xwiki.model.reference.SpaceReference;
import org.xwiki.model.reference.WikiReference;
import org.xwiki.observation.EventListener;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.event.CancelableEvent;
import org.xwiki.observation.event.Event;
import org.xwiki.query.QueryException;
import org.xwiki.query.QueryFilter;
import org.xwiki.refactoring.batch.BatchOperationExecutor;
import org.xwiki.rendering.async.AsyncContext;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.Block.Axes;
import org.xwiki.rendering.block.MetaDataBlock;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.block.match.MetadataBlockMatcher;
import org.xwiki.rendering.internal.transformation.MutableRenderingContext;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.parser.ParseException;
import org.xwiki.rendering.renderer.BlockRenderer;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.syntax.SyntaxContent;
import org.xwiki.rendering.transformation.RenderingContext;
import org.xwiki.resource.ResourceReference;
import org.xwiki.resource.ResourceReferenceManager;
import org.xwiki.resource.ResourceReferenceResolver;
import org.xwiki.resource.ResourceType;
import org.xwiki.resource.ResourceTypeResolver;
import org.xwiki.resource.entity.EntityResourceReference;
import org.xwiki.script.ScriptContextManager;
import org.xwiki.skin.Resource;
import org.xwiki.skin.Skin;
import org.xwiki.skin.SkinManager;
import org.xwiki.stability.Unstable;
import org.xwiki.template.TemplateManager;
import org.xwiki.url.ExtendedURL;
import org.xwiki.url.URLConfiguration;
import org.xwiki.user.CurrentUserReference;
import org.xwiki.user.UserPropertiesResolver;
import org.xwiki.velocity.VelocityContextFactory;
import org.xwiki.velocity.VelocityManager;
import org.xwiki.velocity.XWikiVelocityContext;
import org.xwiki.velocity.XWikiVelocityException;
import org.xwiki.wiki.descriptor.WikiDescriptor;
import org.xwiki.wiki.descriptor.WikiDescriptorManager;
import org.xwiki.wiki.manager.WikiManager;
import org.xwiki.wiki.manager.WikiManagerException;
import org.xwiki.xml.XMLUtils;
import com.xpn.xwiki.api.Api;
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.api.User;
import com.xpn.xwiki.criteria.api.XWikiCriteriaService;
import com.xpn.xwiki.doc.DeletedAttachment;
import com.xpn.xwiki.doc.DocumentRevisionProvider;
import com.xpn.xwiki.doc.MandatoryDocumentInitializer;
import com.xpn.xwiki.doc.XWikiAttachment;
import com.xpn.xwiki.doc.XWikiAttachmentArchive;
import com.xpn.xwiki.doc.XWikiDeletedDocument;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.doc.XWikiDocument.XWikiAttachmentToRemove;
import com.xpn.xwiki.doc.XWikiDocumentArchive;
import com.xpn.xwiki.internal.WikiInitializerJob;
import com.xpn.xwiki.internal.WikiInitializerRequest;
import com.xpn.xwiki.internal.XWikiCfgConfigurationSource;
import com.xpn.xwiki.internal.XWikiConfigDelegate;
import com.xpn.xwiki.internal.XWikiInitializerJob;
import com.xpn.xwiki.internal.debug.DebugConfiguration;
import com.xpn.xwiki.internal.event.MandatoryDocumentsInitializedEvent;
import com.xpn.xwiki.internal.event.MandatoryDocumentsInitializingEvent;
import com.xpn.xwiki.internal.event.UserCreatingDocumentEvent;
import com.xpn.xwiki.internal.event.UserDeletingDocumentEvent;
import com.xpn.xwiki.internal.event.UserUpdatingDocumentEvent;
import com.xpn.xwiki.internal.event.XObjectPropertyAddedEvent;
import com.xpn.xwiki.internal.event.XObjectPropertyDeletedEvent;
import com.xpn.xwiki.internal.event.XObjectPropertyEvent;
import com.xpn.xwiki.internal.event.XObjectPropertyUpdatedEvent;
import com.xpn.xwiki.internal.mandatory.XWikiPreferencesDocumentInitializer;
import com.xpn.xwiki.internal.render.LinkedResourceHelper;
import com.xpn.xwiki.internal.render.OldRendering;
import com.xpn.xwiki.internal.render.groovy.ParseGroovyFromString;
import com.xpn.xwiki.internal.skin.InternalSkinConfiguration;
import com.xpn.xwiki.internal.skin.InternalSkinManager;
import com.xpn.xwiki.internal.skin.WikiSkin;
import com.xpn.xwiki.internal.skin.WikiSkinUtils;
import com.xpn.xwiki.internal.store.StoreConfiguration;
import com.xpn.xwiki.internal.store.hibernate.HibernateConfiguration;
import com.xpn.xwiki.internal.velocity.VelocityEvaluator;
import com.xpn.xwiki.job.JobRequestContext;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.PropertyInterface;
import com.xpn.xwiki.objects.classes.BaseClass;
import com.xpn.xwiki.objects.classes.PasswordClass;
import com.xpn.xwiki.objects.classes.PropertyClass;
import com.xpn.xwiki.objects.meta.MetaClass;
import com.xpn.xwiki.plugin.XWikiPluginInterface;
import com.xpn.xwiki.plugin.XWikiPluginManager;
import com.xpn.xwiki.render.groovy.XWikiPageClassLoader;
import com.xpn.xwiki.stats.api.XWikiStatsService;
import com.xpn.xwiki.stats.impl.SearchEngineRule;
import com.xpn.xwiki.stats.impl.XWikiStatsServiceImpl;
import com.xpn.xwiki.store.AttachmentRecycleBinStore;
import com.xpn.xwiki.store.AttachmentVersioningStore;
import com.xpn.xwiki.store.XWikiAttachmentStoreInterface;
import com.xpn.xwiki.store.XWikiCacheStoreInterface;
import com.xpn.xwiki.store.XWikiHibernateStore;
import com.xpn.xwiki.store.XWikiRecycleBinStoreInterface;
import com.xpn.xwiki.store.XWikiStoreInterface;
import com.xpn.xwiki.store.XWikiVersioningStoreInterface;
import com.xpn.xwiki.user.api.XWikiAuthService;
import com.xpn.xwiki.user.api.XWikiGroupService;
import com.xpn.xwiki.user.api.XWikiRightService;
import com.xpn.xwiki.user.api.XWikiUser;
import com.xpn.xwiki.user.impl.xwiki.XWikiAuthServiceImpl;
import com.xpn.xwiki.user.impl.xwiki.XWikiGroupServiceImpl;
import com.xpn.xwiki.user.impl.xwiki.XWikiRightServiceImpl;
import com.xpn.xwiki.util.Util;
import com.xpn.xwiki.util.XWikiStubContextProvider;
import com.xpn.xwiki.web.Utils;
import com.xpn.xwiki.web.XWikiEngineContext;
import com.xpn.xwiki.web.XWikiMessageTool;
import com.xpn.xwiki.web.XWikiRequest;
import com.xpn.xwiki.web.XWikiServletRequestStub;
import com.xpn.xwiki.web.XWikiURLFactory;
import com.xpn.xwiki.web.XWikiURLFactoryService;
import com.xpn.xwiki.web.XWikiURLFactoryServiceImpl;
import com.xpn.xwiki.web.includeservletasstring.IncludeServletAsString;
public class XWiki implements EventListener {
    public static final String DEFAULT_MAIN_WIKI = "xwiki";
    public static final String DEFAULT_HOME_SPACE = "Main";
    public static final String SYSTEM_SPACE = "XWiki";
    public static final String DEFAULT_SPACE_HOMEPAGE = "WebHome";
    public static final String CKEY_SKIN = InternalSkinManager.CKEY_SKIN;
    public static final String CKEY_BASESKIN = InternalSkinManager.CKEY_PARENTSKIN;
    public static final String DEFAULT_SKIN = InternalSkinConfiguration.DEFAULT_SKIN;
    public static final String CACHE_VERSION = "cache-version";
    protected static final Logger LOGGER = LoggerFactory.getLogger(XWiki.class);
    private static final DocumentReference VIRTUAL_WIKI_DEFINITION_CLASS_REFERENCE = new DocumentReference(DEFAULT_MAIN_WIKI, SYSTEM_SPACE, "XWikiServerClass");
    public static final String DEFAULT_ENCODING = "UTF-8";
    private static final String NO_VALUE = "---";
    private static final List<String> SKIN_RESOURCE_SPACE_NAMES = Arrays.asList("skins", "resources");
    private XWikiStoreInterface store;
    private XWikiAttachmentStoreInterface defaultAttachmentContentStore;
    private AttachmentVersioningStore defaultAttachmentArchiveStore;
    private XWikiVersioningStoreInterface versioningStore;
    private XWikiRecycleBinStoreInterface recycleBinStore;
    private AttachmentRecycleBinStore attachmentRecycleBinStore;
    private XWikiPluginManager pluginManager;
    private XWikiAuthService authService;
    private XWikiRightService rightService;
    private XWikiGroupService groupService;
    private XWikiStatsService statsService;
    private XWikiURLFactoryService urlFactoryService;
    private XWikiCriteriaService criteriaService;
    private final Object AUTH_SERVICE_LOCK = new Object();
    private final Object RIGHT_SERVICE_LOCK = new Object();
    private final Object GROUP_SERVICE_LOCK = new Object();
    private final Object STATS_SERVICE_LOCK = new Object();
    private final Object URLFACTORY_SERVICE_LOCK = new Object();
    private MetaClass metaclass;
    private String version;
    private XWikiEngineContext engine_context;
    private String database;
    private String fullNameSQL;
    private Map<String, WikiInitializerJob> initializedWikis = new ConcurrentHashMap<>();
    private boolean isReadOnly = false;
    public static final String CFG_ENV_NAME = XWikiCfgConfigurationSource.CFG_ENV_NAME;
    public static final String MACROS_FILE = "/templates/macros.txt";
    private static final String VERSION_FILE = "/WEB-INF/version.properties";
    private static final String VERSION_FILE_PROPERTY = "version";
    private static XWikiInitializerJob job;
    private List<String> configuredSyntaxes;
    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;
    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;
    private DocumentReferenceResolver<EntityReference> currentReferenceDocumentReferenceResolver;
    private EntityReferenceResolver<String> currentMixedEntityReferenceResolver;
    private EntityReferenceResolver<String> relativeEntityReferenceResolver;
    private EntityReferenceSerializer<String> localStringEntityReferenceSerializer;
    private ResourceReferenceManager resourceReferenceManager;
    private JobExecutor jobExecutor;
    private InternalSkinManager internalSkinManager;
    private TemplateManager templateManager;
    private RenderingContext renderingContext;
    private VelocityEvaluator velocityEvaluator;
    private Boolean hasBacklinks;
    private ConfigurationSource xwikicfg;
    private ConfigurationSource wikiConfiguration;
    private UserPropertiesResolver userPropertiesResolver;
    private ConfigurationSource spaceConfiguration;
    private EditConfiguration editConfiguration;
    private URLConfiguration urlConfiguration;
    private StoreConfiguration storeConfiguration;
    private HibernateConfiguration hibernateConfiguration;
    private ObservationManager observationManager;
    private Provider<XWikiContext> xcontextProvider;
    private ContextualLocalizationManager localization;
    private Provider<OldRendering> oldRenderingProvider;
    private ParseGroovyFromString parseGroovyFromString;
    private JobProgressManager progress;
    private Provider<DocumentReference> defaultDocumentReferenceProvider;
    private DocumentReferenceResolver<EntityReference> currentgetdocumentResolver;
    private PageReferenceResolver<EntityReference> currentgetpageResolver;
    private AttachmentReferenceResolver<EntityReference> currentAttachmentReferenceResolver;
    private WikiSkinUtils wikiSkinUtils;
    private DocumentRevisionProvider documentRevisionProvider;
    private VelocityContextFactory velocityContextFactory;
    private WikiDescriptorManager wikiDescriptorManager;
    private AsyncContext asyncContext;
    private ConfigurationSource getConfiguration() {
        if (this.xwikicfg == null) {
            this.xwikicfg = Utils.getComponent(ConfigurationSource.class, XWikiCfgConfigurationSource.ROLEHINT);
        }
        
        return this.xwikicfg;
    }
    
    private ConfigurationSource getWikiConfiguration() {
        if (this.wikiConfiguration == null) {
            this.wikiConfiguration = Utils.getComponent(ConfigurationSource.class, "wiki");
        }
        
        return this.wikiConfiguration;
    }
    
    private ConfigurationSource getSpaceConfiguration() {
        if (this.spaceConfiguration == null) {
            this.spaceConfiguration = Utils.getComponent(ConfigurationSource.class, "space");
        }
        
        return this.spaceConfiguration;
    }
    
    private UserPropertiesResolver getAllUserPropertiesResolver() {
        if (this.userPropertiesResolver == null) {
            this.userPropertiesResolver = Utils.getComponent(UserPropertiesResolver.class, "all");
        }
        
        return this.userPropertiesResolver;
    }
    
    private EditConfiguration getEditConfiguration() {
        if (this.editConfiguration == null) {
            this.editConfiguration = Utils.getComponent(EditConfiguration.class);
        }
        
        return this.editConfiguration;
    }
    
    private URLConfiguration getURLConfiguration() {
        if (this.urlConfiguration == null) {
            this.urlConfiguration = Utils.getComponent(URLConfiguration.class);
        }
        
        return this.urlConfiguration;
    }
    
    private StoreConfiguration getStoreConfiguration() {
        if (this.storeConfiguration == null) {
            this.storeConfiguration = Utils.getComponent(StoreConfiguration.class);
        }
        
        return this.storeConfiguration;
    }
    
    private HibernateConfiguration getHibernateConfiguration() {
        if (this.hibernateConfiguration == null) {
            this.hibernateConfiguration = Utils.getComponent(HibernateConfiguration.class);
        }
        
        return this.hibernateConfiguration;
    }
    
    private InternalSkinManager getInternalSkinManager() {
        if (this.internalSkinManager == null) {
            this.internalSkinManager = Utils.getComponent(InternalSkinManager.class);
        }
        
        return this.internalSkinManager;
    }
    
    private TemplateManager getTemplateManager() {
        if (this.templateManager == null) {
            this.templateManager = Utils.getComponent(TemplateManager.class);
        }
        
        return this.templateManager;
    }
    
    private RenderingContext getRenderingContext() {
        if (this.renderingContext == null) {
            this.renderingContext = Utils.getComponent(RenderingContext.class);
        }
        
        return this.renderingContext;
    }
    
    private MutableRenderingContext getMutableRenderingContext() {
        return getRenderingContext() instanceof MutableRenderingContext ? (MutableRenderingContext) getRenderingContext() : null;
    }
    
    private VelocityEvaluator getVelocityEvaluator() {
        if (this.velocityEvaluator == null) {
            this.velocityEvaluator = Utils.getComponent(VelocityEvaluator.class);
        }
        
        return this.velocityEvaluator;
    }
    
    private ObservationManager getObservationManager() {
        if (this.observationManager == null) {
            this.observationManager = Utils.getComponent(ObservationManager.class);
        }
        
        return this.observationManager;
    }
    
    private XWikiContext getXWikiContext() {
        if (this.xcontextProvider == null) {
            this.xcontextProvider = Utils.getComponent(XWikiContext.TYPE_PROVIDER);
        }
        
        return this.xcontextProvider.get();
    }
    
    private ContextualLocalizationManager getLocalization() {
        if (this.localization == null) {
            this.localization = Utils.getComponent(ContextualLocalizationManager.class);
        }
        
        return this.localization;
    }
    
    private OldRendering getOldRendering() {
        if (this.oldRenderingProvider == null) {
            this.oldRenderingProvider = Utils.getComponent(OldRendering.TYPE_PROVIDER);
        }
        
        return this.oldRenderingProvider.get();
    }
    
    private ParseGroovyFromString getParseGroovyFromString() {
        if (this.parseGroovyFromString == null) {
            this.parseGroovyFromString = Utils.getComponent(ParseGroovyFromString.class);
        }
        
        return this.parseGroovyFromString;
    }
    
    private JobProgressManager getProgress() {
        if (this.progress == null) {
            this.progress = Utils.getComponent(JobProgressManager.class);
        }
        
        return this.progress;
    }
    
    private Provider<DocumentReference> getDefaultDocumentReferenceProvider() {
        if (this.defaultDocumentReferenceProvider == null) {
            this.defaultDocumentReferenceProvider = Utils.getComponent(DocumentReference.TYPE_PROVIDER);
        }
        
        return this.defaultDocumentReferenceProvider;
    }
    
    private DocumentReferenceResolver<EntityReference> getCurrentGetDocumentResolver() {
        if (this.currentgetdocumentResolver == null) {
            this.currentgetdocumentResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, "currentgetdocument");
        }
        
        return this.currentgetdocumentResolver;
    }
    
    private PageReferenceResolver<EntityReference> getCurrentGetPageResolver() {
        if (this.currentgetpageResolver == null) {
            this.currentgetpageResolver = Utils.getComponent(PageReferenceResolver.TYPE_REFERENCE, "currentgetpage");
        }
        
        return this.currentgetpageResolver;
    }
    
    private AttachmentReferenceResolver<EntityReference> getCurrentAttachmentResolver() {
        if (this.currentAttachmentReferenceResolver == null) {
            this.currentAttachmentReferenceResolver = Utils.getComponent(AttachmentReferenceResolver.TYPE_REFERENCE, "current");
        }
        
        return this.currentAttachmentReferenceResolver;
    }
    
    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer() {
        if (this.defaultEntityReferenceSerializer == null) {
            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);
        }
        
        return this.defaultEntityReferenceSerializer;
    }
    
    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver() {
        if (this.currentMixedDocumentReferenceResolver == null) {
            this.currentMixedDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, "currentmixed");
        }
        
        return this.currentMixedDocumentReferenceResolver;
    }
    
    private DocumentReferenceResolver<EntityReference> getCurrentReferenceDocumentReferenceResolver() {
        if (this.currentReferenceDocumentReferenceResolver == null) {
            this.currentReferenceDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, "current");
        }
        
        return this.currentReferenceDocumentReferenceResolver;
    }
    
    private EntityReferenceResolver<String> getCurrentMixedEntityReferenceResolver() {
        if (this.currentMixedEntityReferenceResolver == null) {
            this.currentMixedEntityReferenceResolver = Utils.getComponent(EntityReferenceResolver.TYPE_STRING, "currentmixed");
        }
        
        return this.currentMixedEntityReferenceResolver;
    }
    
    private EntityReferenceResolver<String> getRelativeEntityReferenceResolver() {
        if (this.relativeEntityReferenceResolver == null) {
            this.relativeEntityReferenceResolver = Utils.getComponent(EntityReferenceResolver.TYPE_STRING, "relative");
        }
        
        return this.relativeEntityReferenceResolver;
    }
    
    private EntityReferenceSerializer<String> getLocalStringEntityReferenceSerializer() {
        if (this.localStringEntityReferenceSerializer == null) {
            this.localStringEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "local");
        }
        
        return this.localStringEntityReferenceSerializer;
    }
    
    private ResourceReferenceManager getResourceReferenceManager() {
        if (this.resourceReferenceManager == null) {
            this.resourceReferenceManager = Utils.getComponent(ResourceReferenceManager.class);
        }
        
        return this.resourceReferenceManager;
    }
    
    private JobExecutor getJobExecutor() {
        if (this.jobExecutor == null) {
            this.jobExecutor = Utils.getComponent(JobExecutor.class);
        }
        
        return this.jobExecutor;
    }
    
    private DocumentReference getDefaultDocumentReference() {
        return getDefaultDocumentReferenceProvider().get();
    }
    
    private WikiSkinUtils getWikiSkinUtils() {
        if (this.wikiSkinUtils == null) {
            this.wikiSkinUtils = Utils.getComponent(WikiSkinUtils.class);
        }
        
        return this.wikiSkinUtils;
    }
    
    private DocumentRevisionProvider getDocumentRevisionProvider() {
        if (this.documentRevisionProvider == null) {
            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);
        }
        
        return this.documentRevisionProvider;
    }
    
    private VelocityContextFactory getVelocityContextFactory() {
        if (this.velocityContextFactory == null) {
            this.velocityContextFactory = Utils.getComponent(VelocityContextFactory.class);
        }
        
        return this.velocityContextFactory;
    }
    
    private WikiDescriptorManager getWikiDescriptorManager() {
        if (this.wikiDescriptorManager == null) {
            this.wikiDescriptorManager = Utils.getComponent(WikiDescriptorManager.class);
        }
        
        return this.wikiDescriptorManager;
    }
    
    private AsyncContext getAsyncContext() {
        if (this.asyncContext == null) {
            this.asyncContext = Utils.getComponent(AsyncContext.class);
        }
        
        return this.asyncContext;
    }
    
    private String localizePlainOrKey(String key, Object... parameters) {
        return StringUtils.defaultString(getLocalization().getTranslationPlain(key, parameters), key);
    }
    
    public static XWiki getMainXWiki(XWikiContext context) throws XWikiException {
        return getMainXWiki(true, context);
    }
    
    public static XWiki getMainXWiki(boolean wait, XWikiContext context) throws XWikiException {
        String xwikiname = DEFAULT_MAIN_WIKI;
        context.setMainXWiki(xwikiname);
        XWiki xwiki;
        try {
            XWikiEngineContext econtext = context.getEngineContext();
            xwiki = (XWiki) econtext.getAttribute(xwikiname);
            if (xwiki == null) {
                synchronized (XWiki.class) {
                    xwiki = (XWiki) econtext.getAttribute(xwikiname);
                    if (xwiki == null && job == null) {
                        job = Utils.getComponent((Type) Job.class, XWikiInitializerJob.JOBTYPE);
                        if (job.getStatus() == null) {
                            Utils.<XWikiStubContextProvider>getComponent(XWikiStubContextProvider.class) .initialize(context);
                            job.startAsync();
                        }
                        
                    }
                    
                }
                
                if (wait) {
                    job.join();
                    xwiki = (XWiki) econtext.getAttribute(xwikiname);
                }
                
            }
            
            context.setWiki(xwiki);
            return xwiki;
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_INIT_FAILED, "Could not initialize main XWiki instance", e);
        }
        
    }
    
    public static boolean isInitializing(XWikiContext xcontext) {
        return Boolean.TRUE.equals(xcontext.getEngineContext().getAttribute("xwiki.init"));
    }
    
    public static XWiki getXWiki(XWikiContext context) throws XWikiException {
        return getXWiki(true, context);
    }
    
    public static XWiki getXWiki(boolean wait, XWikiContext xcontext) throws XWikiException {
        XWiki xwiki = getMainXWiki(wait, xcontext);
        if (xwiki == null) {
            return null;
        }
        
        EntityResourceReference entityResourceReference = initializeResourceFromURL(xcontext);
        if (entityResourceReference == null) {
            return xwiki;
        }
        
        String wikiId = entityResourceReference.getEntityReference().extractReference(EntityType.WIKI).getName();
        if (wikiId.equals(xcontext.getMainXWiki())) {
            return xwiki;
        }
        
        WikiDescriptorManager wikiDescriptorManager = Utils.getComponent(WikiDescriptorManager.class);
        WikiDescriptor descriptor;
        try {
            descriptor = wikiDescriptorManager.getById(wikiId);
        }
         catch (WikiManagerException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_STORE_MISC, String.format("Failed find wiki descriptor for wiki id [%s]", wikiId), e);
        }
        
        if (descriptor == null) {
            throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_DOES_NOT_EXIST, String.format("The wiki [%s] does not exist", wikiId));
        }
        
        xcontext.setWikiId(wikiId);
        xcontext.setOriginalWikiId(wikiId);
        if (!xwiki.initializeWiki(wikiId, wait, xcontext)) {
            return null;
        }
        
        return xwiki;
    }
    
    public Job getWikiInitializerJob(String wikiId) {
        return this.initializedWikis.get(wikiId);
    }
    
    public boolean initializeWiki(String wikiId, boolean wait, XWikiContext xcontext) throws XWikiException {
        Job wikiJob = this.initializedWikis.get(wikiId);
        if (wikiJob == null) {
            try {
                wikiJob = initializeWiki(wikiId, xcontext);
            }
             catch (JobException e) {
                throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_INIT_FAILED, "Could not start [" + wikiId + "] wiki initialization", e);
            }
            
        }
        
        if (wikiJob.getStatus().getState() == State.FINISHED) {
            return true;
        }
        
        if (wait) {
            try {
                wikiJob.join();
            }
             catch (InterruptedException e) {
                throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_INIT_FAILED, "Wiki [" + wikiId + "] initialization was interrupted unexpectedly", e);
            }
            
            if (wikiJob.getStatus().getError() != null) {
                throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_INIT_FAILED, "Wiki [" + wikiId + "] initialization failed", wikiJob.getStatus().getError());
            }
            
            return true;
        }
        
        return false;
    }
    
    private Job initializeWiki(String wikiId, XWikiContext xcontext) throws JobException {
        synchronized (this.initializedWikis) {
            WikiInitializerJob wikiJob = this.initializedWikis.get(wikiId);
            if (wikiJob == null) {
                WikiInitializerRequest request = new WikiInitializerRequest(wikiId);
                JobRequestContext.set(request, xcontext);
                wikiJob = (WikiInitializerJob) getJobExecutor().execute(WikiInitializerJob.JOBTYPE, request);
                this.initializedWikis.put(wikiId, wikiJob);
            }
            
            return wikiJob;
        }
        
    }
    
    private static EntityResourceReference initializeResourceFromURL(XWikiContext context) throws XWikiException {
        @SuppressWarnings("deprecation")
        EntityResourceReference entityResourceReference;
        URL url = context.getURL();
        try {
            ExtendedURL extendedURL = new ExtendedURL(url, context.getRequest().getContextPath());
            ResourceTypeResolver<ExtendedURL> typeResolver = Utils.getComponent(new DefaultParameterizedType(null, ResourceTypeResolver.class, ExtendedURL.class));
            ResourceType type = typeResolver.resolve(extendedURL, Collections.<String, Object>emptyMap());
            ResourceReferenceResolver<ExtendedURL> resourceResolver = Utils .getComponent(new DefaultParameterizedType(null, ResourceReferenceResolver.class, ExtendedURL.class));
            ResourceReference reference = resourceResolver.resolve(extendedURL, type, Collections.<String, Object>emptyMap());
            entityResourceReference = reference instanceof EntityResourceReference ? (EntityResourceReference) reference : null;
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_APP_URL_EXCEPTION, String.format("Failed to extract Entity Resource Reference from URL [%s]", url), e);
        }
        
        Utils.getComponent(Execution.class).getContext().setProperty(ResourceReferenceManager.RESOURCE_CONTEXT_PROPERTY, entityResourceReference);
        return entityResourceReference;
    }
    
    public static URL getRequestURL(XWikiRequest request) throws XWikiException {
        try {
            StringBuffer requestURL = request.getRequestURL();
            String qs = request.getQueryString();
            if ((qs != null) && (!qs.equals(""))) {
                return new URL(requestURL.toString() + "?" + qs);
            }
             else {
                return new URL(requestURL.toString());
            }
            
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_APP_URL_EXCEPTION, "Exception while getting URL from request", e);
        }
        
    }
    
    public static Object callPrivateMethod(Object obj, String methodName) {
        return callPrivateMethod(obj, methodName, null, null);
    }
    
    public static Object callPrivateMethod(Object obj, String methodName, Class<?>[] classes, Object[] args) {
        try {
            Method method = obj.getClass().getDeclaredMethod(methodName, classes);
            method.setAccessible(true);
            return method.invoke(obj, args);
        }
         catch (IllegalAccessException e) {
            LOGGER.error("Failed to call private method [{}]: [{}]", methodName, e);
            return null;
        }
         catch (NoSuchMethodException e) {
            return null;
        }
         catch (InvocationTargetException e) {
            LOGGER.error("Private method [{}] failed: [{}]", methodName, e);
            return null;
        }
        
    }
    
    public static HttpClient getHttpClient(int timeout, String userAgent) {
        HttpClient client = new HttpClient();
        if (timeout != 0) {
            client.getParams().setSoTimeout(timeout);
            client.getParams().setParameter("http.connection.timeout", Integer.valueOf(timeout));
        }
        
        client.getParams().setParameter("http.useragent", userAgent);
        String proxyHost = System.getProperty("http.proxyHost");
        String proxyPort = System.getProperty("http.proxyPort");
        if ((proxyHost != null) && (!proxyHost.equals(""))) {
            int port = 3128;
            if ((proxyPort != null) && (!proxyPort.equals(""))) {
                port = Integer.parseInt(proxyPort);
            }
            
            client.getHostConfiguration().setProxy(proxyHost, port);
        }
        
        String proxyUser = System.getProperty("http.proxyUser");
        if ((proxyUser != null) && (!proxyUser.equals(""))) {
            String proxyPassword = System.getProperty("http.proxyPassword");
            Credentials defaultcreds = new UsernamePasswordCredentials(proxyUser, proxyPassword);
            client.getState().setProxyCredentials(AuthScope.ANY, defaultcreds);
        }
        
        return client;
    }
    
    public static Object getPrivateField(Object obj, String fieldName) {
        try {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            return field.get(obj);
        }
         catch (NoSuchFieldException e) {
            return null;
        }
         catch (IllegalAccessException e) {
            LOGGER.error("Failed to get private field with name [{}]: [{}]", fieldName, e);
            return null;
        }
         finally {
        }
        
    }
    
    public static String getServerWikiPage(String servername) {
        return "XWiki.XWikiServer" + StringUtils.capitalize(servername);
    }
    
    public static String getTextArea(String content, XWikiContext context) {
        StringBuilder result = new StringBuilder();
        result.append("<textarea name=\"content\" id=\"content\" rows=\"25\" cols=\"80\">\n");
        result.append(XMLUtils.escape(content));
        result.append("</textarea>");
        return result.toString();
    }
    
    public XWiki() {
    }
    
    public XWiki(XWikiContext context, XWikiEngineContext engineContext, boolean noupdate) throws XWikiException {
        initXWiki(context, engineContext, noupdate);
    }
    
    public XWiki(XWikiContext context) throws XWikiException {
        this(context, null, false);
    }
    
    public void initXWiki(XWikiContext context, XWikiEngineContext engineContext, boolean noupdate) throws XWikiException {
        initXWiki(null, context, engineContext, noupdate);
    }
    
    public void initXWiki(XWikiConfig config, XWikiContext context, XWikiEngineContext engineContext, boolean noupdate) throws XWikiException {
        getProgress().pushLevelProgress(4, this);
        try {
            getProgress().startStep(this);
            setDatabase(context.getMainXWiki());
            setEngineContext(engineContext);
            context.setWiki(this);
            Utils.<XWikiStubContextProvider>getComponent(XWikiStubContextProvider.class).initialize(context);
            if (config != null) {
                setConfig(config);
            }
            
            try {
                initializeStores();
            }
             catch (ComponentLookupException e) {
                throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to initialize stores", e);
            }
            
            setCriteriaService((XWikiCriteriaService) createClassFromConfig("xwiki.criteria.class", "com.xpn.xwiki.criteria.impl.XWikiCriteriaServiceImpl", context));
            Utils.<XWikiStubContextProvider>getComponent(XWikiStubContextProvider.class).initialize(context);
            getProgress().endStep(this);
            getProgress().startStep(this);
            if (noupdate) {
                getProgress().pushLevelProgress(2, this);
                try {
                    getProgress().startStep(this);
                    initializeMandatoryDocuments(context);
                    getProgress().startStep(this);
                    getStatsService(context);
                }
                 finally {
                    getProgress().popLevelProgress(this);
                }
                
            }
            
            getProgress().endStep(this);
            getProgress().startStep(this);
            preparePlugins(context);
            getProgress().endStep(this);
            getProgress().startStep(this);
            String ro = getConfiguration().getProperty("xwiki.readonly", "no");
            this.isReadOnly = ("yes".equalsIgnoreCase(ro) || "true".equalsIgnoreCase(ro) || "1".equalsIgnoreCase(ro));
            String syntaxes = getConfiguration().getProperty("xwiki.rendering.syntaxes", "xwiki/1.0");
            this.configuredSyntaxes = Arrays.asList(StringUtils.split(syntaxes, " ,"));
            getObservationManager().addListener(this);
        }
         finally {
            getProgress().popLevelProgress(this);
        }
        
    }
    
    private void initializeStores() throws ComponentLookupException {
        XWikiStoreInterface mainStore = getStoreConfiguration().getXWikiStore();
        if (getStoreConfiguration().isStoreCacheEnabled()) {
            XWikiCacheStoreInterface cachestore = (XWikiCacheStoreInterface) Utils.getComponent(XWikiStoreInterface.class, "cache");
            cachestore.setStore(mainStore);
            setStore(cachestore);
        }
         else {
            setStore(mainStore);
        }
        
        setDefaultAttachmentContentStore(getStoreConfiguration().getXWikiAttachmentStore());
        setVersioningStore(getStoreConfiguration().getXWikiVersioningStore());
        setDefaultAttachmentArchiveStore(getStoreConfiguration().getAttachmentVersioningStore());
        setRecycleBinStore(getStoreConfiguration().getXWikiRecycleBinStore());
        setAttachmentRecycleBinStore(getStoreConfiguration().getAttachmentRecycleBinStore());
    }
    
    public void initializeMandatoryDocuments(XWikiContext context) {
        if (context.get("initdone") == null) {
            @SuppressWarnings("deprecation")
            List<MandatoryDocumentInitializer> initializers = Utils.getComponentList(MandatoryDocumentInitializer.class);
            Collections.sort(initializers, new Comparator<MandatoryDocumentInitializer>() {
                public int compare(MandatoryDocumentInitializer left, MandatoryDocumentInitializer right) {
                    Priority leftPriority = left.getClass().getAnnotation(Priority.class);
                    int leftPriorityValue = leftPriority != null ? leftPriority.value() : MandatoryDocumentInitializer.DEFAULT_PRIORITY;
                    Priority rightPriority = right.getClass().getAnnotation(Priority.class);
                    int rightPriorityValue = rightPriority != null ? rightPriority.value() : MandatoryDocumentInitializer.DEFAULT_PRIORITY;
                    return leftPriorityValue - rightPriorityValue;
                }
                
            }
            
);
            getObservationManager().notify(MandatoryDocumentsInitializingEvent.EVENT, null);
            getProgress().pushLevelProgress(initializers.size(), this);
            try {
                for (MandatoryDocumentInitializer initializer : initializers) {
                    getProgress().startStep(this);
                    initializeMandatoryDocument(initializer, context);
                    getProgress().endStep(this);
                }
                
            }
             finally {
                getProgress().popLevelProgress(this);
            }
            
            getObservationManager().notify(MandatoryDocumentsInitializedEvent.EVENT, null);
        }
        
    }
    
    private void initializeMandatoryDocument(String wiki, MandatoryDocumentInitializer initializer, XWikiContext context) {
        String currentWiki = context.getWikiId();
        try {
            context.setWikiId(wiki);
            initializeMandatoryDocument(initializer, context);
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    private void initializeMandatoryDocument(MandatoryDocumentInitializer initializer, XWikiContext context) {
        try {
            DocumentReference documentReference = getCurrentReferenceDocumentReferenceResolver().resolve(initializer.getDocumentReference());
            if (documentReference.getWikiReference().getName().equals(context.getWikiId())) {
                XWikiDocument document = context.getWiki().getDocument(documentReference, context);
                if (initializer.updateDocument(document)) {
                    saveDocument(document, localizePlainOrKey("core.model.xclass.mandatoryUpdateProperty.versionSummary"), context);
                }
                
            }
            
        }
         catch (XWikiException e) {
            LOGGER.error("Failed to initialize mandatory document [{}]", initializer.getDocumentReference(), e);
        }
        
    }
    
    public XWikiStoreInterface getNotCacheStore() {
        XWikiStoreInterface store = getStore();
        if (store instanceof XWikiCacheStoreInterface) {
            store = ((XWikiCacheStoreInterface) store).getStore();
        }
        
        return store;
    }
    
    public XWikiHibernateStore getHibernateStore() {
        XWikiStoreInterface store = getStore();
        if (store instanceof XWikiHibernateStore) {
            return (XWikiHibernateStore) store;
        }
         else if (store instanceof XWikiCacheStoreInterface) {
            store = ((XWikiCacheStoreInterface) store).getStore();
            if (store instanceof XWikiHibernateStore) {
                return (XWikiHibernateStore) store;
            }
             else {
                return null;
            }
            
        }
         else {
            return null;
        }
        
    }
    
    public void updateDatabase(String wikiId, XWikiContext context) throws HibernateException, XWikiException {
        updateDatabase(wikiId, false, context);
    }
    
    public void updateDatabase(String wikiId, boolean force, XWikiContext context) throws HibernateException, XWikiException {
        updateDatabase(wikiId, force, true, context);
    }
    
    public void updateDatabase(String wikiId, boolean force, boolean initDocuments, XWikiContext context) throws HibernateException, XWikiException {
        initializeWiki(wikiId, true, context);
    }
    
    public List<String> getVirtualWikiList() {
        return new ArrayList<>(this.initializedWikis.keySet());
    }
    
    public List<String> getVirtualWikisDatabaseNames(XWikiContext context) throws XWikiException {
        WikiDescriptorManager descriptorManager = Utils.getComponent(WikiDescriptorManager.class);
        try {
            return new ArrayList<String>(descriptorManager.getAllIds());
        }
         catch (WikiManagerException e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to get the list of wikis", e);
        }
        
    }
    
    public Cache<DocumentReference> getVirtualWikiCache() {
        return null;
    }
    
    public String getWikiOwner(String wikiName, XWikiContext context) throws XWikiException {
        String wikiOwner;
        String currentdatabase = context.getWikiId();
        try {
            context.setWikiId(context.getMainXWiki());
            String serverwikipage = getServerWikiPage(wikiName);
            XWikiDocument doc = getDocument(serverwikipage, context);
            if (doc.isNew()) {
                if (!context.isMainWiki(wikiName)) {
                    throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_DOES_NOT_EXIST, "The wiki " + wikiName + " does not exist");
                }
                 else {
                    wikiOwner = null;
                }
                
            }
             else {
                wikiOwner = doc.getStringValue(VIRTUAL_WIKI_DEFINITION_CLASS_REFERENCE, "owner");
                if (wikiOwner.indexOf(':') == -1) {
                    wikiOwner = context.getMainXWiki() + ":" + wikiOwner;
                }
                
            }
            
        }
         finally {
            context.setWikiId(currentdatabase);
        }
        
        return wikiOwner;
    }
    
    protected Object createClassFromConfig(String param, String defClass, XWikiContext context) throws XWikiException {
        String storeclass = getConfiguration().getProperty(param, defClass);
        try {
            Class<?>[] classes = new Class<?>[] { XWikiContext.class };
            Object[] args = new Object[] { context };
            Object result = Class.forName(storeclass).getConstructor(classes).newInstance(args);
            return result;
        }
         catch (Exception e) {
            Throwable ecause = e;
            if (e instanceof InvocationTargetException) {
                ecause = ((InvocationTargetException) e).getTargetException();
            }
            
            Object[] args = { param, storeclass };
            throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_STORE_CLASSINVOCATIONERROR, "Cannot load class {1} from param {0}", ecause, args);
        }
        
    }
    
    private void preparePlugins(XWikiContext context) {
        setPluginManager(new XWikiPluginManager(getXWikiPreference("plugins", context), context));
        String plugins = getConfiguration().getProperty("xwiki.plugins", "");
        if (!plugins.equals("")) {
            getPluginManager().addPlugins(StringUtils.split(plugins, " ,"), context);
        }
        
    }
    
    public String getVersion() {
        if (this.version == null) {
            try {
                InputStream is = getResourceAsStream(VERSION_FILE);
                try {
                    XWikiConfig properties = new XWikiConfig(is);
                    this.version = properties.getProperty(VERSION_FILE_PROPERTY);
                }
                 finally {
                    IOUtils.closeQuietly(is);
                }
                
            }
             catch (Exception e) {
                LOGGER.warn("Failed to retrieve XWiki's version from [" + VERSION_FILE + "], using the [" + VERSION_FILE_PROPERTY + "] property.", e);
                this.version = "Unknown version";
            }
            
        }
        
        return this.version;
    }
    
    public URL getResource(String s) throws MalformedURLException {
        return getEngineContext().getResource(s);
    }
    
    public InputStream getResourceAsStream(String s) throws MalformedURLException {
        InputStream is = getEngineContext().getResourceAsStream(s);
        if (is == null) {
            is = getEngineContext().getResourceAsStream("/" + s);
        }
        
        return is;
    }
    
    public String getResourceContent(String name) throws IOException {
        if (getEngineContext() != null) {
            try (InputStream is = getResourceAsStream(name)) {
                if (is != null) {
                    return IOUtils.toString(is, DEFAULT_ENCODING);
                }
                
            }
            
        }
        
        return FileUtils.readFileToString(new File(name), DEFAULT_ENCODING);
    }
    
    public Date getResourceLastModificationDate(String name) {
        try {
            if (getEngineContext() != null) {
                return Util.getFileLastModificationDate(getEngineContext().getRealPath(name));
            }
            
        }
         catch (Exception ex) {
            LOGGER.info("Failed to get file modification date: " + ex.getMessage());
        }
        
        return new Date();
    }
    
    public byte[] getResourceContentAsBytes(String name) throws IOException {
        if (getEngineContext() != null) {
            try (InputStream is = getResourceAsStream(name)) {
                if (is != null) {
                    return IOUtils.toByteArray(is);
                }
                
            }
             catch (Exception e) {
            }
            
        }
        
        return FileUtils.readFileToByteArray(new File(name));
    }
    
    public boolean resourceExists(String name) {
        if (getEngineContext() != null) {
            try {
                if (getResource(name) != null) {
                    return true;
                }
                
            }
             catch (IOException e) {
            }
            
        }
        
        try {
            File file = new File(name);
            return file.exists();
        }
         catch (Exception e) {
        }
        
        return false;
    }
    
    public String getRealPath(String path) {
        return getEngineContext().getRealPath(path);
    }
    
    public String ParamAsRealPath(String key) {
        String param = getConfiguration().getProperty(key);
        try {
            return getRealPath(param);
        }
         catch (Exception e) {
            return param;
        }
        
    }
    
    public String ParamAsRealPath(String key, XWikiContext context) {
        return ParamAsRealPath(key);
    }
    
    public String ParamAsRealPathVerified(String param) {
        String path;
        File fpath;
        path = getConfiguration().getProperty(param);
        if (path == null) {
            return null;
        }
        
        fpath = new File(path);
        if (fpath.exists()) {
            return path;
        }
        
        path = getRealPath(path);
        if (path == null) {
            return null;
        }
        
        fpath = new File(path);
        if (fpath.exists()) {
            return path;
        }
         else {
        }
        
        return null;
    }
    
    public XWikiStoreInterface getStore() {
        return this.store;
    }
    
    public XWikiAttachmentStoreInterface getAttachmentStore() {
        return getDefaultAttachmentContentStore();
    }
    
    public XWikiAttachmentStoreInterface getDefaultAttachmentContentStore() {
        return this.defaultAttachmentContentStore;
    }
    
    public AttachmentVersioningStore getDefaultAttachmentArchiveStore() {
        return this.defaultAttachmentArchiveStore;
    }
    
    public AttachmentVersioningStore getAttachmentVersioningStore() {
        return getDefaultAttachmentArchiveStore();
    }
    
    public XWikiVersioningStoreInterface getVersioningStore() {
        return this.versioningStore;
    }
    
    public XWikiRecycleBinStoreInterface getRecycleBinStore() {
        return this.recycleBinStore;
    }
    
    public AttachmentRecycleBinStore getAttachmentRecycleBinStore() {
        return this.attachmentRecycleBinStore;
    }
    
    public void checkSavingDocument(DocumentReference userReference, XWikiDocument document, String comment, XWikiContext context) throws XWikiException {
        checkSavingDocument(userReference, document, comment, false, context);
    }
    
    public void checkSavingDocument(DocumentReference userReference, XWikiDocument document, XWikiContext context) throws XWikiException {
        checkSavingDocument(userReference, document, "", false, context);
    }
    
    public void checkSavingDocument(DocumentReference userReference, XWikiDocument document, String comment, boolean isMinorEdit, XWikiContext context) throws XWikiException {
        String currentWiki = context.getWikiId();
        try {
            context.setWikiId(document.getDocumentReference().getWikiReference().getName());
            XWikiDocument originalDocument = prepareDocumentForSave(document, comment, isMinorEdit, context);
            ObservationManager om = getObservationManager();
            if (om != null) {
                CancelableEvent documentEvent;
                if (originalDocument.isNew()) {
                    documentEvent = new UserCreatingDocumentEvent(userReference, document.getDocumentReference());
                }
                 else {
                    documentEvent = new UserUpdatingDocumentEvent(userReference, document.getDocumentReference());
                }
                
                om.notify(documentEvent, document, context);
                if (documentEvent.isCanceled()) {
                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, String.format("User [%s] has been denied the right to save the document [%s]. Reason: [%s]", userReference, document.getDocumentReference(), documentEvent.getReason()));
                }
                
            }
            
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    private XWikiDocument prepareDocumentForSave(XWikiDocument document, String comment, boolean isMinorEdit, XWikiContext context) throws XWikiException {
        if (document.getStore() == null) {
            document.setStore(this.getStore());
        }
        
        String fullName = getLocalStringEntityReferenceSerializer().serialize(document.getDocumentReference());
        if (document.isNew() && fullName.length() > document.getLocalReferenceMaxLength()) {
            java.lang.Object[] args = { fullName, document.getLocalReferenceMaxLength(), fullName.length() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, "Cannot create document {0} because its full path is too long: only {1} characters are allowed and " + "current length is {2}.", null, args);
        }
        
        document.setComment(StringUtils.defaultString(comment));
        document.setMinorEdit(isMinorEdit);
        XWikiDocument originalDocument = document.getOriginalDocument();
        if (originalDocument == null || document.isNew()) {
            XWikiDocument existing = getDocument(document.getDocumentReferenceWithLocale(), context);
            if (originalDocument == null || !existing.isNew()) {
                originalDocument = existing;
                document.setOriginalDocument(originalDocument);
            }
            
        }
        
        return originalDocument;
    }
    
    public void saveDocument(XWikiDocument doc, XWikiContext context) throws XWikiException {
        saveDocument(doc, "", context);
    }
    
    public void saveDocument(XWikiDocument doc, String comment, XWikiContext context) throws XWikiException {
        saveDocument(doc, comment, false, context);
    }
    
    private void beforeSave(XWikiDocument document, XWikiContext context) throws XWikiException {
        ObservationManager om = getObservationManager();
        if (om != null) {
            CancelableEvent documentEvent;
            if (document.getOriginalDocument().isNew()) {
                documentEvent = new DocumentCreatingEvent(document.getDocumentReference());
            }
             else {
                documentEvent = new DocumentUpdatingEvent(document.getDocumentReference());
            }
            
            om.notify(documentEvent, document, context);
            if (documentEvent.isCanceled()) {
                throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_STORE_HIBERNATE_SAVING_DOC, String.format("An Event Listener has cancelled the document save for [%s]. Reason: [%s]", document.getDocumentReference(), documentEvent.getReason()));
            }
            
        }
        
    }
    
    private void afterSave(XWikiDocument document, XWikiContext context) {
        ObservationManager om = getObservationManager();
        if (om != null) {
            if (document.getOriginalDocument().isNew()) {
                om.notify(new DocumentCreatedEvent(document.getDocumentReference()), document, context);
            }
             else {
                om.notify(new DocumentUpdatedEvent(document.getDocumentReference()), document, context);
            }
            
        }
        
    }
    
    public void saveDocument(XWikiDocument document, String comment, boolean isMinorEdit, XWikiContext context) throws XWikiException {
        String currentWiki = context.getWikiId();
        try {
            context.setWikiId(document.getDocumentReference().getWikiReference().getName());
            XWikiDocument originalDocument = prepareDocumentForSave(document, comment, isMinorEdit, context);
            beforeSave(document, context);
            if (document.isNew()) {
                if (!originalDocument.isNew()) {
                    deleteDocument(originalDocument, true, false, context);
                }
                
            }
             else {
                if (hasAttachmentRecycleBin(context)) {
                    for (XWikiAttachmentToRemove attachment : document.getAttachmentsToRemove()) {
                        if (attachment.isToRecycleBin()) {
                            attachment.getAttachment().loadArchive(context);
                            getAttachmentRecycleBinStore().saveToRecycleBin(attachment.getAttachment(), context.getUser(), new Date(), context, true);
                        }
                        
                    }
                    
                }
                
            }
            
            getStore().saveXWikiDoc(document, context);
            XWikiDocument newOriginal = document.getOriginalDocument();
            try {
                document.setOriginalDocument(originalDocument);
                afterSave(document, context);
            }
             catch (Exception ex) {
                LOGGER.error("Failed to send document save notification for document [" + getDefaultEntityReferenceSerializer().serialize(document.getDocumentReference()) + "]", ex);
            }
             finally {
                document.setOriginalDocument(newOriginal);
            }
            
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    public XWikiDocument getDocument(EntityReference reference, XWikiContext context) throws XWikiException {
        XWikiDocument document;
        if (reference.getType() == EntityType.PAGE || reference.getType().isAllowedAncestor(EntityType.PAGE)) {
            document = getDocument(getCurrentGetPageResolver().resolve(reference), context);
        }
         else {
            document = getDocument(getCurrentGetDocumentResolver().resolve(reference), context);
        }
        
        return document;
    }
    
    public XWikiDocument getDocument(String reference, EntityType type, XWikiContext xcontext) throws XWikiException {
        return getDocument(getRelativeEntityReferenceResolver().resolve(reference, type), xcontext);
    }
    
    public XWikiDocument getDocument(XWikiDocument doc, XWikiContext context) throws XWikiException {
        String currentWiki = context.getWikiId();
        try {
            context.setWikiId(doc.getDocumentReference().getWikiReference().getName());
            try {
                getAsyncContext().useEntity(doc.getDocumentReferenceWithLocale());
            }
             catch (Exception e) {
                LOGGER.debug("Failed to register the document in the asynchronous context", e);
            }
            
            return getStore().loadXWikiDoc(doc, context);
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    public XWikiDocument getDocument(DocumentReference reference, String revision, XWikiContext context) throws XWikiException {
        XWikiDocument revisionDocument = getDocumentRevisionProvider().getRevision(reference, revision);
        if (revisionDocument == null && (revision.equals("1.1") || revision.equals("1.0"))) {
            revisionDocument = new XWikiDocument(reference);
        }
        
        return revisionDocument;
    }
    
    public XWikiDocument getDocument(XWikiDocument document, String revision, XWikiContext context) throws XWikiException {
        XWikiDocument revisionDocument = getDocumentRevisionProvider().getRevision(document, revision);
        if (revisionDocument == null && (revision.equals("1.1") || revision.equals("1.0"))) {
            revisionDocument = new XWikiDocument(document.getDocumentReference());
        }
        
        return revisionDocument;
    }
    
    public XWikiDocument getDocument(DocumentReference reference, XWikiContext context) throws XWikiException {
        XWikiDocument doc = new XWikiDocument( reference.getLocale() != null ? new DocumentReference(reference, (Locale) null) : reference, reference.getLocale());
        doc.setContentDirty(true);
        return getDocument(doc, context);
    }
    
    public XWikiDocument getDocument(PageReference reference, XWikiContext context) throws XWikiException {
        DocumentReference documentReference = getCurrentReferenceDocumentReferenceResolver().resolve(reference);
        XWikiDocument document = getDocument(documentReference, context);
        if (document.isNew() && documentReference.getParent().getParent().getType() == EntityType.SPACE) {
            XWikiDocument finalDocument = getDocument(new DocumentReference(documentReference.getParent().getName(), documentReference.getParent().getParent(), documentReference.getParameters()), context);
            if (!finalDocument.isNew()) {
                document = finalDocument;
            }
            
        }
        
        return document;
    }
    
    public DocumentReference getDocumentReference(EntityReference reference, XWikiContext context) {
        DocumentReference documentReference = getCurrentGetDocumentResolver().resolve(reference);
        if (documentReference.getParent().getParent().getType() != EntityType.SPACE || exists(documentReference, context)) {
            return documentReference;
        }
        
        DocumentReference finalPageReference = new DocumentReference(documentReference.getParent().getName(), documentReference.getParent().getParent(), documentReference.getParameters());
        return exists(finalPageReference, context) ? finalPageReference : documentReference;
    }
    
    public XWikiDocument getDocument(String fullname, XWikiContext context) throws XWikiException {
        XWikiDocument doc = new XWikiDocument();
        doc.setFullName(fullname, context);
        return getDocument(doc, context);
    }
    
    public XWikiDocument getDocument(String spaces, String fullname, XWikiContext context) throws XWikiException {
        int dotPosition = fullname.lastIndexOf('.');
        if (dotPosition != -1) {
            String spaceFromFullname = fullname.substring(0, dotPosition);
            String name = fullname.substring(dotPosition + 1);
            if (name.equals("")) {
                name = getDefaultPage(context);
            }
            
            return getDocument(spaceFromFullname + "." + name, context);
        }
         else {
            return getDocument(spaces + "." + fullname, context);
        }
        
    }
    
    public XWikiDeletedDocument[] getDeletedDocuments(String fullname, String locale, XWikiContext context) throws XWikiException {
        if (hasRecycleBin(context)) {
            XWikiDocument doc = new XWikiDocument(getCurrentMixedDocumentReferenceResolver().resolve(fullname));
            doc.setLanguage(locale);
            return getRecycleBinStore().getAllDeletedDocuments(doc, context, true);
        }
         else {
            return null;
        }
        
    }
    
    public XWikiDeletedDocument[] getDeletedDocuments(String batchId, XWikiContext context) throws XWikiException {
        if (hasRecycleBin(context)) {
            return getRecycleBinStore().getAllDeletedDocuments(batchId, context, true);
        }
         else {
            return null;
        }
        
    }
    
    public XWikiDeletedDocument getDeletedDocument(String fullname, String locale, int index, XWikiContext context) throws XWikiException {
        return getDeletedDocument(index, context);
    }
    
    public XWikiDeletedDocument getDeletedDocument(long index, XWikiContext context) throws XWikiException {
        if (hasRecycleBin(context)) {
            return getRecycleBinStore().getDeletedDocument(index, context, true);
        }
         else {
            return null;
        }
        
    }
    
    public List<DeletedAttachment> getDeletedAttachments(String docName, XWikiContext context) throws XWikiException {
        if (hasAttachmentRecycleBin(context)) {
            XWikiDocument doc = new XWikiDocument(getCurrentMixedDocumentReferenceResolver().resolve(docName));
            return getAttachmentRecycleBinStore().getAllDeletedAttachments(doc, context, true);
        }
        
        return null;
    }
    
    public List<DeletedAttachment> getDeletedAttachments(String docName, String filename, XWikiContext context) throws XWikiException {
        if (hasAttachmentRecycleBin(context)) {
            XWikiDocument doc = new XWikiDocument(getCurrentMixedDocumentReferenceResolver().resolve(docName));
            XWikiAttachment attachment = new XWikiAttachment(doc, filename);
            return getAttachmentRecycleBinStore().getAllDeletedAttachments(attachment, context, true);
        }
        
        return null;
    }
    
    public DeletedAttachment getDeletedAttachment(String id, XWikiContext context) throws XWikiException {
        if (hasAttachmentRecycleBin(context)) {
            return getAttachmentRecycleBinStore().getDeletedAttachment(NumberUtils.toLong(id), context, true);
        }
        
        return null;
    }
    
    public MetaClass getMetaclass() {
        if (this.metaclass == null) {
            this.metaclass = MetaClass.getMetaClass();
        }
        
        return this.metaclass;
    }
    
    public void setMetaclass(MetaClass metaclass) {
        this.metaclass = metaclass;
    }
    
    public List<String> getClassList(XWikiContext context) throws XWikiException {
        List<String> result = getStore().getClassList(context);
        Collections.sort(result);
        return result;
    }
    
    public <T> List<T> search(String sql, XWikiContext context) throws XWikiException {
        return getStore().search(sql, 0, 0, context);
    }
    
    public <T> List<T> search(String sql, int nb, int start, XWikiContext context) throws XWikiException {
        return getStore().search(sql, nb, start, context);
    }
    
    public <T> List<T> search(String sql, Object[][] whereParams, XWikiContext context) throws XWikiException {
        return getStore().search(sql, 0, 0, whereParams, context);
    }
    
    public <T> List<T> search(String sql, int nb, int start, Object[][] whereParams, XWikiContext context) throws XWikiException {
        return getStore().search(sql, nb, start, whereParams, context);
    }
    
    public String parseContent(String content, XWikiContext context) {
        return getOldRendering().parseContent(content, context);
    }
    
    public String parseTemplate(String template, XWikiContext context) {
        String result = "";
        try {
            result = evaluateTemplate(template, context);
        }
         catch (Exception e) {
            LOGGER.debug("Exception while parsing template [{}] from /templates/", template, e);
        }
        
        return result;
    }
    
    public String evaluateTemplate(String template, XWikiContext context) throws IOException {
        try {
            return getTemplateManager().render(template);
        }
         catch (Exception e) {
            LOGGER.error("Error while evaluating velocity template [{}]", template, e);
            Object[] args = { template };
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_RENDERING_VELOCITY_EXCEPTION, "Error while evaluating velocity template {0}", e, args);
            return Util.getHTMLExceptionMessage(xe, context);
        }
        
    }
    
    public String parseTemplate(String template, String skinId, XWikiContext context) {
        MutableRenderingContext mutableRenderingContext = getMutableRenderingContext();
        Syntax currentTargetSyntax = mutableRenderingContext.getTargetSyntax();
        try {
            mutableRenderingContext.setTargetSyntax(Syntax.XHTML_1_0);
            Skin skin = getInternalSkinManager().getSkin(skinId);
            return getTemplateManager().renderFromSkin(template, skin);
        }
         catch (Exception e) {
            LOGGER.error("Error while evaluating velocity template [{}] skin [{}]", template, skinId, e);
            Object[] args = { template, skinId };
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_RENDERING_VELOCITY_EXCEPTION, "Error while evaluating velocity template [{0}] from skin [{1}]", e, args);
            return Util.getHTMLExceptionMessage(xe, context);
        }
         finally {
            mutableRenderingContext.setTargetSyntax(currentTargetSyntax);
        }
        
    }
    
    public String renderTemplate(String template, String skin, XWikiContext context) {
        try {
            return getOldRendering().renderTemplate(template, skin, context);
        }
         catch (Exception ex) {
            LOGGER.error("Failed to render template [" + template + "] for skin [" + skin + "]", ex);
            return parseTemplate(template, skin, context);
        }
        
    }
    
    public String renderTemplate(String template, XWikiContext context) {
        try {
            return getOldRendering().renderTemplate(template, context);
        }
         catch (Exception ex) {
            LOGGER.error("Failed to render template [" + template + "]", ex);
            return parseTemplate(template, context);
        }
        
    }
    
    public String invokeServletAndReturnAsString(String url, XWikiContext xwikiContext) {
        HttpServletRequest servletRequest = xwikiContext.getRequest();
        HttpServletResponse servletResponse = xwikiContext.getResponse();
        try {
            return IncludeServletAsString.invokeServletAndReturnAsString(url, servletRequest, servletResponse);
        }
         catch (Exception e) {
            LOGGER.warn("Exception including url: " + url, e);
            return "Exception including \"" + url + "\", see logs for details.";
        }
        
    }
    
    public String getIconURL(String iconName, XWikiContext context) {
        return getSkinFile("icons/silk/" + iconName + ".png", context);
    }
    
    public String getSkinFile(String filename, XWikiContext context) {
        return getSkinFile(filename, false, context);
    }
    
    public String getSkinFile(String filename, boolean forceSkinAction, XWikiContext context) {
        String skinFile = getSkinFile(filename, null, forceSkinAction, context);
        if (skinFile == null) {
            XWikiURLFactory urlf = context.getURLFactory();
            URL url;
            if (forceSkinAction) {
                url = urlf.createSkinURL(filename, "skins", getDefaultBaseSkin(context), context);
            }
             else {
                url = urlf.createSkinURL(filename, getDefaultBaseSkin(context), context);
            }
            
            skinFile = urlf.getURL(url, context);
        }
        
        return skinFile;
    }
    
    private String getSkinFileInternal(String fileName, String skinId, boolean forceSkinAction, XWikiContext context) {
        try {
            if (skinId != null) {
                Skin skin = getInternalSkinManager().getSkin(skinId);
                if (skin != null) {
                    Resource<?> resource = skin.getLocalResource(fileName);
                    if (resource != null) {
                        return resource.getURL(forceSkinAction);
                    }
                    
                }
                
            }
             else {
                Skin skin = getInternalSkinManager().getCurrentSkin(true);
                if (skin != null) {
                    Resource<?> resource = skin.getResource(fileName);
                    if (resource != null) {
                        return resource.getURL(forceSkinAction);
                    }
                    
                }
                 else {
                    Skin parentSkin = getInternalSkinManager().getCurrentParentSkin(true);
                    if (parentSkin != null) {
                        Resource<?> resource = parentSkin.getResource(fileName);
                        if (resource != null) {
                            return resource.getURL(forceSkinAction);
                        }
                        
                    }
                    
                }
                
            }
            
            String resourceFilePath = "/resources/" + fileName;
            XWikiURLFactory urlFactory = context.getURLFactory();
            if (resourceExists(resourceFilePath)) {
                URL url = urlFactory.createResourceURL(fileName, forceSkinAction, context, getResourceURLCacheParameters(resourceFilePath));
                return urlFactory.getURL(url, context);
            }
            
        }
         catch (Exception e) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Exception while getting skin file [{}] from skin [{}]", fileName, skinId, e);
            }
            
        }
        
        return null;
    }
    
    private Map<String, Object> getResourceURLCacheParameters(String resourceFilePath) {
        try {
            URL resourceUrl = getResource(resourceFilePath);
            return getResourceURLCacheParameters(resourceUrl);
        }
         catch (MalformedURLException e) {
            LOGGER.debug("Error while getting URL for resource path [{}]", resourceFilePath, e);
            return Collections.singletonMap(CACHE_VERSION, getVersion());
        }
        
    }
    
    private Map<String, Object> getResourceURLCacheParameters(URL resourceUrl) {
        Map<String, Object> parameters = new LinkedHashMap<>();
        if (getURLConfiguration().useResourceLastModificationDate()) {
            try {
                Path resourcePath = Paths.get(resourceUrl.toURI());
                FileTime lastModifiedTime = Files.getLastModifiedTime(resourcePath);
                parameters.put(CACHE_VERSION, String.valueOf(lastModifiedTime.toMillis()));
            }
             catch (Exception e) {
                LOGGER.debug("Error when trying to access properties of resource URL [{}]", resourceUrl, e);
                parameters.put(CACHE_VERSION, getVersion());
            }
            
        }
         else {
            parameters.put(CACHE_VERSION, getVersion());
        }
        
        return parameters;
    }
    
    public String getSkinFile(String filename, String skin, XWikiContext context) {
        return getSkinFile(filename, skin, false, context);
    }
    
    public String getSkinFile(String fileName, String skinId, boolean forceSkinAction, XWikiContext context) {
        if (StringUtils.endsWithAny(fileName, ".js", ".css")) {
            String extension = StringUtils.substringAfterLast(fileName, '.');
            String shortFileName = StringUtils.substringBeforeLast(fileName, ".");
            if (StringUtils.endsWith(shortFileName, ".min")) {
                shortFileName = StringUtils.substringBeforeLast(shortFileName, ".");
            }
            
            String fileNameSource = String.format("%s.%s", shortFileName, extension);
            String fileNameMinified = String.format("%s.min.%s", shortFileName, extension);
            DebugConfiguration debugConfig = Utils.getComponent(DebugConfiguration.class);
            String[] fileNames = debugConfig.isMinify() ? new String[] {fileNameMinified, fileNameSource} : new String[] {fileNameSource, fileNameMinified};
            String skinFile = null;
            for (String name : fileNames) {
                skinFile = getSkinFileInternal(name, skinId, forceSkinAction, context);
                if (skinFile != null) {
                    break;
                }
                
            }
            
            return skinFile;
        }
         else {
            return getSkinFileInternal(fileName, skinId, forceSkinAction, context);
        }
        
    }
    
    public String getSkin(XWikiContext context) {
        String skin;
        try {
            skin = getInternalSkinManager().getCurrentSkinId(true);
        }
         catch (Exception e) {
            LOGGER.debug("Exception while determining current skin", e);
            skin = getDefaultBaseSkin(context);
        }
        
        return skin;
    }
    
    public String getSkinPreference(String prefname, XWikiContext context) {
        return getSkinPreference(prefname, "", context);
    }
    
    public String getSkinPreference(String prefname, String defaultValue, XWikiContext context) {
        for (Skin skin = getInternalSkinManager().getCurrentSkin(true); skin != null; skin = skin.getParent()) {
            if (skin instanceof WikiSkin) {
                String value = getWikiSkinUtils().getSkinProperty(skin.getId(), prefname);
                if (!StringUtils.isEmpty(value) && !NO_VALUE.equals(value)) {
                    return value;
                }
                
            }
            
        }
        
        return defaultValue;
    }
    
    public String getDefaultBaseSkin(XWikiContext context) {
        return getInternalSkinManager().getDefaultParentSkinId();
    }
    
    public String getBaseSkin(XWikiContext context) {
        return getBaseSkin(context, false);
    }
    
    public String getBaseSkin(XWikiContext context, boolean fromRenderSkin) {
        String baseskin = "";
        try {
            return getInternalSkinManager().getCurrentParentSkinId(false);
        }
         catch (Exception e) {
            baseskin = getDefaultBaseSkin(context);
            LOGGER.debug("Exception while determining base skin", e);
        }
        
        return baseskin;
    }
    
    public String getBaseSkin(String skin, XWikiContext context) {
        String baseSkin = getInternalSkinManager().getParentSkin(skin);
        return baseSkin != null ? baseSkin : "";
    }
    
    public String getSpaceCopyright(XWikiContext context) {
        return getSpacePreference("webcopyright", "", context);
    }
    
    public String getXWikiPreference(String prefname, XWikiContext context) {
        return getXWikiPreference(prefname, "", context);
    }
    
    public String getXWikiPreference(String prefname, String fallbackParam, String defaultValue, XWikiContext context) {
        String result = getWikiConfiguration().getProperty(prefname, String.class);
        if (StringUtils.isEmpty(result)) {
            result = getConfiguration().getProperty(fallbackParam, defaultValue);
        }
        
        return result != null ? result : "";
    }
    
    public String getXWikiPreference(String prefname, String wiki, String fallbackParam, String defaultValue, XWikiContext xcontext) {
        String currentWiki = xcontext.getWikiId();
        try {
            xcontext.setWikiId(wiki);
            return getXWikiPreference(prefname, fallbackParam, defaultValue, xcontext);
        }
         finally {
            xcontext.setWikiId(currentWiki);
        }
        
    }
    
    public String getXWikiPreference(String prefname, String defaultValue, XWikiContext context) {
        return getXWikiPreference(prefname, "", defaultValue, context);
    }
    
    public String getSpacePreference(String preference, XWikiContext context) {
        return getSpacePreference(preference, "", context);
    }
    
    public String getSpacePreference(String preference, String defaultValue, XWikiContext context) {
        return getSpacePreference(preference, (SpaceReference) null, defaultValue, context);
    }
    
    public String getSpacePreference(String preference, String space, String defaultValue, XWikiContext context) {
        return getSpacePreference(preference, new SpaceReference(space, context.getWikiReference()), defaultValue, context);
    }
    
    public String getSpacePreference(String preferenceKey, SpaceReference spaceReference, XWikiContext context) {
        return getSpacePreference(preferenceKey, spaceReference, "", context);
    }
    
    public String getSpacePreference(String preferenceKey, SpaceReference spaceReference, String defaultValue, XWikiContext context) {
        XWikiDocument currentDocument = context.getDoc();
        try {
            if (spaceReference != null) {
                context.setDoc(new XWikiDocument(new DocumentReference("WebPreferences", spaceReference)));
            }
             else if (currentDocument != null) {
                spaceReference = currentDocument.getDocumentReference().getLastSpaceReference();
            }
            
            String result = getSpaceConfiguration().getProperty(preferenceKey, String.class);
            if (StringUtils.isEmpty(result)) {
                if (spaceReference == null) {
                    result = getXWikiPreference(preferenceKey, defaultValue, context);
                }
                 else if (spaceReference.getParent() instanceof SpaceReference) {
                    result = getSpacePreference(preferenceKey, (SpaceReference) spaceReference.getParent(), defaultValue, context);
                }
                 else if (spaceReference.getParent() instanceof WikiReference) {
                    result = getXWikiPreference(preferenceKey, spaceReference.getParent().getName(), defaultValue, context);
                }
                
            }
            
            return result != null ? result : defaultValue;
        }
         finally {
            context.setDoc(currentDocument);
        }
        
    }
    
    public String getUserPreference(String prefname, XWikiContext context) {
        String result = getAllUserPropertiesResolver().resolve(CurrentUserReference.INSTANCE).getProperty(prefname, String.class);
        return result != null ? result : "";
    }
    
    public String getUserPreferenceFromCookie(String prefname, XWikiContext context) {
        Cookie[] cookies = context.getRequest().getCookies();
        if (cookies == null) {
            return null;
        }
        
        for (Cookie cookie : cookies) {
            String name = cookie.getName();
            if (name.equals(prefname)) {
                String value = cookie.getValue();
                if (!value.trim().equals("")) {
                    return value;
                }
                 else {
                    break;
                }
                
            }
            
        }
        
        return null;
    }
    
    public String getUserPreference(String prefname, boolean useCookie, XWikiContext context) {
        if (useCookie) {
            String result = Util.normalizeLanguage(getUserPreferenceFromCookie(prefname, context));
            if (result != null) {
                return result;
            }
            
        }
        
        return getUserPreference(prefname, context);
    }
    
    private Locale setLocale(Locale locale, XWikiContext context, Set<Locale> availableLocales, boolean forceSupported) {
        while (locale != null) {
            if (!forceSupported || availableLocales.contains(locale)) {
                context.setLocale(locale);
                break;
            }
            
            locale = LocaleUtils.getParentLocale(locale);
        }
        
        return locale;
    }
    
    public Locale getLocalePreference(XWikiContext context) {
        Locale defaultLocale = this.getDefaultLocale(context);
        Set<Locale> availableLocales = new HashSet<>(this.getAvailableLocales(context));
        boolean forceSupported = getConfiguration().getProperty("xwiki.language.forceSupported", "1").equals("1");
        Locale locale = context.getLocale();
        if (locale != null) {
            return locale;
        }
        
        if (!isMultiLingual(context)) {
            locale = defaultLocale;
            context.setLocale(locale);
            return locale;
        }
        
        try {
            String language = Util.normalizeLanguage(context.getRequest().getParameter("language"));
            if (language != null) {
                if ("default".equals(language)) {
                    Cookie cookie = new Cookie("language", "");
                    cookie.setMaxAge(0);
                    cookie.setPath("/");
                    context.getResponse().addCookie(cookie);
                    context.setLocale(defaultLocale);
                    return defaultLocale;
                }
                 else {
                    locale = setLocale(LocaleUtils.toLocale(language), context, availableLocales, forceSupported);
                    if (LocaleUtils.isAvailableLocale(locale)) {
                        Cookie cookie = new Cookie("language", context.getLocale().toString());
                        cookie.setMaxAge(60 * 60 * 24 * 365 * 10);
                        cookie.setPath("/");
                        context.getResponse().addCookie(cookie);
                        return locale;
                    }
                    
                }
                
            }
            
        }
         catch (Exception e) {
        }
        
        try {
            String language = Util.normalizeLanguage(getUserPreferenceFromCookie("language", context));
            if (StringUtils.isNotEmpty(language)) {
                locale = setLocale(LocaleUtils.toLocale(language), context, availableLocales, forceSupported);
                if (LocaleUtils.isAvailableLocale(locale)) {
                    return locale;
                }
                
            }
            
        }
         catch (Exception e) {
        }
        
        if (getConfiguration().getProperty("xwiki.language.preferDefault", "0").equals("1") || getSpacePreference("preferDefaultLanguage", "0", context).equals("1")) {
            locale = defaultLocale;
            context.setLocale(locale);
            return locale;
        }
        
        if (context.getRequest() != null && context.getRequest().getLocales() != null) {
            for (Locale acceptedLocale : Collections.list(context.getRequest().getLocales())) {
                locale = setLocale(acceptedLocale, context, availableLocales, forceSupported);
                if (LocaleUtils.isAvailableLocale(locale)) {
                    return locale;
                }
                
            }
            
        }
        
        context.setLocale(defaultLocale);
        return defaultLocale;
    }
    
    public String getLanguagePreference(XWikiContext context) {
        return getLocalePreference(context).toString();
    }
    
    private List<String> getAcceptedLanguages(XWikiRequest request) {
        List<String> result = new ArrayList<String>();
        Enumeration<Locale> e = request.getLocales();
        while (e.hasMoreElements()) {
            String language = e.nextElement().getLanguage().toLowerCase();
            if (StringUtils.isAlpha(language)) {
                result.add(language);
            }
            
        }
        
        return result;
    }
    
    public String getDefaultLanguage(XWikiContext xcontext) {
        return getDefaultLocale(xcontext).toString();
    }
    
    public Locale getDefaultLocale(XWikiContext xcontext) {
        String defaultLanguage = xcontext.getWiki().getXWikiPreference("default_language", "", xcontext);
        Locale defaultLocale;
        if (StringUtils.isBlank(defaultLanguage)) {
            defaultLocale = Locale.ENGLISH;
        }
         else {
            try {
                defaultLocale = LocaleUtils.toLocale(Util.normalizeLanguage(defaultLanguage));
            }
             catch (Exception e) {
                LOGGER.warn("Invalid locale [{}] set as default locale in the preferences", defaultLanguage);
                defaultLocale = Locale.ENGLISH;
            }
            
        }
        
        return defaultLocale;
    }
    
    public List<Locale> getAvailableLocales(XWikiContext xcontext) {
        String[] languages = StringUtils.split(xcontext.getWiki().getXWikiPreference("languages", xcontext), ", |");
        List<Locale> locales = new ArrayList<Locale>(languages.length);
        for (String language : languages) {
            if (StringUtils.isNotBlank(language)) {
                try {
                    locales.add(LocaleUtils.toLocale(language));
                }
                 catch (Exception e) {
                    LOGGER.warn("Invalid locale [{}] listed as available in the preferences", language);
                }
                
            }
            
        }
        
        Locale defaultocale = getDefaultLocale(xcontext);
        if (!locales.contains(defaultocale)) {
            locales.add(defaultocale);
        }
        
        return locales;
    }
    
    public Locale getDocLocalePreferenceNew(XWikiContext context) {
        String language = getDocLanguagePreferenceNew(context);
        return LocaleUtils.toLocale(language);
    }
    
    public String getDocLanguagePreferenceNew(XWikiContext context) {
        String contextLanguage = context.getLanguage();
        if (!StringUtils.isEmpty(contextLanguage)) {
            return contextLanguage;
        }
        
        String language = "", requestLanguage = "", userPreferenceLanguage = "", navigatorLanguage = "", cookieLanguage = "";
        boolean setCookie = false;
        if (!context.getWiki().isMultiLingual(context)) {
            language = context.getWiki().getXWikiPreference("default_language", "", context);
            context.setLanguage(language);
            return language;
        }
        
        try {
            requestLanguage = Util.normalizeLanguage(context.getRequest().getParameter("language"));
        }
         catch (Exception ex) {
        }
        
        try {
            String user = context.getUser();
            XWikiDocument userdoc = getDocument(user, context);
            if (userdoc != null) {
                userPreferenceLanguage = userdoc.getStringValue("XWiki.XWikiUsers", "default_language");
            }
            
        }
         catch (XWikiException e) {
        }
        
        if (context.getRequest() != null) {
            String accept = context.getRequest().getHeader("Accept-Language");
            if ((accept != null) && (!accept.equals(""))) {
                String[] alist = StringUtils.split(accept, ",;-");
                if ((alist != null) && !(alist.length == 0)) {
                    context.setLanguage(alist[0]);
                    navigatorLanguage = alist[0];
                }
                
            }
            
        }
        
        try {
            cookieLanguage = Util.normalizeLanguage(getUserPreferenceFromCookie("language", context));
        }
         catch (Exception e) {
        }
        
        if (StringUtils.isNotEmpty(requestLanguage)) {
            if (requestLanguage.equals("default")) {
                setCookie = true;
            }
             else {
                language = requestLanguage;
                context.setLanguage(language);
                Cookie cookie = new Cookie("language", language);
                cookie.setMaxAge(60 * 60 * 24 * 365 * 10);
                cookie.setPath("/");
                context.getResponse().addCookie(cookie);
                return language;
            }
            
        }
        
        if (StringUtils.isNotEmpty(cookieLanguage)) {
            language = cookieLanguage;
        }
        
        else if (StringUtils.isNotEmpty(userPreferenceLanguage)) {
            language = userPreferenceLanguage;
        }
        
        else if (StringUtils.isNotEmpty(navigatorLanguage)) {
            language = navigatorLanguage;
        }
        
        context.setLanguage(language);
        if (setCookie) {
            Cookie cookie = new Cookie("language", language);
            cookie.setMaxAge(60 * 60 * 24 * 365 * 10);
            cookie.setPath("/");
            context.getResponse().addCookie(cookie);
        }
        
        return language;
    }
    
    public Locale getInterfaceLocalePreference(XWikiContext context) {
        String language = getInterfaceLanguagePreference(context);
        return LocaleUtils.toLocale(language);
    }
    
    public String getInterfaceLanguagePreference(XWikiContext context) {
        String language = "", requestLanguage = "", userPreferenceLanguage = "", navigatorLanguage = "", cookieLanguage = "", contextLanguage = "";
        boolean setCookie = false;
        if (!context.getWiki().isMultiLingual(context)) {
            language = Util.normalizeLanguage(context.getWiki().getXWikiPreference("default_language", "", context));
            context.setInterfaceLocale(LocaleUtils.toLocale(language));
            return language;
        }
        
        try {
            requestLanguage = Util.normalizeLanguage(context.getRequest().getParameter("interfacelanguage"));
        }
         catch (Exception ex) {
        }
        
        contextLanguage = context.getInterfaceLanguage();
        try {
            String user = context.getUser();
            XWikiDocument userdoc = null;
            userdoc = getDocument(user, context);
            if (userdoc != null) {
                userPreferenceLanguage = userdoc.getStringValue("XWiki.XWikiUsers", "default_interface_language");
            }
            
        }
         catch (XWikiException e) {
        }
        
        if (context.getRequest() != null) {
            String accept = context.getRequest().getHeader("Accept-Language");
            if ((accept != null) && (!accept.equals(""))) {
                String[] alist = StringUtils.split(accept, ",;-");
                if ((alist != null) && !(alist.length == 0)) {
                    context.setLanguage(alist[0]);
                    navigatorLanguage = alist[0];
                }
                
            }
            
        }
        
        try {
            cookieLanguage = Util.normalizeLanguage(getUserPreferenceFromCookie("interfacelanguage", context));
        }
         catch (Exception e) {
        }
        
        if ((requestLanguage != null) && (!requestLanguage.equals(""))) {
            if (requestLanguage.equals("default")) {
                setCookie = true;
            }
             else {
                language = requestLanguage;
                context.setLanguage(language);
                Cookie cookie = new Cookie("interfacelanguage", language);
                cookie.setMaxAge(60 * 60 * 24 * 365 * 10);
                cookie.setPath("/");
                context.getResponse().addCookie(cookie);
                return language;
            }
            
        }
        
        if (!StringUtils.isEmpty(contextLanguage)) {
            language = contextLanguage;
        }
        
        else if (StringUtils.isNotEmpty(cookieLanguage)) {
            language = cookieLanguage;
        }
        
        else if (StringUtils.isNotEmpty(userPreferenceLanguage)) {
            language = userPreferenceLanguage;
        }
        
        else if (StringUtils.isNotEmpty(navigatorLanguage)) {
            language = navigatorLanguage;
        }
        
        context.setLanguage(language);
        if (setCookie) {
            Cookie cookie = new Cookie("interfacelanguage", language);
            cookie.setMaxAge(60 * 60 * 24 * 365 * 10);
            cookie.setPath("/");
            context.getResponse().addCookie(cookie);
        }
        
        return language;
    }
    
    public long getXWikiPreferenceAsLong(String preference, XWikiContext context) {
        return Long.parseLong(getXWikiPreference(preference, context));
    }
    
    public long getSpacePreferenceAsLong(String preference, XWikiContext context) {
        return Long.parseLong(getSpacePreference(preference, context));
    }
    
    public long getXWikiPreferenceAsLong(String preference, long defaultValue, XWikiContext context) {
        return NumberUtils.toLong((getXWikiPreference(preference, context)), defaultValue);
    }
    
    public long getXWikiPreferenceAsLong(String preference, String fallbackParameter, long defaultValue, XWikiContext context) {
        return NumberUtils.toLong(getXWikiPreference(preference, fallbackParameter, "", context), defaultValue);
    }
    
    public long getSpacePreferenceAsLong(String preference, long defaultValue, XWikiContext context) {
        return NumberUtils.toLong(getSpacePreference(preference, context), defaultValue);
    }
    
    public long getUserPreferenceAsLong(String preference, XWikiContext context) {
        return Long.parseLong(getUserPreference(preference, context));
    }
    
    public int getXWikiPreferenceAsInt(String preference, XWikiContext context) {
        return Integer.parseInt(getXWikiPreference(preference, context));
    }
    
    public int getSpacePreferenceAsInt(String preference, XWikiContext context) {
        return Integer.parseInt(getSpacePreference(preference, context));
    }
    
    public int getXWikiPreferenceAsInt(String preference, int defaultValue, XWikiContext context) {
        return NumberUtils.toInt(getXWikiPreference(preference, context), defaultValue);
    }
    
    public int getXWikiPreferenceAsInt(String preference, String fallbackParameter, int defaultValue, XWikiContext context) {
        return NumberUtils.toInt(getXWikiPreference(preference, fallbackParameter, "", context), defaultValue);
    }
    
    public int getSpacePreferenceAsInt(String preference, int defaultValue, XWikiContext context) {
        return NumberUtils.toInt(getSpacePreference(preference, context), defaultValue);
    }
    
    public int getUserPreferenceAsInt(String prefname, XWikiContext context) {
        return Integer.parseInt(getUserPreference(prefname, context));
    }
    
    public void flushCache(XWikiContext context) {
        this.initializedWikis = new ConcurrentHashMap<>();
        if (this.groupService != null) {
            this.groupService.flushCache();
        }
        
        XWikiStoreInterface store = getStore();
        if ((store != null) && (store instanceof XWikiCacheStoreInterface)) {
            ((XWikiCacheStoreInterface) getStore()).flushCache();
        }
        
        getOldRendering().flushCache();
        getParseGroovyFromString().flushCache();
        XWikiPluginManager pmanager = getPluginManager();
        if (pmanager != null) {
            pmanager.flushCache(context);
        }
        
        try {
            List<String> classes = getClassList(context);
            for (int i = 0; i < classes.size(); i++) {
                String className = classes.get(i);
                try {
                    getClass(className, context).flushCache();
                }
                 catch (Exception e) {
                }
                
            }
            
        }
         catch (Exception e) {
        }
        
    }
    
    public XWikiPluginManager getPluginManager() {
        return this.pluginManager;
    }
    
    public void setPluginManager(XWikiPluginManager pluginManager) {
        this.pluginManager = pluginManager;
    }
    
    public void setStore(XWikiStoreInterface store) {
        this.store = store;
    }
    
    public void setDefaultAttachmentContentStore(XWikiAttachmentStoreInterface attachmentContentStore) {
        this.defaultAttachmentContentStore = attachmentContentStore;
    }
    
    public void setAttachmentStore(XWikiAttachmentStoreInterface attachmentStore) {
        this.defaultAttachmentContentStore = attachmentStore;
    }
    
    public void setDefaultAttachmentArchiveStore(AttachmentVersioningStore attachmentArchiveStore) {
        this.defaultAttachmentArchiveStore = attachmentArchiveStore;
    }
    
    public void setAttachmentVersioningStore(AttachmentVersioningStore attachmentArchiveStore) {
        setDefaultAttachmentArchiveStore(attachmentArchiveStore);
    }
    
    public void setVersioningStore(XWikiVersioningStoreInterface versioningStore) {
        this.versioningStore = versioningStore;
    }
    
    public void setRecycleBinStore(XWikiRecycleBinStoreInterface recycleBinStore) {
        this.recycleBinStore = recycleBinStore;
    }
    
    public void setAttachmentRecycleBinStore(AttachmentRecycleBinStore attachmentRecycleBinStore) {
        this.attachmentRecycleBinStore = attachmentRecycleBinStore;
    }
    
    public void setCriteriaService(XWikiCriteriaService criteriaService) {
        this.criteriaService = criteriaService;
    }
    
    public void setVersion(String version) {
        this.version = version;
    }
    
    private BaseClass getMandatoryClass(XWikiContext context, DocumentReference classReference) throws XWikiException {
        XWikiDocument document = getDocument(classReference, context);
        if (context.get("initdone") == null) {
            @SuppressWarnings("deprecation")
            MandatoryDocumentInitializer initializer = Utils.getComponent(MandatoryDocumentInitializer.class, document.getFullName());
            if (initializer.updateDocument(document)) {
                saveDocument(document, localizePlainOrKey("core.model.xclass.mandatoryUpdateProperty.versionSummary"), context);
            }
            
        }
        
        return document.getXClass();
    }
    
    public BaseClass getTagClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "TagClass"));
    }
    
    public BaseClass getSheetClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "SheetClass"));
    }
    
    public BaseClass getEditModeClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference( new LocalDocumentReference(XWikiConstant.EDIT_MODE_CLASS), new WikiReference(context.getWikiId())));
    }
    
    public BaseClass getUserClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "XWikiUsers"));
    }
    
    public BaseClass getRedirectClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "GlobalRedirect"));
    }
    
    public BaseClass getPrefsClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, getPreferencesDocumentReference(context));
    }
    
    public BaseClass getGroupClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "XWikiGroups"));
    }
    
    public BaseClass getRightsClass(String pagename, XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, pagename));
    }
    
    public BaseClass getRightsClass(XWikiContext context) throws XWikiException {
        return getRightsClass("XWikiRights", context);
    }
    
    public BaseClass getGlobalRightsClass(XWikiContext context) throws XWikiException {
        return getRightsClass("XWikiGlobalRights", context);
    }
    
    public BaseClass getCommentsClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "XWikiComments"));
    }
    
    public BaseClass getSkinClass(XWikiContext context) throws XWikiException {
        return getMandatoryClass(context, new DocumentReference(context.getWikiId(), SYSTEM_SPACE, "XWikiSkins"));
    }
    
    public int createUser(XWikiContext context) throws XWikiException {
        return createUser(false, "edit", context);
    }
    
    public int validateUser(boolean withConfirmEmail, XWikiContext context) throws XWikiException {
        try {
            XWikiRequest request = context.getRequest();
            String username = convertUsername(request.getParameter("xwikiname"), context);
            if (username.indexOf('.') == -1) {
                username = "XWiki." + username;
            }
            
            XWikiDocument userDocument = getDocument(username, context);
            BaseObject userObject = userDocument.getObject("XWiki.XWikiUsers", 0);
            String storedKey = userObject.getStringValue("validkey");
            String validationKey = request.getParameter("validkey");
            PropertyInterface validationKeyClass = getClass("XWiki.XWikiUsers", context).get("validkey");
            if (validationKeyClass instanceof PasswordClass) {
                validationKey = ((PasswordClass) validationKeyClass).getEquivalentPassword(storedKey, validationKey);
            }
            
            if ((!storedKey.equals("") && (storedKey.equals(validationKey)))) {
                XWikiUser xWikiUser = new XWikiUser(userDocument.getDocumentReference());
                xWikiUser.setDisabled(false, context);
                xWikiUser.setEmailChecked(true, context);
                saveDocument(userDocument, context);
                if (withConfirmEmail) {
                    String email = userObject.getStringValue("email");
                    String password = userObject.getStringValue("password");
                    sendValidationEmail(username, password, email, request.getParameter("validkey"), "confirmation_email_content", context);
                }
                
                return 0;
            }
             else {
                return -1;
            }
            
        }
         catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_APP_VALIDATE_USER, "Exception while validating user", e, null);
        }
        
    }
    
    public int createUser(boolean withValidation, String userRights, XWikiContext context) throws XWikiException {
        try {
            XWikiRequest request = context.getRequest();
            Map<String, String[]> map = Util.getObject(request, "register");
            String content = "";
            Syntax syntax = getDefaultDocumentSyntaxInternal();
            String xwikiname = request.getParameter("xwikiname");
            String password2 = request.getParameter("register2_password");
            String password = (map.get("password"))[0];
            String email = (map.get("email"))[0];
            String template = request.getParameter("template");
            String parent = request.getParameter("parent");
            String validkey = null;
            if (XWikiRightService.SUPERADMIN_USER.equalsIgnoreCase(xwikiname)) {
                return -8;
            }
            
            try {
                if (!context.getUtil().match(getConfiguration().getProperty("xwiki.validusername", "/^[a-zA-Z0-9_]+$/"), xwikiname)) {
                    return -4;
                }
                
            }
             catch (RuntimeException ex) {
                LOGGER.warn("Invalid regular expression for xwiki.validusername", ex);
                if (!context.getUtil().match("/^[a-zA-Z0-9_]+$/", xwikiname)) {
                    return -4;
                }
                
            }
            
            if ((!password.equals(password2))) {
                return -2;
            }
            
            if ((template != null) && (!template.equals(""))) {
                XWikiDocument tdoc = getDocument(template, context);
                if ((!tdoc.isNew())) {
                    content = tdoc.getContent();
                    syntax = tdoc.getSyntax();
                }
                
            }
            
            if ((parent == null) || (parent.equals(""))) {
                parent = "XWiki.XWikiUsers";
            }
            
            if (withValidation) {
                map.put(XWikiUser.ACTIVE_PROPERTY, new String[] { "0" });
                map.put(XWikiUser.EMAIL_CHECKED_PROPERTY, new String[] { "0" });
                validkey = generateValidationKey(16);
                map.put("validkey", new String[] { validkey });
            }
             else {
                map.put(XWikiUser.ACTIVE_PROPERTY, new String[] { "1" });
                map.put(XWikiUser.EMAIL_CHECKED_PROPERTY, new String[] { "1" });
            }
            
            int result = createUser(xwikiname, map, getRelativeEntityReferenceResolver().resolve(parent, EntityType.DOCUMENT), content, syntax, userRights, context);
            if ((result > 0) && (withValidation)) {
                try {
                    sendValidationEmail(xwikiname, password, email, validkey, "validation_email_content", context);
                }
                 catch (XWikiException e) {
                    LOGGER.warn("User created. Failed to send the mail to the created user.", e);
                    return -11;
                }
                
            }
            
            return result;
        }
         catch (XWikiException e) {
            LOGGER.error(e.getMessage(), e);
            throw e;
        }
         catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_APP_CREATE_USER, "Exception while creating user", e, null);
        }
        
    }
    
    public boolean createEmptyUser(String xwikiname, String userRights, XWikiContext context) throws XWikiException {
        Map<String, String> map = new HashMap<String, String>();
        map.put("active", "1");
        map.put("first_name", xwikiname);
        if (createUser(xwikiname, map, userRights, context) == 1) {
            return true;
        }
         else {
            return false;
        }
        
    }
    
    public void sendConfirmationEmail(String xwikiname, String password, String email, String message, String contentfield, XWikiContext context) throws XWikiException {
        sendValidationEmail(xwikiname, password, email, "message", message, contentfield, context);
    }
    
    public void sendValidationEmail(String xwikiname, String password, String email, String validkey, String contentfield, XWikiContext context) throws XWikiException {
        sendValidationEmail(xwikiname, password, email, "validkey", validkey, contentfield, context);
    }
    
    public void sendValidationEmail(String xwikiname, String password, String email, String addfieldname, String addfieldvalue, String contentfield, XWikiContext context) throws XWikiException {
        MailSenderConfiguration configuration = Utils.getComponent(MailSenderConfiguration.class);
        String sender;
        String content;
        try {
            sender = configuration.getFromAddress();
            if (StringUtils.isBlank(sender)) {
                String server = context.getRequest().getServerName();
                if (server.matches("\\[.*\\]|(\\d{1,3}+\\.){3}+\\d{1,3}+")) {
                    sender = "noreply@domain.net";
                }
                 else {
                    sender = "noreply@" + server;
                }
                
            }
            
            content = getXWikiPreference(contentfield, context);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_EMAIL, XWikiException.ERROR_XWIKI_EMAIL_CANNOT_GET_VALIDATION_CONFIG, "Exception while reading the validation email config", e, null);
        }
        
        try {
            VelocityContext vcontext = (VelocityContext) context.get("vcontext");
            vcontext.put(addfieldname, addfieldvalue);
            vcontext.put("email", email);
            vcontext.put("password", password);
            vcontext.put("sender", sender);
            vcontext.put("xwikiname", xwikiname);
            content = parseContent(content, context);
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_EMAIL, XWikiException.ERROR_XWIKI_EMAIL_CANNOT_PREPARE_VALIDATION_EMAIL, "Exception while preparing the validation email", e, null);
        }
        
        try {
            Session session = Session.getInstance(configuration.getAllProperties(), new XWikiAuthenticator(configuration));
            InputStream is = new ByteArrayInputStream(content.getBytes());
            MimeMessage message = new MimeMessage(session, is);
            message.setFrom(new InternetAddress(sender));
            message.setRecipients(Message.RecipientType.TO, email);
            message.setHeader("X-MailType", "Account Validation");
            MailSender mailSender = Utils.getComponent(MailSender.class);
            MailListener mailListener = Utils.getComponent(MailListener.class, "database");
            mailSender.sendAsynchronously(Arrays.asList(message), session, mailListener);
            mailListener.getMailStatusResult().waitTillProcessed(Long.MAX_VALUE);
            String errorMessage = MailStatusResultSerializer.serializeErrors(mailListener.getMailStatusResult());
            if (errorMessage != null) {
                throw new XWikiException(XWikiException.MODULE_XWIKI_EMAIL, XWikiException.ERROR_XWIKI_EMAIL_ERROR_SENDING_EMAIL, String.format("Error while sending the validation email. %s", errorMessage));
            }
            
        }
         catch (Exception e) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_EMAIL, XWikiException.ERROR_XWIKI_EMAIL_ERROR_SENDING_EMAIL, "Error while sending the validation email", e);
        }
        
    }
    
    public String generateRandomString(int size) {
        return RandomStringUtils.randomAlphanumeric(size);
    }
    
    public String generateValidationKey(int size) {
        return generateRandomString(size);
    }
    
    public int createUser(String userName, Map<String, ?> map, XWikiContext context) throws XWikiException {
        return createUser(userName, map, "edit", context);
    }
    
    public int createUser(String userName, Map<String, ?> map, String userRights, XWikiContext context) throws XWikiException {
        BaseClass userClass = getUserClass(context);
        String content = "";
        Syntax syntax = getDefaultDocumentSyntaxInternal();
        return createUser(userName, map, new EntityReference(userClass.getDocumentReference().getName(), EntityType.DOCUMENT), content, syntax, userRights, context);
    }
    
    public int createUser(String userName, Map<String, ?> map, String parent, String content, String syntaxId, String userRights, XWikiContext context) throws XWikiException {
        Syntax syntax;
        try {
            syntax = Syntax.valueOf(syntaxId);
        }
         catch (ParseException e) {
            syntax = getDefaultDocumentSyntaxInternal();
        }
        
        return createUser(userName, map, getRelativeEntityReferenceResolver().resolve(parent, EntityType.DOCUMENT), content, syntax, userRights, context);
    }
    
    public int createUser(String userName, Map<String, ?> map, EntityReference parentReference, String content, Syntax syntax, String userRights, XWikiContext context) throws XWikiException {
        BaseClass userClass = getUserClass(context);
        try {
            XWikiDocument doc = getDocument(new DocumentReference(context.getWikiId(), "XWiki", userName), context);
            if (!doc.isNew()) {
                return -3;
            }
            
            DocumentReference userClassReference = userClass.getDocumentReference();
            BaseObject userObject = doc.newXObject(userClassReference.removeParent(userClassReference.getWikiReference()), context);
            userClass.fromMap(map, userObject);
            doc.setParentReference(parentReference);
            doc.setContent(content);
            doc.setSyntax(syntax);
            doc.setCreatorReference(doc.getDocumentReference());
            if (context.getUserReference() != null) {
                doc.setAuthorReference(context.getUserReference());
            }
             else {
                doc.setAuthorReference(doc.getDocumentReference());
            }
            
            doc.setDefaultLocale(context.getLocale());
            protectUserPage(doc.getFullName(), userRights, doc, context);
            saveDocument(doc, localizePlainOrKey("core.comment.createdUser"), context);
            setUserDefaultGroup(doc.getFullName(), context);
            return 1;
        }
         catch (Exception e) {
            Object[] args = { "XWiki." + userName };
            throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_CREATE, "Cannot create user {0}", e, args);
        }
        
    }
    
    public int createUser(String xwikiname, Map<String, ?> map, String parent, String content, String userRights, XWikiContext context) throws XWikiException {
        return createUser(xwikiname, map, parent, content, Syntax.XWIKI_1_0.toIdString(), userRights, context);
    }
    
    public void setUserDefaultGroup(String fullwikiname, XWikiContext context) throws XWikiException {
        String groupsPreference = isAllGroupImplicit() ? getConfiguration().getProperty("xwiki.users.initialGroups") : getConfiguration().getProperty("xwiki.users.initialGroups", "XWiki.XWikiAllGroup");
        if (groupsPreference != null) {
            String[] groups = groupsPreference.split(",");
            for (String groupName : groups) {
                if (StringUtils.isNotBlank(groupName)) {
                    addUserToGroup(fullwikiname, groupName.trim(), context);
                }
                
            }
            
        }
        
    }
    
    protected void addUserToGroup(String userName, String groupName, XWikiContext context) throws XWikiException {
        XWikiDocument groupDoc = getDocument(groupName, context);
        DocumentReference groupClassReference = getGroupClass(context).getDocumentReference();
        BaseObject memberObject = groupDoc.newXObject(groupClassReference.removeParent(groupClassReference.getWikiReference()), context);
        memberObject.setStringValue("member", userName);
        this.saveDocument(groupDoc, localizePlainOrKey("core.comment.addedUserToGroup"), context);
    }
    
    public void protectUserPage(String userName, String userRights, XWikiDocument doc, XWikiContext context) throws XWikiException {
        DocumentReference rightClassReference = getRightsClass(context).getDocumentReference();
        EntityReference relativeRightClassReference = rightClassReference.removeParent(rightClassReference.getWikiReference());
        BaseObject newuserrightsobject = doc.newXObject(relativeRightClassReference, context);
        newuserrightsobject.setLargeStringValue("users", userName);
        newuserrightsobject.setStringValue("levels", userRights);
        newuserrightsobject.setIntValue("allow", 1);
    }
    
    public User getUser(XWikiContext context) {
        return getUser(context.getUserReference(), context);
    }
    
    public User getUser(String username, XWikiContext context) {
        XWikiUser xwikiUser = new XWikiUser(username);
        User user = new User(xwikiUser, context);
        return user;
    }
    
    public User getUser(DocumentReference userReference, XWikiContext context) {
        XWikiUser xwikiUser = new XWikiUser(userReference);
        User user = new User(xwikiUser, context);
        return user;
    }
    
    public void prepareResources(XWikiContext context) {
        if (context.get("msg") == null) {
            Locale locale = getLocalePreference(context);
            context.setLocale(locale);
            if (context.getResponse() != null) {
                context.getResponse().setLocale(locale);
            }
            
            XWikiMessageTool msg = new XWikiMessageTool(Utils.getComponent(ContextualLocalizationManager.class));
            context.put("msg", msg);
        }
        
    }
    
    public XWikiUser checkAuth(XWikiContext context) throws XWikiException {
        return getAuthService().checkAuth(context);
    }
    
    public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException {
        String firstSpaceName = doc.getDocumentReference().getSpaceReferences().get(0).getName();
        if (action.equals("skin") && SKIN_RESOURCE_SPACE_NAMES.contains(firstSpaceName)) {
            XWikiUser user = checkAuth(context);
            if (user != null) {
                context.setUser(user.getUser());
            }
            
            return true;
        }
        
        return getRightService().checkAccess(action, doc, context);
    }
    
    public String include(String topic, boolean isForm, XWikiContext context) throws XWikiException {
        String database = null, incdatabase = null;
        String prefixedTopic, localTopic;
        Document currentAPIdoc = null, currentAPIcdoc = null, currentAPItdoc = null;
        ScriptContextManager scritContextManager = Utils.getComponent(ScriptContextManager.class);
        ScriptContext scontext = scritContextManager.getScriptContext();
        String currentDocName = context.getWikiId() + ":" + context.getDoc().getFullName();
        if (scontext != null) {
            currentAPIdoc = (Document) scontext.getAttribute("doc");
            currentAPIcdoc = (Document) scontext.getAttribute("cdoc");
            currentAPItdoc = (Document) scontext.getAttribute("tdoc");
        }
        
        try {
            int i0 = topic.indexOf(':');
            if (i0 != -1) {
                incdatabase = topic.substring(0, i0);
                database = context.getWikiId();
                context.setWikiId(incdatabase);
                prefixedTopic = topic;
                localTopic = topic.substring(i0 + 1);
            }
             else {
                prefixedTopic = context.getWikiId() + ":" + topic;
                localTopic = topic;
            }
            
            XWikiDocument doc = null;
            try {
                LOGGER.debug("Including Topic " + topic);
                try {
                    @SuppressWarnings("unchecked")
                    Set<String> includedDocs = (Set<String>) context.get("included_docs");
                    if (includedDocs == null) {
                        includedDocs = new HashSet<String>();
                        context.put("included_docs", includedDocs);
                    }
                    
                    if (includedDocs.contains(prefixedTopic) || currentDocName.equals(prefixedTopic)) {
                        LOGGER.warn("Error on too many recursive includes for topic " + topic);
                        return "Cannot make recursive include";
                    }
                    
                    includedDocs.add(prefixedTopic);
                }
                 catch (Exception e) {
                }
                
                DocumentReference targetDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(localTopic);
                doc = getDocument(targetDocumentReference, context);
                if (checkAccess("view", doc, context) == false) {
                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access to this document is denied: " + doc);
                }
                
            }
             catch (XWikiException e) {
                LOGGER.warn("Exception Including Topic " + topic, e);
                return "Topic " + topic + " does not exist";
            }
            
            XWikiDocument contentdoc = doc.getTranslatedDocument(context);
            String result;
            if (isForm) {
                if (database != null) {
                    context.setWikiId(database);
                }
                
                result = getRenderedContent(contentdoc, (XWikiDocument) context.get("doc"), context);
            }
             else {
                XWikiDocument originalDoc = null;
                try {
                    originalDoc = context.getDoc();
                    context.put("doc", doc);
                    result = getRenderedContent(contentdoc, doc, context);
                }
                 finally {
                    context.put("doc", originalDoc);
                }
                
            }
            
            try {
                @SuppressWarnings("unchecked")
                Set<String> includedDocs = (Set<String>) context.get("included_docs");
                if (includedDocs != null) {
                    includedDocs.remove(prefixedTopic);
                }
                
            }
             catch (Exception e) {
            }
            
            return result;
        }
         finally {
            if (database != null) {
                context.setWikiId(database);
            }
            
            if (currentAPIdoc != null) {
                if (scontext != null) {
                    scontext.setAttribute("doc", currentAPIdoc, ScriptContext.ENGINE_SCOPE);
                }
                
            }
            
            if (currentAPIcdoc != null) {
                if (scontext != null) {
                    scontext.setAttribute("cdoc", currentAPIcdoc, ScriptContext.ENGINE_SCOPE);
                }
                
            }
            
            if (currentAPItdoc != null) {
                if (scontext != null) {
                    scontext.setAttribute("tdoc", currentAPItdoc, ScriptContext.ENGINE_SCOPE);
                }
                
            }
            
        }
        
    }
    
    private String getRenderedContent(XWikiDocument includedDoc, XWikiDocument includingDoc, XWikiContext context) throws XWikiException {
        String result;
        XWikiDocument idoc = (XWikiDocument) context.get("idoc");
        XWikiDocument sdoc = (XWikiDocument) context.get("sdoc");
        context.put("idoc", includingDoc);
        context.put("sdoc", includedDoc);
        try {
            result = includedDoc.getRenderedContent(Utils.getComponent(RenderingContext.class).getTargetSyntax(), false, context);
        }
         finally {
            if (idoc == null) {
                context.remove("idoc");
            }
             else {
                context.put("idoc", idoc);
            }
            
            if (sdoc == null) {
                context.remove("sdoc");
            }
             else {
                context.put("sdoc", sdoc);
            }
            
        }
        
        return result;
    }
    
    public void deleteDocument(XWikiDocument doc, XWikiContext context) throws XWikiException {
        deleteDocument(doc, true, context);
    }
    
    public void deleteDocument(XWikiDocument doc, boolean totrash, XWikiContext context) throws XWikiException {
        deleteDocument(doc, totrash, true, context);
    }
    
    private XWikiDocument prepareDocumentDelete(XWikiDocument doc, XWikiContext context) {
        XWikiDocument blankDoc = new XWikiDocument(doc.getDocumentReference());
        blankDoc.setOriginalDocument(doc.getOriginalDocument());
        blankDoc.setAuthorReference(context.getUserReference());
        blankDoc.setContentAuthorReference(context.getUserReference());
        return blankDoc;
    }
    
    private XWikiDocument beforeDelete(XWikiDocument doc, XWikiContext context) throws XWikiException {
        XWikiDocument blankDoc = prepareDocumentDelete(doc, context);
        ObservationManager om = getObservationManager();
        if (om != null) {
            CancelableEvent documentEvent = new DocumentDeletingEvent(doc.getDocumentReference());
            om.notify(documentEvent, blankDoc, context);
            if (documentEvent.isCanceled()) {
                throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_STORE_HIBERNATE_DELETING_DOC, String.format("An Event Listener has cancelled the document deletion for [%s]. Reason: [%s]", doc.getDocumentReference(), documentEvent.getReason()));
            }
            
        }
        
        return blankDoc;
    }
    
    private void afterDelete(XWikiDocument blankDoc, XWikiContext context) {
        ObservationManager om = getObservationManager();
        if (om != null) {
            om.notify(new DocumentDeletedEvent(blankDoc.getDocumentReference()), blankDoc, context);
        }
        
    }
    
    private void deleteDocument(XWikiDocument doc, boolean totrash, boolean notify, XWikiContext context) throws XWikiException {
        String currentWiki = null;
        currentWiki = context.getWikiId();
        try {
            context.setWikiId(doc.getDocumentReference().getWikiReference().getName());
            XWikiDocument blankDoc = null;
            if (notify) {
                blankDoc = beforeDelete(doc, context);
            }
            
            if (hasRecycleBin(context) && totrash) {
                String batchId = Utils.getComponent(BatchOperationExecutor.class).getCurrentBatchId();
                getRecycleBinStore().saveToRecycleBin(doc, context.getUser(), new Date(), batchId, context, true);
            }
            
            getStore().deleteXWikiDoc(doc, context);
            try {
                if (notify) {
                    afterDelete(blankDoc, context);
                }
                
            }
             catch (Exception ex) {
                LOGGER.error("Failed to send document delete notifications for document [{}]", doc.getDocumentReference(), ex);
            }
            
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    public void checkDeletingDocument(DocumentReference userReference, XWikiDocument document, XWikiContext context) throws XWikiException {
        String currentWiki = null;
        currentWiki = context.getWikiId();
        try {
            context.setWikiId(document.getDocumentReference().getWikiReference().getName());
            XWikiDocument blankDoc = prepareDocumentDelete(document, context);
            ObservationManager om = getObservationManager();
            if (om != null) {
                CancelableEvent documentEvent = new UserDeletingDocumentEvent(userReference, document.getDocumentReference());
                om.notify(documentEvent, blankDoc, context);
                if (documentEvent.isCanceled()) {
                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, String.format("User [%s] has been denied the right to delete the document [%s]. Reason: [%s]", userReference, document.getDocumentReference(), documentEvent.getReason()));
                }
                
            }
            
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    public String getDatabase() {
        return this.database;
    }
    
    public void setDatabase(String database) {
        this.database = database;
    }
    
    public void gc() {
        System.gc();
    }
    
    public long freeMemory() {
        return Runtime.getRuntime().freeMemory();
    }
    
    public long totalMemory() {
        return Runtime.getRuntime().totalMemory();
    }
    
    public long maxMemory() {
        return Runtime.getRuntime().maxMemory();
    }
    
    public String[] split(String str, String sep) {
        return StringUtils.split(str, sep);
    }
    
    public String printStrackTrace(Throwable e) {
        StringWriter strwriter = new StringWriter();
        PrintWriter writer = new PrintWriter(strwriter);
        e.printStackTrace(writer);
        return strwriter.toString();
    }
    
    public boolean renameDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, boolean overwrite, List<DocumentReference> backlinkDocumentReferences, List<DocumentReference> childDocumentReferences, XWikiContext context) throws XWikiException {
        boolean result = false;
        if (!sourceDocumentReference.equals(targetDocumentReference)) {
            XWikiDocument sourceDocument = this.getDocument(sourceDocumentReference, context);
            XWikiDocument targetDocument = this.getDocument(targetDocumentReference, context);
            ConfigurationSource xwikiproperties = Utils.getComponent(ConfigurationSource.class, "xwikiproperties");
            boolean useAtomicRename = xwikiproperties.getProperty("refactoring.rename.useAtomicRename", Boolean.TRUE);
            if (!sourceDocument.isNew() && (overwrite || targetDocument.isNew())) {
                if (!useAtomicRename) {
                    this.renameByCopyAndDelete(sourceDocument, targetDocumentReference, backlinkDocumentReferences, childDocumentReferences, context);
                    result = true;
                }
                 else {
                    WikiReference wikiReference = context.getWikiReference();
                    context.setWikiReference(sourceDocumentReference.getWikiReference());
                    XWikiDocument futureTargetDocument = sourceDocument.cloneRename(targetDocumentReference, context);
                    futureTargetDocument.setOriginalDocument(new XWikiDocument(targetDocumentReference));
                    beforeSave(futureTargetDocument, context);
                    XWikiDocument deletedDocument = beforeDelete(sourceDocument, context);
                    try {
                        this.getStore().renameXWikiDoc(sourceDocument, targetDocumentReference, context);
                    }
                     finally {
                        context.setWikiReference(wikiReference);
                    }
                    
                    targetDocument = this.getDocument(targetDocumentReference, context);
                    afterDelete(deletedDocument, context);
                    afterSave(futureTargetDocument, context);
                    this.updateLinksForRename(sourceDocument, targetDocumentReference, backlinkDocumentReferences, childDocumentReferences, context);
                    result = true;
                }
                
            }
            
        }
        
        return result;
    }
    
    private void updateLinksForRename(XWikiDocument sourceDoc, DocumentReference newDocumentReference, List<DocumentReference> backlinkDocumentReferences, List<DocumentReference> childDocumentReferences, XWikiContext context) throws XWikiException {
        if (childDocumentReferences != null) {
            for (DocumentReference childDocumentReference : childDocumentReferences) {
                XWikiDocument childDocument = getDocument(childDocumentReference, context);
                String compactReference = getCompactEntityReferenceSerializer().serialize(newDocumentReference);
                childDocument.setParent(compactReference);
                String saveMessage = localizePlainOrKey("core.comment.renameParent", compactReference);
                childDocument.setAuthorReference(context.getUserReference());
                saveDocument(childDocument, saveMessage, true, context);
            }
            
        }
        
        for (DocumentReference backlinkDocumentReference : backlinkDocumentReferences) {
            XWikiDocument backlinkRootDocument = getDocument(backlinkDocumentReference, context);
            renameLinks(backlinkRootDocument, sourceDoc.getDocumentReference(), newDocumentReference, context);
            for (Locale locale : backlinkRootDocument.getTranslationLocales(context)) {
                XWikiDocument backlinkDocument = backlinkRootDocument.getTranslatedDocument(locale, context);
                renameLinks(backlinkDocument, sourceDoc.getDocumentReference(), newDocumentReference, context);
            }
            
        }
        
        XWikiDocument newDocument = getDocument(newDocumentReference, context);
        if (Utils.getContextComponentManager().hasComponent(BlockRenderer.class, sourceDoc.getSyntax().toIdString())) {
            LinkedResourceHelper linkedResourceHelper = Utils.getComponent(LinkedResourceHelper.class);
            DocumentReference oldDocumentReference = sourceDoc.getDocumentReference();
            XDOM newDocumentXDOM = newDocument.getXDOM();
            List<Block> blocks = linkedResourceHelper.getBlocks(newDocumentXDOM);
            boolean modified = false;
            for (Block block : blocks) {
                org.xwiki.rendering.listener.reference.ResourceReference resourceReference = linkedResourceHelper.getResourceReference(block);
                if (resourceReference == null) {
                    continue;
                }
                
                org.xwiki.rendering.listener.reference.ResourceType resourceType = resourceReference.getType();
                if (!org.xwiki.rendering.listener.reference.ResourceType.DOCUMENT.equals(resourceType) && !org.xwiki.rendering.listener.reference.ResourceType.SPACE.equals(resourceType)) {
                    continue;
                }
                
                EntityReference oldLinkReference = getResourceReferenceEntityReferenceResolver() .resolve(resourceReference, null, oldDocumentReference);
                EntityReference newLinkReference = getResourceReferenceEntityReferenceResolver() .resolve(resourceReference, null, newDocumentReference);
                if (!newLinkReference.equals(oldLinkReference)) {
                    modified = true;
                    String serializedLinkReference = getCompactWikiEntityReferenceSerializer().serialize(oldLinkReference, newDocumentReference);
                    linkedResourceHelper.setResourceReferenceString(block, serializedLinkReference);
                }
                
            }
            
            if (modified) {
                newDocument.setContent(newDocumentXDOM);
                newDocument.setAuthorReference(context.getUserReference());
                saveDocument(newDocument, context);
            }
            
        }
        
    }
    
    public void renameByCopyAndDelete(XWikiDocument sourceDoc, DocumentReference newDocumentReference, List<DocumentReference> backlinkDocumentReferences, List<DocumentReference> childDocumentReferences, XWikiContext context) throws XWikiException {
        copyDocument(sourceDoc.getDocumentReference(), newDocumentReference, false, context);
        updateLinksForRename(sourceDoc, newDocumentReference, backlinkDocumentReferences, childDocumentReferences, context);
        deleteDocument(sourceDoc, context);
        XWikiDocument newDocument = getDocument(newDocumentReference, context);
        sourceDoc.clone(newDocument);
    }
    
    private void renameLinks(XWikiDocument backlinkDocument, DocumentReference oldLink, DocumentReference newLink, XWikiContext context) throws XWikiException {
        getOldRendering().renameLinks(backlinkDocument, oldLink, newLink, context);
        if (backlinkDocument.isContentDirty()) {
            String saveMessage = localizePlainOrKey("core.comment.renameLink", getCompactEntityReferenceSerializer().serialize(newLink));
            backlinkDocument.setAuthorReference(context.getUserReference());
            context.getWiki().saveDocument(backlinkDocument, saveMessage, true, context);
        }
        
    }
    
    private static EntityReferenceSerializer<String> getCompactWikiEntityReferenceSerializer() {
        return Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "compactwiki");
    }
    
    private static EntityReferenceSerializer<String> getCompactEntityReferenceSerializer() {
        return Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "compact");
    }
    
    private static EntityReferenceResolver<org.xwiki.rendering.listener.reference.ResourceReference> getResourceReferenceEntityReferenceResolver() {
        return Utils .getComponent(new DefaultParameterizedType(null, EntityReferenceResolver.class, org.xwiki.rendering.listener.reference.ResourceReference.class));
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, XWikiContext context) throws XWikiException {
        return copyDocument(sourceDocumentReference, targetDocumentReference, null, true, context);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, boolean reset, XWikiContext context) throws XWikiException {
        return copyDocument(sourceDocumentReference, targetDocumentReference, null, reset, context);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, boolean reset, boolean force, boolean resetCreationData, XWikiContext context) throws XWikiException {
        return copyDocument(sourceDocumentReference, targetDocumentReference, null, reset, force, resetCreationData, context);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, String wikilocale, XWikiContext context) throws XWikiException {
        return copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, true, context);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, String wikilocale, boolean reset, XWikiContext context) throws XWikiException {
        return copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, reset, false, context);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, String wikilocale, boolean reset, boolean force, XWikiContext context) throws XWikiException {
        return copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, reset, force, false, context);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, String wikilocale, boolean reset, boolean force, boolean resetCreationData, XWikiContext context) throws XWikiException {
        String db = context.getWikiId();
        String sourceWiki = sourceDocumentReference.getWikiReference().getName();
        String targetWiki = targetDocumentReference.getWikiReference().getName();
        String sourceStringReference = getDefaultEntityReferenceSerializer().serialize(sourceDocumentReference);
        try {
            context.setWikiId(sourceWiki);
            XWikiDocument sdoc = getDocument(sourceDocumentReference, context);
            if (!sdoc.isNew()) {
                LOGGER.info("Copying document [{}] to [{}]", sourceDocumentReference, targetDocumentReference);
                context.setWikiId(targetWiki);
                XWikiDocument previoustdoc = getDocument(targetDocumentReference, context);
                if (!previoustdoc.isNew()) {
                    if (!force) {
                        return false;
                    }
                    
                }
                
                context.setWikiId(sourceWiki);
                if (wikilocale == null) {
                    XWikiDocument tdoc = sdoc.copyDocument(targetDocumentReference, context);
                    tdoc.setNew(true);
                    if (reset) {
                        tdoc.setVersion("1.1");
                    }
                    
                    if (resetCreationData) {
                        Date now = new Date();
                        tdoc.setCreationDate(now);
                        tdoc.setContentUpdateDate(now);
                        tdoc.setDate(now);
                        tdoc.setCreatorReference(context.getUserReference());
                        tdoc.setAuthorReference(context.getUserReference());
                    }
                    
                    tdoc.setMetaDataDirty(false);
                    tdoc.setContentDirty(false);
                    saveDocument(tdoc, "Copied from " + sourceStringReference, context);
                    if (!reset) {
                        context.setWikiId(sourceWiki);
                        XWikiDocumentArchive txda = getVersioningStore().getXWikiDocumentArchive(sdoc, context);
                        context.setWikiId(targetWiki);
                        txda = txda.clone(tdoc.getId(), context);
                        getVersioningStore().saveXWikiDocArchive(txda, true, context);
                    }
                     else {
                        context.setWikiId(targetWiki);
                        getVersioningStore().resetRCSArchive(tdoc, true, context);
                    }
                    
                    context.setWikiId(sourceWiki);
                    List<String> tlist = sdoc.getTranslationList(context);
                    for (String clanguage : tlist) {
                        XWikiDocument stdoc = sdoc.getTranslatedDocument(clanguage, context);
                        LOGGER.info("Copying document [{}], language [{}] to [{}]", sourceWiki, clanguage, targetDocumentReference);
                        context.setWikiId(targetWiki);
                        XWikiDocument ttdoc = tdoc.getTranslatedDocument(clanguage, context);
                        if (ttdoc != tdoc) {
                            return false;
                        }
                        
                        context.setWikiId(sourceWiki);
                        ttdoc = stdoc.copyDocument(targetDocumentReference, context);
                        ttdoc.setNew(true);
                        if (reset) {
                            ttdoc.setNew(true);
                            ttdoc.setVersion("1.1");
                        }
                        
                        if (resetCreationData) {
                            Date now = new Date();
                            ttdoc.setCreationDate(now);
                            ttdoc.setContentUpdateDate(now);
                            ttdoc.setDate(now);
                            ttdoc.setCreatorReference(context.getUserReference());
                            ttdoc.setAuthorReference(context.getUserReference());
                        }
                        
                        tdoc.setMetaDataDirty(false);
                        tdoc.setContentDirty(false);
                        saveDocument(ttdoc, "Copied from " + sourceStringReference, context);
                        if (!reset) {
                            context.setWikiId(sourceWiki);
                            XWikiDocumentArchive txda = getVersioningStore().getXWikiDocumentArchive(sdoc, context);
                            context.setWikiId(targetWiki);
                            txda = txda.clone(tdoc.getId(), context);
                            getVersioningStore().saveXWikiDocArchive(txda, true, context);
                        }
                         else {
                            getVersioningStore().resetRCSArchive(tdoc, true, context);
                        }
                        
                    }
                    
                }
                 else {
                    XWikiDocument stdoc = sdoc.getTranslatedDocument(wikilocale, context);
                    XWikiDocument tdoc = stdoc.copyDocument(targetDocumentReference, context);
                    tdoc.setNew(true);
                    tdoc.setDefaultLanguage(wikilocale);
                    tdoc.setLanguage("");
                    if (reset) {
                        tdoc.setVersion("1.1");
                    }
                    
                    if (resetCreationData) {
                        Date now = new Date();
                        tdoc.setCreationDate(now);
                        tdoc.setContentUpdateDate(now);
                        tdoc.setDate(now);
                        tdoc.setCreatorReference(context.getUserReference());
                        tdoc.setAuthorReference(context.getUserReference());
                    }
                    
                    tdoc.setMetaDataDirty(false);
                    tdoc.setContentDirty(false);
                    saveDocument(tdoc, "Copied from " + sourceStringReference, context);
                    if (!reset) {
                        context.setWikiId(sourceWiki);
                        XWikiDocumentArchive txda = getVersioningStore().getXWikiDocumentArchive(sdoc, context);
                        context.setWikiId(targetWiki);
                        txda = txda.clone(tdoc.getId(), context);
                        getVersioningStore().saveXWikiDocArchive(txda, true, context);
                    }
                     else {
                        getVersioningStore().resetRCSArchive(tdoc, true, context);
                    }
                    
                }
                
            }
            
            return true;
        }
         finally {
            context.setWikiId(db);
        }
        
    }
    
    public int copySpaceBetweenWikis(String space, String sourceWiki, String targetWiki, String locale, XWikiContext context) throws XWikiException {
        return copySpaceBetweenWikis(space, sourceWiki, targetWiki, locale, false, context);
    }
    
    public int copySpaceBetweenWikis(String space, String sourceWiki, String targetWiki, String locale, boolean clean, XWikiContext context) throws XWikiException {
        String db = context.getWikiId();
        int nb = 0;
        String sql = "select distinct doc.fullName from XWikiDocument as doc";
        List<String> parameters = new ArrayList<>();
        if (space != null) {
            parameters.add(space);
            sql += " where doc.space = ?" + parameters.size();
        }
        
        if (clean) {
            try {
                context.setWikiId(targetWiki);
                List<String> list = getStore().search(sql, 0, 0, parameters, context);
                LOGGER.info("Deleting [{}] documents from wiki [{}]", list.size(), targetWiki);
                for (String docname : list) {
                    XWikiDocument doc = getDocument(docname, context);
                    deleteDocument(doc, context);
                }
                
            }
             finally {
                context.setWikiId(db);
            }
            
        }
        
        try {
            context.setWikiId(sourceWiki);
            List<String> list = getStore().search(sql, 0, 0, parameters, context);
            LOGGER.info("Copying [{}] documents from wiki [{}] to wiki [{}]", list.size(), sourceWiki, targetWiki);
            WikiReference sourceWikiReference = new WikiReference(sourceWiki);
            WikiReference targetWikiReference = new WikiReference(targetWiki);
            for (String docname : list) {
                DocumentReference sourceDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);
                sourceDocumentReference = sourceDocumentReference .replaceParent(sourceDocumentReference.getWikiReference(), sourceWikiReference);
                DocumentReference targetDocumentReference = sourceDocumentReference.replaceParent(sourceWikiReference, targetWikiReference);
                copyDocument(sourceDocumentReference, targetDocumentReference, locale, context);
                nb++;
            }
            
            return nb;
        }
         finally {
            context.setWikiId(db);
        }
        
    }
    
    public int copyWiki(String sourceWiki, String targetWiki, String locale, XWikiContext context) throws XWikiException {
        return copyWiki(sourceWiki, targetWiki, locale, false, context);
    }
    
    public int copyWiki(String sourceWiki, String targetWiki, String locale, boolean clean, XWikiContext context) throws XWikiException {
        int documents = copySpaceBetweenWikis(null, sourceWiki, targetWiki, locale, clean, context);
        ObservationManager om = getObservationManager();
        if (om != null) {
            om.notify(new WikiCopiedEvent(sourceWiki, targetWiki), sourceWiki, context);
        }
        
        return documents;
    }
    
    public String getEncoding() {
        return getConfiguration().getProperty("xwiki.encoding", "UTF-8");
    }
    
    public URL getServerURL(String wikiId, XWikiContext xcontext) throws MalformedURLException {
        if (!xcontext.isMainWiki(wikiId) && isPathBased()) {
            return getServerURL(xcontext.getMainXWiki(), xcontext);
        }
        
        if (xcontext.isMainWiki(wikiId)) {
            String homepage = getConfiguration().getProperty("xwiki.home");
            if (StringUtils.isNotEmpty(homepage)) {
                try {
                    return new URL(homepage);
                }
                 catch (MalformedURLException e) {
                    LOGGER.warn("Invalid main wiki home page URL [{}] configured: {}", homepage, ExceptionUtils.getRootCauseMessage(e));
                }
                
            }
            
        }
        
        if (wikiId != null) {
            try {
                WikiDescriptor wikiDescriptor = getWikiDescriptorManager().getById(wikiId);
                if (wikiDescriptor != null) {
                    String server = wikiDescriptor.getDefaultAlias();
                    if (server != null) {
                        String protocol = getWikiProtocol(wikiDescriptor);
                        int port = getWikiPort(wikiDescriptor, xcontext);
                        if (protocol == null && port == -1) {
                            XWikiRequest request = xcontext.getRequest();
                            if (request != null && wikiDescriptor.getId().equals(xcontext.getOriginalWikiId()) && !isDaemon(request)) {
                                URL sourceURL = HttpServletUtils.getSourceBaseURL(xcontext.getRequest());
                                protocol = sourceURL.getProtocol();
                                port = sourceURL.getPort();
                            }
                             else {
                                protocol = "http";
                            }
                            
                        }
                        
                        return new URL(protocol != null ? protocol : (port == 443 ? "https" : "http"), server, port, "");
                    }
                    
                }
                
            }
             catch (WikiManagerException e) {
                LOGGER.error("Failed to get descriptor for wiki [{}]", wikiId, e);
            }
            
        }
        
        return null;
    }
    
    private boolean isDaemon(XWikiRequest request) {
        return request.getHttpServletRequest() instanceof XWikiServletRequestStub && ((XWikiServletRequestStub) request.getHttpServletRequest()).isDaemon();
    }
    
    private String getWikiProtocol(WikiDescriptor wikiDescriptor) {
        Boolean secure = wikiDescriptor.isSecure();
        if (secure != null) {
            return wikiDescriptor.isSecure() == Boolean.TRUE ? "https" : "http";
        }
        
        String protocol = getConfiguration().getProperty("xwiki.url.protocol");
        if (protocol != null) {
            return protocol;
        }
        
        try {
            secure = getWikiDescriptorManager().getMainWikiDescriptor().isSecure();
            if (secure != null) {
                return secure ? "https" : "http";
            }
            
        }
         catch (WikiManagerException e) {
            LOGGER.error("Failed to get main wiki descriptor", e);
        }
        
        return null;
    }
    
    private int getWikiPort(WikiDescriptor wikiDescriptor, XWikiContext context) {
        int port = wikiDescriptor.getPort();
        if (port != -1) {
            return port;
        }
        
        try {
            port = getWikiDescriptorManager().getMainWikiDescriptor().getPort();
            if (port != -1) {
                return port;
            }
            
        }
         catch (WikiManagerException e) {
            LOGGER.error("Failed to get main wiki descriptor", e);
        }
        
        return -1;
    }
    
    public String getServletPath(String wikiName, XWikiContext context) {
        if (!context.isMainWiki(wikiName) && isPathBased()) {
            try {
                WikiDescriptor wikiDescriptor = getWikiDescriptorManager().getById(wikiName);
                if (wikiDescriptor != null) {
                    return "wiki/" + wikiDescriptor.getDefaultAlias() + "/";
                }
                
            }
             catch (Exception e) {
                LOGGER.error("Failed to get URL for provided wiki [" + wikiName + "]", e);
            }
            
        }
        
        String servletPath = getConfiguration().getProperty("xwiki.servletpath", "");
        if (context.getRequest() != null) {
            if (StringUtils.isEmpty(servletPath)) {
                String currentServletpath = context.getRequest().getServletPath();
                if (currentServletpath != null && currentServletpath.startsWith("/bin")) {
                    servletPath = "bin/";
                }
                 else {
                    servletPath = getConfiguration().getProperty("xwiki.defaultservletpath", "bin/");
                }
                
            }
            
        }
        
        return servletPath;
    }
    
    public String getWebAppPath(XWikiContext context) {
        String contextPath = getConfiguration().getProperty("xwiki.webapppath");
        if (contextPath == null) {
            XWikiRequest request = context.getRequest();
            if (request != null) {
                contextPath = request.getContextPath();
            }
            
            if (contextPath == null) {
                contextPath = StringUtils.substringBefore(StringUtils.stripStart(context.getURL().getPath(), "/"), "/");
            }
            
        }
        
        contextPath = StringUtils.strip(contextPath, "/");
        return contextPath + "/";
    }
    
    public String getURL(EntityReference entityReference, String action, String queryString, String anchor, XWikiContext context) {
        if (EntityType.ATTACHMENT.equals(entityReference.getType())) {
            AttachmentReference attachmentReference = getCurrentAttachmentResolver().resolve(entityReference);
            return getAttachmentURL(attachmentReference, action, queryString, context);
        }
        
        DocumentReference documentReference = getDocumentReference(entityReference, context);
        return getURL(documentReference, action, queryString, anchor, context);
    }
    
    public String getURL(EntityReference reference, String action, XWikiContext context) {
        return getURL(reference, action, null, null, context);
    }
    
    public String getURL(EntityReference reference, XWikiContext context) {
        String action = "view";
        if (reference.getType() == EntityType.ATTACHMENT) {
            action = "download";
        }
        
        return getURL(reference, action, context);
    }
    
    public String getURL(DocumentReference documentReference, String action, String queryString, String anchor, XWikiContext context) {
        String spaces = getLocalStringEntityReferenceSerializer().serialize(documentReference.getLastSpaceReference());
        Locale documentLocale = documentReference.getLocale();
        String actualQueryString = queryString;
        if (documentLocale != null && documentLocale != Locale.ROOT) {
            String localeQueryString = "language=" + documentLocale;
            if (StringUtils.isEmpty(queryString)) {
                actualQueryString = localeQueryString;
            }
             else {
                actualQueryString += '&' + localeQueryString;
            }
            
        }
        
        URL url = context.getURLFactory().createURL(spaces, documentReference.getName(), action, actualQueryString, anchor, documentReference.getWikiReference().getName(), context);
        return context.getURLFactory().getURL(url, context);
    }
    
    public String getURL(String fullname, String action, String queryString, String anchor, XWikiContext context) {
        return getURL(getCurrentMixedDocumentReferenceResolver().resolve(fullname), action, queryString, anchor, context);
    }
    
    public String getURL(String fullname, String action, String querystring, XWikiContext context) {
        return getURL(fullname, action, querystring, null, context);
    }
    
    public String getURL(DocumentReference reference, String action, XWikiContext context) {
        return getURL(reference, action, null, null, context);
    }
    
    public String getURL(String fullname, String action, XWikiContext context) {
        return getURL(fullname, action, null, null, context);
    }
    
    public String getExternalURL(String fullname, String action, XWikiContext context) throws XWikiException {
        XWikiDocument doc = new XWikiDocument(getCurrentMixedDocumentReferenceResolver().resolve(fullname));
        URL url = context.getURLFactory().createExternalURL(doc.getSpace(), doc.getName(), action, null, null, doc.getDatabase(), context);
        return url.toString();
    }
    
    public String getExternalURL(String fullname, String action, String querystring, XWikiContext context) throws XWikiException {
        XWikiDocument doc = new XWikiDocument(getCurrentMixedDocumentReferenceResolver().resolve(fullname));
        URL url = context.getURLFactory().createExternalURL(doc.getSpace(), doc.getName(), action, querystring, null, doc.getDatabase(), context);
        return url.toString();
    }
    
    public String getExternalURL(DocumentReference documentReference, String action, String querystring, String anchor, XWikiContext context) {
        URL url = context.getURLFactory().createExternalURL( this.getLocalStringEntityReferenceSerializer().serialize(documentReference.getLastSpaceReference()), documentReference.getName(), action, querystring, anchor, documentReference.getWikiReference().getName(), context);
        return url.toString();
    }
    
    public String getAttachmentURL(AttachmentReference attachmentReference, String action, String queryString, XWikiContext context) {
        DocumentReference documentReference = attachmentReference.getDocumentReference();
        SpaceReference spaceReference = documentReference.getLastSpaceReference();
        WikiReference wikiReference = spaceReference.getWikiReference();
        String serializedSpace = getLocalStringEntityReferenceSerializer().serialize(spaceReference);
        URL url = context.getURLFactory().createAttachmentURL(attachmentReference.getName(), serializedSpace, documentReference.getName(), action, queryString, wikiReference.getName(), context);
        return context.getURLFactory().getURL(url, context);
    }
    
    public String getAttachmentURL(AttachmentReference attachmentReference, String queryString, XWikiContext context) {
        return getAttachmentURL(attachmentReference, "download", queryString, context);
    }
    
    public String getAttachmentRevisionURL(AttachmentReference attachmentReference, String revision, String queryString, XWikiContext context) {
        DocumentReference documentReference = attachmentReference.getDocumentReference();
        SpaceReference spaceReference = documentReference.getLastSpaceReference();
        WikiReference wikiReference = spaceReference.getWikiReference();
        String serializedSpace = getLocalStringEntityReferenceSerializer().serialize(spaceReference);
        URL url = context.getURLFactory().createAttachmentRevisionURL(attachmentReference.getName(), serializedSpace, documentReference.getName(), revision, queryString, wikiReference.getName(), context);
        return context.getURLFactory().getURL(url, context);
    }
    
    public String getAttachmentURL(String fullname, String filename, XWikiContext context) throws XWikiException {
        return getAttachmentURL(fullname, filename, null, context);
    }
    
    public String getAttachmentURL(String fullname, String filename, String queryString, XWikiContext context) throws XWikiException {
        AttachmentReference attachmentReference = new AttachmentReference(filename, getCurrentMixedDocumentReferenceResolver().resolve(fullname));
        return getAttachmentURL(attachmentReference, queryString, context);
    }
    
    public int getTimeDelta(long time) {
        Date ctime = new Date();
        return (int) (ctime.getTime() - time);
    }
    
    public boolean isMultiLingual(XWikiContext context) {
        return "1".equals(getXWikiPreference("multilingual", "0", context));
    }
    
    public boolean isLDAP() {
        return "1".equals(getConfiguration().getProperty("xwiki.authentication.ldap"));
    }
    
    public boolean isAllGroupImplicit() {
        return "1".equals(getConfiguration().getProperty("xwiki.authentication.group.allgroupimplicit"));
    }
    
    public int checkActive(XWikiContext context) throws XWikiException {
        return checkActive(context.getUser(), context);
    }
    
    public int checkActive(String user, XWikiContext context) throws XWikiException {
        XWikiUser xWikiUser = new XWikiUser(user);
        return xWikiUser.isDisabled(context) ? 0 : 1;
    }
    
    public DocumentReference getDocumentReference(XWikiRequest request, XWikiContext context) {
        DocumentReference reference;
        if (context.getMode() == XWikiContext.MODE_PORTLET) {
            if (request.getParameter("topic") != null) {
                reference = getCurrentMixedDocumentReferenceResolver().resolve(request.getParameter("topic"));
            }
             else {
                reference = getDefaultDocumentReference().setWikiReference(new WikiReference(context.getWikiId()));
            }
            
        }
         else if (context.getMode() == XWikiContext.MODE_XMLRPC) {
            reference = new DocumentReference(context.getWikiId(), context.getDoc().getDocumentReference().getLastSpaceReference().getName(), context.getDoc().getDocumentReference().getName());
        }
         else {
            ResourceReference resourceReference = getResourceReferenceManager().getResourceReference();
            if (resourceReference instanceof EntityResourceReference) {
                EntityResourceReference entityResource = (EntityResourceReference) resourceReference;
                String action = entityResource.getAction().getActionName();
                if ((request.getParameter("topic") != null) && (action.equals("edit") || action.equals("inline"))) {
                    reference = getCurrentMixedDocumentReferenceResolver().resolve(request.getParameter("topic"));
                }
                 else {
                    reference = new DocumentReference( entityResource.getEntityReference().extractReference(EntityType.DOCUMENT));
                }
                
            }
             else {
                throw new RuntimeException( String.format("Resource Reference [%s] isn't an Entity Resource Reference!", resourceReference));
            }
            
        }
        
        return reference;
    }
    
    public static String stripSegmentFromPath(String path, String segment) {
        if (!path.startsWith(segment)) {
            try {
                segment = URIUtil.encodePath(segment);
            }
             catch (URIException e) {
                LOGGER.warn("Invalid path: [" + segment + "]");
            }
            
        }
        
        if (!path.startsWith(segment)) {
            segment = segment.replaceAll("-", "%2D");
        }
        
        if (!path.startsWith(segment)) {
            return path.substring(path.indexOf('/', 1));
        }
        
        return path.substring(segment.length());
    }
    
    public boolean prepareDocuments(XWikiRequest request, XWikiContext context, VelocityContext vcontext) throws XWikiException {
        XWikiDocument doc;
        context.getWiki().prepareResources(context);
        DocumentReference reference = getDocumentReference(request, context);
        if (context.getAction().equals("register")) {
            setPhonyDocument(reference, context, vcontext);
            doc = context.getDoc();
        }
         else {
            try {
                doc = getDocument(reference, context);
            }
             catch (XWikiException e) {
                doc = context.getDoc();
                if (context.getAction().equals("delete")) {
                    if (doc == null) {
                        setPhonyDocument(reference, context, vcontext);
                        doc = context.getDoc();
                    }
                    
                    if (!checkAccess("admin", doc, context)) {
                        throw e;
                    }
                    
                }
                 else {
                    throw e;
                }
                
            }
            
        }
        
        boolean hasAccess = checkAccess(context.getAction(), doc, context);
        XWikiUser user;
        if (context.getUserReference() != null) {
            user = new XWikiUser(context.getUserReference());
        }
         else {
            user = new XWikiUser(context.getUser());
        }
        
        if (!hasAccess) {
            Object[] args = { doc.getFullName(), user.getUser() };
            setPhonyDocument(reference, context, vcontext);
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access to document {0} has been denied to user {1}", null, args);
        }
         else if (user.isDisabled(context) && user.isEmailChecked(context)) {
            String action = context.getAction();
            if (!((action.equals("skin") && (doc.getSpace().equals("skins") || doc.getSpace().equals("resources"))) || ((action.equals("skin") || action.equals("download") || action.equals("ssx") || action.equals("jsx")) && getRightService().hasAccessLevel("view", XWikiRightService.GUEST_USER_FULLNAME, doc.getPrefixedFullName(), context)) || ((action.equals("view") && doc.getFullName().equals("XWiki.AccountValidation"))))) {
                Object[] args = { user.getUser() };
                setPhonyDocument(reference, context, vcontext);
                throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_DISABLED, "User {0} account is disabled", null, args);
            }
            
        }
         else if (user.isDisabled(context) && !user.isEmailChecked(context)) {
            boolean allow = false;
            String action = context.getAction();
            if ((action.equals("skin") && (doc.getSpace().equals("skins") || doc.getSpace().equals("resources"))) || ((action.equals("skin") || action.equals("download") || action.equals("ssx") || action.equals("jsx")) && getRightService().hasAccessLevel("view", XWikiRightService.GUEST_USER_FULLNAME, doc.getPrefixedFullName(), context)) || ((action.equals("view") && doc.getFullName().equals("XWiki.AccountValidation")))) {
                allow = true;
            }
             else {
                String allowed = getConfiguration().getProperty("xwiki.inactiveuser.allowedpages", "");
                if (context.getAction().equals("view") && !allowed.equals("")) {
                    String[] allowedList = StringUtils.split(allowed, " ,");
                    for (String element : allowedList) {
                        if (element.equals(doc.getFullName())) {
                            allow = true;
                            break;
                        }
                        
                    }
                    
                }
                
            }
            
            if (!allow) {
                Object[] args = { context.getUser() };
                setPhonyDocument(reference, context, vcontext);
                throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_INACTIVE, "User {0} account is inactive", null, args);
            }
            
        }
        
        context.put("doc", doc);
        context.put("cdoc", doc);
        vcontext.put("doc", doc.newDocument(context));
        vcontext.put("cdoc", vcontext.get("doc"));
        XWikiDocument tdoc;
        if ("".equals(context.getRequest().getParameter("language"))) {
            tdoc = doc;
        }
         else {
            tdoc = doc.getTranslatedDocument(context);
        }
        
        try {
            String rev = (String) context.get("rev");
            if (StringUtils.isNotEmpty(rev)) {
                tdoc = getDocument(tdoc, rev, context);
            }
            
        }
         catch (Exception ex) {
        }
        
        context.put("tdoc", tdoc);
        vcontext.put("tdoc", tdoc.newDocument(context));
        return true;
    }
    
    public void setPhonyDocument(DocumentReference reference, XWikiContext context) {
        XWikiDocument doc = new XWikiDocument(reference);
        doc.setElements(XWikiDocument.HAS_ATTACHMENTS | XWikiDocument.HAS_OBJECTS);
        doc.setStore(getStore());
        context.put("doc", doc);
    }
    
    public void setPhonyDocument(DocumentReference reference, XWikiContext context, VelocityContext vcontext) {
        setPhonyDocument(reference, context);
        vcontext.put("doc", context.getDoc().newDocument(context));
        vcontext.put("cdoc", vcontext.get("doc"));
        vcontext.put("tdoc", vcontext.get("doc"));
    }
    
    public void setPhonyDocument(String docName, XWikiContext context, VelocityContext vcontext) {
        setPhonyDocument(getCurrentMixedDocumentReferenceResolver().resolve(docName), context, vcontext);
    }
    
    public XWikiEngineContext getEngineContext() {
        return this.engine_context;
    }
    
    public void setEngineContext(XWikiEngineContext engine_context) {
        this.engine_context = engine_context;
    }
    
    public void setAuthService(XWikiAuthService authService) {
        this.authService = authService;
    }
    
    public void setRightService(XWikiRightService rightService) {
        this.rightService = rightService;
    }
    
    public XWikiGroupService getGroupService(XWikiContext context) throws XWikiException {
        synchronized (this.GROUP_SERVICE_LOCK) {
            if (this.groupService == null) {
                String groupClass = getConfiguration().getProperty("xwiki.authentication.groupclass", "com.xpn.xwiki.user.impl.xwiki.XWikiGroupServiceImpl");
                try {
                    this.groupService = (XWikiGroupService) Class.forName(groupClass).newInstance();
                }
                 catch (Exception e) {
                    LOGGER.error("Failed to instantiate custom group service class: " + e.getMessage(), e);
                    this.groupService = new XWikiGroupServiceImpl();
                }
                
                this.groupService.init(this, context);
            }
            
            return this.groupService;
        }
        
    }
    
    public void setGroupService(XWikiGroupService groupService) {
        this.groupService = groupService;
    }
    
    public XWikiAuthService getAuthService() {
        synchronized (this.AUTH_SERVICE_LOCK) {
            if (this.authService == null) {
                LOGGER.info("Initializing AuthService...");
                String authClass = getConfiguration().getProperty("xwiki.authentication.authclass");
                if (StringUtils.isNotEmpty(authClass)) {
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Using custom AuthClass " + authClass + ".");
                    }
                    
                }
                 else {
                    if (isLDAP()) {
                        authClass = "com.xpn.xwiki.user.impl.LDAP.XWikiLDAPAuthServiceImpl";
                    }
                     else {
                        authClass = "com.xpn.xwiki.user.impl.xwiki.XWikiAuthServiceImpl";
                    }
                    
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Using default AuthClass " + authClass + ".");
                    }
                    
                }
                
                try {
                    @SuppressWarnings("deprecation")
                    ClassLoaderManager clManager = Utils.getComponent(ClassLoaderManager.class);
                    ClassLoader classloader = null;
                    if (clManager != null) {
                        classloader = clManager.getURLClassLoader("wiki:xwiki", false);
                    }
                    
                    if (classloader != null) {
                        this.authService = (XWikiAuthService) Class.forName(authClass, true, classloader).newInstance();
                    }
                     else {
                        this.authService = (XWikiAuthService) Class.forName(authClass).newInstance();
                    }
                    
                    LOGGER.debug("Initialized AuthService using Relfection.");
                }
                 catch (Exception e) {
                    LOGGER.warn("Failed to initialize AuthService " + authClass + " using Reflection, trying default implementations using 'new'.", e);
                    this.authService = new XWikiAuthServiceImpl();
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug( "Initialized AuthService " + this.authService.getClass().getName() + " using 'new'.");
                    }
                    
                }
                
            }
            
            return this.authService;
        }
        
    }
    
    private static final String DEFAULT_RIGHT_SERVICE_CLASS = "org.xwiki.security.authorization.internal.XWikiCachingRightService";
    public XWikiRightService getRightService() {
        synchronized (this.RIGHT_SERVICE_LOCK) {
            if (this.rightService == null) {
                LOGGER.info("Initializing RightService...");
                String rightsClass = getConfiguration().getProperty("xwiki.authentication.rightsclass");
                if (rightsClass != null && !rightsClass.equals(DEFAULT_RIGHT_SERVICE_CLASS)) {
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.warn("Using custom Right Service [{}].", rightsClass);
                    }
                    
                }
                 else {
                    rightsClass = DEFAULT_RIGHT_SERVICE_CLASS;
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Using default Right Service [{}].", rightsClass);
                    }
                    
                }
                
                try {
                    this.rightService = (XWikiRightService) Class.forName(rightsClass).newInstance();
                    LOGGER.debug("Initialized RightService using Reflection.");
                }
                 catch (Exception e) {
                    Exception lastException = e;
                    if (!rightsClass.equals(DEFAULT_RIGHT_SERVICE_CLASS)) {
                        LOGGER.warn(String.format( "Failed to initialize custom RightService [%s]" + " by Reflection, using default implementation [%s].", rightsClass, DEFAULT_RIGHT_SERVICE_CLASS), e);
                        rightsClass = DEFAULT_RIGHT_SERVICE_CLASS;
                        try {
                            this.rightService = (XWikiRightService) Class.forName(rightsClass).newInstance();
                            LOGGER.debug("Initialized default RightService using Reflection.");
                        }
                         catch (Exception e1) {
                            lastException = e1;
                        }
                        
                    }
                    
                    if (this.rightService == null) {
                        LOGGER.warn(String.format( "Failed to initialize RightService [%s]" + " by Reflection, using OLD implementation [%s] with 'new'.", rightsClass, XWikiRightServiceImpl.class.getCanonicalName()), lastException);
                        this.rightService = new XWikiRightServiceImpl();
                        if (LOGGER.isDebugEnabled()) {
                            LOGGER.debug("Initialized old RightService implementation " + this.rightService.getClass().getName() + " using 'new'.");
                        }
                        
                    }
                    
                }
                
            }
            
            return this.rightService;
        }
        
    }
    
    public XWikiStatsService getStatsService(XWikiContext context) {
        synchronized (this.STATS_SERVICE_LOCK) {
            if (this.statsService == null) {
                if ("1".equals(getConfiguration().getProperty("xwiki.stats", "1"))) {
                    String storeClass = getConfiguration().getProperty("xwiki.stats.class", "com.xpn.xwiki.stats.impl.XWikiStatsServiceImpl");
                    try {
                        this.statsService = (XWikiStatsService) Class.forName(storeClass).newInstance();
                    }
                     catch (Exception e) {
                        LOGGER.error(e.getMessage(), e);
                        this.statsService = new XWikiStatsServiceImpl();
                    }
                    
                    this.statsService.init(context);
                }
                
            }
            
            return this.statsService;
        }
        
    }
    
    public XWikiURLFactoryService getURLFactoryService() {
        if (this.urlFactoryService == null) {
            synchronized (this.URLFACTORY_SERVICE_LOCK) {
                if (this.urlFactoryService == null) {
                    LOGGER.info("Initializing URLFactory Service...");
                    XWikiURLFactoryService factoryService = null;
                    String urlFactoryServiceClass = getConfiguration().getProperty("xwiki.urlfactory.serviceclass");
                    if (urlFactoryServiceClass != null) {
                        try {
                            if (LOGGER.isDebugEnabled()) {
                                LOGGER.debug("Using custom URLFactory Service Class [" + urlFactoryServiceClass + "]");
                            }
                            
                            factoryService = (XWikiURLFactoryService) Class.forName(urlFactoryServiceClass) .getConstructor(new Class<?>[] { XWiki.class }).newInstance(new Object[] { this });
                        }
                         catch (Exception e) {
                            factoryService = null;
                            LOGGER.warn("Failed to initialize URLFactory Service [" + urlFactoryServiceClass + "]", e);
                        }
                        
                    }
                    
                    if (factoryService == null) {
                        if (LOGGER.isDebugEnabled()) {
                            LOGGER.debug("Using default URLFactory Service Class [" + urlFactoryServiceClass + "]");
                        }
                        
                        factoryService = new XWikiURLFactoryServiceImpl(this);
                    }
                    
                    this.urlFactoryService = factoryService;
                }
                
            }
            
        }
        
        return this.urlFactoryService;
    }
    
    public XWikiCriteriaService getCriteriaService(XWikiContext context) {
        return this.criteriaService;
    }
    
    public ZipOutputStream getZipOutputStream(XWikiContext context) throws IOException {
        return new ZipOutputStream(context.getResponse().getOutputStream());
    }
    
    private Map<String, SearchEngineRule> getSearchEngineRules(XWikiContext context) {
        Map<String, SearchEngineRule> map = new HashMap<String, SearchEngineRule>();
        map.put("Google", new SearchEngineRule("google.", "s/(^|.*&)q=(.*?)(&.*|$)/$2/"));
        map.put("MSN", new SearchEngineRule("search.msn.", "s/(^|.*&)q=(.*?)(&.*|$)/$2/"));
        map.put("Yahoo", new SearchEngineRule("search.yahoo.", "s/(^|.*&)p=(.*?)(&.*|$)/$2/"));
        map.put("Voila", new SearchEngineRule("voila.fr", "s/(^|.*&)kw=(.*?)(&.*|$)/$2/"));
        return map;
    }
    
    public String getRefererText(String referer, XWikiContext context) {
        try {
            URL url = new URL(referer);
            Map<String, SearchEngineRule> searchengines = getSearchEngineRules(context);
            if (searchengines != null) {
                for (SearchEngineRule senginerule : searchengines.values()) {
                    String host = url.getHost();
                    int i1 = host.indexOf(senginerule.getHost());
                    if (i1 != -1) {
                        String query = context.getUtil().substitute(senginerule.getRegEx(), url.getQuery());
                        if ((query != null) && (!query.equals(""))) {
                            return host.substring(i1) + ":" + query;
                        }
                        
                    }
                    
                }
                
            }
            
        }
         catch (Exception e) {
        }
        
        String result = referer.substring(referer.indexOf("://") + 3);
        if (result.endsWith("/")) {
            return result.substring(0, result.length() - 1);
        }
         else {
            return result;
        }
        
    }
    
    public boolean isMySQL() {
        if (getHibernateStore() == null) {
            return false;
        }
        
        Object dialect = getHibernateStore().getConfiguration().getProperties().get("dialect");
        return "org.hibernate.dialect.MySQLDialect".equals(dialect) || "net.sf.hibernate.dialect.MySQLDialect".equals(dialect);
    }
    
    public String getFullNameSQL() {
        return getFullNameSQL(true);
    }
    
    public String getFullNameSQL(boolean newFullName) {
        if (newFullName) {
            return "doc.fullName";
        }
        
        if (this.fullNameSQL == null) {
            if (isMySQL()) {
                this.fullNameSQL = "CONCAT(doc.space,'.',doc.name)";
            }
             else {
                this.fullNameSQL = "doc.space||'.'||doc.name";
            }
            
        }
        
        return this.fullNameSQL;
    }
    
    public String getUserName(String user, XWikiContext context) {
        return getUserName(user, null, true, context);
    }
    
    public String getUserName(String user, String format, XWikiContext context) {
        return getUserName(user, format, true, context);
    }
    
    public String getUserName(String user, String format, boolean link, XWikiContext context) {
        if (StringUtils.isBlank(user)) {
            return localizePlainOrKey("core.users.unknownUser");
        }
        
        DocumentReference userReference = getCurrentMixedDocumentReferenceResolver().resolve(user);
        return getUserName(userReference, format, link, true, context);
    }
    
    public String getUserName(DocumentReference userReference, String format, boolean link, boolean escapeXML, XWikiContext context) {
        if (userReference == null) {
            return localizePlainOrKey("core.users.unknownUser");
        }
        
        XWikiDocument userdoc = null;
        try {
            userdoc = getDocument(userReference, context);
            if (userdoc == null) {
                return escapeXML ? XMLUtils.escape(userReference.getName()) : userReference.getName();
            }
            
            BaseObject userobj = userdoc.getObject("XWiki.XWikiUsers");
            if (userobj == null) {
                return escapeXML ? XMLUtils.escape(userdoc.getDocumentReference().getName()) : userdoc.getDocumentReference().getName();
            }
            
            String text;
            if (format == null) {
                text = userobj.getStringValue("first_name");
                String lastName = userobj.getStringValue("last_name");
                if (!text.isEmpty() && !lastName.isEmpty()) {
                    text += ' ';
                }
                
                text += userobj.getStringValue("last_name");
                if (StringUtils.isBlank(text)) {
                    text = userdoc.getDocumentReference().getName();
                }
                
            }
             else {
                VelocityContext vcontext;
                try {
                    vcontext = getVelocityContextFactory().createContext();
                }
                 catch (XWikiVelocityException e) {
                    LOGGER.error("Failed to create standard VelocityContext", e);
                    vcontext = new XWikiVelocityContext();
                }
                
                for (String propname : userobj.getPropertyList()) {
                    vcontext.put(propname, userobj.getStringValue(propname));
                }
                
                text = evaluateVelocity(format, "<username formatting code in " + context.getDoc().getDocumentReference() + ">", vcontext);
            }
            
            if (escapeXML || link) {
                text = XMLUtils.escape(text.trim());
            }
            
            if (link) {
                text = "<span class=\"wikilink\"><a href=\"" + userdoc.getURL("view", context) + "\">" + text + "</a></span>";
            }
            
            return text;
        }
         catch (Exception e) {
            LOGGER.warn("Failed to display the user name of [{}]. Root cause is [{}]. Falling back on the user id.", userReference, ExceptionUtils.getRootCauseMessage(e));
            return escapeXML ? XMLUtils.escape(userReference.getName()) : userReference.getName();
        }
        
    }
    
    public String evaluateVelocity(String content, String namespace, VelocityContext vcontext) {
        try {
            return getVelocityEvaluator().evaluateVelocity(content, namespace, vcontext);
        }
         catch (XWikiException xe) {
            LOGGER.error("Error while parsing velocity template namespace [{}] with content:\n[{}]", namespace, content, xe.getCause());
            return Util.getHTMLExceptionMessage(xe, null);
        }
        
    }
    
    public String evaluateVelocity(String content, String name) {
        try {
            VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);
            VelocityContext velocityContext = velocityManager.getVelocityContext();
            return evaluateVelocity(content, name, velocityContext);
        }
         catch (Exception e) {
            LOGGER.error("Error while parsing velocity template namespace [{}] with content:\n[{}]", name, content, e);
            Object[] args = { name };
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_RENDERING_VELOCITY_EXCEPTION, "Error while parsing velocity page {0}", e, args);
            return Util.getHTMLExceptionMessage(xe, null);
        }
        
    }
    
    public String getPlainUserName(DocumentReference userReference, XWikiContext context) {
        return getUserName(userReference, null, false, false, context);
    }
    
    public boolean hasCentralizedAuthentication(XWikiContext context) {
        String bl = getXWikiPreference("authentication_centralized", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.authentication.centralized", "0"));
    }
    
    public String getLocalUserName(String user, XWikiContext context) {
        if (hasCentralizedAuthentication(context)) {
            return getUserName(user, null, true, context);
        }
         else {
            return getUserName(user.substring(user.indexOf(':') + 1), null, true, context);
        }
        
    }
    
    public String getLocalUserName(String user, String format, XWikiContext context) {
        if (hasCentralizedAuthentication(context)) {
            return getUserName(user, format, true, context);
        }
         else {
            return getUserName(user.substring(user.indexOf(':') + 1), format, true, context);
        }
        
    }
    
    public String getLocalUserName(String user, String format, boolean link, XWikiContext context) {
        if (hasCentralizedAuthentication(context)) {
            return getUserName(user, format, link, context);
        }
         else {
            return getUserName(user.substring(user.indexOf(':') + 1), format, link, context);
        }
        
    }
    
    public String formatDate(Date date, String format, XWikiContext context) {
        if (date == null) {
            return "";
        }
        
        String xformat = format;
        String defaultFormat = "yyyy/MM/dd HH:mm";
        if (format == null) {
            xformat = getXWikiPreference("dateformat", defaultFormat, context);
        }
        
        try {
            DateFormatSymbols formatSymbols = null;
            try {
                String language = getLanguagePreference(context);
                formatSymbols = new DateFormatSymbols(new Locale(language));
            }
             catch (Exception e2) {
                String language = getXWikiPreference("default_language", context);
                if ((language != null) && (!language.equals(""))) {
                    formatSymbols = new DateFormatSymbols(new Locale(language));
                }
                
            }
            
            SimpleDateFormat sdf;
            if (formatSymbols != null) {
                sdf = new SimpleDateFormat(xformat, formatSymbols);
            }
             else {
                sdf = new SimpleDateFormat(xformat);
            }
            
            try {
                sdf.setTimeZone(TimeZone.getTimeZone(getUserTimeZone(context)));
            }
             catch (Exception e) {
            }
            
            return sdf.format(date);
        }
         catch (Exception e) {
            LOGGER.info("Failed to format date [" + date + "] with pattern [" + xformat + "]: " + e.getMessage());
            if (format == null) {
                if (xformat.equals(defaultFormat)) {
                    return date.toString();
                }
                 else {
                    return formatDate(date, defaultFormat, context);
                }
                
            }
             else {
                return formatDate(date, null, context);
            }
            
        }
        
    }
    
    public String getUserTimeZone(XWikiContext context) {
        String tz = getUserPreference("timezone", context);
        if (!ArrayUtils.contains(TimeZone.getAvailableIDs(), tz)) {
            String defaultTz = TimeZone.getDefault().getID();
            return getConfiguration().getProperty("xwiki.timezone", defaultTz);
        }
         else {
            return tz;
        }
        
    }
    
    public boolean exists(String fullname, XWikiContext context) {
        return exists(getCurrentMixedDocumentReferenceResolver().resolve(fullname), context);
    }
    
    public boolean exists(DocumentReference documentReference, XWikiContext context) {
        String currentWiki = context.getWikiId();
        try {
            XWikiDocument doc = new XWikiDocument(documentReference, documentReference.getLocale());
            context.setWikiId(documentReference.getWikiReference().getName());
            return getStore().exists(doc, context);
        }
         catch (XWikiException e) {
            return false;
        }
         finally {
            context.setWikiId(currentWiki);
        }
        
    }
    
    public String getAdType(XWikiContext context) {
        String adtype = "";
        XWikiDocument wikiServer = context.getWikiServer();
        if (wikiServer != null) {
            adtype = wikiServer.getStringValue(VIRTUAL_WIKI_DEFINITION_CLASS_REFERENCE, "adtype");
        }
        
        if (adtype.equals("")) {
            adtype = getConfiguration().getProperty("xwiki.ad.type", "");
        }
        
        return adtype;
    }
    
    public String getAdClientId(XWikiContext context) {
        final String defaultadclientid = "pub-2778691407285481";
        String adclientid = "";
        XWikiDocument wikiServer = context.getWikiServer();
        if (wikiServer != null) {
            adclientid = wikiServer.getStringValue(VIRTUAL_WIKI_DEFINITION_CLASS_REFERENCE, "adclientid");
        }
        
        if (adclientid.equals("")) {
            adclientid = getConfiguration().getProperty("xwiki.ad.clientid", "");
        }
        
        if (adclientid.equals("")) {
            adclientid = defaultadclientid;
        }
        
        return adclientid;
    }
    
    public XWikiPluginInterface getPlugin(String name, XWikiContext context) {
        XWikiPluginManager plugins = getPluginManager();
        Vector<String> pluginlist = plugins.getPlugins();
        for (String pluginname : pluginlist) {
            if (pluginname.equals(name)) {
                return plugins.getPlugin(pluginname);
            }
            
        }
        
        return null;
    }
    
    public Api getPluginApi(String name, XWikiContext context) {
        XWikiPluginInterface plugin = getPlugin(name, context);
        if (plugin != null) {
            return plugin.getPluginApi(plugin, context);
        }
        
        return null;
    }
    
    public int getHttpTimeout(XWikiContext context) {
        return getConfiguration().getProperty("xwiki.http.timeout", 60000);
    }
    
    public String getHttpUserAgent(XWikiContext context) {
        return getConfiguration().getProperty("xwiki.http.useragent", "XWikiBot/1.0");
    }
    
    public String getURLContent(String surl, XWikiContext context) throws IOException {
        return getURLContent(surl, getHttpTimeout(context), getHttpUserAgent(context));
    }
    
    public String getURLContent(String surl, int timeout, String userAgent) throws IOException {
        String content;
        HttpClient client = getHttpClient(timeout, userAgent);
        GetMethod get = new GetMethod(surl);
        try {
            client.executeMethod(get);
            content = get.getResponseBodyAsString();
        }
         finally {
            get.releaseConnection();
        }
        
        return content;
    }
    
    public String getURLContent(String surl, String username, String password, XWikiContext context) throws IOException {
        return getURLContent(surl, username, password, getHttpTimeout(context), getHttpUserAgent(context));
    }
    
    public String getURLContent(String surl, String username, String password, int timeout, String userAgent) throws IOException {
        HttpClient client = getHttpClient(timeout, userAgent);
        client.getState().setCredentials(new AuthScope(null, -1, null), new UsernamePasswordCredentials(username, password));
        GetMethod get = new GetMethod(surl);
        try {
            get.setDoAuthentication(true);
            client.executeMethod(get);
            return get.getResponseBodyAsString();
        }
         finally {
            get.releaseConnection();
        }
        
    }
    
    public byte[] getURLContentAsBytes(String surl, XWikiContext context) throws IOException {
        return getURLContentAsBytes(surl, getHttpTimeout(context), getHttpUserAgent(context));
    }
    
    public byte[] getURLContentAsBytes(String surl, int timeout, String userAgent) throws IOException {
        HttpClient client = getHttpClient(timeout, userAgent);
        GetMethod get = new GetMethod(surl);
        try {
            client.executeMethod(get);
            return get.getResponseBody();
        }
         finally {
            get.releaseConnection();
        }
        
    }
    
    public byte[] getURLContentAsBytes(String surl, String username, String password, XWikiContext context) throws IOException {
        return getURLContentAsBytes(surl, username, password, getHttpTimeout(context), getHttpUserAgent(context));
    }
    
    public byte[] getURLContentAsBytes(String surl, String username, String password, int timeout, String userAgent) throws IOException {
        HttpClient client = getHttpClient(timeout, userAgent);
        client.getState().setCredentials(new AuthScope(null, -1, null), new UsernamePasswordCredentials(username, password));
        GetMethod get = new GetMethod(surl);
        try {
            get.setDoAuthentication(true);
            client.executeMethod(get);
            return get.getResponseBody();
        }
         finally {
            get.releaseConnection();
        }
        
    }
    
    public List<String> getSpaces(XWikiContext context) throws XWikiException {
        try {
            return getStore().getQueryManager().getNamedQuery("getSpaces") .addFilter(Utils.<QueryFilter>getComponent(QueryFilter.class, "hidden")).execute();
        }
         catch (QueryException ex) {
            throw new XWikiException(0, 0, ex.getMessage(), ex);
        }
        
    }
    
    public List<String> getSpaceDocsName(String spaceReference, XWikiContext context) throws XWikiException {
        try {
            return getStore().getQueryManager().getNamedQuery("getSpaceDocsName") .addFilter(Utils.<QueryFilter>getComponent(QueryFilter.class, "hidden")) .bindValue("space", spaceReference).execute();
        }
         catch (QueryException ex) {
            throw new XWikiException(0, 0, ex.getMessage(), ex);
        }
        
    }
    
    public List<String> getIncludedMacros(String defaultSpace, String content, XWikiContext context) {
        List<String> list;
        try {
            String pattern = "#includeMacros[ ]*\\([ ]*([\"'])(.*?)\\1[ ]*\\)";
            list = context.getUtil().getUniqueMatches(content, pattern, 2);
            for (int i = 0; i < list.size(); i++) {
                String name = list.get(i);
                if (name.indexOf('.') == -1) {
                    list.set(i, defaultSpace + "." + name);
                }
                
            }
            
        }
         catch (Exception e) {
            LOGGER.error("Failed to extract #includeMacros targets from provided content [" + content + "]", e);
            list = Collections.emptyList();
        }
        
        return list;
    }
    
    public boolean isReadOnly() {
        return this.isReadOnly;
    }
    
    public void setReadOnly(boolean readOnly) {
        this.isReadOnly = readOnly;
    }
    
    public void deleteAllDocuments(XWikiDocument doc, XWikiContext context) throws XWikiException {
        deleteAllDocuments(doc, true, context);
    }
    
    public void deleteAllDocuments(XWikiDocument doc, boolean toTrash, XWikiContext context) throws XWikiException {
        BatchOperationExecutor batchOperationExecutor = Utils.getComponent(BatchOperationExecutor.class);
        batchOperationExecutor.execute(() -> {
            for (Locale locale : doc.getTranslationLocales(context)) {
                XWikiDocument tdoc = doc.getTranslatedDocument(locale, context);
                deleteDocument(tdoc, toTrash, context);
            }
            
            deleteDocument(doc, toTrash, context);
        }
        
);
    }
    
    public void refreshLinks(XWikiContext context) throws XWikiException {
        try {
            @SuppressWarnings("deprecation")
            List<String> docs = getStore().getQueryManager().getNamedQuery("getAllDocuments") .addFilter(Utils.<QueryFilter>getComponent(QueryFilter.class, "hidden")).execute();
            for (int i = 0; i < docs.size(); i++) {
                XWikiDocument myDoc = this.getDocument(docs.get(i), context);
                myDoc.getStore().saveLinks(myDoc, context, true);
            }
            
        }
         catch (QueryException ex) {
            throw new XWikiException(0, 0, ex.getMessage(), ex);
        }
        
    }
    
    public boolean hasBacklinks(XWikiContext context) {
        if (this.hasBacklinks == null) {
            this.hasBacklinks = "1".equals(getXWikiPreference("backlinks", "xwiki.backlinks", "0", context));
        }
        
        return this.hasBacklinks;
    }
    
    public boolean hasTags(XWikiContext context) {
        return "1".equals(getXWikiPreference("tags", "xwiki.tags", "0", context));
    }
    
    public boolean hasCustomMappings() {
        return getHibernateConfiguration().hasCustomMappings();
    }
    
    public boolean hasDynamicCustomMappings() {
        return getHibernateConfiguration().hasDynamicCustomMappings();
    }
    
    public String getDefaultSpace(XWikiContext context) {
        String defaultSpace = getXWikiPreference("defaultweb", "", context);
        if (StringUtils.isEmpty(defaultSpace)) {
            return getConfiguration().getProperty("xwiki.defaultweb", DEFAULT_HOME_SPACE);
        }
        
        return defaultSpace;
    }
    
    public boolean showViewAction(XWikiContext context) {
        String bl = getXWikiPreference("showviewaction", "", context);
        if ("1".equals(bl)) {
            return true;
        }
         else if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.showviewaction", "1"));
    }
    
    public boolean useDefaultAction(XWikiContext context) {
        String bl = getXWikiPreference("usedefaultaction", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.usedefaultaction", "0"));
    }
    
    public String getDefaultPage(XWikiContext context) {
        String defaultPage = getXWikiPreference("defaultpage", "", context);
        if (StringUtils.isEmpty(defaultPage)) {
            return getConfiguration().getProperty("xwiki.defaultpage", DEFAULT_SPACE_HOMEPAGE);
        }
        
        return defaultPage;
    }
    
    public boolean hasEditComment(XWikiContext context) {
        String bl = getXWikiPreference("editcomment", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.editcomment", "0"));
    }
    
    public boolean isEditCommentFieldHidden(XWikiContext context) {
        String bl = getXWikiPreference("editcomment_hidden", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.editcomment.hidden", "0"));
    }
    
    public boolean isEditCommentSuggested(XWikiContext context) {
        String bl = getXWikiPreference("editcomment_suggested", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.editcomment.suggested", "0"));
    }
    
    public boolean isEditCommentMandatory(XWikiContext context) {
        String bl = getXWikiPreference("editcomment_mandatory", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.editcomment.mandatory", "0"));
    }
    
    public boolean hasMinorEdit(XWikiContext context) {
        String bl = getXWikiPreference("minoredit", "", context);
        if ("1".equals(bl)) {
            return true;
        }
        
        if ("0".equals(bl)) {
            return false;
        }
        
        return "1".equals(getConfiguration().getProperty("xwiki.minoredit", "1"));
    }
    
    public boolean hasRecycleBin(XWikiContext context) {
        return getStoreConfiguration().isRecycleBinEnabled();
    }
    
    public boolean hasAttachmentRecycleBin(XWikiContext context) {
        return getStoreConfiguration().isAttachmentRecycleBinEnabled();
    }
    
    public BaseClass getXClass(DocumentReference documentReference, XWikiContext context) throws XWikiException {
        BaseClass bclass = context.getBaseClass(documentReference);
        if (bclass != null) {
            return bclass;
        }
        
        return getDocument(documentReference, context).getXClass();
    }
    
    public BaseClass getClass(String fullName, XWikiContext context) throws XWikiException {
        DocumentReference reference = null;
        if (StringUtils.isNotEmpty(fullName)) {
            reference = getCurrentMixedDocumentReferenceResolver().resolve(fullName);
        }
        
        return getXClass(reference, context);
    }
    
    public String getEditorPreference(XWikiContext context) {
        String defaultSyntaxContentEditor = getEditConfiguration().getDefaultEditor(SyntaxContent.class);
        return defaultSyntaxContentEditor == null ? "" : defaultSyntaxContentEditor.toLowerCase();
    }
    
    public Object parseGroovyFromString(String script, XWikiContext xcontext) throws XWikiException {
        return getParseGroovyFromString().parseGroovyFromString(script, xcontext);
    }
    
    public Object parseGroovyFromString(String script, String jarWikiPage, XWikiContext xcontext) throws XWikiException {
        XWikiPageClassLoader pcl = new XWikiPageClassLoader(jarWikiPage, xcontext);
        Object prevParentClassLoader = xcontext.get("parentclassloader");
        try {
            xcontext.put("parentclassloader", pcl);
            return parseGroovyFromString(script, xcontext);
        }
         finally {
            if (prevParentClassLoader == null) {
                xcontext.remove("parentclassloader");
            }
             else {
                xcontext.put("parentclassloader", prevParentClassLoader);
            }
            
        }
        
    }
    
    public Object parseGroovyFromPage(String fullName, XWikiContext context) throws XWikiException {
        XWikiDocument groovyDocument = context.getWiki().getDocument(fullName, context);
        Object sdoc = context.get(XWikiDocument.CKEY_SDOC);
        context.put(XWikiDocument.CKEY_SDOC, groovyDocument);
        try {
            return parseGroovyFromString(groovyDocument.getContent(), context);
        }
         finally {
            context.put(XWikiDocument.CKEY_SDOC, sdoc);
        }
        
    }
    
    public Object parseGroovyFromPage(String fullName, String jarWikiPage, XWikiContext context) throws XWikiException {
        XWikiDocument groovyDocument = context.getWiki().getDocument(fullName, context);
        Object sdoc = context.get(XWikiDocument.CKEY_SDOC);
        context.put(XWikiDocument.CKEY_SDOC, groovyDocument);
        try {
            return parseGroovyFromString(groovyDocument.getContent(), jarWikiPage, context);
        }
         finally {
            context.put(XWikiDocument.CKEY_SDOC, sdoc);
        }
        
    }
    
    public String getMacroList(XWikiContext context) {
        String macrosmapping = "";
        XWiki xwiki = context.getWiki();
        try {
            macrosmapping = getResourceContent(MACROS_FILE);
        }
         catch (IOException e) {
        }
        
        macrosmapping += "\r\n" + xwiki.getXWikiPreference("macros_mapping", "", context);
        return macrosmapping;
    }
    
    public BaseObject getObjectFromRequest(String className, XWikiContext context) throws XWikiException {
        Map<String, String[]> map = Util.getObject(context.getRequest(), className);
        BaseClass bclass = context.getWiki().getClass(className, context);
        BaseObject newobject = (BaseObject) bclass.fromMap(map, context);
        return newobject;
    }
    
    public String getConvertingUserNameType(XWikiContext context) {
        if (StringUtils.isNotBlank(context.getWiki().getXWikiPreference("convertmail", context))) {
            return context.getWiki().getXWikiPreference("convertmail", "0", context);
        }
        
        return getConfiguration().getProperty("xwiki.authentication.convertemail", "0");
    }
    
    public String convertUsername(String username, XWikiContext context) {
        if (username == null) {
            return null;
        }
        
        if (getConvertingUserNameType(context).equals("1") && (username.indexOf('@') != -1)) {
            String id = "" + username.hashCode();
            id = id.replace("-", "");
            if (username.length() > 1) {
                int i1 = username.indexOf('@');
                id = "" + username.charAt(0) + username.substring(i1 + 1, i1 + 2) + username.charAt(username.length() - 1) + id;
            }
            
            return id;
        }
         else if (getConvertingUserNameType(context).equals("2")) {
            return username.replaceAll("[\\.\\@]", "_");
        }
         else {
            return username;
        }
        
    }
    
    public boolean hasSectionEdit(XWikiContext context) {
        return getConfiguration().getProperty("xwiki.section.edit", 0) == 1;
    }
    
    public long getSectionEditingDepth() {
        return getConfiguration().getProperty("xwiki.section.depth", 2L);
    }
    
    public String getWysiwygToolbars(XWikiContext context) {
        return getConfiguration().getProperty("xwiki.wysiwyg.toolbars", "");
    }
    
    public String clearName(String name, XWikiContext context) {
        return clearName(name, true, true, context);
    }
    
    public String clearName(String name, boolean stripDots, boolean ascii, XWikiContext context) {
        String temp = name;
        temp = temp.replaceAll( "[\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u0100\u0102\u0104\u01cd\u01de\u01e0\u01fa\u0200\u0202\u0226]", "A");
        temp = temp.replaceAll( "[\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u0101\u0103\u0105\u01ce\u01df\u01e1\u01fb\u0201\u0203\u0227]", "a");
        temp = temp.replaceAll("[\u00c6\u01e2\u01fc]", "AE");
        temp = temp.replaceAll("[\u00e6\u01e3\u01fd]", "ae");
        temp = temp.replaceAll("[\u008c\u0152]", "OE");
        temp = temp.replaceAll("[\u009c\u0153]", "oe");
        temp = temp.replaceAll("[\u00c7\u0106\u0108\u010a\u010c]", "C");
        temp = temp.replaceAll("[\u00e7\u0107\u0109\u010b\u010d]", "c");
        temp = temp.replaceAll("[\u00d0\u010e\u0110]", "D");
        temp = temp.replaceAll("[\u00f0\u010f\u0111]", "d");
        temp = temp.replaceAll("[\u00c8\u00c9\u00ca\u00cb\u0112\u0114\u0116\u0118\u011a\u0204\u0206\u0228]", "E");
        temp = temp.replaceAll("[\u00e8\u00e9\u00ea\u00eb\u0113\u0115\u0117\u0119\u011b\u01dd\u0205\u0207\u0229]", "e");
        temp = temp.replaceAll("[\u011c\u011e\u0120\u0122\u01e4\u01e6\u01f4]", "G");
        temp = temp.replaceAll("[\u011d\u011f\u0121\u0123\u01e5\u01e7\u01f5]", "g");
        temp = temp.replaceAll("[\u0124\u0126\u021e]", "H");
        temp = temp.replaceAll("[\u0125\u0127\u021f]", "h");
        temp = temp.replaceAll("[\u00cc\u00cd\u00ce\u00cf\u0128\u012a\u012c\u012e\u0130\u01cf\u0208\u020a]", "I");
        temp = temp.replaceAll("[\u00ec\u00ed\u00ee\u00ef\u0129\u012b\u012d\u012f\u0131\u01d0\u0209\u020b]", "i");
        temp = temp.replaceAll("[\u0132]", "IJ");
        temp = temp.replaceAll("[\u0133]", "ij");
        temp = temp.replaceAll("[\u0134]", "J");
        temp = temp.replaceAll("[\u0135]", "j");
        temp = temp.replaceAll("[\u0136\u01e8]", "K");
        temp = temp.replaceAll("[\u0137\u0138\u01e9]", "k");
        temp = temp.replaceAll("[\u0139\u013b\u013d\u013f\u0141]", "L");
        temp = temp.replaceAll("[\u013a\u013c\u013e\u0140\u0142\u0234]", "l");
        temp = temp.replaceAll("[\u00d1\u0143\u0145\u0147\u014a\u01f8]", "N");
        temp = temp.replaceAll("[\u00f1\u0144\u0146\u0148\u0149\u014b\u01f9\u0235]", "n");
        temp = temp.replaceAll( "[\u00d2\u00d3\u00d4\u00d5\u00d6\u00d8\u014c\u014e\u0150\u01d1\u01ea\u01ec\u01fe\u020c\u020e\u022a\u022c" + "\u022e\u0230]", "O");
        temp = temp.replaceAll( "[\u00f2\u00f3\u00f4\u00f5\u00f6\u00f8\u014d\u014f\u0151\u01d2\u01eb\u01ed\u01ff\u020d\u020f\u022b\u022d" + "\u022f\u0231]", "o");
        temp = temp.replaceAll("[\u0156\u0158\u0210\u0212]", "R");
        temp = temp.replaceAll("[\u0157\u0159\u0211\u0213]", "r");
        temp = temp.replaceAll("[\u015a\u015c\u015e\u0160\u0218]", "S");
        temp = temp.replaceAll("[\u015b\u015d\u015f\u0161\u0219]", "s");
        temp = temp.replaceAll("[\u00de\u0162\u0164\u0166\u021a]", "T");
        temp = temp.replaceAll("[\u00fe\u0163\u0165\u0167\u021b\u0236]", "t");
        temp = temp.replaceAll( "[\u00d9\u00da\u00db\u00dc\u0168\u016a\u016c\u016e\u0170\u0172\u01d3\u01d5\u01d7\u01d9\u01db\u0214\u0216]", "U");
        temp = temp.replaceAll( "[\u00f9\u00fa\u00fb\u00fc\u0169\u016b\u016d\u016f\u0171\u0173\u01d4\u01d6\u01d8\u01da\u01dc\u0215\u0217]", "u");
        temp = temp.replaceAll("[\u0174]", "W");
        temp = temp.replaceAll("[\u0175]", "w");
        temp = temp.replaceAll("[\u00dd\u0176\u0178\u0232]", "Y");
        temp = temp.replaceAll("[\u00fd\u00ff\u0177\u0233]", "y");
        temp = temp.replaceAll("[\u0179\u017b\u017d]", "Z");
        temp = temp.replaceAll("[\u017a\u017c\u017e]", "z");
        temp = temp.replaceAll("[\u00df]", "SS");
        temp = temp.replaceAll("[_':,;\\\\/]", " ");
        name = temp;
        name = name.replaceAll("\\s+", "");
        name = name.replaceAll("[\\(\\)]", " ");
        if (stripDots) {
            name = name.replaceAll("[\\.]", "");
        }
        
        if (ascii) {
            name = name.replaceAll("[^a-zA-Z0-9\\-_\\.]", "");
        }
        
        if (name.length() > 250) {
            name = name.substring(0, 250);
        }
        
        return name;
    }
    
    public String getUniquePageName(String space, XWikiContext context) {
        String pageName = generateRandomString(16);
        return getUniquePageName(space, pageName, context);
    }
    
    public String getUniquePageName(String space, String name, XWikiContext context) {
        String pageName = clearName(name, context);
        if (exists(space + "." + pageName, context)) {
            int i = 0;
            while (exists(space + "." + pageName + "_" + i, context)) {
                i++;
            }
            
            return pageName + "_" + i;
        }
        
        return pageName;
    }
    
    public PropertyClass getPropertyClassFromName(String propPath, XWikiContext context) {
        int i1 = propPath.indexOf('_');
        if (i1 == -1) {
            return null;
        }
         else {
            String className = propPath.substring(0, i1);
            String propName = propPath.substring(i1 + 1);
            try {
                return (PropertyClass) getDocument(className, context).getXClass().get(propName);
            }
             catch (XWikiException e) {
                return null;
            }
            
        }
        
    }
    
    public boolean validateDocument(XWikiDocument doc, XWikiContext context) throws XWikiException {
        return doc.validate(context);
    }
    
    public String addTooltip(String html, String message, String params, XWikiContext context) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("<span class=\"tooltip_span\" onmouseover=\"");
        buffer.append(params);
        buffer.append("; return escape('");
        buffer.append(message.replaceAll("'", "\\'"));
        buffer.append("');\">");
        buffer.append(html);
        buffer.append("</span>");
        return buffer.toString();
    }
    
    public String addTooltipJS(XWikiContext context) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("<script src=\"");
        buffer.append(getSkinFile("ajax/wzToolTip.js", context));
        buffer.append("\"></script>");
        return buffer.toString();
    }
    
    public String addTooltip(String html, String message, XWikiContext context) {
        return addTooltip(html, message, "this.WIDTH='300'", context);
    }
    
    public String addMandatory(XWikiContext context) {
        String star = "<span class=\"mandatoryParenthesis\">&nbsp;(</span><span class=\"mandatoryDot\">&lowast;</span><span class=\"mandatoryParenthesis\">)&nbsp;</span>";
        return context.getWiki().getXWikiPreference("mandatory_display", star, context);
    }
    
    public boolean hasVersioning(XWikiContext context) {
        return getStoreConfiguration().isVersioningEnabled();
    }
    
    public boolean hasAttachmentVersioning(XWikiContext context) {
        return getStoreConfiguration().isAttachmentVersioningEnabled();
    }
    
    public String getExternalAttachmentURL(String fullName, String filename, XWikiContext context) {
        XWikiDocument doc = new XWikiDocument();
        doc.setFullName(fullName, context);
        return doc.getExternalAttachmentURL(filename, "download", context);
    }
    
    public int getMaxRecursiveSpaceChecks(XWikiContext context) {
        int max = getXWikiPreferenceAsInt("rights_maxrecursivespacechecks", -1, context);
        if (max == -1) {
            return getConfiguration().getProperty("xwiki.rights.maxrecursivespacechecks", 0);
        }
         else {
            return max;
        }
        
    }
    
    public void restoreFromRecycleBin(final XWikiDocument doc, String comment, XWikiContext context) throws XWikiException {
        XWikiDeletedDocument[] deletedDocuments = getRecycleBinStore().getAllDeletedDocuments(doc, context, true);
        if (deletedDocuments != null && deletedDocuments.length > 0) {
            long index = deletedDocuments[0].getId();
            restoreFromRecycleBin(doc, index, comment, context);
        }
        
    }
    
    public void restoreFromRecycleBin(final XWikiDocument doc, long index, String comment, XWikiContext context) throws XWikiException {
        restoreFromRecycleBin(index, comment, context);
    }
    
    public void restoreFromRecycleBin(long index, String comment, XWikiContext context) throws XWikiException {
        XWikiDocument newdoc = getRecycleBinStore().restoreFromRecycleBin(index, context, true);
        saveDocument(newdoc, comment, context);
        getRecycleBinStore().deleteFromRecycleBin(index, context, true);
    }
    
    public XWikiDocument rollback(final XWikiDocument tdoc, String rev, XWikiContext context) throws XWikiException {
        return rollback(tdoc, rev, true, context);
    }
    
    private void restoreDeletedAttachment(XWikiAttachment rolledbackAttachment, XWikiContext context) throws XWikiException {
        if (getAttachmentRecycleBinStore() != null) {
            List<DeletedAttachment> deletedVariants = getAttachmentRecycleBinStore().getAllDeletedAttachments(rolledbackAttachment, context, true);
            DeletedAttachment correctVariant = null;
            for (DeletedAttachment variant : deletedVariants) { 
                if (variant.getDate().before(rolledbackAttachment.getDate())) {
                    break;
                }
                
                correctVariant = variant;
            }
            
            if (correctVariant != null) {
                XWikiAttachment restoredAttachment = correctVariant.restoreAttachment();
                boolean updateArchive = false;
                if (!restoredAttachment.getVersion().equals(rolledbackAttachment.getVersion())) {
                    XWikiAttachment restoredAttachmentRevision = restoredAttachment.getAttachmentRevision(rolledbackAttachment.getVersion(), context);
                    if (restoredAttachmentRevision != null) {
                        rolledbackAttachment.setVersion(restoredAttachment.getVersion());
                        updateArchive = true;
                        restoredAttachment = restoredAttachmentRevision;
                    }
                    
                }
                
                rolledbackAttachment.apply(restoredAttachment);
                rolledbackAttachment .setAttachment_archive((XWikiAttachmentArchive) restoredAttachment.getAttachment_archive().clone());
                rolledbackAttachment.getAttachment_archive().setAttachment(rolledbackAttachment);
                if (updateArchive) {
                    rolledbackAttachment.updateContentArchive(context);
                }
                
            }
             else {
                try {
                    rolledbackAttachment.setContent(new ByteArrayInputStream(new byte[0]));
                }
                 catch (IOException e) {
                }
                
            }
            
        }
        
    }
    
    public XWikiDocument rollback(final XWikiDocument tdoc, String rev, boolean addRevision, XWikiContext xcontext) throws XWikiException {
        LOGGER.debug("Rolling back [{}] to version [{}]", tdoc, rev);
        XWikiDocument document = tdoc.clone();
        XWikiDocument rolledbackDoc = getDocumentRevisionProvider().getRevision(tdoc, rev);
        if ("1".equals(getConfiguration().getProperty("xwiki.store.rollbackattachmentwithdocuments", "1"))) {
            LOGGER.debug("Checking attachments");
            for (XWikiAttachment rolledbackAttachment : rolledbackDoc.getAttachmentList()) {
                String filename = rolledbackAttachment.getFilename();
                XWikiAttachment attachment = document.getAttachment(filename);
                if (attachment == null) {
                    LOGGER.debug("Deleted attachment: [{}]", filename);
                    restoreDeletedAttachment(rolledbackAttachment, xcontext);
                }
                 else {
                    XWikiAttachment attachmentRevision = attachment.getAttachmentRevision(rolledbackAttachment.getVersion(), xcontext);
                    if (attachmentRevision == null || attachmentRevision.getDate().getTime() != rolledbackAttachment.getDate().getTime()) {
                        LOGGER.debug("Recreated attachment: [{}]", filename);
                        document.removeAttachment(attachment);
                        if (getAttachmentRecycleBinStore() != null) {
                            restoreDeletedAttachment(rolledbackAttachment, xcontext);
                        }
                        
                    }
                     else {
                        rolledbackAttachment.apply(attachmentRevision);
                    }
                    
                }
                
            }
            
        }
        
        document.apply(rolledbackDoc);
        document.setAuthorReference(xcontext.getUserReference());
        document.setContentAuthorReference(xcontext.getUserReference());
        String message;
        if (!addRevision) {
            document.setVersion(rev);
            document.setMetaDataDirty(false);
            document.setContentDirty(false);
            message = document.getComment();
        }
         else {
            document.setMetaDataDirty(true);
            message = localizePlainOrKey("core.comment.rollback", rev);
        }
        
        ObservationManager om = getObservationManager();
        if (om != null) {
            om.notify(new DocumentRollingBackEvent(document.getDocumentReference(), rev), document, xcontext);
        }
        
        XWikiDocument originalDocument = document.getOriginalDocument();
        saveDocument(document, message, xcontext);
        XWikiDocument newOriginalDocument = document.getOriginalDocument();
        document.setOriginalDocument(originalDocument);
        try {
            if (om != null) {
                om.notify(new DocumentRolledBackEvent(document.getDocumentReference(), rev), document, xcontext);
            }
            
        }
         finally {
            document.setOriginalDocument(newOriginalDocument);
        }
        
        return document;
    }
    
    public List<String> getConfiguredSyntaxes() {
        return this.configuredSyntaxes;
    }
    
    public String getDefaultDocumentSyntax() {
        return getDefaultDocumentSyntaxInternal().toIdString();
    }
    
    private Syntax getDefaultDocumentSyntaxInternal() {
        return Utils.getComponent(CoreConfiguration.class).getDefaultDocumentSyntax();
    }
    
    public String getCurrentContentSyntaxId(String defaultSyntaxId, XWikiContext context) {
        String syntaxId = getCurrentContentSyntaxIdInternal(context);
        if (syntaxId == null) {
            syntaxId = defaultSyntaxId;
        }
        
        return syntaxId;
    }
    
    public String getCurrentContentSyntaxId(XWikiContext context) {
        String syntaxId = getCurrentContentSyntaxIdInternal(context);
        if (syntaxId == null) {
            throw new RuntimeException("Cannot get the current syntax since there's no current document set");
        }
        
        return syntaxId;
    }
    
    private String getCurrentContentSyntaxIdInternal(XWikiContext context) {
        Syntax syntax = getCurrentContentSyntaxInternal(context);
        return syntax != null ? syntax.toIdString() : null;
    }
    
    private Syntax getCurrentContentSyntaxInternal(XWikiContext context) {
        Syntax syntax = null;
        if (getRenderingContext() != null) {
            Block curentBlock = getRenderingContext().getCurrentBlock();
            if (curentBlock != null) {
                MetaDataBlock metaDataBlock = curentBlock.getFirstBlock(new MetadataBlockMatcher(MetaData.SYNTAX), Axes.ANCESTOR_OR_SELF);
                if (metaDataBlock != null) {
                    return (Syntax) metaDataBlock.getMetaData().getMetaData(MetaData.SYNTAX);
                }
                
            }
            
        }
        
        if (context.get("sdoc") != null) {
            syntax = ((XWikiDocument) context.get("sdoc")).getSyntax();
        }
         else if (context.getDoc() != null) {
            syntax = context.getDoc().getSyntax();
        }
        
        return syntax;
    }
    
    public boolean isTitleInCompatibilityMode() {
        return "1".equals(getConfiguration().getProperty("xwiki.title.compatibility", "0"));
    }
    
    public void onEvent(Event event, Object source, Object data) {
        if (event instanceof WikiDeletedEvent) {
            onWikiDeletedEvent((WikiDeletedEvent) event);
        }
         else if (event instanceof ComponentDescriptorAddedEvent) {
            onMandatoryDocumentInitializerAdded((ComponentDescriptorAddedEvent) event, (ComponentManager) source);
        }
         else {
            XWikiDocument doc = (XWikiDocument) source;
            if (event instanceof XObjectPropertyEvent) {
                EntityReference reference = ((XObjectPropertyEvent) event).getReference();
                String modifiedProperty = reference.getName();
                if ("backlinks".equals(modifiedProperty)) {
                    this.hasBacklinks = doc.getXObject((ObjectReference) reference.getParent()).getIntValue("backlinks", getConfiguration().getProperty("xwiki.backlinks", 0)) == 1;
                }
                
            }
            
        }
        
    }
    
    private void onWikiDeletedEvent(WikiDeletedEvent event) {
        this.initializedWikis.remove(event.getWikiId());
    }
    
    private void onMandatoryDocumentInitializerAdded(ComponentDescriptorAddedEvent event, ComponentManager componentManager) {
        String namespace;
        if (componentManager instanceof NamespacedComponentManager) {
            namespace = ((NamespacedComponentManager) componentManager).getNamespace();
        }
         else {
            namespace = null;
        }
        
        MandatoryDocumentInitializer initializer;
        try {
            initializer = componentManager.getInstance(MandatoryDocumentInitializer.class, event.getRoleHint());
            XWikiContext context = getXWikiContext();
            if (namespace == null) {
                initializeMandatoryDocument(context.getMainXWiki(), initializer, context);
                for (String wiki : this.initializedWikis.keySet()) {
                    initializeMandatoryDocument(wiki, initializer, context);
                }
                
            }
             else if (namespace.startsWith("wiki:")) {
                initializeMandatoryDocument(namespace.substring("wiki:".length()), initializer, context);
            }
            
        }
         catch (ComponentLookupException e) {
            LOGGER.error("Failed to lookup mandatory document initializer", e);
        }
        
    }
    
    private static final RegexEntityReference XWIKIPREFERENCE_PROPERTY_REFERENCE = XWikiPreferencesDocumentInitializer.OBJECT_REFERENCE;
    private static final List<Event> LISTENER_EVENTS = Arrays.<Event>asList(new XObjectPropertyAddedEvent(XWIKIPREFERENCE_PROPERTY_REFERENCE), new XObjectPropertyDeletedEvent(XWIKIPREFERENCE_PROPERTY_REFERENCE), new XObjectPropertyUpdatedEvent(XWIKIPREFERENCE_PROPERTY_REFERENCE), new WikiDeletedEvent(), new ComponentDescriptorAddedEvent(MandatoryDocumentInitializer.class));
    public List<Event> getEvents() {
        return LISTENER_EVENTS;
    }
    
    public String getName() {
        return "xwiki-core";
    }
    
    private DocumentReference getPreferencesDocumentReference(XWikiContext context) {
        String database = context.getWikiId();
        EntityReference spaceReference;
        if (database != null) {
            spaceReference = new EntityReference(SYSTEM_SPACE, EntityType.SPACE, new WikiReference(database));
        }
         else {
            spaceReference = getCurrentMixedEntityReferenceResolver().resolve(SYSTEM_SPACE, EntityType.SPACE);
        }
        
        return new DocumentReference("XWikiPreferences", new SpaceReference(spaceReference));
    }
    
    public List<XWikiAttachment> searchAttachments(String parametrizedSqlClause, boolean checkRight, int nb, int start, List<?> parameterValues, XWikiContext context) throws XWikiException {
        parametrizedSqlClause = parametrizedSqlClause.trim().replaceFirst("^and ", "").replaceFirst("^where ", "");
        List<java.lang.Object[]> results = this.getStore().search( "select attach.filename, doc.fullName from XWikiAttachment attach, XWikiDocument doc where doc.id = attach.docId and " + parametrizedSqlClause, nb, start, parameterValues, context);
        HashMap<String, List<String>> filenamesByDocFullName = new HashMap<>();
        for (int i = 0; i < results.size(); i++) {
            String filename = (String) results.get(i)[0];
            String docFullName = (String) results.get(i)[1];
            if (!filenamesByDocFullName.containsKey(docFullName)) {
                filenamesByDocFullName.put(docFullName, new ArrayList<String>());
            }
            
            filenamesByDocFullName.get(docFullName).add(filename);
        }
        
        List<XWikiAttachment> out = new ArrayList<>();
        for (Map.Entry<String, List<String>> entry : filenamesByDocFullName.entrySet()) {
            String fullName = entry.getKey();
            XWikiDocument doc = getDocument(fullName, context);
            if (checkRight) {
                if (!context.getWiki().getRightService().hasAccessLevel("view", context.getUser(), doc.getFullName(), context)) {
                    continue;
                }
                
            }
            
            List<String> returnedAttachmentNames = entry.getValue();
            for (XWikiAttachment attach : doc.getAttachmentList()) {
                if (returnedAttachmentNames.contains(attach.getFilename())) {
                    out.add(attach);
                }
                
            }
            
        }
        
        return out;
    }
    
    public int countAttachments(String parametrizedSqlClause, List<?> parameterValues, XWikiContext context) throws XWikiException {
        parametrizedSqlClause = parametrizedSqlClause.trim().replaceFirst("^and ", "").replaceFirst("^where ", "");
        List l = getStore().search("select count(attach) from XWikiAttachment attach, XWikiDocument doc where " + "attach.docId=doc.id and " + parametrizedSqlClause, 0, 0, parameterValues, context);
        return ((Number) l.get(0)).intValue();
    }
    
    public static String getConfigPath() throws NamingException {
        return XWikiCfgConfigurationSource.getConfigPath();
    }
    
    public XWiki(XWikiConfig config, XWikiContext context) throws XWikiException {
        this(config, context, null, false);
    }
    
    public XWiki(XWikiConfig config, XWikiContext context, XWikiEngineContext engine_context, boolean noupdate) throws XWikiException {
        initXWiki(config, context, engine_context, noupdate);
    }
    
    public XWiki(String xwikicfgpath, XWikiContext context) throws XWikiException {
        this(xwikicfgpath, context, null, false);
    }
    
    public XWiki(String xwikicfgpath, XWikiContext context, XWikiEngineContext engine_context, boolean noupdate) throws XWikiException {
        try {
            initXWiki(new XWikiConfig(new FileInputStream(xwikicfgpath)), context, engine_context, noupdate);
        }
         catch (FileNotFoundException e) {
            Object[] args = { xwikicfgpath };
            throw new XWikiException(XWikiException.MODULE_XWIKI_CONFIG, XWikiException.ERROR_XWIKI_CONFIG_FILENOTFOUND, "Configuration file {0} not found", e, args);
        }
        
    }
    
    public XWiki(InputStream is, XWikiContext context, XWikiEngineContext engine_context) throws XWikiException {
        initXWiki(new XWikiConfig(is), context, engine_context, true);
    }
    
    public XWikiConfig getConfig() {
        return new XWikiConfigDelegate(getConfiguration());
    }
    
    public void setConfig(XWikiConfig config) {
        ConfigurationSource configuration = getConfiguration();
        if (configuration instanceof XWikiCfgConfigurationSource) {
            ((XWikiCfgConfigurationSource) configuration).set(config);
        }
        
    }
    
    public String Param(String key) {
        return Param(key, null);
    }
    
    public String Param(String key, String default_value) {
        if (getConfiguration() != null) {
            return getConfiguration().getProperty(key, default_value);
        }
        
        return default_value;
    }
    
    public long ParamAsLong(String key) {
        return getConfiguration().getProperty(key, long.class);
    }
    
    public long ParamAsLong(String key, long default_value) {
        return getConfiguration().getProperty(key, default_value);
    }
    
    public boolean isPathBased() {
        return "1".equals(getConfiguration().getProperty("xwiki.virtual.usepath", "1"));
    }
    
}


