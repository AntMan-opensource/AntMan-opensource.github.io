package org.jenkinsci.plugins.googlelogin;
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.BearerToken;
import com.google.api.client.auth.oauth2.ClientParametersAuthentication;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.auth.openidconnect.IdToken;
import com.google.api.client.auth.openidconnect.IdTokenResponse;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestFactory;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.JsonObjectParser;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.common.annotations.VisibleForTesting;
import hudson.Extension;
import hudson.Util;
import hudson.model.Descriptor;
import hudson.model.Failure;
import hudson.model.User;
import hudson.security.SecurityRealm;
import hudson.util.HttpResponses;
import hudson.util.Secret;
import jenkins.model.Jenkins;
import jenkins.security.SecurityListener;
import org.acegisecurity.Authentication;
import org.acegisecurity.AuthenticationException;
import org.acegisecurity.AuthenticationManager;
import org.acegisecurity.BadCredentialsException;
import org.acegisecurity.GrantedAuthority;
import org.acegisecurity.context.SecurityContextHolder;
import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;
import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.DoNotUse;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.Header;
import org.kohsuke.stapler.HttpRedirect;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.StaplerRequest;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;
public class GoogleOAuth2SecurityRealm extends SecurityRealm {
    private static final String SCOPE = "profile email";
    private static final JsonFactory JSON_FACTORY = new JacksonFactory();
    private static final GenericUrl TOKEN_SERVER_URL = new GenericUrl("https://accounts.google.com/o/oauth2/token");
    private static final String AUTHORIZATION_SERVER_URL = "https://accounts.google.com/o/oauth2/auth";
    private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
    private static final String SESSION_NAME = GoogleOAuth2SecurityRealm.class.getName() + ".OAuthSession";
    private final String clientId;
    private final Secret clientSecret;
    private final String domain;
    private boolean rootURLFromRequest;
    public GoogleOAuth2SecurityRealm(String clientId, String clientSecret, String domain) throws IOException {
        this.clientId = clientId;
        this.clientSecret = Secret.fromString(clientSecret);
        this.domain = Util.fixEmptyAndTrim(domain);
    }
    
    public boolean isRootURLFromRequest() {
        return rootURLFromRequest;
    }
    
    public void setRootURLFromRequest(boolean rootURLFromRequest) {
        this.rootURLFromRequest = rootURLFromRequest;
    }
    
    public String getClientId() {
        return clientId;
    }
    
    public Secret getClientSecret() {
        return clientSecret;
    }
    
    public String getDomain() {
        return domain;
    }
    
    public String getLoginUrl() {
        return "securityRealm/commenceLogin";
    }
    
    public SecurityComponents createSecurityComponents() {
        return new SecurityComponents( new AuthenticationManager() {                     public Authentication authenticate(Authentication authentication) throws AuthenticationException { if (authentication instanceof AnonymousAuthenticationToken) return authentication;
                        throw new BadCredentialsException("Unexpected authentication type: " + authentication);
                    }
                    
                }
                 );
    }
    
    protected String getPostLogOutUrl(StaplerRequest req, Authentication auth) {
        return "securityRealm/loggedOut";
    }
    
    public HttpResponse doCommenceLogin(StaplerRequest request, @QueryParameter String from,  @Header("Referer") final String referer) throws IOException {
        final String redirectOnFinish;
        if (from != null && ! Util.isSafeToRedirectTo(from)) {
            redirectOnFinish = from;
        }
         else if (referer != null && ! Util.isSafeToRedirectTo(referer)) {
            redirectOnFinish = referer;
        }
         else {
            redirectOnFinish = getRootURL();
        }
        
        final AuthorizationCodeFlow flow = new AuthorizationCodeFlow.Builder( BearerToken.queryParameterAccessMethod(), HTTP_TRANSPORT, JSON_FACTORY, TOKEN_SERVER_URL, new ClientParametersAuthentication(clientId, clientSecret.getPlainText()), clientId, AUTHORIZATION_SERVER_URL) .setScopes(Arrays.asList(SCOPE)) .build();
        OAuthSession oAuthSession = new OAuthSession(from, buildOAuthRedirectUrl(), domain) {
            public HttpResponse onSuccess(String authorizationCode) {
                try {
                    IdTokenResponse response = IdTokenResponse.execute( flow.newTokenRequest(authorizationCode).setRedirectUri(buildOAuthRedirectUrl()));
                    IdToken idToken = IdToken.parse(JSON_FACTORY, response.getIdToken());
                    Object hd = idToken.getPayload().get("hd");
                    if (!isDomainValid(hd)) {
                        return HttpResponses.errorWithoutStack(401, "Unauthorized");
                    }
                    
                    final Credential credential = flow.createAndStoreCredential(response, null);
                    HttpRequestFactory requestFactory = HTTP_TRANSPORT.createRequestFactory(new HttpRequestInitializer() {
                                public void initialize(HttpRequest request) throws IOException {
                                    credential.initialize(request);
                                    request.setParser(new JsonObjectParser(JSON_FACTORY));
                                }
                                
                            }
                            
);
                    GenericUrl url = new GenericUrl("https://www.googleapis.com/userinfo/v2/me");
                    HttpRequest request = requestFactory.buildGetRequest(url);
                    GoogleUserInfo info = request.execute().parseAs(GoogleUserInfo.class);
                    GrantedAuthority[] authorities = new GrantedAuthority[]{SecurityRealm.AUTHENTICATED_AUTHORITY};
                    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(info.getEmail(), "", authorities);
                    Stapler.getCurrentRequest().getSession().invalidate();
                    Stapler.getCurrentRequest().getSession();
                    SecurityContextHolder.getContext().setAuthentication(token);
                    User u = User.get(token.getName());
                    info.updateProfile(u);
                    SecurityListener.fireLoggedIn(token.getName());
                    return new HttpRedirect(redirectOnFinish);
                }
                 catch (IOException e) {
                    return HttpResponses.error(500, e);
                }
                
            }
            
        };
        request.getSession().setAttribute(SESSION_NAME, oAuthSession);
        return oAuthSession.doCommenceLogin(flow);
    }
    
    @VisibleForTesting
    boolean isDomainValid(Object tokenDomain) {
        if (domain == null) {
            return true;
        }
        
        StringTokenizer tokenizer = new StringTokenizer(domain, ",");
        while (tokenizer.hasMoreElements()) {
            String domainToTest = tokenizer.nextToken().trim();
            if (domainToTest.equals(tokenDomain)) {
                return true;
            }
            
        }
        
        return false;
    }
    
    private String buildOAuthRedirectUrl() {
        String rootUrl = getRootURL();
        if (rootUrl == null) {
            throw new NullPointerException("Jenkins root url should not be null");
        }
         else {
            return rootUrl + "securityRealm/finishLogin";
        }
        
    }
    
    private String getRootURL() {
        if (rootURLFromRequest) {
            return Jenkins.getInstance().getRootUrlFromRequest();
        }
         else {
            return Jenkins.getInstance().getRootUrl();
        }
        
    }
    
    public HttpResponse doFinishLogin(StaplerRequest request) throws IOException {
        OAuthSession oAuthSession = (OAuthSession) request.getSession().getAttribute(SESSION_NAME);
        if (oAuthSession != null) {
            return oAuthSession.doFinishLogin(request);
        }
         else {
            return new Failure("Your Jenkins session has expired. Please login again.");
        }
        
    }
    
    public static final class DescriptorImpl extends Descriptor<SecurityRealm> {
        public String getDisplayName() {
            return "Login with Google";
        }
        
    }
    
}


