package com.xpn.xwiki.web;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import javax.script.ScriptContext;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.component.annotation.Component;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.user.UserReference;
import org.xwiki.user.UserReferenceResolver;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.doc.XWikiLock;
public class EditAction extends XWikiAction {
    private static final Logger LOGGER = LoggerFactory.getLogger(EditAction.class);
    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;
    public EditAction() {
        this.waitForXWikiInitialization = false;
    }
    
    protected Class<? extends XWikiForm> getFormClass() {
        return EditForm.class;
    }
    
    public String render(XWikiContext context) throws XWikiException {
        try {
            XWikiDocument editedDocument = prepareEditedDocument(context);
            maybeLockDocument(editedDocument, context);
        }
         catch (XWikiException e) {
            if (e.getCode() == XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY) {
                context.put("exception", e);
                return "docalreadyexists";
            }
             else {
                throw e;
            }
            
        }
        
        context.put("display", "edit");
        return "edit";
    }
    
    protected XWikiDocument prepareEditedDocument(XWikiContext context) throws XWikiException {
        XWikiDocument editedDocument = getEditedDocument(context);
        EditForm editForm = (EditForm) context.getForm();
        readFromTemplate(editedDocument, editForm.getTemplate(), context);
        updateDocumentTitleAndContentFromRequest(editedDocument, context);
        editedDocument.readAddedUpdatedAndRemovedObjectsFromForm(editForm, context);
        if (editedDocument.isMetaDataDirty()) {
            UserReference userReference = this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());
            editedDocument.getAuthors().setEffectiveMetadataAuthor(userReference);
            editedDocument.getAuthors().setOriginalMetadataAuthor(userReference);
        }
        
        if (editedDocument.isContentDirty()) {
            UserReference userReference = this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());
            editedDocument.getAuthors().setContentAuthor(userReference);
        }
        
        if (editedDocument.isNew()) {
            editedDocument.setCreatorReference(context.getUserReference());
            editedDocument.setAuthorReference(context.getUserReference());
            editedDocument.setContentAuthorReference(context.getUserReference());
        }
        
        editedDocument.readTemporaryUploadedFiles(editForm);
        putDocumentOnContext(editedDocument, context);
        return editedDocument;
    }
    
    private XWikiDocument getEditedDocument(XWikiContext context) throws XWikiException {
        XWikiDocument doc = context.getDoc();
        boolean hasTranslation = doc != context.get("tdoc");
        doc = doc.clone();
        context.put("doc", doc);
        EditForm editForm = (EditForm) context.getForm();
        doc.readDocMetaFromForm(editForm, context);
        String language = context.getWiki().getLanguagePreference(context);
        if (doc.isNew() && doc.getDefaultLanguage().equals("")) {
            doc.setDefaultLanguage(language);
        }
        
        String languageToEdit = StringUtils.isEmpty(editForm.getLanguage()) ? language : editForm.getLanguage();
        if (languageToEdit == null || languageToEdit.equals("default")) {
            languageToEdit = "";
        }
        
        if (doc.isNew() || doc.getDefaultLanguage().equals(languageToEdit)) {
            languageToEdit = "";
        }
        
        if (!hasTranslation && StringUtils.isEmpty(editForm.getLanguage())) {
            languageToEdit = "";
        }
        
        XWikiDocument tdoc;
        if (languageToEdit.equals("")) {
            tdoc = doc;
            if (doc.isNew()) {
                doc.setDefaultLanguage(language);
                doc.setLanguage("");
            }
            
        }
         else if (!hasTranslation && context.getWiki().isMultiLingual(context)) {
            tdoc = new XWikiDocument(doc.getDocumentReference());
            tdoc.setLanguage(languageToEdit);
            tdoc.setDefaultLocale(doc.getDefaultLocale());
            tdoc.setTitle(doc.getTitle());
            tdoc.setContent(doc.getContent());
            tdoc.setSyntax(doc.getSyntax());
            tdoc.setAuthorReference(context.getUserReference());
            tdoc.setStore(doc.getStore());
        }
         else {
            tdoc = ((XWikiDocument) context.get("tdoc")).clone();
        }
        
        return tdoc;
    }
    
    private void updateDocumentTitleAndContentFromRequest(XWikiDocument document, XWikiContext context) throws XWikiException {
        boolean sectionEditingEnabled = context.getWiki().hasSectionEdit(context);
        int sectionNumber = sectionEditingEnabled ? NumberUtils.toInt(context.getRequest().getParameter("section")) : 0;
        getCurrentScriptContext().setAttribute("sectionNumber", sectionNumber, ScriptContext.ENGINE_SCOPE);
        EditForm editForm = (EditForm) context.getForm();
        if (editForm.getContent() != null) {
            document.setContent(editForm.getContent());
        }
         else if (sectionNumber > 0) {
            document.setContent(document.getContentOfSection(sectionNumber));
        }
        
        if (editForm.getTitle() != null) {
            document.setTitle(editForm.getTitle());
        }
         else if (sectionNumber > 0 && document.getSections().size() > 0) {
            String sectionTitle = document.getDocumentSection(1).getSectionTitle();
            if (StringUtils.isNotBlank(sectionTitle)) {
                String sectionPlainTitle = document.getRenderedContent(sectionTitle, document.getSyntax().toIdString(), Syntax.PLAIN_1_0.toIdString(), context);
                document.setTitle(localizePlainOrKey("core.editors.content.titleField.sectionEditingFormat", document.getRenderedTitle(Syntax.PLAIN_1_0, context), sectionNumber, sectionPlainTitle));
            }
            
        }
        
    }
    
    private void putDocumentOnContext(XWikiDocument document, XWikiContext context) {
        context.put("tdoc", document);
        context.put("cdoc", context.get("tdoc"));
    }
    
    private void maybeLockDocument(XWikiDocument document, XWikiContext context) {
        try {
            XWikiLock lock = document.getLock(context);
            EditForm editForm = (EditForm) context.getForm();
            if (lock == null || lock.getUserName().equals(context.getUser()) || editForm.isLockForce()) {
                document.setLock(context.getUser(), context);
            }
            
        }
         catch (Exception e) {
            LOGGER.error("Exception while setting up lock", e);
        }
        
    }
    
}


