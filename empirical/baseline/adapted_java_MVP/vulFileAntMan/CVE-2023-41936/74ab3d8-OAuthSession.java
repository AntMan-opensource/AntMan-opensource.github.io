package org.jenkinsci.plugins.googlelogin;
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.model.Failure;
import hudson.remoting.Base64;
import hudson.util.HttpResponses;
import org.kohsuke.stapler.HttpRedirect;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.StaplerRequest;
import java.io.IOException;
import java.io.Serializable;
import java.lang.IllegalArgumentException;
import java.nio.charset.StandardCharsets;
import java.util.UUID;
public abstract class OAuthSession implements Serializable {
    private static final long serialVersionUID = 1438835558745081350L;
    private final String uuid = Base64.encode(UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8)).substring(0,20);
    private final String from;
    private final String redirectUrl;
    private final String domain;
    public OAuthSession(String from, String redirectUrl, String domain) {
        this.from = from;
        this.redirectUrl = redirectUrl;
        this.domain = domain;
    }
    
    public HttpResponse doCommenceLogin(AuthorizationCodeFlow flow) throws IOException {
        AuthorizationCodeRequestUrl authorizationCodeRequestUrl = flow.newAuthorizationUrl().setState(uuid).setRedirectUri(redirectUrl);
        if (domain != null) {
            if (domain.contains(",")) {
                authorizationCodeRequestUrl.set("hd","*");
            }
             else {
                authorizationCodeRequestUrl.set("hd",domain);
            }
            
        }
        
        return new HttpRedirect(authorizationCodeRequestUrl.toString());
    }
    
    public HttpResponse doFinishLogin(StaplerRequest request) throws IOException {
        if (request.getParameter("state") == null) {
            return HttpResponses.redirectToContextRoot();
        }
        
        StringBuffer buf = request.getRequestURL();
        if (request.getQueryString() != null) {
            buf.append('?').append(request.getQueryString());
        }
        
        try {
            AuthorizationCodeResponseUrl responseUrl = new AuthorizationCodeResponseUrl(buf.toString());
            if (! uuid.equals(responseUrl.getState())) {
                return HttpResponses.error(401, "State is invalid");
            }
            
            String code = responseUrl.getCode();
            if (responseUrl.getError() != null) {
                return HttpResponses.error(401, "Error from provider: " + code);
            }
             else if (code == null) {
                return HttpResponses.error(404, "Missing authorization code");
            }
             else {
                return onSuccess(code);
            }
            
        }
         catch (IllegalArgumentException e) {
            throw new Failure("Failed to login. Cannot parse URL.");
        }
        
    }
    
    protected String getFrom() {
        return from;
    }
    
    protected abstract HttpResponse onSuccess(String authorizationCode) throws IOException;
}


