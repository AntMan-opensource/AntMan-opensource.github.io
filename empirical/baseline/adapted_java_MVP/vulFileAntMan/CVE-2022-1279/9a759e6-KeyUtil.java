package org.kopi.ebics.certificate;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.interfaces.RSAPublicKey;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.kopi.ebics.exception.EbicsException;
import org.kopi.ebics.utils.Utils;
public class KeyUtil {
    private KeyUtil() {
    }
    
  public static KeyPair makeKeyPair(int keyLen) throws NoSuchAlgorithmException {
    KeyPairGenerator 		keyGen;
    keyGen = KeyPairGenerator.getInstance("RSA");
    keyGen.initialize(keyLen, Utils.secureRandom);
    return keyGen.generateKeyPair();
  }
  
  public static String generatePassword() {
      String pwd = Base64.encodeBase64String(Utils.secureRandom.generateSeed(5));
      return pwd.substring(0, pwd.length() - 2);
  }
  
  public static byte[] getKeyDigest(RSAPublicKey publicKey) throws EbicsException {
    String			modulus;
    String			exponent;
    String			hash;
    byte[]			digest;
    exponent = Hex.encodeHexString(publicKey.getPublicExponent().toByteArray());
    modulus =  Hex.encodeHexString(removeFirstByte(publicKey.getModulus().toByteArray()));
    hash = exponent + " " + modulus;
    if (hash.charAt(0) == '0') {
      hash = hash.substring(1);
    }
    
    try {
      digest = MessageDigest.getInstance("SHA-256", "BC").digest(hash.getBytes("US-ASCII"));
    }
     catch (GeneralSecurityException e) {
      throw new EbicsException(e.getMessage());
    }
     catch (UnsupportedEncodingException e) {
      throw new EbicsException(e.getMessage());
    }
    
    return new String(Hex.encodeHex(digest, false)).getBytes();
  }
  
  private static byte[] removeFirstByte(byte[] byteArray) {
      byte[] b = new byte[byteArray.length - 1];
      System.arraycopy(byteArray, 1, b, 0, b.length);
      return b;
  }
  
}


