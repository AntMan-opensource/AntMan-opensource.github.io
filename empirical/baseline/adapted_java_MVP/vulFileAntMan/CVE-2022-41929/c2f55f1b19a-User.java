package com.xpn.xwiki.api;
import java.text.MessageFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.model.EntityType;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.classes.PasswordClass;
import com.xpn.xwiki.user.api.XWikiUser;
import com.xpn.xwiki.util.Programming;
import com.xpn.xwiki.web.Utils;
public class User extends Api {
    protected static final Logger LOGGER = LoggerFactory.getLogger(User.class);
    private static final EntityReference USERCLASS_REFERENCE = new EntityReference("XWikiUsers", EntityType.DOCUMENT, new EntityReference("XWiki", EntityType.SPACE));
    private static final DocumentReferenceResolver<String> REFERENCE_RESOLVER = Utils.getComponent( DocumentReferenceResolver.TYPE_STRING, "currentmixed");
    private XWikiUser user;
    public User(XWikiUser user, XWikiContext context) {
        super(context);
        this.user = user;
    }
    
    public XWikiUser getUser() {
        if (hasProgrammingRights()) {
            return this.user;
        }
        
        return null;
    }
    
    public void setDisabledStatus(boolean disabledStatus) {
        this.user.setDisabled(disabledStatus, getXWikiContext());
    }
    
    public boolean isDisabled() {
        return this.user.isDisabled(getXWikiContext());
    }
    
    public boolean isUserInGroup(String groupName) {
        boolean result = false;
        try {
            if (this.user == null) {
                LOGGER.warn("User considered not part of group [{}] since user is null", groupName);
            }
             else {
                result = this.user.isUserInGroup(groupName, getXWikiContext());
            }
            
        }
         catch (Exception ex) {
            LOGGER.warn(new MessageFormat("Unhandled exception while checking if user {0}" + " belongs to group {1}").format(new java.lang.Object[] { this.user, groupName }), ex);
        }
        
        return result;
    }
    
    protected boolean isMain() {
        return this.user.isMain();
    }
    
    public String getEmail() {
        XWikiDocument userDoc;
        try {
            userDoc = getXWikiContext().getWiki().getDocument(this.user.getUser(), getXWikiContext());
            BaseObject obj = userDoc.getObject("XWiki.XWikiUsers");
            return obj.getStringValue("email");
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public boolean checkPassword(String password) throws XWikiException {
        EntityReference userReference = REFERENCE_RESOLVER.resolve(this.user.getUser());
        EntityReference docReference = getXWikiContext().getDoc().getDocumentReference();
        if (userReference.equals(getXWikiContext().getUserReference()) && userReference.equals(docReference)) {
            try {
                boolean result = false;
                XWikiDocument userDoc = getXWikiContext().getWiki().getDocument(userReference, getXWikiContext());
                BaseObject obj = userDoc.getXObject(USERCLASS_REFERENCE);
                if (obj != null) {
                    final String stored = obj.getStringValue("password");
                    result = new PasswordClass().getEquivalentPassword(stored, password).equals(stored);
                }
                
                return result;
            }
             catch (Throwable e) {
                LOGGER.error("Failed to check password", e);
                return false;
            }
            
        }
         else {
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "You cannot use this method for checking another user password.", null);
        }
        
    }
    
}


