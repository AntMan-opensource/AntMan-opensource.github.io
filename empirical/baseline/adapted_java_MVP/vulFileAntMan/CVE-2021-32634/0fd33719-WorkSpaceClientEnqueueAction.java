package emissary.server.mvc.internal;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import emissary.core.Namespace;
import emissary.directory.KeyManipulator;
import emissary.pickup.IPickUpSpace;
import emissary.pickup.WorkBundle;
import emissary.server.mvc.adapters.WorkSpaceAdapter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class WorkSpaceClientEnqueueAction {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    public Response workspaceClientEnqueue(@FormParam(WorkSpaceAdapter.CLIENT_NAME) String clientName, @FormParam(WorkSpaceAdapter.WORK_BUNDLE_OBJ) String workBundleString) {
        logger.debug("TPWorker incoming execute! check prio={}", Thread.currentThread().getPriority());
        final boolean success;
        try {
            final String nsName = KeyManipulator.getServiceLocation(clientName);
            final IPickUpSpace place = (IPickUpSpace) Namespace.lookup(nsName);
            if (place == null) {
                throw new IllegalArgumentException("No client place found using name " + clientName);
            }
            
            final ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(workBundleString.getBytes("8859_1")));
            WorkBundle paths = (WorkBundle) ois.readObject();
            success = place.enque(paths);
        }
         catch (Exception e) {
            logger.warn("WorkSpaceClientEnqueWorker exception", e);
            return Response.serverError().entity("WorkSpaceClientEnqueWorker exception:\n" + e.getMessage()).build();
        }
        
        if (success) {
            return Response.ok().entity("Successful add to the PickUpPlaceClient queue").build();
        }
         else {
            return Response.serverError().entity("WorkSpaceClientEnqueWorker failed, queue full").build();
        }
        
    }
    
}


