package com.compuware.jenkins.scm;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import com.compuware.jenkins.common.configuration.CpwrGlobalConfiguration;
import com.compuware.jenkins.common.configuration.HostConnection;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.init.InitMilestone;
import hudson.init.Initializer;
import hudson.model.Item;
import hudson.model.Items;
import hudson.model.Job;
import hudson.model.TaskListener;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.ListBoxModel.Option;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
public class IspwConfiguration extends AbstractIspwConfiguration {
	private static final String TRUE = "true"; 
	private static final String FALSE = "false"; 
	private String m_serverStream;
	private String m_serverApplication;
	private String m_serverLevel;
	private String m_levelOption;
	private String m_componentType = StringUtils.EMPTY;
	private String m_folderName = StringUtils.EMPTY;
	private String m_filterFiles = FALSE;
	private String m_filterFolders = FALSE;
	private boolean ispwDownloadAll = false;
	private  boolean ispwDownloadIncl = DescriptorImpl.ispwDownloadIncl;
	private boolean ispwDownloadWithCompileOnly = DescriptorImpl.ispwDownloadWithCompileOnly;
	private String m_targetFolder;
	public IspwConfiguration(String connectionId, String credentialsId, String serverConfig, String serverStream, String serverApplication, String serverLevel, String levelOption, String componentType, String folderName, boolean ispwDownloadAll, String targetFolder, boolean ispwDownloadIncl, boolean ispwDownloadWithCompileOnly) {
		super(connectionId, credentialsId, serverConfig);
		m_serverStream = getTrimmedValue(serverStream);
		m_serverApplication = getTrimmedValue(serverApplication);
		m_serverLevel = getTrimmedValue(serverLevel);
		m_levelOption = getTrimmedValue(levelOption);
		m_targetFolder = getTrimmedValue(targetFolder);
		if (componentType != null && !componentType.isEmpty()){
			m_filterFiles = TRUE;
			m_componentType = getTrimmedValue(componentType);
		}
		
		if (folderName != null && !folderName.isEmpty()){
			m_filterFolders = TRUE;
			m_folderName = getTrimmedValue(folderName);
		}
		
		this.ispwDownloadAll = ispwDownloadAll;
		this.ispwDownloadIncl = ispwDownloadIncl;
		this.ispwDownloadWithCompileOnly = ispwDownloadWithCompileOnly;
	}
	
	 public String getServerStream() {
		return m_serverStream;
	}
	
	 public String getServerApplication() {
		return m_serverApplication;
	}
	
	 public String getServerLevel() {
		return m_serverLevel;
	}
	
	 public String getLevelOption() {
		return m_levelOption;
	}
	
	 public String getComponentType() {
		return m_componentType;
	}
	
	 public String getFolderName() {
		return m_folderName;
	}
	
	 public String getFilterFiles() {
		return m_filterFiles.toLowerCase();
	}
	
	 public String getFilterFolders() {
		return m_filterFolders.toLowerCase();
	}
	
	 public boolean getIspwDownloadAll() {
		return ispwDownloadAll;
	}
	
	 public String getTargetFolder() {
		return m_targetFolder;
	}
	
	 public boolean getIspwDownloadIncl()  {
		return ispwDownloadIncl;
	}
	
	 public boolean getIspwDownloadWithCompileOnly() {
		return ispwDownloadWithCompileOnly;
	}
	
	 public void validateParameters(Launcher launcher, TaskListener listener, Item project) throws AbortException {
		CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
		validateServerParameters(globalConfig, launcher, listener, project);
		validateFilterParameters(launcher, listener, project);
		validateCliLocation(globalConfig, launcher, listener);
	}
	
	public void validateFilterParameters(Launcher launcher, TaskListener listener, Item project) {
		if (!getServerStream().isEmpty()){
			listener.getLogger().println(Messages.ispwServerStream() + " = " + getServerStream()); 
		}
		
		else{
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwServerStream()));
		}
		
		if (!getServerApplication().isEmpty()){
			listener.getLogger().println(Messages.ispwServerApp() + " = " + getServerApplication()); 
		}
		
		else{
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwServerApp()));
		}
		
		if (!getServerLevel().isEmpty()){
			listener.getLogger().println(Messages.ispwServerLevel() + " = " + getServerLevel()); 
		}
		
		else{
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwServerLevel()));
		}
		
		if (!getLevelOption().isEmpty()){
			listener.getLogger().println(Messages.ispwLevelOption() + " = " + getLevelOption()); 
		}
		
		else{
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwLevelOption()));
		}
		
		if (!getFolderName().isEmpty()){
			listener.getLogger().println(Messages.ispwFolderName() + " = " + getFolderName()); 
		}
		
		else if ("true".equals(getFilterFolders()) && getFolderName().isEmpty()) {
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwFolderName()));
		}
		
		if (!getComponentType().isEmpty()){
			listener.getLogger().println(Messages.ispwComponentType() + " = " + getComponentType()); 
		}
		
		else if ("true".equals(getFilterFiles()) && getComponentType().isEmpty()) {
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwComponentType()));
		}
		
	}
	
	public static class DescriptorImpl extends AbstractConfigurationImpl<IspwConfiguration> {
		public static final boolean ispwDownloadIncl = false;
		public static final boolean ispwDownloadWithCompileOnly = false;
		 public DescriptorImpl() {
			super(IspwConfiguration.class, null);
			load();
		}
		
		public boolean isApplicable(Job project) {
			return true;
		}
		
		public String getDisplayName() {
			return Messages.displayNameIspwRepository();
		}
		
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
			save();
			return super.configure(req, formData);
		}
		
		 public FormValidation doCheckConnectionId(@QueryParameter String connectionId) {
			String tempValue = StringUtils.trimToEmpty(connectionId);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkHostConnectionError());
			}
			
			return FormValidation.ok();
		}
		
		 public ListBoxModel doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project) {
			CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
			HostConnection[] hostConnections = globalConfig.getHostConnections();
			ListBoxModel model = new ListBoxModel();
			model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
			for (HostConnection connection : hostConnections){
				boolean isSelected = false;
				if (connectionId != null){
					isSelected = connectionId.matches(connection.getConnectionId());
				}
				
				model.add(new Option(connection.getDescription() + " [" + connection.getHostPort() + ']',  connection.getConnectionId(), isSelected));
			}
			
			return model;
		}
		
		 public FormValidation doCheckCredentialsId(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkLoginCredentialsError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckServerStream(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkIspwServerStreamError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckServerApplication(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkIspwServerAppError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckServerLevel(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkIspwServerLevelError());
			}
			
			return FormValidation.ok();
		}
		
		 public ListBoxModel doFillLevelOptionItems() {
			ListBoxModel levelOptionModel = new ListBoxModel();
			levelOptionModel.add(Messages.ispwDropLevelOnly(), "0"); 
			levelOptionModel.add(Messages.ispwDropLevelAbove(), "1"); 
			return levelOptionModel;
		}
		
	}
	
	 @Initializer(before = InitMilestone.PLUGINS_STARTED)
	public static void xStreamCompatibility() {
		Items.XSTREAM2.aliasField("ispwDownloadIncl", IspwConfiguration.class, "ispwDownloadIncl"); 
	}
	
}


