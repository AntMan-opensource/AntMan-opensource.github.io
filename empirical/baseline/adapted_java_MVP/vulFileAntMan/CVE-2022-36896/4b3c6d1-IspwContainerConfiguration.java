package com.compuware.jenkins.scm;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import com.compuware.jenkins.common.configuration.CpwrGlobalConfiguration;
import com.compuware.jenkins.common.configuration.HostConnection;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.init.InitMilestone;
import hudson.init.Initializer;
import hudson.model.Item;
import hudson.model.Items;
import hudson.model.Job;
import hudson.model.TaskListener;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.ListBoxModel.Option;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
public class IspwContainerConfiguration extends AbstractIspwConfiguration {
	private String ispwContainerName;
	private String ispwContainerType;
	private String ispwServerLevel = StringUtils.EMPTY;
	private String ispwComponentType = StringUtils.EMPTY;
	private boolean ispwDownloadAll = false;
	private boolean ispwDownloadIncl = DescriptorImpl.ispwDownloadIncl;
	private String ispwTargetFolder;
	public IspwContainerConfiguration(String connectionId, String credentialsId, String serverConfig, String containerName, String containerType, String serverLevel, String componentType,  boolean ispwDownloadAll, String targetFolder, boolean ispwDownloadIncl) {
		super(connectionId, credentialsId, serverConfig);
		ispwContainerType = getTrimmedValue(containerType);
		ispwContainerName = getTrimmedValue(containerName);
		ispwServerLevel = getTrimmedValue(serverLevel);
		ispwComponentType = getTrimmedValue(componentType);
		ispwTargetFolder = getTrimmedValue(targetFolder);
		this.ispwDownloadAll = ispwDownloadAll;
		this.ispwDownloadIncl = ispwDownloadIncl;
	}
	
	 public String getContainerName() {
		return ispwContainerName;
	}
	
	 public String getContainerType() {
		return ispwContainerType;
	}
	
	 public String getServerLevel() {
		return ispwServerLevel;
	}
	
	 public String getComponentType() {
		return ispwComponentType;
	}
	
	 public boolean getIspwDownloadAll() {
		return ispwDownloadAll;
	}
	
	 public String getTargetFolder() {
		return ispwTargetFolder;
	}
	
	 public boolean getIspwDownloadIncl()  {
		return ispwDownloadIncl;
	}
	
	 public void validateParameters(Launcher launcher, TaskListener listener, Item project) throws AbortException {
		CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
		validateServerParameters(globalConfig, launcher, listener, project);
		validateFilterParameters(launcher, listener, project);
		validateCliLocation(globalConfig, launcher, listener);
	}
	
	 public void validateFilterParameters(Launcher launcher, TaskListener listener, Item project) {
		if (!getContainerName().isEmpty()){
			listener.getLogger().println(Messages.ispwContainerName() + " = " + getContainerName()); 
		}
		
		else{
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwContainerName()));
		}
		
		if (!getContainerType().isEmpty()){
			listener.getLogger().println(Messages.ispwContainerType() + " = " + getContainerType()); 
		}
		
		else{
			throw new IllegalArgumentException(Messages.checkoutMissingParameterError(Messages.ispwContainerType()));
		}
		
	}
	
	public static class DescriptorImpl extends AbstractConfigurationImpl<IspwContainerConfiguration> {
		public static final boolean ispwDownloadIncl = true;
		 public DescriptorImpl() {
			super(IspwContainerConfiguration.class, null);
			load();
		}
		
		public boolean isApplicable(Job project) {
			return true;
		}
		
		public String getDisplayName() {
			return Messages.displayNameIspwContainer();
		}
		
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
			save();
			return super.configure(req, formData);
		}
		
		 public FormValidation doCheckConnectionId(@QueryParameter String connectionId) {
			String tempValue = StringUtils.trimToEmpty(connectionId);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkHostConnectionError());
			}
			
			return FormValidation.ok();
		}
		
		 public ListBoxModel doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project) {
			CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
			HostConnection[] hostConnections = globalConfig.getHostConnections();
			ListBoxModel model = new ListBoxModel();
			model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
			for (HostConnection connection : hostConnections){
				boolean isSelected = false;
				if (connectionId != null){
					isSelected = connectionId.matches(connection.getConnectionId());
				}
				
				model.add(new Option(connection.getDescription() + " [" + connection.getHostPort() + ']',  connection.getConnectionId(), isSelected));
			}
			
			return model;
		}
		
		 public FormValidation doCheckCredentialsId(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkLoginCredentialsError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckContainerName(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkIspwContainerNameError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckContainerType(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkIspwContainerTypeError());
			}
			
			return FormValidation.ok();
		}
		
		 public ListBoxModel doFillContainerTypeItems() {
			ListBoxModel containerTypeModel = new ListBoxModel();
			containerTypeModel.add(Messages.ispwAssignment(), "0"); 
			containerTypeModel.add(Messages.ispwRelease(), "1"); 
			containerTypeModel.add(Messages.ispwSet(), "2"); 
			return containerTypeModel;
		}
		
	}
	
	 @Initializer(before = InitMilestone.PLUGINS_STARTED)
	public static void xStreamCompatibility() {
		Items.XSTREAM2.aliasField("ispwDownloadIncl", IspwContainerConfiguration.class, "ispwDownloadIncl"); 
	}
	
}


