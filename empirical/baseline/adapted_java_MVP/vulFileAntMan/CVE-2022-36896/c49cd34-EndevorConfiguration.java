package com.compuware.jenkins.scm;
import java.io.File;
import java.io.IOException;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import com.compuware.jenkins.common.configuration.CpwrGlobalConfiguration;
import com.compuware.jenkins.common.configuration.HostConnection;
import hudson.AbortException;
import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.model.Item;
import hudson.model.Job;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.scm.SCMRevisionState;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.ListBoxModel.Option;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
public class EndevorConfiguration extends CpwrScmConfiguration {
	public EndevorConfiguration(String connectionId, String filterPattern, String fileExtension, String credentialsId, String targetFolder) {
		super(connectionId, filterPattern, fileExtension, credentialsId, targetFolder);
	}
	
	public void checkout(Run<?, ?> build, Launcher launcher, FilePath workspaceFilePath, TaskListener listener, File changelogFile, SCMRevisionState baseline) throws IOException, InterruptedException {
		boolean rtnValue = false;
		try {
			validateParameters(launcher, listener, build.getParent());
			EndevorDownloader downloader = new EndevorDownloader(this);
			rtnValue = downloader.getSource(build, launcher, workspaceFilePath, listener, changelogFile);
			if (!rtnValue){
				throw new AbortException();
			}
			
		}
		
		catch (IllegalArgumentException e) {
			listener.getLogger().println(e.getMessage());
			throw new AbortException();
		}
		
	}
	
	public boolean supportsPolling() {
		return false;
	}
	
	public SCMRevisionState calcRevisionsFromBuild(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {
    	return null;
    }
        
	public EndevorDescriptorImpl getDescriptor() {
		return (EndevorDescriptorImpl) super.getDescriptor();
	}
	
	public static class EndevorDescriptorImpl extends AbstractConfigurationImpl<EndevorConfiguration> {
		 public EndevorDescriptorImpl() {
			super(EndevorConfiguration.class, null);
			load();
		}
		
		public boolean isApplicable(Job project) {
            return true;
        }
        
		public String getDisplayName() {
			return Messages.displayNameEndevor();
		}
		
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
			save();
			return super.configure(req, formData);
		}
		
		 public FormValidation doCheckFilterPattern(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkFilterPatternEmptyError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckConnectionId(@QueryParameter String connectionId) {
			String tempValue = StringUtils.trimToEmpty(connectionId);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkHostConnectionError());
			}
			
			return FormValidation.ok();
		}
		
		 public ListBoxModel doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project) {
			CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
			HostConnection[] hostConnections = globalConfig.getHostConnections();
			ListBoxModel model = new ListBoxModel();
			model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
			for (HostConnection connection : hostConnections){
				boolean isSelected = false;
				if (connectionId != null){
					isSelected = connectionId.matches(connection.getConnectionId());
				}
				
				model.add(new Option(connection.getDescription() + " [" + connection.getHostPort() + ']',  connection.getConnectionId(), isSelected));
			}
			
			return model;
		}
		
		 public FormValidation doCheckFileExtension(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkFileExtensionEmptyError());
			}
			
			else if (!StringUtils.isAlphanumeric(tempValue)){
				return FormValidation.error(Messages.checkFileExtensionFormatError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckCredentialsId(@QueryParameter String value) {
			String tempValue = StringUtils.trimToEmpty(value);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkLoginCredentialsError());
			}
			
			return FormValidation.ok();
		}
		
	}
	
}


