package com.compuware.jenkins.scm;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.QueryParameter;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.common.StandardCredentials;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.compuware.jenkins.common.configuration.CpwrGlobalConfiguration;
import com.compuware.jenkins.common.configuration.HostConnection;
import hudson.AbortException;
import hudson.Util;
import hudson.init.InitMilestone;
import hudson.init.Initializer;
import hudson.model.AbstractProject;
import hudson.model.Item;
import hudson.scm.RepositoryBrowser;
import hudson.scm.SCM;
import hudson.scm.SCMDescriptor;
import hudson.security.ACL;
import hudson.util.ListBoxModel;
import hudson.util.ListBoxModel.Option;
import jenkins.model.Jenkins;
public abstract class AbstractConfiguration extends SCM {
	private static final Logger LOGGER = Logger.getLogger("hudson.AbstractConfiguration"); 
	protected String m_connectionId;
	 protected transient @Deprecated String m_hostPort;
	protected transient @Deprecated String m_codePage;
	protected transient boolean m_isMigrated = false;
	private static final Object lock = new Object();
	 public abstract static class AbstractConfigurationImpl<T extends SCM> extends SCMDescriptor<T> {
		 protected AbstractConfigurationImpl(Class<T> clazz, Class<? extends RepositoryBrowser<?>> repositoryBrowser) {
			super(clazz, repositoryBrowser);
		}
		
		 protected AbstractConfigurationImpl(Class<? extends RepositoryBrowser<?>> repositoryBrowser) {
			super(repositoryBrowser);
		}
		
		 public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project) {
			List<StandardCredentials> creds = CredentialsProvider.lookupCredentials(StandardCredentials.class, project, ACL.SYSTEM, Collections.<DomainRequirement>emptyList());
			ListBoxModel model = new ListBoxModel();
			model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
			for (StandardCredentials c : creds) {
				boolean isSelected = false;
				if (credentialsId != null) {
					isSelected = credentialsId.matches(c.getId());
				}
				
				String description = Util.fixEmptyAndTrim(c.getDescription());
				try {
					model.add(new Option(CpwrGlobalConfiguration.get().getCredentialsUser(c) + (description != null ? (" (" + description + ')') : StringUtils.EMPTY), c.getId(), isSelected)); 
				}
				 catch (AbortException e) {
					LOGGER.log(Level.WARNING, e.getMessage());
				}
				
			}
			
			return model;
		}
		
	}
	
	 protected boolean isMigrated() {
		return m_isMigrated;
	}
	
	 protected Object readResolve() {
		 if (m_hostPort != null && m_codePage != null){
			migrateConnectionInfo();
		}
		
		return this;
	}
	
	 private void migrateConnectionInfo() {
		synchronized (lock) {
			CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
			HostConnection connection = globalConfig.getHostConnection(m_hostPort, m_codePage);
			if (connection == null){
				String description = m_hostPort + " " + m_codePage; 
				connection = new HostConnection(description, m_hostPort, null, m_codePage, null, null, null);
				globalConfig.addHostConnection(connection);
			}
			
			else{
				 }
				 
			m_connectionId = connection.getConnectionId();
			m_isMigrated = true;
		}
		
	}
	
	@Initializer(before = InitMilestone.COMPLETED, after = InitMilestone.JOB_LOADED)
	public static void jobLoaded() throws IOException {
		LOGGER.fine("Initialization milestone: All jobs have been loaded"); 
		Jenkins jenkins = Jenkins.getInstance();
		for (AbstractProject<?, ?> project : jenkins.getAllItems(AbstractProject.class)){
			try {
				SCM scmConfig = project.getScm();
				if (scmConfig instanceof AbstractConfiguration && ((AbstractConfiguration) scmConfig).isMigrated()){
					project.save();
					LOGGER.info(String.format( "Project %s has been migrated.",  project.getFullName()));
				}
				
			}
			
			catch (IOException e) {
				LOGGER.log(Level.SEVERE, String.format("Failed to upgrade job %s", project.getFullName()), e); 
			}
			
		}
		
	}
	
}


