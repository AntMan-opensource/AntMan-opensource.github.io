package org.pf4j.util;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class Unzip {
    private static final Logger log = LoggerFactory.getLogger(Unzip.class);
    private File destination;
    private File source;
    public Unzip() {
    }
    
    public Unzip(File source, File destination) {
        this.source = source;
        this.destination = destination;
    }
    
    public void setSource(File source) {
        this.source = source;
    }
    
    public void setDestination(File destination) {
        this.destination = destination;
    }
    
    public void extract() throws IOException {
        log.debug("Extract content of '{}' to '{}'", source, destination);
        if (destination.exists() && destination.isDirectory()) {
            FileUtils.delete(destination.toPath());
        }
        
        try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {
            ZipEntry zipEntry;
            while ((zipEntry = zipInputStream.getNextEntry()) != null) {
                File file = new File(destination, zipEntry.getName());
                File dir = new File(file.getParent());
                mkdirsOrThrow(dir);
                if (zipEntry.isDirectory()) {
                    mkdirsOrThrow(file);
                }
                 else {
                    byte[] buffer = new byte[1024];
                    int length;
                    try (FileOutputStream fos = new FileOutputStream(file)) {
                        while ((length = zipInputStream.read(buffer)) >= 0) {
                            fos.write(buffer, 0, length);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    private static void mkdirsOrThrow(File dir) throws IOException {
        if (!dir.exists() && !dir.mkdirs()) {
            throw new IOException("Failed to create directory " + dir);
        }
        
    }
    
}


