package org.eclipse.jetty.deploy.providers;
import java.io.File;
import java.io.FilenameFilter;
import java.util.Locale;
import org.eclipse.jetty.deploy.App;
import org.eclipse.jetty.deploy.ConfigurationManager;
import org.eclipse.jetty.deploy.util.FileID;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.util.URIUtil;
import org.eclipse.jetty.util.annotation.ManagedAttribute;
import org.eclipse.jetty.util.annotation.ManagedObject;
import org.eclipse.jetty.util.resource.Resource;
import org.eclipse.jetty.webapp.WebAppContext;
import org.eclipse.jetty.xml.XmlConfiguration;
@ManagedObject("Provider for start-up deployement of webapps based on presence in directory")
public class WebAppProvider extends ScanningAppProvider {
    private boolean _extractWars = false;
    private boolean _parentLoaderPriority = false;
    private ConfigurationManager _configurationManager;
    private String _defaultsDescriptor;
    private File _tempDirectory;
    private String[] _configurationClasses;
    public class Filter implements FilenameFilter {
        public boolean accept(File dir, String name) {
            if (!dir.exists()){
                return false;
            }
            
            String lowername = name.toLowerCase(Locale.ENGLISH);
            File file = new File(dir, name);
            Resource r = Resource.newResource(file);
            if (getMonitoredResources().contains(r) && r.isDirectory()){
                return false;
            }
            
            if (lowername.startsWith(".")){
                return false;
}
            if (file.isDirectory()){
                if (lowername.endsWith(".d")){
                    return false;
}
                if (exists(name + ".war") || exists(name + ".WAR")){
                    return false;
}
                if (exists(name + ".xml") || exists(name + ".XML")){
                    return false;
}
                return !"cvs".equals(lowername) && !"cvsroot".equals(lowername); 
            }
            
            if (lowername.endsWith(".war")){
                return true;
            }
            
            return lowername.endsWith(".xml");
        }
        
    }
    
    public WebAppProvider() {
        super();
        setFilenameFilter(new Filter());
        setScanInterval(0);
    }
    
    @ManagedAttribute("extract war files")
    public boolean isExtractWars() {
        return _extractWars;
    }
    
    public void setExtractWars(boolean extractWars) {
        _extractWars = extractWars;
    }
    
    @ManagedAttribute("parent classloader has priority")
    public boolean isParentLoaderPriority() {
        return _parentLoaderPriority;
    }
    
    public void setParentLoaderPriority(boolean parentLoaderPriority) {
        _parentLoaderPriority = parentLoaderPriority;
    }
    
    @ManagedAttribute("default descriptor for webapps")
    public String getDefaultsDescriptor() {
        return _defaultsDescriptor;
    }
    
    public void setDefaultsDescriptor(String defaultsDescriptor) {
        _defaultsDescriptor = defaultsDescriptor;
    }
    
    public ConfigurationManager getConfigurationManager() {
        return _configurationManager;
    }
    
    public void setConfigurationManager(ConfigurationManager configurationManager) {
        _configurationManager = configurationManager;
    }
    
    public void setConfigurationClasses(String[] configurations) {
        _configurationClasses = configurations == null ? null : configurations.clone();
    }
    
    @ManagedAttribute("configuration classes for webapps to be processed through")
    public String[] getConfigurationClasses() {
        return _configurationClasses;
    }
    
    public void setTempDir(File directory) {
        _tempDirectory = directory;
    }
    
    @ManagedAttribute("temp directory for use, null if no user set temp directory")
    public File getTempDir() {
        return _tempDirectory;
    }
    
    protected void initializeWebAppContextDefaults(WebAppContext webapp) {
        if (_defaultsDescriptor != null){
            webapp.setDefaultsDescriptor(_defaultsDescriptor);
}
        webapp.setExtractWAR(_extractWars);
        webapp.setParentLoaderPriority(_parentLoaderPriority);
        if (_configurationClasses != null){
            webapp.setConfigurationClasses(_configurationClasses);
}
        if (_tempDirectory != null){
            webapp.setAttribute(WebAppContext.BASETEMPDIR, _tempDirectory);
        }
        
    }
    
    public ContextHandler createContextHandler(final App app) throws Exception {
        Resource resource = Resource.newResource(app.getOriginId());
        File file = resource.getFile();
        if (!resource.exists()){
            throw new IllegalStateException("App resource does not exist " + resource);
}
        String context = file.getName();
        if (resource.exists() && FileID.isXmlFile(file)){
            XmlConfiguration xmlc = new XmlConfiguration(resource.getURI().toURL()) {
                public void initializeDefaults(Object context) {
                    super.initializeDefaults(context);
                    if (context instanceof WebAppContext){
                        WebAppContext webapp = (WebAppContext)context;
                        initializeWebAppContextDefaults(webapp);
                    }
                    
                }
                
            };
            getDeploymentManager().scope(xmlc, resource);
            if (getConfigurationManager() != null){
                xmlc.getProperties().putAll(getConfigurationManager().getProperties());
}
            return (ContextHandler)xmlc.configure();
        }
        
        else if (file.isDirectory()){
        }
        
        else if (FileID.isWebArchiveFile(file)){
            context = context.substring(0, context.length() - 4);
        }
        
        else{
            throw new IllegalStateException("unable to create ContextHandler for " + app);
        }
        
        if (context.endsWith("/") && context.length() > 0){
            context = context.substring(0, context.length() - 1);
        }
        
        WebAppContext webAppContext = new WebAppContext();
        webAppContext.setDisplayName(context);
        if (context.equalsIgnoreCase("root")){
            context = URIUtil.SLASH;
        }
        
        else if (context.toLowerCase(Locale.ENGLISH).startsWith("root-")){
            int dash = context.toLowerCase(Locale.ENGLISH).indexOf('-');
            String virtual = context.substring(dash + 1);
            webAppContext.setVirtualHosts(new String[]{virtual});
            context = URIUtil.SLASH;
        }
        
        if (context.charAt(0) != '/'){
            context = "/" + context;
        }
        
        webAppContext.setContextPath(context);
        webAppContext.setWar(file.getAbsolutePath());
        initializeWebAppContextDefaults(webAppContext);
        return webAppContext;
    }
    
    protected void fileChanged(String filename) throws Exception {
        File file = new File(filename);
        if (!file.exists()){
            return;
}
        File parent = file.getParentFile();
        if (file.isDirectory()){
            if (exists(file.getName() + ".xml") || exists(file.getName() + ".XML")){
                return; 
}
            if (exists(file.getName() + ".war") || exists(file.getName() + ".WAR")){
                return; 
}
            super.fileChanged(filename);
            return;
        }
        
        String lowname = file.getName().toLowerCase(Locale.ENGLISH);
        if (lowname.endsWith(".war")){
            String name = file.getName();
            String base = name.substring(0, name.length() - 4);
            String xmlname = base + ".xml";
            if (exists(xmlname)){
                File xml = new File(parent, xmlname);
                super.fileChanged(xml.getCanonicalPath());
                return;
            }
            
            xmlname = base + ".XML";
            if (exists(xmlname)){
                File xml = new File(parent, xmlname);
                super.fileChanged(xml.getCanonicalPath());
                return;
            }
            
            super.fileChanged(filename);
            return;
        }
        
        if (lowname.endsWith(".xml")){
            super.fileChanged(filename);
}
    }
    
    protected void fileAdded(String filename) throws Exception {
        File file = new File(filename);
        if (!file.exists()){
            return;
}
        if (file.isDirectory()){
            if (exists(file.getName() + ".xml") || exists(file.getName() + ".XML")){
                return; 
}
            if (exists(file.getName() + ".war") || exists(file.getName() + ".WAR")){
                return; 
}
            super.fileAdded(filename);
            return;
        }
        
        String lowname = file.getName().toLowerCase(Locale.ENGLISH);
        if (lowname.endsWith(".war")){
            String name = file.getName();
            String base = name.substring(0, name.length() - 4);
            if (exists(base + ".xml") || exists(base + ".XML")){
                return; 
}
            super.fileAdded(filename);
            return;
        }
        
        if (lowname.endsWith(".xml")){
            super.fileAdded(filename);
}
    }
    
    protected void fileRemoved(String filename) throws Exception {
        File file = new File(filename);
        String lowname = file.getName().toLowerCase(Locale.ENGLISH);
        if (lowname.endsWith(".war")){
            String name = file.getName();
            String base = name.substring(0, name.length() - 4);
            if (exists(base + ".xml") || exists(base + ".XML")){
                return; 
}
            super.fileRemoved(filename);
            return;
        }
        
        if (lowname.endsWith(".xml")){
            super.fileRemoved(filename);
            return;
        }
        
        if (exists(file.getName() + ".xml") || exists(file.getName() + ".XML")){
            return; 
}
        if (exists(file.getName() + ".war") || exists(file.getName() + ".WAR")){
            return; 
}
        super.fileRemoved(filename);
    }
    
}


