package org.xwiki.skinx.internal;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.security.authorization.ContextualAuthorizationManager;
import org.xwiki.security.authorization.Right;
import org.xwiki.url.filesystem.FilesystemExportContext;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.internal.model.LegacySpaceResolver;
import com.xpn.xwiki.web.ExportURLFactoryActionHandler;
import com.xpn.xwiki.web.sx.Extension;
import com.xpn.xwiki.web.sx.SxDocumentSource;
import com.xpn.xwiki.web.sx.SxResourceSource;
import com.xpn.xwiki.web.sx.SxSource;
public abstract class AbstractSxExportURLFactoryActionHandler implements ExportURLFactoryActionHandler {
    private static final String JAR_RESOURCE_REQUEST_PARAMETER = "resource";
    private static final char URL_PATH_SEPARATOR = '/';
    private LegacySpaceResolver legacySpaceResolve;
    private ContextualAuthorizationManager authorizationManager;
    protected abstract String getSxPrefix();
    protected abstract String getFileSuffix();
    public abstract Extension getExtensionType();
    public URL createURL(String spaces, String name, String queryString, String anchor, String wikiId, XWikiContext context, FilesystemExportContext exportContext) throws Exception {
        List<String> spaceNames = this.legacySpaceResolve.resolve(spaces);
        DocumentReference sxDocumentReference = new DocumentReference(wikiId, spaceNames, name);
        this.authorizationManager.checkAccess(Right.VIEW, sxDocumentReference);
        XWikiDocument sxDocument = context.getWiki().getDocument(sxDocumentReference, context);
        Map<String, Object> backup = new HashMap<>();
        XWikiDocument.backupContext(backup, context);
        try {
            sxDocument.setAsContextDoc(context);
            return processSx(spaceNames, name, queryString, context, exportContext);
        }
         finally {
            XWikiDocument.restoreContext(backup, context);
        }
        
    }
    
    private URL processSx(List<String> spaceNames, String name, String queryString, XWikiContext context, FilesystemExportContext exportContext) throws Exception {
        SxSource sxSource = null;
        List<NameValuePair> params = URLEncodedUtils.parse(queryString, StandardCharsets.UTF_8);
        for (NameValuePair param : params) {
            if (param.getName().equals(JAR_RESOURCE_REQUEST_PARAMETER)) {
                sxSource = new SxResourceSource(param.getValue());
                break;
            }
            
        }
        
        if (sxSource == null) {
            sxSource = new SxDocumentSource(context, getExtensionType());
        }
        
        String content = getContent(sxSource, exportContext);
        String targetPath = String.format("%s/%s/%s", getSxPrefix(), StringUtils.join(spaceNames, '/'), name);
        File targetDirectory = new File(exportContext.getExportDir(), targetPath);
        if (!targetDirectory.exists()) {
            targetDirectory.mkdirs();
        }
        
        File targetLocation = File.createTempFile(getSxPrefix(), "." + getFileSuffix(), targetDirectory);
        FileUtils.writeStringToFile(targetLocation, content);
        StringBuilder path = new StringBuilder("file://");
        path.append(StringUtils.repeat("../", exportContext.getDocParentLevel()));
        path.append(getSxPrefix());
        path.append(URL_PATH_SEPARATOR);
        for (String spaceName : spaceNames) {
            path.append(encodeURLPart(spaceName));
            path.append(URL_PATH_SEPARATOR);
        }
        
        path.append(encodeURLPart(name));
        path.append(URL_PATH_SEPARATOR);
        path.append(encodeURLPart(targetLocation.getName()));
        return new URL(path.toString());
    }
    
    protected String getContent(SxSource sxSource, FilesystemExportContext exportContext) {
        String content;
        int originalDocParentLevel = exportContext.getDocParentLevel();
        try {
            exportContext.setDocParentLevels(3);
            content = sxSource.getContent();
        }
         finally {
            exportContext.setDocParentLevels(originalDocParentLevel);
        }
        
        return content;
    }
    
    private String encodeURLPart(String part) throws IOException {
        return URLEncoder.encode(part, "UTF-8");
    }
    
}


