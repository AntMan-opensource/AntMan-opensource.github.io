package com.embotics.vlm.plugin;
import java.io.IOException;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.ws.rs.POST;
import javax.servlet.ServletException;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import com.cloudbees.plugins.credentials.CredentialsMatchers;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.common.StandardCredentials;
import com.cloudbees.plugins.credentials.common.StandardListBoxModel;
import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.cloudbees.plugins.credentials.domains.URIRequirementBuilder;
import com.embotics.vlm.rest.v30.client.VCommanderClient;
import com.embotics.vlm.rest.v30.client.model.VCommanderException;
import hudson.Extension;
import hudson.model.Descriptor;
import hudson.model.Item;
import hudson.security.ACL;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.Secret;
import jenkins.model.GlobalConfiguration;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
public final class VCommanderConfig extends GlobalConfiguration {
	 private String address;
	private String credentialsId;
	private String orgName;
	private VCommanderClient vCommanderClient; 
	 public VCommanderConfig() {
		load();
	}
	
	 private static VCommanderConfig get() {
		Jenkins jenkins = Jenkins.getInstance();
		if (jenkins != null) {
			VCommanderConfig config = jenkins.getDescriptorByType(VCommanderConfig.class);
			if (config != null) {
				return config;
			}
			
		}
		
		return null;
	}
	
	 public static VCommanderClient getVCommanderClient() throws VCommanderException {
		VCommanderConfig config = VCommanderConfig.get();
		if(config.vCommanderClient != null) {
			return config.vCommanderClient;
		}
		
		StandardUsernamePasswordCredentials cred = getCredential(config.getCredentialsId(), config.getAddress());
		if(cred==null) {
			throw new VCommanderException(Messages.VCommanderConfig_connection_failedNoCredential());
		}
		
		 return new VCommanderClient(config.getAddress(), cred.getUsername(), Secret.toString(cred.getPassword()), config.getOrgName());
	}
	
	 protected void setvCommanderClient(VCommanderClient vCommanderClient) {
		this.vCommanderClient = vCommanderClient;
	}
	
	public boolean configure(StaplerRequest req, JSONObject json) throws Descriptor.FormException {
		req.bindJSON(this, json);
		save();
		return true;
	}
	
	 private static StandardUsernamePasswordCredentials getCredential(String id, String address) {
		List<StandardUsernamePasswordCredentials> creds = CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, (Item)null, ACL.SYSTEM, URIRequirementBuilder.fromUri(address).build());
		return CredentialsMatchers.firstOrNull(creds, CredentialsMatchers.withId(id));
	}
	
	 private static StandardCredentials getCredentialWithoutDomainAndTypeFiltering(String id) {
		List<StandardCredentials> creds = CredentialsProvider.lookupCredentials(StandardCredentials.class, (Item)null, ACL.SYSTEM, Collections.<DomainRequirement>emptyList());
		return CredentialsMatchers.firstOrNull(creds, CredentialsMatchers.withId(id));
	}
	
	 public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Item item, @QueryParameter String credentialsId, @QueryParameter String address) {
		StandardListBoxModel result = new StandardListBoxModel();
		 StandardCredentials currentCred = getCredentialWithoutDomainAndTypeFiltering(credentialsId);
		 if (item == null) {
			 Jenkins jenkinsInstance = Jenkins.getInstance();
        	if(jenkinsInstance!=null && !jenkinsInstance.hasPermission(Jenkins.ADMINISTER)) {
        		return result.with(currentCred);
        	}
        	
		}
		 else {
			if (!item.hasPermission(Item.EXTENDED_READ) && !item.hasPermission(CredentialsProvider.USE_ITEM)) {
				return result.with(currentCred);
			}
			
		}
		
		 List<StandardCredentials> credentials = new ArrayList<>();
		credentials.addAll(CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, item, ACL.SYSTEM, URIRequirementBuilder.fromUri(address).build()));
		 if(currentCred!=null && !credentials.contains(currentCred)) {
			credentials.add(currentCred);
		}
		
		 return result .withEmptySelection() .withAll(credentials);
	}
	
	 public FormValidation doCheckAddress(@QueryParameter String value) throws IOException, ServletException {
		if (value.length() == 0){
			return FormValidation.error(Messages.VCommanderConfig_errors_missingAddress());
}
		return FormValidation.ok();
	}
	
	 public FormValidation doCheckCredentialsId(@AncestorInPath Item item, @QueryParameter String address, @QueryParameter String credentialsId) {
		 if (item == null) {
        	 Jenkins jenkinsInstance = Jenkins.getInstance();
        	if(jenkinsInstance!=null && !jenkinsInstance.hasPermission(Jenkins.ADMINISTER)) {
				return FormValidation.ok();
        	}
        	
		}
		 else {
			if (!item.hasPermission(Item.EXTENDED_READ) && !item.hasPermission(CredentialsProvider.USE_ITEM)) {
				return FormValidation.ok();
			}
			
		}
		
		 if (StringUtils.isBlank(credentialsId)) {
			return FormValidation.ok();
		}
		
		 if(getCredential(credentialsId, address) == null) {
			 return findCredentialProblem(credentialsId);
		}
		
		return FormValidation.ok();
	}
	
	public FormValidation doTestConnection(	@QueryParameter("address") final String address,  @QueryParameter("credentialsId") final String credentialsId, @QueryParameter("orgName") final String orgName) throws IOException, ServletException {
		Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
		 if (StringUtils.isBlank(credentialsId)) {
			return FormValidation.error(Messages.VCommanderConfig_errors_missingCredential());
		}
		
		 StandardUsernamePasswordCredentials cred = getCredential(credentialsId, address);
		 if (cred == null) {
			return findCredentialProblem(credentialsId);
		}
		
		 try {
			VCommanderClient client = new VCommanderClient(address, cred.getUsername(), Secret.toString(cred.getPassword()), orgName);
			client.getSecurityToken();
			client.close();
			 return FormValidation.ok(Messages.VCommanderConfig_connection_success());
		}
		 catch (Exception e) {
			String message = e.getMessage();
			if(e.getCause() !=null && e.getCause() instanceof ConnectException) {
				message = Messages.VCommanderConfig_connection_failedConnection();
			}
			
			return FormValidation.error(Messages.VCommanderConfig_connection_failed(message));
		}
		
	}
	
	 private FormValidation findCredentialProblem(String id) {
		 if(getCredential(id, null) != null) {
			return FormValidation.error(Messages.VCommanderConfig_errors_invalidCredentialDomain());
		}
		
		 if(getCredentialWithoutDomainAndTypeFiltering(id) != null) {
			return FormValidation.error(Messages.VCommanderConfig_errors_invalidCredentialType());
		}
		
		 return FormValidation.error(Messages.VCommanderConfig_errors_deletedCredential());
	}
	
	 public String getAddress() {
		return address;
	}
	
	public void setAddress(String address) {
		this.address = address;
	}
	
	public String getCredentialsId() {
		return credentialsId;
	}
	
	public void setCredentialsId(String credentialsId) {
		this.credentialsId = credentialsId;
	}
	
	public String getOrgName() {
		return orgName;
	}
	
	public void setOrgName(String orgName) {
		this.orgName = orgName;
	}
	
}


