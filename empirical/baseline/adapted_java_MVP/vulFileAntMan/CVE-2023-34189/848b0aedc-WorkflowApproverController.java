package org.apache.inlong.manager.web.controller;
import org.apache.inlong.manager.common.enums.OperationType;
import org.apache.inlong.manager.common.enums.UserTypeEnum;
import org.apache.inlong.manager.pojo.common.PageResult;
import org.apache.inlong.manager.pojo.common.Response;
import org.apache.inlong.manager.pojo.workflow.ApproverPageRequest;
import org.apache.inlong.manager.pojo.workflow.ApproverRequest;
import org.apache.inlong.manager.pojo.workflow.ApproverResponse;
import org.apache.inlong.manager.service.core.WorkflowApproverService;
import org.apache.inlong.manager.service.operationlog.OperationLog;
import org.apache.inlong.manager.service.user.LoginUserUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
@Api(tags = "Workflow-Approver-API")
public class WorkflowApproverController {
    private WorkflowApproverService workflowApproverService;
    @OperationLog(operation = OperationType.CREATE)
    @ApiOperation(value = "Save approver info")
    public Response<Integer> save(@RequestBody ApproverRequest config) {
        return Response.success(workflowApproverService.save(config, LoginUserUtils.getLoginUser().getName()));
    }
    
    @GetMapping(value = "/workflow/approver/get/{id}")
    @ApiOperation(value = "Get approver by ID")
    @ApiImplicitParam(name = "id", value = "Workflow approver ID", dataTypeClass = Integer.class, required = true)
    public Response<ApproverResponse> get(@PathVariable Integer id) {
        return Response.success(workflowApproverService.get(id));
    }
    
    @ApiOperation(value = "List workflow approvers")
    public Response<PageResult<ApproverResponse>> listByCondition(ApproverPageRequest request) {
        request.setCurrentUser(LoginUserUtils.getLoginUser().getName());
        request.setIsAdminRole(LoginUserUtils.getLoginUser().getRoles().contains(UserTypeEnum.ADMIN.name()));
        return Response.success(workflowApproverService.listByCondition(request));
    }
    
    @OperationLog(operation = OperationType.UPDATE)
    @ApiOperation(value = "Update approver info")
    public Response<Integer> update(@RequestBody ApproverRequest request) {
        return Response.success(workflowApproverService.update(request, LoginUserUtils.getLoginUser().getName()));
    }
    
    @OperationLog(operation = OperationType.DELETE)
    @ApiOperation(value = "Delete approver by ID")
    @ApiImplicitParam(name = "id", value = "Workflow approver ID", dataTypeClass = Integer.class, required = true)
    public Response<Boolean> delete(@PathVariable Integer id) {
        workflowApproverService.delete(id, LoginUserUtils.getLoginUser().getName());
        return Response.success(true);
    }
    
}


