package com.sap.scimono.entity;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.ACTIVE_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.ADDRESSES_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.EMAILS_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.ENTITLEMENTS_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.GROUPS_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.IMS_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.LOCALE_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.NAME_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.NICK_NAME_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.PHONE_NUMBERS_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.PHOTOS_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.PREFERRED_LANGUAGE_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.PROFILE_URL_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.ROLES_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.TIMEZONE_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.TITLE_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.USER_NAME_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.USER_TYPE_FIELD;
import static com.sap.scimono.entity.definition.CoreUserAttributes.Constants.X509_CERTIFICATES_FIELD;
import static com.sap.scimono.entity.definition.ResourceConstants.DISPLAY_NAME_FIELD;
import static com.sap.scimono.entity.definition.ResourceConstants.EXTERNAL_ID_FIELD;
import static com.sap.scimono.entity.definition.ResourceConstants.ID_FIELD;
import static com.sap.scimono.entity.definition.ResourceConstants.META_FIELD;
import static com.sap.scimono.entity.definition.ResourceConstants.SCHEMAS_FIELD;
import static com.sap.scimono.helper.Objects.firstNonNull;
import static com.sap.scimono.helper.Objects.sameOrEmpty;
import static java.util.Objects.hash;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import javax.validation.Valid;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sap.scimono.entity.base.Extension;
import com.sap.scimono.entity.base.MultiValuedAttribute;
import com.sap.scimono.entity.schema.validation.ValidCoreSchema;
import com.sap.scimono.entity.schema.validation.ValidEmails;
import com.sap.scimono.exception.InvalidInputException;
import com.sap.scimono.helper.Strings;
@JsonIgnoreProperties(ignoreUnknown = true)
public final class User extends Resource<User> {
  public static final String RESOURCE_TYPE_USER = "User";
  public static final String SCHEMA = CORE_SCHEMA + RESOURCE_TYPE_USER;
  private static final long serialVersionUID = -4076516708797425414L;
  private final String userName;
  private final Name name;
  private final String displayName;
  private final String nickName;
  private final String profileUrl;
  private final String title;
  private final String userType;
  private final String preferredLanguage;
  private final String locale;
  private final String timezone;
  private final Boolean active;
  private final String password;
  private final List<Email> emails;
  private final List<PhoneNumber> phoneNumbers;
  private final List<Im> ims;
  private final List<Photo> photos;
  private final List<Address> addresses;
  private final List<GroupRef> groups;
  private final List<Entitlement> entitlements;
  private final List<Role> roles;
  private final List<X509Certificate> x509Certificates;
  private User(@JsonProperty(ID_FIELD) final String id, @JsonProperty(EXTERNAL_ID_FIELD) final String externalId, @JsonProperty(META_FIELD) final Meta meta, @JsonProperty(value = SCHEMAS_FIELD, required = true) final Set<String> schemas, @JsonProperty(value = USER_NAME_FIELD, required = true) final String userName, @JsonProperty(NAME_FIELD) final Name name, @JsonProperty(DISPLAY_NAME_FIELD) final String displayName, @JsonProperty(NICK_NAME_FIELD) final String nickName, @JsonProperty(PROFILE_URL_FIELD) final String profileUrl, @JsonProperty(TITLE_FIELD) final String title, @JsonProperty(USER_TYPE_FIELD) final String userType, @JsonProperty(PREFERRED_LANGUAGE_FIELD) final String preferredLanguage, @JsonProperty(LOCALE_FIELD) final String locale, @JsonProperty(TIMEZONE_FIELD) final String timezone, @JsonProperty(ACTIVE_FIELD) final Boolean active, @JsonProperty(EMAILS_FIELD) final List<Email> emails, @JsonProperty(PHONE_NUMBERS_FIELD) final List<PhoneNumber> phoneNumbers, @JsonProperty(IMS_FIELD) final List<Im> ims, @JsonProperty(PHOTOS_FIELD) final List<Photo> photos, @JsonProperty(ADDRESSES_FIELD) final List<Address> addresses, @JsonProperty(GROUPS_FIELD) final List<GroupRef> groups, @JsonProperty(ENTITLEMENTS_FIELD) final List<Entitlement> entitlements, @JsonProperty(ROLES_FIELD) final List<Role> roles, @JsonProperty(X509_CERTIFICATES_FIELD) final List<X509Certificate> x509Certificates) {
    super(id, externalId, meta, schemas);
    this.userName = userName != null ? userName : "";
    this.name = name;
    this.displayName = displayName;
    this.nickName = nickName;
    this.profileUrl = profileUrl;
    this.title = title;
    this.userType = userType;
    this.preferredLanguage = preferredLanguage;
    this.locale = locale;
    this.timezone = timezone;
    this.active = active;
    this.emails = sameOrEmpty(emails);
    this.phoneNumbers = sameOrEmpty(phoneNumbers);
    this.ims = sameOrEmpty(ims);
    this.photos = sameOrEmpty(photos);
    this.addresses = sameOrEmpty(addresses);
    this.groups = sameOrEmpty(groups);
    this.entitlements = sameOrEmpty(entitlements);
    this.roles = sameOrEmpty(roles);
    this.x509Certificates = sameOrEmpty(x509Certificates);
    password = null;
  }
  
  private User(final Builder builder) {
    super(builder);
    userName = builder.userName;
    name = builder.name;
    displayName = builder.displayName;
    nickName = builder.nickName;
    profileUrl = builder.profileUrl;
    title = builder.title;
    userType = builder.userType;
    preferredLanguage = builder.preferredLanguage;
    locale = builder.locale;
    timezone = builder.timezone;
    active = builder.active;
    password = builder.password;
    emails = builder.emails;
    phoneNumbers = builder.phoneNumbers;
    ims = builder.ims;
    photos = builder.photos;
    addresses = builder.addresses;
    groups = builder.groups;
    entitlements = builder.entitlements;
    roles = builder.roles;
    x509Certificates = builder.x509Certificates;
  }
  
  public String getUserName() {
    return userName;
  }
  
  public Name getName() {
    return name;
  }
  
  public String getDisplayName() {
    return displayName;
  }
  
  public String getNickName() {
    return nickName;
  }
  
  public String getProfileUrl() {
    return profileUrl;
  }
  
  public String getTitle() {
    return title;
  }
  
  public String getUserType() {
    return userType;
  }
  
  public String getPreferredLanguage() {
    return preferredLanguage;
  }
  
  public String getLocale() {
    return locale;
  }
  
  public String getTimezone() {
    return timezone;
  }
  
  public Boolean isActive() {
    return active;
  }
  
  public String getPassword() {
    return password;
  }
  
  public List<Email> getEmails() {
    return Collections.unmodifiableList(emails);
  }
  
  public Optional<Email> getPrimaryOrFirstEmail() {
    for (final Email email : emails) {
      if (email.isPrimary()) {
        return Optional.of(email);
      }
      
    }
    
    if (!emails.isEmpty()) {
      return Optional.of(emails.get(0));
    }
    
    return Optional.empty();
  }
  
  public List<PhoneNumber> getPhoneNumbers() {
    return Collections.unmodifiableList(phoneNumbers);
  }
  
  public List<Im> getIms() {
    return Collections.unmodifiableList(ims);
  }
  
  public List<Photo> getPhotos() {
    return Collections.unmodifiableList(photos);
  }
  
  public List<Address> getAddresses() {
    return Collections.unmodifiableList(addresses);
  }
  
  public List<GroupRef> getGroups() {
    return Collections.unmodifiableList(groups);
  }
  
  public List<Entitlement> getEntitlements() {
    return Collections.unmodifiableList(entitlements);
  }
  
  public List<Role> getRoles() {
    return Collections.unmodifiableList(roles);
  }
  
  public List<X509Certificate> getX509Certificates() {
    return Collections.unmodifiableList(x509Certificates);
  }
  
  public String toString() {
    Map<String, Object> valuesToDisplay = new LinkedHashMap<>();
    valuesToDisplay.put(USER_NAME_FIELD, userName);
    valuesToDisplay.put(NAME_FIELD, name);
    valuesToDisplay.put(DISPLAY_NAME_FIELD, displayName);
    valuesToDisplay.put(NICK_NAME_FIELD, nickName);
    valuesToDisplay.put(PROFILE_URL_FIELD, profileUrl);
    valuesToDisplay.put(TITLE_FIELD, title);
    valuesToDisplay.put(USER_TYPE_FIELD, userType);
    valuesToDisplay.put(PREFERRED_LANGUAGE_FIELD, preferredLanguage);
    valuesToDisplay.put(LOCALE_FIELD, locale);
    valuesToDisplay.put(TIMEZONE_FIELD, timezone);
    valuesToDisplay.put(ACTIVE_FIELD, active);
    valuesToDisplay.put("password", password);
    valuesToDisplay.put(EMAILS_FIELD, emails);
    valuesToDisplay.put(PHONE_NUMBERS_FIELD, phoneNumbers);
    valuesToDisplay.put(IMS_FIELD, ims);
    valuesToDisplay.put(PHOTOS_FIELD, photos);
    valuesToDisplay.put(ADDRESSES_FIELD, addresses);
    valuesToDisplay.put(GROUPS_FIELD, groups);
    valuesToDisplay.put(ENTITLEMENTS_FIELD, entitlements);
    valuesToDisplay.put(ROLES_FIELD, roles);
    valuesToDisplay.put(X509_CERTIFICATES_FIELD, x509Certificates);
    valuesToDisplay.put(ID_FIELD, getId());
    valuesToDisplay.put(EXTERNAL_ID_FIELD, getExternalId());
    valuesToDisplay.put(META_FIELD, getMeta());
    valuesToDisplay.put(SCHEMAS_FIELD, getSchemas());
    valuesToDisplay.put("extensions", getExtensions());
    return Strings.createPrettyEntityString(valuesToDisplay, this.getClass());
  }
  
  public Set<String> getSchemas() {
    return super.getSchemas();
  }
  
  public Builder builder() {
    return new Builder(this);
  }
  
  public int hashCode() {
    final int prime = 31;
    int result = super.hashCode();
    result = prime * result + hash(active);
    result = prime * result + hash(addresses);
    result = prime * result + hash(displayName);
    result = prime * result + hash(emails);
    result = prime * result + hash(entitlements);
    result = prime * result + hash(groups);
    result = prime * result + hash(ims);
    result = prime * result + hash(locale);
    result = prime * result + hash(name);
    result = prime * result + hash(nickName);
    result = prime * result + hash(password);
    result = prime * result + hash(phoneNumbers);
    result = prime * result + hash(photos);
    result = prime * result + hash(preferredLanguage);
    result = prime * result + hash(profileUrl);
    result = prime * result + hash(roles);
    result = prime * result + hash(timezone);
    result = prime * result + hash(title);
    result = prime * result + hash(userName);
    result = prime * result + hash(userType);
    result = prime * result + hash(x509Certificates);
    return result;
  }
  
  public boolean equals(final Object obj) {
    if (this == obj) {
      return true;
    }
    
    if (!super.equals(obj)) {
      return false;
    }
    
    if (!(obj instanceof User)) {
      return false;
    }
    
    final User other = (User) obj;
    if (!Objects.equals(active, other.active)) {
      return false;
    }
    
    if (!Objects.equals(addresses, other.addresses)) {
      return false;
    }
    
    if (!Objects.equals(displayName, other.displayName)) {
      return false;
    }
    
    if (!Objects.equals(emails, other.emails)) {
      return false;
    }
    
    if (!Objects.equals(entitlements, other.entitlements)) {
      return false;
    }
    
    if (!Objects.equals(groups, other.groups)) {
      return false;
    }
    
    if (!Objects.equals(ims, other.ims)) {
      return false;
    }
    
    if (!Objects.equals(locale, other.locale)) {
      return false;
    }
    
    if (!Objects.equals(name, other.name)) {
      return false;
    }
    
    if (!Objects.equals(nickName, other.nickName)) {
      return false;
    }
    
    if (!Objects.equals(password, other.password)) {
      return false;
    }
    
    if (!Objects.equals(phoneNumbers, other.phoneNumbers)) {
      return false;
    }
    
    if (!Objects.equals(photos, other.photos)) {
      return false;
    }
    
    if (!Objects.equals(preferredLanguage, other.preferredLanguage)) {
      return false;
    }
    
    if (!Objects.equals(profileUrl, other.profileUrl)) {
      return false;
    }
    
    if (!Objects.equals(roles, other.roles)) {
      return false;
    }
    
    if (!Objects.equals(timezone, other.timezone)) {
      return false;
    }
    
    if (!Objects.equals(title, other.title)) {
      return false;
    }
    
    if (!com.sap.scimono.helper.Objects.stringsEqualsIgnoreCase(userName, other.userName)) {
      return false;
    }
    
    if (!Objects.equals(userType, other.userType)) {
      return false;
    }
    
    return Objects.equals(x509Certificates, other.x509Certificates);
  }
  
  public static final class Builder extends Resource.Builder<User> {
    private String userName;
    private String password;
    private Boolean active;
    private String timezone;
    private String locale;
    private String preferredLanguage;
    private String userType;
    private String title;
    private String profileUrl;
    private String nickName;
    private String displayName;
    private Name name;
    private List<Email> emails = new ArrayList<>();
    private List<PhoneNumber> phoneNumbers = new ArrayList<>();
    private List<Im> ims = new ArrayList<>();
    private List<Photo> photos = new ArrayList<>();
    private List<Address> addresses = new ArrayList<>();
    private List<GroupRef> groups = new ArrayList<>();
    private List<Entitlement> entitlements = new ArrayList<>();
    private List<Role> roles = new ArrayList<>();
    private List<X509Certificate> x509Certificates = new ArrayList<>();
    @SuppressWarnings("unchecked")
    Builder(final String userName, final User user) {
      super(user);
      addSchema(SCHEMA);
      if (user != null) {
        this.userName = user.userName;
        name = user.name;
        displayName = user.displayName;
        nickName = user.nickName;
        profileUrl = user.profileUrl;
        title = user.title;
        userType = user.userType;
        preferredLanguage = user.preferredLanguage;
        locale = user.locale;
        timezone = user.timezone;
        active = user.active;
        password = user.password;
        emails = new ArrayList<>(firstNonNull(user.emails, emails));
        phoneNumbers = new ArrayList<>(firstNonNull(user.phoneNumbers, phoneNumbers));
        ims = new ArrayList<>(firstNonNull(user.ims, ims));
        photos = new ArrayList<>(firstNonNull(user.photos, photos));
        addresses = new ArrayList<>(firstNonNull(user.addresses, addresses));
        groups = new ArrayList<>(firstNonNull(user.groups, groups));
        entitlements = new ArrayList<>(firstNonNull(user.entitlements, entitlements));
        roles = new ArrayList<>(firstNonNull(user.roles, roles));
        x509Certificates = new ArrayList<>(firstNonNull(user.x509Certificates, x509Certificates));
      }
      
      if (!Strings.isNullOrEmpty(userName)) {
        this.userName = userName;
      }
      
    }
    
    public Builder(final String userName) {
      this(userName, null);
      if (Strings.isNullOrEmpty(userName)) {
        throw new InvalidInputException("userName must not be null or empty.");
      }
      
    }
    
    public Builder() {
      this(null, null);
    }
    
    public Builder(final User user) {
      this(null, user);
      if (user == null) {
        throw new InvalidInputException("The given user must not be null");
      }
      
    }
    
    public Builder setUserName(final String userName) {
      this.userName = userName;
      return this;
    }
    
    public Builder setName(final Name name) {
      if (name != null && !name.isEmpty()) {
        this.name = name;
      }
       else {
        this.name = null;
      }
      
      return this;
    }
    
    public Builder setDisplayName(final String displayName) {
      this.displayName = displayName;
      return this;
    }
    
    public Builder setNickName(final String nickName) {
      this.nickName = nickName;
      return this;
    }
    
    public Builder setProfileUrl(final String profileUrl) {
      this.profileUrl = profileUrl;
      return this;
    }
    
    public Builder setTitle(final String title) {
      this.title = title;
      return this;
    }
    
    public Builder setUserType(final String userType) {
      this.userType = userType;
      return this;
    }
    
    public Builder setPreferredLanguage(final String preferredLanguage) {
      this.preferredLanguage = preferredLanguage;
      return this;
    }
    
    public Builder setLocale(final String locale) {
      this.locale = locale;
      return this;
    }
    
    public Builder setTimezone(final String timezone) {
      this.timezone = timezone;
      return this;
    }
    
    public Builder setActive(final boolean active) {
      this.active = active;
      return this;
    }
    
    public Builder setPassword(final String password) {
      this.password = password;
      return this;
    }
    
    public Builder addEmails(final Collection<Email> emails) {
      if (emails != null) {
        for (final Email email : emails) {
          addEmail(email);
        }
        
      }
      
      return this;
    }
    
    public Builder addEmail(final Email email) {
      if (email == null || isMultivaluedAttributeExistInCollection(email, emails)) {
        return this;
      }
      
      if (email.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(emails)) {
        emails.replaceAll(e -> new Email.Builder(e).setPrimary(false).build());
      }
      
      emails.add(new Email.Builder(email).build());
      return this;
    }
    
    public Builder removeEmails() {
      emails.clear();
      return this;
    }
    
    public Builder removeEmail(final Email email) {
      emails.remove(email);
      return this;
    }
    
    public Builder addPhoneNumbers(final Collection<PhoneNumber> phoneNumbers) {
      if (phoneNumbers != null) {
        for (PhoneNumber phoneNumber : phoneNumbers) {
          addPhoneNumber(phoneNumber);
        }
        
      }
      
      return this;
    }
    
    public Builder addPhoneNumber(final PhoneNumber phoneNumber) {
      if (phoneNumber == null || isMultivaluedAttributeExistInCollection(phoneNumber, phoneNumbers)) {
        return this;
      }
      
      if (phoneNumber.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(phoneNumbers)) {
        phoneNumbers.replaceAll(ph -> new PhoneNumber.Builder(ph).setPrimary(false).build());
      }
      
      phoneNumbers.add(new PhoneNumber.Builder(phoneNumber).build());
      return this;
    }
    
    public Builder removePhoneNumbers() {
      phoneNumbers.clear();
      return this;
    }
    
    public Builder removePhoneNumber(final PhoneNumber phoneNumber) {
      phoneNumbers.remove(phoneNumber);
      return this;
    }
    
    public Builder addIms(final Collection<Im> ims) {
      if (ims != null) {
        for (Im im : ims) {
          addIm(im);
        }
        
      }
      
      return this;
    }
    
    public Builder addIm(final Im im) {
      if (im == null || isMultivaluedAttributeExistInCollection(im, ims)) {
        return this;
      }
      
      if (im.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(ims)) {
        ims.replaceAll(i -> new Im.Builder(i).setPrimary(false).build());
      }
      
      ims.add(new Im.Builder(im).build());
      return this;
    }
    
    public Builder removeIms() {
      ims.clear();
      return this;
    }
    
    public Builder removeIm(final Im im) {
      ims.remove(im);
      return this;
    }
    
    public Builder addPhotos(final Collection<Photo> photos) {
      if (photos != null) {
        for (Photo photo : photos) {
          addPhoto(photo);
        }
        
      }
      
      return this;
    }
    
    public Builder addPhoto(final Photo photo) {
      if (photo == null || isMultivaluedAttributeExistInCollection(photo, photos)) {
        return this;
      }
      
      if (photo.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(photos)) {
        photos.replaceAll(ph -> new Photo.Builder(ph).setPrimary(false).build());
      }
      
      photos.add(new Photo.Builder(photo).build());
      return this;
    }
    
    public Builder removePhotos() {
      photos.clear();
      return this;
    }
    
    public Builder removePhoto(final Photo photo) {
      photos.remove(photo);
      return this;
    }
    
    public Builder addAddresses(final Collection<Address> addresses) {
      if (addresses != null) {
        for (Address address : addresses) {
          addAddress(address);
        }
        
      }
      
      return this;
    }
    
    public Builder addAddress(final Address address) {
      if (address != null) {
        addresses.add(new Address.Builder(address).build());
      }
      
      return this;
    }
    
    public Builder removeAddresses() {
      addresses.clear();
      return this;
    }
    
    public Builder removeAddress(final Address address) {
      addresses.remove(address);
      return this;
    }
    
    public Builder addGroups(final List<GroupRef> groups) {
      this.groups.addAll(groups);
      return this;
    }
    
    public Builder addGroup(final GroupRef group) {
      groups.add(group);
      return this;
    }
    
    public Builder removeGroup(final GroupRef group) {
      groups.remove(group);
      return this;
    }
    
    public Builder removeGroups() {
      groups.clear();
      return this;
    }
    
    public Builder addEntitlements(final Collection<Entitlement> entitlements) {
      if (entitlements != null) {
        for (Entitlement entitlement : entitlements) {
          addEntitlement(entitlement);
        }
        
      }
      
      return this;
    }
    
    public Builder addEntitlement(final Entitlement entitlement) {
      if (entitlement == null || isMultivaluedAttributeExistInCollection(entitlement, entitlements)) {
        return this;
      }
      
      if (entitlement.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(entitlements)) {
        entitlements.replaceAll(ent -> new Entitlement.Builder(ent).setPrimary(false).build());
      }
      
      entitlements.add(new Entitlement.Builder(entitlement).build());
      return this;
    }
    
    public Builder removeEntitlements() {
      entitlements.clear();
      return this;
    }
    
    public Builder removeEntitlement(final Entitlement entitlement) {
      entitlements.remove(entitlement);
      return this;
    }
    
    public Builder addRoles(final Collection<Role> roles) {
      if (roles != null) {
        for (Role role : roles) {
          addRole(role);
        }
        
      }
      
      return this;
    }
    
    public Builder addRole(final Role role) {
      if (role == null || isMultivaluedAttributeExistInCollection(role, roles)) {
        return this;
      }
      
      if (role.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(roles)) {
        roles.replaceAll(r -> new Role.Builder(r).setPrimary(false).build());
      }
      
      roles.add(new Role.Builder(role).build());
      return this;
    }
    
    public Builder removeRoles() {
      roles.clear();
      return this;
    }
    
    public Builder removeRole(final Role role) {
      roles.remove(role);
      return this;
    }
    
    public Builder addX509Certificates(final Collection<X509Certificate> x509Certificates) {
      if (x509Certificates != null) {
        for (X509Certificate x509Certificate : x509Certificates) {
          addX509Certificate(x509Certificate);
        }
        
      }
      
      return this;
    }
    
    public Builder addX509Certificate(final X509Certificate x509Certificate) {
      if (x509Certificate == null  || isMultivaluedAttributeExistInCollection(x509Certificate, x509Certificates)) {
        return this;
      }
      
      if (x509Certificate.isPrimary() && MultiValuedAttribute.isCollectionContainsPrimaryAttributes(x509Certificates)) {
        x509Certificates.replaceAll(current -> new X509Certificate.Builder(current).setPrimary(false).build());
      }
      
      x509Certificates.add(new X509Certificate.Builder(x509Certificate).build());
      return this;
    }
    
    public Builder removeX509Certificates() {
      x509Certificates.clear();
      return this;
    }
    
    public Builder removeX509Certificate(final X509Certificate x509Certificate) {
      x509Certificates.remove(x509Certificate);
      return this;
    }
    
    public Builder setGroups(List<GroupRef> groups){
      this.groups = groups;
      return this;
    }
    
    public Builder setMeta(final Meta meta) {
      super.setMeta(meta);
      return this;
    }
    
    public Builder setExternalId(final String externalId) {
      super.setExternalId(externalId);
      return this;
    }
    
    public Builder setId(final String id) {
      super.setId(id);
      return this;
    }
    
    protected void addSchema(final String schema) {
      super.addSchema(schema);
    }
    
    public Builder addExtensions(final Collection<Extension> extensions) {
      super.addExtensions(extensions);
      return this;
    }
    
    public Builder addExtension(final Extension extension) {
      super.addExtension(extension);
      return this;
    }
    
    public Builder removeExtensions() {
      super.removeExtensions();
      return this;
    }
    
    public Builder removeExtension(final String urn) {
      super.removeExtension(urn);
      return this;
    }
    
    public User build() {
      return new User(this);
    }
    
  }
  
}


