package org.postgresql.core.v3;
import org.postgresql.PGProperty;
import org.postgresql.plugin.AuthenticationPlugin;
import org.postgresql.plugin.AuthenticationRequestType;
import org.postgresql.util.GT;
import org.postgresql.util.ObjectFactory;
import org.postgresql.util.PSQLException;
import org.postgresql.util.PSQLState;
import org.checkerframework.checker.nullness.qual.Nullable;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
class AuthenticationPluginManager {
  private static final Logger LOGGER = Logger.getLogger(AuthenticationPluginManager.class.getName());
  public interface PasswordAction<T, R> {
    R apply(T password) throws PSQLException, IOException;
  }
  
  private AuthenticationPluginManager() {
  }
  
  public static <T> T withPassword(AuthenticationRequestType type, Properties info, PasswordAction<char @Nullable [], T> action) throws PSQLException, IOException {
    char[] password = null;
    String authPluginClassName = PGProperty.AUTHENTICATION_PLUGIN_CLASS_NAME.get(info);
    if (authPluginClassName == null || authPluginClassName.equals("")) {
      String passwordText = PGProperty.PASSWORD.get(info);
      if (passwordText != null) {
        password = passwordText.toCharArray();
      }
      
    }
     else {
      AuthenticationPlugin authPlugin;
      try {
        authPlugin = (AuthenticationPlugin) ObjectFactory.instantiate(authPluginClassName, info, false, null);
      }
       catch (Exception ex) {
        LOGGER.log(Level.FINE, "Unable to load Authentication Plugin " + ex.toString());
        throw new PSQLException(ex.getMessage(), PSQLState.UNEXPECTED_ERROR);
      }
      
      password = authPlugin.getPassword(type);
    }
    
    try {
      return action.apply(password);
    }
     finally {
      if (password != null) {
        java.util.Arrays.fill(password, (char) 0);
      }
      
    }
    
  }
  
  public static <T> T withEncodedPassword(AuthenticationRequestType type, Properties info, PasswordAction<byte[], T> action) throws PSQLException, IOException {
    byte[] encodedPassword = withPassword(type, info, password -> {
      if (password == null) {
        throw new PSQLException( GT.tr("The server requested password-based authentication, but no password was provided."), PSQLState.CONNECTION_REJECTED);
      }
      
      ByteBuffer buf = StandardCharsets.UTF_8.encode(CharBuffer.wrap(password));
      byte[] bytes = new byte[buf.limit()];
      buf.get(bytes);
      return bytes;
    }
    
);
    try {
      return action.apply(encodedPassword);
    }
     finally {
      java.util.Arrays.fill(encodedPassword, (byte) 0);
    }
    
  }
  
}


