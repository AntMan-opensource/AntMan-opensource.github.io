package com.hazelcast.internal.config;
import com.hazelcast.config.ConfigRecognizer;
import com.hazelcast.config.ConfigStream;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import static com.hazelcast.internal.util.StringUtil.equalsIgnoreCase;
import static java.util.Objects.requireNonNull;
public class AbstractXmlConfigRootTagRecognizer implements ConfigRecognizer {
    private final SAXParser saxParser;
    private final String expectedRootNode;
    private final ILogger logger = Logger.getLogger(AbstractXmlConfigRootTagRecognizer.class);
    public AbstractXmlConfigRootTagRecognizer(String expectedRootNode) throws Exception {
        this.expectedRootNode = expectedRootNode;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        saxParser = factory.newSAXParser();
    }
    
    public boolean isRecognized(ConfigStream configStream) throws Exception {
        MemberHandler memberHandler = new MemberHandler(expectedRootNode);
        try {
            saxParser.parse(configStream, memberHandler);
        }
         catch (TerminateParseException ex) {
        }
         catch (SAXParseException ex) {
            handleParseException(ex);
            return false;
        }
         catch (Exception ex) {
            handleUnexpectedException(ex);
            throw ex;
        }
        
        return memberHandler.isMemberXml;
    }
    
    private void handleParseException(SAXParseException ex) {
        if (logger.isFineEnabled()) {
            logger.fine("An exception is encountered while processing the provided XML configuration", ex);
        }
        
    }
    
    private void handleUnexpectedException(Exception ex) {
        if (logger.isFineEnabled()) {
            logger.fine("An unexpected exception is encountered while processing the provided XML configuration", ex);
        }
        
    }
    
    private static final class MemberHandler extends DefaultHandler {
        private final String expectedRootNode;
        private boolean isMemberXml;
        private MemberHandler(String expectedRootNode) {
            this.expectedRootNode = requireNonNull(expectedRootNode);
        }
        
        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
            if (equalsIgnoreCase(expectedRootNode, qName)) {
                isMemberXml = true;
            }
            
            throw new TerminateParseException();
        }
        
    }
    
    private static final class TerminateParseException extends SAXException {
    }
    
}


