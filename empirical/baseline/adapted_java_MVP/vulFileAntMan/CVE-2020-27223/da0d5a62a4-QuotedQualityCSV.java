package org.eclipse.jetty.http;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.ToIntFunction;
import org.eclipse.jetty.util.log.Log;
import static java.lang.Integer.MIN_VALUE;
public class QuotedQualityCSV extends QuotedCSV implements Iterable<String> {
    public static ToIntFunction<String> MOST_SPECIFIC_MIME_ORDERING = s -> {
        if ("*/*".equals(s)){
            return 0;
}
        if (s.endsWith("/*")){
            return 1;
}
        if (s.indexOf(';') < 0){
            return 2;
}
        return 3;
    };
    private final List<Double> _quality = new ArrayList<>();
    private boolean _sorted = false;
    private final ToIntFunction<String> _secondaryOrdering;
    public QuotedQualityCSV() {
        this((ToIntFunction)null);
    }
    
    public QuotedQualityCSV(String[] preferredOrder) {
        this((s) -> {
            for (int i = 0; i < preferredOrder.length; ++i){
                if (preferredOrder[i].equals(s)){
                    return preferredOrder.length - i;
}
            }
            
            if ("*".equals(s)){
                return preferredOrder.length;
}
            return MIN_VALUE;
        }
        
);
    }
    
    public QuotedQualityCSV(ToIntFunction<String> secondaryOrdering) {
        this._secondaryOrdering = secondaryOrdering == null ? s -> 0 : secondaryOrdering;
    }
    
    protected void parsedValue(StringBuffer buffer) {
        super.parsedValue(buffer);
        _quality.add(1.0D);
    }
    
    protected void parsedParam(StringBuffer buffer, int valueLength, int paramName, int paramValue) {
        if (paramName < 0){
            if (buffer.charAt(buffer.length() - 1) == ';'){
                buffer.setLength(buffer.length() - 1);
}
        }
        
        else if (paramValue >= 0 && buffer.charAt(paramName) == 'q' && paramValue > paramName && buffer.length() >= paramName && buffer.charAt(paramName + 1) == '='){
            Double q;
            try {
                q = (_keepQuotes && buffer.charAt(paramValue) == '"') ? Double.valueOf(buffer.substring(paramValue + 1, buffer.length() - 1)) : Double.valueOf(buffer.substring(paramValue));
            }
            
            catch (Exception e) {
                Log.getLogger(QuotedQualityCSV.class).ignore(e);
                q = 0.0D;
            }
            
            buffer.setLength(Math.max(0, paramName - 1));
            if (q != 1.0D){
                _quality.set(_quality.size() - 1, q);
}
        }
        
    }
    
    public List<String> getValues() {
        if (!_sorted){
            sort();
}
        return _values;
    }
    
    public Iterator<String> iterator() {
        if (!_sorted){
            sort();
}
        return _values.iterator();
    }
    
    protected void sort() {
        _sorted = true;
        Double last = 0.0D;
        int lastSecondaryOrder = Integer.MIN_VALUE;
        for (int i = _values.size(); i-- > 0; ){
            String v = _values.get(i);
            Double q = _quality.get(i);
            int compare = last.compareTo(q);
            if (compare > 0 || (compare == 0 && _secondaryOrdering.applyAsInt(v) < lastSecondaryOrder)){
                _values.set(i, _values.get(i + 1));
                _values.set(i + 1, v);
                _quality.set(i, _quality.get(i + 1));
                _quality.set(i + 1, q);
                last = 0.0D;
                lastSecondaryOrder = 0;
                i = _values.size();
                continue;
            }
            
            last = q;
            lastSecondaryOrder = _secondaryOrdering.applyAsInt(v);
        }
        
        int lastElement = _quality.size();
        while (lastElement > 0 && _quality.get(--lastElement).equals(0.0D)){
            _quality.remove(lastElement);
            _values.remove(lastElement);
        }
        
    }
    
}


