package org.apache.pdfbox.pdfparser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pdfbox.cos.COSBase;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.cos.COSObject;
import org.apache.pdfbox.cos.COSStream;
public class PDFObjectStreamParser extends BaseParser {
    private static final Log LOG = LogFactory.getLog(PDFObjectStreamParser.class);
    private List<COSObject> streamObjects = null;
    private final int numberOfObjects;
    private final int firstObject;
    public PDFObjectStreamParser(COSStream stream, COSDocument document) throws IOException {
        super(new InputStreamSource(stream.createInputStream()));
        this.document = document;
        numberOfObjects = stream.getInt(COSName.N);
        if (numberOfObjects == -1){
            throw new IOException("/N entry missing in object stream");
        }
        
        if (numberOfObjects < 0){
            throw new IOException("Illegal /N entry in object stream: " + numberOfObjects);
        }
        
        firstObject = stream.getInt(COSName.FIRST);
        if (firstObject == -1){
            throw new IOException("/First entry missing in object stream");
        }
        
        if (firstObject < 0){
            throw new IOException("Illegal /First entry in object stream: " + firstObject);
        }
        
    }
    
    public void parse() throws IOException {
        try {
            Map<Integer, Long> offsets = readOffsets();
            streamObjects = new ArrayList<COSObject>( numberOfObjects );
            for (Entry<Integer, Long> offset : offsets.entrySet()){
                COSBase cosObject = parseObject(offset.getKey());
                COSObject object = new COSObject(cosObject);
                object.setGenerationNumber(0);
                object.setObjectNumber(offset.getValue());
                streamObjects.add(object);
                if (LOG.isDebugEnabled()){
                    LOG.debug("parsed=" + object);
                }
                
            }
            
        }
        
        finally {
            seqSource.close();
        }
        
    }
    
    public List<COSObject> getObjects() {
        return streamObjects;
    }
    
    private Map<Integer, Long> readOffsets() throws IOException {
        Map<Integer, Long> objectNumbers = new TreeMap<Integer, Long>();
        for (int i = 0; i < numberOfObjects; i++){
            long objectNumber = readObjectNumber();
            int offset = (int) readLong();
            objectNumbers.put(offset, objectNumber);
        }
        
        return objectNumbers;
    }
    
    private COSBase parseObject(int offset) throws IOException {
        long currentPosition = seqSource.getPosition();
        int finalPosition = firstObject + offset;
        if (finalPosition > 0 && currentPosition < finalPosition){
            seqSource.readFully(finalPosition - (int) currentPosition);
        }
        
        return parseDirObject();
    }
    
}


