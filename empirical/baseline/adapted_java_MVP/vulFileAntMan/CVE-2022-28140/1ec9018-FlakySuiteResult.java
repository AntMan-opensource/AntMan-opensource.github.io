package com.google.jenkins.flakyTestHandler.junit;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.export.ExportedBean;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import hudson.tasks.junit.CaseResult;
import hudson.tasks.test.TestObject;
import hudson.util.io.ParserConfigurator;
public final class FlakySuiteResult implements Serializable {
  private final String file;
  private final String name;
  private final String stdout;
  private final String stderr;
  private float duration;
  private String timestamp;
  private String id;
  private final List<FlakyCaseResult> cases = new ArrayList<FlakyCaseResult>();
  private transient Map<String,FlakyCaseResult> casesByName;
  private transient FlakyTestResult parent;
  FlakySuiteResult(String name, String stdout, String stderr) {
    this.name = name;
    this.stderr = stderr;
    this.stdout = stdout;
    this.file = null;
  }
  
  private synchronized Map<String,FlakyCaseResult> casesByName() {
    if (casesByName == null) {
      casesByName = new HashMap<String,FlakyCaseResult>();
      for (FlakyCaseResult c : cases) {
        casesByName.put(c.getName(), c);
      }
      
    }
    
    return casesByName;
  }
  
  public static class SuiteResultParserConfigurationContext {
    public final File xmlReport;
    SuiteResultParserConfigurationContext(File xmlReport) {
      this.xmlReport = xmlReport;
    }
    
  }
  
  static List<FlakySuiteResult> parse(File xmlReport, boolean keepLongStdio) throws DocumentException, IOException, InterruptedException {
    List<FlakySuiteResult> r = new ArrayList<FlakySuiteResult>();
    SAXReader saxReader = new SAXReader();
    ParserConfigurator.applyConfiguration(saxReader,new SuiteResultParserConfigurationContext(xmlReport));
    Document result = saxReader.read(xmlReport);
    Element root = result.getRootElement();
    parseSuite(xmlReport,keepLongStdio,r,root);
    return r;
  }
  
  private static void parseSuite(File xmlReport, boolean keepLongStdio, List<FlakySuiteResult> r, Element root) throws DocumentException, IOException {
    @SuppressWarnings("unchecked")
    List<Element> testSuites = (List<Element>)root.elements("testsuite");
    for (Element suite : testSuites){
      parseSuite(xmlReport, keepLongStdio, r, suite);
}
    if (root.element("testcase")!=null || root.element("error")!=null){
      r.add(new FlakySuiteResult(xmlReport, root, keepLongStdio));
}
  }
  
  private FlakySuiteResult(File xmlReport, Element suite, boolean keepLongStdio) throws DocumentException, IOException {
    this.file = xmlReport.getAbsolutePath();
    String name = suite.attributeValue("name");
    if(name==null) name = '('+xmlReport.getName()+')';
    else {
      String pkg = suite.attributeValue("package");
      if(pkg!=null&& pkg.length()>0)   name=pkg+'.'+name;
    }
    
    this.name = TestObject.safe(name);
    this.timestamp = suite.attributeValue("timestamp");
    this.id = suite.attributeValue("id");
    Element ex = suite.element("error");
    if(ex!=null) {
      addCase(new FlakyCaseResult(this, suite, "<init>", keepLongStdio));
    }
    
    @SuppressWarnings("unchecked")
    List<Element> testCases = (List<Element>)suite.elements("testcase");
    for (Element e : testCases) {
      String classname = e.attributeValue("classname");
      if (classname == null) {
        classname = suite.attributeValue("name");
      }
      
      addCase(new FlakyCaseResult(this, e, classname, keepLongStdio));
    }
    
    String stdout = FlakyCaseResult.possiblyTrimStdio(cases, keepLongStdio, suite.elementText("system-out"));
    String stderr = FlakyCaseResult.possiblyTrimStdio(cases, keepLongStdio, suite.elementText("system-err"));
    if (stdout==null && stderr==null) {
      Matcher m = SUREFIRE_FILENAME.matcher(xmlReport.getName());
      if (m.matches()) {
        File mavenOutputFile = new File(xmlReport.getParentFile(),m.group(1)+"-output.txt");
        if (mavenOutputFile.exists()) {
          try {
            stdout = FlakyCaseResult.possiblyTrimStdio(cases, keepLongStdio, mavenOutputFile);
          }
           catch (IOException e) {
            throw new IOException("Failed to read "+mavenOutputFile,e);
          }
          
        }
        
      }
      
    }
    
    this.stdout = stdout;
    this.stderr = stderr;
  }
  
   void addCase(FlakyCaseResult cr) {
    cases.add(cr);
    casesByName().put(cr.getName(), cr);
    duration += cr.getDuration();
  }
  
  public String getName() {
    return name;
  }
  
  public float getDuration() {
    return duration;
  }
  
  public String getStdout() {
    return stdout;
  }
  
  public String getStderr() {
    return stderr;
  }
  
  public String getFile() {
    return file;
  }
  
  public FlakyTestResult getParent() {
    return parent;
  }
  
  public String getTimestamp() {
    return timestamp;
  }
  
  public String getId() {
    return id;
  }
  
  public List<FlakyCaseResult> getCases() {
    return cases;
  }
  
  public FlakySuiteResult getPreviousResult() {
    hudson.tasks.test.TestResult pr = parent.getPreviousResult();
    if (pr == null) {
      return null;
    }
    
    if (pr instanceof com.google.jenkins.flakyTestHandler.junit.FlakyTestResult) {
      return ((FlakyTestResult) pr).getSuite(name);
    }
    
    return null;
  }
  
  public FlakyCaseResult getCase(String name) {
    return casesByName().get(name);
  }
  
  public Set<String> getClassNames() {
    Set<String> result = new HashSet<String>();
    for (FlakyCaseResult c : cases) {
      result.add(c.getClassName());
    }
    
    return result;
  }
  
  void setParent(FlakyTestResult parent) {
    this.parent = parent;
  }
  
   boolean freeze(FlakyTestResult owner) {
    if(this.parent!=null) return false;   
    this.parent = owner;
    for (FlakyCaseResult c : cases){
      c.freeze(this);
}
    return true;
  }
  
  private static final long serialVersionUID = 1L;
  private static final Pattern SUREFIRE_FILENAME = Pattern.compile("TEST-(.+)\\.xml");
}


