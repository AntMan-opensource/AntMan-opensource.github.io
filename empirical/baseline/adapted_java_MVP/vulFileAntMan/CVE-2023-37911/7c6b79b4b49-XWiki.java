package com.xpn.xwiki.api;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.job.Job;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.job.event.status.JobStatus.State;
import org.xwiki.model.EntityType;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.PageReference;
import org.xwiki.model.reference.SpaceReference;
import org.xwiki.model.reference.WikiReference;
import org.xwiki.rendering.renderer.PrintRendererFactory;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.security.authorization.ContextualAuthorizationManager;
import org.xwiki.security.authorization.Right;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.DocumentRevisionProvider;
import com.xpn.xwiki.doc.XWikiDeletedDocument;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.internal.XWikiInitializerJob;
import com.xpn.xwiki.internal.XWikiInitializerJobStatus;
import com.xpn.xwiki.objects.meta.MetaClass;
import com.xpn.xwiki.user.api.XWikiUser;
import com.xpn.xwiki.util.Programming;
import com.xpn.xwiki.web.Utils;
import com.xpn.xwiki.web.XWikiEngineContext;
import com.xpn.xwiki.web.XWikiURLFactory;
public class XWiki extends Api {
    protected static final Logger LOGGER = LoggerFactory.getLogger(XWiki.class);
    private com.xpn.xwiki.XWiki xwiki;
    private StatsService statsService;
    private CriteriaService criteriaService;
    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;
    private DocumentReferenceResolver<String> defaultDocumentReferenceResolver;
    private EntityReferenceSerializer<String> defaultStringEntityReferenceSerializer;
    private DocumentReferenceResolver<EntityReference> currentgetdocumentResolver;
    private DocumentRevisionProvider documentRevisionProvider;
    private ContextualAuthorizationManager contextualAuthorizationManager;
    public XWiki(com.xpn.xwiki.XWiki xwiki, XWikiContext context) {
        super(context);
        this.xwiki = xwiki;
        this.statsService = new StatsService(context);
        this.criteriaService = new CriteriaService(context);
    }
    
    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver() {
        if (this.currentMixedDocumentReferenceResolver == null) {
            this.currentMixedDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, "currentmixed");
        }
        
        return this.currentMixedDocumentReferenceResolver;
    }
    
    private DocumentReferenceResolver<EntityReference> getCurrentgetdocumentResolver() {
        if (this.currentgetdocumentResolver == null) {
            this.currentgetdocumentResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_REFERENCE, "currentgetdocument");
        }
        
        return this.currentgetdocumentResolver;
    }
    
    private DocumentReferenceResolver<String> getDefaultDocumentReferenceResolver() {
        if (this.defaultDocumentReferenceResolver == null) {
            this.defaultDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING);
        }
        
        return this.defaultDocumentReferenceResolver;
    }
    
    private EntityReferenceSerializer<String> getDefaultStringEntityReferenceSerializer() {
        if (this.defaultStringEntityReferenceSerializer == null) {
            this.defaultStringEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);
        }
        
        return this.defaultStringEntityReferenceSerializer;
    }
    
    private DocumentRevisionProvider getDocumentRevisionProvider() {
        if (this.documentRevisionProvider == null) {
            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);
        }
        
        return this.documentRevisionProvider;
    }
    
    public com.xpn.xwiki.XWiki getXWiki() {
        if (hasProgrammingRights()) {
            return this.xwiki;
        }
        
        return null;
    }
    
    public XWikiInitializerJobStatus getJobStatus() {
        XWikiInitializerJob job = Utils.getComponent((Type) Job.class, XWikiInitializerJob.JOBTYPE);
        return job != null ? job.getStatus() : null;
    }
    
    public JobStatus getCurrentInitializerJobStatus() {
        JobStatus jobStatus = getJobStatus();
        if (jobStatus == null) {
            return null;
        }
        
        if (jobStatus.getState() != State.FINISHED) {
            return jobStatus;
        }
        
        if (this.xwiki != null) {
            Job wikiJob = this.xwiki.getWikiInitializerJob(this.context.getWikiId());
            jobStatus = wikiJob != null ? wikiJob.getStatus() : null;
        }
        
        return jobStatus;
    }
    
    public String getVersion() {
        return this.xwiki.getVersion();
    }
    
    public String getRequestURL() throws XWikiException {
        return getXWikiContext().getURLFactory().getRequestURL(getXWikiContext()).toString();
    }
    
    public String getRelativeRequestURL() throws XWikiException {
        XWikiURLFactory urlFactory = getXWikiContext().getURLFactory();
        return urlFactory.getURL(urlFactory.getRequestURL(getXWikiContext()), getXWikiContext());
    }
    
    public Document getDocument(String documentReference) throws XWikiException {
        DocumentReference reference;
        if (documentReference != null) {
            reference = getCurrentMixedDocumentReferenceResolver().resolve(documentReference);
        }
         else {
            reference = getDefaultDocumentReferenceResolver().resolve("");
        }
        
        return getDocument(reference);
    }
    
    public Document getEntityDocument(String reference, EntityType type) throws XWikiException {
        XWikiDocument doc = this.xwiki.getDocument(reference, type, getXWikiContext());
        if (!getContextualAuthorizationManager().hasAccess(Right.VIEW, doc.getDocumentReference())) {
            return null;
        }
        
        return doc.newDocument(getXWikiContext());
    }
    
    public Document getDocument(DocumentReference reference) throws XWikiException {
        try {
            XWikiDocument doc = this.xwiki.getDocument(reference, getXWikiContext());
            if (this.xwiki.getRightService().hasAccessLevel("view", getXWikiContext().getUser(), doc.getPrefixedFullName(), getXWikiContext()) == false) {
                return null;
            }
            
            return doc.newDocument(getXWikiContext());
        }
         catch (Exception ex) {
            LOGGER.warn("Failed to access document [{}]. Root reason: [{}]", reference, ExceptionUtils.getRootCauseMessage(ex));
            return new Document(new XWikiDocument(reference), getXWikiContext());
        }
        
    }
    
    public Document getDocument(EntityReference reference) throws XWikiException {
        return getDocument(this.xwiki.getDocumentReference(reference, getXWikiContext()));
    }
    
    public Document getDocumentAsAuthor(String fullName) throws XWikiException {
        DocumentReference reference;
        if (fullName != null) {
            reference = getCurrentMixedDocumentReferenceResolver().resolve(fullName);
        }
         else {
            reference = getDefaultDocumentReferenceResolver().resolve("");
        }
        
        return getDocumentAsAuthor(reference);
    }
    
    public Document getDocumentAsAuthor(DocumentReference reference) throws XWikiException {
        if (!getAuthorizationManager().hasAccess(Right.VIEW, getEffectiveAuthorReference(), reference)) {
            return null;
        }
        
        return this.xwiki.getDocument(reference, getXWikiContext()).newDocument(getXWikiContext());
    }
    
    public List<DeletedDocument> getDeletedDocuments(String fullname, String locale) throws XWikiException {
        XWikiDeletedDocument[] deletedDocuments = this.xwiki.getDeletedDocuments(fullname, locale, this.context);
        List<DeletedDocument> result = wrapDeletedDocuments(deletedDocuments);
        return result;
    }
    
    public List<DeletedDocument> getDeletedDocuments(String batchId) throws XWikiException {
        XWikiDeletedDocument[] deletedDocuments = this.xwiki.getDeletedDocuments(batchId, this.context);
        List<DeletedDocument> result = wrapDeletedDocuments(deletedDocuments);
        return result;
    }
    
    private List<DeletedDocument> wrapDeletedDocuments(XWikiDeletedDocument[] deletedDocuments) {
        if (deletedDocuments == null || deletedDocuments.length == 0) {
            return Collections.emptyList();
        }
        
        List<DeletedDocument> result = new ArrayList<>(deletedDocuments.length);
        for (XWikiDeletedDocument deletedDocument : deletedDocuments) {
            result.add(new DeletedDocument(deletedDocument, this.context));
        }
        
        return result;
    }
    
    public DeletedDocument getDeletedDocument(String fullname, String locale, String index) throws XWikiException {
        return getDeletedDocument(index);
    }
    
    public DeletedDocument getDeletedDocument(String index) throws XWikiException {
        if (!NumberUtils.isDigits(index)) {
            return null;
        }
        
        XWikiDeletedDocument dd = this.xwiki.getDeletedDocument(Long.parseLong(index), this.context);
        if (dd == null) {
            return null;
        }
        
        return new DeletedDocument(dd, this.context);
    }
    
    public List<DeletedAttachment> getDeletedAttachments(String docName) {
        try {
            List<com.xpn.xwiki.doc.DeletedAttachment> attachments = this.xwiki.getDeletedAttachments(docName, this.context);
            if (attachments == null || attachments.isEmpty()) {
                attachments = Collections.emptyList();
            }
            
            List<DeletedAttachment> result = new ArrayList<DeletedAttachment>(attachments.size());
            for (com.xpn.xwiki.doc.DeletedAttachment attachment : attachments) {
                result.add(new DeletedAttachment(attachment, this.context));
            }
            
            return result;
        }
         catch (Exception ex) {
            LOGGER.warn("Failed to retrieve deleted attachments", ex);
        }
        
        return Collections.emptyList();
    }
    
    public List<DeletedAttachment> getDeletedAttachments(String docName, String filename) {
        try {
            List<com.xpn.xwiki.doc.DeletedAttachment> attachments = this.xwiki.getDeletedAttachments(docName, filename, this.context);
            if (attachments == null) {
                attachments = Collections.emptyList();
            }
            
            List<DeletedAttachment> result = new ArrayList<DeletedAttachment>(attachments.size());
            for (com.xpn.xwiki.doc.DeletedAttachment attachment : attachments) {
                result.add(new DeletedAttachment(attachment, this.context));
            }
            
            return result;
        }
         catch (Exception ex) {
            LOGGER.warn("Failed to retrieve deleted attachments", ex);
        }
        
        return Collections.emptyList();
    }
    
    public DeletedAttachment getDeletedAttachment(String id) {
        try {
            com.xpn.xwiki.doc.DeletedAttachment attachment = this.xwiki.getDeletedAttachment(id, this.context);
            if (attachment != null) {
                return new DeletedAttachment(attachment, this.context);
            }
            
        }
         catch (Exception ex) {
            LOGGER.warn("Failed to retrieve deleted attachment", ex);
        }
        
        return null;
    }
    
    public boolean exists(String fullname) throws XWikiException {
        return this.xwiki.exists(fullname, getXWikiContext());
    }
    
    public boolean exists(DocumentReference reference) throws XWikiException {
        return this.xwiki.exists(reference, getXWikiContext());
    }
    
    public boolean exists(PageReference reference) throws XWikiException {
        return this.xwiki.exists(reference, getXWikiContext());
    }
    
    public boolean checkAccess(String docname, String right) {
        try {
            DocumentReference docReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);
            XWikiDocument doc = getXWikiContext().getWiki().getDocument(docReference, this.context);
            return getXWikiContext().getWiki().checkAccess(right, doc, getXWikiContext());
        }
         catch (XWikiException e) {
            return false;
        }
        
    }
    
    public Document getDocument(String space, String fullname) throws XWikiException {
        XWikiDocument doc = this.xwiki.getDocument(space, fullname, getXWikiContext());
        if (this.xwiki.getRightService().hasAccessLevel("view", getXWikiContext().getUser(), doc.getFullName(), getXWikiContext()) == false) {
            return null;
        }
        
        return doc.newDocument(getXWikiContext());
    }
    
    public Document getDocument(Document doc, String rev) throws XWikiException {
        if (doc == null || doc.getDoc() == null) {
            return null;
        }
        
        if (!getContextualAuthorizationManager().hasAccess(Right.VIEW, doc.getDocumentReference())) {
            return null;
        }
        
        return doc.getDocumentRevision(rev);
    }
    
    public Document getDocument(DocumentReference reference, String revision) throws XWikiException {
        try {
            if (reference != null && getContextualAuthorizationManager().hasAccess(Right.VIEW, reference)) {
                XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(reference, revision);
                if (documentRevision != null) {
                    return new Document(documentRevision, this.context);
                }
                
            }
            
        }
         catch (Exception e) {
            LOGGER.error("Failed to access revision [{}] of document {}", revision, reference, e);
        }
        
        return null;
    }
    
    public String getTextArea(String content) {
        return com.xpn.xwiki.XWiki.getTextArea(content, getXWikiContext());
    }
    
    public List<String> getClassList() throws XWikiException {
        return this.xwiki.getClassList(getXWikiContext());
    }
    
    public MetaClass getMetaclass() {
        return this.xwiki.getMetaclass();
    }
    
    public List<String> searchDocuments(String wheresql) throws XWikiException {
        return this.xwiki.getStore().searchDocumentsNames(wheresql, getXWikiContext());
    }
    
    public List<String> searchDocuments(String wheresql, int nb, int start) throws XWikiException {
        return this.xwiki.getStore().searchDocumentsNames(wheresql, nb, start, getXWikiContext());
    }
    
    public List<String> searchDocuments(String wheresql, int nb, int start, String selectColumns) throws XWikiException {
        if (hasProgrammingRights()) {
            return this.xwiki.getStore().searchDocumentsNames(wheresql, nb, start, selectColumns, getXWikiContext());
        }
        
        return Collections.emptyList();
    }
    
    public List<Document> searchDocuments(String wheresql, boolean distinctbylocale) throws XWikiException {
        return convert(this.xwiki.getStore().searchDocuments(wheresql, distinctbylocale, getXWikiContext()));
    }
    
    public List<Document> searchDocuments(String wheresql, boolean distinctbylocale, int nb, int start) throws XWikiException {
        return convert(this.xwiki.getStore().searchDocuments(wheresql, distinctbylocale, nb, start, getXWikiContext()));
    }
    
    public List<String> searchDocuments(String parameterizedWhereClause, int maxResults, int startOffset, List<?> parameterValues) throws XWikiException {
        return this.xwiki.getStore().searchDocumentsNames(parameterizedWhereClause, maxResults, startOffset, parameterValues, getXWikiContext());
    }
    
    public List<String> searchDocuments(String parameterizedWhereClause, List<?> parameterValues) throws XWikiException {
        return this.xwiki.getStore().searchDocumentsNames(parameterizedWhereClause, parameterValues, getXWikiContext());
    }
    
    public List<String> searchDocumentsNames(String wikiName, String parameterizedWhereClause, int maxResults, int startOffset, List<?> parameterValues) throws XWikiException {
        String database = this.context.getWikiId();
        try {
            this.context.setWikiId(wikiName);
            return searchDocuments(parameterizedWhereClause, maxResults, startOffset, parameterValues);
        }
         finally {
            this.context.setWikiId(database);
        }
        
    }
    
    public List<String> searchSpacesNames(String parametrizedSqlClause, int nb, int start, List<?> parameterValues) throws XWikiException {
        return this.xwiki.getStore().search("select distinct doc.space from XWikiDocument doc " + parametrizedSqlClause, nb, start, parameterValues, this.context);
    }
    
    public List<Attachment> searchAttachments(String parametrizedSqlClause, int nb, int start, List<?> parameterValues) throws XWikiException {
        return convertAttachments( this.xwiki.searchAttachments(parametrizedSqlClause, true, nb, start, parameterValues, this.context));
    }
    
    public int countAttachments(String parametrizedSqlClause, List<?> parameterValues) throws XWikiException {
        return this.xwiki.countAttachments(parametrizedSqlClause, parameterValues, this.context);
    }
    
    public List<Document> wrapDocs(List<?> docs) {
        List<Document> result = new ArrayList<Document>();
        if (docs != null) {
            for (java.lang.Object obj : docs) {
                try {
                    if (obj instanceof XWikiDocument) {
                        XWikiDocument doc = (XWikiDocument) obj;
                        Document wrappedDoc = doc.newDocument(getXWikiContext());
                        result.add(wrappedDoc);
                    }
                     else if (obj instanceof Document) {
                        result.add((Document) obj);
                    }
                     else if (obj instanceof String) {
                        Document doc = getDocument(obj.toString());
                        if (doc != null) {
                            result.add(doc);
                        }
                        
                    }
                    
                }
                 catch (XWikiException ex) {
                }
                
            }
            
        }
        
        return result;
    }
    
    public String parseContent(String content) {
        return this.xwiki.parseContent(content, getXWikiContext());
    }
    
    public String parseTemplate(String template) {
        return this.xwiki.parseTemplate(template, getXWikiContext());
    }
    
    public String renderTemplate(String template) {
        return this.xwiki.renderTemplate(template, getXWikiContext());
    }
    
    public String getSkinFile(String filename) {
        return this.xwiki.getSkinFile(filename, getXWikiContext());
    }
    
    public String getSkinFile(String filename, boolean forceSkinAction) {
        return this.xwiki.getSkinFile(filename, forceSkinAction, getXWikiContext());
    }
    
    public String getSkin() {
        return this.xwiki.getSkin(getXWikiContext());
    }
    
    public String getBaseSkin() {
        return this.xwiki.getBaseSkin(getXWikiContext());
    }
    
    public String getSpaceCopyright() {
        return this.xwiki.getSpaceCopyright(getXWikiContext());
    }
    
    public String getXWikiPreference(String preference) {
        return this.xwiki.getXWikiPreference(preference, getXWikiContext());
    }
    
    public String getXWikiPreference(String preference, String defaultValue) {
        return this.xwiki.getXWikiPreference(preference, defaultValue, getXWikiContext());
    }
    
    public String getSpacePreference(String preference) {
        return this.xwiki.getSpacePreference(preference, getXWikiContext());
    }
    
    public String getSpacePreference(String preference, String defaultValue) {
        return this.xwiki.getSpacePreference(preference, defaultValue, getXWikiContext());
    }
    
    public String getSkinPreference(String preference) {
        return this.xwiki.getSkinPreference(preference, getXWikiContext());
    }
    
    public String getSkinPreference(String preference, String defaultValue) {
        return this.xwiki.getSkinPreference(preference, defaultValue, getXWikiContext());
    }
    
    public String getSpacePreferenceFor(String preference, SpaceReference spaceReference) {
        return this.xwiki.getSpacePreference(preference, spaceReference, getXWikiContext());
    }
    
    public String getSpacePreferenceFor(String preference, SpaceReference spaceReference, String defaultValue) {
        return this.xwiki.getSpacePreference(preference, spaceReference, defaultValue, getXWikiContext());
    }
    
    public long getXWikiPreferenceAsLong(String preference, long defaultValue) {
        return this.xwiki.getXWikiPreferenceAsLong(preference, defaultValue, getXWikiContext());
    }
    
    public long getXWikiPreferenceAsLong(String preference) {
        return this.xwiki.getXWikiPreferenceAsLong(preference, getXWikiContext());
    }
    
    public long getSpacePreferenceAsLong(String preference, long defaultValue) {
        return this.xwiki.getSpacePreferenceAsLong(preference, defaultValue, getXWikiContext());
    }
    
    public long getSpacePreferenceAsLong(String preference) {
        return this.xwiki.getSpacePreferenceAsLong(preference, getXWikiContext());
    }
    
    public int getXWikiPreferenceAsInt(String preference, int defaultValue) {
        return this.xwiki.getXWikiPreferenceAsInt(preference, defaultValue, getXWikiContext());
    }
    
    public int getXWikiPreferenceAsInt(String preference) {
        return this.xwiki.getXWikiPreferenceAsInt(preference, getXWikiContext());
    }
    
    public int getSpacePreferenceAsInt(String preference, int defaultValue) {
        return this.xwiki.getSpacePreferenceAsInt(preference, defaultValue, getXWikiContext());
    }
    
    public int getSpacePreferenceAsInt(String preference) {
        return this.xwiki.getSpacePreferenceAsInt(preference, getXWikiContext());
    }
    
    public String getUserPreference(String preference) {
        return this.xwiki.getUserPreference(preference, getXWikiContext());
    }
    
    public String getUserPreferenceFromCookie(String preference) {
        return this.xwiki.getUserPreferenceFromCookie(preference, getXWikiContext());
    }
    
    public String getLanguagePreference() {
        return this.xwiki.getLanguagePreference(getXWikiContext());
    }
    
    public Locale getLocalePreference() {
        return this.xwiki.getLocalePreference(getXWikiContext());
    }
    
    public String getInterfaceLanguagePreference() {
        return this.xwiki.getInterfaceLanguagePreference(getXWikiContext());
    }
    
    public Locale getInterfaceLocalePreference() {
        return this.xwiki.getInterfaceLocalePreference(getXWikiContext());
    }
    
    public List<Locale> getAvailableLocales() {
        return this.xwiki.getAvailableLocales(getXWikiContext());
    }
    
    public List<String> getWikiNames() {
        List<String> result = new ArrayList<String>();
        try {
            result = this.xwiki.getVirtualWikisDatabaseNames(getXWikiContext());
        }
         catch (Exception e) {
            LOGGER.error("Failed to get the list of all wiki names", e);
        }
        
        return result;
    }
    
    public boolean hasSubWikis() {
        return getWikiNames().size() > 1;
    }
    
    public boolean isMultiLingual() {
        return this.xwiki.isMultiLingual(getXWikiContext());
    }
    
    public void flushCache() {
        if (hasProgrammingRights()) {
            this.xwiki.flushCache(getXWikiContext());
        }
        
    }
    
    public int createUser() throws XWikiException {
        return createUser(false, "edit");
    }
    
    public int createUser(boolean withValidation) throws XWikiException {
        return createUser(withValidation, "edit");
    }
    
    public int createUser(boolean withValidation, String userRights) throws XWikiException {
        boolean registerRight;
        try {
            if (hasProgrammingRights()) {
                registerRight = true;
            }
             else {
                registerRight = this.xwiki.getRightService().hasAccessLevel("register", getXWikiContext().getUser(), "XWiki.XWikiPreferences", getXWikiContext());
            }
            
            if (registerRight) {
                return this.xwiki.createUser(withValidation, userRights, getXWikiContext());
            }
            
            return -1;
        }
         catch (Exception e) {
            LOGGER.error("Failed to create user", e);
            return -10;
        }
        
    }
    
    public int validateUser(boolean withConfirmEmail) throws XWikiException {
        return this.xwiki.validateUser(withConfirmEmail, getXWikiContext());
    }
    
    public void addToAllGroup(String fullwikiname) throws XWikiException {
        if (hasProgrammingRights()) {
            this.xwiki.setUserDefaultGroup(fullwikiname, getXWikiContext());
        }
        
    }
    
    public void sendConfirmationMail(String xwikiname, String password, String email, String add_message, String contentfield) throws XWikiException {
        if (hasProgrammingRights()) {
            this.xwiki.sendConfirmationEmail(xwikiname, password, email, add_message, contentfield, getXWikiContext());
        }
        
    }
    
    public void sendConfirmationMail(String xwikiname, String password, String email, String contentfield) throws XWikiException {
        if (hasProgrammingRights()) {
            this.xwiki.sendConfirmationEmail(xwikiname, password, email, "", contentfield, getXWikiContext());
        }
        
    }
    
    public boolean renameDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, boolean overwrite, List<DocumentReference> backlinkDocumentReferences, List<DocumentReference> childDocumentReferences) throws XWikiException {
        if (hasAccess(Right.DELETE, sourceDocumentReference) && ((overwrite && hasAccess(Right.DELETE, targetDocumentReference)) || (!overwrite && hasAccess(Right.EDIT, targetDocumentReference)))) {
            return this.xwiki.renameDocument(sourceDocumentReference, targetDocumentReference, overwrite, backlinkDocumentReferences, childDocumentReferences, getXWikiContext());
        }
        
        return false;
    }
    
    public boolean copyDocument(String docname, String targetdocname) throws XWikiException {
        return this.copyDocument(docname, targetdocname, null, null, null, false, false);
    }
    
    public boolean copyDocument(String docname, String targetdocname, String wikilocale) throws XWikiException {
        return this.copyDocument(docname, targetdocname, null, null, wikilocale, false, false);
    }
    
    public boolean copyDocument(String docname, String sourceWiki, String targetWiki, String wikilocale) throws XWikiException {
        return this.copyDocument(docname, docname, sourceWiki, targetWiki, wikilocale, true, false);
    }
    
    public boolean copyDocument(String docname, String targetdocname, String sourceWiki, String targetWiki, String wikilocale, boolean reset) throws XWikiException {
        return this.copyDocument(docname, targetdocname, sourceWiki, targetWiki, wikilocale, reset, false);
    }
    
    public boolean copyDocument(String docname, String targetdocname, String sourceWiki, String targetWiki, String wikilocale, boolean reset, boolean force) throws XWikiException {
        DocumentReference sourceDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(docname);
        if (!StringUtils.isEmpty(sourceWiki)) {
            sourceDocumentReference = sourceDocumentReference.replaceParent(sourceDocumentReference.getWikiReference(), new WikiReference(sourceWiki));
        }
        
        DocumentReference targetDocumentReference = getCurrentMixedDocumentReferenceResolver().resolve(targetdocname);
        if (!StringUtils.isEmpty(targetWiki)) {
            targetDocumentReference = targetDocumentReference.replaceParent(targetDocumentReference.getWikiReference(), new WikiReference(targetWiki));
        }
        
        return this.copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, reset, force);
    }
    
    public boolean copyDocument(DocumentReference sourceDocumentReference, DocumentReference targetDocumentReference, String wikilocale, boolean resetHistory, boolean overwrite) throws XWikiException {
        if (hasAccessLevel("view", getDefaultStringEntityReferenceSerializer().serialize(sourceDocumentReference))) {
            String targetDocStringRef = getDefaultStringEntityReferenceSerializer().serialize(targetDocumentReference);
            if (hasAccessLevel("edit", targetDocStringRef) && (!overwrite || !exists(targetDocumentReference) || hasAccessLevel("delete", targetDocStringRef))) {
                return this.xwiki.copyDocument(sourceDocumentReference, targetDocumentReference, wikilocale, resetHistory, overwrite, true, getXWikiContext());
            }
            
        }
        
        return false;
    }
    
    public int copySpaceBetweenWikis(String space, String sourceWiki, String targetWiki, String locale, boolean clean) throws XWikiException {
        if (hasProgrammingRights()) {
            return this.xwiki.copySpaceBetweenWikis(space, sourceWiki, targetWiki, locale, clean, getXWikiContext());
        }
        
        return -1;
    }
    
    public String includeTopic(String topic) throws XWikiException {
        return includeTopic(topic, true);
    }
    
    public String includeForm(String topic) throws XWikiException {
        return includeForm(topic, true);
    }
    
    public String includeTopic(String topic, boolean pre) throws XWikiException {
        String result = this.xwiki.include(topic, false, getXWikiContext());
        if (pre) {
            String includerSyntax = this.xwiki.getCurrentContentSyntaxId(null, this.context);
            if (includerSyntax != null && Syntax.XWIKI_1_0.toIdString().equals(includerSyntax)) {
                result = "{pre}" + result + "{/pre}";
            }
            
        }
        
        return result;
    }
    
    public String includeForm(String topic, boolean pre) throws XWikiException {
        String result = this.xwiki.include(topic, true, getXWikiContext());
        if (pre) {
            String includerSyntax = this.xwiki.getCurrentContentSyntaxId(null, this.context);
            if (includerSyntax != null && Syntax.XWIKI_1_0.toIdString().equals(includerSyntax)) {
                result = "{pre}" + result + "{/pre}";
            }
            
        }
        
        return result;
    }
    
    public boolean hasAccessLevel(String level) {
        return hasAccessLevel(level, getXWikiContext().getUser(), getXWikiContext().getDoc().getFullName());
    }
    
    public boolean hasAccessLevel(String level, String user, String docname) {
        try {
            return this.xwiki.getRightService().hasAccessLevel(level, user, docname, getXWikiContext());
        }
         catch (Exception e) {
            return false;
        }
        
    }
    
    public List<String> getSpaces() throws XWikiException {
        return this.xwiki.getSpaces(getXWikiContext());
    }
    
    public List<String> getSpaceDocsName(String spaceReference) throws XWikiException {
        return this.xwiki.getSpaceDocsName(spaceReference, getXWikiContext());
    }
    
    public String getEncoding() {
        return this.xwiki.getEncoding();
    }
    
    public String getAttachmentURL(String fullname, String filename) throws XWikiException {
        if (StringUtils.isAnyEmpty(fullname, filename)) {
            return "";
        }
        
        return this.xwiki.getAttachmentURL(fullname, filename, getXWikiContext());
    }
    
    public String getURL(String fullname) throws XWikiException {
        return this.xwiki.getURL(fullname, "view", getXWikiContext());
    }
    
    public String getURL(EntityReference reference) throws XWikiException {
        return this.xwiki.getURL(reference, getXWikiContext());
    }
    
    public String getURL(EntityReference reference, String action, String querystring) throws XWikiException {
        return this.xwiki.getURL(reference, action, querystring, null, getXWikiContext());
    }
    
    public String getURL(DocumentReference reference) throws XWikiException {
        return this.xwiki.getURL(reference, "view", getXWikiContext());
    }
    
    public String getURL(String fullname, String action) throws XWikiException {
        return this.xwiki.getURL(fullname, action, getXWikiContext());
    }
    
    public String getURL(String fullname, String action, String querystring) throws XWikiException {
        return this.xwiki.getURL(fullname, action, querystring, getXWikiContext());
    }
    
    public String getURL(DocumentReference reference, String action, String querystring) throws XWikiException {
        return this.xwiki.getURL(reference, action, querystring, null, getXWikiContext());
    }
    
    public String getURL(String fullname, String action, String querystring, String anchor) throws XWikiException {
        return this.xwiki.getURL(fullname, action, querystring, anchor, getXWikiContext());
    }
    
    public String getRefererText(String referer) {
        try {
            return this.xwiki.getRefererText(referer, getXWikiContext());
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public String getShortRefererText(String referer, int length) {
        try {
            return this.xwiki.getRefererText(referer, getXWikiContext()).substring(0, length);
        }
         catch (Exception e) {
            return this.xwiki.getRefererText(referer, getXWikiContext());
        }
        
    }
    
    public String getPlainUserName(DocumentReference userReference) {
        return this.xwiki.getPlainUserName(userReference, getXWikiContext());
    }
    
    public String getUserName(String user) {
        return this.xwiki.getUserName(user, null, getXWikiContext());
    }
    
    public String getUserName(String user, String format) {
        return this.xwiki.getUserName(user, format, getXWikiContext());
    }
    
    public String getLocalUserName(String user) {
        try {
            return this.xwiki.getUserName(user.substring(user.indexOf(":") + 1), null, getXWikiContext());
        }
         catch (Exception e) {
            return this.xwiki.getUserName(user, null, getXWikiContext());
        }
        
    }
    
    public String getLocalUserName(String user, String format) {
        try {
            return this.xwiki.getUserName(user.substring(user.indexOf(":") + 1), format, getXWikiContext());
        }
         catch (Exception e) {
            return this.xwiki.getUserName(user, format, getXWikiContext());
        }
        
    }
    
    public String getUserName(String user, boolean link) {
        return this.xwiki.getUserName(user, null, link, getXWikiContext());
    }
    
    public String getUserName(String user, String format, boolean link) {
        return this.xwiki.getUserName(user, format, link, getXWikiContext());
    }
    
    public String getLocalUserName(String user, boolean link) {
        try {
            return this.xwiki.getUserName(user.substring(user.indexOf(":") + 1), null, link, getXWikiContext());
        }
         catch (Exception e) {
            return this.xwiki.getUserName(user, null, link, getXWikiContext());
        }
        
    }
    
    public String getLocalUserName(String user, String format, boolean link) {
        try {
            return this.xwiki.getUserName(user.substring(user.indexOf(":") + 1), format, link, getXWikiContext());
        }
         catch (Exception e) {
            return this.xwiki.getUserName(user, format, link, getXWikiContext());
        }
        
    }
    
    public User getUser() {
        return this.xwiki.getUser(getXWikiContext());
    }
    
    public User getUser(String username) {
        return this.xwiki.getUser(username, getXWikiContext());
    }
    
    public User getUser(DocumentReference userReference) {
        return this.xwiki.getUser(userReference, getXWikiContext());
    }
    
    public String formatDate(Date date) {
        return this.xwiki.formatDate(date, null, getXWikiContext());
    }
    
    public String formatDate(Date date, String format) {
        return this.xwiki.formatDate(date, format, getXWikiContext());
    }
    
    public String getUserTimeZone() {
        return this.xwiki.getUserTimeZone(this.context);
    }
    
    public Api get(String name) {
        return getPlugin(name);
    }
    
    public Api getPlugin(String name) {
        return this.xwiki != null ? this.xwiki.getPluginApi(name, getXWikiContext()) : null;
    }
    
    public String getAdType() {
        return this.xwiki.getAdType(getXWikiContext());
    }
    
    public String getAdClientId() {
        return this.xwiki.getAdClientId(getXWikiContext());
    }
    
    public String getURLContent(String surl, String username, String password) throws IOException {
        if (!hasProgrammingRights()) {
            return "";
        }
        
        try {
            return this.xwiki.getURLContent(surl, username, password, this.context);
        }
         catch (Exception e) {
            LOGGER.warn("Failed to retrieve content from [" + surl + "]", e);
            return "";
        }
        
    }
    
    public String getURLContent(String surl) throws IOException {
        if (!hasProgrammingRights()) {
            return "";
        }
        
        try {
            return this.xwiki.getURLContent(surl, this.context);
        }
         catch (Exception e) {
            LOGGER.warn("Failed to retrieve content from [" + surl + "]", e);
            return "";
        }
        
    }
    
    public String getURLContent(String surl, String username, String password, int timeout) throws IOException {
        if (!hasProgrammingRights()) {
            return "";
        }
        
        try {
            return this.xwiki.getURLContent(surl, username, password, timeout, this.xwiki.getHttpUserAgent(this.context));
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public String getURLContent(String surl, int timeout) throws IOException {
        if (!hasProgrammingRights()) {
            return "";
        }
        
        try {
            return this.xwiki.getURLContent(surl, timeout, this.xwiki.getHttpUserAgent(this.context));
        }
         catch (Exception e) {
            return "";
        }
        
    }
    
    public byte[] getURLContentAsBytes(String surl, String username, String password) throws IOException {
        if (!hasProgrammingRights()) {
            return null;
        }
        
        try {
            return this.xwiki.getURLContentAsBytes(surl, username, password, this.context);
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public byte[] getURLContentAsBytes(String surl) throws IOException {
        if (!hasProgrammingRights()) {
            return null;
        }
        
        try {
            return this.xwiki.getURLContentAsBytes(surl, this.context);
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public List<String> getIncludedMacros(String defaultSpace, String content) {
        return this.xwiki.getIncludedMacros(defaultSpace, content, getXWikiContext());
    }
    
    public boolean isReadOnly() {
        return this.xwiki.isReadOnly();
    }
    
    public void setReadOnly(boolean ro) {
        if (hasAdminRights()) {
            this.xwiki.setReadOnly(ro);
        }
        
    }
    
    public void refreshLinks() throws XWikiException {
        if (hasAdminRights()) {
            this.xwiki.refreshLinks(getXWikiContext());
        }
        
    }
    
    public boolean hasBacklinks() throws XWikiException {
        return this.xwiki.hasBacklinks(getXWikiContext());
    }
    
    public boolean hasTags() throws XWikiException {
        return this.xwiki.hasTags(getXWikiContext());
    }
    
    public boolean hasEditComment() {
        return this.xwiki.hasEditComment(this.context);
    }
    
    public boolean isEditCommentFieldHidden() {
        return this.xwiki.isEditCommentFieldHidden(this.context);
    }
    
    public boolean isEditCommentSuggested() {
        return this.xwiki.isEditCommentSuggested(this.context);
    }
    
    public boolean isEditCommentMandatory() {
        return this.xwiki.isEditCommentMandatory(this.context);
    }
    
    public boolean hasMinorEdit() {
        return this.xwiki.hasMinorEdit(this.context);
    }
    
    public boolean hasRecycleBin() {
        return this.xwiki.hasRecycleBin(this.context);
    }
    
    public String getEditorPreference() {
        return this.xwiki.getEditorPreference(getXWikiContext());
    }
    
    public java.lang.Object parseGroovyFromString(String script) throws XWikiException {
        if (hasProgrammingRights()) {
            return this.xwiki.parseGroovyFromString(script, getXWikiContext());
        }
        
        return "groovy_missingrights";
    }
    
    public java.lang.Object parseGroovyFromPage(String script, String jarWikiPage) throws XWikiException {
        XWikiDocument doc = this.xwiki.getDocument(script, getXWikiContext());
        if (this.xwiki.getRightService().hasProgrammingRights(doc, getXWikiContext())) {
            return this.xwiki.parseGroovyFromString(doc.getContent(), jarWikiPage, getXWikiContext());
        }
        
        return "groovy_missingrights";
    }
    
    public java.lang.Object parseGroovyFromPage(String fullname) throws XWikiException {
        XWikiDocument doc = this.xwiki.getDocument(fullname, getXWikiContext());
        if (this.xwiki.getRightService().hasProgrammingRights(doc, getXWikiContext())) {
            return this.xwiki.parseGroovyFromString(doc.getContent(), getXWikiContext());
        }
        
        return "groovy_missingrights";
    }
    
    public String getMacroList() {
        return this.xwiki.getMacroList(getXWikiContext());
    }
    
    public String getWysiwygToolbars() {
        return this.xwiki.getWysiwygToolbars(getXWikiContext());
    }
    
    public com.xpn.xwiki.api.Object getObjectFromRequest(String className) throws XWikiException {
        return new com.xpn.xwiki.api.Object(this.xwiki.getObjectFromRequest(className, getXWikiContext()), getXWikiContext());
    }
    
    public Document createDocument() {
        return new XWikiDocument().newDocument(getXWikiContext());
    }
    
    public String convertUsername(String username) {
        return this.xwiki.convertUsername(username, getXWikiContext());
    }
    
    public com.xpn.xwiki.api.PropertyClass getPropertyClassFromName(String propPath) {
        return new PropertyClass(this.xwiki.getPropertyClassFromName(propPath, getXWikiContext()), getXWikiContext());
    }
    
    public String getUniquePageName(String space) throws XWikiException {
        return this.xwiki.getUniquePageName(space, getXWikiContext());
    }
    
    public String getUniquePageName(String space, String name) throws XWikiException {
        return this.xwiki.getUniquePageName(space, name, getXWikiContext());
    }
    
    public String addTooltip(String html, String message, String params) {
        return this.xwiki.addTooltip(html, message, params, getXWikiContext());
    }
    
    public String addTooltip(String html, String message) {
        return this.xwiki.addTooltip(html, message, getXWikiContext());
    }
    
    public String addTooltipJS() {
        return this.xwiki.addTooltipJS(getXWikiContext());
    }
    
    public String addMandatory() {
        return this.xwiki.addMandatory(getXWikiContext());
    }
    
    public Class getClass(String documentName) throws XWikiException {
        DocumentReference docReference = getCurrentMixedDocumentReferenceResolver().resolve(documentName);
        return getClass(docReference);
    }
    
    public Class getClass(EntityReference docReference) throws XWikiException {
        return new Class(this.xwiki.getDocument(docReference, this.context).getXClass(), this.context);
    }
    
    public String getCounter(String name) {
        XWikiEngineContext econtext = this.context.getEngineContext();
        Integer counter = (Integer) econtext.getAttribute(name);
        if (counter == null) {
            counter = 0;
        }
        
        counter = counter.intValue() + 1;
        econtext.setAttribute(name, counter);
        return counter.toString();
    }
    
    public XWikiUser checkAuth() throws XWikiException {
        return this.context.getWiki().checkAuth(this.context);
    }
    
    public XWikiUser checkAuth(String username, String password, String rememberme) throws XWikiException {
        XWikiUser user = this.context.getWiki().getAuthService().checkAuth(username, password, rememberme, this.context);
        if (user.isDisabled(this.context)) {
            this.context.put(XWikiContext.INACTIVE_USER_REFERENCE, user.getUserReference());
            user = null;
        }
        
        return user;
    }
    
    public StatsService getStatsService() {
        return this.statsService;
    }
    
    public CriteriaService getCriteriaService() {
        return this.criteriaService;
    }
    
    public String getServletPath(String wikiName) {
        return this.xwiki.getServletPath(wikiName, this.context);
    }
    
    public String getServletPath() {
        return this.xwiki.getServletPath(this.context.getWikiId(), this.context);
    }
    
    public String getWebAppPath() {
        return this.xwiki.getWebAppPath(this.context);
    }
    
    public String getDefaultDocumentSyntax() {
        return this.xwiki.getDefaultDocumentSyntax();
    }
    
    public Syntax getAvailableRendererSyntax(String syntaxType, String syntaxVersion) {
        Syntax syntax = null;
        try {
            List<PrintRendererFactory> factories = Utils.getContextComponentManager().getInstanceList((Type) PrintRendererFactory.class);
            for (PrintRendererFactory factory : factories) {
                Syntax factorySyntax = factory.getSyntax();
                if (syntaxVersion != null) {
                    if (factorySyntax.getType().getId().equalsIgnoreCase(syntaxType) && factorySyntax.getVersion().equals(syntaxVersion)) {
                        syntax = factorySyntax;
                        break;
                    }
                    
                }
                 else {
                    if (factorySyntax.getType().getId().equalsIgnoreCase(syntaxType) && (syntax == null || factorySyntax.getVersion().compareTo(syntax.getVersion()) > 0)) {
                        syntax = factorySyntax;
                    }
                    
                }
                
            }
            
        }
         catch (ComponentLookupException e) {
            LOGGER.error("Failed to lookup available renderer syntaxes", e);
        }
        
        return syntax;
    }
    
    public boolean hasSectionEdit() {
        return this.xwiki.hasSectionEdit(getXWikiContext());
    }
    
    public long getSectionEditingDepth() {
        return this.xwiki.getSectionEditingDepth();
    }
    
    public boolean isTitleInCompatibilityMode() {
        return this.xwiki.isTitleInCompatibilityMode();
    }
    
    public String getCurrentContentSyntaxId() {
        return this.xwiki.getCurrentContentSyntaxId(getXWikiContext());
    }
    
}


