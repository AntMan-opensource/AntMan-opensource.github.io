package org.jenkinsci.plugins.azurekeyvaultplugin;
import hudson.FilePath;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.util.Enumeration;
import javax.xml.bind.DatatypeConverter;
class AzureKeyVaultUtil {
    private static final char[] EMPTY_CHAR_ARRAY = new char[0];
    private static final String PKCS12 = "PKCS12";
    static String convertAndWritePfxToDisk(FilePath workspace, String secret) throws IOException, GeneralSecurityException, InterruptedException {
        byte[] bytes = DatatypeConverter.parseBase64Binary(secret);
        KeyStore ks = KeyStore.getInstance(PKCS12);
        ks.load(new ByteArrayInputStream(bytes), EMPTY_CHAR_ARRAY);
        KeyStore ks2 = KeyStore.getInstance(PKCS12);
        ks2.load(null, null);
        for (Enumeration<String> e = ks.aliases(); e.hasMoreElements(); ) {
            String alias = e.nextElement();
            Certificate[] chain = ks.getCertificateChain(alias);
            Key privateKey = ks.getKey(alias, EMPTY_CHAR_ARRAY);
            ks2.setKeyEntry(alias, privateKey, EMPTY_CHAR_ARRAY, chain);
        }
        
        workspace.mkdirs();
        FilePath outFile = workspace.createTempFile("keyvault-", ".pfx");
        try (OutputStream outFileStream = outFile.write()) {
            ks2.store(outFileStream, EMPTY_CHAR_ARRAY);
        }
        
        URI uri = outFile.toURI();
        return uri.getPath();
    }
    
}


