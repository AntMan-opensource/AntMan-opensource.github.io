package org.jenkinsci.plugins.azurekeyvaultplugin;
import com.azure.core.credential.TokenCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.azure.security.keyvault.secrets.SecretClient;
import com.azure.security.keyvault.secrets.models.KeyVaultSecret;
import com.cloudbees.plugins.credentials.common.StandardListBoxModel;
import com.microsoft.azure.util.AzureCredentials;
import com.microsoft.azure.util.AzureImdsCredentials;
import hudson.EnvVars;
import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.console.ConsoleLogFilter;
import hudson.model.AbstractProject;
import hudson.model.Item;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.security.ACL;
import hudson.tasks.BuildWrapperDescriptor;
import hudson.util.ListBoxModel;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import jenkins.tasks.SimpleBuildWrapper;
import org.apache.commons.lang3.StringUtils;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import static hudson.Util.fixEmpty;
import static java.lang.String.format;
import static org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultCredentialRetriever.getCredentialById;
import static org.jenkinsci.plugins.azurekeyvaultplugin.AzureKeyVaultCredentialRetriever.getSecretBundle;
public class AzureKeyVaultBuildWrapper extends SimpleBuildWrapper {
    private static final Logger LOGGER = Logger.getLogger("Jenkins.AzureKeyVaultBuildWrapper");
    private final List<AzureKeyVaultSecret> azureKeyVaultSecrets;
    private final List<String> valuesToMask = new ArrayList<>();
    private String keyVaultURL;
    private String applicationID;
    private String applicationSecret;
    private String credentialID;
    private String tenantId;
    public AzureKeyVaultBuildWrapper(@CheckForNull List<AzureKeyVaultSecret> azureKeyVaultSecrets) {
        this.azureKeyVaultSecrets = azureKeyVaultSecrets;
    }
    
    public String getKeyVaultURLOverride() {
        return this.keyVaultURL;
    }
    
    public void setKeyVaultURLOverride(String keyVaultURL) {
        this.keyVaultURL = fixEmpty(keyVaultURL);
    }
    
    public String getApplicationIDOverride() {
        return this.applicationID;
    }
    
    public void setApplicationIDOverride(String applicationID) {
        this.applicationID = fixEmpty(applicationID);
    }
    
    public String getApplicationSecretOverride() {
        return this.applicationSecret;
    }
    
    public void setApplicationSecretOverride(String applicationSecret) {
        this.applicationSecret = fixEmpty(applicationSecret);
    }
    
    public String getCredentialIDOverride() {
        return this.credentialID;
    }
    
    public void setCredentialIDOverride(String credentialID) {
        this.credentialID = fixEmpty(credentialID);
    }
    
    public String getTenantIdOverride() {
        return this.tenantId;
    }
    
    public void setTenantIdOverride(String tenantId) {
        this.tenantId = fixEmpty(tenantId);
    }
    
    public String getKeyVaultURL() {
        AzureKeyVaultGlobalConfiguration globalConfiguration = AzureKeyVaultGlobalConfiguration.get();
        if (StringUtils.isNotEmpty(keyVaultURL)) {
            return keyVaultURL;
        }
        
        if (StringUtils.isNotEmpty(globalConfiguration.getKeyVaultURL())) {
            return globalConfiguration.getKeyVaultURL();
        }
         else {
            throw new AzureKeyVaultException("No key vault url configured, set one globally or in the build wrap step");
        }
        
    }
    
    public ConsoleLogFilter createLoggerDecorator(@Nonnull final Run<?, ?> build) {
        return new MaskingConsoleLogFilter(build.getCharset().name(), valuesToMask);
    }
    
    public TokenCredential getKeyVaultCredential(Run<?, ?> build) {
        LOGGER.fine("Trying override credentials...");
        TokenCredential credential = getKeyVaultCredential(build, this.applicationSecret, this.credentialID, this.tenantId);
        if (credential != null) {
            LOGGER.fine("Using override credentials");
            return credential;
        }
        
        LOGGER.fine("Trying global credentials");
        credential = getKeyVaultCredential( build, null, AzureKeyVaultGlobalConfiguration.get().getCredentialID(), null );
        if (credential != null) {
            return credential;
        }
        
        throw new AzureKeyVaultException("Unable to find a valid credential with provided parameters");
    }
    
    public TokenCredential getKeyVaultCredential(Run<?, ?> build, String applicationSecret, String credentialID, String tenantId) {
        if (StringUtils.isNotEmpty(credentialID)) {
            LOGGER.fine("Fetching credentials by ID");
            return getCredentialById(credentialID, build);
        }
        
        if (StringUtils.isNotEmpty(applicationSecret)) {
            if (StringUtils.isEmpty(tenantId)) {
                throw new IllegalArgumentException("Set `tenantId` in your withAzureKeyVault configuration, or migrate " + "to using either a 'Microsoft Azure Service Principal' or a 'Managed Identities for Azure Resources'");
            }
            
            LOGGER.fine("Using explicit application secret.");
            return new ClientSecretCredentialBuilder() .clientId(getApplicationID()) .clientSecret(applicationSecret) .tenantId(tenantId) .build();
        }
        
        return null;
    }
    
    public String getApplicationID() {
        if (StringUtils.isNotEmpty(applicationID)) {
            LOGGER.fine("Using override Application ID");
            return applicationID;
        }
        
        return null;
    }
    
    public List<AzureKeyVaultSecret> getAzureKeyVaultSecrets() {
        return azureKeyVaultSecrets;
    }
    
    public DescriptorImpl getDescriptor() {
        return (DescriptorImpl) super.getDescriptor();
    }
    
    private KeyVaultSecret getSecret(SecretClient client, AzureKeyVaultSecret secret) {
        return getSecretBundle(client, secret);
    }
    
    public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) {
        if (azureKeyVaultSecrets == null || azureKeyVaultSecrets.isEmpty()) {
            return;
        }
        
        SecretClient client = AzureCredentials.createKeyVaultClient(getKeyVaultCredential(build), getKeyVaultURL());
        for (AzureKeyVaultSecret secret : azureKeyVaultSecrets) {
            if (secret.isPassword()) {
                KeyVaultSecret bundle = getSecret(client, secret);
                if (bundle != null) {
                    valuesToMask.add(bundle.getValue());
                    context.env(secret.getEnvVariable(), bundle.getValue());
                }
                 else {
                    throw new AzureKeyVaultException( format( "Secret: %s not found in vault: %s", secret.getName(), getKeyVaultURL() ) );
                }
                
            }
             else if (secret.isCertificate()) {
                KeyVaultSecret bundle = getSecret(client, secret);
                if (bundle != null) {
                    try {
                        String path = AzureKeyVaultUtil.convertAndWritePfxToDisk(workspace, bundle.getValue());
                        context.env(secret.getEnvVariable(), path);
                    }
                     catch (Exception e) {
                        throw new AzureKeyVaultException(e.getMessage(), e);
                    }
                    
                }
                 else {
                    throw new AzureKeyVaultException( format( "Certificate: %s not found in vault: %s", secret.getName(), getKeyVaultURL() ) );
                }
                
            }
            
        }
        
    }
    
    public static final class DescriptorImpl extends BuildWrapperDescriptor {
        public DescriptorImpl() {
            super(AzureKeyVaultBuildWrapper.class);
            load();
        }
        
        public ListBoxModel doFillCredentialIDOverrideItems(@AncestorInPath Item context) {
            return new StandardListBoxModel().includeEmptyValue() .includeAs(ACL.SYSTEM, context, AzureImdsCredentials.class) .includeAs(ACL.SYSTEM, context, AzureCredentials.class);
        }
        
        public boolean isApplicable(AbstractProject<?, ?> item) {
            return true;
        }
        
        public String getDisplayName() {
            return "Bind credentials in Azure Key Vault to variables";
        }
        
    }
    
}


