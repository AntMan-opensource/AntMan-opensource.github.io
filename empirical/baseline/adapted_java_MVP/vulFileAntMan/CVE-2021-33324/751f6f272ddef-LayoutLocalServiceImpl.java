package com.liferay.portal.service.impl;
import com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal;
import com.liferay.layout.admin.kernel.model.LayoutTypePortletConstants;
import com.liferay.petra.lang.CentralizedThreadLocal;
import com.liferay.petra.string.StringBundler;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.NoSuchLayoutException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.RequiredLayoutException;
import com.liferay.portal.kernel.exception.SitemapChangeFrequencyException;
import com.liferay.portal.kernel.exception.SitemapIncludeException;
import com.liferay.portal.kernel.exception.SitemapPagePriorityException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.CustomizedPages;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.model.GroupConstants;
import com.liferay.portal.kernel.model.Layout;
import com.liferay.portal.kernel.model.LayoutConstants;
import com.liferay.portal.kernel.model.LayoutFriendlyURL;
import com.liferay.portal.kernel.model.LayoutPrototype;
import com.liferay.portal.kernel.model.LayoutReference;
import com.liferay.portal.kernel.model.LayoutSet;
import com.liferay.portal.kernel.model.LayoutSetPrototype;
import com.liferay.portal.kernel.model.LayoutType;
import com.liferay.portal.kernel.model.LayoutTypePortlet;
import com.liferay.portal.kernel.model.PortalPreferences;
import com.liferay.portal.kernel.model.PortletConstants;
import com.liferay.portal.kernel.model.ResourceConstants;
import com.liferay.portal.kernel.model.ResourcePermission;
import com.liferay.portal.kernel.model.SystemEventConstants;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.UserGroup;
import com.liferay.portal.kernel.model.impl.VirtualLayout;
import com.liferay.portal.kernel.search.Document;
import com.liferay.portal.kernel.search.Field;
import com.liferay.portal.kernel.search.Hits;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.QueryConfig;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.search.Sort;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.systemevent.SystemEvent;
import com.liferay.portal.kernel.systemevent.SystemEventHierarchyEntry;
import com.liferay.portal.kernel.systemevent.SystemEventHierarchyEntryThreadLocal;
import com.liferay.portal.kernel.util.ArrayUtil;
import com.liferay.portal.kernel.util.ContentTypes;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.HashMapBuilder;
import com.liferay.portal.kernel.util.HttpUtil;
import com.liferay.portal.kernel.util.ListUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.UnicodeProperties;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.comparator.LayoutComparator;
import com.liferay.portal.kernel.util.comparator.LayoutPriorityComparator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.kernel.workflow.WorkflowThreadLocal;
import com.liferay.portal.service.base.LayoutLocalServiceBaseImpl;
import com.liferay.portal.util.PropsValues;
import com.liferay.portlet.PortalPreferencesImpl;
import com.liferay.sites.kernel.util.Sites;
import com.liferay.sites.kernel.util.SitesUtil;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Queue;
import java.util.Set;
public class LayoutLocalServiceImpl extends LayoutLocalServiceBaseImpl {
	 public static String getCounterName(long groupId, boolean privateLayout) {
		StringBundler sb = new StringBundler(5);
		sb.append(Layout.class.getName());
		sb.append(StringPool.POUND);
		sb.append(groupId);
		sb.append(StringPool.POUND);
		sb.append(privateLayout);
		return sb.toString();
	}
	
	@Indexable(type = IndexableType.REINDEX)
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, long classNameId, long classPK, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, long masterLayoutPlid, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( userId, groupId, privateLayout, parentLayoutId, classNameId, classPK, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, masterLayoutPlid, serviceContext);
	}
	
	 @Indexable(type = IndexableType.REINDEX)
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, long classNameId, long classPK, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, Map<Locale, String> friendlyURLMap, long masterLayoutPlid, ServiceContext serviceContext) throws PortalException {
		 User user = userPersistence.findByPrimaryKey(userId);
		long layoutId = getNextLayoutId(groupId, privateLayout);
		parentLayoutId = layoutLocalServiceHelper.getParentLayoutId( groupId, privateLayout, parentLayoutId);
		String name = nameMap.get(LocaleUtil.getSiteDefault());
		friendlyURLMap = layoutLocalServiceHelper.getFriendlyURLMap( groupId, privateLayout, layoutId, name, friendlyURLMap);
		String friendlyURL = friendlyURLMap.get(LocaleUtil.getSiteDefault());
		UnicodeProperties typeSettingsUnicodeProperties = new UnicodeProperties();
		typeSettingsUnicodeProperties.fastLoad(typeSettings);
		int priority = Integer.MAX_VALUE;
		if (!system) {
			priority = layoutLocalServiceHelper.getNextPriority( groupId, privateLayout, parentLayoutId, null, -1);
		}
		
		layoutLocalServiceHelper.validate( groupId, privateLayout, layoutId, parentLayoutId, name, type, hidden, friendlyURLMap, serviceContext);
		Date now = new Date();
		long plid = counterLocalService.increment(Layout.class.getName());
		Layout layout = layoutPersistence.create(plid);
		String uuid = serviceContext.getUuid();
		if (Validator.isNotNull(uuid)) {
			layout.setUuid(uuid);
		}
		
		layout.setGroupId(groupId);
		layout.setCompanyId(user.getCompanyId());
		layout.setUserId(user.getUserId());
		layout.setUserName(user.getFullName());
		layout.setCreateDate(serviceContext.getCreateDate(now));
		layout.setModifiedDate(serviceContext.getModifiedDate(now));
		layout.setParentPlid( _getParentPlid(groupId, privateLayout, parentLayoutId));
		layout.setPrivateLayout(privateLayout);
		layout.setLayoutId(layoutId);
		layout.setParentLayoutId(parentLayoutId);
		layout.setClassNameId(classNameId);
		layout.setClassPK(classPK);
		layout.setNameMap(nameMap);
		layout.setTitleMap(titleMap);
		layout.setDescriptionMap(descriptionMap);
		layout.setKeywordsMap(keywordsMap);
		layout.setRobotsMap(robotsMap);
		layout.setType(type);
		boolean layoutUpdateable = ParamUtil.getBoolean( serviceContext, Sites.LAYOUT_UPDATEABLE, true);
		if (!layoutUpdateable) {
			typeSettingsUnicodeProperties.put( Sites.LAYOUT_UPDATEABLE, String.valueOf(layoutUpdateable));
		}
		
		if (privateLayout) {
			typeSettingsUnicodeProperties.put( "privateLayout", String.valueOf(privateLayout));
		}
		
		validateTypeSettingsProperties(layout, typeSettingsUnicodeProperties);
		layout.setTypeSettingsProperties(typeSettingsUnicodeProperties);
		if (type.equals(LayoutConstants.TYPE_PORTLET)) {
			 LayoutTypePortlet layoutTypePortlet = (LayoutTypePortlet)layout.getLayoutType();
			if (Validator.isNull(layoutTypePortlet.getLayoutTemplateId())) {
				layoutTypePortlet.setLayoutTemplateId( 0, PropsValues.LAYOUT_DEFAULT_TEMPLATE_ID, false);
			}
			
		}
		
		layout.setHidden(hidden);
		layout.setSystem(system);
		layout.setFriendlyURL(friendlyURL);
		layout.setPriority(priority);
		layout.setMasterLayoutPlid(masterLayoutPlid);
		String layoutPrototypeUuid = ParamUtil.getString( serviceContext, "layoutPrototypeUuid");
		boolean layoutPrototypeLinkEnabled = ParamUtil.getBoolean( serviceContext, "layoutPrototypeLinkEnabled", PropsValues.LAYOUT_PROTOTYPE_LINK_ENABLED_DEFAULT);
		if (Validator.isNotNull(layoutPrototypeUuid)) {
			layout.setLayoutPrototypeUuid(layoutPrototypeUuid);
			layout.setLayoutPrototypeLinkEnabled(layoutPrototypeLinkEnabled);
		}
		
		layout.setPublishDate(serviceContext.getModifiedDate(now));
		if (workflowDefinitionLinkLocalService.hasWorkflowDefinitionLink( layout.getCompanyId(), layout.getGroupId(), Layout.class.getName()) && Objects.equals(type, LayoutConstants.TYPE_CONTENT) && !system) {
			layout.setStatus(WorkflowConstants.STATUS_DRAFT);
		}
		
		else {
			layout.setStatus(WorkflowConstants.STATUS_APPROVED);
		}
		
		layout.setStatusByUserId(userId);
		layout.setStatusByUserName(user.getFullName());
		layout.setStatusDate(serviceContext.getCreateDate(now));
		layout.setExpandoBridgeAttributes(serviceContext);
		layout = layoutLocalService.updateLayout(layout);
		 layoutFriendlyURLLocalService.updateLayoutFriendlyURLs( user.getUserId(), user.getCompanyId(), groupId, layout.getPlid(), privateLayout, friendlyURLMap, serviceContext);
		 if (Validator.isNotNull(layoutPrototypeUuid) && !layoutPrototypeLinkEnabled) {
			_applyLayoutPrototype( layoutPrototypeUuid, layout, layoutPrototypeLinkEnabled);
		}
		
		 boolean addGroupPermissions = true;
		Group group = groupLocalService.getGroup(groupId);
		if (privateLayout && (group.isUser() || group.isUserGroup())) {
			addGroupPermissions = false;
		}
		
		boolean addGuestPermissions = false;
		if (!privateLayout || type.equals(LayoutConstants.TYPE_CONTROL_PANEL) || group.isLayoutSetPrototype()) {
			addGuestPermissions = true;
		}
		
		resourceLocalService.addResources( user.getCompanyId(), groupId, user.getUserId(), Layout.class.getName(), layout.getPlid(), false, addGroupPermissions, addGuestPermissions);
		 groupLocalService.updateSite(groupId, true);
		layout.setLayoutSet(null);
		 updateAsset( userId, layout, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames());
		 if (!system && (Objects.equals(type, LayoutConstants.TYPE_CONTENT) || layout.isTypeAssetDisplay())) {
			serviceContext.setModifiedDate(now);
			addLayout( userId, groupId, privateLayout, parentLayoutId, classNameLocalService.getClassNameId(Layout.class), layout.getPlid(), nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, true, true, layout.getMasterLayoutPlid(), Collections.emptyMap(), serviceContext);
		}
		
		return layoutLocalService.getLayout(layout.getPlid());
	}
	
	@Indexable(type = IndexableType.REINDEX)
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, long classNameId, long classPK, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( userId, groupId, privateLayout, parentLayoutId, classNameId, classPK, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, 0, serviceContext);
	}
	
	 @Indexable(type = IndexableType.REINDEX)
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( userId, groupId, privateLayout, parentLayoutId, 0, 0, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, serviceContext);
	}
	
	 @Indexable(type = IndexableType.REINDEX)
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( userId, groupId, privateLayout, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, false, friendlyURLMap, serviceContext);
	}
	
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, String name, String title, String description, String type, boolean hidden, boolean system, String friendlyURL, ServiceContext serviceContext) throws PortalException {
		Locale locale = LocaleUtil.getSiteDefault();
		Map<Locale, String> nameMap = HashMapBuilder.put( locale, name ).build();
		Map<Locale, String> titleMap = new HashMap<>();
		titleMap.put(locale, title);
		Map<Locale, String> descriptionMap = new HashMap<>();
		descriptionMap.put(locale, description);
		Map<Locale, String> friendlyURLMap = new HashMap<>();
		friendlyURLMap.put(LocaleUtil.getSiteDefault(), friendlyURL);
		return addLayout( userId, groupId, privateLayout, parentLayoutId, nameMap, titleMap, descriptionMap, new HashMap<Locale, String>(), new HashMap<Locale, String>(), type, StringPool.BLANK, hidden, system, friendlyURLMap, serviceContext);
	}
	
	public Layout addLayout( long userId, long groupId, boolean privateLayout, long parentLayoutId, String name, String title, String description, String type, boolean hidden, String friendlyURL, ServiceContext serviceContext) throws PortalException {
		return addLayout( userId, groupId, privateLayout, parentLayoutId, name, title, description, type, hidden, false, friendlyURL, serviceContext);
	}
	
	public Layout deleteLayout(Layout layout) throws PortalException {
		layoutLocalService.deleteLayout(layout, new ServiceContext());
		return layout;
	}
	
	@SystemEvent( action = SystemEventConstants.ACTION_SKIP, type = SystemEventConstants.TYPE_DELETE ) public void deleteLayout( Layout layout, boolean updateLayoutSet, ServiceContext serviceContext) throws PortalException {
		deleteLayout(layout, serviceContext);
	}
	
	@SystemEvent( action = SystemEventConstants.ACTION_SKIP, type = SystemEventConstants.TYPE_DELETE ) public void deleteLayout(Layout layout, ServiceContext serviceContext) throws PortalException {
		 if (layout.getParentLayoutId() == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
			List<Layout> rootLayouts = layoutPersistence.findByG_P_P( layout.getGroupId(), layout.isPrivateLayout(), LayoutConstants.DEFAULT_PARENT_LAYOUT_ID, 0, 2);
			if (rootLayouts.size() > 1) {
				Layout firstLayout = rootLayouts.get(0);
				if (firstLayout.getLayoutId() == layout.getLayoutId()) {
					Layout secondLayout = rootLayouts.get(1);
					layoutLocalServiceHelper.validateFirstLayout(secondLayout);
				}
				
			}
			
		}
		
		 List<Layout> childLayouts = layoutPersistence.findByG_P_P( layout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId());
		for (Layout childLayout : childLayouts) {
			layoutLocalService.deleteLayout(childLayout, serviceContext);
		}
		
		 layoutFriendlyURLLocalService.deleteLayoutFriendlyURLs( layout.getPlid());
		 portletPreferencesLocalService.deletePortletPreferencesByPlid( layout.getPlid());
		 assetEntryLocalService.deleteEntry( Layout.class.getName(), layout.getPlid());
		 ratingsStatsLocalService.deleteStats( Layout.class.getName(), layout.getPlid());
		 expandoRowLocalService.deleteRows(layout.getPlid());
		 imageLocalService.deleteImage(layout.getIconImageId());
		 Group scopeGroup = layout.getScopeGroup();
		if (scopeGroup != null) {
			groupLocalService.deleteGroup(scopeGroup.getGroupId());
		}
		
		 String primKey = layout.getPlid() + PortletConstants.LAYOUT_SEPARATOR + "%";
		List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_LikeP( layout.getCompanyId(), primKey);
		for (ResourcePermission resourcePermission : resourcePermissions) {
			resourcePermissionLocalService.deleteResourcePermission( resourcePermission);
		}
		
		resourceLocalService.deleteResource( layout.getCompanyId(), Layout.class.getName(), ResourceConstants.SCOPE_INDIVIDUAL, layout.getPlid());
		 Layout draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), layout.getPlid());
		if (draftLayout != null) {
			layoutLocalService.deleteLayout(draftLayout);
		}
		
		 layout = layoutPersistence.remove(layout);
		 _resetPortalPreferences(layout);
		 SystemEventHierarchyEntry systemEventHierarchyEntry = SystemEventHierarchyEntryThreadLocal.peek();
		if ((systemEventHierarchyEntry != null) && systemEventHierarchyEntry.hasTypedModel( Layout.class.getName(), layout.getPlid())) {
			systemEventHierarchyEntry.setExtraDataValue( "privateLayout", String.valueOf(layout.isPrivateLayout()));
		}
		
		 Indexer indexer = IndexerRegistryUtil.getIndexer(Layout.class);
		indexer.delete(layout);
	}
	
	public Layout deleteLayout(long plid) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		layoutLocalService.deleteLayout(layout, new ServiceContext());
		return layout;
	}
	
	public void deleteLayout( long groupId, boolean privateLayout, long layoutId, ServiceContext serviceContext) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		layoutLocalService.deleteLayout(layout, serviceContext);
	}
	
	public void deleteLayout(long plid, ServiceContext serviceContext) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		layoutLocalService.deleteLayout(layout, serviceContext);
	}
	
	public void deleteLayouts( long groupId, boolean privateLayout, ServiceContext serviceContext) throws PortalException {
		 List<Layout> layouts = layoutPersistence.findByG_P_P( groupId, privateLayout, LayoutConstants.DEFAULT_PARENT_LAYOUT_ID, QueryUtil.ALL_POS, QueryUtil.ALL_POS, new LayoutPriorityComparator(false));
		for (Layout layout : layouts) {
			try {
				layoutLocalService.deleteLayout(layout, serviceContext);
			}
			
			catch (NoSuchLayoutException noSuchLayoutException) {
				 if (_log.isDebugEnabled()) {
					_log.debug(noSuchLayoutException, noSuchLayoutException);
				}
				
			}
			
		}
		
		 counterLocalService.reset(getCounterName(groupId, privateLayout));
	}
	
	public Layout fetchDefaultLayout(long groupId, boolean privateLayout) {
		if (groupId > 0) {
			List<Layout> layouts = layoutPersistence.findByG_P( groupId, privateLayout, 0, 1);
			if (!layouts.isEmpty()) {
				return layouts.get(0);
			}
			
		}
		
		return null;
	}
	
	public Layout fetchFirstLayout( long groupId, boolean privateLayout, long parentLayoutId) {
		return layoutPersistence.fetchByG_P_P_First( groupId, privateLayout, parentLayoutId, new LayoutPriorityComparator());
	}
	
	public Layout fetchFirstLayout( long groupId, boolean privateLayout, long parentLayoutId, boolean hidden) {
		return layoutPersistence.fetchByG_P_P_H_First( groupId, privateLayout, parentLayoutId, hidden, new LayoutPriorityComparator());
	}
	
	public Layout fetchLayout( long groupId, boolean privateLayout, long layoutId) {
		return layoutPersistence.fetchByG_P_L(groupId, privateLayout, layoutId);
	}
	
	public Layout fetchLayout(long classNameId, long classPK) {
		return layoutPersistence.fetchByC_C(classNameId, classPK);
	}
	
	public Layout fetchLayout( String uuid, long groupId, boolean privateLayout) {
		return layoutPersistence.fetchByUUID_G_P(uuid, groupId, privateLayout);
	}
	
	public Layout fetchLayoutByFriendlyURL( long groupId, boolean privateLayout, String friendlyURL) {
		friendlyURL = layoutLocalServiceHelper.getFriendlyURL(friendlyURL);
		return layoutPersistence.fetchByG_P_F( groupId, privateLayout, friendlyURL);
	}
	
	public Layout fetchLayoutByIconImageId( boolean privateLayout, long iconImageId) throws PortalException {
		return layoutPersistence.fetchByP_I(privateLayout, iconImageId);
	}
	
	public Layout fetchLayoutByUuidAndGroupId( String uuid, long groupId, boolean privateLayout) {
		return layoutPersistence.fetchByUUID_G_P(uuid, groupId, privateLayout);
	}
	
	public List<Layout> getAllLayouts( long groupId, boolean privateLayout, String type) throws PortalException {
		DynamicQuery dynamicQuery = layoutLocalService.dynamicQuery();
		Property groupIdProperty = PropertyFactoryUtil.forName("groupId");
		dynamicQuery.add(groupIdProperty.eq(groupId));
		Property privateLayoutProperty = PropertyFactoryUtil.forName( "privateLayout");
		dynamicQuery.add(privateLayoutProperty.eq(privateLayout));
		Property classNameIdProperty = PropertyFactoryUtil.forName( "classNameId");
		dynamicQuery.add(classNameIdProperty.eq(Long.valueOf(0)));
		Property typeProperty = PropertyFactoryUtil.forName("type");
		dynamicQuery.add(typeProperty.eq(type));
		List<Layout> layouts = layoutLocalService.dynamicQuery(dynamicQuery);
		Group group = groupPersistence.findByPrimaryKey(groupId);
		if (!group.isUser()) {
			return layouts;
		}
		
		Set<Long> checkedPlids = new HashSet<>();
		Queue<Long> checkParentLayoutIds = new ArrayDeque<>();
		checkParentLayoutIds.add(LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
		LayoutSet layoutSet = layoutSetPersistence.findByG_P( groupId, privateLayout);
		while (!checkParentLayoutIds.isEmpty()) {
			long parentLayoutId = checkParentLayoutIds.poll();
			List<Layout> userGroupLayouts = _addUserGroupLayouts( group, layoutSet, Collections.emptyList(), parentLayoutId);
			for (Layout userGroupLayout : userGroupLayouts) {
				long userGroupPlid = userGroupLayout.getPlid();
				if (checkedPlids.add(userGroupPlid)) {
					layouts.add(userGroupLayout);
					checkParentLayoutIds.add(userGroupLayout.getLayoutId());
				}
				
			}
			
		}
		
		return layouts;
	}
	
	public long getDefaultPlid(long groupId) {
		if (groupId > 0) {
			List<Layout> layouts = layoutPersistence.findByGroupId( groupId, 0, 1);
			if (!layouts.isEmpty()) {
				Layout layout = layouts.get(0);
				return layout.getPlid();
			}
			
		}
		
		return LayoutConstants.DEFAULT_PLID;
	}
	
	public long getDefaultPlid(long groupId, boolean privateLayout) {
		Layout layout = fetchDefaultLayout(groupId, privateLayout);
		if (layout != null) {
			return layout.getPlid();
		}
		
		return LayoutConstants.DEFAULT_PLID;
	}
	
	public long getDefaultPlid( long groupId, boolean privateLayout, String portletId) throws PortalException {
		if (groupId > 0) {
			List<Layout> layouts = layoutPersistence.findByG_P( groupId, privateLayout);
			for (Layout layout : layouts) {
				if (layout.isTypePortlet()) {
					LayoutTypePortlet layoutTypePortlet = (LayoutTypePortlet)layout.getLayoutType();
					if (layoutTypePortlet.hasPortletId(portletId)) {
						return layout.getPlid();
					}
					
				}
				
			}
			
		}
		
		return LayoutConstants.DEFAULT_PLID;
	}
	
	public Layout getFriendlyURLLayout( long groupId, boolean privateLayout, String friendlyURL) throws PortalException {
		if (Validator.isNull(friendlyURL)) {
			StringBundler sb = new StringBundler(5);
			sb.append("{groupId=");
			sb.append(groupId);
			sb.append(", privateLayout=");
			sb.append(privateLayout);
			sb.append("}");
			throw new NoSuchLayoutException(sb.toString());
		}
		
		friendlyURL = HttpUtil.decodeURL(friendlyURL);
		friendlyURL = layoutLocalServiceHelper.getFriendlyURL(friendlyURL);
		Layout layout = null;
		List<LayoutFriendlyURL> layoutFriendlyURLs = layoutFriendlyURLPersistence.findByG_P_F( groupId, privateLayout, friendlyURL, 0, 1);
		if (!layoutFriendlyURLs.isEmpty()) {
			LayoutFriendlyURL layoutFriendlyURL = layoutFriendlyURLs.get(0);
			layout = layoutPersistence.findByPrimaryKey( layoutFriendlyURL.getPlid());
		}
		
		if ((layout == null) && friendlyURL.startsWith(StringPool.SLASH) && Validator.isNumber(friendlyURL.substring(1))) {
			long layoutId = GetterUtil.getLong(friendlyURL.substring(1));
			layout = layoutPersistence.fetchByG_P_L( groupId, privateLayout, layoutId);
		}
		
		if (layout == null) {
			StringBundler sb = new StringBundler(7);
			sb.append("{groupId=");
			sb.append(groupId);
			sb.append(", privateLayout=");
			sb.append(privateLayout);
			sb.append(", friendlyURL=");
			sb.append(friendlyURL);
			sb.append("}");
			throw new NoSuchLayoutException(sb.toString());
		}
		
		return layout;
	}
	
	public Layout getLayout(long plid) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		if (_mergeLayout(layout, plid)) {
			return layoutPersistence.findByPrimaryKey(plid);
		}
		
		return layout;
	}
	
	public Layout getLayout(long groupId, boolean privateLayout, long layoutId) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		if (_mergeLayout(layout, groupId, privateLayout, layoutId)) {
			return layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		}
		
		return layout;
	}
	
	public Layout getLayoutByIconImageId(long iconImageId) throws PortalException {
		return layoutPersistence.findByIconImageId(iconImageId);
	}
	
	public Layout getLayoutByUuidAndGroupId( String uuid, long groupId, boolean privateLayout) throws PortalException {
		return layoutPersistence.findByUUID_G_P(uuid, groupId, privateLayout);
	}
	
	public Map<Long, List<Layout>> getLayoutChildLayouts( List<Layout> parentLayouts) {
		Map<LayoutSet, List<Layout>> layoutsMap = new HashMap<>();
		for (Layout parentLayout : parentLayouts) {
			if (parentLayout instanceof VirtualLayout) {
				VirtualLayout virtualLayout = (VirtualLayout)parentLayout;
				Layout sourceLayout = virtualLayout.getSourceLayout();
				LayoutSet sourceLayoutSet = sourceLayout.getLayoutSet();
				List<Layout> layouts = layoutsMap.computeIfAbsent( sourceLayoutSet, key -> new ArrayList<>());
				layouts.add(sourceLayout);
			}
			
			else {
				List<Layout> layouts = layoutsMap.computeIfAbsent( parentLayout.getLayoutSet(), key -> new ArrayList<>());
				layouts.add(parentLayout);
			}
			
		}
		
		List<Layout> childLayouts = new ArrayList<>();
		for (Map.Entry<LayoutSet, List<Layout>> entry : layoutsMap.entrySet()) {
			List<Layout> newChildLayouts = _getChildLayouts( entry.getKey(), ListUtil.toLongArray(entry.getValue(), Layout::getLayoutId));
			childLayouts.addAll(newChildLayouts);
		}
		
		Map<Long, List<Layout>> layoutChildLayoutsMap = new HashMap<>();
		for (Layout childLayout : childLayouts) {
			List<Layout> layoutChildLayouts = layoutChildLayoutsMap.computeIfAbsent( childLayout.getParentPlid(), parentPlid -> new ArrayList<>());
			layoutChildLayouts.add(childLayout);
		}
		
		for (List<Layout> layoutChildLayouts : layoutChildLayoutsMap.values()) {
			layoutChildLayouts.sort(Comparator.comparing(Layout::getPriority));
		}
		
		return layoutChildLayoutsMap;
	}
	
	public List<Layout> getLayouts(long companyId) {
		return layoutPersistence.findByCompanyId(companyId);
	}
	
	public List<Layout> getLayouts(long groupId, boolean privateLayout) {
		return layoutPersistence.findByG_P(groupId, privateLayout);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, int start, int end, OrderByComparator<Layout> obc) {
		return layoutPersistence.findByG_P( groupId, privateLayout, start, end, obc);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, long parentLayoutId) {
		return getLayouts( groupId, privateLayout, parentLayoutId, false, QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, long parentLayoutId, boolean incomplete, int start, int end) {
		return getLayouts( groupId, privateLayout, parentLayoutId, incomplete, start, end, null);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, long parentLayoutId, boolean incomplete, int start, int end, OrderByComparator<Layout> obc) {
		if (MergeLayoutPrototypesThreadLocal.isInProgress()) {
			return layoutPersistence.findByG_P_P( groupId, privateLayout, parentLayoutId, start, end, obc);
		}
		
		try {
			Group group = groupLocalService.getGroup(groupId);
			LayoutSet layoutSet = layoutSetLocalService.getLayoutSet( groupId, privateLayout);
			if (layoutSet.isLayoutSetPrototypeLinkActive() && !_mergeLayouts( group, layoutSet, groupId, privateLayout, parentLayoutId, start, end, obc)) {
				return layoutPersistence.findByG_P_P( groupId, privateLayout, parentLayoutId, start, end, obc);
			}
			
			List<Layout> layouts = layoutPersistence.findByG_P_P( groupId, privateLayout, parentLayoutId, start, end, obc);
			return _injectVirtualLayouts( group, layoutSet, layouts, parentLayoutId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, long[] layoutIds) throws PortalException {
		List<Layout> layouts = new ArrayList<>();
		for (long layoutId : layoutIds) {
			Layout layout = getLayout(groupId, privateLayout, layoutId);
			layouts.add(layout);
		}
		
		return layouts;
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, String type) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		List<Layout> layouts = layoutPersistence.findByG_P_T( groupId, privateLayout, type);
		if (!group.isUser()) {
			return layouts;
		}
		
		layouts = new ArrayList<>(layouts);
		Set<Long> checkedPlids = new HashSet<>();
		Queue<Long> checkParentLayoutIds = new ArrayDeque<>();
		checkParentLayoutIds.add(LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
		LayoutSet layoutSet = layoutSetPersistence.findByG_P( groupId, privateLayout);
		while (!checkParentLayoutIds.isEmpty()) {
			long parentLayoutId = checkParentLayoutIds.poll();
			List<Layout> userGroupLayouts = _addUserGroupLayouts( group, layoutSet, Collections.emptyList(), parentLayoutId);
			for (Layout userGroupLayout : userGroupLayouts) {
				long userGroupPlid = userGroupLayout.getPlid();
				if (checkedPlids.add(userGroupPlid)) {
					layouts.add(userGroupLayout);
					checkParentLayoutIds.add(userGroupLayout.getLayoutId());
				}
				
			}
			
		}
		
		return layouts;
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, String keywords, String[] types, int start, int end, OrderByComparator<Layout> obc) throws PortalException {  return getLayouts( groupId, 0, privateLayout, keywords, types, start, end, obc);
	}
	
	public List<Layout> getLayouts( long groupId, int start, int end, OrderByComparator<Layout> obc) {
		return layoutPersistence.findByGroupId(groupId, start, end, obc);
	}
	
	public List<Layout> getLayouts(long groupId, long masterLayoutPlid) {
		return layoutPersistence.findByG_MLP(groupId, masterLayoutPlid);
	}
	
	public List<Layout> getLayouts( long groupId, long userId, boolean privateLayout, String keywords, String[] types, int start, int end, OrderByComparator<Layout> obc) throws PortalException {  if (Validator.isNull(keywords)) { return getLayouts(groupId, privateLayout, start, end, obc);
		}
		
		Indexer<Layout> indexer = IndexerRegistryUtil.getIndexer( Layout.class.getName());
		Hits hits = indexer.search( _buildSearchContext( groupId, userId, privateLayout, keywords, types, start, end, obc));
		List<Document> documents = hits.toList();
		List<Layout> layouts = new ArrayList<>(documents.size());
		for (Document document : documents) {
			layouts.add( getLayout( GetterUtil.getLong(document.get(Field.ENTRY_CLASS_PK))));
		}
		
		return layouts;
	}
	
	public LayoutReference[] getLayouts( long companyId, String portletId, String preferencesKey, String preferencesValue) {
		List<LayoutReference> layoutReferences = layoutFinder.findByC_P_P( companyId, portletId, preferencesKey, preferencesValue);
		return layoutReferences.toArray(new LayoutReference[0]);
	}
	
	public List<Layout> getLayouts( long groupId, String keywords, String[] types, int start, int end, OrderByComparator<Layout> obc) throws PortalException {  if (Validator.isNull(keywords)) { return getLayouts(groupId, start, end, obc);
		}
		
		Indexer<Layout> indexer = IndexerRegistryUtil.getIndexer( Layout.class.getName());
		Hits hits = indexer.search( _buildSearchContext( groupId, null, keywords, types, start, end, obc));
		List<Document> documents = hits.toList();
		List<Layout> layouts = new ArrayList<>(documents.size());
		for (Document document : documents) {
			layouts.add( getLayout( GetterUtil.getLong(document.get(Field.ENTRY_CLASS_PK))));
		}
		
		return layouts;
	}
	
	public List<Layout> getLayoutsByLayoutPrototypeUuid( String layoutPrototypeUuid) {
		return layoutPersistence.findByLayoutPrototypeUuid(layoutPrototypeUuid);
	}
	
	public int getLayoutsByLayoutPrototypeUuidCount( String layoutPrototypeUuid) {
		return layoutPersistence.countByLayoutPrototypeUuid( layoutPrototypeUuid);
	}
	
	public List<Layout> getLayoutsByUuidAndCompanyId( String uuid, long companyId) {
		return layoutPersistence.findByUuid_C(uuid, companyId);
	}
	
	public List<Layout> getLayoutsByUuidAndCompanyId( String uuid, long companyId, int start, int end, OrderByComparator<Layout> orderByComparator) {
		return layoutPersistence.findByUuid_C( uuid, companyId, start, end, orderByComparator);
	}
	
	public int getLayoutsCount(Group group, boolean privateLayout) throws PortalException {
		return getLayoutsCount(group, privateLayout, true);
	}
	
	public int getLayoutsCount( Group group, boolean privateLayout, boolean includeUserGroups) throws PortalException {
		int count = layoutPersistence.countByG_P( group.getGroupId(), privateLayout);
		if (!group.isUser() || !includeUserGroups) {
			return count;
		}
		
		long[] userGroupIds = userPersistence.getUserGroupPrimaryKeys( group.getClassPK());
		if (userGroupIds.length != 0) {
			long userGroupClassNameId = classNameLocalService.getClassNameId( UserGroup.class);
			for (long userGroupId : userGroupIds) {
				Group userGroupGroup = groupPersistence.findByC_C_C( group.getCompanyId(), userGroupClassNameId, userGroupId);
				count += layoutPersistence.countByG_P( userGroupGroup.getGroupId(), privateLayout);
			}
			
		}
		
		return count;
	}
	
	public int getLayoutsCount( Group group, boolean privateLayout, long parentLayoutId) {
		return layoutPersistence.countByG_P_P( group.getGroupId(), privateLayout, parentLayoutId);
	}
	
	public int getLayoutsCount( Group group, boolean privateLayout, long[] layoutIds) {
		if (ArrayUtil.isEmpty(layoutIds)) {
			return 0;
		}
		
		DynamicQuery dynamicQuery = dynamicQuery();
		Property groupIdProperty = PropertyFactoryUtil.forName("groupId");
		dynamicQuery.add(groupIdProperty.eq(group.getGroupId()));
		Property privateLayoutProperty = PropertyFactoryUtil.forName( "privateLayout");
		dynamicQuery.add(privateLayoutProperty.eq(privateLayout));
		Property layoutIdProperty = PropertyFactoryUtil.forName("layoutId");
		dynamicQuery.add(layoutIdProperty.in(layoutIds));
		return GetterUtil.getInteger(dynamicQueryCount(dynamicQuery));
	}
	
	public int getLayoutsCount( Group group, boolean privateLayout, String keywords, String[] types) throws PortalException {  return getLayoutsCount(group, 0, privateLayout, keywords, types);
	}
	
	public int getLayoutsCount( Group group, long userId, boolean privateLayout, String keywords, String[] types) throws PortalException {  if (Validator.isNull(keywords)) { return getLayoutsCount(group.getGroupId(), privateLayout);
		}
		
		Indexer<Layout> indexer = IndexerRegistryUtil.getIndexer( Layout.class.getName());
		Hits hits = indexer.search( _buildSearchContext( group.getGroupId(), userId, privateLayout, keywords, types, QueryUtil.ALL_POS, QueryUtil.ALL_POS, null));
		return hits.getLength();
	}
	
	public int getLayoutsCount(long groupId) {
		return layoutPersistence.countByGroupId(groupId);
	}
	
	public int getLayoutsCount(long groupId, boolean privateLayout) {
		return layoutPersistence.countByG_P(groupId, privateLayout);
	}
	
	public int getLayoutsCount(long groupId, long masterLayoutPlid) {
		return layoutPersistence.countByG_MLP(groupId, masterLayoutPlid);
	}
	
	public int getLayoutsCount(long groupId, String keywords, String[] types) throws PortalException {  if (Validator.isNull(keywords)) { return getLayoutsCount(groupId);
		}
		
		Indexer<Layout> indexer = IndexerRegistryUtil.getIndexer( Layout.class.getName());
		Hits hits = indexer.search( _buildSearchContext( groupId, null, keywords, types, QueryUtil.ALL_POS, QueryUtil.ALL_POS, null));
		return hits.getLength();
	}
	
	public int getLayoutsCount(User user, boolean privateLayout) throws PortalException {
		return getLayoutsCount(user, privateLayout, true);
	}
	
	public int getLayoutsCount( User user, boolean privateLayout, boolean includeUserGroups) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId(User.class);
		Group group = groupPersistence.findByC_C_C( user.getCompanyId(), classNameId, user.getUserId());
		return getLayoutsCount(group, privateLayout, includeUserGroups);
	}
	
	public long getNextLayoutId(long groupId, boolean privateLayout) {
		long nextLayoutId = counterLocalService.increment( getCounterName(groupId, privateLayout));
		if (nextLayoutId == 1) {
			List<Layout> layouts = layoutPersistence.findByG_P( groupId, privateLayout, 0, 1, new LayoutComparator());
			if (!layouts.isEmpty()) {
				Layout layout = layouts.get(0);
				nextLayoutId = layout.getLayoutId() + 1;
				counterLocalService.reset( getCounterName(groupId, privateLayout), nextLayoutId);
			}
			
		}
		
		return nextLayoutId;
	}
	
	public Layout getParentLayout(Layout layout) throws PortalException {
		Layout parentLayout = null;
		if (layout instanceof VirtualLayout) {
			VirtualLayout virtualLayout = (VirtualLayout)layout;
			Layout sourceLayout = virtualLayout.getSourceLayout();
			parentLayout = getLayout( sourceLayout.getGroupId(), sourceLayout.isPrivateLayout(), sourceLayout.getParentLayoutId());
			parentLayout = new VirtualLayout(parentLayout, layout.getGroup());
		}
		
		else {
			parentLayout = getLayout( layout.getGroupId(), layout.isPrivateLayout(), layout.getParentLayoutId());
		}
		
		return parentLayout;
	}
	
	public List<Layout> getScopeGroupLayouts(long parentGroupId) throws PortalException {
		if (PropsValues.LAYOUT_SCOPE_GROUP_FINDER_ENABLED) {
			return layoutFinder.findByScopeGroup(parentGroupId);
		}
		
		Group parentGroup = groupPersistence.findByPrimaryKey(parentGroupId);
		if (PropsValues.LAYOUT_SCOPE_GROUP_FINDER_THRESHOLD >= 0) {
			int count = groupLocalService.getGroupsCount( parentGroup.getCompanyId(), Layout.class.getName(), parentGroupId);
			if (count >= PropsValues.LAYOUT_SCOPE_GROUP_FINDER_THRESHOLD) {
				return layoutFinder.findByScopeGroup(parentGroupId);
			}
			
		}
		
		List<Group> groups = groupLocalService.getGroups( parentGroup.getCompanyId(), Layout.class.getName(), parentGroupId);
		List<Layout> layouts = new ArrayList<>(groups.size());
		for (Group group : groups) {
			layouts.add(layoutPersistence.findByPrimaryKey(group.getClassPK()));
		}
		
		return layouts;
	}
	
	public List<Layout> getScopeGroupLayouts( long parentGroupId, boolean privateLayout) throws PortalException {
		if (PropsValues.LAYOUT_SCOPE_GROUP_FINDER_ENABLED) {
			return layoutFinder.findByScopeGroup(parentGroupId, privateLayout);
		}
		
		Group parentGroup = groupPersistence.findByPrimaryKey(parentGroupId);
		if (PropsValues.LAYOUT_SCOPE_GROUP_FINDER_THRESHOLD >= 0) {
			int count = groupLocalService.getGroupsCount( parentGroup.getCompanyId(), Layout.class.getName(), parentGroupId);
			if (count >= PropsValues.LAYOUT_SCOPE_GROUP_FINDER_THRESHOLD) {
				return layoutFinder.findByScopeGroup( parentGroupId, privateLayout);
			}
			
		}
		
		List<Group> groups = groupLocalService.getGroups( parentGroup.getCompanyId(), Layout.class.getName(), parentGroupId);
		List<Layout> layouts = new ArrayList<>(groups.size());
		for (Group group : groups) {
			Layout layout = layoutPersistence.findByPrimaryKey( group.getClassPK());
			if (layout.isPrivateLayout() == privateLayout) {
				layouts.add(layout);
			}
			
		}
		
		return layouts;
	}
	
	public boolean hasLayout(String uuid, long groupId, boolean privateLayout) throws PortalException {
		try {
			getLayoutByUuidAndGroupId(uuid, groupId, privateLayout);
			return true;
		}
		
		catch (NoSuchLayoutException noSuchLayoutException) {
			 if (_log.isDebugEnabled()) {
				_log.debug(noSuchLayoutException, noSuchLayoutException);
			}
			
		}
		
		return false;
	}
	
	public boolean hasLayouts(Group group) throws PortalException {
		List<LayoutSet> groupLayoutSets = layoutSetPersistence.findByGroupId( group.getGroupId());
		for (LayoutSet layoutSet : groupLayoutSets) {
			if (layoutSet.getPageCount() > 0) {
				return true;
			}
			
		}
		
		if (!group.isUser()) {
			return false;
		}
		
		long[] userGroupIds = userPersistence.getUserGroupPrimaryKeys( group.getClassPK());
		if (userGroupIds.length != 0) {
			long userGroupClassNameId = classNameLocalService.getClassNameId( UserGroup.class);
			for (long userGroupId : userGroupIds) {
				Group userGroupGroup = groupPersistence.findByC_C_C( group.getCompanyId(), userGroupClassNameId, userGroupId);
				List<LayoutSet> userGroupGroupLayoutSets = layoutSetPersistence.findByGroupId( userGroupGroup.getGroupId());
				for (LayoutSet layoutSet : userGroupGroupLayoutSets) {
					if (layoutSet.getPageCount() > 0) {
						return true;
					}
					
				}
				
			}
			
		}
		
		return false;
	}
	
	public boolean hasLayouts(Group group, boolean privateLayout) throws PortalException {
		return hasLayouts(group, privateLayout, true);
	}
	
	public boolean hasLayouts( Group group, boolean privateLayout, boolean includeUserGroups) throws PortalException {
		LayoutSet layoutSet = layoutSetPersistence.findByG_P( group.getGroupId(), privateLayout);
		if (layoutSet.getPageCount() > 0) {
			return true;
		}
		
		if (!group.isUser() || !includeUserGroups) {
			return false;
		}
		
		long[] userGroupIds = userPersistence.getUserGroupPrimaryKeys( group.getClassPK());
		if (userGroupIds.length != 0) {
			long userGroupClassNameId = classNameLocalService.getClassNameId( UserGroup.class);
			for (long userGroupId : userGroupIds) {
				Group userGroupGroup = groupPersistence.findByC_C_C( group.getCompanyId(), userGroupClassNameId, userGroupId);
				layoutSet = layoutSetPersistence.findByG_P( userGroupGroup.getGroupId(), privateLayout);
				if (layoutSet.getPageCount() > 0) {
					return true;
				}
				
			}
			
		}
		
		return false;
	}
	
	public boolean hasLayouts( long groupId, boolean privateLayout, long parentLayoutId) {
		int count = layoutPersistence.countByG_P_P( groupId, privateLayout, parentLayoutId);
		if (count > 0) {
			return true;
		}
		
		return false;
	}
	
	public boolean hasLayouts(User user, boolean privateLayout) throws PortalException {
		return hasLayouts(user, privateLayout, true);
	}
	
	public boolean hasLayouts( User user, boolean privateLayout, boolean includeUserGroups) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId(User.class);
		Group group = groupPersistence.findByC_C_C( user.getCompanyId(), classNameId, user.getUserId());
		return hasLayouts(group, privateLayout, includeUserGroups);
	}
	
	public boolean hasLayoutSetPrototypeLayout( long layoutSetPrototypeId, String layoutUuid) throws PortalException {
		return layoutLocalServiceHelper.hasLayoutSetPrototypeLayout( layoutSetPrototypeLocalService.getLayoutSetPrototype( layoutSetPrototypeId), layoutUuid);
	}
	
	public boolean hasLayoutSetPrototypeLayout( String layoutSetPrototypeUuid, long companyId, String layoutUuid) throws PortalException {
		LayoutSetPrototype layoutSetPrototype = layoutSetPrototypeLocalService. getLayoutSetPrototypeByUuidAndCompanyId( layoutSetPrototypeUuid, companyId);
		return layoutLocalServiceHelper.hasLayoutSetPrototypeLayout( layoutSetPrototype, layoutUuid);
	}
	
	public void setLayouts( long groupId, boolean privateLayout, long parentLayoutId, long[] layoutIds, ServiceContext serviceContext) throws PortalException {
		if (layoutIds == null) {
			return;
		}
		
		if (parentLayoutId == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
			if (layoutIds.length < 1) {
				throw new RequiredLayoutException( RequiredLayoutException.AT_LEAST_ONE);
			}
			
			Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutIds[0]);
			LayoutType layoutType = layout.getLayoutType();
			if (!layoutType.isFirstPageable()) {
				throw new RequiredLayoutException( RequiredLayoutException.FIRST_LAYOUT_TYPE);
			}
			
		}
		
		Set<Long> layoutIdsSet = new LinkedHashSet<>();
		for (long layoutId : layoutIds) {
			layoutIdsSet.add(layoutId);
		}
		
		Set<Long> newLayoutIdsSet = new HashSet<>();
		List<Layout> layouts = layoutPersistence.findByG_P_P( groupId, privateLayout, parentLayoutId);
		for (Layout layout : layouts) {
			if (!layoutIdsSet.contains(layout.getLayoutId())) {
				deleteLayout(layout, serviceContext);
			}
			
			else {
				newLayoutIdsSet.add(layout.getLayoutId());
			}
			
		}
		
		int priority = 0;
		for (long layoutId : layoutIdsSet) {
			Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
			layout.setPriority(priority++);
			layoutLocalService.updateLayout(layout);
		}
		
	}
	
	public void updateAsset( long userId, Layout layout, long[] assetCategoryIds, String[] assetTagNames) throws PortalException {  assetEntryLocalService.updateEntry( userId, layout.getGroupId(), layout.getCreateDate(), layout.getModifiedDate(), Layout.class.getName(), layout.getPlid(), layout.getUuid(), 0, assetCategoryIds, assetTagNames, true, false, null, null, null, null, ContentTypes.TEXT_HTML, layout.getName(LocaleUtil.getDefault()), null, null, null, null, 0, 0, null);
	}
	
	public Layout updateFriendlyURL( long userId, long plid, String friendlyURL, String languageId) throws PortalException {
		Date now = new Date();
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		friendlyURL = layoutLocalServiceHelper.getFriendlyURL( layout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(), StringPool.BLANK, friendlyURL);
		layoutLocalServiceHelper.validateFriendlyURL( layout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(), friendlyURL);
		layoutFriendlyURLLocalService.updateLayoutFriendlyURL( userId, layout.getCompanyId(), layout.getGroupId(), layout.getPlid(), layout.isPrivateLayout(), friendlyURL, languageId, new ServiceContext());
		layout.setModifiedDate(now);
		String defaultLanguageId = LocaleUtil.toLanguageId( LocaleUtil.getSiteDefault());
		if (languageId.equals(defaultLanguageId)) {
			layout.setFriendlyURL(friendlyURL);
		}
		
		return layoutLocalService.updateLayout(layout);
	}
	
	public Layout updateIconImage(long plid, byte[] bytes) throws PortalException {
		Layout layout = layoutPersistence.fetchByPrimaryKey(plid);
		if (layout == null) {
			return null;
		}
		
		PortalUtil.updateImageId( layout, bytes != null, bytes, "iconImageId", 0, 0, 0);
		return layoutLocalService.updateLayout(layout);
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, Date publishDate) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		layout.setPublishDate(publishDate);
		return layoutPersistence.update(layout);
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, long classNameId, long classPK) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		layout.setClassNameId(classNameId);
		layout.setClassPK(classPK);
		return layoutPersistence.update(layout);
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, long parentLayoutId, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, boolean hidden, Map<Locale, String> friendlyURLMap, boolean hasIconImage, byte[] iconBytes, long masterLayoutPlid, ServiceContext serviceContext) throws PortalException {
		 parentLayoutId = layoutLocalServiceHelper.getParentLayoutId( groupId, privateLayout, parentLayoutId);
		String name = nameMap.get(LocaleUtil.getSiteDefault());
		friendlyURLMap = layoutLocalServiceHelper.getFriendlyURLMap( groupId, privateLayout, layoutId, name, friendlyURLMap);
		String friendlyURL = friendlyURLMap.get(LocaleUtil.getSiteDefault());
		layoutLocalServiceHelper.validate( groupId, privateLayout, layoutId, parentLayoutId, name, type, hidden, friendlyURLMap, serviceContext);
		layoutLocalServiceHelper.validateParentLayoutId( groupId, privateLayout, layoutId, parentLayoutId);
		Date now = new Date();
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		if (parentLayoutId != layout.getParentLayoutId()) {
			layout.setParentPlid( _getParentPlid(groupId, privateLayout, parentLayoutId));
			int priority = layoutLocalServiceHelper.getNextPriority( groupId, privateLayout, parentLayoutId, layout.getSourcePrototypeLayoutUuid(), -1);
			layout.setPriority(priority);
		}
		
		layout.setModifiedDate(serviceContext.getModifiedDate(now));
		layout.setParentLayoutId(parentLayoutId);
		layout.setNameMap(nameMap);
		layout.setTitleMap(titleMap);
		layout.setDescriptionMap(descriptionMap);
		layout.setKeywordsMap(keywordsMap);
		layout.setRobotsMap(robotsMap);
		layout.setType(type);
		layout.setHidden(hidden);
		layout.setFriendlyURL(friendlyURL);
		PortalUtil.updateImageId( layout, hasIconImage, iconBytes, "iconImageId", 0, 0, 0);
		layout.setMasterLayoutPlid(masterLayoutPlid);
		boolean layoutUpdateable = ParamUtil.getBoolean( serviceContext, Sites.LAYOUT_UPDATEABLE, true);
		UnicodeProperties typeSettingsUnicodeProperties = layout.getTypeSettingsProperties();
		Group group = layout.getGroup();
		if (!group.isLayoutPrototype()) {
			typeSettingsUnicodeProperties.put( Sites.LAYOUT_UPDATEABLE, String.valueOf(layoutUpdateable));
		}
		
		if (privateLayout) {
			typeSettingsUnicodeProperties.put( "privateLayout", String.valueOf(privateLayout));
		}
		
		layout.setTypeSettingsProperties(typeSettingsUnicodeProperties);
		String layoutPrototypeUuid = ParamUtil.getString( serviceContext, "layoutPrototypeUuid");
		if (Validator.isNotNull(layoutPrototypeUuid)) {
			layout.setLayoutPrototypeUuid(layoutPrototypeUuid);
			boolean applyLayoutPrototype = ParamUtil.getBoolean( serviceContext, "applyLayoutPrototype");
			boolean layoutPrototypeLinkEnabled = ParamUtil.getBoolean( serviceContext, "layoutPrototypeLinkEnabled");
			layout.setLayoutPrototypeLinkEnabled(layoutPrototypeLinkEnabled);
			if (applyLayoutPrototype) {
				serviceContext.setAttribute( "applyLayoutPrototype", Boolean.FALSE);
				_applyLayoutPrototype( layoutPrototypeUuid, layout, layoutPrototypeLinkEnabled);
			}
			
		}
		
		layout.setExpandoBridgeAttributes(serviceContext);
		layout = layoutLocalService.updateLayout(layout);
		 layoutFriendlyURLLocalService.updateLayoutFriendlyURLs( serviceContext.getUserId(), layout.getCompanyId(), layout.getGroupId(), layout.getPlid(), layout.isPrivateLayout(), friendlyURLMap, serviceContext);
		 updateAsset( serviceContext.getUserId(), layout, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames());
		return layout;
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, long parentLayoutId, Map<Locale, String> nameMap, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, boolean hidden, Map<Locale, String> friendlyURLMap, boolean hasIconImage, byte[] iconBytes, ServiceContext serviceContext) throws PortalException {
		return updateLayout( groupId, privateLayout, layoutId, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, 0, serviceContext);
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, String typeSettings) throws PortalException {
		Date now = new Date();
		UnicodeProperties typeSettingsUnicodeProperties = new UnicodeProperties();
		typeSettingsUnicodeProperties.fastLoad(typeSettings);
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		validateTypeSettingsProperties(layout, typeSettingsUnicodeProperties);
		layout.setModifiedDate(now);
		layout.setTypeSettings(typeSettingsUnicodeProperties.toString());
		if (layout.isSystem() && (layout.getClassPK() > 0)) {
			layout.setPublishDate(now);
		}
		
		return layoutPersistence.update(layout);
	}
	
	public Layout updateLookAndFeel( long groupId, boolean privateLayout, long layoutId, String themeId, String colorSchemeId, String css) throws PortalException {
		Date now = new Date();
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		layout.setModifiedDate(now);
		layout.setThemeId(themeId);
		layout.setColorSchemeId(colorSchemeId);
		layout.setCss(css);
		return layoutPersistence.update(layout);
	}
	
	public Layout updateMasterLayoutPlid( long groupId, boolean privateLayout, long layoutId, long masterLayoutPlid) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		layout.setMasterLayoutPlid(masterLayoutPlid);
		return layoutPersistence.update(layout);
	}
	
	public Layout updateName(Layout layout, String name, String languageId) throws PortalException {
		Date now = new Date();
		layoutLocalServiceHelper.validateName(name, languageId);
		layout.setModifiedDate(now);
		layout.setName(name, LocaleUtil.fromLanguageId(languageId));
		layout = layoutPersistence.update(layout);
		Group group = layout.getGroup();
		if (group.isLayoutPrototype()) {
			LayoutPrototype layoutPrototype = layoutPrototypeLocalService.getLayoutPrototype( group.getClassPK());
			layoutPrototype.setModifiedDate(now);
			layoutPrototype.setName( name, LocaleUtil.fromLanguageId(languageId));
			layoutPrototypePersistence.update(layoutPrototype);
		}
		
		return layout;
	}
	
	public Layout updateName( long groupId, boolean privateLayout, long layoutId, String name, String languageId) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		return updateName(layout, name, languageId);
	}
	
	public Layout updateName(long plid, String name, String languageId) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		return updateName(layout, name, languageId);
	}
	
	public Layout updateParentLayoutId( long groupId, boolean privateLayout, long layoutId, long parentLayoutId) throws PortalException {
		parentLayoutId = layoutLocalServiceHelper.getParentLayoutId( groupId, privateLayout, parentLayoutId);
		layoutLocalServiceHelper.validateParentLayoutId( groupId, privateLayout, layoutId, parentLayoutId);
		Date now = new Date();
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		if (parentLayoutId != layout.getParentLayoutId()) {
			layout.setParentPlid( _getParentPlid(groupId, privateLayout, parentLayoutId));
			int priority = layoutLocalServiceHelper.getNextPriority( groupId, privateLayout, parentLayoutId, layout.getSourcePrototypeLayoutUuid(), -1);
			layout.setPriority(priority);
		}
		
		layout.setModifiedDate(now);
		layout.setParentLayoutId(parentLayoutId);
		Layout draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), layout.getPlid());
		if (draftLayout != null) {
			updateParentLayoutId( groupId, privateLayout, draftLayout.getLayoutId(), parentLayoutId);
		}
		
		return layoutLocalService.updateLayout(layout);
	}
	
	public Layout updateParentLayoutId(long plid, long parentPlid) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		if (layout.getParentPlid() == parentPlid) {
			return layout;
		}
		
		Date now = new Date();
		long parentLayoutId = LayoutConstants.DEFAULT_PARENT_LAYOUT_ID;
		if (parentPlid > 0) {
			Layout parentLayout = layoutPersistence.fetchByPrimaryKey( parentPlid);
			if (parentLayout != null) {
				parentLayoutId = parentLayout.getLayoutId();
			}
			
		}
		
		parentLayoutId = layoutLocalServiceHelper.getParentLayoutId( layout.getGroupId(), layout.isPrivateLayout(), parentLayoutId);
		layoutLocalServiceHelper.validateParentLayoutId( layout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(), parentLayoutId);
		if (parentLayoutId != layout.getParentLayoutId()) {
			int priority = layoutLocalServiceHelper.getNextPriority( layout.getGroupId(), layout.isPrivateLayout(), parentLayoutId, layout.getSourcePrototypeLayoutUuid(), -1);
			layout.setPriority(priority);
		}
		
		layout.setModifiedDate(now);
		layout.setParentPlid(parentPlid);
		layout.setParentLayoutId(parentLayoutId);
		Layout draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), layout.getPlid());
		if (draftLayout != null) {
			updateParentLayoutId(draftLayout.getPlid(), parentPlid);
		}
		
		return layoutLocalService.updateLayout(layout);
	}
	
	public Layout updateParentLayoutIdAndPriority( long plid, long parentPlid, int priority) throws PortalException {
		Layout layout = updateParentLayoutId(plid, parentPlid);
		Layout draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), layout.getPlid());
		if (draftLayout != null) {
			layoutLocalService.updatePriority(draftLayout.getPlid(), priority);
		}
		
		return layoutLocalService.updatePriority(layout, priority);
	}
	
	public void updatePriorities(long groupId, boolean privateLayout) throws PortalException {
		List<Layout> layouts = layoutPersistence.findByG_P( groupId, privateLayout);
		for (Layout layout : layouts) {
			int nextPriority = layoutLocalServiceHelper.getNextPriority( layout.getGroupId(), layout.isPrivateLayout(), layout.getParentLayoutId(), layout.getSourcePrototypeLayoutUuid(), layout.getPriority());
			layout.setPriority(nextPriority);
			layout = layoutPersistence.update(layout);
			Layout draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), layout.getPlid());
			if (draftLayout != null) {
				draftLayout.setPriority(nextPriority);
				layoutPersistence.update(draftLayout);
			}
			
		}
		
	}
	
	public Layout updatePriority(Layout layout, int priority) throws PortalException {
		if (layout.getPriority() == priority) {
			return layout;
		}
		
		int oldPriority = layout.getPriority();
		int nextPriority = layoutLocalServiceHelper.getNextPriority( layout.getGroupId(), layout.isPrivateLayout(), layout.getParentLayoutId(), layout.getSourcePrototypeLayoutUuid(), priority);
		if (oldPriority == nextPriority) {
			return layout;
		}
		
		layout.setModifiedDate(new Date());
		layout.setPriority(nextPriority);
		layout = layoutPersistence.update(layout);
		Layout draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), layout.getPlid());
		if (draftLayout != null) {
			draftLayout.setPriority(nextPriority);
			draftLayout = layoutPersistence.update(draftLayout);
		}
		
		List<Layout> layouts = layoutPersistence.findByG_P_P( layout.getGroupId(), layout.isPrivateLayout(), layout.getParentLayoutId());
		boolean lessThan = false;
		if (oldPriority < nextPriority) {
			lessThan = true;
		}
		
		layouts = ListUtil.sort( layouts, new LayoutPriorityComparator(layout, lessThan));
		if (layout.getParentLayoutId() == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
			Layout firstLayout = layouts.get(0);
			layoutLocalServiceHelper.validateFirstLayout(firstLayout);
		}
		
		int newPriority = LayoutConstants.FIRST_PRIORITY;
		for (Layout curLayout : layouts) {
			int curNextPriority = layoutLocalServiceHelper.getNextPriority( layout.getGroupId(), layout.isPrivateLayout(), layout.getParentLayoutId(), curLayout.getSourcePrototypeLayoutUuid(), newPriority++);
			if (curLayout.getPriority() == curNextPriority) {
				continue;
			}
			
			curLayout.setModifiedDate(layout.getModifiedDate());
			curLayout.setPriority(curNextPriority);
			curLayout = layoutPersistence.update(curLayout);
			draftLayout = fetchLayout( classNameLocalService.getClassNameId(Layout.class), curLayout.getPlid());
			if (draftLayout != null) {
				draftLayout.setPriority(nextPriority);
				layoutPersistence.update(draftLayout);
			}
			
			if (curLayout.equals(layout)) {
				layout = curLayout;
			}
			
		}
		
		return layout;
	}
	
	public Layout updatePriority( long groupId, boolean privateLayout, long layoutId, int priority) throws PortalException {
		Layout layout = layoutPersistence.findByG_P_L( groupId, privateLayout, layoutId);
		return updatePriority(layout, priority);
	}
	
	public Layout updatePriority( long groupId, boolean privateLayout, long layoutId, long nextLayoutId, long previousLayoutId) throws PortalException {
		Layout layout = getLayout(groupId, privateLayout, layoutId);
		int priority = layout.getPriority();
		Layout nextLayout = null;
		if (nextLayoutId > 0) {
			nextLayout = getLayout(groupId, privateLayout, nextLayoutId);
		}
		
		Layout previousLayout = null;
		if (previousLayoutId > 0) {
			previousLayout = getLayout( groupId, privateLayout, previousLayoutId);
		}
		
		if ((nextLayout != null) && (priority > nextLayout.getPriority())) {
			priority = nextLayout.getPriority();
		}
		
		else if ((previousLayout != null) && (priority < previousLayout.getPriority())) {
			priority = previousLayout.getPriority();
		}
		
		return updatePriority(layout, priority);
	}
	
	public Layout updatePriority(long plid, int priority) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		return updatePriority(layout, priority);
	}
	
	@Indexable(type = IndexableType.REINDEX)
	public Layout updateStatus( long userId, long plid, int status, ServiceContext serviceContext) throws PortalException {
		 Layout layout = layoutLocalService.getLayout(plid);
		layout.setStatus(status);
		User user = userLocalService.getUser(userId);
		layout.setStatusByUserId(user.getUserId());
		layout.setStatusByUserName(user.getFullName());
		layout.setStatusDate(serviceContext.getModifiedDate(new Date()));
		layout = layoutPersistence.update(layout);
		 if (status == WorkflowConstants.STATUS_APPROVED) {
			assetEntryLocalService.updateEntry( Layout.class.getName(), layout.getPlid(), layout.getStatusDate(), null, true, false);
		}
		
		return layout;
	}
	
	public Layout updateType(long plid, String type) throws PortalException {
		Layout layout = layoutPersistence.findByPrimaryKey(plid);
		layout.setType(type);
		if (Objects.equals(type, LayoutConstants.TYPE_CONTENT)) {
			layout.setLayoutPrototypeUuid(StringPool.BLANK);
			layout.setLayoutPrototypeLinkEnabled(false);
		}
		
		return layoutLocalService.updateLayout(layout);
	}
	
	protected void validateTypeSettingsProperties( Layout layout, UnicodeProperties typeSettingsUnicodeProperties) throws PortalException {
		String sitemapChangeFrequency = typeSettingsUnicodeProperties.getProperty("sitemap-changefreq");
		if (Validator.isNotNull(sitemapChangeFrequency) && !sitemapChangeFrequency.equals("always") && !sitemapChangeFrequency.equals("hourly") && !sitemapChangeFrequency.equals("daily") && !sitemapChangeFrequency.equals("weekly") && !sitemapChangeFrequency.equals("monthly") && !sitemapChangeFrequency.equals("yearly") && !sitemapChangeFrequency.equals("never")) {
			throw new SitemapChangeFrequencyException();
		}
		
		String sitemapInclude = typeSettingsUnicodeProperties.getProperty( LayoutTypePortletConstants.SITEMAP_INCLUDE);
		if (Validator.isNotNull(sitemapInclude) && !sitemapInclude.equals("0") && !sitemapInclude.equals("1")) {
			throw new SitemapIncludeException();
		}
		
		String sitemapPriority = typeSettingsUnicodeProperties.getProperty( "sitemap-priority");
		if (Validator.isNotNull(sitemapPriority)) {
			try {
				double priority = Double.parseDouble(sitemapPriority);
				if ((priority < 0) || (priority > 1)) {
					throw new SitemapPagePriorityException();
				}
				
			}
			
			catch (NumberFormatException numberFormatException) {
				throw new SitemapPagePriorityException(numberFormatException);
			}
			
		}
		
		boolean enableJavaScript = PropsValues. FIELD_ENABLE_COM_LIFERAY_PORTAL_KERNEL_MODEL_LAYOUT_JAVASCRIPT;
		if (!enableJavaScript) {
			UnicodeProperties layoutTypeSettingsUnicodeProperties = layout.getTypeSettingsProperties();
			String javaScript = layoutTypeSettingsUnicodeProperties.getProperty( "javascript");
			typeSettingsUnicodeProperties.setProperty("javascript", javaScript);
		}
		
	}
	
	@BeanReference(type = LayoutLocalServiceHelper.class)
	protected LayoutLocalServiceHelper layoutLocalServiceHelper;
	private List<Layout> _addChildUserGroupLayouts( Group group, List<Layout> layouts) throws PortalException {
		List<Layout> childLayouts = new ArrayList<>(layouts.size());
		for (Layout layout : layouts) {
			Group layoutGroup = layout.getGroup();
			if (layoutGroup.isUserGroup()) {
				childLayouts.add(new VirtualLayout(layout, group));
			}
			
			else {
				childLayouts.add(layout);
			}
			
		}
		
		return childLayouts;
	}
	
	private List<Layout> _addUserGroupLayouts( Group group, LayoutSet layoutSet, List<Layout> layouts, long parentLayoutId) throws PortalException {
		layouts = new ArrayList<>(layouts);
		List<UserGroup> userUserGroups = userGroupLocalService.getUserUserGroups(group.getClassPK());
		for (UserGroup userGroup : userUserGroups) {
			Group userGroupGroup = userGroup.getGroup();
			List<Layout> userGroupLayouts = getLayouts( userGroupGroup.getGroupId(), layoutSet.isPrivateLayout(), parentLayoutId);
			for (Layout userGroupLayout : userGroupLayouts) {
				layouts.add(new VirtualLayout(userGroupLayout, group));
			}
			
		}
		
		return layouts;
	}
	
	private List<Layout> _addUserGroupLayouts( Group group, LayoutSet layoutSet, List<Layout> layouts, long[] parentLayoutIds) throws PortalException {
		boolean copied = false;
		List<UserGroup> userUserGroups = userGroupLocalService.getUserUserGroups(group.getClassPK());
		for (UserGroup userGroup : userUserGroups) {
			Group userGroupGroup = userGroup.getGroup();
			List<Layout> userGroupLayouts = getLayouts( userGroupGroup.getGroupId(), layoutSet.isPrivateLayout(), parentLayoutIds);
			for (Layout userGroupLayout : userGroupLayouts) {
				if (!copied) {
					layouts = new ArrayList<>(layouts);
					copied = true;
				}
				
				layouts.add(new VirtualLayout(userGroupLayout, group));
			}
			
		}
		
		return layouts;
	}
	
	private void _applyLayoutPrototype( String layoutPrototypeUuid, Layout layout, boolean layoutPrototypeLinkEnabled) throws PortalException {
		LayoutPrototype layoutPrototype = layoutPrototypeLocalService.getLayoutPrototypeByUuidAndCompanyId( layoutPrototypeUuid, layout.getCompanyId());
		try {
			SitesUtil.applyLayoutPrototype( layoutPrototype, layout, layoutPrototypeLinkEnabled);
		}
		
		catch (PortalException portalException) {
			throw portalException;
		}
		
		catch (SystemException systemException) {
			throw systemException;
		}
		
		catch (Exception exception) {
			throw new SystemException(exception);
		}
		
	}
	
	private SearchContext _buildSearchContext( long groupId, Boolean privateLayout, String keywords, String[] types, int start, int end, OrderByComparator<Layout> obc) throws PortalException {  return _buildSearchContext( groupId, 0, privateLayout, keywords, types, start, end, obc);
	}
	
	private SearchContext _buildSearchContext( long groupId, long userId, Boolean privateLayout, String keywords, String[] types, int start, int end, OrderByComparator<Layout> obc) throws PortalException {  SearchContext searchContext = new SearchContext();
		searchContext.setAttribute(Field.TITLE, keywords);
		searchContext.setAttribute(Field.TYPE, types);
		searchContext.setAttribute("paginationType", "more");
		if (privateLayout != null) {
			searchContext.setAttribute( "privateLayout", String.valueOf(privateLayout));
		}
		
		Group group = groupLocalService.getGroup(groupId);
		searchContext.setCompanyId(group.getCompanyId());
		searchContext.setEnd(end);
		searchContext.setGroupIds(new long[] {groupId});
		searchContext.setKeywords(keywords);
		searchContext.setStart(start);
		if (obc != null) {
			searchContext.setSorts(_getSortFromComparator(obc));
		}
		
		if (userId > 0) {
			searchContext.setUserId(userId);
		}
		
		QueryConfig queryConfig = searchContext.getQueryConfig();
		queryConfig.setHighlightEnabled(false);
		queryConfig.setScoreEnabled(false);
		return searchContext;
	}
	
	private List<Layout> _getChildLayouts( LayoutSet layoutSet, long[] parentLayoutIds) {
		if (MergeLayoutPrototypesThreadLocal.isInProgress()) {
			return layoutPersistence.findByG_P_P( layoutSet.getGroupId(), layoutSet.isPrivateLayout(), parentLayoutIds);
		}
		
		try {
			Group group = groupPersistence.findByPrimaryKey( layoutSet.getGroupId());
			if (layoutSet.isLayoutSetPrototypeLinkActive() && !_mergeLayouts( group, layoutSet, layoutSet.getGroupId(), layoutSet.isPrivateLayout(), parentLayoutIds)) {
				return layoutPersistence.findByG_P_P( layoutSet.getGroupId(), layoutSet.isPrivateLayout(), parentLayoutIds);
			}
			
			List<Layout> layouts = layoutPersistence.findByG_P_P( layoutSet.getGroupId(), layoutSet.isPrivateLayout(), parentLayoutIds);
			return _injectVirtualLayouts( group, layoutSet, layouts, parentLayoutIds);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	private long _getParentPlid( long groupId, boolean privateLayout, long parentLayoutId) {
		if (parentLayoutId == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
			return 0;
		}
		
		Layout parentLayout = layoutPersistence.fetchByG_P_L( groupId, privateLayout, parentLayoutId);
		if (parentLayout == null) {
			return 0;
		}
		
		return parentLayout.getPlid();
	}
	
	private Sort _getSortFromComparator(OrderByComparator<Layout> obc) {
		String[] fields = obc.getOrderByFields();
		boolean reverse = !obc.isAscending();
		String field = fields[0];
		return new Sort(field, Sort.LONG_TYPE, reverse);
	}
	
	private List<Layout> _injectVirtualLayouts( Group group, LayoutSet layoutSet, List<Layout> layouts, long parentLayoutId) throws PortalException {
		if (MergeLayoutPrototypesThreadLocal.isInProgress()) {
			return layouts;
		}
		
		if (group.isUser()) {
			_virtualLayoutTargetGroupId.set(group.getGroupId());
			if (parentLayoutId == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
				return _addUserGroupLayouts( group, layoutSet, layouts, parentLayoutId);
			}
			
			return _addChildUserGroupLayouts(group, layouts);
		}
		
		if (group.isUserGroup() && (parentLayoutId != LayoutConstants.DEFAULT_PARENT_LAYOUT_ID)) {
			long targetGroupId = _virtualLayoutTargetGroupId.get();
			if (targetGroupId != GroupConstants.DEFAULT_LIVE_GROUP_ID) {
				Group targetGroup = groupLocalService.getGroup(targetGroupId);
				return _addChildUserGroupLayouts(targetGroup, layouts);
			}
			
		}
		
		return layouts;
	}
	
	private List<Layout> _injectVirtualLayouts( Group group, LayoutSet layoutSet, List<Layout> layouts, long[] parentLayoutIds) throws PortalException {
		if (MergeLayoutPrototypesThreadLocal.isInProgress()) {
			return layouts;
		}
		
		if (group.isUser()) {
			_virtualLayoutTargetGroupId.set(group.getGroupId());
			if (ArrayUtil.contains( parentLayoutIds, LayoutConstants.DEFAULT_PARENT_LAYOUT_ID)) {
				_addUserGroupLayouts( group, layoutSet, layouts, parentLayoutIds);
				if (parentLayoutIds.length == 1) {
					return layouts;
				}
				
			}
			
			return _addChildUserGroupLayouts(group, layouts);
		}
		
		if (group.isUserGroup()) {
			long targetGroupId = _virtualLayoutTargetGroupId.get();
			if (targetGroupId != GroupConstants.DEFAULT_LIVE_GROUP_ID) {
				Group targetGroup = groupLocalService.getGroup(targetGroupId);
				return _addChildUserGroupLayouts(targetGroup, layouts);
			}
			
		}
		
		return layouts;
	}
	
	private boolean _mergeLayout(Layout layout, Object... arguments) throws PortalException {
		if (MergeLayoutPrototypesThreadLocal.isInProgress()) {
			return false;
		}
		
		Group group = layout.getGroup();
		if (MergeLayoutPrototypesThreadLocal.isMergeComplete( "getLayout", arguments) && !group.isUser()) {
			return false;
		}
		
		if (Validator.isNull(layout.getLayoutPrototypeUuid()) && Validator.isNull(layout.getSourcePrototypeLayoutUuid())) {
			return false;
		}
		
		boolean workflowEnabled = WorkflowThreadLocal.isEnabled();
		LayoutSet layoutSet = layout.getLayoutSet();
		try {
			WorkflowThreadLocal.setEnabled(false);
			SitesUtil.mergeLayoutPrototypeLayout(group, layout);
			if (Validator.isNotNull(layout.getSourcePrototypeLayoutUuid())) {
				SitesUtil.mergeLayoutSetPrototypeLayouts(group, layoutSet);
			}
			
		}
		
		catch (PortalException portalException) {
			throw portalException;
		}
		
		catch (Exception exception) {
			throw new SystemException(exception);
		}
		
		finally {
			MergeLayoutPrototypesThreadLocal.setMergeComplete( "getLayout", arguments);
			WorkflowThreadLocal.setEnabled(workflowEnabled);
		}
		
		return true;
	}
	
	private boolean _mergeLayouts( Group group, LayoutSet layoutSet, Object... arguments) {
		if (MergeLayoutPrototypesThreadLocal.isMergeComplete( "getLayouts", arguments) && !group.isUser()) {
			return false;
		}
		
		boolean workflowEnabled = WorkflowThreadLocal.isEnabled();
		try {
			if (SitesUtil.isLayoutSetMergeable(group, layoutSet)) {
				WorkflowThreadLocal.setEnabled(false);
				SitesUtil.mergeLayoutSetPrototypeLayouts(group, layoutSet);
			}
			
		}
		
		catch (Exception exception) {
			if (_log.isWarnEnabled()) {
				_log.warn( "Unable to merge layouts for site template", exception);
			}
			
		}
		
		finally {
			MergeLayoutPrototypesThreadLocal.setMergeComplete( "getLayouts", arguments);
			WorkflowThreadLocal.setEnabled(workflowEnabled);
		}
		
		return true;
	}
	
	private void _resetPortalPreferences(Layout layout) {
		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass( PortalPreferences.class, getClassLoader());
		dynamicQuery.add( RestrictionsFactoryUtil.eq( "ownerType", ResourceConstants.SCOPE_INDIVIDUAL));
		dynamicQuery.add( RestrictionsFactoryUtil.like( "preferences", "%" + CustomizedPages.namespacePlid(layout.getPlid()) + "%"));
		List<PortalPreferences> portalPreferenceses = portalPreferencesLocalService.dynamicQuery(dynamicQuery);
		for (PortalPreferences portalPreferences : portalPreferenceses) {
			PortalPreferencesImpl portalPreferencesImpl = new PortalPreferencesImpl(portalPreferences, false);
			portalPreferencesImpl.resetValues( CustomizedPages.namespacePlid(layout.getPlid()));
		}
		
	}
	
	private static final Log _log = LogFactoryUtil.getLog( LayoutLocalServiceImpl.class);
	private static final ThreadLocal<Long> _virtualLayoutTargetGroupId = new CentralizedThreadLocal<>( LayoutLocalServiceImpl.class + "._virtualLayoutTargetGroupId", () -> GroupConstants.DEFAULT_LIVE_GROUP_ID);
}

