package com.liferay.portal.service.impl;
import com.liferay.exportimport.kernel.configuration.ExportImportConfigurationConstants;
import com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactoryUtil;
import com.liferay.exportimport.kernel.model.ExportImportConfiguration;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.cache.thread.local.ThreadLocalCachable;
import com.liferay.portal.kernel.exception.NoSuchLayoutException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.messaging.DestinationNames;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.model.GroupConstants;
import com.liferay.portal.kernel.model.Layout;
import com.liferay.portal.kernel.model.LayoutConstants;
import com.liferay.portal.kernel.model.LayoutReference;
import com.liferay.portal.kernel.model.LayoutSoap;
import com.liferay.portal.kernel.model.LayoutType;
import com.liferay.portal.kernel.model.LayoutTypePortlet;
import com.liferay.portal.kernel.model.Plugin;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.PortletPreferencesFactoryUtil;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.scheduler.SchedulerEngineHelperUtil;
import com.liferay.portal.kernel.scheduler.StorageType;
import com.liferay.portal.kernel.scheduler.Trigger;
import com.liferay.portal.kernel.scheduler.TriggerFactoryUtil;
import com.liferay.portal.kernel.security.auth.CompanyThreadLocal;
import com.liferay.portal.kernel.security.permission.ActionKeys;
import com.liferay.portal.kernel.security.permission.PermissionChecker;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.permission.GroupPermissionUtil;
import com.liferay.portal.kernel.service.permission.LayoutPermissionUtil;
import com.liferay.portal.kernel.service.permission.PortletPermissionUtil;
import com.liferay.portal.kernel.util.Digester;
import com.liferay.portal.kernel.util.DigesterUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ListUtil;
import com.liferay.portal.kernel.util.MapUtil;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortletKeys;
import com.liferay.portal.kernel.util.TempFileEntryUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.uuid.PortalUUIDUtil;
import com.liferay.portal.service.base.LayoutServiceBaseImpl;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import javax.portlet.PortletPreferences;
public class LayoutServiceImpl extends LayoutServiceBaseImpl {
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, long classNameId, long classPK, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, long masterLayoutPlid, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( groupId, privateLayout, parentLayoutId, classNameId, classPK, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, masterLayoutPlid, serviceContext);
	}
	
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, long classNameId, long classPK, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, Map<Locale, String> friendlyURLMap, long masterLayoutPlid, ServiceContext serviceContext) throws PortalException {
		PermissionChecker permissionChecker = getPermissionChecker();
		if (parentLayoutId == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
			GroupPermissionUtil.check( permissionChecker, groupId, ActionKeys.ADD_LAYOUT);
		}
		
		else {
			LayoutPermissionUtil.check( permissionChecker, groupId, privateLayout, parentLayoutId, ActionKeys.ADD_LAYOUT);
		}
		
		Layout layout = layoutLocalService.addLayout( getUserId(), groupId, privateLayout, parentLayoutId, classNameId, classPK, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, masterLayoutPlid, friendlyURLMap, serviceContext);
		checkLayoutTypeSettings(layout, StringPool.BLANK, typeSettings);
		return layout;
	}
	
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, long classNameId, long classPK, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, boolean system, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( groupId, privateLayout, parentLayoutId, classNameId, classPK, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, 0, serviceContext);
	}
	
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, long masterLayoutPlid, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( groupId, privateLayout, parentLayoutId, 0, 0, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, false, friendlyURLMap, masterLayoutPlid, serviceContext);
	}
	
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, Map<Locale, String> friendlyURLMap, long masterLayoutPlid, ServiceContext serviceContext) throws PortalException {
		return addLayout( groupId, privateLayout, parentLayoutId, 0, 0, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, false, friendlyURLMap, masterLayoutPlid, serviceContext);
	}
	
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, String typeSettings, boolean hidden, Map<Locale, String> friendlyURLMap, ServiceContext serviceContext) throws PortalException {
		return addLayout( groupId, privateLayout, parentLayoutId, 0, 0, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, false, 0, friendlyURLMap, serviceContext);
	}
	
	public Layout addLayout( long groupId, boolean privateLayout, long parentLayoutId, String name, String title, String description, String type, boolean hidden, String friendlyURL, ServiceContext serviceContext) throws PortalException {
		PermissionChecker permissionChecker = getPermissionChecker();
		if (parentLayoutId == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
			GroupPermissionUtil.check( permissionChecker, groupId, ActionKeys.ADD_LAYOUT);
		}
		
		else {
			LayoutPermissionUtil.check( permissionChecker, groupId, privateLayout, parentLayoutId, ActionKeys.ADD_LAYOUT);
		}
		
		return layoutLocalService.addLayout( getUserId(), groupId, privateLayout, parentLayoutId, name, title, description, type, hidden, friendlyURL, serviceContext);
	}
	
	public FileEntry addTempFileEntry( long groupId, String folderName, String fileName, InputStream inputStream, String mimeType) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.EXPORT_IMPORT_LAYOUTS);
		return TempFileEntryUtil.addTempFileEntry( groupId, getUserId(), DigesterUtil.digestHex(Digester.SHA_256, folderName), fileName, inputStream, mimeType);
	}
	
	public void deleteLayout( long groupId, boolean privateLayout, long layoutId, ServiceContext serviceContext) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), groupId, privateLayout, layoutId, ActionKeys.DELETE);
		layoutLocalService.deleteLayout( groupId, privateLayout, layoutId, serviceContext);
	}
	
	public void deleteLayout(long plid, ServiceContext serviceContext) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), plid, ActionKeys.DELETE);
		layoutLocalService.deleteLayout(plid, serviceContext);
	}
	
	public void deleteTempFileEntry( long groupId, String folderName, String fileName) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.EXPORT_IMPORT_LAYOUTS);
		TempFileEntryUtil.deleteTempFileEntry( groupId, getUserId(), DigesterUtil.digestHex(Digester.SHA_256, folderName), fileName);
	}
	
	public Layout fetchLayout( long groupId, boolean privateLayout, long layoutId) throws PortalException {
		Layout layout = layoutPersistence.fetchByG_P_L( groupId, privateLayout, layoutId);
		if (layout != null) {
			LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.VIEW);
		}
		
		return layout;
	}
	
	public List<Layout> getAncestorLayouts(long plid) throws PortalException {
		Layout layout = layoutLocalService.getLayout(plid);
		return filterLayouts(layout.getAncestors());
	}
	
	public long getControlPanelLayoutPlid() throws PortalException {
		Group group = groupLocalService.fetchGroup( CompanyThreadLocal.getCompanyId(), GroupConstants.CONTROL_PANEL);
		List<Layout> layouts = layoutLocalService.getLayouts( group.getGroupId(), true);
		if (ListUtil.isEmpty(layouts)) {
			throw new NoSuchLayoutException( "Unable to get control panel layout");
		}
		
		Layout layout = layouts.get(0);
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.VIEW);
		return layout.getPlid();
	}
	
	public long getDefaultPlid(long groupId, boolean privateLayout) {
		return layoutLocalService.getDefaultPlid(groupId, privateLayout);
	}
	
	public long getDefaultPlid( long groupId, long scopeGroupId, boolean privateLayout, String portletId) throws PortalException {
		if (groupId <= 0) {
			return LayoutConstants.DEFAULT_PLID;
		}
		
		PermissionChecker permissionChecker = getPermissionChecker();
		String scopeGroupLayoutUuid = null;
		Group scopeGroup = groupLocalService.getGroup(scopeGroupId);
		if (scopeGroup.isLayout()) {
			Layout scopeGroupLayout = layoutLocalService.getLayout( scopeGroup.getClassPK());
			scopeGroupLayoutUuid = scopeGroupLayout.getUuid();
		}
		
		Map<Long, PortletPreferences> jxPortletPreferencesMap = PortletPreferencesFactoryUtil.getPortletSetupMap( scopeGroup.getCompanyId(), groupId, PortletKeys.PREFS_OWNER_ID_DEFAULT, PortletKeys.PREFS_OWNER_TYPE_LAYOUT, portletId, privateLayout);
		for (Map.Entry<Long, PortletPreferences> entry : jxPortletPreferencesMap.entrySet()) {
			long plid = entry.getKey();
			Layout layout = null;
			try {
				layout = layoutLocalService.getLayout(plid);
			}
			
			catch (NoSuchLayoutException noSuchLayoutException) {
				 if (_log.isDebugEnabled()) {
					_log.debug(noSuchLayoutException, noSuchLayoutException);
				}
				
				continue;
			}
			
			if (!LayoutPermissionUtil.contains( permissionChecker, layout, ActionKeys.VIEW)) {
				continue;
			}
			
			if (!layout.isTypePortlet()) {
				continue;
			}
			
			LayoutTypePortlet layoutTypePortlet = (LayoutTypePortlet)layout.getLayoutType();
			if (!layoutTypePortlet.hasPortletId(portletId)) {
				continue;
			}
			
			PortletPreferences jxPortletPreferences = entry.getValue();
			String scopeType = GetterUtil.getString( jxPortletPreferences.getValue("lfrScopeType", null));
			if (scopeGroup.isLayout()) {
				String scopeLayoutUuid = GetterUtil.getString( jxPortletPreferences.getValue("lfrScopeLayoutUuid", null));
				if (Validator.isNotNull(scopeType) && Validator.isNotNull(scopeLayoutUuid) && scopeLayoutUuid.equals(scopeGroupLayoutUuid)) {
					return layout.getPlid();
				}
				
			}
			
			else if (scopeGroup.isCompany()) {
				if (Validator.isNotNull(scopeType) && scopeType.equals("company")) {
					return layout.getPlid();
				}
				
			}
			
			else {
				if (Validator.isNull(scopeType)) {
					return layout.getPlid();
				}
				
			}
			
		}
		
		return LayoutConstants.DEFAULT_PLID;
	}
	
	public long getDefaultPlid( long groupId, long scopeGroupId, String portletId) throws PortalException {
		long plid = getDefaultPlid(groupId, scopeGroupId, false, portletId);
		if (plid == 0) {
			plid = getDefaultPlid(groupId, scopeGroupId, true, portletId);
		}
		
		return plid;
	}
	
	public Layout getLayoutByUuidAndGroupId( String uuid, long groupId, boolean privateLayout) throws PortalException {
		Layout layout = layoutLocalService.getLayoutByUuidAndGroupId( uuid, groupId, privateLayout);
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.VIEW);
		return layout;
	}
	
	public String getLayoutName( long groupId, boolean privateLayout, long layoutId, String languageId) throws PortalException {
		Layout layout = layoutLocalService.getLayout( groupId, privateLayout, layoutId);
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.VIEW);
		return layout.getName(languageId);
	}
	
	public long getLayoutPlid(String uuid, long groupId, boolean privateLayout) throws PortalException {
		Layout layout = layoutLocalService.getLayoutByUuidAndGroupId( uuid, groupId, privateLayout);
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.VIEW);
		return layout.getPlid();
	}
	
	public LayoutReference[] getLayoutReferences( long companyId, String portletId, String preferencesKey, String preferencesValue) {
		LayoutReference[] layoutReferences = layoutLocalService.getLayouts( companyId, portletId, preferencesKey, preferencesValue);
		List<LayoutReference> filteredLayoutReferences = new ArrayList<>( layoutReferences.length);
		for (LayoutReference layoutReference : layoutReferences) {
			try {
				LayoutSoap layoutSoap = layoutReference.getLayoutSoap();
				if (LayoutPermissionUtil.contains( getPermissionChecker(), layoutSoap.getPlid(), ActionKeys.VIEW)) {
					filteredLayoutReferences.add(layoutReference);
				}
				
			}
			
			catch (PortalException portalException) {
				 if (_log.isDebugEnabled()) {
					_log.debug(portalException, portalException);
				}
				
			}
			
		}
		
		return filteredLayoutReferences.toArray(new LayoutReference[0]);
	}
	
	public List<Layout> getLayouts(long groupId, boolean privateLayout) {
		return layoutPersistence.filterFindByG_P(groupId, privateLayout);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, long parentLayoutId) throws PortalException {
		List<Layout> layouts = layoutLocalService.getLayouts( groupId, privateLayout, parentLayoutId);
		return filterLayouts(layouts);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, long parentLayoutId, boolean incomplete, int start, int end) throws PortalException {
		List<Layout> layouts = layoutLocalService.getLayouts( groupId, privateLayout, parentLayoutId, incomplete, start, end);
		return filterLayouts(layouts);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, String type) throws PortalException {
		List<Layout> layouts = layoutLocalService.getLayouts( groupId, privateLayout, type);
		return filterLayouts(layouts);
	}
	
	public List<Layout> getLayouts( long groupId, boolean privateLayout, String keywords, String[] types, int start, int end, OrderByComparator<Layout> obc) throws PortalException {  if (Validator.isNull(keywords)) { return layoutPersistence.filterFindByG_P( groupId, privateLayout, start, end, obc);
		}
		
		return layoutLocalService.getLayouts( groupId, getUserId(), privateLayout, keywords, types, start, end, obc);
	}
	
	public List<Layout> getLayouts(long groupId, String type) {
		return layoutPersistence.filterFindByG_T(groupId, type);
	}
	
	public List<Layout> getLayouts( long groupId, String type, int start, int end) {
		return layoutPersistence.filterFindByG_T(groupId, type, start, end);
	}
	
	public int getLayoutsCount( Group group, boolean privateLayout, String keywords, String[] types) throws PortalException {  if (Validator.isNull(keywords)) { return layoutPersistence.filterCountByG_P( group.getGroupId(), privateLayout);
		}
		
		return layoutLocalService.getLayoutsCount( group, getUserId(), privateLayout, keywords, types);
	}
	
	public int getLayoutsCount(long groupId, boolean privateLayout) {
		return layoutPersistence.filterCountByG_P(groupId, privateLayout);
	}
	
	public int getLayoutsCount( long groupId, boolean privateLayout, long parentLayoutId) {
		return layoutPersistence.filterCountByG_P_P( groupId, privateLayout, parentLayoutId);
	}
	
	public int getLayoutsCount( long groupId, boolean privateLayout, long parentLayoutId, int priority) {
		return layoutPersistence.filterCountByG_P_P_LtP( groupId, privateLayout, parentLayoutId, priority);
	}
	
	public int getLayoutsCount(long groupId, String type) {
		return layoutPersistence.filterCountByG_T(groupId, type);
	}
	
	public String[] getTempFileNames(long groupId, String folderName) throws PortalException {  GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.EXPORT_IMPORT_LAYOUTS);
		return TempFileEntryUtil.getTempFileNames( groupId, getUserId(), DigesterUtil.digestHex(Digester.SHA_256, folderName));
	}
	
	public boolean hasLayout(String uuid, long groupId, boolean privateLayout) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.VIEW);
		return layoutLocalService.hasLayout(uuid, groupId, privateLayout);
	}
	
	public boolean hasPortletId(long plid, String portletId) throws PortalException {
		Layout layout = layoutLocalService.fetchLayout(plid);
		if (layout == null) {
			return false;
		}
		
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.VIEW);
		LayoutType layoutType = layout.getLayoutType();
		if (layoutType instanceof LayoutTypePortlet) {
			LayoutTypePortlet layoutTypePortlet = (LayoutTypePortlet)layoutType;
			if (layoutTypePortlet.hasPortletId(portletId)) {
				return true;
			}
			
		}
		
		return false;
	}
	
	public void schedulePublishToLive( long sourceGroupId, long targetGroupId, boolean privateLayout, long[] layoutIds, Map<String, String[]> parameterMap, String groupName, String cronText, Date schedulerStartDate, Date schedulerEndDate, String description) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), targetGroupId, ActionKeys.PUBLISH_STAGING);
		Trigger trigger = TriggerFactoryUtil.createTrigger( PortalUUIDUtil.generate(), groupName, schedulerStartDate, schedulerEndDate, cronText, TimeZone.getTimeZone( MapUtil.getString(parameterMap, "timeZoneId")));
		User user = userPersistence.findByPrimaryKey(getUserId());
		Map<String, Serializable> publishLayoutLocalSettingsMap = ExportImportConfigurationSettingsMapFactoryUtil. buildPublishLayoutLocalSettingsMap( user, sourceGroupId, targetGroupId, privateLayout, layoutIds, parameterMap);
		ExportImportConfiguration exportImportConfiguration = exportImportConfigurationLocalService. addDraftExportImportConfiguration( getUserId(), description, ExportImportConfigurationConstants. TYPE_SCHEDULED_PUBLISH_LAYOUT_LOCAL, publishLayoutLocalSettingsMap);
		SchedulerEngineHelperUtil.schedule( trigger, StorageType.PERSISTED, description, DestinationNames.LAYOUTS_LOCAL_PUBLISHER, exportImportConfiguration.getExportImportConfigurationId(), 0);
	}
	
	public void schedulePublishToRemote( long sourceGroupId, boolean privateLayout, Map<Long, Boolean> layoutIdMap, Map<String, String[]> parameterMap, String remoteAddress, int remotePort, String remotePathContext, boolean secureConnection, long remoteGroupId, boolean remotePrivateLayout, Date startDate, Date endDate, String groupName, String cronText, Date schedulerStartDate, Date schedulerEndDate, String description) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), sourceGroupId, ActionKeys.PUBLISH_STAGING);
		Trigger trigger = TriggerFactoryUtil.createTrigger( PortalUUIDUtil.generate(), groupName, schedulerStartDate, schedulerEndDate, cronText, TimeZone.getTimeZone( MapUtil.getString(parameterMap, "timeZoneId")));
		User user = userPersistence.findByPrimaryKey(getUserId());
		Map<String, Serializable> publishLayoutRemoteSettingsMap = ExportImportConfigurationSettingsMapFactoryUtil. buildPublishLayoutRemoteSettingsMap( getUserId(), sourceGroupId, privateLayout, layoutIdMap, parameterMap, remoteAddress, remotePort, remotePathContext, secureConnection, remoteGroupId, remotePrivateLayout, user.getLocale(), user.getTimeZone());
		ExportImportConfiguration exportImportConfiguration = exportImportConfigurationLocalService. addDraftExportImportConfiguration( getUserId(), description, ExportImportConfigurationConstants. TYPE_SCHEDULED_PUBLISH_LAYOUT_REMOTE, publishLayoutRemoteSettingsMap);
		SchedulerEngineHelperUtil.schedule( trigger, StorageType.PERSISTED, description, DestinationNames.LAYOUTS_REMOTE_PUBLISHER, exportImportConfiguration.getExportImportConfigurationId(), 0);
	}
	
	public void setLayouts( long groupId, boolean privateLayout, long parentLayoutId, long[] layoutIds, ServiceContext serviceContext) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.UPDATE);
		layoutLocalService.setLayouts( groupId, privateLayout, parentLayoutId, layoutIds, serviceContext);
	}
	
	public void unschedulePublishToLive( long groupId, String jobName, String groupName) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.PUBLISH_STAGING);
		SchedulerEngineHelperUtil.delete( jobName, groupName, StorageType.PERSISTED);
	}
	
	public void unschedulePublishToRemote( long groupId, String jobName, String groupName) throws PortalException {
		GroupPermissionUtil.check( getPermissionChecker(), groupId, ActionKeys.PUBLISH_STAGING);
		SchedulerEngineHelperUtil.delete( jobName, groupName, StorageType.PERSISTED);
	}
	
	public Layout updateIconImage(long plid, byte[] bytes) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), plid, ActionKeys.UPDATE);
		return layoutLocalService.updateIconImage(plid, bytes);
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, long parentLayoutId, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, boolean hidden, Map<Locale, String> friendlyURLMap, boolean hasIconImage, byte[] iconBytes, long masterLayoutPlid, ServiceContext serviceContext) throws PortalException {
		Layout layout = layoutLocalService.getLayout( groupId, privateLayout, layoutId);
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.UPDATE);
		Layout updatedLayout = layoutLocalService.updateLayout( groupId, privateLayout, layoutId, parentLayoutId, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, masterLayoutPlid, serviceContext);
		if (!(layout.getLayoutType() instanceof LayoutTypePortlet)) {
			checkLayoutTypeSettings( layout, StringPool.BLANK, updatedLayout.getTypeSettings());
		}
		
		return updatedLayout;
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, long parentLayoutId, Map<Locale, String> localeNamesMap, Map<Locale, String> localeTitlesMap, Map<Locale, String> descriptionMap, Map<Locale, String> keywordsMap, Map<Locale, String> robotsMap, String type, boolean hidden, Map<Locale, String> friendlyURLMap, boolean hasIconImage, byte[] iconBytes, ServiceContext serviceContext) throws PortalException {
		return updateLayout( groupId, privateLayout, layoutId, parentLayoutId, localeNamesMap, localeTitlesMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, 0, serviceContext);
	}
	
	public Layout updateLayout( long groupId, boolean privateLayout, long layoutId, String typeSettings) throws PortalException {
		Layout layout = layoutLocalService.getLayout( groupId, privateLayout, layoutId);
		LayoutPermissionUtil.check( getPermissionChecker(), layout, ActionKeys.UPDATE);
		checkLayoutTypeSettings(layout, layout.getTypeSettings(), typeSettings);
		return layoutLocalService.updateLayout( groupId, privateLayout, layoutId, typeSettings);
	}
	
	public Layout updateLookAndFeel( long groupId, boolean privateLayout, long layoutId, String themeId, String colorSchemeId, String css) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), groupId, privateLayout, layoutId, ActionKeys.UPDATE);
		if (Validator.isNotNull(themeId)) {
			pluginSettingLocalService.checkPermission( getUserId(), themeId, Plugin.TYPE_THEME);
		}
		
		return layoutLocalService.updateLookAndFeel( groupId, privateLayout, layoutId, themeId, colorSchemeId, css);
	}
	
	public Layout updateName( long groupId, boolean privateLayout, long layoutId, String name, String languageId) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), groupId, privateLayout, layoutId, ActionKeys.UPDATE);
		return layoutLocalService.updateName( groupId, privateLayout, layoutId, name, languageId);
	}
	
	public Layout updateName(long plid, String name, String languageId) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), plid, ActionKeys.UPDATE);
		return layoutLocalService.updateName(plid, name, languageId);
	}
	
	public Layout updateParentLayoutId( long groupId, boolean privateLayout, long layoutId, long parentLayoutId) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), groupId, privateLayout, layoutId, ActionKeys.UPDATE);
		return layoutLocalService.updateParentLayoutId( groupId, privateLayout, layoutId, parentLayoutId);
	}
	
	public Layout updateParentLayoutId(long plid, long parentPlid) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), plid, ActionKeys.UPDATE);
		return layoutLocalService.updateParentLayoutId(plid, parentPlid);
	}
	
	public Layout updateParentLayoutIdAndPriority( long plid, long parentPlid, int priority) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), plid, ActionKeys.UPDATE);
		return layoutLocalService.updateParentLayoutIdAndPriority( plid, parentPlid, priority);
	}
	
	public Layout updatePriority( long groupId, boolean privateLayout, long layoutId, int priority) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), groupId, privateLayout, layoutId, ActionKeys.UPDATE);
		return layoutLocalService.updatePriority( groupId, privateLayout, layoutId, priority);
	}
	
	public Layout updatePriority( long groupId, boolean privateLayout, long layoutId, long nextLayoutId, long previousLayoutId) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), groupId, privateLayout, layoutId, ActionKeys.UPDATE);
		return layoutLocalService.updatePriority( groupId, privateLayout, layoutId, nextLayoutId, previousLayoutId);
	}
	
	public Layout updatePriority(long plid, int priority) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), plid, ActionKeys.UPDATE);
		return layoutLocalService.updatePriority(plid, priority);
	}
	
	public Layout updateType(long plid, String type) throws PortalException {
		LayoutPermissionUtil.check( getPermissionChecker(), layoutLocalService.getLayout(plid), ActionKeys.UPDATE);
		return layoutLocalService.updateType(plid, type);
	}
	
	protected void checkLayoutTypeSettings( Layout layout, String originalTypeSettings, String newTypeSettings) throws PortalException {
		if (!(layout.getLayoutType() instanceof LayoutTypePortlet)) {
			return;
		}
		
		List<String> originalPortletIds = getPortletIds( layout, originalTypeSettings);
		List<String> newPortletIds = getPortletIds(layout, newTypeSettings);
		for (String portletId : newPortletIds) {
			if (originalPortletIds.contains(portletId)) {
				continue;
			}
			
			PortletPermissionUtil.check( getPermissionChecker(), layout.getPlid(), portletId, ActionKeys.ADD_TO_PAGE);
		}
		
	}
	
	protected List<Layout> filterLayouts(List<Layout> layouts) throws PortalException {
		List<Layout> filteredLayouts = new ArrayList<>();
		for (Layout layout : layouts) {
			if (LayoutPermissionUtil.contains( getPermissionChecker(), layout, ActionKeys.VIEW)) {
				filteredLayouts.add(layout);
			}
			
		}
		
		return filteredLayouts;
	}
	
	protected List<String> getPortletIds(Layout layout, String typeSettings) {
		if (Validator.isBlank(typeSettings)) {
			return Collections.emptyList();
		}
		
		Layout clonedLayout = (Layout)layout.clone();
		clonedLayout.setType(LayoutConstants.TYPE_PORTLET);
		clonedLayout.setTypeSettings(typeSettings);
		LayoutTypePortlet layoutTypePortlet = (LayoutTypePortlet)clonedLayout.getLayoutType();
		return layoutTypePortlet.getPortletIds();
	}
	
	private static final Log _log = LogFactoryUtil.getLog( LayoutServiceImpl.class);
}

