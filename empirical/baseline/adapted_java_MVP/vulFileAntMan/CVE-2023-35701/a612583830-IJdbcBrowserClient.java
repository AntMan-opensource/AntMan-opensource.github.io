package org.apache.hive.jdbc.saml;
import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.Immutable;
import java.io.Closeable;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import org.apache.hive.service.auth.saml.HiveSamlUtils;
public interface IJdbcBrowserClient extends Closeable {
  void startListening() throws HiveJdbcBrowserException;
  void doBrowserSSO() throws HiveJdbcBrowserException;
  void init(JdbcBrowserClientContext context);
  Integer getPort();
  HiveJdbcBrowserServerResponse getServerResponse();
  String getClientIdentifier();
  class JdbcBrowserClientContext {
    private final URI ssoUri;
    private final String clientIdentifier;
    JdbcBrowserClientContext(URI ssoUrl, String clientIdentifier) {
      this.ssoUri = Preconditions.checkNotNull(ssoUrl);
      this.clientIdentifier = Preconditions.checkNotNull(clientIdentifier);
    }
    
    public URI getSsoUri() {
      return ssoUri;
    }
    
    public String getClientIdentifier() {
      return clientIdentifier;
    }
    
  }
  
  class HiveJdbcBrowserException extends Exception {
    HiveJdbcBrowserException(String msg, Throwable ex) {
      super(msg, ex);
    }
    
    HiveJdbcBrowserException(String msg) {
      super(msg);
    }
    
    HiveJdbcBrowserException(Throwable e) {
      super(e);
    }
    
  }
  
  @Immutable
  class HiveJdbcBrowserServerResponse {
    private final String msg;
    private final boolean status;
    private final String token;
    public HiveJdbcBrowserServerResponse(boolean status, String msg, String token) {
      this.status = status;
      this.msg = msg;
      this.token = token;
    }
    
    public String getMsg() {
      return msg;
    }
    
    public boolean isSuccessful() {
      return status;
    }
    
    public String getToken() {
      return token;
    }
    
    public boolean isValid() {
      return !status || (token != null && !token.isEmpty());
    }
    
  }
  
}


