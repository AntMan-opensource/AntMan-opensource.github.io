package org.apache.inlong.manager.web.controller;
import org.apache.inlong.manager.pojo.common.PageResult;
import org.apache.inlong.manager.pojo.common.Response;
import org.apache.inlong.manager.pojo.user.LoginUserUtils;
import org.apache.inlong.manager.pojo.user.UserInfo;
import org.apache.inlong.manager.pojo.user.UserRequest;
import org.apache.inlong.manager.pojo.user.UserRoleCode;
import org.apache.inlong.manager.service.user.UserService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
@Api(tags = "User-Auth-API")
public class UserController {
    @Autowired
    UserService userService;
    @ApiOperation(value = "Get the logged-in user")
    public Response<UserInfo> currentUser() {
        return Response.success(LoginUserUtils.getLoginUser());
    }
    
    @ApiOperation(value = "Register user")
    @RequiresRoles(value = UserRoleCode.INLONG_ADMIN)
    public Response<Integer> register(@Validated @RequestBody UserRequest userInfo) {
        String currentUser = LoginUserUtils.getLoginUser().getName();
        return Response.success(userService.save(userInfo, currentUser));
    }
    
    @ApiOperation(value = "Get user by ID")
    public Response<UserInfo> getById(@PathVariable Integer id) {
        String currentUser = LoginUserUtils.getLoginUser().getName();
        return Response.success(userService.getById(id, currentUser));
    }
    
    @ApiOperation(value = "Get user by name")
    public Response<UserInfo> getByName(@PathVariable String name) {
        return Response.success(userService.getByName(name));
    }
    
    @ApiOperation(value = "List all users")
    public Response<PageResult<UserInfo>> list(@RequestBody UserRequest request) {
        return Response.success(userService.list(request));
    }
    
    @ApiOperation(value = "Update user info")
    public Response<Integer> update(@Validated @RequestBody UserRequest userInfo) {
        String currentUser = LoginUserUtils.getLoginUser().getName();
        return Response.success(userService.update(userInfo, currentUser));
    }
    
    @ApiOperation(value = "Delete user by id")
    @RequiresRoles(value = UserRoleCode.TENANT_ADMIN)
    public Response<Boolean> delete(@RequestParam("id") Integer id) {
        String currentUser = LoginUserUtils.getLoginUser().getName();
        return Response.success(userService.delete(id, currentUser));
    }
    
}


