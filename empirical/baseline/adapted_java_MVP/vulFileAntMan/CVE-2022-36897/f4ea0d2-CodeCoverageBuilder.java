package com.compuware.jenkins.build;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.common.StandardCredentials;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.compuware.jenkins.common.configuration.CpwrGlobalConfiguration;
import com.compuware.jenkins.common.configuration.HostConnection;
import hudson.AbortException;
import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.Util;
import hudson.model.AbstractProject;
import hudson.model.Item;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.security.ACL;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.ListBoxModel.Option;
import jenkins.model.Jenkins;
import jenkins.tasks.SimpleBuildStep;
import net.sf.json.JSONObject;
public class CodeCoverageBuilder extends Builder implements SimpleBuildStep {
	private static final Logger LOGGER = Logger.getLogger("hudson.CodeCoverageBuilder"); 
	 private final String m_connectionId;
	private final String m_credentialsId;
	private final String m_analysisPropertiesPath;
	private final String m_analysisProperties;
	public CodeCoverageBuilder(String connectionId, String credentialsId, String analysisPropertiesPath, String analysisProperties) {
		m_connectionId = StringUtils.trimToEmpty(connectionId);
		m_credentialsId = StringUtils.trimToEmpty(credentialsId);
		m_analysisPropertiesPath = StringUtils.trimToEmpty(analysisPropertiesPath);
		m_analysisProperties = StringUtils.trimToEmpty(analysisProperties);
	}
	
	 public String getConnectionId() {
		return m_connectionId;
	}
	
	 public String getCredentialsId() {
		return m_credentialsId;
	}
	
	 public String getAnalysisPropertiesPath() {
		return m_analysisPropertiesPath;
	}
	
	 public String getAnalysisProperties() {
		return m_analysisProperties;
	}
	
    public CodeCoverageDescriptorImpl getDescriptor()  {
		return (CodeCoverageDescriptorImpl) super.getDescriptor();
    }
    
	public static final class CodeCoverageDescriptorImpl extends BuildStepDescriptor<Builder> {
		 public CodeCoverageDescriptorImpl() {
			super(CodeCoverageBuilder.class);
			load();
		}
		
		public boolean isApplicable(Class<? extends AbstractProject> aClass) {
			 return true;
		}
		
		public String getDisplayName() {
			return Messages.descriptorDisplayName();
		}
		
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
			save();
			return super.configure(req, formData);
		}
		
		 public String getDefaultAnalysisProperties() {
			return Messages.defaultAnalysisProperties();
		}
		
		 public FormValidation doCheckConnectionId(@QueryParameter String connectionId) {
			String tempValue = StringUtils.trimToEmpty(connectionId);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkHostConnectionError());
			}
			
			return FormValidation.ok();
		}
		
		 public FormValidation doCheckCredentialsId(@QueryParameter String credentialsId) {
			String tempValue = StringUtils.trimToEmpty(credentialsId);
			if (tempValue.isEmpty()){
				return FormValidation.error(Messages.checkLoginCredentialsError());
			}
			
			return FormValidation.ok();
		}
		
		 public ListBoxModel doFillConnectionIdItems(@AncestorInPath Jenkins context, @QueryParameter String connectionId, @AncestorInPath Item project) {
			CpwrGlobalConfiguration globalConfig = CpwrGlobalConfiguration.get();
			HostConnection[] hostConnections = globalConfig.getHostConnections();
			ListBoxModel model = new ListBoxModel();
			model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
			for (HostConnection connection : hostConnections){
				boolean isSelected = false;
				if (connectionId != null){
					isSelected = connectionId.matches(connection.getConnectionId());
				}
				
				model.add(new Option(connection.getDescription() + " [" + connection.getHostPort() + ']',  connection.getConnectionId(), isSelected));
			}
			
			return model;
		}
		
		 public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Jenkins context, @QueryParameter String credentialsId, @AncestorInPath Item project) {
			List<StandardCredentials> creds = CredentialsProvider.lookupCredentials( StandardCredentials.class, project, ACL.SYSTEM, Collections.<DomainRequirement> emptyList());
			ListBoxModel model = new ListBoxModel();
			model.add(new Option(StringUtils.EMPTY, StringUtils.EMPTY, false));
			for (StandardCredentials c : creds){
				boolean isSelected = false;
				if (credentialsId != null){
					isSelected = credentialsId.matches(c.getId());
				}
				
				String description = Util.fixEmptyAndTrim(c.getDescription());
				try {
					model.add(new Option(CpwrGlobalConfiguration.get().getCredentialsUser(c) + (description != null ? (" (" + description + ')') : StringUtils.EMPTY), c.getId(), isSelected)); 
				}
				 catch (AbortException e) {
					LOGGER.log(Level.WARNING, e.getMessage());
				}
				
			}
			
			return model;
		}
		
	}
	
	public void perform(Run<?, ?> run, FilePath workspace, Launcher launcher, TaskListener listener) throws InterruptedException, IOException {
		CodeCoverageScanner scanner = new CodeCoverageScanner(this);
		scanner.perform(run, workspace, launcher, listener);
	}
	
}

