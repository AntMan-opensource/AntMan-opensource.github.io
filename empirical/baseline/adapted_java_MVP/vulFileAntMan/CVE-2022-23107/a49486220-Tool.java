package io.jenkins.plugins.analysis.core.model;
import java.io.Serializable;
import java.nio.charset.Charset;
import org.apache.commons.lang3.StringUtils;
import edu.hm.hafner.analysis.ParsingCanceledException;
import edu.hm.hafner.analysis.ParsingException;
import edu.hm.hafner.analysis.Report;
import edu.hm.hafner.util.VisibleForTesting;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.verb.POST;
import org.jenkinsci.Symbol;
import hudson.FilePath;
import hudson.model.AbstractDescribableImpl;
import hudson.model.AbstractProject;
import hudson.model.Descriptor;
import hudson.model.Item;
import hudson.model.Run;
import hudson.util.FormValidation;
import jenkins.security.MasterToSlaveCallable;
import io.jenkins.plugins.analysis.core.util.LogHandler;
import io.jenkins.plugins.analysis.core.util.ModelValidation;
import io.jenkins.plugins.util.JenkinsFacade;
public abstract class Tool extends AbstractDescribableImpl<Tool> implements Serializable {
    private static final long serialVersionUID = 3305739700153168629L;
    private String id = StringUtils.EMPTY;
    private String name = StringUtils.EMPTY;
    private JenkinsFacade jenkins = new JenkinsFacade();
    public void setJenkinsFacade(final JenkinsFacade jenkinsFacade) {
        this.jenkins = jenkinsFacade;
    }
    
    protected Object readResolve() {
        jenkins = new JenkinsFacade();
        return this;
    }
    
    public void setId(final String id) {
        this.id = id;
    }
    
    public String getId() {
        return id;
    }
    
    public String getActualId() {
        return StringUtils.defaultIfBlank(getId(), getDescriptor().getId());
    }
    
    public void setName(final String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
    
    public String getActualName() {
        return StringUtils.defaultIfBlank(getName(), getDescriptor().getDisplayName());
    }
    
    public String getSymbolName() {
        return getDescriptor().getSymbolName();
    }
    
    public StaticAnalysisLabelProvider getLabelProvider() {
        StaticAnalysisLabelProvider labelProvider = getDescriptor().getLabelProvider();
        if (StringUtils.isNotBlank(name)) {
            labelProvider.setName(name);
        }
        
        return labelProvider;
    }
    
    public ToolDescriptor getDescriptor() {
        return (ToolDescriptor) jenkins.getDescriptorOrDie(getClass());
    }
    
    public abstract Report scan(Run<?, ?> run, FilePath workspace, Charset sourceCodeEncoding, LogHandler logger) throws ParsingException, ParsingCanceledException;
    public abstract static class ToolDescriptor extends Descriptor<Tool> {
        private final ModelValidation model = new ModelValidation();
        private final String defaultId;
        protected ToolDescriptor(final String defaultId) {
            super();
            new ModelValidation().ensureValidId(defaultId);
            this.defaultId = defaultId;
        }
        
        public FormValidation doCheckId(@AncestorInPath final AbstractProject<?, ?> project, @QueryParameter final String id) {
            if (!new JenkinsFacade().hasPermission(Item.CONFIGURE, project)) {
                return FormValidation.ok();
            }
            
            return model.validateId(id);
        }
        
        public String getId() {
            return defaultId;
        }
        
        public String getName() {
            return getDisplayName();
        }
        
        public String getSymbolName() {
            Symbol annotation = getClass().getAnnotation(Symbol.class);
            if (annotation != null) {
                String[] symbols = annotation.value();
                if (symbols.length > 0) {
                    return symbols[0];
                }
                
            }
            
            return "unknownSymbol";
        }
        
        public StaticAnalysisLabelProvider getLabelProvider() {
            return new StaticAnalysisLabelProvider(getId(), getDisplayName());
        }
        
        public String getHelp() {
            return StringUtils.EMPTY;
        }
        
        public String getUrl() {
            return StringUtils.EMPTY;
        }
        
        public boolean isPostProcessingEnabled() {
            return true;
        }
        
    }
    
}


