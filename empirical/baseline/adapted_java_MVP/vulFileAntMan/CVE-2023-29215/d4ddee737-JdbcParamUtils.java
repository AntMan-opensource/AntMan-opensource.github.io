package org.apache.linkis.manager.engineplugin.jdbc.utils;
import org.apache.linkis.common.conf.CommonVars;
import org.apache.linkis.common.conf.CommonVars$;
import org.apache.linkis.common.utils.SecurityUtils;
import org.apache.linkis.manager.engineplugin.jdbc.JDBCPropertiesParser;
import org.apache.linkis.manager.engineplugin.jdbc.constant.JDBCEngineConnConstant;
import org.apache.linkis.manager.engineplugin.jdbc.exception.JDBCParamsIllegalException;
import org.apache.commons.lang3.StringUtils;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import static org.apache.linkis.manager.engineplugin.jdbc.errorcode.JDBCErrorCodeSummary.*;
public class JdbcParamUtils {
  private static final Logger LOG = LoggerFactory.getLogger(JdbcParamUtils.class);
  private static final String JDBC_MATCH_REGEX = "jdbc:\\w+://\\S+:[0-9]{2,6}(/\\S*)?(\\?\\S*)?";
  private static final String JDBC_H2_PROTOCOL = "jdbc:h2";
  private static final String JDBC_MYSQL_PROTOCOL = "jdbc:mysql";
  private static final String SENSITIVE_PARAM = "autoDeserialize=true";
  private static final String AUTO_DESERIALIZE = "autoDeserialize";
  private static final String APPEND_PARAMS = "allowLoadLocalInfile=false&autoDeserialize=false&allowLocalInfile=false&allowUrlInLocalInfile=false";
  public static final CommonVars<String> MYSQL_STRONG_SECURITY_ENABLE = CommonVars$.MODULE$.apply("linkis.mysql.strong.security.enable", "false");
  private static final char AND_SYMBOL = '&';
  private static final String QUOTATION_MARKS = "\"";
  private static final char QUESTION_MARK = '?';
  public static String clearJdbcUrl(String url) {
    if (url.startsWith(QUOTATION_MARKS) && url.endsWith(QUOTATION_MARKS)) {
      url = url.trim();
      return url.substring(1, url.length() - 1);
    }
    
    return url;
  }
  
  public static void validateJdbcUrl(String url) {
    if (!url.matches(JDBC_MATCH_REGEX) && !url.startsWith(JDBC_H2_PROTOCOL)) {
      throw new IllegalArgumentException("JDBC url format error!" + url);
    }
    
  }
  
  public static String filterJdbcUrl(String url) {
    LOG.info("the filter source url is: {}", url);
    if (StringUtils.isBlank(url)) {
      return url;
    }
    
    if (!url.toLowerCase().contains(JDBC_MYSQL_PROTOCOL)) {
      return url;
    }
    
    url = SecurityUtils.checkJdbcSecurity(url);
    url = SecurityUtils.appendMysqlForceParams(url);
    LOG.info("The filtered jdbc url is: {}", url);
    return url;
  }
  
  public static String getJdbcUsername(Map<String, String> properties) throws JDBCParamsIllegalException {
    String username = JDBCPropertiesParser.getString(properties, JDBCEngineConnConstant.JDBC_USERNAME, "");
    if (StringUtils.isBlank(username)) {
      throw new JDBCParamsIllegalException( JDBC_USERNAME_NOT_EMPTY.getErrorCode(), JDBC_USERNAME_NOT_EMPTY.getErrorDesc());
    }
    
    if (username.contains(AUTO_DESERIALIZE)) {
      LOG.warn("Sensitive param : {} in username field is filtered.", AUTO_DESERIALIZE);
      username = username.replace(AUTO_DESERIALIZE, "");
    }
    
    LOG.info("The jdbc username is: {}", username);
    return username;
  }
  
  public static String getJdbcPassword(Map<String, String> properties) throws JDBCParamsIllegalException {
    String password = JDBCPropertiesParser.getString(properties, JDBCEngineConnConstant.JDBC_PASSWORD, "");
    if (StringUtils.isBlank(password)) {
      throw new JDBCParamsIllegalException( JDBC_PASSWORD_NOT_EMPTY.getErrorCode(), JDBC_PASSWORD_NOT_EMPTY.getErrorDesc());
    }
    
    if (password.contains(AUTO_DESERIALIZE)) {
      LOG.warn("Sensitive param : {} in password field is filtered", AUTO_DESERIALIZE);
      password = password.replace(AUTO_DESERIALIZE, "");
    }
    
    return password;
  }
  
}


