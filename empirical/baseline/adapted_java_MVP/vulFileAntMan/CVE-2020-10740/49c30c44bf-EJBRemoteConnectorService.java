package org.jboss.as.ejb3.remote;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import org.jboss.as.remoting.RemotingConnectorBindingInfoService;
import org.jboss.ejb.protocol.remote.RemoteEJBService;
import org.jboss.msc.service.Service;
import org.jboss.msc.service.ServiceName;
import org.jboss.msc.service.StartContext;
import org.jboss.msc.service.StartException;
import org.jboss.msc.service.StopContext;
import org.jboss.msc.value.InjectedValue;
import org.jboss.remoting3.Endpoint;
import org.jboss.remoting3.OpenListener;
import org.jboss.remoting3.Registration;
import org.jboss.remoting3.ServiceRegistrationException;
import org.wildfly.transaction.client.provider.remoting.RemotingTransactionService;
import org.xnio.OptionMap;
public class EJBRemoteConnectorService implements Service<Void> {
    private static final String EJB_CHANNEL_NAME = "jboss.ejb";
    public static final ServiceName SERVICE_NAME = ServiceName.JBOSS.append("ejb3", "connector");
    private final InjectedValue<Endpoint> endpointValue = new InjectedValue<>();
    private final InjectedValue<ExecutorService> executorService = new InjectedValue<>();
    private final InjectedValue<RemotingConnectorBindingInfoService.RemotingConnectorInfo> remotingConnectorInfoInjectedValue = new InjectedValue<>();
    private final InjectedValue<AssociationService> associationServiceInjectedValue = new InjectedValue<>();
    private final InjectedValue<RemotingTransactionService> remotingTransactionServiceInjectedValue = new InjectedValue<>();
    private volatile Registration registration;
    private final OptionMap channelCreationOptions;
    public EJBRemoteConnectorService() {
        this(OptionMap.EMPTY);
    }
    
    public EJBRemoteConnectorService(final OptionMap channelCreationOptions) {
        this.channelCreationOptions = channelCreationOptions;
    }
    
    public void start(StartContext context) throws StartException {
        final AssociationService associationService = associationServiceInjectedValue.getValue();
        final Endpoint endpoint = endpointValue.getValue();
        Executor executor = executorService.getOptionalValue();
        if (executor != null) {
            associationService.setExecutor(executor);
        }
        
        RemoteEJBService remoteEJBService = RemoteEJBService.create( associationService.getAssociation(), remotingTransactionServiceInjectedValue.getValue() );
        remoteEJBService.serverUp();
        OpenListener channelOpenListener = remoteEJBService.getOpenListener();
        try {
            registration = endpoint.registerService(EJB_CHANNEL_NAME, channelOpenListener, this.channelCreationOptions);
        }
         catch (ServiceRegistrationException e) {
            throw new StartException(e);
        }
        
    }
    
    public void stop(StopContext context) {
        final AssociationService associationService = associationServiceInjectedValue.getValue();
        associationService.sendTopologyUpdateIfLastNodeToLeave();
        associationService.setExecutor(null);
        registration.close();
    }
    
    public Void getValue() {
        return null;
    }
    
    public InjectedValue<Endpoint> getEndpointInjector() {
        return endpointValue;
    }
    
    public InjectedValue<RemotingConnectorBindingInfoService.RemotingConnectorInfo> getRemotingConnectorInfoInjectedValue() {
        return remotingConnectorInfoInjectedValue;
    }
    
    public InjectedValue<RemotingTransactionService> getRemotingTransactionServiceInjector() {
        return remotingTransactionServiceInjectedValue;
    }
    
    public InjectedValue<AssociationService> getAssociationServiceInjector() {
        return associationServiceInjectedValue;
    }
    
    public InjectedValue<ExecutorService> getExecutorService() {
        return executorService;
    }
    
}


