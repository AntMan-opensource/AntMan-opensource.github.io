package hudson.model;
import com.thoughtworks.xstream.converters.ConversionException;
import com.thoughtworks.xstream.io.StreamException;
import hudson.DescriptorExtensionList;
import hudson.Extension;
import hudson.ExtensionPoint;
import hudson.Functions;
import hudson.Indenter;
import hudson.Util;
import hudson.model.Descriptor.FormException;
import hudson.model.listeners.ItemListener;
import hudson.scm.ChangeLogSet;
import hudson.scm.ChangeLogSet.Entry;
import hudson.search.CollectionSearchIndex;
import hudson.search.SearchIndexBuilder;
import hudson.security.ACL;
import hudson.security.AccessControlled;
import hudson.security.Permission;
import hudson.security.PermissionGroup;
import hudson.security.PermissionScope;
import hudson.tasks.UserAvatarResolver;
import hudson.util.AlternativeUiTextProvider;
import hudson.util.AlternativeUiTextProvider.Message;
import hudson.util.DescribableList;
import hudson.util.DescriptorList;
import hudson.util.FormApply;
import hudson.util.FormValidation;
import hudson.util.RunList;
import hudson.util.XStream2;
import hudson.views.ListViewColumn;
import hudson.widgets.Widget;
import edu.umd.cs.findbugs.annotations.NonNull;
import jenkins.model.Jenkins;
import jenkins.model.ModelObjectWithChildren;
import jenkins.model.ModelObjectWithContextMenu;
import jenkins.model.item_category.Categories;
import jenkins.model.item_category.Category;
import jenkins.model.item_category.ItemCategory;
import jenkins.scm.RunWithSCM;
import jenkins.security.stapler.StaplerAccessibleType;
import jenkins.util.ProgressiveRendering;
import jenkins.util.xml.XMLUtils;
import net.sf.json.JSON;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.jelly.JellyContext;
import org.apache.commons.lang.StringUtils;
import org.apache.tools.ant.filters.StringInputStream;
import org.jenkins.ui.icon.Icon;
import org.jenkins.ui.icon.IconSet;
import org.kohsuke.accmod.restrictions.DoNotUse;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.HttpResponses;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.WebMethod;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.export.ExportedBean;
import org.kohsuke.stapler.interceptor.RequirePOST;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.verb.POST;
import org.xml.sax.SAXException;
public abstract class View extends AbstractModelObject implements AccessControlled, Describable<View>, ExtensionPoint, Saveable, ModelObjectWithChildren {
    protected  ViewGroup owner;
    protected String name;
    protected String description;
    protected boolean filterExecutors;
    protected boolean filterQueue;
    private volatile DescribableList<ViewProperty,ViewPropertyDescriptor> properties = new PropertyList(this);
    protected View(String name) {
        this.name = name;
    }
    
    protected View(String name, ViewGroup owner) {
        this.name = name;
        this.owner = owner;
    }
    
    public abstract Collection<TopLevelItem> getItems();
    public Collection<TopLevelItem> getAllItems() {
        if (this instanceof ViewGroup) {
            final Collection<TopLevelItem> items = new LinkedHashSet<>(getItems());
            for(View view: ((ViewGroup) this).getViews()) {
                items.addAll(view.getAllItems());
            }
            
            return Collections.unmodifiableCollection(items);
        }
         else {
            return getItems();
        }
        
    }
    
    public TopLevelItem getItem(String name) {
        return getOwner().getItemGroup().getItem(name);
    }
    
    public final TopLevelItem getJob(String name) {
        return getItem(name);
    }
    
    public abstract boolean contains(TopLevelItem item);
    public String getViewName() {
        return name;
    }
    
    public void rename(String newName) throws Failure, FormException {
        if(name.equals(newName))    return; 
        Jenkins.checkGoodName(newName);
        if(owner.getView(newName)!=null) throw new FormException(Messages.Hudson_ViewAlreadyExists(newName),"name");
        String oldName = name;
        name = newName;
        owner.onViewRenamed(this,oldName,newName);
    }
    
    public ViewGroup getOwner() {
        return owner;
    }
    
    public ItemGroup<? extends TopLevelItem> getOwnerItemGroup() {
        return owner.getItemGroup();
    }
    
    public View getOwnerPrimaryView() {
        return owner.getPrimaryView();
    }
    
    public List<Action> getOwnerViewActions() {
        return owner.getViewActions();
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public DescribableList<ViewProperty,ViewPropertyDescriptor> getProperties() {
        synchronized (PropertyList.class) {
            if (properties == null) {
                properties = new PropertyList(this);
            }
             else {
                properties.setOwner(this);
            }
            
            return properties;
        }
        
    }
    
    public List<ViewPropertyDescriptor> getApplicablePropertyDescriptors() {
        List<ViewPropertyDescriptor> r = new ArrayList<>();
        for (ViewPropertyDescriptor pd : ViewProperty.all()) {
            if (pd.isEnabledFor(this)){
                r.add(pd);
}
        }
        
        return r;
    }
    
    public List<ViewPropertyDescriptor> getVisiblePropertyDescriptors() {
        return DescriptorVisibilityFilter.apply(this, getApplicablePropertyDescriptors());
    }
    
    public void save() throws IOException {
        if (owner != null) {
            owner.save();
        }
        
    }
    
    public List<ViewProperty> getAllProperties() {
        return getProperties().toList();
    }
    
    public ViewDescriptor getDescriptor() {
        return (ViewDescriptor) Jenkins.get().getDescriptorOrDie(getClass());
    }
    
    public String getDisplayName() {
        return getViewName();
    }
    
    public String getNewPronoun() {
        return AlternativeUiTextProvider.get(NEW_PRONOUN, this, Messages.AbstractItem_Pronoun());
    }
    
    public boolean isEditable() {
        return true;
    }
    
    public boolean isAutomaticRefreshEnabled() {
        return false;
    }
    
    public boolean isFilterExecutors() {
        return filterExecutors;
    }
    
    public boolean isFilterQueue() {
        return filterQueue;
    }
    
    public List<Widget> getWidgets() {
        return Collections.unmodifiableList(Jenkins.get().getWidgets());
    }
    
    public Iterable<? extends ListViewColumn> getColumns() {
        return ListViewColumn.createDefaultInitialColumnList(this);
    }
    
    public Indenter getIndenter() {
        return null;
    }
    
    public boolean isDefault() {
        return getOwner().getPrimaryView()==this;
    }
    
    public List<Computer> getComputers() {
        Computer[] computers = Jenkins.get().getComputers();
        if (!isFilterExecutors()) {
            return Arrays.asList(computers);
        }
        
        List<Computer> result = new ArrayList<>();
        HashSet<Label> labels = new HashSet<>();
        for (Item item : getItems()) {
            if (item instanceof AbstractProject<?, ?>) {
                labels.addAll(((AbstractProject<?, ?>) item).getRelevantLabels());
            }
            
        }
        
        for (Computer c : computers) {
            if (isRelevant(labels, c)) result.add(c);
        }
        
        return result;
    }
    
    private boolean isRelevant(Collection<Label> labels, Computer computer) {
        Node node = computer.getNode();
        if (node == null) return false;
        if (labels.contains(null) && node.getMode() == Node.Mode.NORMAL) return true;
        for (Label l : labels){
            if (l != null && l.contains(node)){
                return true;
}
}
        return false;
    }
    
    private static final int FILTER_LOOP_MAX_COUNT = 10;
    private List<Queue.Item> filterQueue(List<Queue.Item> base) {
        if (!isFilterQueue()) {
            return base;
        }
        
        Collection<TopLevelItem> items = getItems();
        return base.stream().filter(qi -> filterQueueItemTest(qi, items)) .collect(Collectors.toList());
    }
    
    private boolean filterQueueItemTest(Queue.Item item, Collection<TopLevelItem> viewItems) {
        Queue.Task currentTask = item.task;
        for (int count = 1;; count++) {
            if (viewItems.contains(currentTask)) {
                return true;
            }
            
            Queue.Task next = currentTask.getOwnerTask();
            if (next == currentTask) {
                break;
            }
             else {
                currentTask = next;
            }
            
            if (count == FILTER_LOOP_MAX_COUNT) {
                LOGGER.warning(String.format( "Failed to find root task for queue item '%s' for " + "view '%s' in under %d iterations, aborting!", item.getDisplayName(), getDisplayName(), FILTER_LOOP_MAX_COUNT));
                break;
            }
            
        }
        
        if (item.task instanceof AbstractProject<?, ?>) {
            AbstractProject<?,?> project = (AbstractProject<?, ?>) item.task;
            if (viewItems.contains(project.getRootProject())) {
                return true;
            }
            
        }
        
        return false;
    }
    
    public List<Queue.Item> getQueueItems() {
        return filterQueue(Arrays.asList(Jenkins.get().getQueue().getItems()));
    }
    
    public List<Queue.Item> getApproximateQueueItemsQuickly() {
        return filterQueue(Jenkins.get().getQueue().getApproximateItemsQuickly());
    }
    
    public String getUrl() {
        return isDefault() ? (owner!=null ? owner.getUrl() : "") : getViewUrl();
    }
    
    public String getViewUrl() {
        return (owner!=null ? owner.getUrl() : "") + "view/" + Util.rawEncode(getViewName()) + '/';
    }
    
 public String toString() {
        return super.toString() + "[" + getViewUrl() + "]";
    }
    
    public String getSearchUrl() {
        return getUrl();
    }
    
    public List<Action> getActions() {
        List<Action> result = new ArrayList<>();
        result.addAll(getOwner().getViewActions());
        result.addAll(TransientViewActionFactory.createAllFor(this));
        return result;
    }
    
    public void updateTransientActions() {}
    public Object getDynamic(String token) {
        for (Action a : getActions()) {
            String url = a.getUrlName();
            if (url==null)  continue;
            if (url.equals(token)){
                return a;
}
        }
        
        return null;
    }
    
    public String getAbsoluteUrl() {
        return Jenkins.get().getRootUrl()+getUrl();
    }
    
    public Api getApi() {
        return new Api(this);
    }
    
    public String getPostConstructLandingPage() {
        return "configure";
    }
    
    public ACL getACL() {
        return Jenkins.get().getAuthorizationStrategy().getACL(this);
    }
    
    public void onJobRenamed(Item item, String oldName, String newName) {}
    public static final class UserInfo implements Comparable<UserInfo> {
        private final User user;
        private Calendar lastChange;
        private Job<?,?> project;
        String avatar;
        UserInfo(User user, Job<?,?> p, Calendar lastChange) {
            this.user = user;
            this.project = p;
            this.lastChange = lastChange;
        }
        
        public User getUser() {
            return user;
        }
        
        public Calendar getLastChange() {
            return lastChange;
        }
        
        public AbstractProject getProject() {
            return project instanceof AbstractProject ? (AbstractProject)project : null;
        }
        
        public Job<?,?> getJob() {
            return project;
        }
        
        public String getLastChangeTimeString() {
            if(lastChange==null)    return "N/A";
            long duration = new GregorianCalendar().getTimeInMillis()- ordinal();
            return Util.getTimeSpanString(duration);
        }
        
        public String getTimeSortKey() {
            if(lastChange==null)    return "-";
            return Util.XS_DATETIME_FORMATTER.format(lastChange.getTime());
        }
        
        public int compareTo(UserInfo that) {
            long rhs = that.ordinal();
            long lhs = this.ordinal();
            return Long.compare(rhs, lhs);
        }
        
        private long ordinal() {
            if(lastChange==null)    return 0;
            return lastChange.getTimeInMillis();
        }
        
    }
    
    public boolean hasPeople() {
        return People.isApplicable(getItems());
    }
    
    public People getPeople() {
        return new People(this);
    }
    
    public AsynchPeople getAsynchPeople() {
        return new AsynchPeople(this);
    }
    
    public static final class People  {
        public final List<UserInfo> users;
        public final ModelObject parent;
        public People(Jenkins parent) {
            this.parent = parent;
            Map<User,UserInfo> users = getUserInfo(parent.getItems());
            User unknown = User.getUnknown();
            for (User u : User.getAll()) {
                if(u==unknown)  continue;   
                if(!users.containsKey(u)) users.put(u,new UserInfo(u,null,null));
            }
            
            this.users = toList(users);
        }
        
        public People(View parent) {
            this.parent = parent;
            this.users = toList(getUserInfo(parent.getItems()));
        }
        
        private Map<User,UserInfo> getUserInfo(Collection<? extends Item> items) {
            Map<User,UserInfo> users = new HashMap<>();
            for (Item item : items) {
                for (Job<?, ?> job : item.getAllJobs()) {
                    RunList<? extends Run<?, ?>> runs = job.getBuilds();
                    for (Run<?, ?> r : runs) {
                        if (r instanceof RunWithSCM) {
                            RunWithSCM<?,?> runWithSCM = (RunWithSCM<?,?>) r;
                            for (ChangeLogSet<? extends Entry> c : runWithSCM.getChangeSets()) {
                                for (Entry entry : c) {
                                    User user = entry.getAuthor();
                                    UserInfo info = users.get(user);
                                    if (info == null){
                                        users.put(user, new UserInfo(user, job, r.getTimestamp()));
}
                                    else if (info.getLastChange().before(r.getTimestamp())) {
                                        info.project = job;
                                        info.lastChange = r.getTimestamp();
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
            return users;
        }
        
        private List<UserInfo> toList(Map<User,UserInfo> users) {
            ArrayList<UserInfo> list = new ArrayList<>(users.values());
            Collections.sort(list);
            return Collections.unmodifiableList(list);
        }
        
        public Api getApi() {
            return new Api(this);
        }
        
        public static boolean isApplicable(Collection<? extends Item> items) {
            for (Item item : items) {
                for (Job job : item.getAllJobs()) {
                    RunList<? extends Run<?, ?>> runs = job.getBuilds();
                    for (Run<?,?> r : runs) {
                        if (r instanceof RunWithSCM) {
                            RunWithSCM<?,?> runWithSCM = (RunWithSCM<?,?>) r;
                            for (ChangeLogSet<? extends Entry> c : runWithSCM.getChangeSets()) {
                                for (Entry entry : c) {
                                    User user = entry.getAuthor();
                                    if (user != null){
                                        return true;
}
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
            return false;
        }
        
    }
    
    public static final class AsynchPeople extends ProgressiveRendering { 
        private final Collection<TopLevelItem> items;
        private final User unknown;
        private final Map<User,UserInfo> users = new HashMap<>();
        private final Set<User> modified = new HashSet<>();
        private final String iconSize;
        public final ModelObject parent;
        public AsynchPeople(Jenkins parent) {
            this.parent = parent;
            items = parent.getItems();
            unknown = User.getUnknown();
        }
        
        public AsynchPeople(View parent) {
            this.parent = parent;
            items = parent.getItems();
            unknown = null;
        }
        {
            StaplerRequest req = Stapler.getCurrentRequest();
            iconSize = req != null ? Functions.validateIconSize(Functions.getCookie(req, "iconSize", "32x32")) : "32x32";
        }
        
 protected void compute() throws Exception {
            int itemCount = 0;
            for (Item item : items) {
                for (Job<?,?> job : item.getAllJobs()) {
                    RunList<? extends Run<?, ?>> builds = job.getBuilds();
                    int buildCount = 0;
                    for (Run<?, ?> r : builds) {
                        if (canceled()) {
                            return;
                        }
                        
                        if (!(r instanceof RunWithSCM)) {
                            continue;
                        }
                        
                        RunWithSCM<?, ?> runWithSCM = (RunWithSCM<?, ?>) r;
                        for (ChangeLogSet<? extends ChangeLogSet.Entry> c : runWithSCM.getChangeSets()) {
                            for (ChangeLogSet.Entry entry : c) {
                                User user = entry.getAuthor();
                                UserInfo info = users.get(user);
                                if (info == null) {
                                    UserInfo userInfo = new UserInfo(user, job, r.getTimestamp());
                                    userInfo.avatar = UserAvatarResolver.resolveOrNull(user, iconSize);
                                    synchronized (this) {
                                        users.put(user, userInfo);
                                        modified.add(user);
                                    }
                                    
                                }
                                 else if (info.getLastChange().before(r.getTimestamp())) {
                                    synchronized (this) {
                                        info.project = job;
                                        info.lastChange = r.getTimestamp();
                                        modified.add(user);
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                        buildCount++;
                        progress((itemCount + 1.0 * buildCount / builds.size()) / (items.size() + 1));
                    }
                    
                }
                
                itemCount++;
                progress(1.0 * itemCount / (items.size() + 1));
            }
            
            if (unknown != null) {
                if (canceled()) {
                    return;
                }
                
                for (User u : User.getAll()) { 
                    if (canceled()) {
                        return;
                    }
                    
                    if (u == unknown) {
                        continue;
                    }
                    
                    if (!users.containsKey(u)) {
                        UserInfo userInfo = new UserInfo(u, null, null);
                        userInfo.avatar = UserAvatarResolver.resolveOrNull(u, iconSize);
                        synchronized (this) {
                            users.put(u, userInfo);
                            modified.add(u);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
 protected synchronized JSON data() {
            JSONArray r = new JSONArray();
            for (User u : modified) {
                UserInfo i = users.get(u);
                JSONObject entry = new JSONObject(). accumulate("id", u.getId()). accumulate("fullName", u.getFullName()). accumulate("url", u.getUrl()). accumulate("avatar", i.avatar != null ? i.avatar : Stapler.getCurrentRequest().getContextPath() + Functions.getResourcePath() + "/images/" + iconSize + "/user.png"). accumulate("timeSortKey", i.getTimeSortKey()). accumulate("lastChangeTimeString", i.getLastChangeTimeString());
                Job<?,?> p = i.getJob();
                if (p != null) {
                    entry.accumulate("projectUrl", p.getUrl()).accumulate("projectFullDisplayName", p.getFullDisplayName());
                }
                
                r.add(entry);
            }
            
            modified.clear();
            return r;
        }
        
        public Api getApi() {
            return new Api(new People());
        }
        
        public final class People {
            private View.People people;
            @Exported public synchronized List<UserInfo> getUsers() { if (people == null) { people = parent instanceof Jenkins ? new View.People((Jenkins) parent) : new View.People((View) parent); }
                return people.users;
            }
            
        }
        
    }
    
    void addDisplayNamesToSearchIndex(SearchIndexBuilder sib, Collection<TopLevelItem> items) {
        for(TopLevelItem item : items) {
            if(LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine((String.format("Adding url=%s,displayName=%s", item.getSearchUrl(), item.getDisplayName())));
            }
            
            sib.add(item.getSearchUrl(), item.getDisplayName());
        }
                
    }
    
    protected void makeSearchIndex(SearchIndexBuilder sib) {
        sib.add(new CollectionSearchIndex<TopLevelItem>() {
            protected TopLevelItem get(String key) { return getItem(key); }
            protected Collection<TopLevelItem> all() { return getItems(); }
            protected String getName(TopLevelItem o) {
                return o.getName();
            }
            
        }
        
);
    }
    
    public SearchIndexBuilder makeSearchIndex() {
        SearchIndexBuilder sib = super.makeSearchIndex();
        makeSearchIndex(sib);
        addDisplayNamesToSearchIndex(sib, getItems());
        return sib;
    }
    
    public synchronized void doSubmitDescription( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
        checkPermission(CONFIGURE);
        description = req.getParameter("description");
        save();
        rsp.sendRedirect(".");  
    }
    
    public final synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, FormException {
        checkPermission(CONFIGURE);
        submit(req);
        description = Util.nullify(req.getParameter("description"));
        filterExecutors = req.getParameter("filterExecutors") != null;
        filterQueue = req.getParameter("filterQueue") != null;
        rename(req.getParameter("name"));
        getProperties().rebuild(req, req.getSubmittedForm(), getApplicablePropertyDescriptors());
        save();
        FormApply.success("../" + Util.rawEncode(name)).generateResponse(req,rsp,this);
    }
    
    protected abstract void submit(StaplerRequest req) throws IOException, ServletException, FormException;
    public synchronized void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        checkPermission(DELETE);
        owner.deleteView(this);
        rsp.sendRedirect2(req.getContextPath()+"/" + owner.getUrl());
    }
    
    public abstract Item doCreateItem( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException;
    public FormValidation doCheckJobName(@QueryParameter String value) {
        getOwner().checkPermission(Item.CREATE);
        if (Util.fixEmpty(value) == null) {
            return FormValidation.ok();
        }
        
        try {
            Jenkins.checkGoodName(value);
            value = value.trim(); 
            Jenkins.get().getProjectNamingStrategy().checkName(value);
        }
         catch (Failure e) {
            return FormValidation.error(e.getMessage());
        }
        
        if (getOwner().getItemGroup().getItem(value) != null) {
            return FormValidation.error(Messages.Hudson_JobAlreadyExists(value));
        }
        
        return FormValidation.ok();
    }
    
    public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp, @QueryParameter String iconStyle) throws IOException, ServletException {
        getOwner().checkPermission(Item.CREATE);
        rsp.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        rsp.addHeader("Pragma", "no-cache");
        rsp.addHeader("Expires", "0");
        Categories categories = new Categories();
        int order = 0;
        JellyContext ctx;
        if (StringUtils.isNotBlank(iconStyle)) {
            ctx = new JellyContext();
            ctx.setVariable("resURL", req.getContextPath() + Jenkins.RESOURCE_PATH);
        }
         else {
            ctx = null;
        }
        
        for (TopLevelItemDescriptor descriptor : DescriptorVisibilityFilter.apply(getOwner().getItemGroup(), Items.all2(Jenkins.getAuthentication2(), getOwner().getItemGroup()))) {
            ItemCategory ic = ItemCategory.getCategory(descriptor);
            Map<String, Serializable> metadata = new HashMap<>();
            metadata.put("class", descriptor.getId());
            metadata.put("order", ++order);
            metadata.put("displayName", descriptor.getDisplayName());
            metadata.put("description", descriptor.getDescription());
            metadata.put("iconFilePathPattern", descriptor.getIconFilePathPattern());
            String iconClassName = descriptor.getIconClassName();
            if (StringUtils.isNotBlank(iconClassName)) {
                metadata.put("iconClassName", iconClassName);
                if (ctx != null) {
                    Icon icon = IconSet.icons .getIconByClassSpec(StringUtils.join(new String[]{iconClassName, iconStyle}, " "));
                    if (icon != null) {
                        metadata.put("iconQualifiedUrl", icon.getQualifiedUrl(ctx));
                    }
                    
                }
                
            }
            
            Category category = categories.getItem(ic.getId());
            if (category != null) {
                category.getItems().add(metadata);
            }
             else {
                List<Map<String, Serializable>> temp = new ArrayList<>();
                temp.add(metadata);
                category = new Category(ic.getId(), ic.getDisplayName(), ic.getDescription(), ic.getOrder(), ic.getMinToShow(), temp);
                categories.getItems().add(category);
            }
            
        }
        
        return categories;
    }
    
    public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (all builds)", getUrl(), getBuilds().newBuilds());
    }
    
    public void doRssFailed( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (failed builds)", getUrl(), getBuilds().failureOnly().newBuilds());
    }
    
    public RunList getBuilds() {
        return new RunList(this);
    }
    
    public BuildTimelineWidget getTimeline() {
        return new BuildTimelineWidget(getBuilds());
    }
    
    public void doRssLatest( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
        List<Run> lastBuilds = new ArrayList<>();
        for (TopLevelItem item : getItems()) {
            if (item instanceof Job) {
                Job job = (Job) item;
                Run lb = job.getLastBuild();
                if(lb!=null)    lastBuilds.add(lb);
            }
            
        }
        
        RSS.rss(req, rsp, "Jenkins:" + getDisplayName() + " (latest builds)", getUrl(), RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST);
    }
    
    @WebMethod(name = "config.xml")
    public HttpResponse doConfigDotXml(StaplerRequest req) throws IOException {
        if (req.getMethod().equals("GET")) {
            checkPermission(READ);
            return new HttpResponse() {                 public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException { rsp.setContentType("application/xml");
                    View.this.writeXml(rsp.getOutputStream());
                }
                
            };
        }
        
        if (req.getMethod().equals("POST")) {
            updateByXml(new StreamSource(req.getReader()));
            return HttpResponses.ok();
        }
        
        return HttpResponses.error(SC_BAD_REQUEST, "Unexpected request method " + req.getMethod());
    }
    
    public void writeXml(OutputStream out) throws IOException {
        XStream2 xStream2 = new XStream2();
        xStream2.omitField(View.class, "owner");
        xStream2.toXMLUTF8(View.this,  out);
    }
    
    public void updateByXml(Source source) throws IOException {
        checkPermission(CONFIGURE);
        StringWriter out = new StringWriter();
        try {
            XMLUtils.safeTransform(source, new StreamResult(out));
            out.close();
        }
         catch (TransformerException|SAXException e) {
            throw new IOException("Failed to persist configuration.xml", e);
        }
        
        try (InputStream in = new BufferedInputStream(new ByteArrayInputStream(out.toString().getBytes(StandardCharsets.UTF_8)))){
            String oldname = name;
            ViewGroup oldOwner = owner; 
            Object o = Jenkins.XSTREAM2.unmarshal(XStream2.getDefaultDriver().createReader(in), this, null, true);
            if (!o.getClass().equals(getClass())) {
                throw new IOException("Expecting view type: "+this.getClass()+" but got: "+o.getClass()+" instead." + "\nShould you needed to change to a new view type, you must first delete and then re-create " + "the view with the new view type.");
            }
            
            name = oldname;
            owner = oldOwner;
        }
         catch (StreamException | ConversionException | Error e) {
            throw new IOException("Unable to read",e);
        }
        
        save();
    }
    
    public ModelObjectWithContextMenu.ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {
        ModelObjectWithContextMenu.ContextMenu m = new ModelObjectWithContextMenu.ContextMenu();
        for (TopLevelItem i : getItems()){
            m.add(i.getShortUrl(),i.getDisplayName());
}
        return m;
    }
    
    public static final DescriptorList<View> LIST = new DescriptorList<>(View.class);
    public static DescriptorExtensionList<View,ViewDescriptor> all() {
        return Jenkins.get().getDescriptorList(View.class);
    }
    
    public static List<ViewDescriptor> allInstantiable() {
        List<ViewDescriptor> r = new ArrayList<>();
        StaplerRequest request = Stapler.getCurrentRequest();
        if (request == null) {
            throw new IllegalStateException("This method can only be invoked from a stapler request");
        }
        
        ViewGroup owner = request.findAncestorObject(ViewGroup.class);
        if (owner == null) {
            throw new IllegalStateException("This method can only be invoked from a request with a ViewGroup ancestor");
        }
        
        for (ViewDescriptor d : DescriptorVisibilityFilter.apply(owner, all())) {
            if (d.isApplicableIn(owner) && d.isInstantiable() && owner.getACL().hasCreatePermission2(Jenkins.getAuthentication2(), owner, d)) {
                r.add(d);
            }
            
        }
        
        return r;
    }
    
    public static final Comparator<View> SORTER = new Comparator<View>() {         public int compare(View lhs, View rhs) { return lhs.getViewName().compareTo(rhs.getViewName());
        }
        
    };
    public static final PermissionGroup PERMISSIONS = new PermissionGroup(View.class,Messages._View_Permissions_Title());
    public static final Permission CREATE = new Permission(PERMISSIONS,"Create", Messages._View_CreatePermission_Description(), Permission.CREATE, PermissionScope.ITEM_GROUP);
    public static final Permission DELETE = new Permission(PERMISSIONS,"Delete", Messages._View_DeletePermission_Description(), Permission.DELETE, PermissionScope.ITEM_GROUP);
    public static final Permission CONFIGURE = new Permission(PERMISSIONS,"Configure", Messages._View_ConfigurePermission_Description(), Permission.CONFIGURE, PermissionScope.ITEM_GROUP);
    public static final Permission READ = new Permission(PERMISSIONS,"Read", Messages._View_ReadPermission_Description(), Permission.READ, PermissionScope.ITEM_GROUP);
    public static Permission getItemCreatePermission() {
        return Item.CREATE;
    }
    
    public static View create(StaplerRequest req, StaplerResponse rsp, ViewGroup owner) throws FormException, IOException, ServletException {
        String mode = req.getParameter("mode");
        String requestContentType = req.getContentType();
        if (requestContentType == null && !(mode != null && mode.equals("copy"))){
            throw new Failure("No Content-Type header set");
}
        boolean isXmlSubmission = requestContentType != null && (requestContentType.startsWith("application/xml") || requestContentType.startsWith("text/xml"));
        String name = req.getParameter("name");
        Jenkins.checkGoodName(name);
        if(owner.getView(name)!=null) throw new Failure(Messages.Hudson_ViewAlreadyExists(name));
        if (mode==null || mode.length()==0) {
            if(isXmlSubmission) {
                View v = createViewFromXML(name, req.getInputStream());
                owner.getACL().checkCreatePermission(owner, v.getDescriptor());
                v.owner = owner;
                rsp.setStatus(HttpServletResponse.SC_OK);
                return v;
            }
             else throw new Failure(Messages.View_MissingMode());
        }
        
        View v;
        if ("copy".equals(mode)) {
            v = copy(req, owner, name);
        }
         else {
            ViewDescriptor descriptor = all().findByName(mode);
            if (descriptor == null) {
                throw new Failure("No view type ‘" + mode + "’ is known");
            }
            
            v = descriptor.newInstance(req,req.getSubmittedForm());
        }
        
        owner.getACL().checkCreatePermission(owner, v.getDescriptor());
        v.owner = owner;
        rsp.sendRedirect2(req.getContextPath()+'/'+v.getUrl()+v.getPostConstructLandingPage());
        return v;
    }
    
    private static View copy(StaplerRequest req, ViewGroup owner, String name) throws IOException {
        View v;
        String from = req.getParameter("from");
        View src = owner.getView(from);
        if(src==null) {
            if(Util.fixEmpty(from)==null) throw new Failure("Specify which view to copy");
            else{
                throw new Failure("No such view: "+from);
}
        }
        
        String xml = Jenkins.XSTREAM.toXML(src);
        v = createViewFromXML(name, new StringInputStream(xml));
        return v;
    }
    
    public static View createViewFromXML(String name, InputStream xml) throws IOException {
        try (InputStream in = new BufferedInputStream(xml)) {
            View v = (View) Jenkins.XSTREAM.fromXML(in);
            if (name != null) v.name = name;
            Jenkins.checkGoodName(v.name);
            return v;
        }
         catch(StreamException|ConversionException|Error e) {
            throw new IOException("Unable to read",e);
        }
        
    }
    
    public static class PropertyList extends DescribableList<ViewProperty,ViewPropertyDescriptor> {
        private PropertyList(View owner) {
            super(owner);
        }
        
        public PropertyList() {
        }
        
        public View getOwner() {
            return (View)owner;
        }
        
        protected void onModified() throws IOException {
            for (ViewProperty p : this){
                p.setView(getOwner());
}
        }
        
    }
    
    public static final Message<View> NEW_PRONOUN = new Message<>();
    private static final Logger LOGGER = Logger.getLogger(View.class.getName());
}


