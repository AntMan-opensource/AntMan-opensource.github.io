package io.netty.handler.codec.http.multipart;
import io.netty.buffer.ByteBuf;
import io.netty.handler.codec.http.HttpConstants;
import io.netty.handler.codec.http.HttpContent;
import io.netty.handler.codec.http.HttpHeaderNames;
import io.netty.handler.codec.http.HttpHeaderValues;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.handler.codec.http.QueryStringDecoder;
import io.netty.handler.codec.http.multipart.HttpPostBodyUtil.SeekAheadOptimize;
import io.netty.handler.codec.http.multipart.HttpPostBodyUtil.TransferEncodingMechanism;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.EndOfDataDecoderException;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.ErrorDataDecoderException;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.MultiPartStatus;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.NotEnoughDataDecoderException;
import io.netty.util.CharsetUtil;
import io.netty.util.internal.EmptyArrays;
import io.netty.util.internal.InternalThreadLocalMap;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.StringUtil;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import static io.netty.util.internal.ObjectUtil.*;
public class HttpPostMultipartRequestDecoder implements InterfaceHttpPostRequestDecoder {
    private final HttpDataFactory factory;
    private final HttpRequest request;
    private Charset charset;
    private boolean isLastChunk;
    private final List<InterfaceHttpData> bodyListHttpData = new ArrayList<InterfaceHttpData>();
    private final Map<String, List<InterfaceHttpData>> bodyMapHttpData = new TreeMap<String, List<InterfaceHttpData>>( CaseIgnoringComparator.INSTANCE);
    private ByteBuf undecodedChunk;
    private int bodyListHttpDataRank;
    private final String multipartDataBoundary;
    private String multipartMixedBoundary;
    private MultiPartStatus currentStatus = MultiPartStatus.NOTSTARTED;
    private Map<CharSequence, Attribute> currentFieldAttributes;
    private FileUpload currentFileUpload;
    private Attribute currentAttribute;
    private boolean destroyed;
    private int discardThreshold = HttpPostRequestDecoder.DEFAULT_DISCARD_THRESHOLD;
    public HttpPostMultipartRequestDecoder(HttpRequest request) {
        this(new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE), request, HttpConstants.DEFAULT_CHARSET);
    }
    
    public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request) {
        this(factory, request, HttpConstants.DEFAULT_CHARSET);
    }
    
    public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {
        this.request = checkNotNull(request, "request");
        this.charset = checkNotNull(charset, "charset");
        this.factory = checkNotNull(factory, "factory");
        String contentTypeValue = this.request.headers().get(HttpHeaderNames.CONTENT_TYPE);
        if (contentTypeValue == null) {
            throw new ErrorDataDecoderException("No '" + HttpHeaderNames.CONTENT_TYPE + "' header present.");
        }
        
        String[] dataBoundary = HttpPostRequestDecoder.getMultipartDataBoundary(contentTypeValue);
        if (dataBoundary != null) {
            multipartDataBoundary = dataBoundary[0];
            if (dataBoundary.length > 1 && dataBoundary[1] != null) {
                try {
                    this.charset = Charset.forName(dataBoundary[1]);
                }
                 catch (IllegalCharsetNameException e) {
                    throw new ErrorDataDecoderException(e);
                }
                
            }
            
        }
         else {
            multipartDataBoundary = null;
        }
        
        currentStatus = MultiPartStatus.HEADERDELIMITER;
        try {
            if (request instanceof HttpContent) {
                offer((HttpContent) request);
            }
             else {
                parseBody();
            }
            
        }
         catch (Throwable e) {
            destroy();
            PlatformDependent.throwException(e);
        }
        
    }
    
    private void checkDestroyed() {
        if (destroyed) {
            throw new IllegalStateException(HttpPostMultipartRequestDecoder.class.getSimpleName() + " was destroyed already");
        }
        
    }
    
    public boolean isMultipart() {
        checkDestroyed();
        return true;
    }
    
    public void setDiscardThreshold(int discardThreshold) {
        this.discardThreshold = checkPositiveOrZero(discardThreshold, "discardThreshold");
    }
    
    public int getDiscardThreshold() {
        return discardThreshold;
    }
    
    public List<InterfaceHttpData> getBodyHttpDatas() {
        checkDestroyed();
        if (!isLastChunk) {
            throw new NotEnoughDataDecoderException();
        }
        
        return bodyListHttpData;
    }
    
    public List<InterfaceHttpData> getBodyHttpDatas(String name) {
        checkDestroyed();
        if (!isLastChunk) {
            throw new NotEnoughDataDecoderException();
        }
        
        return bodyMapHttpData.get(name);
    }
    
    public InterfaceHttpData getBodyHttpData(String name) {
        checkDestroyed();
        if (!isLastChunk) {
            throw new NotEnoughDataDecoderException();
        }
        
        List<InterfaceHttpData> list = bodyMapHttpData.get(name);
        if (list != null) {
            return list.get(0);
        }
        
        return null;
    }
    
    public HttpPostMultipartRequestDecoder offer(HttpContent content) {
        checkDestroyed();
        if (content instanceof LastHttpContent) {
            isLastChunk = true;
        }
        
        ByteBuf buf = content.content();
        if (undecodedChunk == null) {
            undecodedChunk = buf.alloc().buffer(buf.readableBytes()).writeBytes(buf);
        }
         else {
            undecodedChunk.writeBytes(buf);
        }
        
        parseBody();
        if (undecodedChunk != null && undecodedChunk.writerIndex() > discardThreshold) {
            if (undecodedChunk.refCnt() == 1) {
                undecodedChunk.discardReadBytes();
            }
             else {
                ByteBuf buffer = undecodedChunk.alloc().buffer(undecodedChunk.readableBytes());
                buffer.writeBytes(undecodedChunk);
                undecodedChunk.release();
                undecodedChunk = buffer;
            }
            
        }
        
        return this;
    }
    
    public boolean hasNext() {
        checkDestroyed();
        if (currentStatus == MultiPartStatus.EPILOGUE) {
            if (bodyListHttpDataRank >= bodyListHttpData.size()) {
                throw new EndOfDataDecoderException();
            }
            
        }
        
        return !bodyListHttpData.isEmpty() && bodyListHttpDataRank < bodyListHttpData.size();
    }
    
    public InterfaceHttpData next() {
        checkDestroyed();
        if (hasNext()) {
            return bodyListHttpData.get(bodyListHttpDataRank++);
        }
        
        return null;
    }
    
    public InterfaceHttpData currentPartialHttpData() {
        if (currentFileUpload != null) {
            return currentFileUpload;
        }
         else {
            return currentAttribute;
        }
        
    }
    
    private void parseBody() {
        if (currentStatus == MultiPartStatus.PREEPILOGUE || currentStatus == MultiPartStatus.EPILOGUE) {
            if (isLastChunk) {
                currentStatus = MultiPartStatus.EPILOGUE;
            }
            
            return;
        }
        
        parseBodyMultipart();
    }
    
    protected void addHttpData(InterfaceHttpData data) {
        if (data == null) {
            return;
        }
        
        List<InterfaceHttpData> datas = bodyMapHttpData.get(data.getName());
        if (datas == null) {
            datas = new ArrayList<InterfaceHttpData>(1);
            bodyMapHttpData.put(data.getName(), datas);
        }
        
        datas.add(data);
        bodyListHttpData.add(data);
    }
    
    private void parseBodyMultipart() {
        if (undecodedChunk == null || undecodedChunk.readableBytes() == 0) {
            return;
        }
        
        InterfaceHttpData data = decodeMultipart(currentStatus);
        while (data != null) {
            addHttpData(data);
            if (currentStatus == MultiPartStatus.PREEPILOGUE || currentStatus == MultiPartStatus.EPILOGUE) {
                break;
            }
            
            data = decodeMultipart(currentStatus);
        }
        
    }
    
    private InterfaceHttpData decodeMultipart(MultiPartStatus state) {
        switch (state) {
        case NOTSTARTED:
            throw new ErrorDataDecoderException("Should not be called with the current getStatus");
        case PREAMBLE:
            throw new ErrorDataDecoderException("Should not be called with the current getStatus");
        case HEADERDELIMITER: {
            return findMultipartDelimiter(multipartDataBoundary, MultiPartStatus.DISPOSITION, MultiPartStatus.PREEPILOGUE);
        }
        
        case DISPOSITION: {
            return findMultipartDisposition();
        }
        
        case FIELD: {
            Charset localCharset = null;
            Attribute charsetAttribute = currentFieldAttributes.get(HttpHeaderValues.CHARSET);
            if (charsetAttribute != null) {
                try {
                    localCharset = Charset.forName(charsetAttribute.getValue());
                }
                 catch (IOException e) {
                    throw new ErrorDataDecoderException(e);
                }
                 catch (UnsupportedCharsetException e) {
                    throw new ErrorDataDecoderException(e);
                }
                
            }
            
            Attribute nameAttribute = currentFieldAttributes.get(HttpHeaderValues.NAME);
            if (currentAttribute == null) {
                Attribute lengthAttribute = currentFieldAttributes .get(HttpHeaderNames.CONTENT_LENGTH);
                long size;
                try {
                    size = lengthAttribute != null? Long.parseLong(lengthAttribute .getValue()) : 0L;
                }
                 catch (IOException e) {
                    throw new ErrorDataDecoderException(e);
                }
                 catch (NumberFormatException ignored) {
                    size = 0;
                }
                
                try {
                    if (size > 0) {
                        currentAttribute = factory.createAttribute(request, cleanString(nameAttribute.getValue()), size);
                    }
                     else {
                        currentAttribute = factory.createAttribute(request, cleanString(nameAttribute.getValue()));
                    }
                    
                }
                 catch (NullPointerException e) {
                    throw new ErrorDataDecoderException(e);
                }
                 catch (IllegalArgumentException e) {
                    throw new ErrorDataDecoderException(e);
                }
                 catch (IOException e) {
                    throw new ErrorDataDecoderException(e);
                }
                
                if (localCharset != null) {
                    currentAttribute.setCharset(localCharset);
                }
                
            }
            
            if (!loadDataMultipartOptimized(undecodedChunk, multipartDataBoundary, currentAttribute)) {
                return null;
            }
            
            Attribute finalAttribute = currentAttribute;
            currentAttribute = null;
            currentFieldAttributes = null;
            currentStatus = MultiPartStatus.HEADERDELIMITER;
            return finalAttribute;
        }
        
        case FILEUPLOAD: {
            return getFileUpload(multipartDataBoundary);
        }
        
        case MIXEDDELIMITER: {
            return findMultipartDelimiter(multipartMixedBoundary, MultiPartStatus.MIXEDDISPOSITION, MultiPartStatus.HEADERDELIMITER);
        }
        
        case MIXEDDISPOSITION: {
            return findMultipartDisposition();
        }
        
        case MIXEDFILEUPLOAD: {
            return getFileUpload(multipartMixedBoundary);
        }
        
        case PREEPILOGUE:
            return null;
        case EPILOGUE:
            return null;
        default: throw new ErrorDataDecoderException("Shouldn't reach here.");
        }
        
    }
    
    private static void skipControlCharacters(ByteBuf undecodedChunk) {
        if (!undecodedChunk.hasArray()) {
            try {
                skipControlCharactersStandard(undecodedChunk);
            }
             catch (IndexOutOfBoundsException e1) {
                throw new NotEnoughDataDecoderException(e1);
            }
            
            return;
        }
        
        SeekAheadOptimize sao = new SeekAheadOptimize(undecodedChunk);
        while (sao.pos < sao.limit) {
            char c = (char) (sao.bytes[sao.pos++] & 0xFF);
            if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {
                sao.setReadPosition(1);
                return;
            }
            
        }
        
        throw new NotEnoughDataDecoderException("Access out of bounds");
    }
    
    private static void skipControlCharactersStandard(ByteBuf undecodedChunk) {
        for (;;) {
            char c = (char) undecodedChunk.readUnsignedByte();
            if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {
                undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 1);
                break;
            }
            
        }
        
    }
    
    private InterfaceHttpData findMultipartDelimiter(String delimiter, MultiPartStatus dispositionStatus, MultiPartStatus closeDelimiterStatus) {
        int readerIndex = undecodedChunk.readerIndex();
        try {
            skipControlCharacters(undecodedChunk);
        }
         catch (NotEnoughDataDecoderException ignored) {
            undecodedChunk.readerIndex(readerIndex);
            return null;
        }
        
        skipOneLine();
        String newline;
        try {
            newline = readDelimiterOptimized(undecodedChunk, delimiter, charset);
        }
         catch (NotEnoughDataDecoderException ignored) {
            undecodedChunk.readerIndex(readerIndex);
            return null;
        }
        
        if (newline.equals(delimiter)) {
            currentStatus = dispositionStatus;
            return decodeMultipart(dispositionStatus);
        }
        
        if (newline.equals(delimiter + "--")) {
            currentStatus = closeDelimiterStatus;
            if (currentStatus == MultiPartStatus.HEADERDELIMITER) {
                currentFieldAttributes = null;
                return decodeMultipart(MultiPartStatus.HEADERDELIMITER);
            }
            
            return null;
        }
        
        undecodedChunk.readerIndex(readerIndex);
        throw new ErrorDataDecoderException("No Multipart delimiter found");
    }
    
    private InterfaceHttpData findMultipartDisposition() {
        int readerIndex = undecodedChunk.readerIndex();
        if (currentStatus == MultiPartStatus.DISPOSITION) {
            currentFieldAttributes = new TreeMap<CharSequence, Attribute>(CaseIgnoringComparator.INSTANCE);
        }
        
        while (!skipOneLine()) {
            String newline;
            try {
                skipControlCharacters(undecodedChunk);
                newline = readLineOptimized(undecodedChunk, charset);
            }
             catch (NotEnoughDataDecoderException ignored) {
                undecodedChunk.readerIndex(readerIndex);
                return null;
            }
            
            String[] contents = splitMultipartHeader(newline);
            if (HttpHeaderNames.CONTENT_DISPOSITION.contentEqualsIgnoreCase(contents[0])) {
                boolean checkSecondArg;
                if (currentStatus == MultiPartStatus.DISPOSITION) {
                    checkSecondArg = HttpHeaderValues.FORM_DATA.contentEqualsIgnoreCase(contents[1]);
                }
                 else {
                    checkSecondArg = HttpHeaderValues.ATTACHMENT.contentEqualsIgnoreCase(contents[1]) || HttpHeaderValues.FILE.contentEqualsIgnoreCase(contents[1]);
                }
                
                if (checkSecondArg) {
                    for (int i = 2; i < contents.length; i++) {
                        String[] values = contents[i].split("=", 2);
                        Attribute attribute;
                        try {
                            attribute = getContentDispositionAttribute(values);
                        }
                         catch (NullPointerException e) {
                            throw new ErrorDataDecoderException(e);
                        }
                         catch (IllegalArgumentException e) {
                            throw new ErrorDataDecoderException(e);
                        }
                        
                        currentFieldAttributes.put(attribute.getName(), attribute);
                    }
                    
                }
                
            }
             else if (HttpHeaderNames.CONTENT_TRANSFER_ENCODING.contentEqualsIgnoreCase(contents[0])) {
                Attribute attribute;
                try {
                    attribute = factory.createAttribute(request, HttpHeaderNames.CONTENT_TRANSFER_ENCODING.toString(), cleanString(contents[1]));
                }
                 catch (NullPointerException e) {
                    throw new ErrorDataDecoderException(e);
                }
                 catch (IllegalArgumentException e) {
                    throw new ErrorDataDecoderException(e);
                }
                
                currentFieldAttributes.put(HttpHeaderNames.CONTENT_TRANSFER_ENCODING, attribute);
            }
             else if (HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(contents[0])) {
                Attribute attribute;
                try {
                    attribute = factory.createAttribute(request, HttpHeaderNames.CONTENT_LENGTH.toString(), cleanString(contents[1]));
                }
                 catch (NullPointerException e) {
                    throw new ErrorDataDecoderException(e);
                }
                 catch (IllegalArgumentException e) {
                    throw new ErrorDataDecoderException(e);
                }
                
                currentFieldAttributes.put(HttpHeaderNames.CONTENT_LENGTH, attribute);
            }
             else if (HttpHeaderNames.CONTENT_TYPE.contentEqualsIgnoreCase(contents[0])) {
                if (HttpHeaderValues.MULTIPART_MIXED.contentEqualsIgnoreCase(contents[1])) {
                    if (currentStatus == MultiPartStatus.DISPOSITION) {
                        String values = StringUtil.substringAfter(contents[2], '=');
                        multipartMixedBoundary = "--" + values;
                        currentStatus = MultiPartStatus.MIXEDDELIMITER;
                        return decodeMultipart(MultiPartStatus.MIXEDDELIMITER);
                    }
                     else {
                        throw new ErrorDataDecoderException("Mixed Multipart found in a previous Mixed Multipart");
                    }
                    
                }
                 else {
                    for (int i = 1; i < contents.length; i++) {
                        final String charsetHeader = HttpHeaderValues.CHARSET.toString();
                        if (contents[i].regionMatches(true, 0, charsetHeader, 0, charsetHeader.length())) {
                            String values = StringUtil.substringAfter(contents[i], '=');
                            Attribute attribute;
                            try {
                                attribute = factory.createAttribute(request, charsetHeader, cleanString(values));
                            }
                             catch (NullPointerException e) {
                                throw new ErrorDataDecoderException(e);
                            }
                             catch (IllegalArgumentException e) {
                                throw new ErrorDataDecoderException(e);
                            }
                            
                            currentFieldAttributes.put(HttpHeaderValues.CHARSET, attribute);
                        }
                         else if (contents[i].contains("=")) {
                            String name = StringUtil.substringBefore(contents[i], '=');
                            String values = StringUtil.substringAfter(contents[i], '=');
                            Attribute attribute;
                            try {
                                attribute = factory.createAttribute(request, cleanString(name), values);
                            }
                             catch (NullPointerException e) {
                                throw new ErrorDataDecoderException(e);
                            }
                             catch (IllegalArgumentException e) {
                                throw new ErrorDataDecoderException(e);
                            }
                            
                            currentFieldAttributes.put(name, attribute);
                        }
                         else {
                            Attribute attribute;
                            try {
                                attribute = factory.createAttribute(request, cleanString(contents[0]), contents[i]);
                            }
                             catch (NullPointerException e) {
                                throw new ErrorDataDecoderException(e);
                            }
                             catch (IllegalArgumentException e) {
                                throw new ErrorDataDecoderException(e);
                            }
                            
                            currentFieldAttributes.put(attribute.getName(), attribute);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        Attribute filenameAttribute = currentFieldAttributes.get(HttpHeaderValues.FILENAME);
        if (currentStatus == MultiPartStatus.DISPOSITION) {
            if (filenameAttribute != null) {
                currentStatus = MultiPartStatus.FILEUPLOAD;
                return decodeMultipart(MultiPartStatus.FILEUPLOAD);
            }
             else {
                currentStatus = MultiPartStatus.FIELD;
                return decodeMultipart(MultiPartStatus.FIELD);
            }
            
        }
         else {
            if (filenameAttribute != null) {
                currentStatus = MultiPartStatus.MIXEDFILEUPLOAD;
                return decodeMultipart(MultiPartStatus.MIXEDFILEUPLOAD);
            }
             else {
                throw new ErrorDataDecoderException("Filename not found");
            }
            
        }
        
    }
    
    private static final String FILENAME_ENCODED = HttpHeaderValues.FILENAME.toString() + '*';
    private Attribute getContentDispositionAttribute(String... values) {
        String name = cleanString(values[0]);
        String value = values[1];
        if (HttpHeaderValues.FILENAME.contentEquals(name)) {
            int last = value.length() - 1;
            if (last > 0 && value.charAt(0) == HttpConstants.DOUBLE_QUOTE && value.charAt(last) == HttpConstants.DOUBLE_QUOTE) {
                value = value.substring(1, last);
            }
            
        }
         else if (FILENAME_ENCODED.equals(name)) {
            try {
                name = HttpHeaderValues.FILENAME.toString();
                String[] split = cleanString(value).split("'", 3);
                value = QueryStringDecoder.decodeComponent(split[2], Charset.forName(split[0]));
            }
             catch (ArrayIndexOutOfBoundsException e) {
                 throw new ErrorDataDecoderException(e);
            }
             catch (UnsupportedCharsetException e) {
                throw new ErrorDataDecoderException(e);
            }
            
        }
         else {
            value = cleanString(value);
        }
        
        return factory.createAttribute(request, name, value);
    }
    
    protected InterfaceHttpData getFileUpload(String delimiter) {
        Attribute encoding = currentFieldAttributes.get(HttpHeaderNames.CONTENT_TRANSFER_ENCODING);
        Charset localCharset = charset;
        TransferEncodingMechanism mechanism = TransferEncodingMechanism.BIT7;
        if (encoding != null) {
            String code;
            try {
                code = encoding.getValue().toLowerCase();
            }
             catch (IOException e) {
                throw new ErrorDataDecoderException(e);
            }
            
            if (code.equals(HttpPostBodyUtil.TransferEncodingMechanism.BIT7.value())) {
                localCharset = CharsetUtil.US_ASCII;
            }
             else if (code.equals(HttpPostBodyUtil.TransferEncodingMechanism.BIT8.value())) {
                localCharset = CharsetUtil.ISO_8859_1;
                mechanism = TransferEncodingMechanism.BIT8;
            }
             else if (code.equals(HttpPostBodyUtil.TransferEncodingMechanism.BINARY.value())) {
                mechanism = TransferEncodingMechanism.BINARY;
            }
             else {
                throw new ErrorDataDecoderException("TransferEncoding Unknown: " + code);
            }
            
        }
        
        Attribute charsetAttribute = currentFieldAttributes.get(HttpHeaderValues.CHARSET);
        if (charsetAttribute != null) {
            try {
                localCharset = Charset.forName(charsetAttribute.getValue());
            }
             catch (IOException e) {
                throw new ErrorDataDecoderException(e);
            }
             catch (UnsupportedCharsetException e) {
                throw new ErrorDataDecoderException(e);
            }
            
        }
        
        if (currentFileUpload == null) {
            Attribute filenameAttribute = currentFieldAttributes.get(HttpHeaderValues.FILENAME);
            Attribute nameAttribute = currentFieldAttributes.get(HttpHeaderValues.NAME);
            Attribute contentTypeAttribute = currentFieldAttributes.get(HttpHeaderNames.CONTENT_TYPE);
            Attribute lengthAttribute = currentFieldAttributes.get(HttpHeaderNames.CONTENT_LENGTH);
            long size;
            try {
                size = lengthAttribute != null ? Long.parseLong(lengthAttribute.getValue()) : 0L;
            }
             catch (IOException e) {
                throw new ErrorDataDecoderException(e);
            }
             catch (NumberFormatException ignored) {
                size = 0;
            }
            
            try {
                String contentType;
                if (contentTypeAttribute != null) {
                    contentType = contentTypeAttribute.getValue();
                }
                 else {
                    contentType = HttpPostBodyUtil.DEFAULT_BINARY_CONTENT_TYPE;
                }
                
                currentFileUpload = factory.createFileUpload(request, cleanString(nameAttribute.getValue()), cleanString(filenameAttribute.getValue()), contentType, mechanism.value(), localCharset, size);
            }
             catch (NullPointerException e) {
                throw new ErrorDataDecoderException(e);
            }
             catch (IllegalArgumentException e) {
                throw new ErrorDataDecoderException(e);
            }
             catch (IOException e) {
                throw new ErrorDataDecoderException(e);
            }
            
        }
        
        if (!loadDataMultipartOptimized(undecodedChunk, delimiter, currentFileUpload)) {
            return null;
        }
        
        if (currentFileUpload.isCompleted()) {
            if (currentStatus == MultiPartStatus.FILEUPLOAD) {
                currentStatus = MultiPartStatus.HEADERDELIMITER;
                currentFieldAttributes = null;
            }
             else {
                currentStatus = MultiPartStatus.MIXEDDELIMITER;
                cleanMixedAttributes();
            }
            
            FileUpload fileUpload = currentFileUpload;
            currentFileUpload = null;
            return fileUpload;
        }
        
        return null;
    }
    
    public void destroy() {
        cleanFiles();
        for (InterfaceHttpData httpData : bodyListHttpData) {
            if (httpData.refCnt() > 0) {
                httpData.release();
            }
            
        }
        
        destroyed = true;
        if (undecodedChunk != null && undecodedChunk.refCnt() > 0) {
            undecodedChunk.release();
            undecodedChunk = null;
        }
        
    }
    
    public void cleanFiles() {
        checkDestroyed();
        factory.cleanRequestHttpData(request);
    }
    
    public void removeHttpDataFromClean(InterfaceHttpData data) {
        checkDestroyed();
        factory.removeHttpDataFromClean(request, data);
    }
    
    private void cleanMixedAttributes() {
        currentFieldAttributes.remove(HttpHeaderValues.CHARSET);
        currentFieldAttributes.remove(HttpHeaderNames.CONTENT_LENGTH);
        currentFieldAttributes.remove(HttpHeaderNames.CONTENT_TRANSFER_ENCODING);
        currentFieldAttributes.remove(HttpHeaderNames.CONTENT_TYPE);
        currentFieldAttributes.remove(HttpHeaderValues.FILENAME);
    }
    
    private static String readLineOptimized(ByteBuf undecodedChunk, Charset charset) {
        int readerIndex = undecodedChunk.readerIndex();
        ByteBuf line = null;
        try {
            if (undecodedChunk.isReadable()) {
                int posLfOrCrLf = HttpPostBodyUtil.findLineBreak(undecodedChunk, undecodedChunk.readerIndex());
                if (posLfOrCrLf <= 0) {
                    throw new NotEnoughDataDecoderException();
                }
                
                try {
                    line = undecodedChunk.alloc().heapBuffer(posLfOrCrLf);
                    line.writeBytes(undecodedChunk, posLfOrCrLf);
                    byte nextByte = undecodedChunk.readByte();
                    if (nextByte == HttpConstants.CR) {
                        undecodedChunk.readByte();
                    }
                    
                    return line.toString(charset);
                }
                 finally {
                    line.release();
                }
                
            }
            
        }
         catch (IndexOutOfBoundsException e) {
            undecodedChunk.readerIndex(readerIndex);
            throw new NotEnoughDataDecoderException(e);
        }
        
        undecodedChunk.readerIndex(readerIndex);
        throw new NotEnoughDataDecoderException();
    }
    
    private static String readDelimiterOptimized(ByteBuf undecodedChunk, String delimiter, Charset charset) {
        final int readerIndex = undecodedChunk.readerIndex();
        final byte[] bdelimiter = delimiter.getBytes(charset);
        final int delimiterLength = bdelimiter.length;
        try {
            int delimiterPos = HttpPostBodyUtil.findDelimiter(undecodedChunk, readerIndex, bdelimiter, false);
            if (delimiterPos < 0) {
                undecodedChunk.readerIndex(readerIndex);
                throw new NotEnoughDataDecoderException();
            }
            
            StringBuilder sb = new StringBuilder(delimiter);
            undecodedChunk.readerIndex(readerIndex + delimiterPos + delimiterLength);
            if (undecodedChunk.isReadable()) {
                byte nextByte = undecodedChunk.readByte();
                if (nextByte == HttpConstants.CR) {
                    nextByte = undecodedChunk.readByte();
                    if (nextByte == HttpConstants.LF) {
                        return sb.toString();
                    }
                     else {
                        undecodedChunk.readerIndex(readerIndex);
                        throw new NotEnoughDataDecoderException();
                    }
                    
                }
                 else if (nextByte == HttpConstants.LF) {
                    return sb.toString();
                }
                 else if (nextByte == '-') {
                    sb.append('-');
                    nextByte = undecodedChunk.readByte();
                    if (nextByte == '-') {
                        sb.append('-');
                        if (undecodedChunk.isReadable()) {
                            nextByte = undecodedChunk.readByte();
                            if (nextByte == HttpConstants.CR) {
                                nextByte = undecodedChunk.readByte();
                                if (nextByte == HttpConstants.LF) {
                                    return sb.toString();
                                }
                                 else {
                                    undecodedChunk.readerIndex(readerIndex);
                                    throw new NotEnoughDataDecoderException();
                                }
                                
                            }
                             else if (nextByte == HttpConstants.LF) {
                                return sb.toString();
                            }
                             else {
                                undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 1);
                                return sb.toString();
                            }
                            
                        }
                        
                        return sb.toString();
                    }
                    
                }
                
            }
            
        }
         catch (IndexOutOfBoundsException e) {
            undecodedChunk.readerIndex(readerIndex);
            throw new NotEnoughDataDecoderException(e);
        }
        
        undecodedChunk.readerIndex(readerIndex);
        throw new NotEnoughDataDecoderException();
    }
    
    private static void rewriteCurrentBuffer(ByteBuf buffer, int lengthToSkip) {
        if (lengthToSkip == 0) {
            return;
        }
        
        final int readerIndex = buffer.readerIndex();
        final int readableBytes = buffer.readableBytes();
        if (readableBytes == lengthToSkip) {
            buffer.readerIndex(readerIndex);
            buffer.writerIndex(readerIndex);
            return;
        }
        
        buffer.setBytes(readerIndex, buffer, readerIndex + lengthToSkip, readableBytes - lengthToSkip);
        buffer.readerIndex(readerIndex);
        buffer.writerIndex(readerIndex + readableBytes - lengthToSkip);
    }
    
    private static boolean loadDataMultipartOptimized(ByteBuf undecodedChunk, String delimiter, HttpData httpData) {
        if (!undecodedChunk.isReadable()) {
            return false;
        }
        
        final int startReaderIndex = undecodedChunk.readerIndex();
        final byte[] bdelimiter = delimiter.getBytes(httpData.getCharset());
        int posDelimiter = HttpPostBodyUtil.findDelimiter(undecodedChunk, startReaderIndex, bdelimiter, true);
        if (posDelimiter < 0) {
            int readableBytes = undecodedChunk.readableBytes();
            int lastPosition = readableBytes - bdelimiter.length - 1;
            if (lastPosition < 0) {
                lastPosition = 0;
            }
            
            posDelimiter = HttpPostBodyUtil.findLastLineBreak(undecodedChunk, startReaderIndex + lastPosition);
            if (posDelimiter < 0 && httpData.definedLength() == httpData.length() + readableBytes - 1 && undecodedChunk.getByte(readableBytes + startReaderIndex - 1) == HttpConstants.CR) {
                lastPosition = 0;
                posDelimiter = readableBytes - 1;
            }
            
            if (posDelimiter < 0) {
                ByteBuf content = undecodedChunk.copy();
                try {
                    httpData.addContent(content, false);
                }
                 catch (IOException e) {
                    throw new ErrorDataDecoderException(e);
                }
                
                undecodedChunk.readerIndex(startReaderIndex);
                undecodedChunk.writerIndex(startReaderIndex);
                return false;
            }
            
            posDelimiter += lastPosition;
            if (posDelimiter == 0) {
                return false;
            }
            
            ByteBuf content = undecodedChunk.copy(startReaderIndex, posDelimiter);
            try {
                httpData.addContent(content, false);
            }
             catch (IOException e) {
                throw new ErrorDataDecoderException(e);
            }
            
            rewriteCurrentBuffer(undecodedChunk, posDelimiter);
            return false;
        }
        
        ByteBuf content = undecodedChunk.copy(startReaderIndex, posDelimiter);
        try {
            httpData.addContent(content, true);
        }
         catch (IOException e) {
            throw new ErrorDataDecoderException(e);
        }
        
        rewriteCurrentBuffer(undecodedChunk, posDelimiter);
        return true;
    }
    
    private static String cleanString(String field) {
        int size = field.length();
        StringBuilder sb = new StringBuilder(size);
        for (int i = 0; i < size; i++) {
            char nextChar = field.charAt(i);
            switch (nextChar) {
            case HttpConstants.COLON:
            case HttpConstants.COMMA:
            case HttpConstants.EQUALS:
            case HttpConstants.SEMICOLON:
            case HttpConstants.HT:
                sb.append(HttpConstants.SP_CHAR);
                break;
            case HttpConstants.DOUBLE_QUOTE:
                break;
            default: sb.append(nextChar);
                break;
            }
            
        }
        
        return sb.toString().trim();
    }
    
    private boolean skipOneLine() {
        if (!undecodedChunk.isReadable()) {
            return false;
        }
        
        byte nextByte = undecodedChunk.readByte();
        if (nextByte == HttpConstants.CR) {
            if (!undecodedChunk.isReadable()) {
                undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 1);
                return false;
            }
            
            nextByte = undecodedChunk.readByte();
            if (nextByte == HttpConstants.LF) {
                return true;
            }
            
            undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 2);
            return false;
        }
        
        if (nextByte == HttpConstants.LF) {
            return true;
        }
        
        undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 1);
        return false;
    }
    
    private static String[] splitMultipartHeader(String sb) {
        ArrayList<String> headers = new ArrayList<String>(1);
        int nameStart;
        int nameEnd;
        int colonEnd;
        int valueStart;
        int valueEnd;
        nameStart = HttpPostBodyUtil.findNonWhitespace(sb, 0);
        for (nameEnd = nameStart; nameEnd < sb.length(); nameEnd++) {
            char ch = sb.charAt(nameEnd);
            if (ch == ':' || Character.isWhitespace(ch)) {
                break;
            }
            
        }
        
        for (colonEnd = nameEnd; colonEnd < sb.length(); colonEnd++) {
            if (sb.charAt(colonEnd) == ':') {
                colonEnd++;
                break;
            }
            
        }
        
        valueStart = HttpPostBodyUtil.findNonWhitespace(sb, colonEnd);
        valueEnd = HttpPostBodyUtil.findEndOfString(sb);
        headers.add(sb.substring(nameStart, nameEnd));
        String svalue = (valueStart >= valueEnd) ? StringUtil.EMPTY_STRING : sb.substring(valueStart, valueEnd);
        String[] values;
        if (svalue.indexOf(';') >= 0) {
            values = splitMultipartHeaderValues(svalue);
        }
         else {
            values = svalue.split(",");
        }
        
        for (String value : values) {
            headers.add(value.trim());
        }
        
        String[] array = new String[headers.size()];
        for (int i = 0; i < headers.size(); i++) {
            array[i] = headers.get(i);
        }
        
        return array;
    }
    
    private static String[] splitMultipartHeaderValues(String svalue) {
        List<String> values = InternalThreadLocalMap.get().arrayList(1);
        boolean inQuote = false;
        boolean escapeNext = false;
        int start = 0;
        for (int i = 0; i < svalue.length(); i++) {
            char c = svalue.charAt(i);
            if (inQuote) {
                if (escapeNext) {
                    escapeNext = false;
                }
                 else {
                    if (c == '\\') {
                        escapeNext = true;
                    }
                     else if (c == '"') {
                        inQuote = false;
                    }
                    
                }
                
            }
             else {
                if (c == '"') {
                    inQuote = true;
                }
                 else if (c == ';') {
                    values.add(svalue.substring(start, i));
                    start = i + 1;
                }
                
            }
            
        }
        
        values.add(svalue.substring(start));
        return values.toArray(EmptyArrays.EMPTY_STRINGS);
    }
    
    int getCurrentAllocatedCapacity() {
        return undecodedChunk.capacity();
    }
    
}


