package org.apache.james.server.core;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import javax.mail.MessagingException;
import javax.mail.util.SharedByteArrayInputStream;
import javax.mail.util.SharedFileInputStream;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.apache.james.lifecycle.api.Disposable;
import org.apache.james.util.SizeFormat;
public class MimeMessageInputStreamSource extends MimeMessageSource implements Disposable {
    private static final int DEFAULT_THRESHOLD = 1024 * 100;
    private static int threshold() {
        return Optional.ofNullable(System.getProperty("james.message.memory.threshold")) .map(SizeFormat::parseAsByteCount) .map(Math::toIntExact) .orElse(DEFAULT_THRESHOLD);
    }
    
    private static final int THRESHOLD = threshold();
    private final Set<InputStream> streams = new HashSet<>();
    private BufferedDeferredFileOutputStream out;
    private final String sourceId;
    private static final File TMPDIR = new File(System.getProperty("java.io.tmpdir"));
    public MimeMessageInputStreamSource(String key, InputStream in) throws MessagingException {
        super();
        try {
            out = new BufferedDeferredFileOutputStream(THRESHOLD, "mimemessage-" + key, ".m64", TMPDIR);
            IOUtils.copy(in, out);
            sourceId = key;
        }
         catch (IOException ioe) {
            File file = out.getFile();
            if (file != null) {
                FileUtils.deleteQuietly(file);
            }
            
            throw new MessagingException("Unable to retrieve the data: " + ioe.getMessage(), ioe);
        }
         finally {
            try {
                if (out != null) {
                    out.close();
                }
                
            }
             catch (IOException ioe) {
            }
            
            try {
                if (in != null) {
                    in.close();
                }
                
            }
             catch (IOException ioe) {
            }
            
        }
        
    }
    
    public MimeMessageInputStreamSource(String key) {
        super();
        out = new BufferedDeferredFileOutputStream(THRESHOLD, key, ".m64", TMPDIR);
        sourceId = key;
    }
    
    public String getSourceId() {
        return sourceId;
    }
    
    public InputStream getInputStream() throws IOException {
        InputStream in;
        if (out.isInMemory()) {
            in = new SharedByteArrayInputStream(out.getData());
        }
         else {
            in = new SharedFileInputStream(out.getFile());
        }
        
        streams.add(in);
        return in;
    }
    
    public long getMessageSize() throws IOException {
        return out.getByteCount();
    }
    
    public OutputStream getWritableOutputStream() {
        return out;
    }
    
    public void dispose() {
        for (InputStream stream : streams) {
            try {
                stream.close();
            }
             catch (IOException e) {
            }
            
        }
        
        if (out != null) {
            try {
                out.close();
            }
             catch (IOException e) {
            }
            
            File file = out.getFile();
            if (file != null) {
                FileUtils.deleteQuietly(file);
                file = null;
            }
            
            out = null;
        }
        
    }
    
}


