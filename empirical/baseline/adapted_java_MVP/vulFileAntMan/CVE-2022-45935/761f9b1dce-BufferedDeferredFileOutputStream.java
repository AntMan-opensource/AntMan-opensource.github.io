package org.apache.james.server.core;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.apache.commons.io.output.ThresholdingOutputStream;
public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
    private ByteArrayOutputStream memoryOutputStream;
    private OutputStream currentOutputStream;
    private File outputFile;
    private final String prefix;
    private final String suffix;
    private final File directory;
    private boolean closed = false;
    public BufferedDeferredFileOutputStream(final int threshold, final File outputFile) {
        this(threshold,  outputFile, null, null, null);
    }
    
    public BufferedDeferredFileOutputStream(final int threshold, final String prefix, final String suffix, final File directory) {
        this(threshold, null, prefix, suffix, directory);
        if (prefix == null) {
            throw new IllegalArgumentException("Temporary file prefix is missing");
        }
        
    }
    
    private BufferedDeferredFileOutputStream(final int threshold, final File outputFile, final String prefix, final String suffix, final File directory) {
        super(threshold);
        this.outputFile = outputFile;
        memoryOutputStream = new ByteArrayOutputStream();
        currentOutputStream = memoryOutputStream;
        this.prefix = prefix;
        this.suffix = suffix;
        this.directory = directory;
    }
    
    protected OutputStream getStream() throws IOException {
        return currentOutputStream;
    }
    
    protected void thresholdReached() throws IOException {
        if (prefix != null) {
            outputFile = File.createTempFile(prefix, suffix, directory);
        }
        
        final FileOutputStream fos = new FileOutputStream(outputFile);
        try {
            memoryOutputStream.writeTo(fos);
        }
         catch (IOException e) {
            fos.close();
            throw e;
        }
        
        currentOutputStream = new BufferedOutputStream(fos, getThreshold());
        memoryOutputStream = null;
    }
    
    public boolean isInMemory() {
        return !isThresholdExceeded();
    }
    
    public byte[] getData() {
        if (memoryOutputStream != null) {
            return memoryOutputStream.toByteArray();
        }
        
        return null;
    }
    
    public File getFile() {
        return outputFile;
    }
    
    public void close() throws IOException {
        super.close();
        closed = true;
    }
    
    public void writeTo(final OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException("Stream not closed");
        }
        
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        }
         else {
            final FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            }
             finally {
                IOUtils.closeQuietly(fis);
            }
            
        }
        
    }
    
}

