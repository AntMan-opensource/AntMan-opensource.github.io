package org.owasp.dependencycheck.maven;
import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL.StandardTypes;
import com.github.packageurl.PackageURL;
import io.github.jeremylong.jcs3.slf4j.Slf4jAdapter;
import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.DefaultArtifact;
import org.apache.maven.artifact.handler.DefaultArtifactHandler;
import org.apache.maven.artifact.versioning.ArtifactVersion;
import org.apache.maven.doxia.sink.Sink;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.License;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.DefaultProjectBuildingRequest;
import org.apache.maven.project.MavenProject;
import org.apache.maven.project.ProjectBuildingRequest;
import org.apache.maven.reporting.MavenReport;
import org.apache.maven.reporting.MavenReportException;
import org.apache.maven.settings.Proxy;
import org.apache.maven.settings.Server;
import org.apache.maven.shared.transfer.artifact.DefaultArtifactCoordinate;
import org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver;
import org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolverException;
import org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;
import org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;
import org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;
import org.eclipse.aether.artifact.ArtifactType;
import org.apache.maven.shared.artifact.filter.PatternExcludesArtifactFilter;
import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;
import org.apache.maven.shared.dependency.graph.DependencyNode;
import org.apache.maven.shared.dependency.graph.filter.ArtifactDependencyNodeFilter;
import org.apache.maven.shared.dependency.graph.internal.DefaultDependencyNode;
import org.apache.maven.shared.model.fileset.FileSet;
import org.apache.maven.shared.model.fileset.util.FileSetManager;
import org.owasp.dependencycheck.Engine;
import org.owasp.dependencycheck.analyzer.JarAnalyzer;
import org.owasp.dependencycheck.data.nexus.MavenArtifact;
import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
import org.owasp.dependencycheck.dependency.Confidence;
import org.owasp.dependencycheck.dependency.Dependency;
import org.owasp.dependencycheck.dependency.EvidenceType;
import org.owasp.dependencycheck.dependency.Vulnerability;
import org.owasp.dependencycheck.exception.DependencyNotFoundException;
import org.owasp.dependencycheck.exception.ExceptionCollection;
import org.owasp.dependencycheck.exception.ReportException;
import org.owasp.dependencycheck.utils.Checksum;
import org.owasp.dependencycheck.utils.Filter;
import org.owasp.dependencycheck.utils.Settings;
import org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher;
import org.sonatype.plexus.components.sec.dispatcher.SecDispatcher;
import org.sonatype.plexus.components.sec.dispatcher.SecDispatcherException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import org.apache.maven.artifact.repository.ArtifactRepository;
import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
import org.apache.maven.artifact.versioning.Restriction;
import org.apache.maven.artifact.versioning.VersionRange;
import org.owasp.dependencycheck.agent.DependencyCheckScanAgent;
import org.owasp.dependencycheck.dependency.naming.GenericIdentifier;
import org.owasp.dependencycheck.dependency.naming.Identifier;
import org.owasp.dependencycheck.dependency.naming.PurlIdentifier;
import org.apache.maven.shared.dependency.graph.traversal.DependencyNodeVisitor;
import org.apache.maven.shared.dependency.graph.traversal.FilteringDependencyNodeVisitor;
import org.apache.maven.shared.transfer.dependencies.DefaultDependableCoordinate;
import org.apache.maven.shared.transfer.dependencies.DependableCoordinate;
import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
import org.owasp.dependencycheck.reporting.ReportGenerator;
import org.owasp.dependencycheck.utils.SeverityUtil;
import org.owasp.dependencycheck.xml.pom.Model;
import org.owasp.dependencycheck.xml.pom.PomUtils;
public abstract class BaseDependencyCheckMojo extends AbstractMojo implements MavenReport {
    private static final String PROPERTIES_FILE = "mojo.properties";
    private static final String NEW_LINE = System.getProperty("line.separator", "\n").intern();
    private static final String INCLUDE_ALL = "**/*";
    private boolean generatingSite = false;
    private Settings settings = null;
    private final List<File> scannedFiles = new ArrayList<>();
    @Parameter(property = "failOnError", defaultValue = "true", required = true)
    private boolean failOnError;
    @Parameter(property = "project", required = true, readonly = true)
    private MavenProject project;
    @Parameter(readonly = true, required = true, property = "reactorProjects")
    private List<MavenProject> reactorProjects;
    private ArtifactResolver artifactResolver;
    private DependencyResolver dependencyResolver;
    @Parameter(defaultValue = "${session}", readonly = true, required = true)
    private MavenSession session;
    private DependencyGraphBuilder dependencyGraphBuilder;
    @Parameter(defaultValue = "${project.build.directory}", required = true, property = "odc.outputDirectory")
    private File outputDirectory;
    @Parameter(property = "project.reporting.outputDirectory", readonly = true)
    private File reportOutputDirectory;
    @Parameter(property = "failBuildOnCVSS", defaultValue = "11", required = true)
    private float failBuildOnCVSS = 11f;
    @Parameter(property = "junitFailOnCVSS", defaultValue = "0", required = true)
    private float junitFailOnCVSS = 0;
    @Parameter(property = "failBuildOnAnyVulnerability", defaultValue = "false", required = true)
    private boolean failBuildOnAnyVulnerability = false;
    @Parameter(property = "autoUpdate")
    private Boolean autoUpdate;
    @Parameter(property = "enableExperimental")
    private Boolean enableExperimental;
    @Parameter(property = "enableRetired")
    private Boolean enableRetired;
    @Parameter(property = "golangDepEnabled")
    private Boolean golangDepEnabled;
    @Parameter(property = "golangModEnabled")
    private Boolean golangModEnabled;
    @Parameter(property = "pathToGo")
    private String pathToGo;
    @Parameter(property = "pathToYarn")
    private String pathToYarn;
    @Parameter(property = "pathToPnpm")
    private String pathToPnpm;
    @Parameter(property = "dependency-check.virtualSnapshotsFromReactor", defaultValue = "true")
    private Boolean virtualSnapshotsFromReactor;
    @Parameter(property = "format", defaultValue = "HTML", required = true)
    private String format = "HTML";
    @Parameter(property = "prettyPrint")
    private Boolean prettyPrint;
    @Parameter(property = "formats", required = true)
    private String[] formats;
    @Parameter(property = "mavenSettings", defaultValue = "${settings}")
    private org.apache.maven.settings.Settings mavenSettings;
    @Parameter(property = "mavenSettingsProxyId")
    private String mavenSettingsProxyId;
    @Parameter(property = "connectionTimeout")
    private String connectionTimeout;
    @Parameter(property = "readTimeout")
    private String readTimeout;
    @Parameter(property = "versionCheckEnabled", defaultValue = "true")
    private boolean versionCheckEnabled;
    @Parameter(property = "suppressionFiles")
    private String[] suppressionFiles;
    @Parameter(property = "suppressionFile")
    private String suppressionFile;
    @Parameter(property = "suppressionFileUser")
    private String suppressionFileUser;
    @Parameter(property = "suppressionFilePassword")
    private String suppressionFilePassword;
    @Parameter(property = "suppressionFileServerId")
    private String suppressionFileServerId;
    @Parameter(property = "hintsFile")
    private String hintsFile;
    @Parameter(property = "showSummary", defaultValue = "true")
    private boolean showSummary = true;
    @Parameter(property = "jarAnalyzerEnabled")
    private Boolean jarAnalyzerEnabled;
    @Parameter(property = "dartAnalyzerEnabled")
    private Boolean dartAnalyzerEnabled;
    @Parameter(property = "archiveAnalyzerEnabled")
    private Boolean archiveAnalyzerEnabled;
    @Parameter(property = "knownExploitedEnabled")
    private Boolean knownExploitedEnabled;
    @Parameter(property = "knownExploitedUrl")
    private String knownExploitedUrl;
    @Parameter(property = "pyDistributionAnalyzerEnabled")
    private Boolean pyDistributionAnalyzerEnabled;
    @Parameter(property = "pyPackageAnalyzerEnabled")
    private Boolean pyPackageAnalyzerEnabled;
    @Parameter(property = "rubygemsAnalyzerEnabled")
    private Boolean rubygemsAnalyzerEnabled;
    @Parameter(property = "opensslAnalyzerEnabled")
    private Boolean opensslAnalyzerEnabled;
    @Parameter(property = "cmakeAnalyzerEnabled")
    private Boolean cmakeAnalyzerEnabled;
    @Parameter(property = "autoconfAnalyzerEnabled")
    private Boolean autoconfAnalyzerEnabled;
    @Parameter(property = "mavenInstallAnalyzerEnabled")
    private Boolean mavenInstallAnalyzerEnabled;
    @Parameter(property = "pipAnalyzerEnabled")
    private Boolean pipAnalyzerEnabled;
    @Parameter(property = "pipfileAnalyzerEnabled")
    private Boolean pipfileAnalyzerEnabled;
    @Parameter(property = "poetryAnalyzerEnabled")
    private Boolean poetryAnalyzerEnabled;
    @Parameter(property = "composerAnalyzerEnabled")
    private Boolean composerAnalyzerEnabled;
    @Parameter(property = "cpanfileAnalyzerEnabled")
    private Boolean cpanfileAnalyzerEnabled;
    @Parameter(property = "nodeAnalyzerEnabled")
    private Boolean nodeAnalyzerEnabled;
    @Parameter(property = "nodeAuditAnalyzerEnabled")
    private Boolean nodeAuditAnalyzerEnabled;
    @Parameter(property = "nodeAuditAnalyzerUrl")
    private String nodeAuditAnalyzerUrl;
    @Parameter(property = "yarnAuditAnalyzerEnabled")
    private Boolean yarnAuditAnalyzerEnabled;
    @Parameter(property = "pnpmAuditAnalyzerEnabled")
    private Boolean pnpmAuditAnalyzerEnabled;
    @Parameter(property = "nodeAuditAnalyzerUseCache")
    private Boolean nodeAuditAnalyzerUseCache;
    @Parameter(property = "nodeAuditSkipDevDependencies")
    private Boolean nodeAuditSkipDevDependencies;
    @Parameter(property = "nodePackageSkipDevDependencies")
    private Boolean nodePackageSkipDevDependencies;
    @Parameter(property = "retireJsAnalyzerEnabled")
    private Boolean retireJsAnalyzerEnabled;
    @Parameter(property = "retireJsUrl")
    private String retireJsUrl;
    @Parameter(property = "retireJsUser")
    private String retireJsUser;
    @Parameter(property = "retireJsPassword")
    private String retireJsPassword;
    @Parameter(property = "retireJsUrlServerId")
    private String retireJsUrlServerId;
    @Parameter(property = "retireJsForceUpdate")
    private Boolean retireJsForceUpdate;
    @Parameter(property = "assemblyAnalyzerEnabled")
    private Boolean assemblyAnalyzerEnabled;
    @Parameter(property = "msbuildAnalyzerEnabled")
    private Boolean msbuildAnalyzerEnabled;
    @Parameter(property = "nuspecAnalyzerEnabled")
    private Boolean nuspecAnalyzerEnabled;
    @Parameter(property = "nugetconfAnalyzerEnabled")
    private Boolean nugetconfAnalyzerEnabled;
    @Parameter(property = "libmanAnalyzerEnabled")
    private Boolean libmanAnalyzerEnabled;
    @Parameter(property = "centralAnalyzerEnabled")
    private Boolean centralAnalyzerEnabled;
    @Parameter(property = "centralAnalyzerUseCache")
    private Boolean centralAnalyzerUseCache;
    @Parameter(property = "artifactoryAnalyzerEnabled")
    private Boolean artifactoryAnalyzerEnabled;
    @Parameter(property = "artifactoryAnalyzerServerId")
    private String artifactoryAnalyzerServerId;
    @Parameter(property = "artifactoryAnalyzerUsername")
    private String artifactoryAnalyzerUsername;
    @Parameter(property = "artifactoryAnalyzerApiToken")
    private String artifactoryAnalyzerApiToken;
    @Parameter(property = "artifactoryAnalyzerBearerToken")
    private String artifactoryAnalyzerBearerToken;
    @Parameter(property = "artifactoryAnalyzerUrl")
    private String artifactoryAnalyzerUrl;
    @Parameter(property = "artifactoryAnalyzerUseProxy")
    private Boolean artifactoryAnalyzerUseProxy;
    @Parameter(property = "artifactoryAnalyzerParallelAnalysis", defaultValue = "true")
    private Boolean artifactoryAnalyzerParallelAnalysis;
    @Parameter(property = "nexusAnalyzerEnabled")
    private Boolean nexusAnalyzerEnabled;
    @Parameter(property = "ossindexAnalyzerEnabled")
    private Boolean ossindexAnalyzerEnabled;
    @Parameter(property = "ossindexAnalyzerUseCache")
    private Boolean ossindexAnalyzerUseCache;
    @Parameter(property = "ossindexAnalyzerUrl")
    private String ossindexAnalyzerUrl;
    @Parameter(property = "ossIndexServerId")
    private String ossIndexServerId;
    @Parameter(property = "ossIndexWarnOnlyOnRemoteErrors")
    private Boolean ossIndexWarnOnlyOnRemoteErrors;
    @Parameter(property = "mixAuditAnalyzerEnabled")
    private Boolean mixAuditAnalyzerEnabled;
    @Parameter(property = "mixAuditPath")
    private String mixAuditPath;
    @Parameter(property = "bundleAuditAnalyzerEnabled")
    private Boolean bundleAuditAnalyzerEnabled;
    @Parameter(property = "bundleAuditPath")
    private String bundleAuditPath;
    @Parameter(property = "bundleAuditWorkingDirectory")
    private String bundleAuditWorkingDirectory;
    @Parameter(property = "cocoapodsAnalyzerEnabled")
    private Boolean cocoapodsAnalyzerEnabled;
    @Parameter(property = "swiftPackageManagerAnalyzerEnabled")
    private Boolean swiftPackageManagerAnalyzerEnabled;
    @Parameter(property = "swiftPackageResolvedAnalyzerEnabled")
    private Boolean swiftPackageResolvedAnalyzerEnabled;
    @Parameter(property = "nexusUrl")
    private String nexusUrl;
    @Parameter(property = "nexusServerId")
    private String nexusServerId;
    @Parameter(property = "nexusUsesProxy")
    private Boolean nexusUsesProxy;
    @Parameter(property = "connectionString")
    private String connectionString;
    @Parameter(property = "databaseDriverName")
    private String databaseDriverName;
    @Parameter(property = "databaseDriverPath")
    private String databaseDriverPath;
    @Parameter(defaultValue = "${settings}", readonly = true, required = true)
    private org.apache.maven.settings.Settings settingsXml;
    @Component(role = SecDispatcher.class, hint = "default")
    private SecDispatcher securityDispatcher;
    @Parameter(property = "databaseUser")
    private String databaseUser;
    @Parameter(property = "databasePassword")
    private String databasePassword;
    @Parameter(property = "zipExtensions")
    private String zipExtensions;
    @Parameter(property = "dependency-check.skip", defaultValue = "false")
    private boolean skip = false;
    @Parameter(property = "skipTestScope", defaultValue = "true")
    private boolean skipTestScope = true;
    @Parameter(property = "skipRuntimeScope", defaultValue = "false")
    private boolean skipRuntimeScope = false;
    @Parameter(property = "skipProvidedScope", defaultValue = "false")
    private boolean skipProvidedScope = false;
    @Parameter(property = "skipSystemScope", defaultValue = "false")
    private boolean skipSystemScope = false;
    @Parameter(property = "skipDependencyManagement", defaultValue = "true")
    private boolean skipDependencyManagement = true;
    @Parameter(property = "skipArtifactType")
    private String skipArtifactType;
    @Parameter(property = "dataDirectory")
    private String dataDirectory;
    @Parameter(property = "dbFilename")
    private String dbFilename;
    @Parameter(property = "serverId")
    private String serverId;
    @Parameter(property = "nvdApiKey")
    private String nvdApiKey;
    @Parameter(property = "nvdMaxRetryCount")
    private Integer nvdMaxRetryCount;
    @Parameter(property = "nvdApiServerId")
    private String nvdApiServerId;
    @Parameter(property = "nvdValidForHours")
    private Integer nvdValidForHours;
    @Parameter(property = "nvdApiEndpoint")
    private String nvdApiEndpoint;
    @Parameter(property = "nvdDatafeedUrl")
    private String nvdDatafeedUrl;
    @Parameter(property = "nvdDatafeedServerId")
    private String nvdDatafeedServerId;
    @Parameter(property = "nvdUser")
    private String nvdUser;
    @Parameter(property = "nvdPassword")
    private String nvdPassword;
    @Parameter(property = "nvdApiDelay")
    private Integer nvdApiDelay;
    @Parameter(property = "pathToCore")
    private String pathToCore;
    @Parameter(property = "hostedSuppressionsUrl")
    private String hostedSuppressionsUrl;
    @Parameter(property = "hostedSuppressionsForceUpdate")
    private Boolean hostedSuppressionsForceUpdate;
    @Parameter(property = "hostedSuppressionsEnabled")
    private Boolean hostedSuppressionsEnabled;
    @Parameter(property = "hostedSuppressionsValidForHours")
    private Integer hostedSuppressionsValidForHours;
    @Parameter(property = "retirejs")
    private Retirejs retirejs;
    @Parameter(property = "odc.excludes")
    private List<String> excludes;
    private Filter<String> artifactScopeExcluded;
    private Filter<String> artifactTypeExcluded;
    private List<FileSet> scanSet;
    @Parameter(property = "scanDirectory")
    private List<String> scanDirectory;
    @Parameter(property = "odc.plugins.scan", defaultValue = "false", required = false)
    private boolean scanPlugins = false;
    @Parameter(property = "odc.dependencies.scan", defaultValue = "true", required = false)
    private boolean scanDependencies = true;
    private ProxyConfig proxy;
    private static boolean artifactsMatch(org.apache.maven.model.Dependency d, Artifact a) {
        return isEqualOrNull(a.getArtifactId(), d.getArtifactId()) && isEqualOrNull(a.getGroupId(), d.getGroupId()) && isEqualOrNull(a.getVersion(), d.getVersion());
    }
    
    private static boolean isEqualOrNull(String left, String right) {
        return (left != null && left.equals(right)) || (left == null && right == null);
    }
    
    public void execute() throws MojoExecutionException, MojoFailureException {
        generatingSite = false;
        final boolean shouldSkip = Boolean.parseBoolean(System.getProperty("dependency-check.skip", Boolean.toString(skip)));
        if (shouldSkip) {
            getLog().info("Skipping " + getName(Locale.US));
        }
         else {
            project.setContextValue("dependency-check-output-dir", this.outputDirectory);
            runCheck();
        }
        
    }
    
    public final void generate(@SuppressWarnings("deprecation") org.codehaus.doxia.sink.Sink sink, Locale locale) throws MavenReportException {
        generate((Sink) sink, locale);
    }
    
    protected boolean isGeneratingSite() {
        return generatingSite;
    }
    
    protected String getConnectionString() {
        return connectionString;
    }
    
    protected boolean isFailOnError() {
        return failOnError;
    }
    
    public void generate(Sink sink, Locale locale) throws MavenReportException {
        final boolean shouldSkip = Boolean.parseBoolean(System.getProperty("dependency-check.skip", Boolean.toString(skip)));
        if (shouldSkip) {
            getLog().info("Skipping report generation " + getName(Locale.US));
            return;
        }
        
        generatingSite = true;
        project.setContextValue("dependency-check-output-dir", getReportOutputDirectory());
        try {
            runCheck();
        }
         catch (MojoExecutionException ex) {
            throw new MavenReportException(ex.getMessage(), ex);
        }
         catch (MojoFailureException ex) {
            getLog().warn("Vulnerabilities were identifies that exceed the CVSS threshold for failing the build");
        }
        
    }
    
    protected File getCorrectOutputDirectory() throws MojoExecutionException {
        return getCorrectOutputDirectory(this.project);
    }
    
    protected File getCorrectOutputDirectory(MavenProject current) {
        final Object obj = current.getContextValue("dependency-check-output-dir");
        if (obj != null && obj instanceof File) {
            return (File) obj;
        }
        
        File target = new File(current.getBuild().getDirectory());
        if (target.getParentFile() != null && "target".equals(target.getParentFile().getName())) {
            target = target.getParentFile();
        }
        
        return target;
    }
    
    protected ExceptionCollection scanArtifacts(MavenProject project, Engine engine) {
        return scanArtifacts(project, engine, false);
    }
    
    protected ExceptionCollection scanArtifacts(MavenProject project, Engine engine, boolean aggregate) {
        try {
            final List<String> filterItems = Collections.singletonList(String.format("%s:%s", project.getGroupId(), project.getArtifactId()));
            final ProjectBuildingRequest buildingRequest = newResolveArtifactProjectBuildingRequest(project, project.getRemoteArtifactRepositories());
            final DependencyNode dn = dependencyGraphBuilder.buildDependencyGraph(buildingRequest, null);
            final CollectingRootDependencyGraphVisitor collectorVisitor = new CollectingRootDependencyGraphVisitor();
            final DependencyNodeVisitor transitiveFilterVisitor = new FilteringDependencyTransitiveNodeVisitor(collectorVisitor, new ArtifactDependencyNodeFilter(new PatternExcludesArtifactFilter(getExcludes())));
            final DependencyNodeVisitor artifactFilter = new FilteringDependencyNodeVisitor(transitiveFilterVisitor, new ArtifactDependencyNodeFilter(new ExcludesArtifactFilter(filterItems)));
            dn.accept(artifactFilter);
            final Map<DependencyNode, List<DependencyNode>> nodes = collectorVisitor.getNodes();
            return collectDependencies(engine, project, nodes, buildingRequest, aggregate);
        }
         catch (DependencyGraphBuilderException ex) {
            final String msg = String.format("Unable to build dependency graph on project %s", project.getName());
            getLog().debug(msg, ex);
            return new ExceptionCollection(ex);
        }
        
    }
    
    protected ExceptionCollection scanPlugins(MavenProject project, Engine engine, ExceptionCollection exCollection) {
        ExceptionCollection exCol = exCollection;
        final Set<Artifact> plugins = new HashSet<>();
        final Set<Artifact> buildPlugins = getProject().getPluginArtifacts();
        final Set<Artifact> reportPlugins = getProject().getReportArtifacts();
        final Set<Artifact> extensions = getProject().getExtensionArtifacts();
        plugins.addAll(buildPlugins);
        plugins.addAll(reportPlugins);
        plugins.addAll(extensions);
        final ProjectBuildingRequest buildingRequest = newResolveArtifactProjectBuildingRequest(project, project.getPluginArtifactRepositories());
        for (Artifact plugin : plugins) {
            try {
                final Artifact resolved = artifactResolver.resolveArtifact(buildingRequest, plugin).getArtifact();
                exCol = addPluginToDependencies(project, engine, resolved, "pom.xml (plugins)", exCol);
                final DefaultDependableCoordinate pluginCoordinate = new DefaultDependableCoordinate();
                pluginCoordinate.setGroupId(resolved.getGroupId());
                pluginCoordinate.setArtifactId(resolved.getArtifactId());
                pluginCoordinate.setVersion(resolved.getVersion());
                final String parent = buildReference(resolved.getGroupId(), resolved.getArtifactId(), resolved.getVersion());
                for (Artifact artifact : resolveArtifactDependencies(pluginCoordinate, project)) {
                    exCol = addPluginToDependencies(project, engine, artifact, parent, exCol);
                }
                
            }
             catch (ArtifactResolverException ex) {
                throw new RuntimeException(ex);
            }
             catch (IllegalArgumentException ex) {
                throw new RuntimeException(ex);
            }
             catch (DependencyResolverException ex) {
                throw new RuntimeException(ex);
            }
            
        }
        
        return null;
    }
    
    private ExceptionCollection addPluginToDependencies(MavenProject project, Engine engine, Artifact artifact, String parent, ExceptionCollection exCollection) {
        ExceptionCollection exCol = exCollection;
        final String groupId = artifact.getGroupId();
        final String artifactId = artifact.getArtifactId();
        final String version = artifact.getVersion();
        final File artifactFile = artifact.getFile();
        if (artifactFile.isFile()) {
            final List<ArtifactVersion> availableVersions = artifact.getAvailableVersions();
            final List<Dependency> deps = engine.scan(artifactFile.getAbsoluteFile(), project.getName() + " (plugins)");
            if (deps != null) {
                Dependency d = null;
                if (deps.size() == 1) {
                    d = deps.get(0);
                }
                 else {
                    for (Dependency possible : deps) {
                        if (artifactFile.getAbsoluteFile().equals(possible.getActualFile())) {
                            d = possible;
                            break;
                        }
                        
                    }
                    
                    for (Dependency dep : deps) {
                        if (d != null && d != dep) {
                            final String includedBy = buildReference(groupId, artifactId, version);
                            dep.addIncludedBy(includedBy, "plugins");
                        }
                        
                    }
                    
                }
                
                if (d != null) {
                    final MavenArtifact ma = new MavenArtifact(groupId, artifactId, version);
                    d.addAsEvidence("pom", ma, Confidence.HIGHEST);
                    if (parent != null) {
                        d.addIncludedBy(parent, "plugins");
                    }
                     else {
                        final String includedby = buildReference( project.getGroupId(), project.getArtifactId(), project.getVersion());
                        d.addIncludedBy(includedby, "plugins");
                    }
                    
                    if (availableVersions != null) {
                        for (ArtifactVersion av : availableVersions) {
                            d.addAvailableVersion(av.toString());
                        }
                        
                    }
                    
                }
                
            }
            
        }
         else {
            if (exCol == null) {
                exCol = new ExceptionCollection();
            }
            
            exCol.addException(new DependencyNotFoundException("Unable to resolve plugin: " + groupId + ":" + artifactId + ":" + version));
        }
        
        return exCol;
    }
    
    private String buildReference(final String groupId, final String artifactId, final String version) {
        String includedBy;
        try {
            final PackageURL purl = new PackageURL("maven", groupId, artifactId, version, null, null);
            includedBy = purl.toString();
        }
         catch (MalformedPackageURLException ex) {
            getLog().warn("Unable to generate build reference for " + groupId + ":" + artifactId + ":" + version, ex);
            includedBy = groupId + ":" + artifactId + ":" + version;
        }
        
        return includedBy;
    }
    
    protected Set<Artifact> resolveArtifactDependencies(final DependableCoordinate artifact, MavenProject project) throws DependencyResolverException {
        final ProjectBuildingRequest buildingRequest = newResolveArtifactProjectBuildingRequest(project, project.getRemoteArtifactRepositories());
        final Iterable<ArtifactResult> artifactResults = dependencyResolver.resolveDependencies(buildingRequest, artifact, null);
        final Set<Artifact> artifacts = new HashSet<>();
        for (ArtifactResult artifactResult : artifactResults) {
            artifacts.add(artifactResult.getArtifact());
        }
        
        return artifacts;
    }
    
    private DependencyNode toDependencyNode(List<DependencyNode> nodes, ProjectBuildingRequest buildingRequest, DependencyNode parent, org.apache.maven.model.Dependency dependency) throws ArtifactResolverException {
        final DefaultArtifactCoordinate coordinate = new DefaultArtifactCoordinate();
        coordinate.setGroupId(dependency.getGroupId());
        coordinate.setArtifactId(dependency.getArtifactId());
        String version = null;
        final VersionRange vr;
        try {
            vr = VersionRange.createFromVersionSpec(dependency.getVersion());
        }
         catch (InvalidVersionSpecificationException ex) {
            throw new ArtifactResolverException("Invalid version specification: " + dependency.getGroupId() + ":" + dependency.getArtifactId() + ":" + dependency.getVersion(), ex);
        }
        
        if (vr.hasRestrictions()) {
            version = findVersion(nodes, dependency.getGroupId(), dependency.getArtifactId());
            if (version == null) {
                if (vr.getRecommendedVersion() != null) {
                    version = vr.getRecommendedVersion().toString();
                }
                 else if (vr.hasRestrictions()) {
                    for (Restriction restriction : vr.getRestrictions()) {
                        if (restriction.getLowerBound() != null) {
                            version = restriction.getLowerBound().toString();
                        }
                        
                        if (restriction.getUpperBound() != null) {
                            version = restriction.getUpperBound().toString();
                        }
                        
                    }
                    
                }
                 else {
                    version = vr.toString();
                }
                
            }
            
        }
        
        if (version == null) {
            version = dependency.getVersion();
        }
        
        coordinate.setVersion(version);
        final ArtifactType type = session.getRepositorySession().getArtifactTypeRegistry().get(dependency.getType());
        coordinate.setExtension(type.getExtension());
        coordinate.setClassifier((null == dependency.getClassifier() || dependency.getClassifier().isEmpty()) ? type.getClassifier() : dependency.getClassifier());
        final Artifact artifact = artifactResolver.resolveArtifact(buildingRequest, coordinate).getArtifact();
        artifact.setScope(dependency.getScope());
        return new DefaultDependencyNode(parent, artifact, dependency.getVersion(), dependency.getScope(), null);
    }
    
    private String findVersion(List<DependencyNode> nodes, String groupId, String artifactId) {
        final Optional<DependencyNode> f = nodes.stream().filter(p -> groupId.equals(p.getArtifact().getGroupId()) && artifactId.equals(p.getArtifact().getArtifactId())).findFirst();
        if (f.isPresent()) {
            return f.get().getArtifact().getVersion();
        }
        
        return null;
    }
    
    private ExceptionCollection collectDependencyManagementDependencies(Engine engine, ProjectBuildingRequest buildingRequest, MavenProject project, List<DependencyNode> nodes, boolean aggregate) {
        if (skipDependencyManagement || project.getDependencyManagement() == null) {
            return null;
        }
        
        ExceptionCollection exCol = null;
        for (org.apache.maven.model.Dependency dependency : project.getDependencyManagement().getDependencies()) {
            try {
                nodes.add(toDependencyNode(nodes, buildingRequest, null, dependency));
            }
             catch (ArtifactResolverException ex) {
                getLog().debug(String.format("Aggregate : %s", aggregate));
                boolean addException = true;
                if (!aggregate) {
                }
                 else if (addReactorDependency(engine, new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), dependency.getScope(), dependency.getType(), dependency.getClassifier(), new DefaultArtifactHandler()), project)) {                     addException = false;
                }
                
                if (addException) {
                    if (exCol == null) {
                        exCol = new ExceptionCollection();
                    }
                    
                    exCol.addException(ex);
                }
                
            }
            
        }
        
        return exCol;
    }
    
    private ExceptionCollection collectMavenDependencies(Engine engine, MavenProject project, Map<DependencyNode, List<DependencyNode>> nodeMap, ProjectBuildingRequest buildingRequest, boolean aggregate) {
        final List<ArtifactResult> allResolvedDeps = new ArrayList<>();
        final List<DependencyNode> dmNodes = new ArrayList<>();
        ExceptionCollection exCol = collectDependencyManagementDependencies(engine, buildingRequest, project, dmNodes, aggregate);
        for (DependencyNode dependencyNode : dmNodes) {
            exCol = scanDependencyNode(dependencyNode, null, engine, project, allResolvedDeps, buildingRequest, aggregate, exCol);
        }
        
        for (Map.Entry<DependencyNode, List<DependencyNode>> entry : nodeMap.entrySet()) {
            exCol = scanDependencyNode(entry.getKey(), null, engine, project, allResolvedDeps, buildingRequest, aggregate, exCol);
            for (DependencyNode dependencyNode : entry.getValue()) {
                exCol = scanDependencyNode(dependencyNode, entry.getKey(), engine, project, allResolvedDeps, buildingRequest, aggregate, exCol);
            }
            
        }
        
        return exCol;
    }
    
    private Artifact findInAllDeps(final List<ArtifactResult> allDeps, final Artifact unresolvedArtifact, final MavenProject project) throws DependencyNotFoundException {
        Artifact result = null;
        for (final ArtifactResult res : allDeps) {
            if (sameArtifact(res, unresolvedArtifact)) {
                result = res.getArtifact();
                break;
            }
            
        }
        
        if (result == null) {
            throw new DependencyNotFoundException(String.format("Expected dependency not found in resolved artifacts for " + "dependency %s of project-artifact %s", unresolvedArtifact, project.getArtifactId()));
        }
        
        return result;
    }
    
    private boolean sameArtifact(final ArtifactResult res, final Artifact unresolvedArtifact) {
        if (res == null || res.getArtifact() == null || unresolvedArtifact == null) {
            return false;
        }
        
        boolean result = Objects.equals(res.getArtifact().getGroupId(), unresolvedArtifact.getGroupId());
        result &= Objects.equals(res.getArtifact().getArtifactId(), unresolvedArtifact.getArtifactId());
        if ("RELEASE".equals(unresolvedArtifact.getBaseVersion())) {
            result &= !res.getArtifact().isSnapshot();
        }
         else if (!"LATEST".equals(unresolvedArtifact.getBaseVersion())) {
            result &= Objects.equals(res.getArtifact().getBaseVersion(), unresolvedArtifact.getBaseVersion());
        }
        
        result &= Objects.equals(res.getArtifact().getClassifier(), unresolvedArtifact.getClassifier());
        result &= Objects.equals(res.getArtifact().getType(), unresolvedArtifact.getType());
        return result;
    }
    
    protected String createProjectReferenceName(MavenProject project, DependencyNode dependencyNode) {
        return project.getName() + ":" + dependencyNode.getArtifact().getScope();
    }
    
    private ExceptionCollection collectDependencies(Engine engine, MavenProject project, Map<DependencyNode, List<DependencyNode>> nodes, ProjectBuildingRequest buildingRequest, boolean aggregate) {
        ExceptionCollection exCol;
        exCol = collectMavenDependencies(engine, project, nodes, buildingRequest, aggregate);
        final List<FileSet> projectScan;
        if (scanDirectory != null && !scanDirectory.isEmpty()) {
            if (scanSet == null) {
                scanSet = new ArrayList<>();
            }
            
            scanDirectory.forEach(d -> {
                final FileSet fs = new FileSet();
                fs.setDirectory(d);
                fs.addInclude(INCLUDE_ALL);
                scanSet.add(fs);
            }
            
);
        }
        
        if (scanSet == null || scanSet.isEmpty()) {
            final FileSet resourcesSet = new FileSet();
            final FileSet filtersSet = new FileSet();
            final FileSet webappSet = new FileSet();
            final FileSet mixedLangSet = new FileSet();
            try {
                resourcesSet.setDirectory(new File(project.getBasedir(), "src/main/resources").getCanonicalPath());
                resourcesSet.addInclude(INCLUDE_ALL);
                filtersSet.setDirectory(new File(project.getBasedir(), "src/main/filters").getCanonicalPath());
                filtersSet.addInclude(INCLUDE_ALL);
                webappSet.setDirectory(new File(project.getBasedir(), "src/main/webapp").getCanonicalPath());
                webappSet.addInclude(INCLUDE_ALL);
                mixedLangSet.setDirectory(project.getBasedir().getCanonicalPath());
                mixedLangSet.addInclude("package.json");
                mixedLangSet.addInclude("package-lock.json");
                mixedLangSet.addInclude("npm-shrinkwrap.json");
                mixedLangSet.addInclude("Gopkg.lock");
                mixedLangSet.addInclude("go.mod");
                mixedLangSet.addInclude("yarn.lock");
                mixedLangSet.addInclude("pnpm-lock.yaml");
                mixedLangSet.addExclude("/node_modules/");
            }
             catch (IOException ex) {
                if (exCol == null) {
                    exCol = new ExceptionCollection();
                }
                
                exCol.addException(ex);
            }
            
            projectScan = new ArrayList<>();
            projectScan.add(resourcesSet);
            projectScan.add(filtersSet);
            projectScan.add(webappSet);
            projectScan.add(mixedLangSet);
        }
         else if (aggregate) {
            projectScan = new ArrayList<>();
            for (FileSet copyFrom : scanSet) {
                final FileSet fsCopy = new FileSet();
                final File f = new File(copyFrom.getDirectory());
                if (f.isAbsolute()) {
                    fsCopy.setDirectory(copyFrom.getDirectory());
                }
                 else {
                    try {
                        fsCopy.setDirectory(new File(project.getBasedir(), copyFrom.getDirectory()).getCanonicalPath());
                    }
                     catch (IOException ex) {
                        if (exCol == null) {
                            exCol = new ExceptionCollection();
                        }
                        
                        exCol.addException(ex);
                        fsCopy.setDirectory(copyFrom.getDirectory());
                    }
                    
                }
                
                fsCopy.setDirectoryMode(copyFrom.getDirectoryMode());
                fsCopy.setExcludes(copyFrom.getExcludes());
                fsCopy.setFileMode(copyFrom.getFileMode());
                fsCopy.setFollowSymlinks(copyFrom.isFollowSymlinks());
                fsCopy.setIncludes(copyFrom.getIncludes());
                fsCopy.setLineEnding(copyFrom.getLineEnding());
                fsCopy.setMapper(copyFrom.getMapper());
                fsCopy.setModelEncoding(copyFrom.getModelEncoding());
                fsCopy.setOutputDirectory(copyFrom.getOutputDirectory());
                fsCopy.setUseDefaultExcludes(copyFrom.isUseDefaultExcludes());
                projectScan.add(fsCopy);
            }
            
        }
         else {
            projectScan = scanSet;
        }
        
        final FileSetManager fileSetManager = new FileSetManager();
        for (FileSet fileSet : projectScan) {
            getLog().debug("Scanning fileSet: " + fileSet.getDirectory());
            final String[] includedFiles = fileSetManager.getIncludedFiles(fileSet);
            for (String include : includedFiles) {
                final File includeFile = new File(fileSet.getDirectory(), include).getAbsoluteFile();
                if (includeFile.exists()) {
                    engine.scan(includeFile, project.getName());
                }
                
            }
            
        }
        
        return exCol;
    }
    
    private boolean addReactorDependency(Engine engine, Artifact artifact, final MavenProject depender) {
        return addVirtualDependencyFromReactor(engine, artifact, depender, "Unable to resolve %s as it has not been built yet " + "- creating a virtual dependency instead.");
    }
    
    private boolean addVirtualDependencyFromReactor(Engine engine, Artifact artifact, final MavenProject depender, String infoLogTemplate) {
        getLog().debug(String.format("Checking the reactor projects (%d) for %s:%s:%s", reactorProjects.size(), artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion()));
        for (MavenProject prj : reactorProjects) {
            getLog().debug(String.format("Comparing %s:%s:%s to %s:%s:%s", artifact.getGroupId(), artifact.getArtifactId(), artifact.getBaseVersion(), prj.getGroupId(), prj.getArtifactId(), prj.getVersion()));
            if (prj.getArtifactId().equals(artifact.getArtifactId()) && prj.getGroupId().equals(artifact.getGroupId()) && prj.getVersion().equals(artifact.getBaseVersion())) {
                final String displayName = String.format("%s:%s:%s", prj.getGroupId(), prj.getArtifactId(), prj.getVersion());
                getLog().info(String.format(infoLogTemplate, displayName));
                final Dependency d = newDependency(prj);
                final String key = String.format("%s:%s:%s", prj.getGroupId(), prj.getArtifactId(), prj.getVersion());
                d.setSha1sum(Checksum.getSHA1Checksum(key));
                d.setSha256sum(Checksum.getSHA256Checksum(key));
                d.setMd5sum(Checksum.getMD5Checksum(key));
                d.setEcosystem(JarAnalyzer.DEPENDENCY_ECOSYSTEM);
                d.setDisplayFileName(displayName);
                d.addProjectReference(depender.getName());
                final String includedby = buildReference( depender.getGroupId(), depender.getArtifactId(), depender.getVersion());
                d.addIncludedBy(includedby);
                d.addEvidence(EvidenceType.PRODUCT, "project", "artifactid", prj.getArtifactId(), Confidence.HIGHEST);
                d.addEvidence(EvidenceType.VENDOR, "project", "artifactid", prj.getArtifactId(), Confidence.LOW);
                d.addEvidence(EvidenceType.VENDOR, "project", "groupid", prj.getGroupId(), Confidence.HIGHEST);
                d.addEvidence(EvidenceType.PRODUCT, "project", "groupid", prj.getGroupId(), Confidence.LOW);
                d.setEcosystem(JarAnalyzer.DEPENDENCY_ECOSYSTEM);
                Identifier id;
                try {
                    id = new PurlIdentifier(StandardTypes.MAVEN, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), Confidence.HIGHEST);
                }
                 catch (MalformedPackageURLException ex) {
                    getLog().debug("Unable to create PackageURL object:" + key);
                    id = new GenericIdentifier("maven:" + key, Confidence.HIGHEST);
                }
                
                d.addSoftwareIdentifier(id);
                d.setName(String.format("%s:%s", prj.getGroupId(), prj.getArtifactId()));
                d.setVersion(prj.getVersion());
                d.setPackagePath(displayName);
                if (prj.getDescription() != null) {
                    JarAnalyzer.addDescription(d, prj.getDescription(), "project", "description");
                }
                
                for (License l : prj.getLicenses()) {
                    final StringBuilder license = new StringBuilder();
                    if (l.getName() != null) {
                        license.append(l.getName());
                    }
                    
                    if (l.getUrl() != null) {
                        license.append(" ").append(l.getUrl());
                    }
                    
                    if (d.getLicense() == null) {
                        d.setLicense(license.toString());
                    }
                     else if (!d.getLicense().contains(license)) {
                        d.setLicense(String.format("%s%n%s", d.getLicense(), license));
                    }
                    
                }
                
                engine.addDependency(d);
                return true;
            }
            
        }
        
        return false;
    }
    
    Dependency newDependency(MavenProject prj) {
        final File pom = new File(prj.getBasedir(), "pom.xml");
        if (pom.isFile()) {
            getLog().debug("Adding virtual dependency from pom.xml");
            return new Dependency(pom, true);
        }
         else if (prj.getFile().isFile()) {
            getLog().debug("Adding virtual dependency from file");
            return new Dependency(prj.getFile(), true);
        }
         else {
            return new Dependency(true);
        }
        
    }
    
    private boolean addSnapshotReactorDependency(Engine engine, Artifact artifact, final MavenProject depender) {
        if (!artifact.isSnapshot()) {
            return false;
        }
        
        return addVirtualDependencyFromReactor(engine, artifact, depender, "Found snapshot reactor project in aggregate for %s - " + "creating a virtual dependency as the snapshot found in the repository may contain outdated dependencies.");
    }
    
    public ProjectBuildingRequest newResolveArtifactProjectBuildingRequest(MavenProject project, List<ArtifactRepository> repos) {
        final ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());
        buildingRequest.setRemoteRepositories(repos);
        buildingRequest.setProject(project);
        return buildingRequest;
    }
    
    protected void runCheck() throws MojoExecutionException, MojoFailureException {
        muteNoisyLoggers();
        try (Engine engine = initializeEngine()) {
            ExceptionCollection exCol = null;
            if (scanDependencies) {
                exCol = scanDependencies(engine);
            }
            
            if (scanPlugins) {
                exCol = scanPlugins(engine, exCol);
            }
            
            try {
                engine.analyzeDependencies();
            }
             catch (ExceptionCollection ex) {
                exCol = handleAnalysisExceptions(exCol, ex);
            }
            
            if (exCol == null || !exCol.isFatal()) {
                File outputDir = getCorrectOutputDirectory(this.getProject());
                if (outputDir == null) {
                    outputDir = new File(this.getProject().getBuild().getDirectory());
                }
                
                try {
                    final MavenProject p = this.getProject();
                    for (String f : getFormats()) {
                        engine.writeReports(p.getName(), p.getGroupId(), p.getArtifactId(), p.getVersion(), outputDir, f, exCol);
                    }
                    
                }
                 catch (ReportException ex) {
                    if (exCol == null) {
                        exCol = new ExceptionCollection(ex);
                    }
                     else {
                        exCol.addException(ex);
                    }
                    
                    if (this.isFailOnError()) {
                        throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
                    }
                     else {
                        getLog().debug("Error writing the report", ex);
                    }
                    
                }
                
                showSummary(this.getProject(), engine.getDependencies());
                checkForFailure(engine.getDependencies());
                if (exCol != null && this.isFailOnError()) {
                    throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
                }
                
            }
            
        }
         catch (DatabaseException ex) {
            if (getLog().isDebugEnabled()) {
                getLog().debug("Database connection error", ex);
            }
            
            final String msg = "An exception occurred connecting to the local database. Please see the log file for more details.";
            if (this.isFailOnError()) {
                throw new MojoExecutionException(msg, ex);
            }
            
            getLog().error(msg, ex);
        }
         finally {
            getSettings().cleanup();
        }
        
    }
    
    private ExceptionCollection handleAnalysisExceptions(ExceptionCollection currentEx, ExceptionCollection newEx) throws MojoExecutionException {
        ExceptionCollection returnEx = currentEx;
        if (returnEx == null) {
            returnEx = newEx;
        }
         else {
            returnEx.getExceptions().addAll(newEx.getExceptions());
            if (newEx.isFatal()) {
                returnEx.setFatal(true);
            }
            
        }
        
        if (returnEx.isFatal()) {
            final String msg = String.format("Fatal exception(s) analyzing %s", getProject().getName());
            if (this.isFailOnError()) {
                throw new MojoExecutionException(msg, returnEx);
            }
            
            getLog().error(msg);
            if (getLog().isDebugEnabled()) {
                getLog().debug(returnEx);
            }
            
        }
         else {
            final String msg = String.format("Exception(s) analyzing %s", getProject().getName());
            if (getLog().isDebugEnabled()) {
                getLog().debug(msg, returnEx);
            }
            
        }
        
        return returnEx;
    }
    
    protected abstract ExceptionCollection scanDependencies(Engine engine) throws MojoExecutionException;
    protected abstract ExceptionCollection scanPlugins(Engine engine, ExceptionCollection exCol) throws MojoExecutionException;
    public File getReportOutputDirectory() {
        return reportOutputDirectory;
    }
    
    public void setReportOutputDirectory(File directory) {
        reportOutputDirectory = directory;
    }
    
    public File getOutputDirectory() {
        return outputDirectory;
    }
    
    public final boolean isExternalReport() {
        return true;
    }
    
    public String getOutputName() {
        final Set<String> selectedFormats = getFormats();
        if (selectedFormats.contains("HTML") || selectedFormats.contains("ALL") || selectedFormats.size() > 1) {
            return "dependency-check-report";
        }
         else if (selectedFormats.contains("JENKINS")) {
            return "dependency-check-jenkins.html";
        }
         else if (selectedFormats.contains("XML")) {
            return "dependency-check-report.xml";
        }
         else if (selectedFormats.contains("JUNIT")) {
            return "dependency-check-junit.xml";
        }
         else if (selectedFormats.contains("JSON")) {
            return "dependency-check-report.json";
        }
         else if (selectedFormats.contains("SARIF")) {
            return "dependency-check-report.sarif";
        }
         else if (selectedFormats.contains("CSV")) {
            return "dependency-check-report.csv";
        }
         else {
            getLog().warn("Unknown report format used during site generation.");
            return "dependency-check-report";
        }
        
    }
    
    public String getCategoryName() {
        return MavenReport.CATEGORY_PROJECT_REPORTS;
    }
    
    protected Engine initializeEngine() throws DatabaseException {
        populateSettings();
        return new Engine(settings);
    }
    
    protected void populateSettings() {
        settings = new Settings();
        InputStream mojoProperties = null;
        try {
            mojoProperties = this.getClass().getClassLoader().getResourceAsStream(PROPERTIES_FILE);
            settings.mergeProperties(mojoProperties);
        }
         catch (IOException ex) {
            getLog().warn("Unable to load the dependency-check maven mojo.properties file.");
            if (getLog().isDebugEnabled()) {
                getLog().debug("", ex);
            }
            
        }
         finally {
            if (mojoProperties != null) {
                try {
                    mojoProperties.close();
                }
                 catch (IOException ex) {
                    if (getLog().isDebugEnabled()) {
                        getLog().debug("", ex);
                    }
                    
                }
                
            }
            
        }
        
        settings.setStringIfNotEmpty(Settings.KEYS.MAVEN_LOCAL_REPO, mavenSettings.getLocalRepository());
        settings.setBooleanIfNotNull(Settings.KEYS.AUTO_UPDATE, autoUpdate);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, enableExperimental);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIRED_ENABLED, enableRetired);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_GOLANG_DEP_ENABLED, golangDepEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_GOLANG_MOD_ENABLED, golangModEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_DART_ENABLED, dartAnalyzerEnabled);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_GOLANG_PATH, pathToGo);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_YARN_PATH, pathToYarn);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_PNPM_PATH, pathToPnpm);
        final Proxy mavenProxy = getMavenProxy();
        if (mavenProxy != null) {
            final String existing = System.getProperty("https.proxyHost");
            if (existing == null && mavenProxy.getHost() != null && !mavenProxy.getHost().isEmpty()) {
                System.setProperty("https.proxyHost", mavenProxy.getHost());
                if (mavenProxy.getPort() > 0) {
                    System.setProperty("https.proxyPort", String.valueOf(mavenProxy.getPort()));
                }
                
                if (mavenProxy.getUsername() != null && !mavenProxy.getUsername().isEmpty()) {
                    System.setProperty("https.proxyUser", mavenProxy.getUsername());
                }
                
                if (mavenProxy.getPassword() != null && !mavenProxy.getPassword().isEmpty()) {
                    System.setProperty("https.proxyPassword", mavenProxy.getPassword());
                }
                
                if (mavenProxy.getNonProxyHosts() != null && !mavenProxy.getNonProxyHosts().isEmpty()) {
                    System.setProperty("http.nonProxyHosts", mavenProxy.getNonProxyHosts());
                }
                
            }
            
            settings.setString(Settings.KEYS.PROXY_SERVER, mavenProxy.getHost());
            settings.setString(Settings.KEYS.PROXY_PORT, Integer.toString(mavenProxy.getPort()));
            final String userName = mavenProxy.getUsername();
            String password = mavenProxy.getPassword();
            if (password != null && !password.isEmpty()) {
                if (settings.getBoolean(Settings.KEYS.PROXY_DISABLE_SCHEMAS, true)) {
                    System.setProperty("jdk.http.auth.tunneling.disabledSchemes", "");
                }
                
                try {
                    password = decryptPasswordFromSettings(password);
                }
                 catch (SecDispatcherException ex) {
                    password = handleSecDispatcherException("proxy", mavenProxy.getId(), password, ex);
                }
                
            }
            
            settings.setStringIfNotNull(Settings.KEYS.PROXY_USERNAME, userName);
            settings.setStringIfNotNull(Settings.KEYS.PROXY_PASSWORD, password);
            settings.setStringIfNotNull(Settings.KEYS.PROXY_NON_PROXY_HOSTS, mavenProxy.getNonProxyHosts());
        }
         else if (System.getProperty("http.proxyHost") != null) {
            settings.setString(Settings.KEYS.PROXY_SERVER, System.getProperty("http.proxyHost", ""));
            if (System.getProperty("http.proxyPort") != null) {
                settings.setString(Settings.KEYS.PROXY_PORT, System.getProperty("http.proxyPort"));
            }
            
            if (System.getProperty("http.proxyUser") != null) {
                settings.setString(Settings.KEYS.PROXY_USERNAME, System.getProperty("http.proxyUser"));
            }
            
            if (System.getProperty("http.proxyPassword") != null) {
                settings.setString(Settings.KEYS.PROXY_PASSWORD, System.getProperty("http.proxyPassword"));
            }
            
            if (System.getProperty("http.nonProxyHosts") != null) {
                settings.setString(Settings.KEYS.PROXY_NON_PROXY_HOSTS, System.getProperty("http.nonProxyHosts"));
            }
            
        }
         else if (this.proxy != null && this.proxy.getHost() != null) {
            settings.setString(Settings.KEYS.PROXY_SERVER, this.proxy.getHost());
            settings.setString(Settings.KEYS.PROXY_PORT, Integer.toString(this.proxy.getPort()));
            configureServerCredentials(this.proxy.getServerId(), Settings.KEYS.PROXY_USERNAME, Settings.KEYS.PROXY_PASSWORD);
        }
        
        final String[] suppressions = determineSuppressions();
        settings.setArrayIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE, suppressions);
        settings.setBooleanIfNotNull(Settings.KEYS.UPDATE_VERSION_CHECK_ENABLED, versionCheckEnabled);
        settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT, connectionTimeout);
        settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_READ_TIMEOUT, readTimeout);
        settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE, hintsFile);
        settings.setFloat(Settings.KEYS.JUNIT_FAIL_ON_CVSS, junitFailOnCVSS);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_JAR_ENABLED, jarAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NUSPEC_ENABLED, nuspecAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NUGETCONF_ENABLED, nugetconfAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_LIBMAN_ENABLED, libmanAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_CENTRAL_ENABLED, centralAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_CENTRAL_USE_CACHE, centralAnalyzerUseCache);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_ENABLED, artifactoryAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NEXUS_ENABLED, nexusAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ASSEMBLY_ENABLED, assemblyAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_MSBUILD_PROJECT_ENABLED, msbuildAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARCHIVE_ENABLED, archiveAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED, knownExploitedEnabled);
        settings.setStringIfNotEmpty(Settings.KEYS.KEV_URL, knownExploitedUrl);
        settings.setStringIfNotEmpty(Settings.KEYS.ADDITIONAL_ZIP_EXTENSIONS, zipExtensions);
        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_ASSEMBLY_DOTNET_PATH, pathToCore);
        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_NEXUS_URL, nexusUrl);
        configureServerCredentials(nexusServerId, Settings.KEYS.ANALYZER_NEXUS_USER, Settings.KEYS.ANALYZER_NEXUS_PASSWORD);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NEXUS_USES_PROXY, nexusUsesProxy);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_URL, artifactoryAnalyzerUrl);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_USES_PROXY, artifactoryAnalyzerUseProxy);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_PARALLEL_ANALYSIS, artifactoryAnalyzerParallelAnalysis);
        if (Boolean.TRUE.equals(artifactoryAnalyzerEnabled)) {
            if (artifactoryAnalyzerServerId != null) {
                configureServerCredentials(artifactoryAnalyzerServerId, Settings.KEYS.ANALYZER_ARTIFACTORY_API_USERNAME, Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
            }
             else {
                settings.setStringIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_API_USERNAME, artifactoryAnalyzerUsername);
                settings.setStringIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN, artifactoryAnalyzerApiToken);
            }
            
            settings.setStringIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_BEARER_TOKEN, artifactoryAnalyzerBearerToken);
        }
        
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_PYTHON_DISTRIBUTION_ENABLED, pyDistributionAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_PYTHON_PACKAGE_ENABLED, pyPackageAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RUBY_GEMSPEC_ENABLED, rubygemsAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_OPENSSL_ENABLED, opensslAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_CMAKE_ENABLED, cmakeAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_AUTOCONF_ENABLED, autoconfAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_MAVEN_INSTALL_ENABLED, mavenInstallAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_PIP_ENABLED, pipAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_PIPFILE_ENABLED, pipfileAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_POETRY_ENABLED, poetryAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_COMPOSER_LOCK_ENABLED, composerAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_CPANFILE_ENABLED, cpanfileAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_PACKAGE_ENABLED, nodeAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_AUDIT_ENABLED, nodeAuditAnalyzerEnabled);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_NODE_AUDIT_URL, nodeAuditAnalyzerUrl);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_AUDIT_USE_CACHE, nodeAuditAnalyzerUseCache);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_PACKAGE_SKIPDEV, nodePackageSkipDevDependencies);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_AUDIT_SKIPDEV, nodeAuditSkipDevDependencies);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_YARN_AUDIT_ENABLED, yarnAuditAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_PNPM_AUDIT_ENABLED, pnpmAuditAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIREJS_ENABLED, retireJsAnalyzerEnabled);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_RETIREJS_REPO_JS_URL, retireJsUrl);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIREJS_FORCEUPDATE, retireJsForceUpdate);
        if (retireJsUser == null && retireJsPassword == null && retireJsUrlServerId != null) {
            configureServerCredentials(retireJsUrlServerId, Settings.KEYS.ANALYZER_RETIREJS_REPO_JS_USER, Settings.KEYS.ANALYZER_RETIREJS_REPO_JS_PASSWORD);
        }
         else {
            settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_RETIREJS_REPO_JS_USER, retireJsUser);
            settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_RETIREJS_REPO_JS_PASSWORD, retireJsPassword);
        }
        
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_MIX_AUDIT_ENABLED, mixAuditAnalyzerEnabled);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_MIX_AUDIT_PATH, mixAuditPath);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_BUNDLE_AUDIT_ENABLED, bundleAuditAnalyzerEnabled);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_BUNDLE_AUDIT_PATH, bundleAuditPath);
        settings.setStringIfNotNull(Settings.KEYS.ANALYZER_BUNDLE_AUDIT_WORKING_DIRECTORY, bundleAuditWorkingDirectory);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_COCOAPODS_ENABLED, cocoapodsAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_SWIFT_PACKAGE_MANAGER_ENABLED, swiftPackageManagerAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_SWIFT_PACKAGE_RESOLVED_ENABLED, swiftPackageResolvedAnalyzerEnabled);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_OSSINDEX_ENABLED, ossindexAnalyzerEnabled);
        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_URL, ossindexAnalyzerUrl);
        configureServerCredentials(ossIndexServerId, Settings.KEYS.ANALYZER_OSSINDEX_USER, Settings.KEYS.ANALYZER_OSSINDEX_PASSWORD);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_OSSINDEX_USE_CACHE, ossindexAnalyzerUseCache);
        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS, ossIndexWarnOnlyOnRemoteErrors);
        if (retirejs != null) {
            settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIREJS_FILTER_NON_VULNERABLE, retirejs.getFilterNonVulnerable());
            settings.setArrayIfNotEmpty(Settings.KEYS.ANALYZER_RETIREJS_FILTERS, retirejs.getFilters());
        }
        
        settings.setStringIfNotEmpty(Settings.KEYS.DB_DRIVER_NAME, databaseDriverName);
        settings.setStringIfNotEmpty(Settings.KEYS.DB_DRIVER_PATH, databaseDriverPath);
        settings.setStringIfNotEmpty(Settings.KEYS.DB_CONNECTION_STRING, connectionString);
        if (databaseUser == null && databasePassword == null && serverId != null) {
            configureServerCredentials(serverId, Settings.KEYS.DB_USER, Settings.KEYS.DB_PASSWORD);
        }
         else {
            settings.setStringIfNotEmpty(Settings.KEYS.DB_USER, databaseUser);
            settings.setStringIfNotEmpty(Settings.KEYS.DB_PASSWORD, databasePassword);
        }
        
        settings.setStringIfNotEmpty(Settings.KEYS.DATA_DIRECTORY, dataDirectory);
        settings.setStringIfNotEmpty(Settings.KEYS.DB_FILE_NAME, dbFilename);
        settings.setStringIfNotNull(Settings.KEYS.NVD_API_ENDPOINT, nvdApiEndpoint);
        settings.setIntIfNotNull(Settings.KEYS.NVD_API_DELAY, nvdApiDelay);
        settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_URL, nvdDatafeedUrl);
        settings.setIntIfNotNull(Settings.KEYS.NVD_API_VALID_FOR_HOURS, nvdValidForHours);
        settings.setIntIfNotNull(Settings.KEYS.NVD_API_MAX_RETRY_COUNT, nvdMaxRetryCount);
        if (nvdApiKey == null && nvdApiServerId != null) {
            configureServerCredentialsApiKey(nvdApiServerId, Settings.KEYS.NVD_API_KEY);
        }
         else {
            settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_KEY, nvdApiKey);
        }
        
        if (nvdUser == null && nvdPassword == null && nvdDatafeedServerId != null) {
            configureServerCredentials(nvdDatafeedServerId, Settings.KEYS.NVD_API_DATAFEED_USER, Settings.KEYS.NVD_API_DATAFEED_PASSWORD);
        }
         else {
            settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_USER, nvdUser);
            settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_PASSWORD, nvdPassword);
        }
        
        settings.setBooleanIfNotNull(Settings.KEYS.PRETTY_PRINT, prettyPrint);
        artifactScopeExcluded = new ArtifactScopeExcluded(skipTestScope, skipProvidedScope, skipSystemScope, skipRuntimeScope);
        artifactTypeExcluded = new ArtifactTypeExcluded(skipArtifactType);
        if (suppressionFileUser == null && suppressionFilePassword == null && suppressionFileServerId != null) {
            configureServerCredentials(suppressionFileServerId, Settings.KEYS.SUPPRESSION_FILE_USER, Settings.KEYS.SUPPRESSION_FILE_PASSWORD);
        }
         else {
            settings.setStringIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE_USER, suppressionFileUser);
            settings.setStringIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE_PASSWORD, suppressionFilePassword);
        }
        
        settings.setIntIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_VALID_FOR_HOURS, hostedSuppressionsValidForHours);
        settings.setStringIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_URL, hostedSuppressionsUrl);
        settings.setBooleanIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_FORCEUPDATE, hostedSuppressionsForceUpdate);
        settings.setBooleanIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_ENABLED, hostedSuppressionsEnabled);
    }
    
    private void configureServerCredentials(String serverId, String userSettingKey, String passwordSettingKey) {
        if (serverId != null) {
            final Server server = settingsXml.getServer(serverId);
            if (server != null) {
                final String username = server.getUsername();
                String password = null;
                try {
                    password = decryptPasswordFromSettings(server.getPassword());
                }
                 catch (SecDispatcherException ex) {
                    password = handleSecDispatcherException("server", serverId, server.getPassword(), ex);
                }
                
                settings.setStringIfNotEmpty(userSettingKey, username);
                settings.setStringIfNotEmpty(passwordSettingKey, password);
            }
             else {
                getLog().error(String.format("Server '%s' not found in the settings.xml file", serverId));
            }
            
        }
        
    }
    
    private void configureServerCredentialsApiKey(String serverId, String apiKeySetting) {
        if (serverId != null) {
            final Server server = settingsXml.getServer(serverId);
            if (server != null) {
                String password = null;
                try {
                    password = decryptPasswordFromSettings(server.getPassword());
                }
                 catch (SecDispatcherException ex) {
                    password = handleSecDispatcherException("server", serverId, server.getPassword(), ex);
                }
                
                settings.setStringIfNotEmpty(apiKeySetting, password);
            }
             else {
                getLog().error(String.format("Server '%s' not found in the settings.xml file", serverId));
            }
            
        }
        
    }
    
    private String decryptPasswordFromSettings(String password) throws SecDispatcherException {
        if (securityDispatcher instanceof DefaultSecDispatcher) {
            ((DefaultSecDispatcher) securityDispatcher).setConfigurationFile("~/.m2/settings-security.xml");
        }
        
        return securityDispatcher.decrypt(password);
    }
    
    private String handleSecDispatcherException(String settingsElementName, String settingsElementId, String passwordValueFromSettings, SecDispatcherException ex) {
        String password = passwordValueFromSettings;
        if (ex.getCause() instanceof FileNotFoundException || (ex.getCause() != null && ex.getCause().getCause() instanceof FileNotFoundException)) {
            final String tmp = passwordValueFromSettings;
            if (tmp.startsWith("{") && tmp.endsWith("}")) {
                getLog().error(String.format( "Unable to decrypt the %s password for %s id '%s' in settings.xml%n\tCause: %s", settingsElementName, settingsElementName, settingsElementId, ex.getMessage()));
            }
             else {
                password = tmp;
            }
            
        }
         else {
            getLog().error(String.format( "Unable to decrypt the %s password for %s id '%s' in settings.xml%n\tCause: %s", settingsElementName, settingsElementName, settingsElementId, ex.getMessage()));
        }
        
        return password;
    }
    
    private String[] determineSuppressions() {
        String[] suppressions = suppressionFiles;
        if (suppressionFile != null) {
            if (suppressions == null) {
                suppressions = new String[]{suppressionFile};
            }
             else {
                suppressions = Arrays.copyOf(suppressions, suppressions.length + 1);
                suppressions[suppressions.length - 1] = suppressionFile;
            }
            
        }
        
        return suppressions;
    }
    
    private void muteNoisyLoggers() {
        System.setProperty("jcs.logSystem", "slf4j");
        if (!getLog().isDebugEnabled()) {
            Slf4jAdapter.muteLogging(true);
        }
        
        final String[] noisyLoggers = {             "org.apache.hc" };
        for (String loggerName : noisyLoggers) {
            System.setProperty("org.slf4j.simpleLogger.log." + loggerName, "error");
        }
        
    }
    
    private Proxy getMavenProxy() {
        if (mavenSettings != null) {
            final List<Proxy> proxies = mavenSettings.getProxies();
            if (proxies != null && !proxies.isEmpty()) {
                if (mavenSettingsProxyId != null) {
                    for (Proxy proxy : proxies) {
                        if (mavenSettingsProxyId.equalsIgnoreCase(proxy.getId())) {
                            return proxy;
                        }
                        
                    }
                    
                }
                 else {
                    for (Proxy aProxy : proxies) {
                        if (aProxy.isActive()) {
                            return aProxy;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return null;
    }
    
    protected MavenProject getProject() {
        return project;
    }
    
    protected List<MavenProject> getReactorProjects() {
        return reactorProjects;
    }
    
    private Set<String> getFormats() {
        final Set<String> invalid = new HashSet<>();
        final Set<String> selectedFormats = formats == null || formats.length == 0 ? new HashSet<>() : new HashSet<>(Arrays.asList(formats));
        selectedFormats.forEach((s) -> {
            try {
                ReportGenerator.Format.valueOf(s.toUpperCase());
            }
             catch (IllegalArgumentException ex) {
                invalid.add(s);
            }
            
        }
        
);
        invalid.forEach((s) -> getLog().warn("Invalid report format specified: " + s));
        if (selectedFormats.contains("true")) {
            selectedFormats.remove("true");
        }
        
        if (format != null && selectedFormats.isEmpty()) {
            selectedFormats.add(format);
        }
        
        return selectedFormats;
    }
    
    public List<String> getExcludes() {
        if (excludes == null) {
            excludes = new ArrayList<>();
        }
        
        return excludes;
    }
    
    protected Filter<String> getArtifactScopeExcluded() {
        return artifactScopeExcluded;
    }
    
    protected Settings getSettings() {
        return settings;
    }
    
    protected void checkForFailure(Dependency[] dependencies) throws MojoFailureException {
        final StringBuilder ids = new StringBuilder();
        for (Dependency d : dependencies) {
            boolean addName = true;
            for (Vulnerability v : d.getVulnerabilities()) {
                final Double cvssV2 = v.getCvssV2() != null && v.getCvssV2().getCvssData() != null && v.getCvssV2().getCvssData().getBaseScore() != null ? v.getCvssV2().getCvssData().getBaseScore() : -1;
                final Double cvssV3 = v.getCvssV3() != null && v.getCvssV3().getCvssData() != null && v.getCvssV3().getCvssData().getBaseScore() != null ? v.getCvssV3().getCvssData().getBaseScore() : -1;
                final Double unscoredCvss = v.getUnscoredSeverity() != null ? SeverityUtil.estimateCvssV2(v.getUnscoredSeverity()) : -1;
                if (failBuildOnAnyVulnerability || cvssV2 >= failBuildOnCVSS || cvssV3 >= failBuildOnCVSS || unscoredCvss >= failBuildOnCVSS || (failBuildOnCVSS <= 0.0)) {
                    String name = v.getName();
                    if (cvssV3 >= 0.0) {
                        name += "(" + cvssV3 + ")";
                    }
                     else if (cvssV2 >= 0.0) {
                        name += "(" + cvssV2 + ")";
                    }
                     else if (unscoredCvss >= 0.0) {
                        name += "(" + unscoredCvss + ")";
                    }
                    
                    if (addName) {
                        addName = false;
                        ids.append(NEW_LINE).append(d.getFileName()).append(": ");
                        ids.append(name);
                    }
                     else {
                        ids.append(", ").append(name);
                    }
                    
                }
                
            }
            
        }
        
        if (ids.length() > 0) {
            final String msg;
            if (showSummary) {
                if (failBuildOnAnyVulnerability) {
                    msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities: %n%s%n%n" + "See the dependency-check report for more details.%n%n", ids);
                }
                 else {
                    msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater than or " + "equal to '%.1f': %n%s%n%nSee the dependency-check report for more details.%n%n", failBuildOnCVSS, ids);
                }
                
            }
             else {
                msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities.%n%n" + "See the dependency-check report for more details.%n%n");
            }
            
            throw new MojoFailureException(msg);
        }
        
    }
    
    protected void showSummary(MavenProject mp, Dependency[] dependencies) {
        if (showSummary) {
            DependencyCheckScanAgent.showSummary(mp.getName(), dependencies);
        }
        
    }
    
    private ExceptionCollection scanDependencyNode(DependencyNode dependencyNode, DependencyNode root, Engine engine, MavenProject project, List<ArtifactResult> allResolvedDeps, ProjectBuildingRequest buildingRequest, boolean aggregate, ExceptionCollection exceptionCollection) {
        ExceptionCollection exCol = exceptionCollection;
        if (artifactScopeExcluded.passes(dependencyNode.getArtifact().getScope()) || artifactTypeExcluded.passes(dependencyNode.getArtifact().getType())) {
            return exCol;
        }
        
        boolean isResolved = false;
        File artifactFile = null;
        String artifactId = null;
        String groupId = null;
        String version = null;
        List<ArtifactVersion> availableVersions = null;
        if (org.apache.maven.artifact.Artifact.SCOPE_SYSTEM.equals(dependencyNode.getArtifact().getScope())) {
            final Artifact a = dependencyNode.getArtifact();
            if (a.isResolved() && a.getFile().isFile()) {
                artifactFile = a.getFile();
                isResolved = artifactFile.isFile();
                groupId = a.getGroupId();
                artifactId = a.getArtifactId();
                version = a.getVersion();
                availableVersions = a.getAvailableVersions();
            }
             else {
                for (org.apache.maven.model.Dependency d : project.getDependencies()) {
                    if (d.getSystemPath() != null && artifactsMatch(d, a)) {
                        artifactFile = new File(d.getSystemPath());
                        isResolved = artifactFile.isFile();
                        groupId = a.getGroupId();
                        artifactId = a.getArtifactId();
                        version = a.getVersion();
                        availableVersions = a.getAvailableVersions();
                        break;
                    }
                    
                }
                
            }
            
            Throwable ignored = null;
            if (!isResolved) {
                try {
                    tryResolutionOnce(project, allResolvedDeps, buildingRequest); final Artifact result = findInAllDeps(allResolvedDeps, dependencyNode.getArtifact(), project); isResolved = result.isResolved(); artifactFile = result.getFile(); groupId = result.getGroupId(); artifactId = result.getArtifactId(); version = result.getVersion(); availableVersions = result.getAvailableVersions(); } catch (DependencyNotFoundException | DependencyResolverException e) {
                    getLog().warn("Error performing last-resort System-scoped dependency resolution: " + e.getMessage());
                    ignored = e;
                }
                
            }
            
            if (!isResolved) {
                final StringBuilder message = new StringBuilder("Unable to resolve system scoped dependency: ");
                if (artifactFile != null) {
                    message.append(dependencyNode.toNodeString()).append(" at path ").append(artifactFile);
                }
                 else {
                    message.append(dependencyNode.toNodeString()).append(" at path ").append(a.getFile());
                }
                
                getLog().error(message);
                if (exCol == null) {
                    exCol = new ExceptionCollection();
                }
                
                final Exception thrown = new DependencyNotFoundException(message.toString());
                if (ignored != null) {
                    thrown.addSuppressed(ignored);
                }
                
                exCol.addException(thrown);
            }
            
        }
         else {
            final Artifact dependencyArtifact = dependencyNode.getArtifact();
            final Artifact result;
            if (dependencyArtifact.isResolved()) {
                getLog().debug(String.format("Skipping artifact %s, already resolved", dependencyArtifact.getArtifactId()));
                result = dependencyArtifact;
            }
             else {
                try {
                    tryResolutionOnce(project, allResolvedDeps, buildingRequest); result = findInAllDeps(allResolvedDeps, dependencyNode.getArtifact(), project); } catch (DependencyNotFoundException | DependencyResolverException ex) {
                    getLog().debug(String.format("Aggregate : %s", aggregate));
                    boolean addException = true;
                    if (!aggregate) {
                    }
                     else if (addReactorDependency(engine, dependencyNode.getArtifact(), project)) {
                        addException = false;
                    }
                    
                    if (addException) {
                        if (exCol == null) {
                            exCol = new ExceptionCollection();
                        }
                        
                        exCol.addException(ex);
                    }
                    
                    return exCol;
                }
                
            }
            
            if (aggregate && virtualSnapshotsFromReactor && dependencyNode.getArtifact().isSnapshot() && addSnapshotReactorDependency(engine, dependencyNode.getArtifact(), project)) {
                return exCol;
            }
            
            isResolved = result.isResolved();
            artifactFile = result.getFile();
            groupId = result.getGroupId();
            artifactId = result.getArtifactId();
            version = result.getVersion();
            availableVersions = result.getAvailableVersions();
        }
        
        if (isResolved && artifactFile != null) {
            final List<Dependency> deps = engine.scan(artifactFile.getAbsoluteFile(), createProjectReferenceName(project, dependencyNode));
            if (deps != null) {
                processResolvedArtifact(artifactFile, deps, groupId, artifactId, version, root, project, availableVersions, dependencyNode);
            }
             else if ("import".equals(dependencyNode.getArtifact().getScope())) {
                final String msg = String.format("Skipping '%s:%s' in project %s as it uses an `import` scope", dependencyNode.getArtifact().getId(), dependencyNode.getArtifact().getScope(), project.getName());
                getLog().debug(msg);
            }
             else if ("pom".equals(dependencyNode.getArtifact().getType())) {
                exCol = processPomArtifact(artifactFile, root, project, engine, exCol);
            }
             else {
                if (!scannedFiles.contains(artifactFile)) {
                    final String msg = String.format("No analyzer could be found or the artifact has been scanned twice for '%s:%s' in project %s", dependencyNode.getArtifact().getId(), dependencyNode.getArtifact().getScope(), project.getName());
                    getLog().warn(msg);
                }
                
            }
            
        }
         else {
            final String msg = String.format("Unable to resolve '%s' in project %s", dependencyNode.getArtifact().getId(), project.getName());
            getLog().debug(msg);
            if (exCol == null) {
                exCol = new ExceptionCollection();
            }
            
        }
        
        return exCol;
    }
    
    private void tryResolutionOnce(MavenProject project, List<ArtifactResult> allResolvedDeps, ProjectBuildingRequest buildingRequest) throws DependencyResolverException {
        if (allResolvedDeps.isEmpty()) { 
            try {
                final List<org.apache.maven.model.Dependency> dependencies = project.getDependencies();
                final List<org.apache.maven.model.Dependency> managedDependencies = project .getDependencyManagement() == null ? null : project.getDependencyManagement().getDependencies();
                final Iterable<ArtifactResult> allDeps = dependencyResolver .resolveDependencies(buildingRequest, dependencies, managedDependencies, null);
                allDeps.forEach(allResolvedDeps::add);
            }
             catch (DependencyResolverException dre) {
                if (dre.getCause() instanceof org.eclipse.aether.resolution.DependencyResolutionException) {
                    final List<ArtifactResult> successResults = Mshared998Util .getResolutionResults((org.eclipse.aether.resolution.DependencyResolutionException) dre.getCause());
                    allResolvedDeps.addAll(successResults);
                }
                 else {
                    throw dre;
                }
                
            }
            
        }
        
    }
    
    private void processResolvedArtifact(File artifactFile, final List<Dependency> deps, String groupId, String artifactId, String version, DependencyNode root, MavenProject project1, List<ArtifactVersion> availableVersions, DependencyNode dependencyNode) {
        scannedFiles.add(artifactFile);
        Dependency d = null;
        if (deps.size() == 1) {
            d = deps.get(0);
        }
         else {
            for (Dependency possible : deps) {
                if (artifactFile.getAbsoluteFile().equals(possible.getActualFile())) {
                    d = possible;
                    break;
                }
                
            }
            
            for (Dependency dep : deps) {
                if (d != null && d != dep) {
                    final String includedBy = buildReference(groupId, artifactId, version);
                    dep.addIncludedBy(includedBy);
                }
                
            }
            
        }
        
        if (d != null) {
            final MavenArtifact ma = new MavenArtifact(groupId, artifactId, version);
            d.addAsEvidence("pom", ma, Confidence.HIGHEST);
            if (root != null) {
                final String includedby = buildReference( root.getArtifact().getGroupId(), root.getArtifact().getArtifactId(), root.getArtifact().getVersion());
                d.addIncludedBy(includedby);
            }
             else {
                final String includedby = buildReference(project1.getGroupId(), project1.getArtifactId(), project1.getVersion());
                d.addIncludedBy(includedby);
            }
            
            if (availableVersions != null) {
                for (ArtifactVersion av : availableVersions) {
                    d.addAvailableVersion(av.toString());
                }
                
            }
            
            getLog().debug(String.format("Adding project reference %s on dependency %s", project1.getName(), d.getDisplayFileName()));
        }
         else if (getLog().isDebugEnabled()) {
            final String msg = String.format("More than 1 dependency was identified in first pass scan of '%s' in project %s", dependencyNode.getArtifact().getId(), project1.getName());
            getLog().debug(msg);
        }
        
    }
    
    private ExceptionCollection processPomArtifact(File artifactFile, DependencyNode root, MavenProject project1, Engine engine, ExceptionCollection exCollection) {
        ExceptionCollection exCol = exCollection;
        try {
            final Dependency d = new Dependency(artifactFile.getAbsoluteFile());
            final Model pom = PomUtils.readPom(artifactFile.getAbsoluteFile());
            JarAnalyzer.setPomEvidence(d, pom, null, true);
            if (root != null) {
                final String includedby = buildReference( root.getArtifact().getGroupId(), root.getArtifact().getArtifactId(), root.getArtifact().getVersion());
                d.addIncludedBy(includedby);
            }
             else {
                final String includedby = buildReference(project1.getGroupId(), project1.getArtifactId(), project1.getVersion());
                d.addIncludedBy(includedby);
            }
            
            engine.addDependency(d);
        }
         catch (AnalysisException ex) {
            if (exCol == null) {
                exCol = new ExceptionCollection();
            }
            
            exCol.addException(ex);
            getLog().debug("Error reading pom " + artifactFile.getAbsoluteFile(), ex);
        }
        
        return exCol;
    }
    
}


