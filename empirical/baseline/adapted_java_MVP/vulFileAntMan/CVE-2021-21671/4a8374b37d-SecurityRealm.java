package hudson.security;
import hudson.DescriptorExtensionList;
import hudson.Extension;
import hudson.ExtensionPoint;
import hudson.Util;
import hudson.cli.CLICommand;
import hudson.model.AbstractDescribableImpl;
import hudson.model.Descriptor;
import hudson.security.FederatedLoginService.FederatedIdentity;
import hudson.security.captcha.CaptchaSupport;
import hudson.util.DescriptorList;
import hudson.util.PluginServletFilter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.Filter;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpSession;
import jenkins.model.IdStrategy;
import jenkins.model.Jenkins;
import jenkins.security.AcegiSecurityExceptionFilter;
import jenkins.security.BasicHeaderProcessor;
import jenkins.security.AuthenticationSuccessHandler;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.jenkinsci.Symbol;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.DoNotUse;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.access.ExceptionTranslationFilter;
import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
import org.springframework.security.web.authentication.RememberMeServices;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
import org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices;
import org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter;
import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
public abstract class SecurityRealm extends AbstractDescribableImpl<SecurityRealm> implements ExtensionPoint {
    private CaptchaSupport captchaSupport;
    public abstract SecurityComponents createSecurityComponents();
    public IdStrategy getUserIdStrategy() {
        return IdStrategy.CASE_INSENSITIVE;
    }
    
    public IdStrategy getGroupIdStrategy() {
        return getUserIdStrategy();
    }
    
    public CliAuthenticator createCliAuthenticator(final CLICommand command) {
        throw new UnsupportedOperationException();
    }
    
    public Descriptor<SecurityRealm> getDescriptor() {
        return super.getDescriptor();
    }
    
    public String getAuthenticationGatewayUrl() {
        return "j_spring_security_check";
    }
    
    public String getLoginUrl() {
        return "login";
    }
    
    public boolean canLogOut() {
        return true;
    }
    
    protected String getPostLogOutUrl2(StaplerRequest req, Authentication auth) {
        if (Util.isOverridden(SecurityRealm.class, getClass(), "getPostLogOutUrl", StaplerRequest.class, org.acegisecurity.Authentication.class) && !insideGetPostLogOutUrl.get()) {
            insideGetPostLogOutUrl.set(true);
            try {
                return getPostLogOutUrl(req, org.acegisecurity.Authentication.fromSpring(auth));
            }
             finally {
                insideGetPostLogOutUrl.set(false);
            }
            
        }
        
        return req.getContextPath()+"/";
    }
    
    private static final ThreadLocal<Boolean> insideGetPostLogOutUrl = ThreadLocal.withInitial(() -> false);
    protected String getPostLogOutUrl(StaplerRequest req, org.acegisecurity.Authentication auth) {
        return getPostLogOutUrl2(req, auth.toSpring());
    }
    
    public CaptchaSupport getCaptchaSupport() {
        return captchaSupport;
    }
    
    public void setCaptchaSupport(CaptchaSupport captchaSupport) {
        this.captchaSupport = captchaSupport;
    }
    
    public List<Descriptor<CaptchaSupport>> getCaptchaSupportDescriptors() {
        return CaptchaSupport.all();
    }
    
    public void doLogout(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        HttpSession session = req.getSession(false);
        if(session!=null) session.invalidate();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        SecurityContextHolder.clearContext();
        String contextPath = req.getContextPath().length() > 0 ? req.getContextPath() : "/";
        resetRememberMeCookie(req, rsp, contextPath);
        clearStaleSessionCookies(req, rsp, contextPath);
        rsp.sendRedirect2(getPostLogOutUrl2(req,auth));
    }
    
    private void resetRememberMeCookie(StaplerRequest req, StaplerResponse rsp, String contextPath) {
        Cookie cookie = new Cookie(AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, "");
        cookie.setMaxAge(0);
        cookie.setSecure(req.isSecure());
        cookie.setHttpOnly(true);
        cookie.setPath(contextPath);
        rsp.addCookie(cookie);
    }
    
    private void clearStaleSessionCookies(StaplerRequest req, StaplerResponse rsp, String contextPath) {
        final String cookieName = "JSESSIONID.";
        Cookie[] cookies = req.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().startsWith(cookieName)) {
                    LOGGER.log(Level.FINE, "Removing cookie {0} during logout", cookie.getName());
                    cookie.setMaxAge(0);
                    cookie.setValue("");
                    rsp.addCookie(cookie);
                }
                
            }
            
        }
        
    }
    
    public boolean allowsSignup() {
        Class clz = getClass();
        return clz.getClassLoader().getResource(clz.getName().replace('.','/')+"/signup.jelly")!=null;
    }
    
    public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {
        if (Util.isOverridden(SecurityRealm.class, getClass(), "loadUserByUsername", String.class)) {
            try {
                return loadUserByUsername(username).toSpring();
            }
             catch (org.acegisecurity.AcegiSecurityException x) {
                throw x.toSpring();
            }
             catch (org.springframework.dao.DataAccessException x) {
                throw x.toSpring();
            }
            
        }
         else {
            return getSecurityComponents().userDetails2.loadUserByUsername(username);
        }
        
    }
    
    public org.acegisecurity.userdetails.UserDetails loadUserByUsername(String username) throws org.acegisecurity.userdetails.UsernameNotFoundException, org.springframework.dao.DataAccessException {
        try {
            return org.acegisecurity.userdetails.UserDetails.fromSpring(loadUserByUsername2(username));
        }
         catch (AuthenticationException x) {
            throw org.acegisecurity.AuthenticationException.fromSpring(x);
        }
        
    }
    
    public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {
        if (Util.isOverridden(SecurityRealm.class, getClass(), "loadGroupByGroupname", String.class)) {
            try {
                return loadGroupByGroupname(groupname);
            }
             catch (org.acegisecurity.AcegiSecurityException x) {
                throw x.toSpring();
            }
             catch (org.springframework.dao.DataAccessException x) {
                throw x.toSpring();
            }
            
        }
         else if (Util.isOverridden(SecurityRealm.class, getClass(), "loadGroupByGroupname", String.class, boolean.class)) {
            try {
                return loadGroupByGroupname(groupname, fetchMembers);
            }
             catch (org.acegisecurity.AcegiSecurityException x) {
                throw x.toSpring();
            }
             catch (org.springframework.dao.DataAccessException x) {
                throw x.toSpring();
            }
            
        }
         else {
            throw new UserMayOrMayNotExistException2(groupname);
        }
        
    }
    
    public GroupDetails loadGroupByGroupname(String groupname) throws org.acegisecurity.userdetails.UsernameNotFoundException, org.springframework.dao.DataAccessException {
        try {
            return loadGroupByGroupname2(groupname, false);
        }
         catch (AuthenticationException x) {
            throw org.acegisecurity.AuthenticationException.fromSpring(x);
        }
        
    }
    
    public GroupDetails loadGroupByGroupname(String groupname, boolean fetchMembers) throws org.acegisecurity.userdetails.UsernameNotFoundException, org.springframework.dao.DataAccessException {
        try {
            return loadGroupByGroupname2(groupname, fetchMembers);
        }
         catch (AuthenticationException x) {
            throw org.acegisecurity.AuthenticationException.fromSpring(x);
        }
        
    }
    
    public HttpResponse commenceSignup(FederatedIdentity identity) {
        throw new UnsupportedOperationException();
    }
    
    public final void doCaptcha(StaplerRequest req, StaplerResponse rsp) throws IOException {
        if (captchaSupport != null) {
            String id = req.getSession().getId();
            rsp.setContentType("image/png");
            rsp.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            rsp.setHeader("Pragma", "no-cache");
            rsp.setHeader("Expires", "0");
            captchaSupport.generateImage(id, rsp.getOutputStream());
        }
        
    }
    
    protected final boolean validateCaptcha(String text) {
        if (captchaSupport != null) {
            String id = Stapler.getCurrentRequest().getSession().getId();
            return captchaSupport.validateCaptcha(id, text);
        }
        
        return true;
    }
    
    private transient SecurityComponents securityComponents;
    public synchronized SecurityComponents getSecurityComponents() {
        if (this.securityComponents == null) {
            this.securityComponents = this.createSecurityComponents();
        }
        
        return this.securityComponents;
    }
    
    public Filter createFilter(FilterConfig filterConfig) {
        LOGGER.entering(SecurityRealm.class.getName(), "createFilter");
        SecurityComponents sc = getSecurityComponents();
        List<Filter> filters = new ArrayList<>();{
            HttpSessionSecurityContextRepository httpSessionSecurityContextRepository = new HttpSessionSecurityContextRepository();
            httpSessionSecurityContextRepository.setAllowSessionCreation(false);
            filters.add(new HttpSessionContextIntegrationFilter2(httpSessionSecurityContextRepository));
        }
        { 
            BasicHeaderProcessor bhp = new BasicHeaderProcessor();
            BasicAuthenticationEntryPoint basicAuthenticationEntryPoint = new BasicAuthenticationEntryPoint();
            basicAuthenticationEntryPoint.setRealmName("Jenkins");
            bhp.setAuthenticationEntryPoint(basicAuthenticationEntryPoint);
            bhp.setRememberMeServices(sc.rememberMe2);
            filters.add(bhp);
        }
        {
            AuthenticationProcessingFilter2 apf = new AuthenticationProcessingFilter2(getAuthenticationGatewayUrl());
            apf.setAuthenticationManager(sc.manager2);
            apf.setRememberMeServices(sc.rememberMe2);
            final AuthenticationSuccessHandler successHandler = new AuthenticationSuccessHandler();
            successHandler.setTargetUrlParameter("from");
            apf.setAuthenticationSuccessHandler(successHandler);
            apf.setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler("/loginError"));
            filters.add(apf);
        }
        
        filters.add(new RememberMeAuthenticationFilter(sc.manager2, sc.rememberMe2));
        filters.addAll(commonFilters());
        return new ChainedServletFilter(filters);
    }
    
    protected final List<Filter> commonFilters() {
        AnonymousAuthenticationFilter apf = new AnonymousAuthenticationFilter("anonymous", "anonymous", Collections.singletonList(new SimpleGrantedAuthority("anonymous")));
        ExceptionTranslationFilter etf = new ExceptionTranslationFilter(new HudsonAuthenticationEntryPoint("/" + getLoginUrl() + "?from={0}"));
        etf.setAccessDeniedHandler(new AccessDeniedHandlerImpl());
        UnwrapSecurityExceptionFilter usef = new UnwrapSecurityExceptionFilter();
        AcegiSecurityExceptionFilter asef = new AcegiSecurityExceptionFilter();
        return Arrays.asList(apf, etf, usef, asef);
    }
    
    public static final SecurityRealm NO_AUTHENTICATION = new None();
    public static String getFrom() {
        String from = null, returnValue = null;
        final StaplerRequest request = Stapler.getCurrentRequest();
        if (request != null) {
            from = request.getParameter("from");
        }
        
        if (from == null && request != null && request.getRequestURI() != null && !request.getRequestURI().equals("/loginError") && !request.getRequestURI().equals("/login")) {
                from = request.getRequestURI();
        }
        
        from = StringUtils.defaultIfBlank(from, "/").trim();
        try {
            returnValue = java.net.URLEncoder.encode(from, "UTF-8");
        }
         catch (UnsupportedEncodingException e) {
 
}

        return StringUtils.isBlank(returnValue) ? "/" : returnValue;
    }
    
    private static class None extends SecurityRealm {
        public SecurityComponents createSecurityComponents() {
            return new SecurityComponents(new AuthenticationManager() {
                public Authentication authenticate(Authentication authentication) {
                    return authentication;
                }
                
            }, new UserDetailsService() {
                public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
                    throw new UsernameNotFoundException(username);
                }
                
            }
            
);
        }
        
        public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {
            throw new UsernameNotFoundException(groupname);
        }
        
        public Filter createFilter(FilterConfig filterConfig) {
            return new ChainedServletFilter();
        }
        
        private Object readResolve() {
            return NO_AUTHENTICATION;
        }
        
        public static class DescriptorImpl extends Descriptor<SecurityRealm> {
            public String getDisplayName() {
                return Messages.NoneSecurityRealm_DisplayName();
            }
            
            public SecurityRealm newInstance(StaplerRequest req, JSONObject formData) throws Descriptor.FormException {
                return NO_AUTHENTICATION;
            }
                
        }
        
    }
    
    public static final class SecurityComponents {
        public final AuthenticationManager manager2;
        public final org.acegisecurity.AuthenticationManager manager;
        public final UserDetailsService userDetails2;
        public final org.acegisecurity.userdetails.UserDetailsService userDetails;
        public final RememberMeServices rememberMe2;
        public final org.acegisecurity.ui.rememberme.RememberMeServices rememberMe;
        public SecurityComponents() {
            this(new AuthenticationManagerProxy());
        }
        
        public SecurityComponents(AuthenticationManager manager) {
            this(manager,new UserDetailsServiceProxy());
        }
        
        public SecurityComponents(org.acegisecurity.AuthenticationManager manager) {
            this(manager.toSpring());
        }
        
        public SecurityComponents(AuthenticationManager manager, UserDetailsService userDetails) {
            this(manager,userDetails,createRememberMeService(userDetails));
        }
        
        public SecurityComponents(org.acegisecurity.AuthenticationManager manager, org.acegisecurity.userdetails.UserDetailsService userDetails) {
            this(manager.toSpring(), userDetails.toSpring());
        }
        
        public SecurityComponents(AuthenticationManager manager, UserDetailsService userDetails, RememberMeServices rememberMe) {
            assert manager!=null && userDetails!=null && rememberMe!=null;
            this.manager2 = manager;
            this.userDetails2 = userDetails;
            this.rememberMe2 = rememberMe;
            this.manager = org.acegisecurity.AuthenticationManager.fromSpring(manager);
            this.userDetails = org.acegisecurity.userdetails.UserDetailsService.fromSpring(userDetails);
            this.rememberMe = org.acegisecurity.ui.rememberme.RememberMeServices.fromSpring(rememberMe);
        }
        
        public SecurityComponents(org.acegisecurity.AuthenticationManager manager, org.acegisecurity.userdetails.UserDetailsService userDetails, org.acegisecurity.ui.rememberme.RememberMeServices rememberMe) {
            this(manager.toSpring(), userDetails.toSpring(), rememberMe.toSpring());
        }
        
        private static RememberMeServices createRememberMeService(UserDetailsService uds) {
            TokenBasedRememberMeServices2 rms = new TokenBasedRememberMeServices2(uds);
            rms.setParameter("remember_me"); 
            return rms;
        }
        
    }
    
    public static final DescriptorList<SecurityRealm> LIST = new DescriptorList<>(SecurityRealm.class);
    public static DescriptorExtensionList<SecurityRealm,Descriptor<SecurityRealm>> all() {
        return Jenkins.get().getDescriptorList(SecurityRealm.class);
    }
    
    private static final Logger LOGGER = Logger.getLogger(SecurityRealm.class.getName());
    public static final GrantedAuthority AUTHENTICATED_AUTHORITY2 = new SimpleGrantedAuthority("authenticated");
    public static final org.acegisecurity.GrantedAuthority AUTHENTICATED_AUTHORITY = new org.acegisecurity.GrantedAuthorityImpl("authenticated");
}


