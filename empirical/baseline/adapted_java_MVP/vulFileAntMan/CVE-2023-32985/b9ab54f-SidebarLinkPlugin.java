package hudson.plugins.sidebar_link;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.lang.StringUtils;
import org.jenkinsci.Symbol;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.interceptor.RequirePOST;
import hudson.Extension;
import hudson.FilePath;
import hudson.model.Hudson;
import hudson.util.FormValidation;
import jenkins.model.GlobalConfiguration;
import jenkins.model.Jenkins;
public class SidebarLinkPlugin extends GlobalConfiguration {
    private static final Logger LOGGER = Logger.getLogger(SidebarLinkPlugin.class.getName());
    private List<LinkAction> links = new ArrayList<>();
    public SidebarLinkPlugin() {
        load();
        Jenkins.get().getActions().addAll(links);
    }
    
    public List<LinkAction> getLinks() {
        return links;
    }
    
    public void setLinks(List<LinkAction> links) {
        Jenkins.get().getActions().removeAll(this.links);
        this.links.clear();
        this.links.addAll(links);
        Jenkins.get().getActions().addAll(this.links);
        save();
    }
    
    public void doUploadLinkImage(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {
        Jenkins jenkins = Jenkins.get();
        jenkins.checkPermission(Hudson.ADMINISTER);
        FileItem file = req.getFileItem("linkimage.file");
        String error = null;
        String filename = null;
        if (file == null || file.getName().isEmpty()){
            error = Messages.NoFile();
}
        else {
            filename = "userContent/" + file.getName().replaceFirst(".*/", "").replaceAll("[^\\w.,;:()#@!=+-]", "_");
            FilePath imageFile = jenkins.getRootPath().child(filename);
            if (imageFile.exists()){
                error = Messages.DupName();
}
            else {
                imageFile.copyFrom(file.getInputStream());
                imageFile.chmod(0644);
            }
            
        }
        
        rsp.setContentType("text/html");
        rsp.getWriter().println( (error != null ? error : Messages.Uploaded("<tt>/" + filename + "</tt>")) + " <a href=\"javascript:history.back()\">" + Messages.Back() + "</a>");
    }
    
    public FormValidation doCheckLinkUrl(@QueryParameter String value) {
        return LinkProtection.verifyUrl(value);
    }
    
    public FormValidation doCheckLinkText(@QueryParameter String value) {
        if (StringUtils.isBlank(value)) {
            return FormValidation.error("The provided text is blank or empty");
        }
        
        return FormValidation.ok();
    }
    
    public FormValidation doCheckLinkIcon(@QueryParameter String value) {
        if (StringUtils.isBlank(value)) {
            return FormValidation.warning("The provided icon is blank or empty. Default will be used.");
        }
         else if (!value.equals(LinkAction.DEFAULT_ICON_NAME)) {
            FilePath imageFile = Jenkins.get().getRootPath().child(value);
            try {
                if (!imageFile.exists()) {
                    return FormValidation.error("Image does not exist:  " + imageFile);
                }
                
            }
             catch (Exception e) {
                return FormValidation.error(e, "Problem with link icon:  " + value);
            }
            
        }
        
        return FormValidation.ok();
    }
    
}


