package hudson.plugins.mercurial.traits;
import hudson.Extension;
import hudson.Util;
import hudson.plugins.mercurial.MercurialInstallation;
import hudson.plugins.mercurial.MercurialSCM;
import hudson.plugins.mercurial.MercurialSCMBuilder;
import hudson.plugins.mercurial.MercurialSCMSource;
import hudson.plugins.mercurial.MercurialSCMSourceContext;
import hudson.scm.SCM;
import hudson.util.ListBoxModel;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import jenkins.scm.api.SCMSource;
import jenkins.scm.api.trait.SCMBuilder;
import jenkins.scm.api.trait.SCMSourceContext;
import jenkins.scm.api.trait.SCMSourceTrait;
import jenkins.scm.api.trait.SCMSourceTraitDescriptor;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.DataBoundConstructor;
public class MercurialInstallationSCMSourceTrait extends SCMSourceTrait {
    private final @CheckForNull String installation;
    @DataBoundConstructor public MercurialInstallationSCMSourceTrait(@CheckForNull String installation) { this.installation = Util.fixEmpty(installation); }
    public @CheckForNull String getInstallation() {
        return installation;
    }
    
 protected void decorateContext(SCMSourceContext<?, ?> context) {
        ((MercurialSCMSourceContext<?>)context).withInstallation(installation);
    }
    
 protected void decorateBuilder(SCMBuilder<?, ?> builder) {
        ((MercurialSCMBuilder<?>) builder).withInstallation(installation);
    }
    
    @Extension public static class DescriptorImpl extends SCMSourceTraitDescriptor { @Override public @Nonnull String getDisplayName() { return Messages.MercurialInstallationSCMSourceTrait_displayName(); }
 public Class<? extends SCMBuilder> getBuilderClass() {
            return MercurialSCMBuilder.class;
        }
        
 public Class<? extends SCMSourceContext> getContextClass() {
            return MercurialSCMSourceContext.class;
        }
        
        public Class<? extends SCMSource> getSourceClass() {
            return MercurialSCMSource.class;
        }
        
 public Class<? extends SCM> getScmClass() {
            return MercurialSCM.class;
        }
        
 public boolean isApplicableToBuilder(@Nonnull Class<? extends SCMBuilder> builderClass) {
            if (super.isApplicableToBuilder(builderClass)) {
                for (MercurialInstallation i : MercurialInstallation.allInstallations()) {
                    if (i.isUseCaches()) {
                        return true;
                    }
                    
                }
                
            }
            
            return false;
        }
        
 public boolean isApplicableToContext(@Nonnull Class<? extends SCMSourceContext> contextClass) {
            if (super.isApplicableToContext(contextClass)) {
                for (MercurialInstallation i : MercurialInstallation.allInstallations()) {
                    if (i.isUseCaches()) {
                        return true;
                    }
                    
                }
                
            }
            
            return false;
        }
        
 public boolean isApplicableToSCM(@Nonnull Class<? extends SCM> scmClass) {
            if (super.isApplicableToSCM(scmClass)) {
                for (MercurialInstallation i : MercurialInstallation.allInstallations()) {
                    if (i.isUseCaches()) {
                        return true;
                    }
                    
                }
                
            }
            
            return false;
        }
        
        public ListBoxModel doFillInstallationItems() {
            ListBoxModel result = new ListBoxModel();
            for (MercurialInstallation i: MercurialInstallation.allInstallations()) {
                if (i.isUseCaches()) {
                    result.add(i.getName());
                }
                
            }
            
            return result;
        }
        
    }
    
}


