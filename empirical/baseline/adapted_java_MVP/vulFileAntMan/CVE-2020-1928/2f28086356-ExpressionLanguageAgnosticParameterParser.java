package org.apache.nifi.parameter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class ExpressionLanguageAgnosticParameterParser extends AbstractParameterParser {
    private static final Logger logger = LoggerFactory.getLogger(ExpressionLanguageAgnosticParameterParser.class);
    public ParameterTokenList parseTokens(final String input) {
        if (input == null || input.isEmpty()) {
            return new StandardParameterTokenList(input, Collections.emptyList());
        }
        
        final List<ParameterToken> references = new ArrayList<>();
        int sequentialStartTags = 0;
        for (int i=0; i < input.length(); i++) {
            final char c = input.charAt(i);
            switch (c) {
                case START_TAG:
                    sequentialStartTags++;
                    break;
                case OPEN_BRACE:
                    if (sequentialStartTags > 0) {
                        final ParameterToken token = parseParameterToken(input, i, sequentialStartTags, references);
                        if (token != null) {
                            i = token.getEndOffset();
                        }
                        
                    }
                    
                    break;
                default: break;
            }
            
            if (c != START_TAG) {
                sequentialStartTags = 0;
            }
            
        }
        
        logger.debug("For input {} found {} Parameter references: {}", input, references.size(), references);
        return new StandardParameterTokenList(input, references);
    }
    
}


