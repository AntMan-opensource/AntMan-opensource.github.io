package org.apache.nifi.parameter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class ExpressionLanguageAwareParameterParser extends AbstractParameterParser implements ParameterParser {
    private static final Logger logger = LoggerFactory.getLogger(ExpressionLanguageAwareParameterParser.class);
    private static final char DOLLAR_SIGN = '$';
    public ParameterTokenList parseTokens(final String input) {
        if (input == null || input.isEmpty()) {
            return new StandardParameterTokenList(input, Collections.emptyList());
        }
        
        final List<ParameterToken> tokens = new ArrayList<>();
        int sequentialStartTags = 0;
        boolean oddDollarCount = false;
        char lastChar = 0;
        int embeddedElCount = 0;
        int expressionStart = -1;
        for (int i=0; i < input.length(); i++) {
            final char c = input.charAt(i);
            switch (c) {
                case START_TAG:
                    sequentialStartTags++;
                    break;
                case OPEN_BRACE:
                    if (oddDollarCount && lastChar == '$') {
                        if (embeddedElCount == 0) {
                            expressionStart = i - 1;
                        }
                        
                    }
                    
                    if (expressionStart > -1) {
                        embeddedElCount++;
                        continue;
                    }
                    
                    if (sequentialStartTags > 0) {
                        final ParameterToken token = parseParameterToken(input, i, sequentialStartTags, tokens);
                        if (token != null) {
                            i = token.getEndOffset();
                        }
                        
                    }
                    
                    break;
                case CLOSE_BRACE:
                    if (embeddedElCount <= 0) {
                        continue;
                    }
                    
                    if (--embeddedElCount == 0) {
                        expressionStart = -1;
                    }
                    
                    break;
                case DOLLAR_SIGN:
                    oddDollarCount = !oddDollarCount;
                    break;
                default: break;
            }
            
            if (c != START_TAG) {
                sequentialStartTags = 0;
            }
            
            lastChar = c;
        }
        
        logger.debug("For input {} found {} Parameter references: {}", input, tokens.size(), tokens);
        return new StandardParameterTokenList(input, tokens);
    }
    
}


