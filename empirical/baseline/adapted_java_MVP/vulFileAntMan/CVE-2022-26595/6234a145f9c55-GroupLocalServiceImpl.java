package com.liferay.portal.service.impl;
import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactoryUtil;
import com.liferay.exportimport.kernel.configuration.constants.ExportImportConfigurationConstants;
import com.liferay.exportimport.kernel.exception.RemoteExportException;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.PortletDataContextFactoryUtil;
import com.liferay.exportimport.kernel.lar.PortletDataHandler;
import com.liferay.exportimport.kernel.lar.PortletDataHandlerKeys;
import com.liferay.exportimport.kernel.model.ExportImportConfiguration;
import com.liferay.exportimport.kernel.staging.StagingURLHelperUtil;
import com.liferay.exportimport.kernel.staging.StagingUtil;
import com.liferay.exportimport.kernel.staging.constants.StagingConstants;
import com.liferay.petra.string.CharPool;
import com.liferay.petra.string.StringBundler;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.backgroundtask.BackgroundTask;
import com.liferay.portal.kernel.backgroundtask.BackgroundTaskManagerUtil;
import com.liferay.portal.kernel.backgroundtask.constants.BackgroundTaskConstants;
import com.liferay.portal.kernel.cache.thread.local.ThreadLocalCachable;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.exception.DataLimitExceededException;
import com.liferay.portal.kernel.exception.DuplicateGroupException;
import com.liferay.portal.kernel.exception.GroupFriendlyURLException;
import com.liferay.portal.kernel.exception.GroupInheritContentException;
import com.liferay.portal.kernel.exception.GroupKeyException;
import com.liferay.portal.kernel.exception.GroupParentException;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.NoSuchCompanyException;
import com.liferay.portal.kernel.exception.NoSuchGroupException;
import com.liferay.portal.kernel.exception.NoSuchLayoutSetException;
import com.liferay.portal.kernel.exception.PendingBackgroundTaskException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.RemoteOptionsException;
import com.liferay.portal.kernel.exception.RequiredGroupException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.messaging.DestinationNames;
import com.liferay.portal.kernel.model.Account;
import com.liferay.portal.kernel.model.ClassName;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.model.GroupConstants;
import com.liferay.portal.kernel.model.Layout;
import com.liferay.portal.kernel.model.LayoutConstants;
import com.liferay.portal.kernel.model.LayoutPrototype;
import com.liferay.portal.kernel.model.LayoutSet;
import com.liferay.portal.kernel.model.LayoutSetPrototype;
import com.liferay.portal.kernel.model.ModelHintsUtil;
import com.liferay.portal.kernel.model.Organization;
import com.liferay.portal.kernel.model.Portlet;
import com.liferay.portal.kernel.model.ResourceAction;
import com.liferay.portal.kernel.model.ResourceConstants;
import com.liferay.portal.kernel.model.ResourcePermission;
import com.liferay.portal.kernel.model.Role;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.UserGroup;
import com.liferay.portal.kernel.model.UserGroupRole;
import com.liferay.portal.kernel.model.UserPersonalSite;
import com.liferay.portal.kernel.model.WorkflowDefinitionLink;
import com.liferay.portal.kernel.model.role.RoleConstants;
import com.liferay.portal.kernel.scheduler.SchedulerEngineHelperUtil;
import com.liferay.portal.kernel.scheduler.StorageType;
import com.liferay.portal.kernel.search.reindexer.ReindexerBridge;
import com.liferay.portal.kernel.security.auth.CompanyThreadLocal;
import com.liferay.portal.kernel.security.auth.HttpPrincipal;
import com.liferay.portal.kernel.security.auth.PrincipalException;
import com.liferay.portal.kernel.security.auth.RemoteAuthException;
import com.liferay.portal.kernel.security.permission.ActionKeys;
import com.liferay.portal.kernel.security.permission.PermissionChecker;
import com.liferay.portal.kernel.security.permission.PermissionThreadLocal;
import com.liferay.portal.kernel.security.permission.ResourceActionsUtil;
import com.liferay.portal.kernel.security.permission.RolePermissions;
import com.liferay.portal.kernel.security.permission.UserBag;
import com.liferay.portal.kernel.service.GroupService;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.http.TunnelUtil;
import com.liferay.portal.kernel.service.permission.GroupPermissionUtil;
import com.liferay.portal.kernel.transaction.Propagation;
import com.liferay.portal.kernel.transaction.TransactionCommitCallbackUtil;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.tree.TreeModelTasksAdapter;
import com.liferay.portal.kernel.tree.TreePathUtil;
import com.liferay.portal.kernel.util.ArrayUtil;
import com.liferay.portal.kernel.util.FileUtil;
import com.liferay.portal.kernel.util.FriendlyURLNormalizerUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.GroupThreadLocal;
import com.liferay.portal.kernel.util.HashMapBuilder;
import com.liferay.portal.kernel.util.LinkedHashMapBuilder;
import com.liferay.portal.kernel.util.ListUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.MapUtil;
import com.liferay.portal.kernel.util.MethodHandler;
import com.liferay.portal.kernel.util.MethodKey;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.PortalClassLoaderUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.PortletKeys;
import com.liferay.portal.kernel.util.PropsKeys;
import com.liferay.portal.kernel.util.ServiceProxyFactory;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.UnicodeProperties;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.comparator.GroupIdComparator;
import com.liferay.portal.kernel.util.comparator.GroupNameComparator;
import com.liferay.portal.kernel.workflow.WorkflowHandler;
import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistryUtil;
import com.liferay.portal.model.impl.LayoutImpl;
import com.liferay.portal.security.permission.PermissionCacheUtil;
import com.liferay.portal.service.base.GroupLocalServiceBaseImpl;
import com.liferay.portal.service.http.ClassNameServiceHttp;
import com.liferay.portal.service.http.GroupServiceHttp;
import com.liferay.portal.theme.ThemeLoader;
import com.liferay.portal.theme.ThemeLoaderFactory;
import com.liferay.portal.util.PropsValues;
import com.liferay.util.dao.orm.CustomSQLUtil;
import java.io.File;
import java.io.Serializable;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
public class GroupLocalServiceImpl extends GroupLocalServiceBaseImpl {
	public static final String ORGANIZATION_NAME_SUFFIX = " LFR_ORGANIZATION";
	public static final String ORGANIZATION_STAGING_SUFFIX = " (Staging)";
	 public GroupLocalServiceImpl() {
		initImportLARFile();
	}
	
	public Group addGroup( long userId, long parentGroupId, String className, long classPK, long liveGroupId, Map<Locale, String> nameMap, Map<Locale, String> descriptionMap, int type, boolean manualMembership, int membershipRestriction, String friendlyURL, boolean site, boolean inheritContent, boolean active, ServiceContext serviceContext) throws PortalException {
		 User user = userPersistence.findByPrimaryKey(userId);
		if (site && (PropsValues.DATA_LIMIT_SITE_MAX_COUNT > 0) && (groupPersistence.countByC_S(user.getCompanyId(), site) >= PropsValues.DATA_LIMIT_SITE_MAX_COUNT)) {
			throw new DataLimitExceededException( "Unable to exceed maximum number of allowed sites");
		}
		
		className = GetterUtil.getString(className);
		long classNameId = classNameLocalService.getClassNameId(className);
		String groupKey = StringPool.BLANK;
		String friendlyName = StringPool.BLANK;
		if (nameMap != null) {
			nameMap = _normalizeNameMap(nameMap);
			groupKey = nameMap.get(LocaleUtil.getDefault());
			friendlyName = nameMap.get(LocaleUtil.getDefault());
			if (Validator.isNull(groupKey)) {
				Locale userLocale = user.getLocale();
				if (userLocale != null) {
					groupKey = nameMap.get(userLocale);
					friendlyName = nameMap.get(userLocale);
				}
				
			}
			
			if (Validator.isNull(groupKey)) {
				Locale mostRelevantLocale = LocaleUtil.getMostRelevantLocale();
				if (mostRelevantLocale != null) {
					groupKey = nameMap.get(mostRelevantLocale);
					friendlyName = nameMap.get(mostRelevantLocale);
				}
				
			}
			
			if (Validator.isNull(groupKey)) {
				groupKey = nameMap.get(LocaleUtil.US);
				friendlyName = nameMap.get(LocaleUtil.US);
			}
			
		}
		
		long groupId = 0;
		while (true) {
			groupId = counterLocalService.increment();
			User screenNameUser = userPersistence.fetchByC_SN( user.getCompanyId(), String.valueOf(groupId));
			if (screenNameUser == null) {
				break;
			}
			
		}
		
		boolean staging = isStaging(serviceContext);
		long groupClassNameId = classNameLocalService.getClassNameId( Group.class);
		if ((classNameId <= 0) || className.equals(Group.class.getName()) || (className.equals(Company.class.getName()) && staging)) {
			className = Group.class.getName();
			classNameId = groupClassNameId;
			classPK = groupId;
		}
		
		else if (className.equals(Organization.class.getName())) {
			groupKey = getOrgGroupName(groupKey);
		}
		
		else if ((type != GroupConstants.TYPE_DEPOT) && !GroupConstants.USER_PERSONAL_SITE.equals(groupKey)) {
			groupKey = String.valueOf(classPK);
		}
		
		if (className.equals(Organization.class.getName()) && staging) {
			classPK = liveGroupId;
		}
		
		if (className.equals(Layout.class.getName())) {
			Layout layout = layoutLocalService.getLayout(classPK);
			parentGroupId = layout.getGroupId();
		}
		
		friendlyURL = getFriendlyURL( user.getCompanyId(), groupId, classNameId, classPK, friendlyName, friendlyURL);
		if (staging) {
			groupKey = groupKey.concat("-staging");
			for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
				String name = entry.getValue();
				if (Validator.isNull(name)) {
					continue;
				}
				
				nameMap.put( entry.getKey(), name.concat(ORGANIZATION_STAGING_SUFFIX));
			}
			
			friendlyURL = getFriendlyURL(friendlyURL.concat("-staging"));
			friendlyURL = getValidatedFriendlyURL( user.getCompanyId(), groupId, classNameId, classPK, friendlyURL);
		}
		
		if (parentGroupId == GroupConstants.DEFAULT_PARENT_GROUP_ID) {
			membershipRestriction = GroupConstants.DEFAULT_MEMBERSHIP_RESTRICTION;
		}
		
		if (className.equals(Group.class.getName())) {
			if (!site && (liveGroupId == 0) && !(StringUtil.startsWith(groupKey, GroupConstants.APP) || groupKey.equals(GroupConstants.CONTROL_PANEL) || groupKey.equals(GroupConstants.FORMS))) {
				throw new IllegalArgumentException();
			}
			
		}
		
		else if (!className.equals(Company.class.getName()) && !className.equals(Organization.class.getName()) && className.startsWith("com.liferay.portal.kernel.model.")) {
			if (site) {
				throw new IllegalArgumentException();
			}
			
		}
		
		if ((classNameId <= 0) || (type == GroupConstants.TYPE_DEPOT) || className.equals(Group.class.getName())) {
			validateGroupKey( groupId, user.getCompanyId(), groupKey, type, site);
		}
		
		validateInheritContent(parentGroupId, inheritContent);
		friendlyURL = getValidatedFriendlyURL( user.getCompanyId(), groupId, classNameId, classPK, friendlyURL);
		validateParentGroup(groupId, parentGroupId);
		Group group = groupPersistence.create(groupId);
		if (serviceContext != null) {
			group.setUuid(serviceContext.getUuid());
		}
		
		group.setCompanyId(user.getCompanyId());
		group.setCreatorUserId(userId);
		group.setClassNameId(classNameId);
		group.setClassPK(classPK);
		group.setParentGroupId(parentGroupId);
		group.setLiveGroupId(liveGroupId);
		group.setTreePath(group.buildTreePath());
		group.setGroupKey(groupKey);
		group.setNameMap(nameMap);
		group.setDescriptionMap(descriptionMap);
		group.setType(type);
		group.setManualMembership(manualMembership);
		group.setMembershipRestriction(membershipRestriction);
		group.setFriendlyURL(friendlyURL);
		group.setSite(site);
		group.setInheritContent(inheritContent);
		group.setActive(active);
		if ((serviceContext != null) && (classNameId == groupClassNameId) && !user.isDefaultUser()) {
			group.setExpandoBridgeAttributes(serviceContext);
		}
		
		group = groupPersistence.update(group);
		 layoutSetLocalService.addLayoutSet(groupId, true);
		layoutSetLocalService.addLayoutSet(groupId, false);
		 resourceLocalService.addResources( group.getCompanyId(), 0, 0, Group.class.getName(), group.getGroupId(), false, false, false);
		if ((classNameId == groupClassNameId) && !user.isDefaultUser()) {
			 Role role = roleLocalService.getRole( group.getCompanyId(), RoleConstants.SITE_OWNER);
			userGroupRoleLocalService.addUserGroupRoles( userId, groupId, new long[] {role.getRoleId()});
			 userLocalService.addGroupUsers( group.getGroupId(), new long[] {userId});
			 if (serviceContext != null) {
				updateAsset( userId, group, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames());
			}
			
		}
		
		addPortletDefaultData(group);
		return group;
	}
	
	public Group addGroup( long userId, long parentGroupId, String className, long classPK, long liveGroupId, Map<Locale, String> nameMap, Map<Locale, String> descriptionMap, int type, boolean manualMembership, int membershipRestriction, String friendlyURL, boolean site, boolean active, ServiceContext serviceContext) throws PortalException {
		return addGroup( userId, parentGroupId, className, classPK, liveGroupId, nameMap, descriptionMap, type, manualMembership, membershipRestriction, friendlyURL, site, false, active, serviceContext);
	}
	
	public void addOrganizationGroup(long organizationId, Group group) {
		super.addOrganizationGroup(organizationId, group);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addOrganizationGroup(long organizationId, long groupId) {
		super.addOrganizationGroup(organizationId, groupId);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addOrganizationGroups(long organizationId, List<Group> groups) {
		super.addOrganizationGroups(organizationId, groups);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addOrganizationGroups(long organizationId, long[] groupIds) {
		super.addOrganizationGroups(organizationId, groupIds);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addUserGroupGroup(long userGroupId, Group group) {
		super.addUserGroupGroup(userGroupId, group);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addUserGroupGroup(long userGroupId, long groupId) {
		super.addUserGroupGroup(userGroupId, groupId);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addUserGroupGroups(long userGroupId, List<Group> groups) {
		super.addUserGroupGroups(userGroupId, groups);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void addUserGroupGroups(long userGroupId, long[] groupIds) {
		super.addUserGroupGroups(userGroupId, groupIds);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public void checkCompanyGroup(long companyId) throws PortalException {
		int count = groupPersistence.countByC_C_C( companyId, classNameLocalService.getClassNameId(Company.class), companyId);
		if (count == 0) {
			groupLocalService.addGroup( userLocalService.getDefaultUserId(companyId), GroupConstants.DEFAULT_PARENT_GROUP_ID, Company.class.getName(), companyId, GroupConstants.DEFAULT_LIVE_GROUP_ID, getLocalizationMap(GroupConstants.GLOBAL), null, 0, true, GroupConstants.DEFAULT_MEMBERSHIP_RESTRICTION, GroupConstants.GLOBAL_FRIENDLY_URL, true, true, null);
		}
		
	}
	
	public Group checkScopeGroup(Layout layout, long userId) throws PortalException {
		if (layout.hasScopeGroup()) {
			return layout.getScopeGroup();
		}
		
		return groupLocalService.addGroup( userId, GroupConstants.DEFAULT_PARENT_GROUP_ID, Layout.class.getName(), layout.getPlid(), GroupConstants.DEFAULT_LIVE_GROUP_ID, HashMapBuilder.put( LocaleUtil.getDefault(), String.valueOf(layout.getPlid()) ).build(), null, 0, true, GroupConstants.DEFAULT_MEMBERSHIP_RESTRICTION, null, false, true, null);
	}
	
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public void checkSystemGroups(long companyId) throws PortalException {
		String companyIdHexString = StringUtil.toHexString(companyId);
		for (Group group : groupFinder.findBySystem(companyId)) {
			_systemGroupsMap.put( companyIdHexString.concat(group.getGroupKey()), group);
		}
		
		long defaultUserId = userLocalService.getDefaultUserId(companyId);
		String[] systemGroups = PortalUtil.getSystemGroups();
		for (String groupKey : systemGroups) {
			String groupCacheKey = companyIdHexString.concat(groupKey);
			Group group = _systemGroupsMap.get(groupCacheKey);
			if (group == null) {
				group = groupPersistence.fetchByC_GK(companyId, groupKey);
			}
			
			if (group == null) {
				String className = null;
				long classPK = 0;
				int type = GroupConstants.TYPE_SITE_OPEN;
				String friendlyURL = null;
				boolean site = true;
				if (groupKey.equals(GroupConstants.CONTROL_PANEL)) {
					type = GroupConstants.TYPE_SITE_PRIVATE;
					friendlyURL = GroupConstants.CONTROL_PANEL_FRIENDLY_URL;
					site = false;
				}
				
				else if (groupKey.equals(GroupConstants.FORMS)) {
					type = GroupConstants.TYPE_SITE_PRIVATE;
					friendlyURL = GroupConstants.FORMS_FRIENDLY_URL;
					site = false;
				}
				
				else if (groupKey.equals(GroupConstants.GUEST)) {
					friendlyURL = "/guest";
				}
				
				else if (groupKey.equals(GroupConstants.USER_PERSONAL_SITE)) {
					className = UserPersonalSite.class.getName();
					classPK = defaultUserId;
					type = GroupConstants.TYPE_SITE_PRIVATE;
					friendlyURL = GroupConstants.USER_PERSONAL_SITE_FRIENDLY_URL;
					site = false;
				}
				
				group = groupLocalService.addGroup( defaultUserId, GroupConstants.DEFAULT_PARENT_GROUP_ID, className, classPK, GroupConstants.DEFAULT_LIVE_GROUP_ID, getLocalizationMap(groupKey), null, type, true, GroupConstants.DEFAULT_MEMBERSHIP_RESTRICTION, friendlyURL, site, true, null);
				if (groupKey.equals(GroupConstants.USER_PERSONAL_SITE)) {
					initUserPersonalSitePermissions(group);
				}
				
			}
			
			if (group.isControlPanel()) {
				LayoutSet layoutSet = layoutSetLocalService.getLayoutSet( group.getGroupId(), true);
				if (layoutSet.getPageCount() == 0) {
					addControlPanelLayouts(group);
				}
				
			}
			
			if (group.isGuest()) {
				LayoutSet layoutSet = layoutSetLocalService.getLayoutSet( group.getGroupId(), false);
				if (layoutSet.getPageCount() == 0) {
					addDefaultGuestPublicLayouts(group);
				}
				
			}
			
			_systemGroupsMap.put(groupCacheKey, group);
		}
		
	}
	
	public void clearOrganizationGroups(long organizationId) {
		super.clearOrganizationGroups(organizationId);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void clearUserGroupGroups(long userGroupId) {
		super.clearUserGroupGroups(userGroupId);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public Group deleteGroup(Group group) throws PortalException {
		boolean deleteInProcess = GroupThreadLocal.isDeleteInProcess();
		try {
			GroupThreadLocal.setDeleteInProcess(true);
			if (((group.isCompany() && !group.isCompanyStagingGroup()) || PortalUtil.isSystemGroup(group.getGroupKey())) && !CompanyThreadLocal.isDeleteInProcess()) {
				throw new RequiredGroupException.MustNotDeleteSystemGroup( group.getGroupId());
			}
			
			int count = groupPersistence.countByC_P_S( group.getCompanyId(), group.getGroupId(), true);
			if (count > 0) {
				throw new RequiredGroupException.MustNotDeleteGroupThatHasChild( group.getGroupId());
			}
			
			List<BackgroundTask> backgroundTasks = BackgroundTaskManagerUtil.getBackgroundTasks( group.getGroupId(), BackgroundTaskConstants.STATUS_IN_PROGRESS);
			if (ListUtil.isNotNull(backgroundTasks)) {
				throw new PendingBackgroundTaskException( "Unable to delete group with pending background tasks");
			}
			
			 BackgroundTaskManagerUtil.deleteGroupBackgroundTasks( group.getGroupId());
			 layoutSetBranchLocalService.deleteLayoutSetBranches( group.getGroupId(), true, true);
			layoutSetBranchLocalService.deleteLayoutSetBranches( group.getGroupId(), false, true);
			 ServiceContext serviceContext = new ServiceContext();
			try {
				layoutSetLocalService.deleteLayoutSet( group.getGroupId(), true, serviceContext);
			}
			
			catch (NoSuchLayoutSetException noSuchLayoutSetException) {
				 if (_log.isDebugEnabled()) {
					_log.debug( noSuchLayoutSetException, noSuchLayoutSetException);
				}
				
			}
			
			try {
				layoutSetLocalService.deleteLayoutSet( group.getGroupId(), false, serviceContext);
			}
			
			catch (NoSuchLayoutSetException noSuchLayoutSetException) {
				 if (_log.isDebugEnabled()) {
					_log.debug( noSuchLayoutSetException, noSuchLayoutSetException);
				}
				
			}
			
			 membershipRequestLocalService.deleteMembershipRequests( group.getGroupId());
			 portletPreferencesLocalService.deletePortletPreferences( group.getGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, PortletKeys.PREFS_PLID_SHARED);
			portletPreferencesLocalService.deletePortletPreferences( group.getGroupId(), PortletKeys.PREFS_OWNER_TYPE_LAYOUT, PortletKeys.PREFS_PLID_SHARED);
			 dlAppLocalService.deleteAllRepositories(group.getGroupId());
			 teamLocalService.deleteTeams(group.getGroupId());
			 exportImportConfigurationLocalService. deleteExportImportConfigurations(group.getGroupId());
			unscheduleStaging(group);
			if (group.hasStagingGroup()) {
				try {
					stagingLocalService.disableStaging(group, serviceContext);
				}
				
				catch (Exception exception) {
					_log.error( "Unable to disable staging for group " + group.getGroupId(), exception);
				}
				
			}
			
			systemEventLocalService.deleteSystemEvents(group.getGroupId());
			 ThemeLoader themeLoader = ThemeLoaderFactory.getDefaultThemeLoader();
			if (themeLoader != null) {
				String themePath = themeLoader.getFileStorage() + StringPool.SLASH + group.getGroupId();
				FileUtil.deltree(themePath + "-private");
				FileUtil.deltree(themePath + "-public");
			}
			
			 deletePortletData(group);
			 if (group.isRegularSite()) {
				assetEntryLocalService.deleteEntry( Group.class.getName(), group.getGroupId());
			}
			
			assetEntryLocalService.deleteGroupEntries(group.getGroupId());
			assetTagLocalService.deleteGroupTags(group.getGroupId());
			assetVocabularyLocalService.deleteVocabularies(group.getGroupId());
			 expandoRowLocalService.deleteRows( group.getCompanyId(), classNameLocalService.getClassNameId(Group.class.getName()), group.getGroupId());
			 socialActivityLocalService.deleteActivities(group.getGroupId());
			socialActivitySettingLocalService.deleteActivitySettings( group.getGroupId());
			socialRequestLocalService.deleteRequests( classNameLocalService.getClassNameId(Group.class), group.getGroupId());
			 List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_S_P( group.getCompanyId(), ResourceConstants.SCOPE_GROUP, String.valueOf(group.getGroupId()));
			for (ResourcePermission resourcePermission : resourcePermissions) {
				resourcePermissionLocalService.deleteResourcePermission( resourcePermission);
			}
			
			 List<WorkflowHandler<?>> scopeableWorkflowHandlers = WorkflowHandlerRegistryUtil.getScopeableWorkflowHandlers();
			for (WorkflowHandler<?> scopeableWorkflowHandler : scopeableWorkflowHandlers) {
				if (!scopeableWorkflowHandler.isVisible()) {
					continue;
				}
				
				WorkflowDefinitionLink workflowDefinitionLink = workflowDefinitionLinkLocalService. fetchWorkflowDefinitionLink( group.getCompanyId(), group.getGroupId(), scopeableWorkflowHandler.getClassName(), 0, 0, true);
				if ((workflowDefinitionLink == null) || (workflowDefinitionLink.getGroupId() == group.getLiveGroupId())) {
					continue;
				}
				
				workflowDefinitionLinkLocalService.deleteWorkflowDefinitionLink( workflowDefinitionLink);
			}
			
			 if (!group.isStagingGroup() && group.isOrganization() && group.isSite()) {
				group.setSite(false);
				group = groupPersistence.update(group);
				 userGroupRoleLocalService.deleteUserGroupRoles( group.getGroupId(), RoleConstants.TYPE_SITE);
				 userGroupGroupRoleLocalService.deleteUserGroupGroupRoles( group.getGroupId(), RoleConstants.TYPE_SITE);
			}
			
			else {
				 userGroupRoleLocalService.deleteUserGroupRolesByGroupId( group.getGroupId());
				 userGroupGroupRoleLocalService. deleteUserGroupGroupRolesByGroupId(group.getGroupId());
				 try {
					resourceLocalService.deleteResource( group.getCompanyId(), Group.class.getName(), ResourceConstants.SCOPE_INDIVIDUAL, group.getGroupId());
				}
				
				catch (Exception exception) {
					if (_log.isWarnEnabled()) {
						_log.warn( "No resources found for group " + group.getGroupId(), exception);
					}
					
				}
				
				long companyId = group.getCompanyId();
				long[] userIds = getUserPrimaryKeys(group.getGroupId());
				if (ArrayUtil.isNotEmpty(userIds)) {
					TransactionCommitCallbackUtil.registerCallback( () -> {
							reindex(companyId, userIds);
							return null;
						}
						
);
				}
				
				groupPersistence.remove(group);
			}
			
			return group;
		}
		
		finally {
			GroupThreadLocal.setDeleteInProcess(deleteInProcess);
		}
		
	}
	
	public Group deleteGroup(long groupId) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		return deleteGroup(group);
	}
	
	public void deleteOrganizationGroup(long organizationId, Group group) {
		super.deleteOrganizationGroup(organizationId, group);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteOrganizationGroup(long organizationId, long groupId) {
		super.deleteOrganizationGroup(organizationId, groupId);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteOrganizationGroups( long organizationId, List<Group> groups) {
		super.deleteOrganizationGroups(organizationId, groups);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteOrganizationGroups(long organizationId, long[] groupIds) {
		super.deleteOrganizationGroups(organizationId, groupIds);
		try {
			reindexUsersInOrganization(organizationId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteUserGroupGroup(long userGroupId, Group group) {
		super.deleteUserGroupGroup(userGroupId, group);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteUserGroupGroup(long userGroupId, long groupId) {
		super.deleteUserGroupGroup(userGroupId, groupId);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteUserGroupGroups(long userGroupId, List<Group> groups) {
		super.deleteUserGroupGroups(userGroupId, groups);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public void deleteUserGroupGroups(long userGroupId, long[] groupIds) {
		super.deleteUserGroupGroups(userGroupId, groupIds);
		try {
			reindexUsersInUserGroup(userGroupId);
		}
		
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
		
	}
	
	public synchronized void disableStaging(long groupId) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		int stagingGroupCount = group.getRemoteStagingGroupCount();
		if (stagingGroupCount == 0) {
			return;
		}
		
		stagingGroupCount = stagingGroupCount - 1;
		group.setRemoteStagingGroupCount(stagingGroupCount);
		if (stagingGroupCount == 0) {
			UnicodeProperties typeSettingsUnicodeProperties = group.getTypeSettingsProperties();
			List<String> keys = new ArrayList<>();
			for (String key : typeSettingsUnicodeProperties.keySet()) {
				if (key.startsWith(StagingConstants.STAGED_PORTLET)) {
					keys.add(key);
				}
				
			}
			
			for (String key : keys) {
				typeSettingsUnicodeProperties.remove(key);
			}
			
			group.setTypeSettingsProperties(typeSettingsUnicodeProperties);
		}
		
		groupPersistence.update(group);
	}
	
	public synchronized void enableStaging(long groupId) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		int stagingGroupCount = group.getRemoteStagingGroupCount() + 1;
		group.setRemoteStagingGroupCount(stagingGroupCount);
		groupPersistence.update(group);
	}
	
	public Group fetchCompanyGroup(long companyId) {
		return groupPersistence.fetchByC_C_C( companyId, classNameLocalService.getClassNameId(Company.class), companyId);
	}
	
	public Group fetchFriendlyURLGroup(long companyId, String friendlyURL) {
		if (Validator.isNull(friendlyURL)) {
			return null;
		}
		
		friendlyURL = getFriendlyURL(friendlyURL);
		return groupPersistence.fetchByC_F(companyId, friendlyURL);
	}
	
	public Group fetchGroup(long groupId) {
		return groupPersistence.fetchByPrimaryKey(groupId);
	}
	
	public Group fetchGroup(long companyId, long classNameId, long classPK) {
		return groupPersistence.fetchByC_C_C(companyId, classNameId, classPK);
	}
	
	@Transactional(enabled = false)
	public Group fetchGroup(long companyId, String groupKey) {
		String companyIdHexString = StringUtil.toHexString(companyId);
		Group group = _systemGroupsMap.get(companyIdHexString.concat(groupKey));
		if (group != null) {
			return group;
		}
		
		return groupLocalService.loadFetchGroup(companyId, groupKey);
	}
	
	public Group fetchStagingGroup(long liveGroupId) {
		return groupPersistence.fetchByLiveGroupId(liveGroupId);
	}
	
	public Group fetchUserGroup(long companyId, long userId) {
		return groupPersistence.fetchByC_C_C( companyId, classNameLocalService.getClassNameId(User.class), userId);
	}
	
	public Group fetchUserPersonalSiteGroup(long companyId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId( UserPersonalSite.class);
		return groupPersistence.fetchByC_C_C( companyId, classNameId, userLocalService.getDefaultUserId(companyId));
	}
	
	public List<Long> getActiveGroupIds(long userId) {
		return groupFinder.findByActiveGroupIds(userId);
	}
	
	public List<Group> getActiveGroups(long companyId, boolean active) {
		return groupPersistence.findByC_A(companyId, active);
	}
	
	public List<Group> getActiveGroups( long companyId, boolean site, boolean active, int start, int end, OrderByComparator<Group> orderByComparator) {
		return groupPersistence.findByC_S_A( companyId, site, active, start, end, orderByComparator);
	}
	
	public List<Group> getActiveGroups( long companyId, boolean active, int start, int end, OrderByComparator<Group> orderByComparator) {
		return groupPersistence.findByC_A( companyId, active, start, end, orderByComparator);
	}
	
	public int getActiveGroupsCount(long companyId, boolean active) {
		return groupPersistence.countByC_A(companyId, active);
	}
	
	public int getActiveGroupsCount( long companyId, boolean active, boolean site) {
		return groupPersistence.countByC_S_A(companyId, active, site);
	}
	
	public Group getCompanyGroup(long companyId) throws PortalException {
		return groupPersistence.findByC_C_C( companyId, classNameLocalService.getClassNameId(Company.class), companyId);
	}
	
	public List<Group> getCompanyGroups(long companyId, int start, int end) {
		return groupPersistence.findByCompanyId(companyId, start, end);
	}
	
	public int getCompanyGroupsCount(long companyId) {
		return groupPersistence.countByCompanyId(companyId);
	}
	
	public Group getFriendlyURLGroup(long companyId, String friendlyURL) throws PortalException {
		if (Validator.isNull(friendlyURL)) {
			StringBundler sb = new StringBundler(5);
			sb.append("{companyId=");
			sb.append(companyId);
			sb.append(", friendlyURL=");
			sb.append(friendlyURL);
			sb.append("}");
			throw new NoSuchGroupException(sb.toString());
		}
		
		friendlyURL = getFriendlyURL(friendlyURL);
		return groupPersistence.findByC_F(companyId, friendlyURL);
	}
	
	public Group getGroup(long groupId) throws PortalException {
		return groupPersistence.findByPrimaryKey(groupId);
	}
	
	@Transactional(enabled = false)
	public Group getGroup(long companyId, String groupKey) throws PortalException {
		String companyIdHexString = StringUtil.toHexString(companyId);
		Group group = _systemGroupsMap.get(companyIdHexString.concat(groupKey));
		if (group != null) {
			return group;
		}
		
		return groupLocalService.loadGetGroup(companyId, groupKey);
	}
	
	public List<Long> getGroupIds(long companyId, boolean active) {
		return groupFinder.findByC_A(companyId, active);
	}
	
	public List<Group> getGroups( long companyId, long parentGroupId, boolean site) {
		if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
			return groupPersistence.findByC_S(companyId, site);
		}
		
		return groupPersistence.findByC_P_S(companyId, parentGroupId, site);
	}
	
	public List<Group> getGroups( long companyId, long parentGroupId, boolean site, boolean inheritContent) {
		return groupPersistence.findByC_P_S_I( companyId, parentGroupId, site, inheritContent);
	}
	
	public List<Group> getGroups( long companyId, long parentGroupId, boolean site, int start, int end) {
		if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
			return groupPersistence.findByC_S(companyId, site, start, end);
		}
		
		return groupPersistence.findByC_P_S( companyId, parentGroupId, site, start, end);
	}
	
	public List<Group> getGroups( long companyId, long parentGroupId, String name, boolean site, int start, int end) {
		if (Validator.isNull(name)) {
			return getGroups(companyId, parentGroupId, site, start, end);
		}
		
		if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
			return groupPersistence.findByC_LikeN_S( companyId, name, site, start, end);
		}
		
		return groupPersistence.findByC_P_LikeN_S( companyId, parentGroupId, name, site, start, end);
	}
	
	public List<Group> getGroups( long companyId, String treePath, boolean site) {
		return groupPersistence.findByC_T_S(companyId, treePath, site);
	}
	
	public List<Group> getGroups( long companyId, String className, long parentGroupId) {
		return groupPersistence.findByC_C_P( companyId, classNameLocalService.getClassNameId(className), parentGroupId);
	}
	
	public List<Group> getGroups( long companyId, String className, long parentGroupId, int start, int end) {
		return groupPersistence.findByC_C_P( companyId, classNameLocalService.getClassNameId(className), parentGroupId, start, end);
	}
	
	public List<Group> getGroups(long[] groupIds) throws PortalException {
		List<Group> groups = new ArrayList<>(groupIds.length);
		for (long groupId : groupIds) {
			groups.add(getGroup(groupId));
		}
		
		return groups;
	}
	
	public int getGroupsCount( long companyId, long parentGroupId, boolean site) {
		if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
			return groupPersistence.countByC_S(companyId, site);
		}
		
		return groupPersistence.countByC_P_S(companyId, parentGroupId, site);
	}
	
	public int getGroupsCount( long companyId, long parentGroupId, String name, boolean site) {
		if (Validator.isNull(name)) {
			return getGroupsCount(companyId, parentGroupId, site);
		}
		
		if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
			return groupPersistence.countByC_LikeN_S(companyId, name, site);
		}
		
		return groupPersistence.countByC_P_LikeN_S( companyId, parentGroupId, name, site);
	}
	
	public int getGroupsCount( long companyId, String className, long parentGroupId) {
		return groupPersistence.countByC_C_P( companyId, classNameLocalService.getClassNameId(className), parentGroupId);
	}
	
	public Group getLayoutGroup(long companyId, long plid) throws PortalException {
		return groupPersistence.findByC_C_C( companyId, classNameLocalService.getClassNameId(Layout.class), plid);
	}
	
	public Group getLayoutPrototypeGroup(long companyId, long layoutPrototypeId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId( LayoutPrototype.class);
		return groupPersistence.findByC_C_C( companyId, classNameId, layoutPrototypeId);
	}
	
	public Group getLayoutSetPrototypeGroup( long companyId, long layoutSetPrototypeId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId( LayoutSetPrototype.class);
		return groupPersistence.findByC_C_C( companyId, classNameId, layoutSetPrototypeId);
	}
	
	public List<Group> getLayoutsGroups( long companyId, long parentGroupId, boolean site, boolean active, int start, int end, OrderByComparator<Group> orderByComparator) {
		return groupFinder.findByLayouts( companyId, parentGroupId, site, active, start, end, orderByComparator);
	}
	
	public List<Group> getLayoutsGroups( long companyId, long parentGroupId, boolean site, int start, int end, OrderByComparator<Group> orderByComparator) {
		return groupFinder.findByLayouts( companyId, parentGroupId, site, null, start, end, orderByComparator);
	}
	
	public int getLayoutsGroupsCount( long companyId, long parentGroupId, boolean site) {
		return groupFinder.countByLayouts(companyId, parentGroupId, site);
	}
	
	public int getLayoutsGroupsCount( long companyId, long parentGroupId, boolean site, boolean active) {
		return groupFinder.countByLayouts( companyId, parentGroupId, site, active);
	}
	
	public List<Group> getLiveGroups() {
		return groupFinder.findByLiveGroups();
	}
	
	public Group getOrganizationGroup(long companyId, long organizationId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId( Organization.class);
		return groupPersistence.findByC_C_C( companyId, classNameId, organizationId);
	}
	
	public List<Group> getOrganizationsGroups( List<Organization> organizations) {
		List<Group> organizationGroups = new ArrayList<>();
		for (Organization organization : organizations) {
			organizationGroups.add(organization.getGroup());
		}
		
		return organizationGroups;
	}
	
	public List<Group> getOrganizationsRelatedGroups( List<Organization> organizations) {
		List<Group> organizationGroups = new ArrayList<>();
		for (Organization organization : organizations) {
			List<Group> groups = organizationPersistence.getGroups( organization.getOrganizationId());
			organizationGroups.addAll(groups);
		}
		
		return organizationGroups;
	}
	
	public List<Group> getParentGroups(long groupId) throws PortalException {
		if (groupId == GroupConstants.DEFAULT_PARENT_GROUP_ID) {
			return new ArrayList<>();
		}
		
		Group group = groupPersistence.findByPrimaryKey(groupId);
		return group.getAncestors();
	}
	
	public List<Group> getStagedSites() {
		return groupFinder.findByL_TS_S_RSGC(0, "staged=true", true, 0);
	}
	
	public Group getStagingGroup(long liveGroupId) throws PortalException {
		return groupPersistence.findByLiveGroupId(liveGroupId);
	}
	
	public Group getUserGroup(long companyId, long userId) throws PortalException {
		return groupPersistence.findByC_C_C( companyId, classNameLocalService.getClassNameId(User.class), userId);
	}
	
	public Group getUserGroupGroup(long companyId, long userGroupId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId( UserGroup.class);
		return groupPersistence.findByC_C_C( companyId, classNameId, userGroupId);
	}
	
	public List<Group> getUserGroups(long userId, boolean inherit) throws PortalException {
		return getUserGroups( userId, inherit, QueryUtil.ALL_POS, QueryUtil.ALL_POS);
	}
	
	public List<Group> getUserGroups( long userId, boolean inherit, int start, int end) throws PortalException {
		if (inherit) {
			User user = userPersistence.findByPrimaryKey(userId);
			return search( user.getCompanyId(), null, null, LinkedHashMapBuilder.<String, Object>put( "usersGroups", Long.valueOf(userId) ).build(), start, end);
		}
		
		return userPersistence.getGroups(userId, start, end);
	}
	
	public List<Group> getUserGroupsGroups(List<UserGroup> userGroups) throws PortalException {
		List<Group> userGroupGroups = new ArrayList<>();
		for (UserGroup userGroup : userGroups) {
			userGroupGroups.add(userGroup.getGroup());
		}
		
		return userGroupGroups;
	}
	
	public List<Group> getUserGroupsRelatedGroups(List<UserGroup> userGroups) {
		List<Group> userGroupGroups = new ArrayList<>();
		for (UserGroup userGroup : userGroups) {
			List<Group> groups = userGroupPersistence.getGroups( userGroup.getUserGroupId());
			userGroupGroups.addAll(groups);
		}
		
		return userGroupGroups;
	}
	
	public List<Group> getUserOrganizationsGroups( long userId, int start, int end) throws PortalException {
		List<Group> userOrgsGroups = new ArrayList<>();
		List<Organization> userOrgs = organizationLocalService.getUserOrganizations(userId, start, end);
		for (Organization organization : userOrgs) {
			userOrgsGroups.add(0, organization.getGroup());
			if (!PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {
				for (Organization ancestorOrganization : organization.getAncestors()) {
					userOrgsGroups.add(0, ancestorOrganization.getGroup());
				}
				
			}
			
		}
		
		return ListUtil.unique(userOrgsGroups);
	}
	
	public Group getUserPersonalSiteGroup(long companyId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId( UserPersonalSite.class);
		return groupPersistence.findByC_C_C( companyId, classNameId, userLocalService.getDefaultUserId(companyId));
	}
	
	public List<Group> getUserSitesGroups(long userId) throws PortalException {
		UserBag userBag = PermissionCacheUtil.getUserBag(userId);
		if (userBag == null) {
			User user = userPersistence.findByPrimaryKey(userId);
			return groupFinder.findByCompanyId( user.getCompanyId(), LinkedHashMapBuilder.<String, Object>put( "inherit", Boolean.TRUE ).put( "site", Boolean.TRUE ).put( "usersGroups", userId ).build(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, new GroupNameComparator(true));
		}
		
		Collection<Group> userGroups = userBag.getUserGroups();
		List<Group> userSiteGroups = new ArrayList<>(userGroups.size());
		for (Group group : userGroups) {
			if (group.isSite()) {
				userSiteGroups.add(group);
			}
			
		}
		
		userSiteGroups.sort(new GroupNameComparator(true));
		return userSiteGroups;
	}
	
	public List<Group> getUserSitesGroups( long userId, boolean includeAdministrative) throws PortalException {
		if (!includeAdministrative) {
			return getUserSitesGroups(userId);
		}
		
		Set<Group> siteGroups = new HashSet<>();
		List<UserGroupRole> userGroupRoles = userGroupRoleLocalService.getUserGroupRoles(userId);
		for (UserGroupRole userGroupRole : userGroupRoles) {
			Role role = userGroupRole.getRole();
			String roleName = role.getName();
			if (roleName.equals(RoleConstants.SITE_ADMINISTRATOR) || roleName.equals(RoleConstants.SITE_OWNER)) {
				siteGroups.add(userGroupRole.getGroup());
			}
			
		}
		
		siteGroups.addAll(getUserSitesGroups(userId));
		return new ArrayList<>(siteGroups);
	}
	
	public List<Group> getUserSitesGroups(long userId, int start, int end) throws PortalException {
		User user = userPersistence.findByPrimaryKey(userId);
		return groupFinder.findByCompanyId( user.getCompanyId(), LinkedHashMapBuilder.<String, Object>put( "inherit", Boolean.TRUE ).put( "site", Boolean.TRUE ).put( "usersGroups", userId ).build(), start, end, new GroupNameComparator(true));
	}
	
	public boolean hasStagingGroup(long liveGroupId) {
		if (groupPersistence.fetchByLiveGroupId(liveGroupId) != null) {
			return true;
		}
		
		return false;
	}
	
	public boolean hasUserGroup(long userId, long groupId) {
		return hasUserGroup(userId, groupId, true);
	}
	
	public boolean hasUserGroup(long userId, long groupId, boolean inherit) {
		if (groupFinder.countByG_U(groupId, userId, inherit) > 0) {
			return true;
		}
		
		return false;
	}
	
	@Transactional(enabled = false)
	public boolean isLiveGroupActive(Group group) {
		if (group == null) {
			return false;
		}
		
		if (!group.isStagingGroup()) {
			return group.isActive();
		}
		
		Group liveGroup = group.getLiveGroup();
		if (liveGroup == null) {
			return false;
		}
		
		return liveGroup.isActive();
	}
	
	public Group loadFetchGroup(long companyId, String groupKey) {
		return groupPersistence.fetchByC_GK(companyId, groupKey);
	}
	
	public Group loadGetGroup(long companyId, String groupKey) throws PortalException {
		return groupPersistence.findByC_GK(companyId, groupKey);
	}
	
	public void rebuildTree(long companyId) throws PortalException {
		long classNameId = classNameLocalService.getClassNameId(Group.class);
		TreePathUtil.rebuildTree( companyId, GroupConstants.DEFAULT_PARENT_GROUP_ID, StringPool.SLASH, new TreeModelTasksAdapter<Group>() { 

				public List<Group> findTreeModels( long previousId, long companyId, long parentPrimaryKey, int size) {
					return groupPersistence.findByG_C_C_P( previousId, companyId, classNameId, parentPrimaryKey, QueryUtil.ALL_POS, size, new GroupIdComparator(true));
				}
				
			}
			
);
	}
	
	public List<Group> search( long companyId, LinkedHashMap<String, Object> params, int start, int end) {
		return groupFinder.findByCompanyId( companyId, params, start, end, new GroupNameComparator(true));
	}
	
	public List<Group> search( long companyId, long parentGroupId, String keywords, LinkedHashMap<String, Object> params, int start, int end) {
		return search( companyId, getClassNameIds(), parentGroupId, keywords, params, start, end, null);
	}
	
	public List<Group> search( long companyId, long parentGroupId, String keywords, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> orderByComparator) {
		return search( companyId, getClassNameIds(), parentGroupId, keywords, params, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, long parentGroupId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end) {
		return search( companyId, getClassNameIds(), parentGroupId, name, description, params, andOperator, start, end, null);
	}
	
	public List<Group> search( long companyId, long parentGroupId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Group> orderByComparator) {
		return search( companyId, getClassNameIds(), parentGroupId, name, description, params, andOperator, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, long parentGroupId, String keywords, LinkedHashMap<String, Object> params, int start, int end) {
		return search( companyId, classNameIds, parentGroupId, keywords, params, start, end, null);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, long parentGroupId, String keywords, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> orderByComparator) {
		String[] keywordsArray = getSearchNames(companyId, keywords);
		boolean andOperator = false;
		if (Validator.isNull(keywords)) {
			andOperator = true;
		}
		
		if (isUseComplexSQL(classNameIds)) {
			return groupFinder.findByC_C_PG_N_D( companyId, classNameIds, parentGroupId, keywordsArray, keywordsArray, params, andOperator, start, end, orderByComparator);
		}
		
		Collection<Group> groups = doSearch( companyId, classNameIds, parentGroupId, keywordsArray, keywordsArray, params, andOperator);
		return sort(groups, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, long parentGroupId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end) {
		return search( companyId, classNameIds, parentGroupId, name, description, params, andOperator, start, end, null);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, long parentGroupId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Group> orderByComparator) {
		String[] names = getSearchNames(companyId, name);
		String[] descriptions = CustomSQLUtil.keywords(description);
		if (isUseComplexSQL(classNameIds)) {
			return groupFinder.findByC_C_PG_N_D( companyId, classNameIds, parentGroupId, names, descriptions, params, andOperator, start, end, orderByComparator);
		}
		
		Collection<Group> groups = doSearch( companyId, classNameIds, parentGroupId, names, descriptions, params, andOperator);
		return sort(groups, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, String keywords, LinkedHashMap<String, Object> params, int start, int end) {
		return search( companyId, classNameIds, GroupConstants.ANY_PARENT_GROUP_ID, keywords, params, start, end, null);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, String keywords, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> orderByComparator) {
		return search( companyId, classNameIds, GroupConstants.ANY_PARENT_GROUP_ID, keywords, params, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end) {
		return search( companyId, classNameIds, GroupConstants.ANY_PARENT_GROUP_ID, name, description, params, andOperator, start, end, null);
	}
	
	public List<Group> search( long companyId, long[] classNameIds, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Group> orderByComparator) {
		return search( companyId, classNameIds, GroupConstants.ANY_PARENT_GROUP_ID, name, description, params, andOperator, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, String keywords, LinkedHashMap<String, Object> params, int start, int end) {
		return search( companyId, getClassNameIds(), GroupConstants.ANY_PARENT_GROUP_ID, keywords, params, start, end, null);
	}
	
	public List<Group> search( long companyId, String keywords, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> orderByComparator) {
		return search( companyId, getClassNameIds(), GroupConstants.ANY_PARENT_GROUP_ID, keywords, params, start, end, orderByComparator);
	}
	
	public List<Group> search( long companyId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end) {
		return search( companyId, getClassNameIds(), GroupConstants.ANY_PARENT_GROUP_ID, name, description, params, andOperator, start, end, null);
	}
	
	public List<Group> search( long companyId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Group> orderByComparator) {
		return search( companyId, getClassNameIds(), GroupConstants.ANY_PARENT_GROUP_ID, name, description, params, andOperator, start, end, orderByComparator);
	}
	
	public int searchCount( long companyId, long parentGroupId, String keywords, LinkedHashMap<String, Object> params) {
		return searchCount( companyId, getClassNameIds(), parentGroupId, keywords, params);
	}
	
	public int searchCount( long companyId, long parentGroupId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator) {
		return searchCount( companyId, getClassNameIds(), parentGroupId, name, description, params, andOperator);
	}
	
	public int searchCount( long companyId, long[] classNameIds, long parentGroupId, String keywords, LinkedHashMap<String, Object> params) {
		String[] keywordsArray = getSearchNames(companyId, keywords);
		boolean andOperator = false;
		if (Validator.isNull(keywords)) {
			andOperator = true;
		}
		
		if (isUseComplexSQL(classNameIds)) {
			return groupFinder.countByC_C_PG_N_D( companyId, classNameIds, parentGroupId, keywordsArray, keywordsArray, params, andOperator);
		}
		
		Collection<Group> groups = doSearch( companyId, classNameIds, parentGroupId, keywordsArray, keywordsArray, params, andOperator);
		return groups.size();
	}
	
	public int searchCount( long companyId, long[] classNameIds, long parentGroupId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator) {
		String[] names = getSearchNames(companyId, name);
		String[] descriptions = CustomSQLUtil.keywords(description);
		if (isUseComplexSQL(classNameIds)) {
			return groupFinder.countByC_C_PG_N_D( companyId, classNameIds, parentGroupId, names, descriptions, params, andOperator);
		}
		
		Collection<Group> groups = doSearch( companyId, classNameIds, parentGroupId, names, descriptions, params, andOperator);
		return groups.size();
	}
	
	public int searchCount( long companyId, long[] classNameIds, String keywords, LinkedHashMap<String, Object> params) {
		return searchCount( companyId, classNameIds, GroupConstants.ANY_PARENT_GROUP_ID, keywords, params);
	}
	
	public int searchCount( long companyId, long[] classNameIds, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator) {
		return searchCount( companyId, classNameIds, GroupConstants.ANY_PARENT_GROUP_ID, name, description, params, andOperator);
	}
	
	public int searchCount( long companyId, String keywords, LinkedHashMap<String, Object> params) {
		return searchCount( companyId, getClassNameIds(), GroupConstants.ANY_PARENT_GROUP_ID, keywords, params);
	}
	
	public int searchCount( long companyId, String name, String description, LinkedHashMap<String, Object> params, boolean andOperator) {
		return searchCount( companyId, getClassNameIds(), GroupConstants.ANY_PARENT_GROUP_ID, name, description, params, andOperator);
	}
	
	public void unsetRoleGroups(long roleId, long[] groupIds) {
		rolePersistence.removeGroups(roleId, groupIds);
	}
	
	public void unsetUserGroups(long userId, long[] groupIds) {
		userGroupRoleLocalService.deleteUserGroupRoles(userId, groupIds);
		userPersistence.removeGroups(userId, groupIds);
	}
	
	public void updateAsset( long userId, Group group, long[] assetCategoryIds, String[] assetTagNames) throws PortalException {  User user = userPersistence.findByPrimaryKey(userId);
		Company company = companyPersistence.findByPrimaryKey( user.getCompanyId());
		Group companyGroup = company.getGroup();
		assetEntryLocalService.updateEntry( userId, companyGroup.getGroupId(), null, null, Group.class.getName(), group.getGroupId(), null, 0, assetCategoryIds, assetTagNames, true, false, null, null, null, null, null, group.getDescriptiveName(), group.getDescription(), null, null, null, 0, 0, null);
	}
	
	public Group updateFriendlyURL(long groupId, String friendlyURL) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		if (group.isUser()) {
			User user = userPersistence.findByPrimaryKey(group.getClassPK());
			friendlyURL = StringPool.SLASH + user.getScreenName();
			if (friendlyURL.equals(group.getFriendlyURL())) {
				return group;
			}
			
		}
		
		friendlyURL = getFriendlyURL( group.getCompanyId(), groupId, group.getClassNameId(), group.getClassPK(), StringPool.BLANK, friendlyURL);
		if (group.isUser()) {
			friendlyURL = getValidatedFriendlyURL( group.getCompanyId(), group.getGroupId(), group.getClassNameId(), group.getClassPK(), friendlyURL);
		}
		
		else {
			validateFriendlyURL( group.getCompanyId(), group.getGroupId(), group.getClassNameId(), group.getClassPK(), friendlyURL);
		}
		
		group.setFriendlyURL(friendlyURL);
		return groupPersistence.update(group);
	}
	
	public Group updateGroup( long groupId, long parentGroupId, Map<Locale, String> nameMap, Map<Locale, String> descriptionMap, int type, boolean manualMembership, int membershipRestriction, String friendlyURL, boolean inheritContent, boolean active, ServiceContext serviceContext) throws PortalException {
		List<String> names = new ArrayList<>(nameMap.values());
		if (ListUtil.isNull(names)) {
			throw new GroupKeyException();
		}
		
		Group group = groupPersistence.findByPrimaryKey(groupId);
		String className = group.getClassName();
		long classNameId = group.getClassNameId();
		long classPK = group.getClassPK();
		String groupKey = group.getGroupKey();
		if (nameMap != null) {
			nameMap = _normalizeNameMap(nameMap);
			if (Validator.isNotNull( nameMap.get( LocaleUtil.fromLanguageId( group.getDefaultLanguageId())))) {
				groupKey = nameMap.get( LocaleUtil.fromLanguageId(group.getDefaultLanguageId()));
			}
			
		}
		
		friendlyURL = getFriendlyURL( group.getCompanyId(), groupId, classNameId, classPK, StringPool.BLANK, friendlyURL);
		if ((classNameId <= 0) || (type == GroupConstants.TYPE_DEPOT) || className.equals(Group.class.getName())) {
			validateGroupKey( group.getGroupId(), group.getCompanyId(), groupKey, group.getType(), group.isSite());
		}
		
		else if (className.equals(Organization.class.getName())) {
			Organization organization = organizationPersistence.findByPrimaryKey(classPK);
			groupKey = getOrgGroupName(organization.getName());
		}
		
		else if (!GroupConstants.USER_PERSONAL_SITE.equals( group.getGroupKey())) {
			groupKey = String.valueOf(classPK);
		}
		
		if (PortalUtil.isSystemGroup(group.getGroupKey()) && !groupKey.equals(group.getGroupKey())) {
			throw new RequiredGroupException.MustNotDeleteSystemGroup( group.getGroupId());
		}
		
		if (group.isUser()) {
			friendlyURL = getValidatedFriendlyURL( group.getCompanyId(), group.getGroupId(), group.getClassNameId(), group.getClassPK(), friendlyURL);
		}
		
		else {
			validateFriendlyURL( group.getCompanyId(), group.getGroupId(), group.getClassNameId(), group.getClassPK(), friendlyURL);
		}
		
		validateParentGroup(group.getGroupId(), parentGroupId);
		group.setParentGroupId(parentGroupId);
		group.setTreePath(group.buildTreePath());
		group.setGroupKey(groupKey);
		group.setNameMap(nameMap);
		group.setDescriptionMap(descriptionMap);
		group.setType(type);
		group.setManualMembership(manualMembership);
		group.setMembershipRestriction(membershipRestriction);
		group.setFriendlyURL(friendlyURL);
		group.setInheritContent(inheritContent);
		if (group.isActive() != active) {
			group.setActive(active);
			long companyId = group.getCompanyId();
			TransactionCommitCallbackUtil.registerCallback( () -> {
					reindex(companyId, getUserPrimaryKeys(groupId));
					return null;
				}
				
);
		}
		
		if ((serviceContext != null) && group.isSite()) {
			group.setExpandoBridgeAttributes(serviceContext);
		}
		
		group = groupPersistence.update(group);
		if (group.hasStagingGroup() && !group.isStagedRemotely()) {
			Group stagingGroup = group.getStagingGroup();
			stagingGroup.setParentGroupId(group.getParentGroupId());
			stagingGroup.setTreePath(stagingGroup.buildTreePath());
			groupPersistence.update(stagingGroup);
		}
		
		 if ((serviceContext == null) || !group.isSite()) {
			return group;
		}
		
		User user = userPersistence.fetchByPrimaryKey(group.getCreatorUserId());
		if (user == null) {
			user = userPersistence.fetchByPrimaryKey( serviceContext.getUserId());
		}
		
		if (user == null) {
			user = userLocalService.getDefaultUser(group.getCompanyId());
		}
		
		updateAsset( user.getUserId(), group, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames());
		return group;
	}
	
	public Group updateGroup(long groupId, String typeSettings) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		UnicodeProperties oldTypeSettingsUnicodeProperties = new UnicodeProperties(true);
		oldTypeSettingsUnicodeProperties.fastLoad(group.getTypeSettings());
		_validateGroupKeyChange(groupId, typeSettings);
		group = groupPersistence.findByPrimaryKey(groupId);
		UnicodeProperties typeSettingsUnicodeProperties = new UnicodeProperties( true);
		typeSettingsUnicodeProperties.fastLoad(typeSettings);
		if (GetterUtil.getBoolean( typeSettingsUnicodeProperties.getProperty( GroupConstants.TYPE_SETTINGS_KEY_INHERIT_LOCALES), true)) {
			typeSettingsUnicodeProperties.setProperty( PropsKeys.LOCALES, StringUtil.merge( LocaleUtil.toLanguageIds( LanguageUtil.getAvailableLocales(groupId))));
		}
		
		String newLanguageIds = typeSettingsUnicodeProperties.getProperty( PropsKeys.LOCALES);
		if (Validator.isNotNull(newLanguageIds)) {
			String oldLanguageIds = oldTypeSettingsUnicodeProperties.getProperty( PropsKeys.LOCALES, StringPool.BLANK);
			String defaultLanguageId = typeSettingsUnicodeProperties.getProperty( "languageId", LocaleUtil.toLanguageId(LocaleUtil.getDefault()));
			validateLanguageIds(groupId, defaultLanguageId, newLanguageIds);
			if (!Objects.equals( group.getDefaultLanguageId(), defaultLanguageId)) {
				Locale defaultLocale = LocaleUtil.fromLanguageId( defaultLanguageId);
				Map<Locale, String> oldNameMap = group.getNameMap();
				group.setNameMap(oldNameMap, defaultLocale);
				Map<Locale, String> oldDescriptionMap = group.getDescriptionMap();
				group.setDescriptionMap(oldDescriptionMap, defaultLocale);
				Map<Locale, String> nameMap = group.getNameMap();
				if ((nameMap != null) && Validator.isNotNull(nameMap.get(defaultLocale))) {
					group.setGroupKey(nameMap.get(defaultLocale));
				}
				
			}
			
			if (!Objects.equals(oldLanguageIds, newLanguageIds)) {
				LanguageUtil.resetAvailableGroupLocales(groupId);
			}
			
		}
		
		group.setTypeSettingsProperties(typeSettingsUnicodeProperties);
		return groupPersistence.update(group);
	}
	
	public Group updateSite(long groupId, boolean site) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		if (!group.isOrganization()) {
			return group;
		}
		
		group.setSite(site);
		return groupPersistence.update(group);
	}
	
	public void validateRemote( long groupId, String remoteAddress, int remotePort, String remotePathContext, boolean secureConnection, long remoteGroupId) throws PortalException {
		RemoteOptionsException remoteOptionsException = null;
		if (!Validator.isDomain(remoteAddress) && !Validator.isIPAddress(remoteAddress)) {
			remoteOptionsException = new RemoteOptionsException( RemoteOptionsException.REMOTE_ADDRESS);
			remoteOptionsException.setRemoteAddress(remoteAddress);
			throw remoteOptionsException;
		}
		
		if ((remotePort < 1) || (remotePort > 65535)) {
			remoteOptionsException = new RemoteOptionsException( RemoteOptionsException.REMOTE_PORT);
			remoteOptionsException.setRemotePort(remotePort);
			throw remoteOptionsException;
		}
		
		if (Validator.isNotNull(remotePathContext) && (!remotePathContext.startsWith(StringPool.FORWARD_SLASH) || remotePathContext.endsWith(StringPool.FORWARD_SLASH))) {
			remoteOptionsException = new RemoteOptionsException( RemoteOptionsException.REMOTE_PATH_CONTEXT);
			remoteOptionsException.setRemotePathContext(remotePathContext);
			throw remoteOptionsException;
		}
		
		validateRemoteGroup( groupId, remoteGroupId, remoteAddress, remotePort, remotePathContext, secureConnection);
	}
	
	protected void addControlPanelLayouts(Group group) throws PortalException {
		long defaultUserId = userLocalService.getDefaultUserId( group.getCompanyId());
		String friendlyURL = getFriendlyURL( PropsValues.CONTROL_PANEL_LAYOUT_FRIENDLY_URL);
		ServiceContext serviceContext = new ServiceContext();
		serviceContext.setAttribute( "layout.instanceable.allowed", Boolean.TRUE);
		layoutLocalService.addLayout( defaultUserId, group.getGroupId(), true, LayoutConstants.DEFAULT_PARENT_LAYOUT_ID, PropsValues.CONTROL_PANEL_LAYOUT_NAME, StringPool.BLANK, StringPool.BLANK, LayoutConstants.TYPE_CONTROL_PANEL, false, friendlyURL, serviceContext);
	}
	
	protected void addDefaultGuestPublicLayouts(Group group) throws PortalException {
		if (publicLARFile != null) {
			addDefaultGuestPublicLayoutsByLAR(group, publicLARFile);
		}
		
	}
	
	protected void addDefaultGuestPublicLayoutsByLAR(Group group, File larFile) throws PortalException {
		User defaultUser = userLocalService.getDefaultUser( group.getCompanyId());
		Map<String, Serializable> importLayoutSettingsMap = ExportImportConfigurationSettingsMapFactoryUtil. buildImportLayoutSettingsMap( defaultUser, group.getGroupId(), false, null, HashMapBuilder.put( PortletDataHandlerKeys.PERMISSIONS, new String[] {Boolean.TRUE.toString()} ).put( PortletDataHandlerKeys.PORTLET_CONFIGURATION, new String[] {Boolean.TRUE.toString()} ).put( PortletDataHandlerKeys.PORTLET_DATA, new String[] {Boolean.TRUE.toString()} ).put( PortletDataHandlerKeys.PORTLET_DATA_CONTROL_DEFAULT, new String[] {Boolean.TRUE.toString()} ).build());
		ExportImportConfiguration exportImportConfiguration = exportImportConfigurationLocalService. addDraftExportImportConfiguration( defaultUser.getUserId(), ExportImportConfigurationConstants.TYPE_IMPORT_LAYOUT, importLayoutSettingsMap);
		exportImportLocalService.importLayouts( exportImportConfiguration, larFile);
	}
	
	protected void addPortletDefaultData(Group group) throws PortalException {
		PortletDataContext portletDataContext = PortletDataContextFactoryUtil.createPreparePortletDataContext( group.getCompanyId(), group.getGroupId(), null, null);
		List<PortletDataHandler> portletDataHandlers = getPortletDataHandlers( group);
		for (PortletDataHandler portletDataHandler : portletDataHandlers) {
			try {
				portletDataHandler.addDefaultData( portletDataContext, portletDataHandler.getPortletId(), null);
			}
			
			catch (Exception exception) {
				_log.error( StringBundler.concat( "Unable to add default data for portlet ", portletDataHandler.getPortletId(), " in group ", group.getGroupId()));
				if (portletDataHandler.isRollbackOnException()) {
					throw new SystemException(exception);
				}
				
			}
			
		}
		
	}
	
	protected void deletePortletData(Group group) throws PortalException {
		PortletDataContext portletDataContext = PortletDataContextFactoryUtil.createPreparePortletDataContext( group.getCompanyId(), group.getGroupId(), null, null);
		List<PortletDataHandler> portletDataHandlers = getPortletDataHandlers( group);
		for (PortletDataHandler portletDataHandler : portletDataHandlers) {
			try {
				portletDataHandler.deleteData( portletDataContext, portletDataHandler.getPortletId(), null);
			}
			
			catch (Exception exception) {
				_log.error( StringBundler.concat( "Unable to delete data for portlet ", portletDataHandler.getPortletId(), " in group ", group.getGroupId()), exception);
				if (portletDataHandler.isRollbackOnException()) {
					throw exception;
				}
				
			}
			
		}
		
	}
	
	protected Collection<Group> doSearch( long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) {  boolean parentGroupIdEquals = true;
		if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
			parentGroupIdEquals = false;
		}
		
		params = new LinkedHashMap<>(params);
		Boolean active = (Boolean)params.remove("active");
		List<Long> excludedGroupIds = (List<Long>)params.remove( "excludedGroupIds");
		List<Group> groupsTree = (List<Group>)params.remove("groupsTree");
		Boolean manualMembership = (Boolean)params.remove("manualMembership");
		Integer membershipRestriction = (Integer)params.remove( "membershipRestriction");
		Boolean site = (Boolean)params.remove("site");
		List<Integer> types = (List<Integer>)params.remove("types");
		Collection<Group> groups = new HashSet<>();
		Long userId = (Long)params.remove("usersGroups");
		for (long classNameId : classNameIds) {
			if (site != null) {
				groups.addAll( groupPersistence.findByC_C_S(companyId, classNameId, site));
			}
			
			else {
				groups.addAll( groupPersistence.findByC_C(companyId, classNameId));
			}
			
		}
		
		Iterator<Group> iterator = groups.iterator();
		while (iterator.hasNext()) {
			Group group = iterator.next();
			 long liveGroupId = group.getLiveGroupId();
			if (liveGroupId != 0) {
				iterator.remove();
				continue;
			}
			
			 long groupParentGroupId = group.getParentGroupId();
			if (parentGroupIdEquals && (groupParentGroupId != parentGroupId)) {
				iterator.remove();
				continue;
			}
			
			 String groupKey = group.getGroupKey();
			if (groupKey.equals(GroupConstants.CONTROL_PANEL)) {
				iterator.remove();
				continue;
			}
			
			boolean containsName = matches(group.getNameCurrentValue(), names);
			if (!containsName) {
				AssetEntry assetEntry = assetEntryPersistence.fetchByC_C( group.getClassNameId(), group.getGroupId());
				if (assetEntry != null) {
					containsName = matches(assetEntry.getTitle(), names);
				}
				
			}
			
			boolean containsDescription = matches( group.getDescriptionCurrentValue(), descriptions);
			if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) {
				iterator.remove();
				continue;
			}
			
			 if ((active != null) && (active != isLiveGroupActive(group))) {
				iterator.remove();
				continue;
			}
			
			 if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) {
				iterator.remove();
				continue;
			}
			
			 if (groupsTree != null) {
				String treePath = group.getTreePath();
				boolean matched = false;
				for (Group groupTree : groupsTree) {
					String groupTreePath = StringUtil.quote( String.valueOf(groupTree.getGroupId()), StringPool.SLASH);
					if (treePath.contains(groupTreePath)) {
						matched = true;
						break;
					}
					
				}
				
				if (!matched) {
					iterator.remove();
					continue;
				}
				
			}
			
			 if ((manualMembership != null) && (manualMembership != group.isManualMembership())) {
				iterator.remove();
				continue;
			}
			
			 if ((membershipRestriction != null) && (membershipRestriction != group.getMembershipRestriction())) {
				iterator.remove();
				continue;
			}
			
			 int type = group.getType();
			if (type == 4) {
				iterator.remove();
				continue;
			}
			
			if ((types != null) && !types.contains(type)) {
				iterator.remove();
			}
			
		}
		
		 RolePermissions rolePermissions = (RolePermissions)params.remove( "rolePermissions");
		if (rolePermissions != null) {
			ResourceAction resourceAction = resourceActionLocalService.fetchResourceAction( rolePermissions.getName(), rolePermissions.getActionId());
			if (resourceAction != null) {
				Set<Group> rolePermissionsGroups = new HashSet<>();
				List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_N_S_R( companyId, rolePermissions.getName(), rolePermissions.getScope(), rolePermissions.getRoleId());
				for (ResourcePermission resourcePermission : resourcePermissions) {
					if (resourcePermission.hasAction(resourceAction)) {
						Group group = groupPersistence.fetchByPrimaryKey( GetterUtil.getLong( resourcePermission.getPrimKey()));
						if (group != null) {
							rolePermissionsGroups.add(group);
						}
						
					}
					
				}
				
				groups.retainAll(rolePermissionsGroups);
			}
			
		}
		
		 Long roleId = (Long)params.remove("groupsRoles");
		if (roleId != null) {
			groups.retainAll(rolePersistence.getGroups(roleId));
		}
		
		if (userId == null) {
			return groups;
		}
		
		 Set<Group> joinedGroups = new HashSet<>( userPersistence.getGroups(userId));
		boolean inherit = GetterUtil.getBoolean(params.remove("inherit"), true);
		if (inherit) {
			 long[] organizationIds = userPersistence.getOrganizationPrimaryKeys( userId);
			for (long organizationId : organizationIds) {
				for (Group group : groups) {
					if (organizationId == group.getClassPK()) {
						joinedGroups.add(group);
					}
					
				}
				
			}
			
			 for (long organizationId : organizationIds) {
				joinedGroups.addAll( organizationPersistence.getGroups(organizationId));
			}
			
			 long[] userGroupIds = userPersistence.getUserGroupPrimaryKeys( userId);
			for (long userGroupId : userGroupIds) {
				joinedGroups.addAll( userGroupPersistence.getGroups(userGroupId));
			}
			
		}
		
		String actionId = (String)params.remove("actionId");
		if (actionId != null) {
			PermissionChecker permissionChecker = PermissionThreadLocal.getPermissionChecker();
			for (Group group : groups) {
				try {
					if (permissionChecker.isGroupAdmin(group.getGroupId()) || GroupPermissionUtil.contains( permissionChecker, group.getGroupId(), actionId)) {
						joinedGroups.add(group);
					}
					
				}
				
				catch (PortalException portalException) {
					if (_log.isWarnEnabled()) {
						_log.warn( "Unable to check permission for group " + group.getGroupId(), portalException);
					}
					
				}
				
			}
			
		}
		
		if (_log.isDebugEnabled() && !params.isEmpty()) {
			_log.debug("Unprocessed parameters " + MapUtil.toString(params));
		}
		
		joinedGroups.retainAll(groups);
		return joinedGroups;
	}
	
	protected long[] getClassNameIds() {
		if (_classNameIds == null) {
			_classNameIds = new long[] { 				classNameLocalService.getClassNameId(Group.class), classNameLocalService.getClassNameId(Organization.class) };
		}
		
		return _classNameIds;
	}
	
	protected String getFriendlyURL( long companyId, long groupId, long classNameId, long classPK, String friendlyName, String friendlyURL) throws PortalException {
		friendlyURL = getFriendlyURL(friendlyURL);
		if (Validator.isNotNull(friendlyURL)) {
			return friendlyURL;
		}
		
		String safeFriendlyName = StringUtil.removeChars( friendlyName, CharPool.PERCENT);
		friendlyURL = StringPool.SLASH + getFriendlyURL(safeFriendlyName);
		return getValidatedFriendlyURL( companyId, groupId, classNameId, classPK, friendlyURL);
	}
	
	protected String getFriendlyURL(String friendlyURL) {
		return FriendlyURLNormalizerUtil.normalizeWithEncoding(friendlyURL);
	}
	
	protected String getOrgGroupName(String name) {
		return name + ORGANIZATION_NAME_SUFFIX;
	}
	
	protected List<PortletDataHandler> getPortletDataHandlers(Group group) {
		List<Portlet> portlets = portletLocalService.getPortlets( group.getCompanyId());
		List<PortletDataHandler> portletDataHandlers = new ArrayList<>( portlets.size());
		for (Portlet portlet : portlets) {
			if (!portlet.isActive()) {
				continue;
			}
			
			PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance();
			if ((portletDataHandler != null) && !portletDataHandler.isDataPortalLevel()) {
				portletDataHandlers.add(portletDataHandler);
			}
			
		}
		
		return portletDataHandlers;
	}
	
	protected String[] getSearchNames(long companyId, String name) { 		if (Validator.isNull(name)) { return new String[] {null};
		}
		
		Company company = companyPersistence.fetchByPrimaryKey(companyId);
		if (company == null) {
			return CustomSQLUtil.keywords(name);
		}
		
		Account account = accountPersistence.fetchByPrimaryKey( company.getAccountId());
		if (account == null) {
			return CustomSQLUtil.keywords(name);
		}
		
		String companyName = account.getName();
		if (StringUtil.wildcardMatches( companyName, name, CharPool.UNDERLINE, CharPool.PERCENT, CharPool.BACK_SLASH, false)) {
			String[] searchNames = CustomSQLUtil.keywords(name);
			String guestName = StringUtil.quote( StringUtil.toLowerCase(GroupConstants.GUEST), StringPool.PERCENT);
			return ArrayUtil.append(searchNames, guestName);
		}
		
		return CustomSQLUtil.keywords(name);
	}
	
	protected String getValidatedFriendlyURL( long companyId, long groupId, long classNameId, long classPK, String friendlyURL) throws PortalException {
		int i = 0;
		while (true) {
			try {
				validateFriendlyURL( companyId, groupId, classNameId, classPK, friendlyURL);
				break;
			}
			
			catch (GroupFriendlyURLException groupFriendlyURLException) {
				int type = groupFriendlyURLException.getType();
				if (type == GroupFriendlyURLException.DUPLICATE) {
					if (friendlyURL.matches(".+-[0-9]+$")) {
						int end = friendlyURL.lastIndexOf(CharPool.DASH);
						long suffix = GetterUtil.getLong( friendlyURL.substring(end + 1));
						if (!(friendlyURL.contains("group") && (groupId == suffix))) {
							friendlyURL = friendlyURL.substring(0, end);
						}
						
					}
					
					if (StringUtil.endsWith(friendlyURL, CharPool.DASH)) {
						friendlyURL = friendlyURL + ++i;
					}
					
					else {
						friendlyURL = friendlyURL + CharPool.DASH + ++i;
					}
					
				}
				
				else if (type == GroupFriendlyURLException.ENDS_WITH_DASH) {
					friendlyURL = StringUtil.replaceLast( friendlyURL, CharPool.DASH, StringPool.BLANK);
				}
				
				else {
					friendlyURL = "/group-" + classPK;
				}
				
			}
			
		}
		
		return friendlyURL;
	}
	
	protected void initImportLARFile() {
		String publicLARFileName = PropsValues.DEFAULT_GUEST_PUBLIC_LAYOUTS_LAR;
		if (_log.isDebugEnabled()) {
			_log.debug("Reading public LAR file " + publicLARFileName);
		}
		
		if (Validator.isNotNull(publicLARFileName)) {
			publicLARFile = new File(publicLARFileName);
			if (!publicLARFile.exists()) {
				_log.error( "Public LAR file " + publicLARFile + " does not exist");
				publicLARFile = null;
			}
			
			else {
				if (_log.isDebugEnabled()) {
					_log.debug("Using public LAR file " + publicLARFileName);
				}
				
			}
			
		}
		
	}
	
	protected void initUserPersonalSitePermissions(Group group) throws PortalException {
		 Role role = roleLocalService.getRole( group.getCompanyId(), RoleConstants.USER);
		setRolePermissions( group, role, Layout.class.getName(), new String[] {ActionKeys.VIEW});
		 role = roleLocalService.getRole( group.getCompanyId(), RoleConstants.POWER_USER);
		setRolePermissions( group, role, Group.class.getName(), new String[] { 				ActionKeys.MANAGE_LAYOUTS, ActionKeys.VIEW_SITE_ADMINISTRATION });
	}
	
	protected boolean isCompanyGroup(HttpPrincipal httpPrincipal, Group group) {
		ClassName className = ClassNameServiceHttp.fetchByClassNameId( httpPrincipal, group.getClassNameId());
		if (Objects.equals(className.getValue(), Company.class.getName())) {
			return true;
		}
		
		return false;
	}
	
	protected boolean isParentGroup(long parentGroupId, long groupId) throws PortalException {
		 if (groupId == GroupConstants.DEFAULT_PARENT_GROUP_ID) {
			return false;
		}
		
		Group group = groupPersistence.findByPrimaryKey(groupId);
		String treePath = group.getTreePath();
		if (treePath.contains( StringPool.SLASH + parentGroupId + StringPool.SLASH)) {
			return true;
		}
		
		return false;
	}
	
	protected boolean isStaging(ServiceContext serviceContext) {
		if (serviceContext != null) {
			return ParamUtil.getBoolean(serviceContext, "staging");
		}
		
		return false;
	}
	
	protected boolean isUseComplexSQL(long[] classNameIds) {
		if (ArrayUtil.isEmpty(classNameIds)) {
			return true;
		}
		
		if (_complexSQLClassNameIds == null) {
			String[] complexSQLClassNames = PropsValues.GROUPS_COMPLEX_SQL_CLASS_NAMES;
			long[] complexSQLClassNameIds = new long[complexSQLClassNames.length];
			for (int i = 0; i < complexSQLClassNames.length; i++) {
				String complexSQLClassName = complexSQLClassNames[i];
				complexSQLClassNameIds[i] = classNameLocalService.getClassNameId(complexSQLClassName);
			}
			
			_complexSQLClassNameIds = complexSQLClassNameIds;
		}
		
		for (long classNameId : classNameIds) {
			if (ArrayUtil.contains(_complexSQLClassNameIds, classNameId)) {
				return true;
			}
			
		}
		
		return false;
	}
	
	protected boolean matches(String s, String[] keywords) { 		if ((keywords == null) || ((keywords.length == 1) && (keywords[0] == null))) { return true;
		}
		
		for (String keyword : keywords) {
			if (StringUtil.wildcardMatches( s, keyword, CharPool.UNDERLINE, CharPool.PERCENT, CharPool.BACK_SLASH, false)) {
				return true;
			}
			
		}
		
		return false;
	}
	
	protected void reindex(long companyId, long[] userIds) throws PortalException {
		_reindexerBridge.reindex(companyId, User.class.getName(), userIds);
	}
	
	protected void reindexUsersInOrganization(long organizationId) throws PortalException {
		Organization organization = organizationLocalService.getOrganization( organizationId);
		long[] userIds = organizationLocalService.getUserPrimaryKeys( organizationId);
		if (ArrayUtil.isNotEmpty(userIds)) {
			long companyId = organization.getCompanyId();
			TransactionCommitCallbackUtil.registerCallback( () -> {
					reindex(companyId, userIds);
					return null;
				}
				
);
		}
		
	}
	
	protected void reindexUsersInUserGroup(long userGroupId) throws PortalException {
		UserGroup userGroup = userGroupLocalService.getUserGroup(userGroupId);
		long[] userIds = organizationLocalService.getUserPrimaryKeys( userGroupId);
		if (ArrayUtil.isNotEmpty(userIds)) {
			long companyId = userGroup.getCompanyId();
			TransactionCommitCallbackUtil.registerCallback( () -> {
					reindex(companyId, userIds);
					return null;
				}
				
);
		}
		
	}
	
	protected void setCompanyPermissions( Role role, String name, String[] actionIds) throws PortalException {  resourcePermissionLocalService.setResourcePermissions( role.getCompanyId(), name, ResourceConstants.SCOPE_COMPANY, String.valueOf(role.getCompanyId()), role.getRoleId(), actionIds);
	}
	
	protected void setRolePermissions(Group group, Role role, String name) throws PortalException {
		List<String> actions = ResourceActionsUtil.getModelResourceActions( name);
		setRolePermissions(group, role, name, actions.toArray(new String[0]));
	}
	
	protected void setRolePermissions( Group group, Role role, String name, String[] actionIds) throws PortalException {  resourcePermissionLocalService.setResourcePermissions( group.getCompanyId(), name, ResourceConstants.SCOPE_GROUP, String.valueOf(group.getGroupId()), role.getRoleId(), actionIds);
	}
	
	protected List<Group> sort( Collection<Group> groups, int start, int end, OrderByComparator<Group> orderByComparator) {
		if (orderByComparator == null) {
			orderByComparator = new GroupNameComparator(true);
		}
		
		List<Group> groupList = null;
		if (groups instanceof List) {
			groupList = (List<Group>)groups;
		}
		
		else {
			groupList = new ArrayList<>(groups);
		}
		
		Collections.sort(groupList, orderByComparator);
		return Collections.unmodifiableList( ListUtil.subList(groupList, start, end));
	}
	
	protected void unscheduleStaging(Group group) {
		try {
			 String groupName = StagingUtil.getSchedulerGroupName( DestinationNames.LAYOUTS_REMOTE_PUBLISHER, group.getGroupId());
			SchedulerEngineHelperUtil.delete(groupName, StorageType.PERSISTED);
			long liveGroupId = 0;
			long stagingGroupId = 0;
			if (group.isStagingGroup()) {
				liveGroupId = group.getLiveGroupId();
				stagingGroupId = group.getGroupId();
			}
			
			else if (group.hasStagingGroup()) {
				liveGroupId = group.getGroupId();
				Group stagingGroup = group.getStagingGroup();
				stagingGroupId = stagingGroup.getGroupId();
			}
			
			if ((liveGroupId != 0) && (stagingGroupId != 0)) {
				 groupName = StagingUtil.getSchedulerGroupName( DestinationNames.LAYOUTS_LOCAL_PUBLISHER, liveGroupId);
				SchedulerEngineHelperUtil.delete( groupName, StorageType.PERSISTED);
				 groupName = StagingUtil.getSchedulerGroupName( DestinationNames.LAYOUTS_LOCAL_PUBLISHER, stagingGroupId);
				SchedulerEngineHelperUtil.delete( groupName, StorageType.PERSISTED);
			}
			
		}
		
		catch (Exception exception) {
			_log.error( "Unable to unschedule events for group: " + group.getGroupId(), exception);
		}
		
	}
	
	protected void validateFriendlyURL( long companyId, long groupId, long classNameId, long classPK, String friendlyURL) throws PortalException {
		Company company = companyPersistence.findByPrimaryKey(companyId);
		if (company.isSystem()) {
			return;
		}
		
		if (Validator.isNull(friendlyURL)) {
			return;
		}
		
		int exceptionType = LayoutImpl.validateFriendlyURL(friendlyURL);
		if (exceptionType != -1) {
			throw new GroupFriendlyURLException(exceptionType);
		}
		
		Group group = groupPersistence.fetchByC_F(companyId, friendlyURL);
		if ((group != null) && (group.getGroupId() != groupId)) {
			GroupFriendlyURLException groupFriendlyURLException = new GroupFriendlyURLException( GroupFriendlyURLException.DUPLICATE);
			groupFriendlyURLException.setDuplicateClassPK(group.getGroupId());
			groupFriendlyURLException.setDuplicateClassName( Group.class.getName());
			throw groupFriendlyURLException;
		}
		
		String groupIdFriendlyURL = friendlyURL.substring(1);
		if (Validator.isNumber(groupIdFriendlyURL)) {
			long groupClassNameId = classNameLocalService.getClassNameId( Group.class);
			if (((classNameId != groupClassNameId) && !groupIdFriendlyURL.equals(String.valueOf(classPK)) && !PropsValues.USERS_SCREEN_NAME_ALLOW_NUMERIC) || (classNameId == groupClassNameId)) {
				GroupFriendlyURLException groupFriendlyURLException = new GroupFriendlyURLException( GroupFriendlyURLException.POSSIBLE_DUPLICATE);
				groupFriendlyURLException.setKeywordConflict( groupIdFriendlyURL);
				throw groupFriendlyURLException;
			}
			
		}
		
		if (StringUtil.count(friendlyURL, CharPool.SLASH) > 1) {
			throw new GroupFriendlyURLException( GroupFriendlyURLException.TOO_DEEP);
		}
		
		if (StringUtil.endsWith(friendlyURL, CharPool.DASH)) {
			throw new GroupFriendlyURLException( GroupFriendlyURLException.ENDS_WITH_DASH);
		}
		
		if (StringUtil.equals(friendlyURL, "/.") || StringUtil.equals(friendlyURL, "/..")) {
			throw new GroupFriendlyURLException( GroupFriendlyURLException.INVALID_CHARACTERS);
		}
		
	}
	
	protected void validateGroupKey( long groupId, long companyId, String groupKey, int type, boolean site) throws PortalException {
		int groupKeyMaxLength = ModelHintsUtil.getMaxLength( Group.class.getName(), "groupKey");
		if (Validator.isNull(groupKey) || Validator.isNumber(groupKey) || groupKey.contains(StringPool.STAR) || groupKey.contains(ORGANIZATION_NAME_SUFFIX) || (groupKey.length() > groupKeyMaxLength)) {
			throw new GroupKeyException();
		}
		
		try {
			Group group = groupFinder.findByC_GK(companyId, groupKey);
			if ((groupId <= 0) || (group.getGroupId() != groupId)) {
				throw new DuplicateGroupException("{groupId=" + groupId + "}");
			}
			
		}
		
		catch (NoSuchGroupException noSuchGroupException) {
			 if (_log.isDebugEnabled()) {
				_log.debug(noSuchGroupException, noSuchGroupException);
			}
			
		}
		
		if (site || (type == GroupConstants.TYPE_DEPOT)) {
			try {
				Company company = companyLocalService.getCompany(companyId);
				if (groupKey.equals(company.getName())) {
					throw new DuplicateGroupException();
				}
				
			}
			
			catch (NoSuchCompanyException noSuchCompanyException) {
				if (_log.isDebugEnabled()) {
					_log.debug(noSuchCompanyException, noSuchCompanyException);
				}
				
			}
			
		}
		
	}
	
	protected void validateInheritContent( long parentGroupId, boolean inheritContent) throws GroupInheritContentException {
		if (!inheritContent) {
			return;
		}
		
		if (parentGroupId == GroupConstants.DEFAULT_PARENT_GROUP_ID) {
			throw new GroupInheritContentException();
		}
		
		Group parentGroup = groupPersistence.fetchByPrimaryKey(parentGroupId);
		if (parentGroup.isInheritContent()) {
			throw new GroupInheritContentException();
		}
		
	}
	
	protected void validateLanguageIds( long groupId, String defaultLanguageId, String languageIds) throws PortalException {
		String[] languageIdsArray = StringUtil.split(languageIds);
		for (String languageId : languageIdsArray) {
			if (!LanguageUtil.isAvailableLocale( groupId, LocaleUtil.fromLanguageId(languageId))) {
				LocaleException localeException = new LocaleException( LocaleException.TYPE_DISPLAY_SETTINGS);
				localeException.setSourceAvailableLocales( LanguageUtil.getAvailableLocales());
				localeException.setTargetAvailableLocales( Arrays.asList( LocaleUtil.fromLanguageIds(languageIdsArray)));
				throw localeException;
			}
			
		}
		
		if (!ArrayUtil.contains(languageIdsArray, defaultLanguageId)) {
			LocaleException localeException = new LocaleException( LocaleException.TYPE_DEFAULT);
			localeException.setSourceAvailableLocales( LanguageUtil.getAvailableLocales());
			localeException.setTargetAvailableLocales( Arrays.asList(LocaleUtil.fromLanguageIds(languageIdsArray)));
			throw localeException;
		}
		
	}
	
	protected void validateParentGroup(long groupId, long parentGroupId) throws PortalException {
		if (parentGroupId == GroupConstants.DEFAULT_PARENT_GROUP_ID) {
			return;
		}
		
		if (groupId == parentGroupId) {
			throw new GroupParentException.MustNotBeOwnParent(groupId);
		}
		
		Group group = groupPersistence.fetchByPrimaryKey(groupId);
		if (group == null) {
			return;
		}
		
		if ((groupId > 0) && (parentGroupId != GroupConstants.DEFAULT_PARENT_GROUP_ID)) {
			 if (isParentGroup(groupId, parentGroupId)) {
				throw new GroupParentException.MustNotHaveChildParent( groupId, parentGroupId);
			}
			
		}
		
		if (group.isStagingGroup()) {
			Group parentGroup = groupPersistence.findByPrimaryKey( parentGroupId);
			Group stagingGroup = parentGroup.getStagingGroup();
			long stagingGroupId = stagingGroup.getGroupId();
			if (groupId == stagingGroupId) {
				throw new GroupParentException.MustNotHaveStagingParent( groupId, stagingGroupId);
			}
			
		}
		
	}
	
	protected void validateRemoteGroup( long groupId, long remoteGroupId, String remoteAddress, int remotePort, String remotePathContext, boolean secureConnection) throws PortalException {
		if (remoteGroupId <= 0) {
			RemoteOptionsException remoteOptionsException = new RemoteOptionsException( RemoteOptionsException.REMOTE_GROUP_ID);
			remoteOptionsException.setRemoteGroupId(remoteGroupId);
			throw remoteOptionsException;
		}
		
		Thread currentThread = Thread.currentThread();
		ClassLoader contextClassLoader = currentThread.getContextClassLoader();
		PermissionChecker permissionChecker = PermissionThreadLocal.getPermissionChecker();
		User user = permissionChecker.getUser();
		String remoteURL = StagingURLHelperUtil.buildRemoteURL( remoteAddress, remotePort, remotePathContext, secureConnection);
		HttpPrincipal httpPrincipal = new HttpPrincipal( remoteURL, user.getLogin(), user.getPassword(), user.isPasswordEncrypted());
		try {
			currentThread.setContextClassLoader( PortalClassLoaderUtil.getClassLoader());
			 try {
				MethodKey methodKey = new MethodKey( GroupService.class, "checkRemoteStagingGroup", _CHECK_REMOTE_STAGING_GROUP_PARAMETER_TYPES);
				MethodHandler methodHandler = new MethodHandler( methodKey, remoteGroupId);
				try {
					TunnelUtil.invoke(httpPrincipal, methodHandler);
				}
				
				catch (Exception exception) {
					if (exception instanceof PortalException) {
						throw (PortalException)exception;
					}
					
					throw new SystemException(exception);
				}
				
			}
			
			catch (SystemException systemException) {
				if (systemException.getCause() instanceof ConnectException) {
					_log.error( "Unable to connect to remote live: " + systemException.getMessage());
					if (_log.isDebugEnabled()) {
						_log.debug(systemException, systemException);
					}
					
				}
				
				else {
					_log.error(systemException, systemException);
				}
				
				throw systemException;
			}
			
			 Group group = groupLocalService.getGroup(groupId);
			Group remoteGroup = GroupServiceHttp.getGroup( httpPrincipal, remoteGroupId);
			if ((group.isCompany() ^ isCompanyGroup(httpPrincipal, remoteGroup)) || (group.isDepot() ^ remoteGroup.isDepot())) {
				RemoteExportException remoteExportException = new RemoteExportException( RemoteExportException.INVALID_GROUP);
				remoteExportException.setGroupId(remoteGroupId);
				throw remoteExportException;
			}
			
		}
		
		catch (NoSuchGroupException noSuchGroupException) {
			 if (_log.isDebugEnabled()) {
				_log.debug(noSuchGroupException, noSuchGroupException);
			}
			
			RemoteExportException remoteExportException = new RemoteExportException(RemoteExportException.NO_GROUP);
			remoteExportException.setGroupId(remoteGroupId);
			throw remoteExportException;
		}
		
		catch (PrincipalException principalException) {
			 if (_log.isDebugEnabled()) {
				_log.debug(principalException, principalException);
			}
			
			RemoteExportException remoteExportException = new RemoteExportException(RemoteExportException.NO_PERMISSIONS);
			remoteExportException.setGroupId(remoteGroupId);
			throw remoteExportException;
		}
		
		catch (RemoteAuthException remoteAuthException) {
			 if (_log.isDebugEnabled()) {
				_log.debug(remoteAuthException, remoteAuthException);
			}
			
			remoteAuthException.setURL(remoteURL);
			throw remoteAuthException;
		}
		
		catch (SystemException systemException) {
			 if (_log.isDebugEnabled()) {
				_log.debug(systemException, systemException);
			}
			
			RemoteExportException remoteExportException = new RemoteExportException( RemoteExportException.BAD_CONNECTION, systemException.getMessage());
			remoteExportException.setURL(remoteURL);
			throw remoteExportException;
		}
		
		finally {
			currentThread.setContextClassLoader(contextClassLoader);
		}
		
	}
	
	protected File publicLARFile;
	private Map<Locale, String> _normalizeNameMap(Map<Locale, String> nameMap) {
		Map<Locale, String> normalizedNameMap = new HashMap<>();
		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			String value = entry.getValue();
			if (Validator.isNotNull(value)) {
				normalizedNameMap.put(entry.getKey(), StringUtil.trim(value));
			}
			
		}
		
		return normalizedNameMap;
	}
	
	private void _validateGroupKeyChange(long groupId, String typeSettings) throws PortalException {
		Group group = groupPersistence.findByPrimaryKey(groupId);
		if (!Objects.equals(group.getClassName(), Group.class.getName()) && !group.isDepot()) {
			return;
		}
		
		UnicodeProperties typeSettingsUnicodeProperties = new UnicodeProperties( true);
		typeSettingsUnicodeProperties.fastLoad(typeSettings);
		String defaultLanguageId = typeSettingsUnicodeProperties.getProperty( "languageId", LocaleUtil.toLanguageId(LocaleUtil.getDefault()));
		Locale defaultLocale = LocaleUtil.fromLanguageId(defaultLanguageId);
		Map<Locale, String> nameMap = group.getNameMap();
		if ((nameMap != null) && Validator.isNotNull(nameMap.get(defaultLocale)) && (group.getCompanyId() > 0)) {
			validateGroupKey( group.getGroupId(), group.getCompanyId(), nameMap.get(defaultLocale), group.getType(), group.isSite());
		}
		
	}
	
	private static final Class<?>[] _CHECK_REMOTE_STAGING_GROUP_PARAMETER_TYPES = new Class<?>[] { 			long.class };
	private static final Log _log = LogFactoryUtil.getLog( GroupLocalServiceImpl.class);
	private static volatile ReindexerBridge _reindexerBridge = ServiceProxyFactory.newServiceTrackedInstance( ReindexerBridge.class, GroupLocalServiceImpl.class, "_reindexerBridge", false);
	private volatile long[] _classNameIds;
	private volatile long[] _complexSQLClassNameIds;
	private final Map<String, Group> _systemGroupsMap = new HashMap<>();
}

