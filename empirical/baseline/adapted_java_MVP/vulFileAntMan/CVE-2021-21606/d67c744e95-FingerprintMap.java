package hudson.model;
import hudson.Util;
import hudson.util.KeyedDataStorage;
import jenkins.fingerprints.FingerprintStorage;
import jenkins.model.Jenkins;
import java.io.IOException;
import java.util.Locale;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
public final class FingerprintMap extends KeyedDataStorage<Fingerprint,FingerprintMap.FingerprintParams> {
    public boolean isReady() {
        return FingerprintStorage.get().isReady();
    }
    
    public @NonNull Fingerprint getOrCreate(@CheckForNull AbstractBuild build, @NonNull String fileName, @NonNull byte[] md5sum) throws IOException {
        return getOrCreate(build,fileName, Util.toHexString(md5sum));
    }
    
    public @NonNull Fingerprint getOrCreate(@CheckForNull AbstractBuild build, @NonNull String fileName, @NonNull String md5sum) throws IOException {
        return super.getOrCreate(md5sum, new FingerprintParams(build,fileName));
    }
    
    public @NonNull Fingerprint getOrCreate(@CheckForNull Run build, @NonNull String fileName, @NonNull String md5sum) throws IOException {
        return super.getOrCreate(md5sum, new FingerprintParams(build,fileName));
    }
    
    protected Fingerprint get(String md5sum, boolean createIfNotExist, FingerprintParams createParams) throws IOException {
        if(md5sum.length()!=32) return null;    
        md5sum = md5sum.toLowerCase(Locale.ENGLISH);
        return super.get(md5sum,createIfNotExist,createParams);
    }
    
    private byte[] toByteArray(String md5sum) {
        byte[] data = new byte[16];
        for( int i=0; i<md5sum.length(); i+=2 ) data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);
        return data;
    }
    
    protected @NonNull Fingerprint create(@NonNull String md5sum, @NonNull FingerprintParams createParams) throws IOException {
        return new Fingerprint(createParams.build, createParams.fileName, toByteArray(md5sum));
    }
    
    protected @CheckForNull Fingerprint load(@NonNull String key) throws IOException {
        return Fingerprint.load(key);
    }
    
static class FingerprintParams {
    final @CheckForNull Run build;
    final String fileName;
    public FingerprintParams(@CheckForNull Run build, @NonNull String fileName) {
        this.build = build;
        this.fileName = fileName;
        assert fileName!=null;
    }
    
}

}


