package org.keycloak.services.managers;
import java.util.List;
import java.util.Objects;
import org.jboss.logging.Logger;
import org.keycloak.models.AuthenticatedClientSessionModel;
import org.keycloak.models.KeycloakSession;
import org.keycloak.models.RealmModel;
import org.keycloak.models.UserSessionModel;
import static org.keycloak.utils.LockObjectsForModification.lockUserSessionsForModification;
public class UserSessionCrossDCManager {
    private static final Logger logger = Logger.getLogger(UserSessionCrossDCManager.class);
    private final KeycloakSession kcSession;
    public UserSessionCrossDCManager(KeycloakSession session) {
        this.kcSession = session;
    }
    
    public UserSessionModel getUserSessionWithClient(RealmModel realm, String id, boolean offline, String clientUUID) {
        return kcSession.sessions().getUserSessionWithPredicate(realm, id, offline, userSession -> userSession.getAuthenticatedClientSessionByClient(clientUUID) != null);
    }
    
    public UserSessionModel getUserSessionWithClient(RealmModel realm, String id, String clientUUID) {
        return kcSession.sessions().getUserSessionWithPredicate(realm, id, false, (UserSessionModel userSession) -> {
            AuthenticatedClientSessionModel authSessions = userSession.getAuthenticatedClientSessionByClient(clientUUID);
            return authSessions != null;
        }
        
);
    }
    
    public UserSessionModel getUserSessionIfExistsRemotely(AuthenticationSessionManager asm, RealmModel realm) {
        List<String> sessionCookies = asm.getAuthSessionCookies(realm);
        return sessionCookies.stream().map(oldEncodedId -> {
            AuthSessionId authSessionId = asm.decodeAuthSessionId(oldEncodedId);
            String sessionId = authSessionId.getDecodedId();
            lockUserSessionsForModification(kcSession, () -> kcSession.sessions().getUserSessionWithPredicate(realm, sessionId, false, (UserSessionModel userSession2) -> userSession2 == null));
            UserSessionModel userSession = lockUserSessionsForModification(kcSession, () -> kcSession.sessions().getUserSession(realm, sessionId));
            if (userSession != null) {
                asm.reencodeAuthSessionCookie(oldEncodedId, authSessionId, realm);
                return userSession;
            }
            
            return null;
        }
).filter(userSession -> Objects.nonNull(userSession)).findFirst().orElse(null);
    }
    
}


