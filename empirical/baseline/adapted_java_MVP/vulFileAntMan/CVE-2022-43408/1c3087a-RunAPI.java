package com.cloudbees.workflow.rest.endpoints;
import com.cloudbees.workflow.rest.AbstractWorkflowRunActionHandler;
import com.cloudbees.workflow.rest.external.BuildArtifactExt;
import com.cloudbees.workflow.rest.external.ChangeSetExt;
import com.cloudbees.workflow.rest.external.PendingInputActionsExt;
import com.cloudbees.workflow.rest.external.RunExt;
import com.cloudbees.workflow.util.ModelUtil;
import com.cloudbees.workflow.util.ServeJson;
import hudson.Extension;
import hudson.model.Run;
import hudson.scm.ChangeLogSet;
import org.jenkinsci.plugins.workflow.job.WorkflowJob;
import org.jenkinsci.plugins.workflow.job.WorkflowRun;
import org.jenkinsci.plugins.workflow.support.steps.input.InputAction;
import org.jenkinsci.plugins.workflow.support.steps.input.InputStepExecution;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.DoNotUse;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.interceptor.RequirePOST;
import javax.servlet.ServletException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeoutException;
public class RunAPI extends AbstractWorkflowRunActionHandler {
    public static String getUrl(WorkflowRun run) {
        return ModelUtil.getFullItemUrl(run.getUrl()) + URL_BASE + "/";
    }
    
    public static String getDescribeUrl(WorkflowRun run) {
        return getUrl(run) + "describe";
    }
    
    public static String getChangeSetsUrl(WorkflowRun run) {
        return getUrl(run) + "changesets";
    }
    
    public static String getPendingInputActionsUrl(WorkflowRun run) {
        return getUrl(run) + "pendingInputActions";
    }
    
    public static String getNextPendingInputActionUrl(WorkflowRun run) {
        return getUrl(run) + "nextPendingInputAction";
    }
    
    public static String getArtifactsUrl(WorkflowRun run) {
        return getUrl(run) + "artifacts";
    }
    
    public static String getInputStepSubmitUrl(WorkflowRun run, String inputId) {
        return getUrl(run) + "inputSubmit?inputId=" + inputId;
    }
    
    public static String getArtifactUrl(WorkflowRun run, Run<WorkflowJob, WorkflowRun>.Artifact artifact) {
        return ModelUtil.getFullItemUrl(run.getUrl()) + "artifact/" + artifact.getHref();
    }
    
    public RunExt doIndex() {
        return doDescribe(false);
    }
    
    public RunExt doDescribe(@QueryParameter boolean fullStages) {
        return fullStages ? RunExt.create(getRun()) : RunExt.create(getRun()).createWrapper();
    }
    
    public List<ChangeSetExt> doChangesets() {
        List<ChangeSetExt> changeSetExts = new ArrayList<>();
        List<ChangeLogSet<? extends ChangeLogSet.Entry>> changesets = getRun().getChangeSets();
        for (ChangeLogSet<? extends ChangeLogSet.Entry> changeset : changesets) {
            changeSetExts.add(ChangeSetExt.create(changeset, getRun()));
        }
        
        return changeSetExts;
    }
    
    public List<PendingInputActionsExt> doPendingInputActions() {
        List<PendingInputActionsExt> pendingInputActions = new ArrayList<>();
        InputAction inputAction = getRun().getAction(InputAction.class);
        if (inputAction != null) {
            try {
                List<InputStepExecution> executions = inputAction.getExecutions();
                if (executions != null && !executions.isEmpty()) {
                    for (InputStepExecution inputStepExecution : executions) {
                        pendingInputActions.add(PendingInputActionsExt.create(inputStepExecution, getRun()));
                    }
                    
                }
                
            }
             catch (InterruptedException | TimeoutException e) {
                throw new RuntimeException(e);
            }
            
        }
        
        return pendingInputActions;
    }
    
    public PendingInputActionsExt doNextPendingInputAction() {
        InputAction inputAction = getRun().getAction(InputAction.class);
        if (inputAction != null) {
            try {
                List<InputStepExecution> executions = inputAction.getExecutions();
                if (executions != null && !executions.isEmpty()) {
                    for (InputStepExecution inputStepExecution : executions) {
                        if (!inputStepExecution.isSettled()) {
                            return PendingInputActionsExt.create(inputStepExecution, getRun());
                        }
                        
                    }
                    
                }
                
            }
             catch (InterruptedException | TimeoutException e) {
                throw new RuntimeException(e);
            }
            
        }
        
        return null;
    }
    
    public List<BuildArtifactExt> doArtifacts() {
        List<BuildArtifactExt> artifactExts = new ArrayList<>();
        List<Run<WorkflowJob, WorkflowRun>.Artifact> artifacts = getRun().getArtifacts();
        if (artifacts != null && !artifacts.isEmpty()) {
            for (Run<WorkflowJob, WorkflowRun>.Artifact artifact : artifacts) {
                artifactExts.add(BuildArtifactExt.create(artifact, getRun()));
            }
            
        }
        
        return artifactExts;
    }
    
    public void doInputSubmit(@QueryParameter String inputId) throws ServletException {
        InputAction inputAction = getRun().getAction(InputAction.class);
        if (inputAction == null) {
            throw new ServletException("Error processing Input Submit request. This Run instance does not" + " have an InputAction.");
        }
        
        try {
            InputStepExecution execution = inputAction.getExecution(inputId);
            if (execution == null) {
                throw new ServletException(String.format("Error processing Input Submit request. This Run instance does not" + " have an Input with an ID of '%s'. The input ID may not be pre-normalized appropriately.", inputId));
            }
            
            try {
                execution.doProceed(Stapler.getCurrentRequest());
            }
             catch (Exception e) {
                throw new ServletException("Error processing Input Submit request.", e);
            }
            
        }
         catch (InterruptedException | TimeoutException e) {
            throw new RuntimeException(e);
        }
        
    }
    
}


