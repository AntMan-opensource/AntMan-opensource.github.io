package com.cloudbees.workflow.rest.external;
import com.cloudbees.workflow.rest.endpoints.RunAPI;
import com.cloudbees.workflow.util.ModelUtil;
import com.fasterxml.jackson.annotation.JsonInclude;
import hudson.model.ParameterDefinition;
import org.jenkinsci.plugins.workflow.job.WorkflowRun;
import org.jenkinsci.plugins.workflow.support.steps.input.InputAction;
import org.jenkinsci.plugins.workflow.support.steps.input.InputStepExecution;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeoutException;
public class PendingInputActionsExt {
    private String id;
    private String proceedText;
    private String message;
    private List<InputParameterDefExt> inputs;
    private String proceedUrl; 
    private String abortUrl; 
    private String redirectApprovalUrl;
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getProceedText() {
        return proceedText;
    }
    
    public void setProceedText(String proceedText) {
        this.proceedText = proceedText;
    }
    
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String message) {
        this.message = message;
    }
    
    public List<InputParameterDefExt> getInputs() {
        return inputs;
    }
    
    public void setInputs(List<InputParameterDefExt> inputs) {
        this.inputs = inputs;
    }
    
    public String getProceedUrl() {
        return proceedUrl;
    }
    
    public void setProceedUrl(String proceedUrl) {
        this.proceedUrl = proceedUrl;
    }
    
    public String getAbortUrl() {
        return abortUrl;
    }
    
    public void setAbortUrl(String abortUrl) {
        this.abortUrl = abortUrl;
    }
    
    public String getRedirectApprovalUrl() {
        return redirectApprovalUrl;
    }
    
    public void setRedirectApprovalUrl(String redirectApprovalUrl) {
        this.redirectApprovalUrl = redirectApprovalUrl;
    }
    
    public static PendingInputActionsExt create(InputStepExecution inputStepExecution, WorkflowRun run) {
        PendingInputActionsExt inputActionExt = new PendingInputActionsExt();
        String inputId = inputStepExecution.getId();
        inputActionExt.setId(inputId);
        inputActionExt.setProceedText(inputStepExecution.getInput().getOk());
        inputActionExt.setMessage(inputStepExecution.getInput().getMessage());
        String runUrl = ModelUtil.getFullItemUrl(run.getUrl());
        inputActionExt.setInputs(getInputParams(inputId, run));
        inputActionExt.setProceedUrl(RunAPI.getInputStepSubmitUrl(run, inputId));
        inputActionExt.setAbortUrl(runUrl + "input/" + inputId + "/abort");
        inputActionExt.setRedirectApprovalUrl(runUrl + "input/");
        return inputActionExt;
    }
    
    private static List<InputParameterDefExt> getInputParams(String inputId, WorkflowRun run) {
        InputAction inputAction = run.getAction(InputAction.class);
        if (inputAction != null) {
            try {
                InputStepExecution execution = inputAction.getExecution(inputId);
                if (execution != null) {
                    List<ParameterDefinition> inputParamDefs = execution.getInput().getParameters();
                    List<InputParameterDefExt> inputParameters = new ArrayList<>();
                    for (ParameterDefinition inputParamDef : inputParamDefs) {
                        inputParameters.add(new InputParameterDefExt(inputParamDef));
                    }
                    
                    return inputParameters;
                }
                
            }
             catch (InterruptedException | TimeoutException e) {
                throw new RuntimeException(e);
            }
            
        }
        
        return Collections.emptyList();
    }
    
}


