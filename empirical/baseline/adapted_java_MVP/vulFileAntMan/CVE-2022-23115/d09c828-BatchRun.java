package hudson.plugins.batch_task;
import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.*;
import hudson.model.*;
import hudson.model.Queue.Executable;
import hudson.slaves.WorkspaceList.Lease;
import hudson.tasks.BatchFile;
import hudson.tasks.CommandInterpreter;
import hudson.tasks.Shell;
import hudson.util.Iterators;
import org.jenkinsci.lib.envinject.EnvInjectException;
import org.jenkinsci.lib.envinject.service.EnvVarsResolver;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.framework.io.LargeText;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
public final class BatchRun extends Actionable implements Executable, Comparable<BatchRun> {
    protected Result result;
    public final Calendar timestamp;
    protected transient BatchRunAction parent;
    public final int id;
    public final String taskName;
    protected long duration;
    protected BatchRun(Calendar timestamp, BatchRunAction parent, int id, BatchTask task) {
        this.timestamp = timestamp;
        this.parent = parent;
        this.id = id;
        this.taskName = task.name;
    }
    
    public Result getResult() {
        return result;
    }
    
    public boolean isRunning() {
        return result == null;
    }
    
    public String getTimestampString() {
        long time = new GregorianCalendar().getTimeInMillis() - timestamp.getTimeInMillis();
        return Util.getTimeSpanString(time);
    }
    
    public File getLogFile() {
        return new File(parent.owner.getRootDir(), "task-" + id + ".log");
    }
    
    public BatchTask getParent() {
        BatchTaskAction jta = parent.owner.getProject().getAction(BatchTaskAction.class);
        return jta.getTask(taskName);
    }
    
    public BatchRunAction getOwner() {
        return parent;
    }
    
    public BallColor getIconColor() {
        if (!isRunning()) {
            return getResult().color;
        }
        
        BatchRun previous = getPrevious();
        BallColor baseColor;
        if (previous == null){
            baseColor = BallColor.GREY_ANIME;
}
        else{
            baseColor = previous.getIconColor();
}
        return baseColor.anime();
    }
    
    public String getBuildStatusIconClassName() {
      return getIconColor().getIconClassName();
    }
    
    public String getBuildStatusUrl() {
        return getIconColor().getImage();
    }
    
    public BatchRun getPrevious() {
        for (AbstractBuild<?, ?> b = parent.owner; b != null; b = b.getPreviousBuild()) {
            BatchRunAction records = b.getAction(BatchRunAction.class);
            if (records == null) continue;
            for (BatchRun r : records.records) {
                if (r.taskName.equals(taskName) && r.timestamp.compareTo(this.timestamp) < 0) {
                    return r;
}
            }
            
        }
        
        return null;
    }
    
    public BatchRun getNext() {
        for (AbstractBuild<?, ?> b = parent.owner; b != null; b = b.getNextBuild()) {
            BatchRunAction records = b.getAction(BatchRunAction.class);
            if (records == null) continue;
            for (BatchRun r : Iterators.reverse(records.records)) {
                if (r.taskName.equals(taskName) && r.timestamp.compareTo(this.timestamp) > 0) {
                    return r;
}
            }
            
        }
        
        return null;
    }
    
    public String getUrl() {
        return parent.owner.getUrl() + "batchTasks/" + id;
    }
    
    public String getSearchUrl() {
        return getUrl();
    }
    
    public String getDisplayName() {
        return taskName + ' ' + getBuildNumber();
    }
    
    public String getNumber() {
        return parent.owner.getNumber() + "-" + id;
    }
    
    public String getBuildNumber() {
        return "#" + parent.owner.getNumber() + '-' + id;
    }
    
    public String getDurationString() {
        if (isRunning()){
            return Util.getTimeSpanString(System.currentTimeMillis() - timestamp.getTimeInMillis()) + " and counting";
}
        return Util.getTimeSpanString(duration);
    }
    
    public long getDuration() {
        return duration;
    }
    
    public void run() {
        StreamBuildListener listener = null;
        try {
            long start = System.currentTimeMillis();
            listener = new StreamBuildListener(new FileOutputStream(getLogFile()));
            Executor executor = Executor.currentExecutor();
            if (executor == null){
                throw new AbortException("ERROR: no executor");
}
            Node node = executor.getOwner().getNode();
            if (node == null){
                throw new AbortException("ERROR: no node present");
}
            Launcher launcher = node.createLauncher(listener);
            BatchTask task = getParent();
            if (task == null){
                throw new AbortException("ERROR: undefined task \"" + taskName + "\"");
}
            AbstractBuild<?, ?> lb = task.owner.getLastBuild();
            if (lb == null){
                throw new AbortException("ERROR: task \"" + taskName + "\" doesn't have a last build");
}
            FilePath ws = lb.getWorkspace();
            if (ws == null){
                throw new AbortException(lb.getFullDisplayName() + " doesn't have a workspace.");
}
            try {
                EnvVarsResolver envVarsResolver = new EnvVarsResolver();
                final ArrayList<Environment> buildEnvironments = new ArrayList<Environment>();
                buildEnvironments.add(Environment.create(new EnvVars(envVarsResolver.getEnVars(lb))));
                EnvironmentContributingAction envAct = new EnvironmentContributingAction() {                     public void buildEnvVars(AbstractBuild<?, ?> build, EnvVars env) { for (Environment e : buildEnvironments) e.buildEnvVars(env);
                        env.put("TASK_ID", getNumber());
                        out: for (CauseAction ca : getActions(CauseAction.class)) for (Cause c : ca.getCauses()) if (c instanceof Cause.UserCause) {
                                    env.put("HUDSON_USER", ((Cause.UserCause) c).getUserName());
                                    break out;
                                }
                                
                    }
                    
                    public String getDisplayName() {
                        return null;
                    }
                    
                    public String getIconFileName() {
                        return null;
                    }
                    
                    public String getUrlName() {
                        return null;
                    }
                    
                };
                CommandInterpreter batchRunner;
                if (launcher.isUnix()){
                    batchRunner = new Shell(task.script);
}
                else{
                    batchRunner = new BatchFile(task.script);
}
                Lease wsLease = null;
                try {
                    Node builtOn = lb.getBuiltOn();
                    if (builtOn == null){
                        throw new AbortException("ERROR: no node for last build");
}
                    Computer computer = builtOn.toComputer();
                    if (computer == null){
                        throw new AbortException("ERROR: no computer");
}
                    wsLease = computer.getWorkspaceList().acquire(ws, !task.owner.isConcurrentBuild());
                    lb.getActions().add(envAct);
                    result = batchRunner.perform(lb, launcher, listener) ? Result.SUCCESS : Result.FAILURE;
                }
                 finally {
                    if (wsLease != null) wsLease.release();
                    lb.getActions().remove(envAct);
                    for (Environment e : buildEnvironments) e.tearDown(lb, listener); } } catch (InterruptedException e) {
                listener.getLogger().println("ABORTED");
                result = Result.ABORTED;
            }
             catch (EnvInjectException e) {
                e.printStackTrace();  
            }
            
            duration = System.currentTimeMillis() - start;
            parent.owner.save();
        }
         catch (AbortException e) {
            result = Result.FAILURE;
            listener.error(e.getMessage());
        }
         catch (IOException e) {
            result = Result.FAILURE;
            LOGGER.log(Level.SEVERE, "Failed to write " + getLogFile(), e);
        }
         finally {
            if (listener != null){
                listener.getLogger().close();
}
            if (result == null){
                result = Result.FAILURE;
}
        }
        
    }
    
    public void doProgressiveLog(StaplerRequest req, StaplerResponse rsp) throws IOException {
        new LargeText(getLogFile(), !isRunning()).doProgressText(req, rsp);
    }
    
    public String toString() {
        return parent.owner.toString() + '-' + id;
    }
    
    public int compareTo(BatchRun that) {
        return that.timestamp.compareTo(this.timestamp);
    }
    
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BatchRun batchRun = (BatchRun) o;
        return id == batchRun.id && duration == batchRun.duration && Objects.equals(result, batchRun.result) && Objects.equals(timestamp, batchRun.timestamp) && Objects.equals(parent, batchRun.parent) && Objects.equals(taskName, batchRun.taskName);
    }
    
    public int hashCode() {
        return Objects.hash(result, timestamp, parent, id, taskName, duration);
    }
    
    public long getEstimatedDuration() {
        return getParent().getEstimatedDuration();
    }
    
    private static final Logger LOGGER = Logger.getLogger(BatchRun.class.getName());
}


