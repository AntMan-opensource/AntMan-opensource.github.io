package com.xpn.xwiki.objects.classes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.edit.EditException;
import org.xwiki.edit.Editor;
import org.xwiki.edit.EditorManager;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.syntax.SyntaxContent;
import org.xwiki.stability.Unstable;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.internal.velocity.VelocityEvaluator;
import com.xpn.xwiki.objects.BaseCollection;
import com.xpn.xwiki.objects.BaseProperty;
import com.xpn.xwiki.objects.LargeStringProperty;
import com.xpn.xwiki.objects.meta.PropertyMetaClass;
import com.xpn.xwiki.web.Utils;
public class TextAreaClass extends StringClass {
    public enum EditorType {
        PURE_TEXT("PureText"), TEXT("Text"), WYSIWYG("Wysiwyg");
        private static final Map<String, EditorType> editorTypeMap = Arrays.stream(EditorType.values()).collect(Collectors.toMap(e -> e.value.toLowerCase(), e -> e));
        private final String value;
        public static EditorType getByValue(String value) {
            return value != null ? editorTypeMap.get(value.toLowerCase()) : null;
        }
        
        private EditorType(String value) {
            this.value = value;
        }
        
        public String toString() {
            return this.value;
        }
        
    }
    
    public enum ContentType {
        PURE_TEXT("PureText"), WIKI_TEXT("FullyRenderedText"), VELOCITY_CODE("VelocityCode"), VELOCITYWIKI("VelocityWiki");
        private static final Map<String, ContentType> contentTypeMap = Arrays.stream(ContentType.values()).collect(Collectors.toMap(c -> c.value.toLowerCase(), c -> c));
        private final String value;
        public static ContentType getByValue(String value) {
            return value != null ? contentTypeMap.get(value.toLowerCase()) : null;
        }
        
        private ContentType(String value) {
            this.value = value;
        }
        
        public String toString() {
            return this.value;
        }
        
    }
    
    private static final long serialVersionUID = 1L;
    private static final String XCLASSNAME = "textarea";
    private static final Logger LOGGER = LoggerFactory.getLogger(TextAreaClass.class);
    public TextAreaClass(PropertyMetaClass wclass) {
        super(XCLASSNAME, "Text Area", wclass);
        setSize(40);
        setRows(5);
    }
    
    public TextAreaClass() {
        this(null);
    }
    
    public static EditorType getEditorType(ContentType contentType, EditorType def) {
        if (contentType != null && contentType != ContentType.WIKI_TEXT) {
            return EditorType.PURE_TEXT;
        }
        
        return def;
    }
    
    public static EditorType getEditorType(String contentType, EditorType def) {
        return getEditorType(ContentType.getByValue(contentType), def);
    }
    
    public static ContentType getContentType(EditorType editorType, ContentType def) {
        if (editorType != EditorType.PURE_TEXT) {
            return ContentType.WIKI_TEXT;
        }
        
        return def;
    }
    
    public BaseProperty newProperty() {
        BaseProperty property = new LargeStringProperty();
        property.setName(getName());
        return property;
    }
    
    public int getRows() {
        return getIntValue("rows");
    }
    
    public void setRows(int rows) {
        setIntValue("rows", rows);
    }
    
    public String getEditor() {
        String editor = getStringValue("editor").toLowerCase();
        if (EditorType.getByValue(editor) == null) {
            EditorType compatibleEditor = getEditorType(getContentType(), null);
            if (compatibleEditor != null) {
                return compatibleEditor.value.toLowerCase();
            }
            
        }
        
        return editor;
    }
    
    public void setEditor(String editor) {
        setStringValue("editor", editor);
    }
    
    public void setEditor(EditorType editorType) {
        setEditor(editorType.toString());
        ContentType compatible = getContentType(editorType, null);
        if (compatible != null) {
            setContentType(compatible);
        }
        
    }
    
    public String getContentType() {
        String result = getStringValue("contenttype").toLowerCase();
        if (result.isEmpty()) {
            result = ContentType.WIKI_TEXT.toString().toLowerCase();
        }
        
        return result;
    }
    
    public void setContentType(String contentType) {
        setStringValue("contenttype", contentType);
    }
    
    public void setContentType(ContentType contentType) {
        setContentType(contentType.toString());
        EditorType compatible = getEditorType(contentType, null);
        if (compatible != null) {
            setEditor(compatible);
        }
        
    }
    
    public boolean isWysiwyg(XWikiContext context) {
        return "wysiwyg".equals(getEditorType(context));
    }
    
    private String getEditorType(XWikiContext context) {
        String editorType = null;
        if (context != null && context.getRequest() != null) {
            editorType = context.getRequest().get("xeditmode");
        }
        
        if (isEmptyValue(editorType)) {
            editorType = getEditor();
            if (isEmptyValue(editorType) && context != null && context.getWiki() != null) {
                editorType = context.getWiki().getEditorPreference(context);
            }
            
        }
        
        return isEmptyValue(editorType) ? null : editorType.toLowerCase();
    }
    
    private boolean isEmptyValue(String value) {
        return StringUtils.isEmpty(value) || "---".equals(value);
    }
    
    public boolean isWikiContent() {
        String contentType = getContentType();
        if (contentType != null && !contentType.equals("puretext") && !contentType.equals("velocitycode")) {
            return true;
        }
         else {
            return false;
        }
        
    }
    
    public boolean isRestricted() {
        return getIntValue("restricted", 0) == 1;
    }
    
    public void setRestricted(boolean restricted) {
        setIntValue("restricted", restricted ? 1 : 0);
    }
    
    public void displayEdit(StringBuffer buffer, String name, String prefix, BaseCollection object, XWikiContext context) {
        String editorType = getEditorType(context);
        EditorManager editorManager = Utils.getComponent(EditorManager.class);
        Editor<SyntaxContent> editor = editorManager.getDefaultEditor(SyntaxContent.class, editorType);
        XWikiDocument ownerDocument = getObjectDocument(object, context);
        Map<String, Object> parameters = new HashMap<>();
        String fieldName = prefix + name;
        parameters.put("id", fieldName);
        parameters.put("name", fieldName);
        parameters.put("cols", getSize());
        parameters.put("rows", getRows());
        parameters.put("disabled", isDisabled());
        parameters.put("restricted", isRestricted() || (ownerDocument != null && ownerDocument.isRestricted()));
        parameters.put("sourceDocumentReference", object.getDocumentReference());
        Syntax syntax = null;
        String contentType = getContentType();
        if (StringUtils.equalsIgnoreCase(ContentType.PURE_TEXT.toString(), contentType) || StringUtils.equalsIgnoreCase(ContentType.VELOCITY_CODE.toString(), contentType)){
            syntax = Syntax.PLAIN_1_0;
        }
         else {
            syntax = "puretext".equals(editorType) ? Syntax.PLAIN_1_0 : getObjectDocumentSyntax(object, context);
        }
        
        SyntaxContent syntaxContent = new SyntaxContent(object.getStringValue(name), syntax);
        try {
            buffer.append(editor.render(syntaxContent, parameters));
        }
         catch (EditException e) {
            LOGGER.error("Failed to display the text area property.", e);
        }
        
    }
    
    public void displayView(StringBuffer buffer, String name, String prefix, BaseCollection object, XWikiContext context) {
        displayView(buffer, name, prefix, object, true, context);
    }
    
    public void displayView(StringBuffer buffer, String name, String prefix, BaseCollection object, boolean isolated, XWikiContext context) {
        String contentTypeString = getContentType();
        ContentType contentType = ContentType.getByValue(contentTypeString);
        if (contentType == ContentType.PURE_TEXT) {
            super.displayView(buffer, name, prefix, object, context);
        }
         else if (contentType == ContentType.VELOCITY_CODE) {
            StringBuffer result = new StringBuffer();
            super.displayView(result, name, prefix, object, context);
            if (getObjectDocumentSyntax(object, context).equals(Syntax.XWIKI_1_0)) {
                buffer.append(context.getWiki().parseContent(result.toString(), context));
            }
             else {
                buffer.append(result);
            }
            
        }
         else {
            BaseProperty property = (BaseProperty) object.safeget(name);
            if (property != null) {
                String content = property.toText();
                XWikiDocument sdoc = getObjectDocument(object, context);
                if (sdoc != null) {
                    if (contentType == ContentType.VELOCITYWIKI) {
                        VelocityEvaluator velocityEvaluator = Utils.getComponent(VelocityEvaluator.class);
                        content = velocityEvaluator.evaluateVelocityNoException(content, isolated ? sdoc.getDocumentReference() : null);
                    }
                    
                    if (!Objects.equals(sdoc.getAuthors().getEffectiveMetadataAuthor(), sdoc.getAuthors().getContentAuthor())) {
                        sdoc = sdoc.clone();
                        sdoc.getAuthors().setContentAuthor(sdoc.getAuthors().getEffectiveMetadataAuthor());
                    }
                    
                    buffer.append(context.getDoc().getRenderedContent(content, sdoc.getSyntax(), isRestricted(), sdoc, isolated, context));
                }
                 else {
                    buffer.append(content);
                }
                
            }
            
        }
        
    }
    
    private XWikiDocument getObjectDocument(BaseCollection object, XWikiContext context) {
        try {
            XWikiDocument doc = object.getOwnerDocument();
            if (doc == null) {
                doc = context.getWiki().getDocument(object.getDocumentReference(), context);
            }
            
            return doc;
        }
         catch (Exception e) {
            LOGGER.warn( "Error while getting the syntax corresponding to object [{}]. " + "Defaulting to using XWiki 1.0 syntax. Internal error [{}]", object.getReference(), ExceptionUtils.getRootCauseMessage(e));
        }
        
        return null;
    }
    
    private Syntax getObjectDocumentSyntax(BaseCollection object, XWikiContext context) {
        XWikiDocument doc = getObjectDocument(object, context);
        return doc != null && doc.getSyntax() != null ? doc.getSyntax() : Syntax.XWIKI_1_0;
    }
    
}


