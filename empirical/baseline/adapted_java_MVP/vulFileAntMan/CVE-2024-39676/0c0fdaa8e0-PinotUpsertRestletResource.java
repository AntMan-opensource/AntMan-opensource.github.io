package org.apache.pinot.controller.api.resources;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiKeyAuthDefinition;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.SecurityDefinition;
import io.swagger.annotations.SwaggerDefinition;
import java.io.IOException;
import java.util.List;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.pinot.controller.api.exception.ControllerApplicationException;
import org.apache.pinot.spi.config.table.TableConfig;
import org.apache.pinot.spi.data.FieldSpec;
import org.apache.pinot.spi.data.Schema;
import org.apache.pinot.spi.utils.JsonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import static org.apache.pinot.spi.utils.CommonConstants.SWAGGER_AUTHORIZATION_KEY;
@Api(tags = Constants.UPSERT_RESOURCE_TAG, authorizations = {@Authorization(value = SWAGGER_AUTHORIZATION_KEY)})
@SwaggerDefinition(securityDefinition = @SecurityDefinition(apiKeyAuthDefinitions = @ApiKeyAuthDefinition(name = HttpHeaders.AUTHORIZATION, in = ApiKeyAuthDefinition.ApiKeyLocation.HEADER, key = SWAGGER_AUTHORIZATION_KEY)))
public class PinotUpsertRestletResource {
  public static final Logger LOGGER = LoggerFactory.getLogger(PinotUpsertRestletResource.class);
  @ApiOperation(value = "Estimate memory usage for an upsert table", notes = "This API returns the estimated heap usage based on primary key column stats." + " This allows us to estimate table size before onboarding.")
  public String estimateHeapUsage(String tableSchemaConfigStr, @ApiParam(value = "cardinality", required = true) @QueryParam("cardinality") long cardinality, @ApiParam(value = "primaryKeySize", defaultValue = "-1") @QueryParam("primaryKeySize") int primaryKeySize, @ApiParam(value = "numPartitions", defaultValue = "-1") @QueryParam("numPartitions") int numPartitions) {
    ObjectNode resultData = JsonUtils.newObjectNode();
    TableAndSchemaConfig tableSchemaConfig;
    try {
      tableSchemaConfig = JsonUtils.stringToObject(tableSchemaConfigStr, TableAndSchemaConfig.class);
    }
     catch (IOException e) {
      throw new ControllerApplicationException(LOGGER, String.format("Invalid TableSchemaConfigs json string: %s", tableSchemaConfigStr), Response.Status.BAD_REQUEST, e);
    }
    
    TableConfig tableConfig = tableSchemaConfig.getTableConfig();
    resultData.put("tableName", tableConfig.getTableName());
    Schema schema = tableSchemaConfig.getSchema();
    int bytesPerKey = 0;
    List<String> primaryKeys = schema.getPrimaryKeyColumns();
    if (primaryKeySize > 0) {
      bytesPerKey = primaryKeySize;
    }
     else {
      for (String primaryKey : primaryKeys) {
        FieldSpec.DataType dt = schema.getFieldSpecFor(primaryKey).getDataType();
        if (!dt.isFixedWidth()) {
          String msg = "Primary key sizes much be provided for non fixed-width columns";
          throw new ControllerApplicationException(LOGGER, msg, Response.Status.BAD_REQUEST);
        }
         else {
          bytesPerKey += dt.size();
        }
        
      }
      
      bytesPerKey += 32;
    }
    
    int bytesPerValue = 60;
    List<String> comparisonColumns = tableConfig.getUpsertConfig().getComparisonColumns();
    if (comparisonColumns != null) {
      int bytesPerArrayElem = 8;  
      bytesPerValue = 52;
      for (String columnName : comparisonColumns) {
        FieldSpec.DataType dt = schema.getFieldSpecFor(columnName).getDataType();
        if (!dt.isFixedWidth()) {
          String msg = "Not support data types for the comparison column";
          throw new ControllerApplicationException(LOGGER, msg, Response.Status.BAD_REQUEST);
        }
         else {
          if (comparisonColumns.size() == 1) {
            bytesPerValue += dt.size();
          }
           else {
            bytesPerValue += bytesPerArrayElem + dt.size();
          }
          
        }
        
      }
      
      if (comparisonColumns.size() > 1) {
        bytesPerValue += 48 + 4;  
      }
      
    }
    
    resultData.put("bytesPerKey", bytesPerKey);
    resultData.put("bytesPerValue", bytesPerValue);
    long totalKeySpace = bytesPerKey * cardinality;
    long totalValueSpace = bytesPerValue * cardinality;
    long totalSpace = totalKeySpace + totalValueSpace;
    resultData.put("totalKeySpace(bytes)", totalKeySpace);
    resultData.put("totalValueSpace(bytes)", totalValueSpace);
    resultData.put("totalSpace(bytes)", totalSpace);
    if (numPartitions > 0) {
      double totalSpacePerPartition = (totalSpace * 1.0) / numPartitions;
      resultData.put("numPartitions", numPartitions);
      resultData.put("totalSpacePerPartition(bytes)", totalSpacePerPartition);
    }
    
    return resultData.toString();
  }
  
}


