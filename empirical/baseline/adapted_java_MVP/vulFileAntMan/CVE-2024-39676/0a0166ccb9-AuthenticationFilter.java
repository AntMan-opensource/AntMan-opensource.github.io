package org.apache.pinot.controller.api.access;
import com.google.common.annotations.VisibleForTesting;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Provider;
import javax.ws.rs.DELETE;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.ResourceInfo;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.UriInfo;
import org.apache.pinot.core.auth.ManualAuthorization;
import org.glassfish.grizzly.http.server.Request;
public class AuthenticationFilter implements ContainerRequestFilter {
  private static final Set<String> UNPROTECTED_PATHS = new HashSet<>(Arrays.asList("", "help", "auth/info", "auth/verify", "health"));
  private static final String KEY_TABLE_NAME = "tableName";
  private static final String KEY_TABLE_NAME_WITH_TYPE = "tableNameWithType";
  private static final String KEY_SCHEMA_NAME = "schemaName";
  @Inject
  Provider<Request> _requestProvider;
  @Inject
  AccessControlFactory _accessControlFactory;
  @Context
  ResourceInfo _resourceInfo;
  @Context
  HttpHeaders _httpHeaders;
  public void filter(ContainerRequestContext requestContext) throws IOException {
    Request request = _requestProvider.get();
    Method endpointMethod = _resourceInfo.getResourceMethod();
    AccessControl accessControl = _accessControlFactory.create();
    String endpointUrl = request.getRequestURI().substring(request.getContextPath().length()); 
    UriInfo uriInfo = requestContext.getUriInfo();
    if (isBaseFile(uriInfo.getPath()) || UNPROTECTED_PATHS.contains(uriInfo.getPath())) {
      return;
    }
    
    if (accessControl.protectAnnotatedOnly() && !endpointMethod.isAnnotationPresent(Authenticate.class)) {
      return;
    }
    
    if (endpointMethod.isAnnotationPresent(ManualAuthorization.class)) {
      return;
    }
    
    String tableName = extractTableName(uriInfo.getPathParameters(), uriInfo.getQueryParameters());
    AccessType accessType = extractAccessType(endpointMethod);
    AccessControlUtils.validatePermission(tableName, accessType, _httpHeaders, endpointUrl, accessControl);
  }
  
  @VisibleForTesting
  AccessType extractAccessType(Method endpointMethod) {
    if (endpointMethod.isAnnotationPresent(Authenticate.class)) {
      return endpointMethod.getAnnotation(Authenticate.class).value();
    }
     else {
      if (endpointMethod.getAnnotation(POST.class) != null) {
        return AccessType.CREATE;
      }
       else if (endpointMethod.getAnnotation(PUT.class) != null) {
        return AccessType.UPDATE;
      }
       else if (endpointMethod.getAnnotation(DELETE.class) != null) {
        return AccessType.DELETE;
      }
      
    }
    
    return AccessType.READ;
  }
  
  @VisibleForTesting
  static String extractTableName(MultivaluedMap<String, String> pathParameters, MultivaluedMap<String, String> queryParameters) {
    String tableName = extractTableName(pathParameters);
    if (tableName != null) {
      return tableName;
    }
    
    return extractTableName(queryParameters);
  }
  
  private static String extractTableName(MultivaluedMap<String, String> mmap) {
    if (mmap.containsKey(KEY_TABLE_NAME)) {
      return mmap.getFirst(KEY_TABLE_NAME);
    }
    
    if (mmap.containsKey(KEY_TABLE_NAME_WITH_TYPE)) {
      return mmap.getFirst(KEY_TABLE_NAME_WITH_TYPE);
    }
    
    if (mmap.containsKey(KEY_SCHEMA_NAME)) {
      return mmap.getFirst(KEY_SCHEMA_NAME);
    }
    
    return null;
  }
  
  private static boolean isBaseFile(String path) {
    return !path.contains("/") && path.contains(".");
  }
  
}


