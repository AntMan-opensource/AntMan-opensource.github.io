package org.apache.pinot.broker.api.resources;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiKeyAuthDefinition;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.SecurityDefinition;
import io.swagger.annotations.SwaggerDefinition;
import javax.inject.Inject;
import javax.ws.rs.DELETE;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import org.apache.pinot.broker.routing.BrokerRoutingManager;
import static org.apache.pinot.spi.utils.CommonConstants.SWAGGER_AUTHORIZATION_KEY;
@Api(tags = "Routing", authorizations = {@Authorization(value = SWAGGER_AUTHORIZATION_KEY)})
@SwaggerDefinition(securityDefinition = @SecurityDefinition(apiKeyAuthDefinitions = @ApiKeyAuthDefinition(name = HttpHeaders.AUTHORIZATION, in = ApiKeyAuthDefinition.ApiKeyLocation.HEADER, key = SWAGGER_AUTHORIZATION_KEY)))
public class PinotBrokerRouting {
  @Inject
  BrokerRoutingManager _routingManager;
  @ApiOperation(value = "Build/rebuild the routing for a table", notes = "Build/rebuild the routing for a table")
  @ApiResponses(value = { @ApiResponse(code = 200, message = "Success"), @ApiResponse(code = 500, message = "Internal server error") })
  public String buildRouting( @ApiParam(value = "Table name (with type)") @PathParam("tableName") String tableNameWithType) {
    _routingManager.buildRouting(tableNameWithType);
    return "Success";
  }
  
  @ApiOperation(value = "Refresh the routing for a segment", notes = "Refresh the routing for a segment")
  @ApiResponses(value = { @ApiResponse(code = 200, message = "Success"), @ApiResponse(code = 500, message = "Internal server error") })
  public String refreshRouting( @ApiParam(value = "Table name (with type)") @PathParam("tableName") String tableNameWithType, @ApiParam(value = "Segment name") @PathParam("segmentName") String segmentName) {
    _routingManager.refreshSegment(tableNameWithType, segmentName);
    return "Success";
  }
  
  @ApiOperation(value = "Remove the routing for a table", notes = "Remove the routing for a table")
  @ApiResponses(value = { @ApiResponse(code = 200, message = "Success"), @ApiResponse(code = 500, message = "Internal server error") })
  public String removeRouting( @ApiParam(value = "Table name (with type)") @PathParam("tableName") String tableNameWithType) {
    _routingManager.removeRouting(tableNameWithType);
    return "Success";
  }
  
}


