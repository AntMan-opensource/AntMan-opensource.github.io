package org.apache.pinot.broker.broker;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Provider;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.ResourceInfo;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import org.apache.pinot.broker.api.AccessControl;
import org.apache.pinot.broker.api.HttpRequesterIdentity;
import org.apache.pinot.core.auth.ManualAuthorization;
import org.glassfish.grizzly.http.server.Request;
public class AuthenticationFilter implements ContainerRequestFilter {
  private static final Set<String> UNPROTECTED_PATHS = new HashSet<>(Arrays.asList("", "help", "health", "help#"));
  @Inject
  Provider<Request> _requestProvider;
  @Inject
  AccessControlFactory _accessControlFactory;
  @Context
  ResourceInfo _resourceInfo;
  @Context
  HttpHeaders _httpHeaders;
  public void filter(ContainerRequestContext requestContext) throws IOException {
    Request request = _requestProvider.get();
    Method endpointMethod = _resourceInfo.getResourceMethod();
    AccessControl accessControl = _accessControlFactory.create();
    UriInfo uriInfo = requestContext.getUriInfo();
    if (isBaseFile(uriInfo.getPath()) || UNPROTECTED_PATHS.contains(uriInfo.getPath())) {
      return;
    }
    
    if (endpointMethod.isAnnotationPresent(ManualAuthorization.class)) {
      return;
    }
    
    HttpRequesterIdentity httpRequestIdentity = HttpRequesterIdentity.fromRequest(request);
    if (!accessControl.hasAccess(httpRequestIdentity)) {
      throw new WebApplicationException("Failed access check for " + httpRequestIdentity.getEndpointUrl(), Response.Status.FORBIDDEN);
    }
    
  }
  
  private static boolean isBaseFile(String path) {
    return !path.contains("/") && path.contains(".");
  }
  
}


