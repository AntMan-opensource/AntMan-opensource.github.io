package org.xwiki.display.internal;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import javax.inject.Inject;
import javax.inject.Named;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.xwiki.bridge.DocumentAccessBridge;
import org.xwiki.bridge.DocumentModelBridge;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContext;
import org.xwiki.model.EntityType;
import org.xwiki.model.ModelContext;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceProvider;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.parser.ParseException;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.util.ParserUtils;
import org.xwiki.security.authorization.AuthorizationManager;
import org.xwiki.security.authorization.Right;
import org.xwiki.velocity.VelocityEngine;
import org.xwiki.velocity.VelocityManager;
public abstract class AbstractDocumentTitleDisplayer implements DocumentDisplayer {
    private static final String DOCUMENT_REFERENCE_STACK_KEY = "internal.displayer.title.documentReferenceStack";
    private Logger logger;
    private Parser plainTextParser;
    private VelocityManager velocityManager;
    private DocumentAccessBridge documentAccessBridge;
    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;
    private Execution execution;
    private ConfigurationSource xwikicfg;
    private AuthorizationManager authorizationManager;
    private EntityReferenceProvider defaultEntityReferenceProvider;
    private ModelContext modelContext;
    private ParserUtils parserUtils = new ParserUtils();
    public XDOM display(DocumentModelBridge document, DocumentDisplayerParameters parameters) {
        Deque<DocumentReference> documentReferenceStack = getDocumentReferenceDeque();
        if (documentReferenceStack.contains(document.getDocumentReference())) {
            this.logger.warn( "Infinite recursion detected while displaying the title of [{}]. Using the document name as title.", document.getDocumentReference());
            return getStaticTitle(document);
        }
        
        documentReferenceStack.push(document.getDocumentReference());
        try {
            return displayTitle(document, parameters);
        }
         finally {
            documentReferenceStack.pop();
        }
        
    }
    
    private Deque<DocumentReference> getDocumentReferenceDeque() {
        ExecutionContext econtext = this.execution.getContext();
        Deque<DocumentReference> documentReferenceStack = (Deque<DocumentReference>) econtext.getProperty(DOCUMENT_REFERENCE_STACK_KEY);
        if (documentReferenceStack == null) {
            documentReferenceStack = new LinkedList<>();
            econtext.newProperty(DOCUMENT_REFERENCE_STACK_KEY).inherited().initial(documentReferenceStack).declare();
        }
        
        return documentReferenceStack;
    }
    
    private XDOM displayTitle(DocumentModelBridge document, DocumentDisplayerParameters parameters) {
        String rawTitle = document.getTitle();
        if (!StringUtils.isEmpty(rawTitle)) {
            try {
                String title = rawTitle;
                if (authorizationManager.hasAccess(Right.SCRIPT, document.getContentAuthorReference(), document.getDocumentReference())) {
                    title = evaluateTitle(rawTitle, document.getDocumentReference(), parameters);
                }
                
                return parseTitle(title);
            }
             catch (Exception e) {
                logger.warn("Failed to interpret title of document [{}].", document.getDocumentReference(), e);
            }
            
        }
        
        if ("1".equals(this.xwikicfg.getProperty("xwiki.title.compatibility", "0"))) {
            try {
                XDOM title = extractTitleFromContent(document, parameters);
                if (title != null) {
                    return title;
                }
                
            }
             catch (Exception e) {
                logger.warn("Failed to extract title from content of document [{}].", document.getDocumentReference(), e);
            }
            
        }
        
        return getStaticTitle(document);
    }
    
    protected XDOM parseTitle(String title) {
        try {
            XDOM xdom = plainTextParser.parse(new StringReader(title));
            parserUtils.removeTopLevelParagraph(xdom.getChildren());
            return xdom;
        }
         catch (ParseException e) {
            throw new RuntimeException(e);
        }
        
    }
    
    protected String evaluateTitle(String title, DocumentReference documentReference, DocumentDisplayerParameters parameters) {
        StringWriter writer = new StringWriter();
        String namespace = defaultEntityReferenceSerializer.serialize(parameters.isTransformationContextIsolated() ? documentReference : documentAccessBridge.getCurrentDocumentReference());
        VelocityEngine velocityEngine;
        try {
            velocityEngine = this.velocityManager.getVelocityEngine();
        }
         catch (Exception e) {
            throw new RuntimeException(e);
        }
        
        Map<String, Object> backupObjects = null;
        boolean canPop = false;
        EntityReference currentWikiReference = this.modelContext.getCurrentEntityReference();
        try {
            if (parameters.isExecutionContextIsolated()) {
                backupObjects = new HashMap<>();
                documentAccessBridge.pushDocumentInContext(backupObjects, documentReference);
                canPop = true;
                modelContext.setCurrentEntityReference(documentReference.getWikiReference());
            }
            
            velocityEngine.evaluate(velocityManager.getVelocityContext(), writer, namespace, title);
        }
         catch (Exception e) {
            throw new RuntimeException(e);
        }
         finally {
            if (canPop) {
                documentAccessBridge.popDocumentFromContext(backupObjects);
                this.modelContext.setCurrentEntityReference(currentWikiReference);
            }
            
        }
        
        return writer.toString();
    }
    
    protected abstract XDOM extractTitleFromContent(DocumentModelBridge document, DocumentDisplayerParameters parameters);
    private XDOM getStaticTitle(DocumentModelBridge document) {
        String documentName = document.getDocumentReference().getName();
        if (defaultEntityReferenceProvider.getDefaultReference(EntityType.DOCUMENT).getName().equals(documentName)) {
            documentName = document.getDocumentReference().getParent().getName();
        }
        
        return parseTitle(documentName);
    }
    
    protected Logger getLogger() {
        return logger;
    }
    
}


