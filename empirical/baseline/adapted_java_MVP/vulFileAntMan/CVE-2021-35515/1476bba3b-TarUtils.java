package org.apache.commons.compress.archivers.tar;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.utils.IOUtils;
import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN;
import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET;
import static org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_NUMBYTES_LEN;
import static org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_OFFSET_LEN;
public class TarUtils {
    private static final int BYTE_MASK = 255;
    static final ZipEncoding DEFAULT_ENCODING = ZipEncodingHelper.getZipEncoding(null);
    static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {
            public boolean canEncode(final String name) { return true; }
            public ByteBuffer encode(final String name) {
                final int length = name.length();
                final byte[] buf = new byte[length];
                for (int i = 0; i < length; ++i) {
                    buf[i] = (byte) name.charAt(i);
                }
                
                return ByteBuffer.wrap(buf);
            }
            
            public String decode(final byte[] buffer) {
                final int length = buffer.length;
                final StringBuilder result = new StringBuilder(length);
                for (final byte b : buffer) {
                    if (b == 0) { 
                        break;
                    }
                    
                    result.append((char) (b & 0xFF)); 
                }
                
                return result.toString();
            }
            
        };
    private TarUtils(){
    }
    
    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
        long    result = 0;
        int     end = offset + length;
        int     start = offset;
        if (length < 2){
            throw new IllegalArgumentException("Length "+length+" must be at least 2");
        }
        
        if (buffer[start] == 0) {
            return 0L;
        }
        
        while (start < end){
            if (buffer[start] != ' ') {
                break;
            }
            
            start++;
        }
        
        byte trailer = buffer[end - 1];
        while (start < end && (trailer == 0 || trailer == ' ')) {
            end--;
            trailer = buffer[end - 1];
        }
        
        for ( ;start < end; start++) {
            final byte currentByte = buffer[start];
            if (currentByte < '0' || currentByte > '7'){
                throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte));
            }
            
            result = (result << 3) + (currentByte - '0'); 
        }
        
        return result;
    }
    
    public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) {
        if ((buffer[offset] & 0x80) == 0) {
            return parseOctal(buffer, offset, length);
        }
        
        final boolean negative = buffer[offset] == (byte) 0xff;
        if (length < 9) {
            return parseBinaryLong(buffer, offset, length, negative);
        }
        
        return parseBinaryBigInteger(buffer, offset, length, negative);
    }
    
    private static long parseBinaryLong(final byte[] buffer, final int offset, final int length, final boolean negative) {
        if (length >= 9) {
            throw new IllegalArgumentException("At offset " + offset + ", " + length + " byte binary number" + " exceeds maximum signed long" + " value");
        }
        
        long val = 0;
        for (int i = 1; i < length; i++) {
            val = (val << 8) + (buffer[offset + i] & 0xff);
        }
        
        if (negative) {
            val--;
            val ^= (long) Math.pow(2.0, (length - 1) * 8.0) - 1;
        }
        
        return negative ? -val : val;
    }
    
    private static long parseBinaryBigInteger(final byte[] buffer, final int offset, final int length, final boolean negative) {
        final byte[] remainder = new byte[length - 1];
        System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);
        BigInteger val = new BigInteger(remainder);
        if (negative) {
            val = val.add(BigInteger.valueOf(-1)).not();
        }
        
        if (val.bitLength() > 63) {
            throw new IllegalArgumentException("At offset " + offset + ", " + length + " byte binary number" + " exceeds maximum signed long" + " value");
        }
        
        return negative ? -val.longValue() : val.longValue();
    }
    
    public static boolean parseBoolean(final byte[] buffer, final int offset) {
        return buffer[offset] == 1;
    }
    
    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int current, final byte currentByte) {
        String string = new String(buffer, offset, length);
        string=string.replace("\0", "{NUL}"); 
        return "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;
    }
    
    public static String parseName(final byte[] buffer, final int offset, final int length) {
        try {
            return parseName(buffer, offset, length, DEFAULT_ENCODING);
        }
         catch (final IOException ex) { 
            try {
                return parseName(buffer, offset, length, FALLBACK_ENCODING);
            }
             catch (final IOException ex2) {
                throw new RuntimeException(ex2); 
            }
            
        }
        
    }
    
    public static String parseName(final byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException {
        int len = 0;
        for (int i = offset; len < length && buffer[i] != 0; i++) {
            len++;
        }
        
        if (len > 0) {
            final byte[] b = new byte[len];
            System.arraycopy(buffer, offset, b, 0, len);
            return encoding.decode(b);
        }
        
        return "";
    }
    
    public static TarArchiveStructSparse parseSparse(final byte[] buffer, final int offset) {
        final long sparseOffset = parseOctalOrBinary(buffer, offset, SPARSE_OFFSET_LEN);
        final long sparseNumbytes = parseOctalOrBinary(buffer, offset + SPARSE_OFFSET_LEN, SPARSE_NUMBYTES_LEN);
        return new TarArchiveStructSparse(sparseOffset, sparseNumbytes);
    }
    
    static List<TarArchiveStructSparse> readSparseStructs(final byte[] buffer, final int offset, final int entries) throws IOException {
        final List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
        for (int i = 0; i < entries; i++) {
            try {
                final TarArchiveStructSparse sparseHeader = parseSparse(buffer, offset + i * (SPARSE_OFFSET_LEN + SPARSE_NUMBYTES_LEN));
                if (sparseHeader.getOffset() < 0) {
                    throw new IOException("Corrupted TAR archive, sparse entry with negative offset");
                }
                
                if (sparseHeader.getNumbytes() < 0) {
                    throw new IOException("Corrupted TAR archive, sparse entry with negative numbytes");
                }
                
                sparseHeaders.add(sparseHeader);
            }
             catch (IllegalArgumentException ex) {
                throw new IOException("Corrupted TAR archive, sparse entry is invalid", ex);
            }
            
        }
        
        return Collections.unmodifiableList(sparseHeaders);
    }
    
    public static int formatNameBytes(final String name, final byte[] buf, final int offset, final int length) {
        try {
            return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);
        }
         catch (final IOException ex) { 
            try {
                return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING);
            }
             catch (final IOException ex2) {
                throw new RuntimeException(ex2); 
            }
            
        }
        
    }
    
    public static int formatNameBytes(final String name, final byte[] buf, final int offset, final int length, final ZipEncoding encoding) throws IOException {
        int len = name.length();
        ByteBuffer b = encoding.encode(name);
        while (b.limit() > length && len > 0) {
            b = encoding.encode(name.substring(0, --len));
        }
        
        final int limit = b.limit() - b.position();
        System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);
        for (int i = limit; i < length; ++i) {
            buf[offset + i] = 0;
        }
        
        return offset + length;
    }
    
    public static void formatUnsignedOctalString(final long value, final byte[] buffer, final int offset, final int length) {
        int remaining = length;
        remaining--;
        if (value == 0) {
            buffer[offset + remaining--] = (byte) '0';
        }
         else {
            long val = value;
            for (; remaining >= 0 && val != 0; --remaining) {
                buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));
                val = val >>> 3;
            }
            
            if (val != 0){
                throw new IllegalArgumentException (value+"="+Long.toOctalString(value)+ " will not fit in octal number buffer of length "+length);
            }
            
        }
        
        for (; remaining >= 0; --remaining) { 
            buffer[offset + remaining] = (byte) '0';
        }
        
    }
    
    public static int formatOctalBytes(final long value, final byte[] buf, final int offset, final int length) {
        int idx=length-2; 
        formatUnsignedOctalString(value, buf, offset, idx);
        buf[offset + idx++] = (byte) ' '; 
        buf[offset + idx]   = 0; 
        return offset + length;
    }
    
    public static int formatLongOctalBytes(final long value, final byte[] buf, final int offset, final int length) {
        final int idx=length-1; 
        formatUnsignedOctalString(value, buf, offset, idx);
        buf[offset + idx] = (byte) ' '; 
        return offset + length;
    }
    
    public static int formatLongOctalOrBinaryBytes( final long value, final byte[] buf, final int offset, final int length) {
        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
        final boolean negative = value < 0;
        if (!negative && value <= maxAsOctalChar) { 
            return formatLongOctalBytes(value, buf, offset, length);
        }
        
        if (length < 9) {
            formatLongBinary(value, buf, offset, length, negative);
        }
         else {
            formatBigIntegerBinary(value, buf, offset, length, negative);
        }
        
        buf[offset] = (byte) (negative ? 0xff : 0x80);
        return offset + length;
    }
    
    private static void formatLongBinary(final long value, final byte[] buf, final int offset, final int length, final boolean negative) {
        final int bits = (length - 1) * 8;
        final long max = 1L << bits;
        long val = Math.abs(value); 
        if (val < 0 || val >= max) {
            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
        }
        
        if (negative) {
            val ^= max - 1;
            val++;
            val |= 0xffL << bits;
        }
        
        for (int i = offset + length - 1; i >= offset; i--) {
            buf[i] = (byte) val;
            val >>= 8;
        }
        
    }
    
    private static void formatBigIntegerBinary(final long value, final byte[] buf, final int offset, final int length, final boolean negative) {
        final BigInteger val = BigInteger.valueOf(value);
        final byte[] b = val.toByteArray();
        final int len = b.length;
        if (len > length - 1) {
            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
        }
        
        final int off = offset + length - len;
        System.arraycopy(b, 0, buf, off, len);
        final byte fill = (byte) (negative ? 0xff : 0);
        for (int i = offset + 1; i < off; i++) {
            buf[i] = fill;
        }
        
    }
    
    public static int formatCheckSumOctalBytes(final long value, final byte[] buf, final int offset, final int length) {
        int idx=length-2; 
        formatUnsignedOctalString(value, buf, offset, idx);
        buf[offset + idx++]   = 0; 
        buf[offset + idx]     = (byte) ' '; 
        return offset + length;
    }
    
    public static long computeCheckSum(final byte[] buf) {
        long sum = 0;
        for (final byte element : buf) {
            sum += BYTE_MASK & element;
        }
        
        return sum;
    }
    
    public static boolean verifyCheckSum(final byte[] header) {
        final long storedSum = parseOctal(header, CHKSUM_OFFSET, CHKSUMLEN);
        long unsignedSum = 0;
        long signedSum = 0;
        for (int i = 0; i < header.length; i++) {
            byte b = header[i];
            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
                b = ' ';
            }
            
            unsignedSum += 0xff & b;
            signedSum += b;
        }
        
        return storedSum == unsignedSum || storedSum == signedSum;
    }
    
    protected static Map<String, String> parsePaxHeaders(final InputStream inputStream, final List<TarArchiveStructSparse> sparseHeaders, final Map<String, String> globalPaxHeaders) throws IOException {
        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
        Long offset = null;
        while(true) { 
            int ch;
            int len = 0;
            int read = 0;
            while((ch = inputStream.read()) != -1) {
                read++;
                if (ch == '\n') { 
                    break;
                }
                
                if (ch == ' '){ 
                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                    while((ch = inputStream.read()) != -1) {
                        read++;
                        if (ch == '='){ 
                            final String keyword = coll.toString(CharsetNames.UTF_8);
                            final int restLen = len - read;
                            if (restLen <= 1) { 
                                headers.remove(keyword);
                            }
                             else {
                                final byte[] rest = new byte[restLen];
                                final int got = IOUtils.readFully(inputStream, rest);
                                if (got != restLen) {
                                    throw new IOException("Failed to read " + "Paxheader. Expected " + restLen + " bytes, read " + got);
                                }
                                
                                if (rest[rest.length - 1] != '\n') {
                                    throw new IOException("Failed to read Paxheader." + "Value should end with a newline");
                                }
                                
                                final String value = new String(rest, 0, restLen - 1, StandardCharsets.UTF_8);
                                headers.put(keyword, value);
                                if (keyword.equals("GNU.sparse.offset")) {
                                    if (offset != null) {
                                        sparseHeaders.add(new TarArchiveStructSparse(offset, 0));
                                    }
                                    
                                    try {
                                        offset = Long.valueOf(value);
                                    }
                                     catch (NumberFormatException ex) {
                                        throw new IOException("Failed to read Paxheader." + "GNU.sparse.offset contains a non-numeric value");
                                    }
                                    
                                    if (offset < 0) {
                                        throw new IOException("Failed to read Paxheader." + "GNU.sparse.offset contains negative value");
                                    }
                                    
                                }
                                
                                if (keyword.equals("GNU.sparse.numbytes")) {
                                    if (offset == null) {
                                        throw new IOException("Failed to read Paxheader." + "GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.");
                                    }
                                    
                                    long numbytes;
                                    try {
                                        numbytes = Long.parseLong(value);
                                    }
                                     catch (NumberFormatException ex) {
                                        throw new IOException("Failed to read Paxheader." + "GNU.sparse.numbytes contains a non-numeric value.");
                                    }
                                    
                                    if (numbytes < 0) {
                                        throw new IOException("Failed to read Paxheader." + "GNU.sparse.numbytes contains negative value");
                                    }
                                    
                                    sparseHeaders.add(new TarArchiveStructSparse(offset, numbytes));
                                    offset = null;
                                }
                                
                            }
                            
                            break;
                        }
                        
                        coll.write((byte) ch);
                    }
                    
                    break; 
                }
                
                if (ch < '0' || ch > '9') {
                    throw new IOException("Failed to read Paxheader. Encountered a non-number while reading length");
                }
                
                len *= 10;
                len += ch - '0';
            }
            
            if (ch == -1){ 
                break;
            }
            
        }
        
        if (offset != null) {
            sparseHeaders.add(new TarArchiveStructSparse(offset, 0));
        }
        
        return headers;
    }
    
    protected static List<TarArchiveStructSparse> parsePAX01SparseHeaders(String sparseMap) {
        try {
            return parseFromPAX01SparseHeaders(sparseMap);
        }
         catch (IOException ex) {
            throw new RuntimeException(ex.getMessage(), ex);
        }
        
    }
    
    protected static List<TarArchiveStructSparse> parseFromPAX01SparseHeaders(String sparseMap) throws IOException {
        List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
        String[] sparseHeaderStrings = sparseMap.split(",");
        if (sparseHeaderStrings.length % 2 == 1) {
            throw new IOException("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header");
        }
        
        for (int i = 0; i < sparseHeaderStrings.length; i += 2) {
            long sparseOffset;
            try {
                sparseOffset = Long.parseLong(sparseHeaderStrings[i]);
            }
             catch (NumberFormatException ex) {
                throw new IOException("Corrupted TAR archive." + " Sparse struct offset contains a non-numeric value");
            }
            
            if (sparseOffset < 0) {
                throw new IOException("Corrupted TAR archive." + " Sparse struct offset contains negative value");
            }
            
            long sparseNumbytes;
            try {
                sparseNumbytes = Long.parseLong(sparseHeaderStrings[i + 1]);
            }
             catch (NumberFormatException ex) {
                throw new IOException("Corrupted TAR archive." + " Sparse struct numbytes contains a non-numeric value");
            }
            
            if (sparseNumbytes < 0) {
                throw new IOException("Corrupted TAR archive." + " Sparse struct numbytes contains negative value");
            }
            
            sparseHeaders.add(new TarArchiveStructSparse(sparseOffset, sparseNumbytes));
        }
        
        return Collections.unmodifiableList(sparseHeaders);
    }
    
    protected static List<TarArchiveStructSparse> parsePAX1XSparseHeaders(final InputStream inputStream, final int recordSize) throws IOException {
        List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
        long bytesRead = 0;
        long[] readResult = readLineOfNumberForPax1X(inputStream);
        long sparseHeadersCount = readResult[0];
        if (sparseHeadersCount < 0) {
            throw new IOException("Corrupted TAR archive. Negative value in sparse headers block");
        }
        
        bytesRead += readResult[1];
        while (sparseHeadersCount-- > 0) {
            readResult = readLineOfNumberForPax1X(inputStream);
            final long sparseOffset = readResult[0];
            if (sparseOffset < 0) {
                throw new IOException("Corrupted TAR archive." + " Sparse header block offset contains negative value");
            }
            
            bytesRead += readResult[1];
            readResult = readLineOfNumberForPax1X(inputStream);
            final long sparseNumbytes = readResult[0];
            if (sparseNumbytes < 0) {
                throw new IOException("Corrupted TAR archive." + " Sparse header block numbytes contains negative value");
            }
            
            bytesRead += readResult[1];
            sparseHeaders.add(new TarArchiveStructSparse(sparseOffset, sparseNumbytes));
        }
        
        long bytesToSkip = recordSize - bytesRead % recordSize;
        IOUtils.skip(inputStream, bytesToSkip);
        return sparseHeaders;
    }
    
    private static long[] readLineOfNumberForPax1X(final InputStream inputStream) throws IOException {
        int number;
        long result = 0;
        long bytesRead = 0;
        while ((number = inputStream.read()) != '\n') {
            bytesRead += 1;
            if (number == -1) {
                throw new IOException("Unexpected EOF when reading parse information of 1.X PAX format");
            }
            
            if (number < '0' || number > '9') {
                throw new IOException("Corrupted TAR archive. Non-numeric value in sparse headers block");
            }
            
            result = result * 10 + (number - '0');
        }
        
        bytesRead += 1;
        return new long[]{result, bytesRead};
    }
    
}


