package com.google.refine.extension.database.sqlite;
import com.google.refine.extension.database.DatabaseConfiguration;
import com.google.refine.extension.database.DatabaseServiceException;
import com.google.refine.extension.database.SQLType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
public class SQLiteConnectionManager {
    private static final Logger logger = LoggerFactory.getLogger("SQLiteConnectionManager");
    private static SQLiteConnectionManager instance;
    private final SQLType type;
    private Connection connection;
    private SQLiteConnectionManager() {
        type = SQLType.forName(SQLiteDatabaseService.DB_NAME);
    }
    
    public static SQLiteConnectionManager getInstance() {
        if (instance == null) {
            if (logger.isDebugEnabled()) {
                logger.debug("::Creating new SQLite ConnectionManager ::");
            }
            
            instance = new SQLiteConnectionManager();
        }
        
        return instance;
    }
    
    public static String getDatabaseUrl(DatabaseConfiguration dbConfig) {
        return "jdbc:" + dbConfig.getDatabaseType().toLowerCase() + ":" + dbConfig.getDatabaseName();
    }
    
    public SQLType getType() {
        return this.type;
    }
    
    public boolean testConnection(DatabaseConfiguration dbConfig) throws DatabaseServiceException {
        try {
            boolean connResult = false;
            Connection conn = getConnection(dbConfig);
            if (conn != null) {
                connResult = true;
                conn.close();
            }
            
            return connResult;
        }
         catch (SQLException e) {
            logger.error("Test connection Failed!", e);
            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
        }
        
    }
    
    public Connection getConnection(DatabaseConfiguration databaseConfiguration) throws DatabaseServiceException {
        try {
            if (connection != null) {
                connection.close();
            }
            
            Class.forName(type.getClassPath());
            String dbURL = getDatabaseUrl(databaseConfiguration);
            connection = DriverManager.getConnection(dbURL);
            logger.debug("*** Acquired New  connection for ::{} **** ", dbURL);
            return connection;
        }
         catch (ClassNotFoundException e) {
            logger.error("Jdbc Driver not found", e);
            throw new DatabaseServiceException(e.getMessage());
        }
         catch (SQLException e) {
            logger.error("SQLException::Couldn't get a Connection!", e);
            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
        }
        
    }
    
    public void shutdown() {
        if (connection != null) {
            try {
                connection.close();
            }
             catch (SQLException e) {
                logger.warn("Non-Managed connection could not be closed. Whoops!", e);
            }
            
        }
        
    }
    
}


