package hudson.plugins.nested_view;
import com.thoughtworks.xstream.converters.ConversionException;
import com.thoughtworks.xstream.io.StreamException;
import com.thoughtworks.xstream.io.xml.XppDriver;
import hudson.util.IOException2;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;
import hudson.util.XStream2;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.Source;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import hudson.Extension;
import hudson.Util;
import hudson.model.*;
import hudson.model.Descriptor.FormException;
import hudson.util.DescribableList;
import hudson.util.FormValidation;
import hudson.views.ListViewColumn;
import hudson.views.ViewsTabBar;
import jenkins.model.Jenkins;
import jenkins.model.ModelObjectWithContextMenu;
import org.apache.commons.jelly.JellyException;
import org.kohsuke.stapler.*;
import org.kohsuke.stapler.export.Exported;
import hudson.security.Permission;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.CopyOnWriteArrayList;
import static hudson.Util.fixEmpty;
import java.lang.reflect.Field;
public class NestedView extends View implements ViewGroup, StaplerProxy, ModelObjectWithContextMenu {
    private final static Result WORST_RESULT = Result.FAILURE;
    private final CopyOnWriteArrayList<View> views = new CopyOnWriteArrayList<View>();
    private String defaultView;
    private NestedViewColumns columns;
    public NestedView(String name) {
        super(name);
    }
    
    private Object readResolve() throws Exception {
        Field ownerF = View.class.getDeclaredField("owner");
        ownerF.setAccessible(true);
        for (View view : views) {
            ownerF.set(view, this);
        }
        
        return this;
    }
    
    public List<TopLevelItem> getItems() {
        return Collections.emptyList();
    }
    
	public boolean hasPermission(Permission p) {
		for (View view : views) {
			if (view.hasPermission(p)) {
				return true;
			}
			
		}
		
		return super.hasPermission(p);
	}
	
    public boolean contains(TopLevelItem item) {
        return false;
    }
    
    public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws IOException, JellyException {
        return new ContextMenu().from(this, request, response);
    }
    
    public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {
        ContextMenu menu = new ContextMenu();
        for (View view : getViews()) {
            menu.add(new MenuItem().withContextRelativeUrl(view.getUrl()).withDisplayName(view.getDisplayName()));
        }
        
        return menu;
    }
    
    public String getUrl() {
        return getViewUrl();
    }
    
    public View getPrimaryView() {
        return null;
    }
    
    public ItemGroup<? extends TopLevelItem> getItemGroup() {
        return getOwnerItemGroup();
    }
    
    public List<Action> getViewActions() {
        return getOwner().getViewActions();
    }
    
    public Item doCreateItem(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        ItemGroup itemGroup = getItemGroup();
        if (itemGroup instanceof ModifiableItemGroup) {
            return ((ModifiableItemGroup) itemGroup).doCreateItem(req, rsp);
        }
        
        return null;
    }
    
    public FormValidation doCheckViewName(@QueryParameter String value) {
        checkPermission(View.CREATE);
        String name = fixEmpty(value);
        if (name == null) {
            return FormValidation.ok();
}
        if (getView(name) != null) {
            return FormValidation.error(hudson.model.Messages.Hudson_ViewAlreadyExists(name));
}
        try {
            jenkins.model.Jenkins.checkGoodName(name);
        }
         catch (Failure e) {
            return FormValidation.error(e.getMessage());
        }
        
        return FormValidation.ok();
    }
    
    public FormValidation doViewExistsCheck(@QueryParameter String value) {
        checkPermission(View.CREATE);
        String view = fixEmpty(value);
        return (view == null || getView(view) == null) ? FormValidation.ok() : FormValidation.error(hudson.model.Messages.Hudson_ViewAlreadyExists(view));
    }
    
    public synchronized void onJobRenamed(Item item, String oldName, String newName) {
        for (View v : views){
            v.onJobRenamed(item, oldName, newName);
}
    }
    
    protected synchronized void submit(StaplerRequest req) throws IOException, ServletException, FormException {
        defaultView = Util.fixEmpty(req.getParameter("defaultView"));
        if (columns == null) {
            columns = new NestedViewColumns();
        }
        
        if (columns.getColumns() == null) {
            columns.setColumns(new DescribableList<ListViewColumn, Descriptor<ListViewColumn>>(this));
        }
        
        columns.updateFromForm(req, req.getSubmittedForm(), "columnsToShow");
    }
    
    public boolean canDelete(View view) {
        return true;
    }
    
    public void deleteView(View view) throws IOException {
        views.remove(view);
        save();
    }
    
    public Collection<View> getViews() {
        List<View> copy = new ArrayList<View>(views);
        Collections.sort(copy, View.SORTER);
        return copy;
    }
    
    public View getView(String name) {
        for (View v : views){
            if (v.getViewName().equals(name)){
                return v;
}
}
        return null;
    }
    
    public View getDefaultView() {
        return isDefault() ? null : getView(defaultView);
    }
    
    public NestedViewColumns getColumnsToShow() {
        return columns;
    }
    
    public void onViewRenamed(View view, String oldName, String newName) {
    }
    
    public void save() throws IOException {
        if (owner != null) {
            owner.save();
        }
        
        else{
            setOwner(Jenkins.getInstance());
            owner.save();
        }
        
    }
    
    public void doCreateView(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {
        checkPermission(View.CREATE);
        addView(View.create(req, rsp, this));
        save();
    }
    
    void addView(View view) {
        views.add(view);
    }
    
    void setOwner(ViewGroup owner) {
        this.owner = owner;
    }
    
    public String getImage(View w) {
        if (w instanceof  NestedView) {
            return "folder.gif";
        }
         else {
            return "clipboard.png";
        }
        
    }
    
    public Result getWorstResult() {
        Result result = Result.NOT_BUILT, check;
        boolean found = false;
        List<View> normalViews = new ArrayList<View>();
        List<NestedView> nestedViews = new ArrayList<NestedView>();
        for (View v : views) {
            if (v instanceof NestedView) {
                nestedViews.add((NestedView) v);
            }
             else {
                normalViews.add(v);
            }
            
        }
        
        for (View v : normalViews) {
            check = getWorstResultForNormalView(v);
            if (check != null) {
                found = true;
                if (isWorst(check)) {
                    return check;
                }
                
                result = getWorse(check, result);
            }
            
        }
        
        for (NestedView v : nestedViews) {
            check = v.getWorstResult();
            if (check != null) {
                found = true;
                if (isWorst(check)) {
                    return check;
                }
                
                result = getWorse(check, result);
            }
            
        }
        
        return found ? result : null;
    }
    
    private static boolean isWorst(Result r) {
        return (r.isCompleteBuild() == WORST_RESULT.isCompleteBuild() && r.isWorseOrEqualTo(WORST_RESULT));
    }
    
    private static Result getWorse(Result r1, Result r2) {
        if (!r1.isCompleteBuild() && r2.isCompleteBuild()) {
            return r2;
        }
        
        if (r1.isCompleteBuild() && !r2.isCompleteBuild()) {
            return r1;
        }
        
        return r1.isWorseThan(r2) ? r1 : r2;
    }
    
    private static Result getWorstResultForNormalView(View v) {
        boolean found = false;
        Result result = Result.NOT_BUILT, check;
        for (TopLevelItem item : v.getItems()) {
            if (item instanceof Job && !(   item instanceof AbstractProject && ((AbstractProject) item).isDisabled())) {
                final Run lastCompletedBuild = ((Job) item).getLastCompletedBuild();
                if (lastCompletedBuild != null) {
                    found = true;
                    check = lastCompletedBuild.getResult();
                    if (check == null) {
                        check = Result.SUCCESS;
                    }
                    
                    if (isWorst(check)) {
                        return check;
                    }
                    
                    result = getWorse(check, result);
                }
                
            }
            
        }
        
        return found ? result : null;
    }
    
    public static Result getWorstResult(View v) {
        if (v instanceof NestedView) {
            return ((NestedView) v).getWorstResult();
        }
         else {
            return getWorstResultForNormalView(v);
        }
        
    }
    
    public HealthReportContainer getHealth() {
        Set<TopLevelItem> items = new LinkedHashSet<TopLevelItem>(100);
        Deque<View> viewsStack = new ArrayDeque<View>(20);
        viewsStack.push(this);
        do {
            View currentView = viewsStack.pop();
            if (currentView instanceof NestedView) {
                for (View v : ((NestedView) currentView).views) {
                    viewsStack.push(v);
                }
                
            }
             else {
                items.addAll(currentView.getItems());
            }
            
        }
         while (!viewsStack.isEmpty());
        HealthReportContainer hrc = new HealthReportContainer();
        for (TopLevelItem item : items) {
            if (item instanceof Job) {
                hrc.sum += ((Job) item).getBuildHealth().getScore();
                hrc.count++;
            }
            
        }
        
        hrc.report = hrc.count > 0 ? new HealthReport(hrc.sum / hrc.count, Messages._ViewHealth(hrc.count)) : new HealthReport(100, Messages._NoJobs());
        return hrc;
    }
    
    @WebMethod(name = "config.xml")
    public HttpResponse doConfigDotXml(StaplerRequest req) throws IOException {
       if (req.getMethod().equals("GET")) {
            checkPermission(READ);
            return new HttpResponse() {                 public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException { rsp.setContentType("application/xml");
                    XStream2 xStream2 = new XStream2();
                    xStream2.registerLocalConverter(View.class, "owner", new OwnerConvertor());
                    xStream2.toXMLUTF8(NestedView.this,  rsp.getOutputStream());
                }
                
            };
        }
        
        if (req.getMethod().equals("POST")) {
            updateByXml((Source)new StreamSource(req.getReader()));
            return HttpResponses.ok();
        }
        
        return HttpResponses.error(400, "Unexpected request method " + req.getMethod());
    }
    
    public void updateByXml(Source source) throws IOException {
        checkPermission(CONFIGURE);
        StringWriter out = new StringWriter();
        try {
            Transformer t = TransformerFactory.newInstance() .newTransformer();
            t.transform(source, new StreamResult(out));
            out.close();
        }
         catch (TransformerException e) {
            throw new IOException2("Failed to persist configuration.xml", e);
        }
        
        InputStream in = new BufferedInputStream(new ByteArrayInputStream(out.toString().getBytes("UTF-8")));
        try {
            XStream2 xstream = new XStream2();
            xstream.registerLocalConverter(View.class, "owner", new OwnerConvertor());
            xstream.unmarshal(new XppDriver().createReader(in), this);
        }
         catch (StreamException e) {
            throw new IOException2("Unable to read",e);
        }
         catch(ConversionException e) {
            throw new IOException2("Unable to read",e);
        }
         catch(Error e) {
            throw new IOException2("Unable to read",e);
        }
         finally {
            in.close();
        }
        
        save();
    }
    
    private static HealthReportContainer getHealthForNormalView(View view) {
        HealthReportContainer hrc = new HealthReportContainer();
        for (TopLevelItem item : view.getItems()) {
            if (item instanceof Job) {
                Job job = (Job) item;
                if (job.getBuildHealthReports().isEmpty()) continue;
                hrc.sum += job.getBuildHealth().getScore();
                hrc.count++;
            }
            
        }
        
        hrc.report = hrc.count > 0 ? new HealthReport(hrc.sum / hrc.count, Messages._ViewHealth(hrc.count)) : null;
        return hrc;
    }
    
    public static HealthReportContainer getViewHealth(View v) {
        if (v instanceof NestedView) {
            return ((NestedView) v).getHealth();
        }
         else {
            return getHealthForNormalView(v);
        }
        
    }
    
    public ViewsTabBar getViewsTabBar() {
        return Hudson.getInstance().getViewsTabBar();
    }
    
    public static class HealthReportContainer {
        private HealthReport report;
        private int sum = 0, count = 0;
        private HealthReportContainer() {
        }
        
        public HealthReport getBuildHealth() {
            return report;
        }
        
        public List<HealthReport> getBuildHealthReports() {
            return report != null ? Collections.singletonList(report) : Collections.<HealthReport>emptyList();
        }
        
    }
    
    public Object getTarget() {
        return (getDefaultView() != null && "".equals(Stapler.getCurrentRequest().getRestOfPath())) ? new DefaultViewProxy() : this;
    }
    
    public class DefaultViewProxy {
        public void doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
            if (getDefaultView() != null){
                rsp.sendRedirect2("view/" + defaultView);
}
            else{
                req.getView(NestedView.this, "index.jelly").forward(req, rsp);
}
        }
        
    }
    
    public class OwnerConvertor implements Converter {
        public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
            XStream stream = new XStream();
            if(source.equals(owner)){
                writer.addAttribute("ignore", "true");
                return;
            }
            
            stream.marshal(source, writer);
        }
        
        public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
            if(reader.getAttribute("ignore")!=null && reader.getAttribute("ignore").equals("true")){
                return owner;
            }
            
            XStream stream = new XStream();
            Object o = stream.unmarshal(reader);
            return o;
        }
        
        public boolean canConvert(Class type) {
            return ViewGroup.class.isAssignableFrom(type);
        }
        
    }
    
    public static final class DescriptorImpl extends ViewDescriptor {
        public String getDisplayName() {
            return Messages.DisplayName();
        }
        
    }
    
}


