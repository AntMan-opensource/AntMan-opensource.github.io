package org.opennms.web.api;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.UndeclaredThrowableException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.servlet.http.HttpServletRequest;
import org.opennms.core.resource.Vault;
import org.opennms.core.utils.InetAddressUtils;
import org.opennms.core.utils.WebSecurityUtils;
import org.opennms.netmgt.events.api.EventProxy;
import org.opennms.netmgt.events.api.support.TcpEventProxy;
public abstract class Util extends Object {
    private static final String[] EMPTY_STRING_ARRAY = new String[0];
    private static final Map<String, Object> EMPTY_MAP = Collections.emptyMap();
	 public static String calculateUrlBase(final HttpServletRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }
        
        String tmpl = Vault.getProperty("opennms.web.base-url");
        if (tmpl == null) {
            tmpl = "%s://%x%c/";
        }
        
        final String retval = substituteUrl(request, tmpl);
        if (retval.endsWith("/")) {
        	return retval;
        }
         else {
        	return retval + "/";
        }
        
    }
    
    public static String calculateUrlBase(final HttpServletRequest request, final String path) {
    	if (request == null || path == null) {
    		throw new IllegalArgumentException("Cannot take null parameters.");
    	}
    	
    	 String tmpl = Vault.getProperty("opennms.web.base-url");
        if (tmpl == null) {
            tmpl = "%s://%x%c";
        }
        
        return substituteUrl(request, tmpl).replaceAll("/+$", "") + "/" + path.replaceAll("^/+", "");
    }
    
    protected static final char[] substKeywords = { 's', 'h', 'p', 'x', 'c' };
    protected static String substituteUrl(final HttpServletRequest request, final String tmpl) {
    	final String[] replacements = {             request.getScheme(),                         request.getServerName(),                     Integer.toString(request.getServerPort()),   getHostHeader(request),                      request.getContextPath()                     };
        final StringBuilder out = new StringBuilder(48);
        for (int i = 0; i < tmpl.length();) {
            final char c = tmpl.charAt(i++);
            if (c == '%' && i < tmpl.length()) {
                final char d = tmpl.charAt(i++);
                for (int key = 0; key < substKeywords.length; ++key) {
                    if (d == substKeywords[key]) {
                        out.append(replacements[key]);
                        break;
                    }
                    
                }
                
            }
            
            else {
                out.append(c);
            }
            
        }
        
        return out.toString();
    }
    
    protected static final String[] hostHeaders = {
        "X-Forwarded-Host",      "X-Host",                "Host"                   };
    public static String getHostHeader(final HttpServletRequest request) {
        for (int i = 0; i < hostHeaders.length; ++i) {
            final String header = request.getHeader(hostHeaders[i]);
            if (header != null) {
                final String[] values = header.split(", *");
                if (values.length >= 1) {
                    return values[0];
                }
                
            }
            
        }
        
        return request.getServerName() + ":" + Integer.toString(request.getServerPort());
    }
    
    public static String encode(final String string) {
        try {
            return URLEncoder.encode(string, StandardCharsets.UTF_8.name());
        }
         catch (final UnsupportedEncodingException e) {
            throw new UndeclaredThrowableException(e);
        }
        
    }
    
    public static String decode(final String string) {
        try {
            return URLDecoder.decode(string, StandardCharsets.UTF_8.name());
        }
         catch (UnsupportedEncodingException e) {
            throw new UndeclaredThrowableException(e);
        }
        
    }
    
    public static String makeHiddenTags(final HttpServletRequest request) {
        return (makeHiddenTags(request, EMPTY_MAP, EMPTY_STRING_ARRAY));
    }
    
    public static String makeHiddenTags(final HttpServletRequest request, final Map<String,Object> additions) {
        return (makeHiddenTags(request, additions, EMPTY_STRING_ARRAY));
    }
    
    public static String makeHiddenTags(final HttpServletRequest request, final String[] ignores) {
        return (makeHiddenTags(request, EMPTY_MAP, ignores));
    }
    
    public static String makeHiddenTags(final HttpServletRequest request, final Map<String,Object> additions, final String[] ignores) {
        return (makeHiddenTags(request, additions, ignores, IgnoreType.BOTH));
    }
    
    public static String makeHiddenTags(final HttpServletRequest request, final Map<String,Object> additions, final String[] ignores, final IgnoreType ignoreType) {
        if (request == null || additions == null || ignores == null || ignoreType == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }
        
        final StringBuilder buffer = new StringBuilder();
        final List<String> ignoreList = Arrays.asList(ignores);
        final Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements()) {
        	final String name = names.nextElement();
        	final String[] values = request.getParameterValues(name);
            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {
            	for (final String value : values) {
                    buffer.append("<input type=\"hidden\" name=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(name));
                    buffer.append("\" value=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(value));
                    buffer.append("\" />");
                    buffer.append("\n");
                }
                
            }
            
        }
        
        for (final Entry<String,Object> entry : additions.entrySet()) {
            final String name = entry.getKey();
        	final Object tmp = entry.getValue();
        	final String[] values = (tmp instanceof String[]) ? ((String[]) tmp) : (new String[] { (String) tmp });
            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {
            	for (final String value : values) {
                    buffer.append("<input type=\"hidden\" name=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(name));
                    buffer.append("\" value=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(value));
                    buffer.append("\" />");
                    buffer.append("\n");
                }
                
            }
            
        }
        
        return (buffer.toString());
    }
    
    public static String makeQueryString(final HttpServletRequest request) {
        return (makeQueryString(request, EMPTY_MAP, EMPTY_STRING_ARRAY));
    }
    
    public static String makeQueryString(final HttpServletRequest request, final Map<String,Object> additions) {
        return (makeQueryString(request, additions, EMPTY_STRING_ARRAY));
    }
    
    public static String makeQueryString(final HttpServletRequest request, final String[] ignores) {
        return (makeQueryString(request, EMPTY_MAP, ignores));
    }
    
    public static String makeQueryString(final HttpServletRequest request, final Map<String,Object> additions, final String[] ignores) {
        return (makeQueryString(request, additions, ignores, IgnoreType.BOTH));
    }
    
    public static String makeQueryString(final HttpServletRequest request, final Map<String,Object> additions, final String[] ignores, final IgnoreType ignoreType) {
        if (request == null || additions == null || ignores == null || ignoreType == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }
        
        final StringBuilder buffer = new StringBuilder();
        final List<String> ignoreList = Arrays.asList(ignores);
        final Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements()) {
        	final String name = (String) names.nextElement();
        	final String[] values = request.getParameterValues(name);
            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {
                for (int i = 0; i < values.length; i++) {
                    buffer.append("&");
                    buffer.append(name);
                    buffer.append("=");
                    buffer.append(Util.encode(values[i]));
                }
                
            }
            
        }
        
        for (final Entry<String,Object> entry : additions.entrySet()) {
            final String name = entry.getKey();
            final Object tmp = entry.getValue();
            final String[] values;
            if (tmp instanceof String[]) {
                values = (String[]) tmp;
            }
             else if (tmp instanceof String) {
                values = new String[] { (String) tmp };
            }
             else {
                throw new IllegalArgumentException("addition \"" + name + "\" is not of type String or String[], but is of type: " + tmp.getClass().getName());
            }
            
            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {
                for (int i = 0; i < values.length; i++) {
                    buffer.append("&");
                    buffer.append(name);
                    buffer.append("=");
                    buffer.append(Util.encode(values[i]));
                }
                
            }
            
        }
        
        if (buffer.length() > 0 && buffer.charAt(0) == '&') {
            buffer.deleteCharAt(0);
        }
        
        return buffer.toString();
    }
    
    public static enum IgnoreType {
        REQUEST_ONLY, ADDITIONS_ONLY, BOTH }
    public static String htmlify(final String input) {
        return (input == null ? null : input.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;"));
    }
    
    public static EventProxy createEventProxy() {
    	final String vaultHost = Vault.getProperty("opennms.rtc.event.proxy.host");
    	final String vaultPort = Vault.getProperty("opennms.rtc.event.proxy.port");
    	final String vaultTimeout = Vault.getProperty("opennms.rtc.event.proxy.timeout");
    	final String proxyHostName = vaultHost == null ? "127.0.0.1" : vaultHost;
		final String proxyHostPort = vaultPort == null ? Integer.toString(TcpEventProxy.DEFAULT_PORT) : vaultPort;
		final String proxyHostTimeout = vaultTimeout == null ? Integer.toString(TcpEventProxy.DEFAULT_TIMEOUT) : vaultTimeout;
		InetAddress proxyAddr = null;
        EventProxy proxy = null;
        proxyAddr = InetAddressUtils.addr(proxyHostName);
        if (proxyAddr == null) {
            try {
                proxy = new TcpEventProxy();
            }
             catch (final UnknownHostException e) {
                throw new UndeclaredThrowableException(e);
            }
            
        }
         else {
            proxy = new TcpEventProxy(new InetSocketAddress(proxyAddr, Integer.parseInt(proxyHostPort)), Integer.parseInt(proxyHostTimeout));
        }
        
        return proxy;
    }
    
    public static final String formatDateToUIString(final Date date) {
        if (date != null) {
            return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(date);
        }
        
        return "";
    }
    
    public static String convertToJsSafeString(final String str){
        return str .replace("\\", "\\\\") .replace("\"", "\\\"") .replace("\t", "\\t") .replace("\r", "\\r") .replace("\n", "\\n") .replace("\b", "\\b");
    }
    
    public static String getParameter(HttpServletRequest request, String name) {
        return getParameter(request, name, null);
    }
    
    public static String getParameter(HttpServletRequest request, String name, String defaultValue) {
        String value = request.getParameter(name);
        if (value == null || value.isEmpty() && defaultValue != null && !defaultValue.isEmpty()) {
            return defaultValue;
        }
        
        return value;
    }
    
}


