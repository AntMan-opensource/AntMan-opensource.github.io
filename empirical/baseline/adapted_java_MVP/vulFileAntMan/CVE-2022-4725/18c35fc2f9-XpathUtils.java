package com.amazonaws.util;
import com.amazonaws.logging.Log;
import com.amazonaws.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.Date;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
public class XpathUtils {
    private static Log log = LogFactory.getLog(XpathUtils.class);
    private static DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    public static Document documentFrom(InputStream is) throws SAXException, IOException, ParserConfigurationException {
        is = new NamespaceRemovingInputStream(is);
        Document doc = factory.newDocumentBuilder().parse(is);
        is.close();
        return doc;
    }
    
    public static Document documentFrom(String xml) throws SAXException, IOException, ParserConfigurationException {
        return documentFrom(new ByteArrayInputStream(xml.getBytes(StringUtils.UTF8)));
    }
    
    public static Document documentFrom(URL url) throws SAXException, IOException, ParserConfigurationException {
        return documentFrom(url.openStream());
    }
    
    public static Double asDouble(String expression, Node node) throws XPathExpressionException {
        String doubleString = evaluateAsString(expression, node);
        return (isEmptyString(doubleString)) ? null : Double.valueOf(doubleString);
    }
    
    public static String asString(String expression, Node node) throws XPathExpressionException {
        return evaluateAsString(expression, node);
    }
    
    public static Integer asInteger(String expression, Node node) throws XPathExpressionException {
        String intString = evaluateAsString(expression, node);
        return (isEmptyString(intString)) ? null : Integer.valueOf(intString);
    }
    
    public static Boolean asBoolean(String expression, Node node) throws XPathExpressionException {
        String booleanString = evaluateAsString(expression, node);
        return (isEmptyString(booleanString)) ? null : Boolean.valueOf(booleanString);
    }
    
    public static Float asFloat(String expression, Node node) throws XPathExpressionException {
        String floatString = evaluateAsString(expression, node);
        return (isEmptyString(floatString)) ? null : Float.valueOf(floatString);
    }
    
    public static Long asLong(String expression, Node node) throws XPathExpressionException {
        String longString = evaluateAsString(expression, node);
        return (isEmptyString(longString)) ? null : Long.valueOf(longString);
    }
    
    public static Byte asByte(String expression, Node node) throws XPathExpressionException {
        String byteString = evaluateAsString(expression, node);
        return (isEmptyString(byteString)) ? null : Byte.valueOf(byteString);
    }
    
    public static Date asDate(String expression, Node node) throws XPathExpressionException {
        String dateString = evaluateAsString(expression, node);
        if (isEmptyString(dateString)){
            return null;
}
        return DateUtils.parseISO8601Date(dateString);
    }
    
    public static ByteBuffer asByteBuffer(String expression, Node node) throws XPathExpressionException {
        String base64EncodedString = evaluateAsString(expression, node);
        if (isEmptyString(base64EncodedString)){
            return null;
}
        if (!isEmpty(node)) {
            byte[] decodedBytes = Base64.decode(base64EncodedString);
            return ByteBuffer.wrap(decodedBytes);
        }
        
        return null;
    }
    
    public static boolean isEmpty(Node node) {
        return (node == null);
    }
    
    public static int nodeLength(NodeList list) {
        return list == null ? 0 : list.getLength();
    }
    
    private static String evaluateAsString(String expression, Node node) throws XPathExpressionException {
        if (isEmpty(node)){
            return null;
}
        if (!".".equals(expression)) {
            if (asNode(expression, node) == null){
                return null;
}
        }
        
        String s = xpath().evaluate(expression, node);
        return s.trim();
    }
    
    public static Node asNode(String nodeName, Node node) throws XPathExpressionException {
        if (node == null){
            return null;
}
        return (Node) xpath().evaluate(nodeName, node, XPathConstants.NODE);
    }
    
    private static boolean isEmptyString(String s) {
        if (s == null){
            return true;
}
        if ("".equals(s.trim())){
            return true;
}
        return false;
    }
    
    public static XPath xpath() {
        return XPathFactory.newInstance().newXPath();
    }
    
}


