package io.netty.handler.codec.compression;
import com.jcraft.jzlib.Inflater;
import com.jcraft.jzlib.JZlib;
import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.util.internal.ObjectUtil;
import java.util.List;
public class JZlibDecoder extends ZlibDecoder {
    private final Inflater z = new Inflater();
    private byte[] dictionary;
    private volatile boolean finished;
    public JZlibDecoder() {
        this(ZlibWrapper.ZLIB);
    }
    
    public JZlibDecoder(ZlibWrapper wrapper) {
        ObjectUtil.checkNotNull(wrapper, "wrapper");
        int resultCode = z.init(ZlibUtil.convertWrapperType(wrapper));
        if (resultCode != JZlib.Z_OK) {
            ZlibUtil.fail(z, "initialization failure", resultCode);
        }
        
    }
    
    public JZlibDecoder(byte[] dictionary) {
        this.dictionary = ObjectUtil.checkNotNull(dictionary, "dictionary");
        int resultCode;
        resultCode = z.inflateInit(JZlib.W_ZLIB);
        if (resultCode != JZlib.Z_OK) {
            ZlibUtil.fail(z, "initialization failure", resultCode);
        }
        
    }
    
    public boolean isClosed() {
        return finished;
    }
    
    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
        if (finished) {
            in.skipBytes(in.readableBytes());
            return;
        }
        
        final int inputLength = in.readableBytes();
        if (inputLength == 0) {
            return;
        }
        
        try {
            z.avail_in = inputLength;
            if (in.hasArray()) {
                z.next_in = in.array();
                z.next_in_index = in.arrayOffset() + in.readerIndex();
            }
             else {
                byte[] array = new byte[inputLength];
                in.getBytes(in.readerIndex(), array);
                z.next_in = array;
                z.next_in_index = 0;
            }
            
            final int oldNextInIndex = z.next_in_index;
            ByteBuf decompressed = ctx.alloc().heapBuffer(inputLength << 1);
            try {
                loop: for (;;) {
                    decompressed.ensureWritable(z.avail_in << 1);
                    z.avail_out = decompressed.writableBytes();
                    z.next_out = decompressed.array();
                    z.next_out_index = decompressed.arrayOffset() + decompressed.writerIndex();
                    int oldNextOutIndex = z.next_out_index;
                    int resultCode = z.inflate(JZlib.Z_SYNC_FLUSH);
                    int outputLength = z.next_out_index - oldNextOutIndex;
                    if (outputLength > 0) {
                        decompressed.writerIndex(decompressed.writerIndex() + outputLength);
                    }
                    
                    switch (resultCode) {
                    case JZlib.Z_NEED_DICT:
                        if (dictionary == null) {
                            ZlibUtil.fail(z, "decompression failure", resultCode);
                        }
                         else {
                            resultCode = z.inflateSetDictionary(dictionary, dictionary.length);
                            if (resultCode != JZlib.Z_OK) {
                                ZlibUtil.fail(z, "failed to set the dictionary", resultCode);
                            }
                            
                        }
                        
                        break;
                    case JZlib.Z_STREAM_END:
                        finished = true; 
                        z.inflateEnd();
                        break loop;
                    case JZlib.Z_OK:
                        break;
                    case JZlib.Z_BUF_ERROR:
                        if (z.avail_in <= 0) {
                            break loop;
                        }
                        
                        break;
                    default: ZlibUtil.fail(z, "decompression failure", resultCode);
                    }
                    
                }
                
            }
             finally {
                in.skipBytes(z.next_in_index - oldNextInIndex);
                if (decompressed.isReadable()) {
                    out.add(decompressed);
                }
                 else {
                    decompressed.release();
                }
                
            }
            
        }
         finally {
            z.next_in = null;
            z.next_out = null;
        }
        
    }
    
}


