package org.apache.velocity.tools.view;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.apache.velocity.Template;
import org.apache.velocity.context.Context;
import org.apache.velocity.exception.MethodInvocationException;
import org.apache.velocity.exception.ResourceNotFoundException;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.commons.lang3.StringEscapeUtils;
public class VelocityViewServlet extends HttpServlet {
    public static final String BUFFER_OUTPUT_PARAM = "org.apache.velocity.tools.bufferOutput";
    private static final long serialVersionUID = -3329444102562079189L;
    private transient VelocityView view;
    private boolean bufferOutput = false;
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        getVelocityView();
        String buffer = findInitParameter(config, BUFFER_OUTPUT_PARAM);
        if (buffer != null && buffer.equals("true")){
            this.bufferOutput = true;
            getLog().debug("VelocityViewServlet will buffer mergeTemplate output.");
        }
        
    }
    
    protected String findInitParameter(ServletConfig config, String key) {
        String param = config.getInitParameter(key);
        if (param == null || param.length() == 0){
            ServletContext servletContext = config.getServletContext();
            param = servletContext.getInitParameter(key);
        }
        
        return param;
    }
    
    protected VelocityView getVelocityView() {
        if (this.view == null){
            setVelocityView(ServletUtils.getVelocityView(getServletConfig()));
            assert (this.view != null);
        }
        
        return this.view;
    }
    
    protected void setVelocityView(VelocityView view) {
        this.view = view;
    }
    
    protected String getVelocityProperty(String name, String alternate) {
        return getVelocityView().getProperty(name, alternate);
    }
    
    protected Logger getLog() {
        return getVelocityView().getLog();
    }
    
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doRequest(request, response);
    }
    
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doRequest(request, response);
    }
    
    protected void doRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Context context = null;
        try {
            initRequest(request, response);
            context = createContext(request, response);
            fillContext(context, request);
            setContentType(request, response);
            Template template = handleRequest(request, response, context);
            mergeTemplate(template, context, request, response);
        }
         catch (IOException e) {
            error(request, response, e);
            throw e;
        }
        
        catch (ResourceNotFoundException e) {
            manageResourceNotFound(request, response, e);
        }
        
        catch (RuntimeException e) {
            error(request, response, e);
            throw e;
        }
        
        finally {
            requestCleanup(request, response, context);
        }
        
    }
    
    protected void initRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
        try {
            request.setCharacterEncoding(getVelocityProperty(RuntimeConstants.INPUT_ENCODING, RuntimeConstants.ENCODING_DEFAULT));
        }
        
        catch (UnsupportedEncodingException uee) {
            error(request, response, uee);
            throw uee;
        }
        
    }
    
    protected Template handleRequest(HttpServletRequest request, HttpServletResponse response, Context ctx) {
        return getTemplate(request, response);
    }
    
    protected Context createContext(HttpServletRequest request, HttpServletResponse response) {
        return getVelocityView().createContext(request, response);
    }
    
    protected void fillContext(Context context, HttpServletRequest request) {
    }
    
    protected void setContentType(HttpServletRequest request, HttpServletResponse response) {
        response.setContentType(getVelocityView().getDefaultContentType());
    }
    
    protected Template getTemplate(HttpServletRequest request, HttpServletResponse response) {
        return getVelocityView().getTemplate(request);
    }
    
    protected Template getTemplate(String name) {
        return getVelocityView().getTemplate(name);
    }
    
    protected void mergeTemplate(Template template, Context context, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Writer writer = getOutputWriter(request, response);
        getVelocityView().merge(template, context, writer);
        Boolean buffered = request == null ? Boolean.FALSE : (Boolean)request.getAttribute(BUFFER_OUTPUT_PARAM);
        if (buffered != null && buffered){
            response.getWriter().write(writer.toString());            
        }
        
    }
    
    protected Writer getOutputWriter(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Writer writer;
        if (this.bufferOutput){
            writer = new StringWriter();
            request.setAttribute(BUFFER_OUTPUT_PARAM, true);
        }
        
        else{
            writer = response.getWriter();
        }
        
        return writer;
    }
    
    protected void mergeTemplate(Template template, Context context, HttpServletResponse response) throws IOException {
        mergeTemplate(template, context, null, response);
    }
    
    protected void error(HttpServletRequest request, HttpServletResponse response, Throwable e) {
        String path = ServletUtils.getPath(request);
        if (response.isCommitted()){
            getLog().error("An error occured but the response headers have already been sent.");
            getLog().error("Error processing a template for path '{}'", path, e);
            return;
        }
        
        try {
            getLog().error("Error processing a template for path '{}'", path, e);
            StringBuilder html = new StringBuilder();
            html.append("<html>\n");
            html.append("<head><title>Error</title></head>\n");
            html.append("<body>\n");
            html.append("<h2>VelocityView : Error processing a template for path '");
            html.append(path);
            html.append("'</h2>\n");
            Throwable cause = e;
            String why = cause.getMessage();
            if (why != null && why.length() > 0){
                html.append(StringEscapeUtils.escapeHtml4(why));
                html.append("\n<br>\n");
            }
            
            if (cause instanceof MethodInvocationException){
                cause = cause.getCause();
            }
            
            StringWriter sw = new StringWriter();
            cause.printStackTrace(new PrintWriter(sw));
            html.append("<pre>\n");
            html.append(StringEscapeUtils.escapeHtml4(sw.toString()));
            html.append("</pre>\n");
            html.append("</body>\n");
            html.append("</html>");
            response.getWriter().write(html.toString());
        }
        
        catch (Exception e2) {
            String msg = "Exception while printing error screen";
            getLog().error(msg, e2);
            throw new RuntimeException(msg, e);
        }
        
    }
    
    protected void manageResourceNotFound(HttpServletRequest request, HttpServletResponse response, ResourceNotFoundException e) throws IOException {
        String path = ServletUtils.getPath(request);
        getLog().debug("Resource not found for path '{}'", path, e);
        String message = e.getMessage();
        if (!response.isCommitted() && path != null && message != null && message.contains("'" + path + "'")){
            response.sendError(HttpServletResponse.SC_NOT_FOUND, path);
        }
        
        else{
            error(request, response, e);
            throw e;
        }
        
    }
    
    protected void requestCleanup(HttpServletRequest request, HttpServletResponse response, Context context) {
    }
    
}


