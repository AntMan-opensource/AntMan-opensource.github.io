package org.sqlite;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import java.util.concurrent.Executor;
import org.sqlite.SQLiteConfig.TransactionMode;
import org.sqlite.core.CoreDatabaseMetaData;
import org.sqlite.core.DB;
import org.sqlite.core.NativeDB;
import org.sqlite.jdbc4.JDBC4DatabaseMetaData;
public abstract class SQLiteConnection implements Connection {
    private static final String RESOURCE_NAME_PREFIX = ":resource:";
    private final DB db;
    private CoreDatabaseMetaData meta = null;
    private final SQLiteConnectionConfig connectionConfig;
    private TransactionMode currentTransactionMode;
    private boolean firstStatementExecuted = false;
    public SQLiteConnection(DB db) {
        this.db = db;
        connectionConfig = db.getConfig().newConnectionConfig();
    }
    
    public SQLiteConnection(String url, String fileName) throws SQLException {
        this(url, fileName, new Properties());
    }
    
    public SQLiteConnection(String url, String fileName, Properties prop) throws SQLException {
        DB newDB = null;
        try {
            this.db = newDB = open(url, fileName, prop);
            SQLiteConfig config = this.db.getConfig();
            this.connectionConfig = this.db.getConfig().newConnectionConfig();
            config.apply(this);
            this.currentTransactionMode = this.getDatabase().getConfig().getTransactionMode();
            this.firstStatementExecuted = false;
        }
         catch (Throwable t) {
            try {
                if (newDB != null) {
                    newDB.close();
                }
                
            }
             catch (Exception e) {
                t.addSuppressed(e);
            }
            
            throw t;
        }
        
    }
    
    public TransactionMode getCurrentTransactionMode() {
        return this.currentTransactionMode;
    }
    
    public void setCurrentTransactionMode(final TransactionMode currentTransactionMode) {
        this.currentTransactionMode = currentTransactionMode;
    }
    
    public void setFirstStatementExecuted(final boolean firstStatementExecuted) {
        this.firstStatementExecuted = firstStatementExecuted;
    }
    
    public boolean isFirstStatementExecuted() {
        return firstStatementExecuted;
    }
    
    public SQLiteConnectionConfig getConnectionConfig() {
        return connectionConfig;
    }
    
    public CoreDatabaseMetaData getSQLiteDatabaseMetaData() throws SQLException {
        checkOpen();
        if (meta == null) {
            meta = new JDBC4DatabaseMetaData(this);
        }
        
        return meta;
    }
    
    public DatabaseMetaData getMetaData() throws SQLException {
        return (DatabaseMetaData) getSQLiteDatabaseMetaData();
    }
    
    public String getUrl() {
        return db.getUrl();
    }
    
    public void setSchema(String schema) throws SQLException {
    }
    
    public String getSchema() throws SQLException {
        return null;
    }
    
    public void abort(Executor executor) throws SQLException {
    }
    
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
    }
    
    public int getNetworkTimeout() throws SQLException {
        return 0;
    }
    
    protected void checkCursor(int rst, int rsc, int rsh) throws SQLException {
        if (rst != ResultSet.TYPE_FORWARD_ONLY){
            throw new SQLException("SQLite only supports TYPE_FORWARD_ONLY cursors");
}
        if (rsc != ResultSet.CONCUR_READ_ONLY){
            throw new SQLException("SQLite only supports CONCUR_READ_ONLY cursors");
}
        if (rsh != ResultSet.CLOSE_CURSORS_AT_COMMIT){
            throw new SQLException("SQLite only supports closing cursors at commit");
}
    }
    
    protected void setTransactionMode(SQLiteConfig.TransactionMode mode) {
        connectionConfig.setTransactionMode(mode);
    }
    
    public int getTransactionIsolation() {
        return connectionConfig.getTransactionIsolation();
    }
    
    public void setTransactionIsolation(int level) throws SQLException {
        checkOpen();
        switch (level) {
            case java.sql.Connection.TRANSACTION_READ_COMMITTED:
            case java.sql.Connection.TRANSACTION_REPEATABLE_READ:
            case java.sql.Connection.TRANSACTION_SERIALIZABLE:
                getDatabase().exec("PRAGMA read_uncommitted = false;", getAutoCommit());
                break;
            case java.sql.Connection.TRANSACTION_READ_UNCOMMITTED:
                getDatabase().exec("PRAGMA read_uncommitted = true;", getAutoCommit());
                break;
            default: throw new SQLException( "Unsupported transaction isolation level: " + level + ". " + "Must be one of TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED, " + "TRANSACTION_REPEATABLE_READ, or TRANSACTION_SERIALIZABLE in java.sql.Connection");
        }
        
        connectionConfig.setTransactionIsolation(level);
    }
    
    private static DB open(String url, String origFileName, Properties props) throws SQLException {
        Properties newProps = new Properties();
        newProps.putAll(props);
        String fileName = extractPragmasFromFilename(url, origFileName, newProps);
        SQLiteConfig config = new SQLiteConfig(newProps);
        if (!fileName.isEmpty() && !":memory:".equals(fileName) && !fileName.startsWith("file:") && !fileName.contains("mode=memory")) {
            if (fileName.startsWith(RESOURCE_NAME_PREFIX)) {
                String resourceName = fileName.substring(RESOURCE_NAME_PREFIX.length());
                ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
                URL resourceAddr = contextCL.getResource(resourceName);
                if (resourceAddr == null) {
                    try {
                        resourceAddr = new URL(resourceName);
                    }
                     catch (MalformedURLException e) {
                        throw new SQLException( String.format("resource %s not found: %s", resourceName, e));
                    }
                    
                }
                
                try {
                    fileName = extractResource(resourceAddr).getAbsolutePath();
                }
                 catch (IOException e) {
                    throw new SQLException(String.format("failed to load %s: %s", resourceName, e));
                }
                
            }
             else {
                File file = new File(fileName).getAbsoluteFile();
                File parent = file.getParentFile();
                if (parent != null && !parent.exists()) {
                    for (File up = parent; up != null && !up.exists(); ) {
                        parent = up;
                        up = up.getParentFile();
                    }
                    
                    throw new SQLException( "path to '" + fileName + "': '" + parent + "' does not exist");
                }
                
                try {
                    if (!file.exists() && file.createNewFile()) file.delete();
                }
                 catch (Exception e) {
                    throw new SQLException("opening db: '" + fileName + "': " + e.getMessage());
                }
                
                fileName = file.getAbsolutePath();
            }
            
        }
        
        DB db = null;
        try {
            NativeDB.load();
            db = new NativeDB(url, fileName, config);
        }
         catch (Exception e) {
            SQLException err = new SQLException("Error opening connection");
            err.initCause(e);
            throw err;
        }
        
        db.open(fileName, config.getOpenModeFlags());
        return db;
    }
    
    private static File extractResource(URL resourceAddr) throws IOException {
        if (resourceAddr.getProtocol().equals("file")) {
            try {
                return new File(resourceAddr.toURI());
            }
             catch (URISyntaxException e) {
                throw new IOException(e.getMessage());
            }
            
        }
        
        String tempFolder = new File(System.getProperty("java.io.tmpdir")).getAbsolutePath();
        String dbFileName = String.format("sqlite-jdbc-tmp-%d.db", resourceAddr.hashCode());
        File dbFile = new File(tempFolder, dbFileName);
        if (dbFile.exists()) {
            long resourceLastModified = resourceAddr.openConnection().getLastModified();
            long tmpFileLastModified = dbFile.lastModified();
            if (resourceLastModified < tmpFileLastModified) {
                return dbFile;
            }
             else {
                boolean deletionSucceeded = dbFile.delete();
                if (!deletionSucceeded) {
                    throw new IOException( "failed to remove existing DB file: " + dbFile.getAbsolutePath());
                }
                
            }
            
        }
        
        URLConnection conn = resourceAddr.openConnection();
        conn.setUseCaches(false);
        try (InputStream reader = conn.getInputStream()) {
            Files.copy(reader, dbFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            return dbFile;
        }
        
    }
    
    public DB getDatabase() {
        return db;
    }
    
    public boolean getAutoCommit() throws SQLException {
        checkOpen();
        return connectionConfig.isAutoCommit();
    }
    
    public void setAutoCommit(boolean ac) throws SQLException {
        checkOpen();
        if (connectionConfig.isAutoCommit() == ac) return;
        connectionConfig.setAutoCommit(ac);
        if (this.getConnectionConfig().isAutoCommit()) {
            db.exec("commit;", ac);
            this.currentTransactionMode = null;
        }
         else {
            db.exec(this.transactionPrefix(), ac);
            this.currentTransactionMode = this.getConnectionConfig().getTransactionMode();
        }
        
    }
    
    public int getBusyTimeout() {
        return db.getConfig().getBusyTimeout();
    }
    
    public void setBusyTimeout(int timeoutMillis) throws SQLException {
        db.getConfig().setBusyTimeout(timeoutMillis);
        db.busy_timeout(timeoutMillis);
    }
    
    public void setLimit(SQLiteLimits limit, int value) throws SQLException {
        if (value >= 0) {
            db.limit(limit.getId(), value);
        }
        
    }
    
    public void getLimit(SQLiteLimits limit) throws SQLException {
        db.limit(limit.getId(), -1);
    }
    
    public boolean isClosed() throws SQLException {
        return db.isClosed();
    }
    
    public void close() throws SQLException {
        if (isClosed()) return;
        if (meta != null) meta.close();
        db.close();
    }
    
    protected void checkOpen() throws SQLException {
        if (isClosed()) throw new SQLException("database connection closed");
    }
    
    public String libversion() throws SQLException {
        checkOpen();
        return db.libversion();
    }
    
    public void commit() throws SQLException {
        checkOpen();
        if (connectionConfig.isAutoCommit()) throw new SQLException("database in auto-commit mode");
        db.exec("commit;", getAutoCommit());
        db.exec(this.transactionPrefix(), getAutoCommit());
        this.firstStatementExecuted = false;
        this.setCurrentTransactionMode(this.getConnectionConfig().getTransactionMode());
    }
    
    public void rollback() throws SQLException {
        checkOpen();
        if (connectionConfig.isAutoCommit()) throw new SQLException("database in auto-commit mode");
        db.exec("rollback;", getAutoCommit());
        db.exec(this.transactionPrefix(), getAutoCommit());
        this.firstStatementExecuted = false;
        this.setCurrentTransactionMode(this.getConnectionConfig().getTransactionMode());
    }
    
    public void addUpdateListener(SQLiteUpdateListener listener) {
        db.addUpdateListener(listener);
    }
    
    public void removeUpdateListener(SQLiteUpdateListener listener) {
        db.removeUpdateListener(listener);
    }
    
    public void addCommitListener(SQLiteCommitListener listener) {
        db.addCommitListener(listener);
    }
    
    public void removeCommitListener(SQLiteCommitListener listener) {
        db.removeCommitListener(listener);
    }
    
    protected static String extractPragmasFromFilename(String url, String filename, Properties prop) throws SQLException {
        int parameterDelimiter = filename.indexOf('?');
        if (parameterDelimiter == -1) {
            return filename;
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append(filename.substring(0, parameterDelimiter));
        int nonPragmaCount = 0;
        String[] parameters = filename.substring(parameterDelimiter + 1).split("&");
        for (int i = 0; i < parameters.length; i++) {
            String parameter = parameters[parameters.length - 1 - i].trim();
            if (parameter.isEmpty()) {
                continue;
            }
            
            String[] kvp = parameter.split("=");
            String key = kvp[0].trim().toLowerCase();
            if (SQLiteConfig.pragmaSet.contains(key)) {
                if (kvp.length == 1) {
                    throw new SQLException( String.format( "Please specify a value for PRAGMA %s in URL %s", key, url));
                }
                
                String value = kvp[1].trim();
                if (!value.isEmpty()) {
                    if (prop.containsKey(key)) {
                    }
                     else {
                        prop.setProperty(key, value);
                    }
                    
                }
                
            }
             else {
                sb.append(nonPragmaCount == 0 ? '?' : '&');
                sb.append(parameter);
                nonPragmaCount++;
            }
            
        }
        
        final String newFilename = sb.toString();
        return newFilename;
    }
    
    protected String transactionPrefix() {
        return this.connectionConfig.transactionPrefix();
    }
    
}


