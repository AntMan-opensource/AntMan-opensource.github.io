package org.apache.hadoop.hdds;
import javax.management.ObjectName;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalInt;
import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
import org.apache.hadoop.hdds.annotation.InterfaceAudience;
import org.apache.hadoop.hdds.annotation.InterfaceStability;
import org.apache.hadoop.hdds.client.BlockID;
import org.apache.hadoop.hdds.conf.ConfigurationException;
import org.apache.hadoop.hdds.conf.ConfigurationSource;
import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;
import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.ContainerCommandRequestProto;
import org.apache.hadoop.hdds.scm.ScmConfigKeys;
import org.apache.hadoop.hdds.scm.ha.SCMHAUtils;
import org.apache.hadoop.hdds.scm.ha.SCMNodeInfo;
import org.apache.hadoop.metrics2.util.MBeans;
import org.apache.hadoop.net.DNS;
import org.apache.hadoop.net.NetUtils;
import com.google.common.base.Preconditions;
import com.google.common.net.HostAndPort;
import org.apache.commons.lang3.StringUtils;
import static org.apache.hadoop.hdds.DFSConfigKeysLegacy.DFS_DATANODE_DNS_INTERFACE_KEY;
import static org.apache.hadoop.hdds.DFSConfigKeysLegacy.DFS_DATANODE_DNS_NAMESERVER_KEY;
import static org.apache.hadoop.hdds.DFSConfigKeysLegacy.DFS_DATANODE_HOST_NAME_KEY;
import static org.apache.hadoop.hdds.recon.ReconConfigKeys.OZONE_RECON_ADDRESS_KEY;
import static org.apache.hadoop.hdds.recon.ReconConfigKeys.OZONE_RECON_DATANODE_PORT_DEFAULT;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_ADDRESS_KEY;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CLIENT_ADDRESS_KEY;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CLIENT_PORT_DEFAULT;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_CLIENT_PORT_KEY;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_DATANODE_PORT_DEFAULT;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_DATANODE_PORT_KEY;
import static org.apache.hadoop.hdds.scm.ScmConfigKeys.OZONE_SCM_NAMES;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public final class HddsUtils {
  private static final Logger LOG = LoggerFactory.getLogger(HddsUtils.class);
  public static final String OZONE_SCM_SERVICE_ID = "OzoneScmService";
  public static final String OZONE_SCM_SERVICE_INSTANCE_ID = "OzoneScmServiceInstance";
  private static final String MULTIPLE_SCM_NOT_YET_SUPPORTED = ScmConfigKeys.OZONE_SCM_NAMES + " must contain a single hostname." + " Multiple SCM hosts are currently unsupported";
  private static final int NO_PORT = -1;
  private HddsUtils() {
  }
  
  public static Collection<InetSocketAddress> getScmAddressForClients( ConfigurationSource conf) {
    if (SCMHAUtils.getScmServiceId(conf) != null) {
      List<SCMNodeInfo> scmNodeInfoList = SCMNodeInfo.buildNodeInfo(conf);
      Collection<InetSocketAddress> scmAddressList = new HashSet<>(scmNodeInfoList.size());
      for (SCMNodeInfo scmNodeInfo : scmNodeInfoList) {
        if (scmNodeInfo.getScmClientAddress() == null) {
          throw new ConfigurationException("Ozone scm client address is not " + "set for SCM service-id " + scmNodeInfo.getServiceId() + "node-id" + scmNodeInfo.getNodeId());
        }
        
        scmAddressList.add( NetUtils.createSocketAddr(scmNodeInfo.getScmClientAddress()));
      }
      
      return scmAddressList;
    }
     else {
      String address = conf.getTrimmed(OZONE_SCM_CLIENT_ADDRESS_KEY);
      int port = -1;
      if (address == null) {
        Collection<String> scmAddresses = conf.getTrimmedStringCollection(OZONE_SCM_NAMES);
        if (scmAddresses.isEmpty()) {
          throw new ConfigurationException("Ozone scm client address is not " + "set. Configure one of these config " + OZONE_SCM_CLIENT_ADDRESS_KEY + ", " + OZONE_SCM_NAMES);
        }
        
        if (scmAddresses.size() > 1) {
          throw new ConfigurationException("For non-HA SCM " + OZONE_SCM_NAMES + " should be set with single address");
        }
        
        address = scmAddresses.iterator().next();
        port = conf.getInt(OZONE_SCM_CLIENT_PORT_KEY, OZONE_SCM_CLIENT_PORT_DEFAULT);
      }
       else {
        port = getHostPort(address) .orElse(conf.getInt(OZONE_SCM_CLIENT_PORT_KEY, OZONE_SCM_CLIENT_PORT_DEFAULT));
      }
      
      return Collections.singletonList( NetUtils.createSocketAddr(getHostName(address).get() + ":" + port));
    }
    
  }
  
  public static Optional<String> getHostNameFromConfigKeys( ConfigurationSource conf, String... keys) {
    for (final String key : keys) {
      final String value = conf.getTrimmed(key);
      final Optional<String> hostName = getHostName(value);
      if (hostName.isPresent()) {
        return hostName;
      }
      
    }
    
    return Optional.empty();
  }
  
  public static Optional<String> getHostName(String value) {
    if ((value == null) || value.isEmpty()) {
      return Optional.empty();
    }
    
    String hostname = value.replaceAll("\\:[0-9]+$", "");
    if (hostname.length() == 0) {
      return Optional.empty();
    }
     else {
      return Optional.of(hostname);
    }
    
  }
  
  public static OptionalInt getHostPort(String value) {
    if ((value == null) || value.isEmpty()) {
      return OptionalInt.empty();
    }
    
    int port = HostAndPort.fromString(value).getPortOrDefault(NO_PORT);
    if (port == NO_PORT) {
      return OptionalInt.empty();
    }
     else {
      return OptionalInt.of(port);
    }
    
  }
  
  public static OptionalInt getPortNumberFromConfigKeys( ConfigurationSource conf, String... keys) {
    for (final String key : keys) {
      final String value = conf.getTrimmed(key);
      final OptionalInt hostPort = getHostPort(value);
      if (hostPort.isPresent()) {
        return hostPort;
      }
      
    }
    
    return OptionalInt.empty();
  }
  
  public static Collection<InetSocketAddress> getSCMAddressForDatanodes( ConfigurationSource conf) {
    if (SCMHAUtils.getScmServiceId(conf) != null) {
      List<SCMNodeInfo> scmNodeInfoList = SCMNodeInfo.buildNodeInfo(conf);
      Collection<InetSocketAddress> scmAddressList = new HashSet<>(scmNodeInfoList.size());
      for (SCMNodeInfo scmNodeInfo : scmNodeInfoList) {
        scmAddressList.add( NetUtils.createSocketAddr(scmNodeInfo.getScmDatanodeAddress()));
      }
      
      return scmAddressList;
    }
     else {
      Collection<String> names = conf.getTrimmedStringCollection(ScmConfigKeys.OZONE_SCM_NAMES);
      if (names.isEmpty()) {
        throw new IllegalArgumentException(ScmConfigKeys.OZONE_SCM_NAMES + " need to be a set of valid DNS names or IP addresses." + " Empty address list found.");
      }
      
      Collection<InetSocketAddress> addresses = new HashSet<>(names.size());
      for (String address : names) {
        Optional<String> hostname = getHostName(address);
        if (!hostname.isPresent()) {
          throw new IllegalArgumentException("Invalid hostname for SCM: " + address);
        }
        
        int port = getHostPort(address) .orElse(conf.getInt(OZONE_SCM_DATANODE_PORT_KEY, OZONE_SCM_DATANODE_PORT_DEFAULT));
        InetSocketAddress addr = NetUtils.createSocketAddr(hostname.get(), port);
        addresses.add(addr);
      }
      
      if (addresses.size() > 1) {
        LOG.warn("When SCM HA is configured, configure {} appended with " + "serviceId and nodeId. {} is deprecated.", OZONE_SCM_ADDRESS_KEY, OZONE_SCM_NAMES);
      }
      
      return addresses;
    }
    
  }
  
  public static InetSocketAddress getReconAddresses( ConfigurationSource conf) {
    String name = conf.get(OZONE_RECON_ADDRESS_KEY);
    if (StringUtils.isEmpty(name)) {
      return null;
    }
    
    Optional<String> hostname = getHostName(name);
    if (!hostname.isPresent()) {
      throw new IllegalArgumentException("Invalid hostname for Recon: " + name);
    }
    
    int port = getHostPort(name).orElse(OZONE_RECON_DATANODE_PORT_DEFAULT);
    return NetUtils.createSocketAddr(hostname.get(), port);
  }
  
  public static String getHostName(ConfigurationSource conf) throws UnknownHostException {
    String name = conf.get(DFS_DATANODE_HOST_NAME_KEY);
    if (name == null) {
      String dnsInterface = conf.get( CommonConfigurationKeysPublic.HADOOP_SECURITY_DNS_INTERFACE_KEY);
      String nameServer = conf.get( CommonConfigurationKeysPublic.HADOOP_SECURITY_DNS_NAMESERVER_KEY);
      boolean fallbackToHosts = false;
      if (dnsInterface == null) {
        dnsInterface = conf.get(DFS_DATANODE_DNS_INTERFACE_KEY);
        dnsInterface = conf.get(DFS_DATANODE_DNS_INTERFACE_KEY);
        nameServer = conf.get(DFS_DATANODE_DNS_NAMESERVER_KEY);
      }
       else {
        fallbackToHosts = true;
      }
      
      name = DNS.getDefaultHost(dnsInterface, nameServer, fallbackToHosts);
    }
    
    return name;
  }
  
  public static boolean isReadOnly( ContainerProtos.ContainerCommandRequestProto proto) {
    switch (proto.getCmdType()) {
    case ReadContainer:
    case ReadChunk:
    case ListBlock:
    case GetBlock:
    case GetSmallFile:
    case ListContainer:
    case ListChunk:
    case GetCommittedBlockLength:
      return true;
    case CloseContainer:
    case WriteChunk:
    case UpdateContainer:
    case CompactChunk:
    case CreateContainer:
    case DeleteChunk:
    case DeleteContainer:
    case DeleteBlock:
    case PutBlock:
    case PutSmallFile:
    default: return false;
    }
    
  }
  
  public static boolean requireBlockToken( ContainerProtos.Type cmdType) {
    switch (cmdType) {
    case ReadChunk:
    case GetBlock:
    case WriteChunk:
    case PutBlock:
    case PutSmallFile:
    case GetSmallFile:
      return true;
    default: return false;
    }
    
  }
  
  public static boolean requireContainerToken( ContainerProtos.Type cmdType) {
    switch (cmdType) {
    case CloseContainer:
    case CreateContainer:
    case DeleteContainer:
    case ListContainer:
    case ReadContainer:
    case UpdateContainer:
      return true;
    default: return false;
    }
    
  }
  
  public static BlockID getBlockID(ContainerCommandRequestProto msg) {
    switch (msg.getCmdType()) {
    case ReadChunk:
      if (msg.hasReadChunk()) {
        return BlockID.getFromProtobuf(msg.getReadChunk().getBlockID());
      }
      
      return null;
    case GetBlock:
      if (msg.hasGetBlock()) {
        return BlockID.getFromProtobuf(msg.getGetBlock().getBlockID());
      }
      
      return null;
    case WriteChunk:
      if (msg.hasWriteChunk()) {
        return BlockID.getFromProtobuf(msg.getWriteChunk().getBlockID());
      }
      
      return null;
    case PutBlock:
      if (msg.hasPutBlock()) {
        return BlockID.getFromProtobuf(msg.getPutBlock().getBlockData() .getBlockID());
      }
      
      return null;
    case PutSmallFile:
      if (msg.hasPutSmallFile()) {
        return BlockID.getFromProtobuf(msg.getPutSmallFile().getBlock() .getBlockData().getBlockID());
      }
      
      return null;
    case GetSmallFile:
      if (msg.hasGetSmallFile()) {
        return BlockID.getFromProtobuf(msg.getGetSmallFile().getBlock() .getBlockID());
      }
      
      return null;
    default: return null;
    }
    
  }
  
  public static ObjectName registerWithJmxProperties( String serviceName, String mBeanName, Map<String, String> jmxProperties, Object mBean) {
    try {
      final Method registerMethod = MBeans.class.getMethod( "register", String.class, String.class, Map.class, Object.class);
      return (ObjectName) registerMethod.invoke( null, serviceName, mBeanName, jmxProperties, mBean);
    }
     catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
      if (LOG.isTraceEnabled()) {
        LOG.trace("Registering MBean {} without additional properties {}", mBeanName, jmxProperties);
      }
      
      return MBeans.register(serviceName, mBeanName, mBean);
    }
    
  }
  
  public static long getTime() {
    return System.currentTimeMillis();
  }
  
  public static void validatePath(Path path, Path ancestor) {
    Preconditions.checkNotNull(path, "Path should not be null");
    Preconditions.checkNotNull(ancestor, "Ancestor should not be null");
    Preconditions.checkArgument( path.normalize().startsWith(ancestor.normalize()), "Path should be a descendant of %s", ancestor);
  }
  
  public static File createDir(String dirPath) {
    File dirFile = new File(dirPath);
    if (!dirFile.mkdirs() && !dirFile.exists()) {
      throw new IllegalArgumentException("Unable to create path: " + dirFile);
    }
    
    return dirFile;
  }
  
  static String getPassword(ConfigurationSource conf, String alias) {
    String password = null;
    try {
      char[] passchars = conf.getPassword(alias);
      if (passchars != null) {
        password = new String(passchars);
      }
      
    }
     catch (IOException ioe) {
      LOG.warn("Setting password to null since IOException is caught" + " when getting password", ioe);
      password = null;
    }
    
    return password;
  }
  
}


