package org.apache.hadoop.hdds.security.token;
import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;
import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.ContainerCommandRequestProto;
import org.apache.hadoop.hdds.security.exception.SCMSecurityException;
import org.apache.hadoop.hdds.security.x509.SecurityConfig;
import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.security.token.Token;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.security.cert.CertificateExpiredException;
import java.security.cert.CertificateNotYetValidException;
import java.security.cert.X509Certificate;
import java.time.Instant;
import java.util.Objects;
public abstract class ShortLivedTokenVerifier<T extends ShortLivedTokenIdentifier> implements TokenVerifier {
  private final CertificateClient caClient;
  private final SecurityConfig conf;
  protected ShortLivedTokenVerifier(SecurityConfig conf, CertificateClient caClient) {
    this.conf = conf;
    this.caClient = caClient;
  }
  
  protected abstract boolean isTokenRequired(ContainerProtos.Type cmdType);
  protected abstract T createTokenIdentifier();
  protected abstract Object getService(ContainerCommandRequestProto cmd);
  protected void verify(T tokenId, ContainerCommandRequestProto cmd) throws SCMSecurityException {
  }
  
  public void verify(String user, Token<?> token, ContainerCommandRequestProto cmd) throws SCMSecurityException {
    if (!isTokenRequired(cmd.getCmdType())) {
      return;
    }
    
    if (caClient == null) {
      throw new SCMSecurityException("Certificate client not available " + "to validate token");
    }
    
    T tokenId = createTokenIdentifier();
    try {
      tokenId.readFields(new DataInputStream(new ByteArrayInputStream( token.getIdentifier())));
    }
     catch (IOException ex) {
      throw new BlockTokenException("Failed to decode token : " + token);
    }
    
    UserGroupInformation tokenUser = tokenId.getUser();
    X509Certificate signerCert = caClient.getCertificate(tokenId.getCertSerialId());
    if (signerCert == null) {
      throw new BlockTokenException("Can't find signer certificate " + "(CertSerialId: " + tokenId.getCertSerialId() + ") of the token for user: " + tokenUser);
    }
    
    try {
      signerCert.checkValidity();
    }
     catch (CertificateExpiredException exExp) {
      throw new BlockTokenException("Token can't be verified due to " + "expired certificate " + tokenId.getCertSerialId());
    }
     catch (CertificateNotYetValidException exNyv) {
      throw new BlockTokenException("Token can't be verified due to " + "not yet valid certificate " + tokenId.getCertSerialId());
    }
    
    if (!caClient.verifySignature(tokenId.getBytes(), token.getPassword(), signerCert)) {
      throw new BlockTokenException("Invalid token for user: " + tokenUser);
    }
    
    if (tokenId.isExpired(Instant.now())) {
      throw new BlockTokenException("Expired token for user: " + tokenUser);
    }
    
    String service = String.valueOf(getService(cmd));
    if (!Objects.equals(service, tokenId.getService())) {
      throw new BlockTokenException("ID mismatch. Token for ID: " + tokenId.getService() + " can't be used to access: " + service + " by user: " + tokenUser);
    }
    
    verify(tokenId, cmd);
  }
  
  protected SecurityConfig getConf() {
    return conf;
  }
  
}


