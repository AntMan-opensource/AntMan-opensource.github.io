package org.keycloak.theme;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
public class FolderThemeProvider implements ThemeProvider {
    private File themesDir;
    public FolderThemeProvider(File themesDir) {
        this.themesDir = themesDir;
    }
    
    public int getProviderPriority() {
        return 100;
    }
    
    public Theme getTheme(String name, Theme.Type type) throws IOException {
        if (themesDir == null) {
            return null;
        }
        
        File themeDir = getThemeDir(name, type);
        return themeDir.isDirectory() ? new FolderTheme(themeDir, name, type) : null;
    }
    
    public Set<String> nameSet(Theme.Type type) {
        if (themesDir == null) {
            return Collections.emptySet();
        }
        
        final String typeName = type.name().toLowerCase();
        File[] themeDirs = themesDir.listFiles(new FileFilter() {
            public boolean accept(File pathname) {
                return pathname.isDirectory() && new File(pathname, typeName).isDirectory();
            }
            
        }
        
);
        if (themeDirs != null) {
            Set<String> names = new HashSet<String>();
            for (File themeDir : themeDirs) {
                names.add(themeDir.getName());
            }
            
            return names;
        }
         else {
            return Collections.emptySet();
        }
        
    }
    
    public boolean hasTheme(String name, Theme.Type type) {
        return themesDir != null ? getThemeDir(name, type).isDirectory() : false;
    }
    
    public void close() {
    }
    
    private File getThemeDir(String name, Theme.Type type) {
        return new File(themesDir, name + File.separator + type.name().toLowerCase());
    }
    
}


