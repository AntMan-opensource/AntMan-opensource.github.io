package org.apache.hadoop.hdds.utils.db;
import org.apache.hadoop.conf.StorageUnit;
import org.rocksdb.BlockBasedTableConfig;
import org.rocksdb.BloomFilter;
import org.rocksdb.ColumnFamilyOptions;
import org.rocksdb.CompactionStyle;
import org.rocksdb.DBOptions;
import org.rocksdb.LRUCache;
import java.math.BigDecimal;
public enum DBProfile {
  SSD {
    public String toString() {
      return "SSD";
    }
    
    public ColumnFamilyOptions getColumnFamilyOptions() {
      final long blockCacheSize = toLong(StorageUnit.MB.toBytes(256.00));
      final long blockSize = toLong(StorageUnit.KB.toBytes(16));
      final long writeBufferSize = toLong(StorageUnit.MB.toBytes(128));
      return new ColumnFamilyOptions() .setLevelCompactionDynamicLevelBytes(true) .setWriteBufferSize(writeBufferSize) .setTableFormatConfig( new BlockBasedTableConfig() .setBlockCache(new LRUCache(blockCacheSize)) .setBlockSize(blockSize) .setPinL0FilterAndIndexBlocksInCache(true) .setFilterPolicy(new BloomFilter()));
    }
    
    public DBOptions getDBOptions() {
      final int maxBackgroundCompactions = 4;
      final int maxBackgroundFlushes = 2;
      final long bytesPerSync = toLong(StorageUnit.MB.toBytes(1.00));
      final boolean createIfMissing = true;
      final boolean createMissingColumnFamilies = true;
      return new DBOptions() .setIncreaseParallelism(Runtime.getRuntime().availableProcessors()) .setMaxBackgroundCompactions(maxBackgroundCompactions) .setMaxBackgroundFlushes(maxBackgroundFlushes) .setBytesPerSync(bytesPerSync) .setCreateIfMissing(createIfMissing) .setCreateMissingColumnFamilies(createMissingColumnFamilies);
    }
    
  }, DISK {
    public String toString() {
      return "DISK";
    }
    
    public DBOptions getDBOptions() {
      final long readAheadSize = toLong(StorageUnit.MB.toBytes(4.00));
      return SSD.getDBOptions().setCompactionReadaheadSize(readAheadSize);
    }
    
    public ColumnFamilyOptions getColumnFamilyOptions() {
      ColumnFamilyOptions columnFamilyOptions = SSD.getColumnFamilyOptions();
      columnFamilyOptions.setCompactionStyle(CompactionStyle.LEVEL);
      return columnFamilyOptions;
    }
    
  };
  private static long toLong(double value) {
    BigDecimal temp = BigDecimal.valueOf(value);
    return temp.longValue();
  }
  
  public abstract DBOptions getDBOptions();
  public abstract ColumnFamilyOptions getColumnFamilyOptions();
}


