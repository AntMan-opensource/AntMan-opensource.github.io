package hudson.plugins.ec2;
import com.amazonaws.SdkClientException;
import com.google.common.annotations.VisibleForTesting;
import hudson.Extension;
import hudson.Util;
import hudson.model.Failure;
import hudson.plugins.ec2.util.AmazonEC2Factory;
import hudson.slaves.Cloud;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Locale;
import javax.annotation.Nullable;
import javax.servlet.ServletException;
import jenkins.model.Jenkins;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerResponse;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.model.DescribeRegionsResult;
import com.amazonaws.services.ec2.model.Region;
public class AmazonEC2Cloud extends EC2Cloud {
    private String region;
    public static final String CLOUD_ID_PREFIX = "ec2-";
    private boolean noDelayProvisioning;
    public AmazonEC2Cloud(String cloudName, boolean useInstanceProfileForCredentials, String credentialsId, String region, String privateKey, String instanceCapStr, List<? extends SlaveTemplate> templates, String roleArn, String roleSessionName) {
        super(createCloudId(cloudName), useInstanceProfileForCredentials, credentialsId, privateKey, instanceCapStr, templates, roleArn, roleSessionName);
        this.region = region;
    }
    
    public String getCloudName() {
        return this.name.substring(CLOUD_ID_PREFIX.length());
    }
    
    public String getDisplayName() {
        return getCloudName();
    }
    
    private static String createCloudId(String cloudName) {
        return CLOUD_ID_PREFIX + cloudName.trim();
    }
    
    public String getRegion() {
        if (region == null){
            region = DEFAULT_EC2_HOST; 
}
        if (region.indexOf('_') > 0){
            return region.replace('_', '-').toLowerCase(Locale.ENGLISH);
}
        return region;
    }
    
    public static URL getEc2EndpointUrl(String region) {
        try {
            return new URL("https://ec2." + region + "." + AWS_URL_HOST + "/");
        }
         catch (MalformedURLException e) {
            throw new Error(e); 
        }
        
    }
    
    public URL getEc2EndpointUrl() {
        return getEc2EndpointUrl(getRegion());
    }
    
    public URL getS3EndpointUrl() {
        try {
            return new URL("https://" + getRegion() + ".s3.amazonaws.com/");
        }
         catch (MalformedURLException e) {
            throw new Error(e); 
        }
        
    }
    
    public boolean isNoDelayProvisioning() {
        return noDelayProvisioning;
    }
    
    public void setNoDelayProvisioning(boolean noDelayProvisioning) {
        this.noDelayProvisioning = noDelayProvisioning;
    }
    
    protected AWSCredentialsProvider createCredentialsProvider() {
        return createCredentialsProvider(isUseInstanceProfileForCredentials(), getCredentialsId(), getRoleArn(), getRoleSessionName(), getRegion());
    }
    
    public static class DescriptorImpl extends EC2Cloud.DescriptorImpl {
        public String getDisplayName() {
            return "Amazon EC2";
        }
        
        public FormValidation doCheckCloudName(@QueryParameter String value) {
            try {
                Jenkins.checkGoodName(value);
            }
             catch (Failure e) {
                return FormValidation.error(e.getMessage());
            }
            
            String cloudId = createCloudId(value);
            int found = 0;
            for (Cloud c : Jenkins.get().clouds) {
                if (c.name.equals(cloudId)) {
                    found++;
                }
                
            }
            
            if (found > 1) {
                return FormValidation.error(Messages.AmazonEC2Cloud_NonUniqName());
            }
            
            return FormValidation.ok();
        }
        
        public ListBoxModel doFillRegionItems( @QueryParameter String altEC2Endpoint, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId) throws IOException, ServletException {
            ListBoxModel model = new ListBoxModel();
            try {
                AWSCredentialsProvider credentialsProvider = createCredentialsProvider(useInstanceProfileForCredentials, credentialsId);
                AmazonEC2 client = AmazonEC2Factory.getInstance().connect(credentialsProvider, determineEC2EndpointURL(altEC2Endpoint));
                DescribeRegionsResult regions = client.describeRegions();
                List<Region> regionList = regions.getRegions();
                for (Region r : regionList) {
                    String name = r.getRegionName();
                    model.add(name, name);
                }
                
            }
             catch (SdkClientException ex) {
            }
            
            return model;
        }
        
        @VisibleForTesting
        URL determineEC2EndpointURL(@Nullable String altEC2Endpoint) throws MalformedURLException {
            if (Util.fixEmpty(altEC2Endpoint) == null) {
                return new URL(DEFAULT_EC2_ENDPOINT);
            }
            
            return new URL(altEC2Endpoint);
        }
        
        public FormValidation doTestConnection( @QueryParameter String region, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String privateKey, @QueryParameter String roleArn, @QueryParameter String roleSessionName) throws IOException, ServletException {
            if (Util.fixEmpty(region) == null) {
                region = DEFAULT_EC2_HOST;
            }
            
            return super.doTestConnection(getEc2EndpointUrl(region), useInstanceProfileForCredentials, credentialsId, privateKey, roleArn, roleSessionName, region);
        }
        
        public FormValidation doGenerateKey(StaplerResponse rsp, @QueryParameter String region, @QueryParameter boolean useInstanceProfileForCredentials, @QueryParameter String credentialsId, @QueryParameter String roleArn, @QueryParameter String roleSessionName) throws IOException, ServletException {
            return super.doGenerateKey(rsp, getEc2EndpointUrl(region), useInstanceProfileForCredentials, credentialsId, roleArn, roleSessionName, region);
        }
        
    }
    
}


