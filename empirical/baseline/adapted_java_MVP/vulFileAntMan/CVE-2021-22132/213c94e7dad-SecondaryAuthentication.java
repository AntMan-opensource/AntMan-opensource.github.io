package org.elasticsearch.xpack.core.security.authc.support;
import org.elasticsearch.common.Nullable;
import org.elasticsearch.common.util.concurrent.ThreadContext;
import org.elasticsearch.xpack.core.security.SecurityContext;
import org.elasticsearch.xpack.core.security.authc.Authentication;
import org.elasticsearch.xpack.core.security.user.User;
import java.io.IOException;
import java.util.Objects;
import java.util.function.Function;
public class SecondaryAuthentication {
    private static final String THREAD_CTX_KEY = "_xpack_security_secondary_authc";
    private final SecurityContext securityContext;
    private final Authentication authentication;
    public SecondaryAuthentication(SecurityContext securityContext, Authentication authentication) {
        this.securityContext = Objects.requireNonNull(securityContext);
        this.authentication = Objects.requireNonNull(authentication);
    }
    
    public static SecondaryAuthentication readFromContext(SecurityContext securityContext) throws IOException {
        final Authentication authentication = serializer().readFromContext(securityContext.getThreadContext());
        if (authentication == null) {
            return null;
        }
        
        return new SecondaryAuthentication(securityContext, authentication);
    }
    
    public void writeToContext(ThreadContext threadContext) throws IOException {
        serializer().writeToContext(this.authentication, threadContext);
    }
    
    private static AuthenticationContextSerializer serializer() {
        return new AuthenticationContextSerializer(THREAD_CTX_KEY);
    }
    
    public Authentication getAuthentication() {
        return authentication;
    }
    
    public User getUser() {
        return authentication.getUser();
    }
    
    public <T> T execute(Function<ThreadContext.StoredContext, T> body) {
        return this.securityContext.executeWithAuthentication(this.authentication, body);
    }
    
    public Runnable wrap(Runnable runnable) {
        return () -> execute(ignore -> {
            runnable.run();
            return null;
        }
        
);
    }
    
    public String toString() {
        return getClass().getSimpleName() + "{" + authentication + "}";
    }
    
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final SecondaryAuthentication that = (SecondaryAuthentication) o;
        return authentication.equals(that.authentication);
    }
    
    public int hashCode() {
        return Objects.hash(authentication);
    }
    
}


