package com.liferay.dynamic.data.mapping.form.web.internal.portlet;
import com.liferay.dynamic.data.mapping.constants.DDMPortletKeys;
import com.liferay.dynamic.data.mapping.form.field.type.DDMFormFieldTypeServicesTracker;
import com.liferay.dynamic.data.mapping.form.renderer.DDMFormRenderer;
import com.liferay.dynamic.data.mapping.form.values.factory.DDMFormValuesFactory;
import com.liferay.dynamic.data.mapping.form.web.internal.configuration.activator.DDMFormWebConfigurationActivator;
import com.liferay.dynamic.data.mapping.form.web.internal.configuration.activator.FFSubmissionsSettingsConfigurationActivator;
import com.liferay.dynamic.data.mapping.form.web.internal.constants.DDMFormWebKeys;
import com.liferay.dynamic.data.mapping.form.web.internal.display.context.DDMFormDisplayContext;
import com.liferay.dynamic.data.mapping.form.web.internal.instance.lifecycle.AddDefaultSharedFormLayoutPortalInstanceLifecycleListener;
import com.liferay.dynamic.data.mapping.model.DDMFormInstance;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceLocalService;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceRecordLocalService;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceRecordVersionLocalService;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceService;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceVersionLocalService;
import com.liferay.dynamic.data.mapping.storage.DDMStorageAdapterTracker;
import com.liferay.dynamic.data.mapping.util.DDMFormValuesMerger;
import com.liferay.dynamic.data.mapping.validator.DDMFormValuesValidationException;
import com.liferay.object.service.ObjectFieldLocalService;
import com.liferay.object.service.ObjectRelationshipLocalService;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSONFactory;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Release;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.service.GroupLocalService;
import com.liferay.portal.kernel.service.RoleLocalService;
import com.liferay.portal.kernel.service.UserLocalService;
import com.liferay.portal.kernel.service.WorkflowDefinitionLinkLocalService;
import com.liferay.portal.kernel.servlet.SessionErrors;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.Portal;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.URLCodec;
import com.liferay.portal.kernel.util.WebKeys;
import java.io.IOException;
import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.PortletSession;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.servlet.http.HttpServletResponse;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;
import org.osgi.service.component.annotations.ReferencePolicyOption;
@Component( immediate = true, property = { "com.liferay.fragment.entry.processor.portlet.alias=form", "com.liferay.portlet.add-default-resource=true", "com.liferay.portlet.application-type=full-page-application", "com.liferay.portlet.application-type=widget", "com.liferay.portlet.css-class-wrapper=portlet-forms-display", "com.liferay.portlet.display-category=category.collaboration", "com.liferay.portlet.friendly-url-mapping=form", "com.liferay.portlet.header-portlet-css=/admin/css/main.css", "com.liferay.portlet.instanceable=true", "com.liferay.portlet.preferences-owned-by-group=true", "com.liferay.portlet.private-request-attributes=false", "com.liferay.portlet.render-weight=50", "com.liferay.portlet.scopeable=true", "com.liferay.portlet.use-default-template=true", "javax.portlet.display-name=Dynamic Data Mapping Form", "javax.portlet.expiration-cache=0", "javax.portlet.init-param.copy-request-parameters=true", "javax.portlet.init-param.template-path=/display/", "javax.portlet.init-param.view-template=/display/view.jsp", "javax.portlet.name=" + DDMPortletKeys.DYNAMIC_DATA_MAPPING_FORM, "javax.portlet.resource-bundle=content.Language", "javax.portlet.security-role-ref=guest,power-user,user"
	}, service = Portlet.class ) public class DDMFormPortlet extends MVCPortlet {
	public void processAction( ActionRequest actionRequest, ActionResponse actionResponse) throws IOException, PortletException {
		try {
			super.processAction(actionRequest, actionResponse);
		}
		
		catch (Exception exception) {
			_portal.copyRequestParameters(actionRequest, actionResponse);
			Throwable throwable = getRootCauseThrowable(exception);
			hideDefaultErrorMessage(actionRequest);
			if (throwable instanceof DDMFormValuesValidationException) {
				if (throwable instanceof DDMFormValuesValidationException.MustSetValidValue || throwable instanceof DDMFormValuesValidationException.RequiredValue) {
					SessionErrors.add( actionRequest, throwable.getClass(), throwable);
				}
				
				else {
					SessionErrors.add( actionRequest, DDMFormValuesValidationException.class);
				}
				
			}
			
			else {
				SessionErrors.add( actionRequest, throwable.getClass(), throwable);
			}
			
			ThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
			if (_addDefaultSharedFormLayoutPortalInstanceLifecycleListener. isSharedLayout(themeDisplay)) {
				saveParametersInSession(actionRequest);
			}
			
		}
		
	}
	
	public void render( RenderRequest renderRequest, RenderResponse renderResponse) throws IOException, PortletException {
		try {
			setRenderRequestAttributes(renderRequest, renderResponse);
			DDMFormDisplayContext ddmFormDisplayContext = (DDMFormDisplayContext)renderRequest.getAttribute( WebKeys.PORTLET_DISPLAY_CONTEXT);
			if (ddmFormDisplayContext.isFormShared()) {
				saveRefererGroupIdInRequest( renderRequest, ddmFormDisplayContext);
			}
			
			if ((ddmFormDisplayContext.isLimitToOneSubmissionPerUserEnabled() && !ddmFormDisplayContext.isLoggedUser()) || (ddmFormDisplayContext.isRequireAuthentication() && ddmFormDisplayContext.isSharedURL())) {
				HttpServletResponse httpServletResponse = _portal.getHttpServletResponse(renderResponse);
				httpServletResponse.sendRedirect( StringBundler.concat( _portal.getPathMain(), "/portal/login?redirect=", URLCodec.encodeURL( _portal.getCurrentURL(renderRequest))));
				return;
			}
			
		}
		
		catch (Exception exception) {
			if (isSessionErrorException(exception)) {
				if (_log.isWarnEnabled()) {
					_log.warn(exception, exception);
				}
				
				hideDefaultErrorMessage(renderRequest);
				SessionErrors.add(renderRequest, exception.getClass());
			}
			
			else {
				throw new PortletException(exception);
			}
			
		}
		
		super.render(renderRequest, renderResponse);
	}
	
	protected Throwable getRootCauseThrowable(Throwable throwable) {
		while (throwable.getCause() != null) {
			throwable = throwable.getCause();
		}
		
		return throwable;
	}
	
	protected boolean isSessionErrorException(Throwable throwable) {
		return false;
	}
	
	protected void saveParametersInSession(ActionRequest actionRequest) {
		long formInstanceId = ParamUtil.getLong( actionRequest, "formInstanceId");
		if (formInstanceId > 0) {
			PortletSession portletSession = actionRequest.getPortletSession();
			portletSession.setAttribute("formInstanceId", formInstanceId);
			portletSession.setAttribute("shared", Boolean.TRUE);
		}
		
	}
	
	protected void saveRefererGroupIdInRequest( RenderRequest renderRequest, DDMFormDisplayContext ddmFormDisplayContext) {
		DDMFormInstance ddmFormInstance = ddmFormDisplayContext.getFormInstance();
		if (ddmFormInstance != null) {
			renderRequest.setAttribute( DDMFormWebKeys.REFERER_GROUP_ID, ddmFormInstance.getGroupId());
		}
		
	}
	
	@Reference( target = "(&(release.bundle.symbolic.name=com.liferay.dynamic.data.mapping.form.web)(&(release.schema.version>=1.0.0)(!(release.schema.version>=2.0.0))))", unbind = "-" ) protected void setRelease(Release release) {
	}
	
	protected void setRenderRequestAttributes( RenderRequest renderRequest, RenderResponse renderResponse) throws PortalException {
		DDMFormDisplayContext ddmFormDisplayContext = new DDMFormDisplayContext( _ddmFormFieldTypeServicesTracker, _ddmFormInstanceLocalService, _ddmFormInstanceRecordLocalService, _ddmFormInstanceRecordVersionLocalService, _ddmFormInstanceService, _ddmFormInstanceVersionLocalService, _ddmFormRenderer, _ddmFormValuesFactory, _ddmFormValuesMerger, _ddmFormWebConfigurationActivator.getDDMFormWebConfiguration(), _ddmStorageAdapterTracker, _ffSubmissionsSettingsConfigurationActivator, _groupLocalService, _jsonFactory, _objectFieldLocalService, _objectRelationshipLocalService, _portal, renderRequest, renderResponse, _roleLocalService, _userLocalService, _workflowDefinitionLinkLocalService);
		renderRequest.setAttribute( WebKeys.PORTLET_DISPLAY_CONTEXT, ddmFormDisplayContext);
	}
	
	private static final Log _log = LogFactoryUtil.getLog(DDMFormPortlet.class);
	private AddDefaultSharedFormLayoutPortalInstanceLifecycleListener _addDefaultSharedFormLayoutPortalInstanceLifecycleListener;
	private DDMFormFieldTypeServicesTracker _ddmFormFieldTypeServicesTracker;
	private DDMFormInstanceLocalService _ddmFormInstanceLocalService;
	private DDMFormInstanceRecordLocalService _ddmFormInstanceRecordLocalService;
	private DDMFormInstanceRecordVersionLocalService _ddmFormInstanceRecordVersionLocalService;
	private DDMFormInstanceService _ddmFormInstanceService;
	private DDMFormInstanceVersionLocalService _ddmFormInstanceVersionLocalService;
	private DDMFormRenderer _ddmFormRenderer;
	private DDMFormValuesFactory _ddmFormValuesFactory;
	private DDMFormValuesMerger _ddmFormValuesMerger;
	@Reference( cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY, unbind = "unsetDDMFormWebConfigurationActivator" ) private volatile DDMFormWebConfigurationActivator _ddmFormWebConfigurationActivator;
	private DDMStorageAdapterTracker _ddmStorageAdapterTracker;
	private FFSubmissionsSettingsConfigurationActivator _ffSubmissionsSettingsConfigurationActivator;
	private GroupLocalService _groupLocalService;
	private JSONFactory _jsonFactory;
	private ObjectFieldLocalService _objectFieldLocalService;
	private ObjectRelationshipLocalService _objectRelationshipLocalService;
	private Portal _portal;
	private RoleLocalService _roleLocalService;
	private UserLocalService _userLocalService;
	private WorkflowDefinitionLinkLocalService _workflowDefinitionLinkLocalService;
}

