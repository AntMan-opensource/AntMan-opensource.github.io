package org.openhab.binding.yamahareceiver.internal.protocol.xml;
import java.io.IOException;
import java.io.StringReader;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.openhab.binding.yamahareceiver.internal.YamahaReceiverBindingConstants.Zone;
import org.openhab.binding.yamahareceiver.internal.protocol.ReceivedMessageParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
public class XMLUtils {
    private static final Logger LOG = LoggerFactory.getLogger(XMLUtils.class);
    static final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    static Node getNode(Node parent, String[] nodePath, int offset) {         if (parent == null) { return null;
        }
        
        if (offset < nodePath.length - 1) {
            return getNode(((Element) parent).getElementsByTagName(nodePath[offset]).item(0), nodePath, offset + 1);
        }
         else {
            return ((Element) parent).getElementsByTagName(nodePath[offset]).item(0);
        }
        
    }
    
    static Node getNode(Node root, String nodePath) {
        String[] nodePathArr = nodePath.split("/");
        return getNode(root, nodePathArr, 0);
    }
    
    static Stream<Element> getChildElements(Node node) {
        if (node == null) {
            return Stream.empty();
        }
        
        return toStream(node.getChildNodes()).filter(x -> x.getNodeType() == Node.ELEMENT_NODE).map(x -> (Element) x);
    }
    
    static Stream<Node> toStream(NodeList nodeList) {
        return IntStream.range(0, nodeList.getLength()).mapToObj(nodeList::item);
    }
    
    static Node getNodeOrFail(Node root, String nodePath) throws ReceivedMessageParseException {
        Node node = getNode(root, nodePath);
        if (node == null) {
            throw new ReceivedMessageParseException(nodePath + " child in parent node missing!");
        }
        
        return node;
    }
    
    public static String getNodeContentOrDefault(Node root, String nodePath, String defaultValue) {
        Node node = getNode(root, nodePath);
        if (node != null) {
            return node.getTextContent();
        }
        
        return defaultValue;
    }
    
    public static String getAnyNodeContentOrDefault(Node root, String defaultValue, String... nodePaths) {
        for (String nodePath : nodePaths) {
            String value = getNodeContentOrDefault(root, nodePath, (String) null);
            if (value != null) {
                return value;
            }
            
        }
        
        return defaultValue;
    }
    
    public static String getNodeContentOrEmpty(Node root, String nodePath) {
        return getNodeContentOrDefault(root, nodePath, "");
    }
    
    public static Integer getNodeContentOrDefault(Node root, String nodePath, Integer defaultValue) {
        Node node = getNode(root, nodePath);
        if (node != null) {
            try {
                return Integer.valueOf(node.getTextContent());
            }
             catch (NumberFormatException e) {
                LOG.trace( "The value '{}' of node with path {} could not been parsed to an integer. Applying default of {}", node.getTextContent(), nodePath, defaultValue);
            }
            
        }
        
        return defaultValue;
    }
    
    public static Document xml(String message) throws IOException, ReceivedMessageParseException {
        String response = message.startsWith("<?xml") ? message : "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + message;
        try {
            return XMLUtils.dbf.newDocumentBuilder().parse(new InputSource(new StringReader(response)));
        }
         catch (SAXException | ParserConfigurationException e) {
            throw new ReceivedMessageParseException(e);
        }
        
    }
    
    public static String wrZone(Zone zone, String message) {
        return "<" + zone.name() + ">" + message + "</" + zone.name() + ">";
    }
    
}


