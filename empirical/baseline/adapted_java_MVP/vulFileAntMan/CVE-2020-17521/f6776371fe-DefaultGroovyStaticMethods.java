package org.codehaus.groovy.runtime;
import groovy.lang.Closure;
import org.codehaus.groovy.reflection.ReflectionUtils;
import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;
import java.io.File;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadInfo;
import java.lang.management.ThreadMXBean;
import java.util.Arrays;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.stream.Collectors;
public class DefaultGroovyStaticMethods {
    public static Thread start(Thread self, Closure closure) {
        return createThread(null, false, closure);
    }
    
    public static Thread start(Thread self, String name, Closure closure) {
        return createThread(name, false, closure);
    }
    
    public static Thread startDaemon(Thread self, Closure closure) {
        return createThread(null, true, closure);
    }
    
    public static Thread startDaemon(Thread self, String name, Closure closure) {
        return createThread(name, true, closure);
    }
    
    private static Thread createThread(String name, boolean daemon, Closure closure) {
        Thread thread = name != null ? new Thread(closure, name) : new Thread(closure);
        if (daemon) thread.setDaemon(true);
        thread.start();
        return thread;
    }
    
    public static String dumpAll(Thread self){
        ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
        return Arrays.stream(threadMxBean.dumpAllThreads(true, true)) .map(ThreadInfo::toString) .collect(Collectors.joining(""));
    }
    
    public static Matcher getLastMatcher(Matcher self) {
        return RegexSupport.getLastMatcher();
    }
    
    private static void sleepImpl(long millis, Closure closure) {
        long start = System.currentTimeMillis();
        long rest = millis;
        long current;
        while (rest > 0) {
            try {
                Thread.sleep(rest);
                rest = 0;
            }
             catch (InterruptedException e) {
                if (closure != null) {
                    if (DefaultTypeTransformation.castToBoolean(closure.call(e))) {
                        return;
                    }
                    
                }
                
                current = System.currentTimeMillis(); 
                rest = millis + start - current;
            }
            
        }
        
    }
    
    public static void sleep(Object self, long milliseconds) {
        sleepImpl(milliseconds, null);
    }
    
    public static void sleep(Object self, long milliseconds, Closure onInterrupt) {
        sleepImpl(milliseconds, onInterrupt);
    }
    
    public static ResourceBundle getBundle(ResourceBundle self, String bundleName) {
        return getBundle(self, bundleName, Locale.getDefault());
    }
    
    public static ResourceBundle getBundle(ResourceBundle self, String bundleName, Locale locale) {
        Class c = ReflectionUtils.getCallingClass();
        ClassLoader targetCL = c != null ? c.getClassLoader() : null;
        if (targetCL == null) targetCL = ClassLoader.getSystemClassLoader();
        return ResourceBundle.getBundle(bundleName, locale, targetCL);
    }
    
    public static File createTempDir(File self) throws IOException {
        return createTempDir(self, "groovy-generated-", "-tmpdir");
    }
    
    public static File createTempDir(File self, final String prefix, final String suffix) throws IOException {
        final int MAXTRIES = 3;
        int accessDeniedCounter = 0;
        File tempFile=null;
        for (int i=0; i<MAXTRIES; i++) {
            try {
                tempFile = File.createTempFile(prefix, suffix);
                tempFile.delete();
                tempFile.mkdirs();
                break;
            }
             catch (IOException ioe) {
                if (ioe.getMessage().startsWith("Access is denied")) {
                    accessDeniedCounter++;
                    try {
                        Thread.sleep(100);
                    }
                     catch (InterruptedException ignore) {
                    }
                    
                }
                
                if (i == MAXTRIES - 1) {
                    if (accessDeniedCounter == MAXTRIES) {
                        String msg = "Access is denied.\nWe tried " + accessDeniedCounter + " times to create a temporary directory and failed each time." + " If you are on Windows, you are possibly victim to" + " http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6325169." + " This is not a bug in Groovy.";
                        throw new IOException(msg);
                    }
                     else {
                        throw ioe;
                    }
                    
                }
                
            }
            
        }
        
        return tempFile;
    }
    
    public static long currentTimeSeconds(System self) {
        return System.currentTimeMillis() / 1000;
    }
    
}


