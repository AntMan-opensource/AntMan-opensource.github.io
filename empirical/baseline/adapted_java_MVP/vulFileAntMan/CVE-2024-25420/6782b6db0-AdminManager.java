package org.jivesoftware.openfire.admin;
import java.util.ArrayList;
import java.util.List;
import org.jivesoftware.openfire.XMPPServer;
import org.jivesoftware.util.SystemProperty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xmpp.packet.JID;
public class AdminManager {
    public static final SystemProperty<Class> ADMIN_PROVIDER = SystemProperty.Builder.ofType(Class.class) .setKey("provider.admin.className") .setBaseClass(AdminProvider.class) .setDefaultValue(DefaultAdminProvider.class) .addListener(AdminManager::initProvider) .setDynamic(true) .build();
    private static final Logger Log = LoggerFactory.getLogger(AdminManager.class);
    private static class AdminManagerContainer {
        private static AdminManager instance = new AdminManager();
    }
    
    public static AdminProvider getAdminProvider() {
        return AdminManagerContainer.instance.provider;
    }
    
    public static AdminManager getInstance() {
        return AdminManagerContainer.instance;
    }
    
    private List<JID> adminList;
    private static AdminProvider provider;
    private AdminManager() {
        initProvider(ADMIN_PROVIDER.getValue());
    }
    
    private static void initProvider(final Class clazz) {
        if (provider == null || !clazz.equals(provider.getClass())) {
            try {
                provider = (AdminProvider) clazz.newInstance();
            }
            
            catch (Exception e) {
                Log.error("Error loading admin provider: " + clazz.getName(), e);
                provider = new DefaultAdminProvider();
            }
            
        }
        
    }
    
    private void loadAdminList() {
        adminList = provider.getAdmins();
    }
    
    public void refreshAdminAccounts() {
        loadAdminList();
    }
    
    public List<JID> getAdminAccounts() {
        if (adminList == null) {
            loadAdminList();
        }
        
        return adminList;
    }
    
    public void addAdminAccount(String username) {
        if (adminList == null) {
            loadAdminList();
        }
        
        JID userJID = XMPPServer.getInstance().createJID(username, null);
        if (adminList.contains(userJID)) {
            return;
        }
        
        adminList.add(userJID);
        provider.setAdmins(adminList);
    }
    
    public void addAdminAccount(JID jid) {
        if (adminList == null) {
            loadAdminList();
        }
        
        JID bareJID = jid.asBareJID();
        if (adminList.contains(bareJID)) {
            return;
        }
        
        adminList.add(bareJID);
        provider.setAdmins(adminList);
    }
    
    public void removeAdminAccount(String username) {
        if (adminList == null) {
            loadAdminList();
        }
        
        JID userJID = XMPPServer.getInstance().createJID(username, null);
        if (!adminList.contains(userJID)) {
            return;
        }
        
        adminList.remove(userJID);
        provider.setAdmins(adminList);
    }
    
    public void removeAdminAccount(JID jid) {
        if (adminList == null) {
            loadAdminList();
        }
        
        JID bareJID = jid.asBareJID();
        if (!adminList.contains(bareJID)) {
            return;
        }
        
        adminList.remove(bareJID);
        provider.setAdmins(adminList);
    }
    
    public boolean isUserAdmin(String username, boolean allowAdminIfEmpty) {
        if (adminList == null) {
            loadAdminList();
        }
        
        if (allowAdminIfEmpty && adminList.isEmpty()) {
            return "admin".equals(username);
        }
        
        JID userJID = XMPPServer.getInstance().createJID(username, null);
        return adminList.contains(userJID);
    }
    
    public boolean isUserAdmin(JID jid, boolean allowAdminIfEmpty) {
        if (adminList == null) {
            loadAdminList();
        }
        
        if (allowAdminIfEmpty && adminList.isEmpty()) {
            return "admin".equals(jid.getNode());
        }
        
        JID bareJID = jid.asBareJID();
        return adminList.contains(bareJID);
    }
    
    public void clearAdminUsers() {
        if (adminList == null) {
            adminList = new ArrayList<>();
        }
        
        else {
            adminList.clear();
        }
        
        provider.setAdmins(adminList);
    }
    
    public void setAdminUsers(List<String> usernames) {
        if (adminList == null) {
            adminList = new ArrayList<>();
        }
        
        else {
            adminList.clear();
        }
        
        List<JID> admins = new ArrayList<>();
        for (String username : usernames) {
            admins.add(XMPPServer.getInstance().createJID(username, null));
        }
        
        adminList.addAll(admins);
        provider.setAdmins(admins);
    }
    
    public void setAdminJIDs(List<JID> jids) {
        if (adminList == null) {
            adminList = new ArrayList<>();
        }
        
        else {
            adminList.clear();
        }
        
        List<JID> admins = new ArrayList<>();
        for (JID jid : jids){
            if (jid != null) {
                admins.add(jid.asBareJID());
            }
            
        }
        
        adminList.addAll(admins);
        provider.setAdmins(admins);
    }
    
}


