package hudson.plugins.backlog;
import hudson.Extension;
import hudson.model.Action;
import hudson.model.JobProperty;
import hudson.model.JobPropertyDescriptor;
import hudson.model.AbstractProject;
import hudson.model.Job;
import hudson.util.FormValidation;
import hudson.util.Secret;
import jenkins.branch.MultiBranchProject;
import jenkins.model.ParameterizedJobMixIn;
import jenkins.model.TransientActionFactory;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.jenkinsci.plugins.workflow.job.WorkflowJob;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import javax.annotation.Nonnull;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.Collections;
public final class BacklogProjectProperty extends JobProperty<Job<?, ?>> {
	public final String url;
	public final String userId;
	private final Secret password;
	private final Secret apiKey;
	public BacklogProjectProperty(final String url, final String userId, final String password, final String apiKey) {
		 if (StringUtils.isNotEmpty(url)) {
			if (url.contains("/projects/")) {
				this.url = url;
			}
			 else if (url.endsWith("/")) {
				this.url = url;
			}
			 else {
				this.url = url + '/';
			}
			
		}
		 else {
			this.url = null;
		}
		
		this.userId = userId;
		this.password = Secret.fromString(password);
		this.apiKey = Secret.fromString(apiKey);
	}
	
	public String getPassword() {
		return Secret.toString(password);
	}
	
	public String getApiKey() {
		return Secret.toString(apiKey);
	}
	
	public String getSpaceURL() {
		if (url == null) {
			return null;
		}
		
		if (url.contains("/projects/")) {
			return url.substring(0, url.indexOf("/projects/") + 1);
		}
		 else {
			return url;
		}
		
	}
	
	public String getProject() {
		if (url == null) {
			return null;
		}
		
		if (!url.contains("/projects/")) {
			return null;
		}
		
		return url.substring(url.indexOf("/projects/") + "/projects/".length());
	}
	
	public Action getJobAction(Job<?, ?> job) {
		return new BacklogLinkAction(this);
	}
	
	public static final class DescriptorImpl extends JobPropertyDescriptor {
		public DescriptorImpl() {
			super(BacklogProjectProperty.class);
			load();
		}
		
		public boolean isApplicable(Class<? extends Job> jobType) {
			return ParameterizedJobMixIn.ParameterizedJob.class.isAssignableFrom(jobType);
		}
		
		public String getDisplayName() {
			return Messages.BacklogProjectProperty_DisplayName();
		}
		
		public FormValidation doCheckUrl(@QueryParameter String url) {
			try {
				new URL(url);
			}
			 catch (MalformedURLException e) {
				return FormValidation.error(Messages .BacklogSecurityRealm_Url_Error());
			}
			
			return FormValidation.ok();
		}
		
		public FormValidation doCheckUserId(@QueryParameter String userId) {
			if (StringUtils.isEmpty(userId) || userId.matches("[A-Za-z0-9-_@.]+")) {
				return FormValidation.ok();
			}
			 else {
				return FormValidation.error(Messages .BacklogProjectProperty_UserId_Error());
			}
			
		}
		
		public JobProperty<?> newInstance(StaplerRequest req, JSONObject formData) throws FormException {
			if (formData.isEmpty()) {
				return null;
			}
			
			BacklogProjectProperty bpp = req.bindJSON( BacklogProjectProperty.class, formData.getJSONObject("backlog"));
			return bpp;
		}
		
	}
	
	public static class Factory extends TransientActionFactory<WorkflowJob> {
		public Class<WorkflowJob> type() {
			return WorkflowJob.class;
		}
		
		public Collection<? extends Action> createFor(@Nonnull WorkflowJob target) {
			if (target.getParent() instanceof MultiBranchProject) {
				 return Collections.emptySet();
			}
			
			return Collections.singleton(new BacklogLinkAction(target.getProperty(BacklogProjectProperty.class)));
		}
		
	}
	
}


