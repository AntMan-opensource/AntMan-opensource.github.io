package org.biouno.unochoice.model;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.biouno.unochoice.util.Utils;
import org.jenkinsci.plugins.scriptler.ScriptlerManagement;
import org.jenkinsci.plugins.scriptler.config.Script;
import org.jenkinsci.plugins.scriptler.util.ScriptHelper;
import org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.bind.JavaScriptMethod;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.Extension;
import hudson.Util;
import hudson.model.ManagementLink;
import jenkins.model.Jenkins;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
public class ScriptlerScript extends AbstractScript {
    private static final long serialVersionUID = -6600327523009436354L;
    private final String scriptlerScriptId;
    private final Map<String, String> parameters;
    public ScriptlerScript(String scriptlerScriptId, List<ScriptlerScriptParameter> parameters) {
        super();
        this.scriptlerScriptId = scriptlerScriptId;
        this.parameters = new LinkedHashMap<String, String>();
        if (parameters != null) {
            for (ScriptlerScriptParameter parameter : parameters) {
                this.parameters.put(parameter.getName(), parameter.getValue());
            }
            
        }
        
    }
    
    public String getScriptlerScriptId() {
        return scriptlerScriptId;
    }
    
    public Map<String, String> getParameters() {
        return parameters;
    }
    
    public Object eval() {
        return eval(null);
    }
    
    public Object eval(Map<String, String> parameters) {
        final Map<String, String> envVars = Utils.getSystemEnv();
        Map<String, String> evaledParameters = new LinkedHashMap<String, String>(envVars);
        if (parameters != null && !parameters.isEmpty()) {
            evaledParameters.putAll(parameters);
            for (String key : this.getParameters().keySet()) {
                String value = this.getParameters().get(key);
                value = Util.replaceMacro((String) value, parameters);
                evaledParameters.put(key, value);
            }
            
        }
         else {
            evaledParameters.putAll(this.getParameters());
        }
        
        return this.toGroovyScript().eval(evaledParameters);
    }
    
    public GroovyScript toGroovyScript() {
        final Script scriptler = ScriptHelper.getScript(getScriptlerScriptId(), true);
        if (scriptler == null) {
            throw new RuntimeException("Missing required scriptler!");
        }
        
        return new GroovyScript(new SecureGroovyScript(scriptler.script, false, null), null);
    }
    
    @Extension(optional = true)
    public static class DescriptorImpl extends ScriptDescriptor {
        static {
            ScriptlerManagement.getScriptlerHomeDirectory();
        }
        
        public String getDisplayName() {
            return "Scriptler Script"; 
        }
        
        public AbstractScript newInstance(StaplerRequest req, JSONObject jsonObject) throws FormException {
            ScriptlerScript script = null;
            String scriptScriptId = jsonObject.getString("scriptlerScriptId");
            if (scriptScriptId != null && !scriptScriptId.trim().equals("")) {
                List<ScriptlerScriptParameter> parameters = new ArrayList<ScriptlerScriptParameter>();
                final JSONObject defineParams = jsonObject.getJSONObject("defineParams");
                if (defineParams != null && !defineParams.isNullObject()) {
                    JSONObject argsObj = defineParams.optJSONObject("parameters");
                    if (argsObj == null) {
                        JSONArray argsArrayObj = defineParams.optJSONArray("parameters");
                        if (argsArrayObj != null) {
                            for (int i = 0; i < argsArrayObj.size(); i++) {
                                JSONObject obj = argsArrayObj.getJSONObject(i);
                                String name = obj.getString("name");
                                String value = obj.getString("value");
                                if (name != null && !name.trim().equals("") && value != null) {
                                    ScriptlerScriptParameter param = new ScriptlerScriptParameter(name, value);
                                    parameters.add(param);
                                }
                                
                            }
                            
                        }
                        
                    }
                     else {
                        String name = argsObj.getString("name");
                        String value = argsObj.getString("value");
                        if (name != null && !name.trim().equals("") && value != null) {
                            ScriptlerScriptParameter param = new ScriptlerScriptParameter(name, value);
                            parameters.add(param);
                        }
                        
                    }
                    
                }
                
                script = new ScriptlerScript(scriptScriptId, parameters);
            }
            
            return script;
        }
        
        private ManagementLink getScriptler() {
            return Jenkins.getInstanceOrNull().getExtensionList(ScriptlerManagement.class).get(0);
        }
        
        public JSONArray getParameters(String scriptlerScriptId) {
            final ManagementLink scriptler = this.getScriptler();
            if (scriptler != null) {
                ScriptlerManagement scriptlerManagement = (ScriptlerManagement) scriptler;
                final Script script = scriptlerManagement.getConfiguration().getScriptById(scriptlerScriptId);
                if (script != null && script.getParameters() != null) {
                    return JSONArray.fromObject(script.getParameters());
                }
                
            }
            
            return null;
        }
        
    }
    
}


