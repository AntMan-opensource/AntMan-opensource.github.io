package org.biouno.unochoice.model;
import java.util.Collections;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nullable;
import org.biouno.unochoice.util.SafeHtmlExtendedMarkupFormatter;
import org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript;
import org.jenkinsci.plugins.scriptsecurity.scripts.ApprovalContext;
import org.kohsuke.stapler.DataBoundConstructor;
import groovy.lang.Binding;
import hudson.Extension;
import hudson.PluginManager;
import hudson.Util;
import jenkins.model.Jenkins;
public class GroovyScript extends AbstractScript {
    private static final long serialVersionUID = -3741105849416473898L;
    private static final Logger LOGGER = Logger.getLogger(GroovyScript.class.getName());
    private transient String script;
    private SecureGroovyScript secureScript;
    private transient String fallbackScript;
    private SecureGroovyScript secureFallbackScript;
    public GroovyScript(String script, String fallbackScript) {
        this(new SecureGroovyScript(script, false, null), new SecureGroovyScript(fallbackScript, false, null));
    }
    
    public GroovyScript(SecureGroovyScript script, SecureGroovyScript fallbackScript) {
        if (script != null) {
            this.secureScript = script.configuringWithNonKeyItem();
        }
        
        if (fallbackScript != null) {
            this.secureFallbackScript = fallbackScript.configuringWithNonKeyItem();
        }
        
    }
    
    private Object readResolve() {
        if (script != null) {
            secureScript = new SecureGroovyScript(script, false, null).configuring(ApprovalContext.create());
        }
        
        if (fallbackScript != null) {
            secureFallbackScript = new SecureGroovyScript(fallbackScript, false, null) .configuring(ApprovalContext.create());
        }
        
        return this;
    }
    
    public SecureGroovyScript getScript() {
        return secureScript;
    }
    
    public SecureGroovyScript getFallbackScript() {
        return secureFallbackScript;
    }
    
    public Object eval() {
        return eval(Collections.<String, String> emptyMap());
    }
    
    public Object eval(Map<String, String> parameters) throws RuntimeException {
        if (secureScript == null) {
            return null;
        }
        
        final Jenkins instance = Jenkins.getInstance();
        ClassLoader cl = null;
        if (instance != null) {
            try {
                PluginManager pluginManager = instance.getPluginManager();
                cl = pluginManager.uberClassLoader;
            }
             catch (Exception e) {
                LOGGER.log(Level.FINEST, e.getMessage(), e);
            }
            
        }
        
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        
        final Binding context = new Binding();
        final Map<String, String> envVars = System.getenv();
        for (Entry<String, String> parameter : parameters.entrySet()) {
            Object value = parameter.getValue();
            if (value != null) {
                if (value instanceof String) {
                    value = Util.replaceMacro((String) value, envVars);
                }
                
                context.setVariable(parameter.getKey().toString(), value);
            }
            
        }
        
        try {
            Object returnValue = secureScript.evaluate(cl, context);
            if (returnValue instanceof CharSequence) {
                if (secureScript.isSandbox()) {
                    return SafeHtmlExtendedMarkupFormatter.INSTANCE.translate(returnValue.toString());
                }
                
            }
            
            return returnValue;
        }
         catch (Exception re) {
            if (this.secureFallbackScript != null) {
                try {
                    LOGGER.log(Level.FINEST, "Fallback to default script...", re);
                    Object returnValue = secureFallbackScript.evaluate(cl, context);
                    if (returnValue instanceof CharSequence) {
                        if (secureFallbackScript.isSandbox()) {
                            return SafeHtmlExtendedMarkupFormatter.INSTANCE.translate(returnValue.toString());
                        }
                        
                    }
                    
                    return returnValue;
                }
                 catch (Exception e2) {
                    LOGGER.log(Level.WARNING, "Error executing fallback script", e2);
                    throw new RuntimeException("Failed to evaluate fallback script: " + e2.getMessage(), e2);
                }
                
            }
             else {
                LOGGER.log(Level.WARNING, "No fallback script configured for '%s'");
                throw new RuntimeException("Failed to evaluate script: " + re.getMessage(), re);
            }
            
        }
        
    }
    
    public String toString() {
        final String secureScriptText = (secureScript != null) ? secureScript.getScript() : "";
        final String fallbackScriptText = (secureFallbackScript != null) ? secureFallbackScript.getScript() : "";
        return "GroovyScript [script=" + secureScriptText + ", fallbackScript=" + fallbackScriptText + "]";
    }
    
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((secureFallbackScript == null) ? 0 : secureFallbackScript.hashCode());
        result = prime * result + ((secureScript == null) ? 0 : secureScript.hashCode());
        return result;
    }
    
    public boolean equals(Object obj) {
        if (this == obj){
            return true;
}
        if (obj == null){
            return false;
}
        if (getClass() != obj.getClass()){
            return false;
}
        GroovyScript other = (GroovyScript) obj;
        if (secureFallbackScript == null) {
            if (other.secureFallbackScript != null){
                return false;
}
        }
         else if (!secureFallbackScript.equals(other.secureFallbackScript)) return false;
        if (secureScript == null) {
            return other.secureScript == null;
        }
        
        return secureScript.equals(other.secureScript);
    }
    
    public static class DescriptorImpl extends ScriptDescriptor {
        public String getDisplayName() {
            return "Groovy Script";
        }
        
    }
    
}


