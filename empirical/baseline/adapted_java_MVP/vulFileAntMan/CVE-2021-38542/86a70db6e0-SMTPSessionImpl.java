package org.apache.james.protocols.smtp;
import java.util.List;
import java.util.Optional;
import org.apache.james.protocols.api.ProtocolSessionImpl;
import org.apache.james.protocols.api.ProtocolTransport;
import org.apache.james.protocols.api.Response;
public class SMTPSessionImpl extends ProtocolSessionImpl implements SMTPSession {
    private static final Response LINE_LENGTH_EXCEEDED = new SMTPResponse(SMTPRetCode.SYNTAX_ERROR_COMMAND_UNRECOGNIZED, "Line length exceeded. See RFC 2821 #4.5.3.1.").immutable();
    private static final Response FATAL_ERROR = new SMTPResponse(SMTPRetCode.LOCAL_ERROR, "Unable to process request").immutable();
    private static final Response UNKNOWN_COMMAND_ERROR = new SMTPResponse(SMTPRetCode.SYNTAX_ERROR_COMMAND_UNRECOGNIZED, "Unable to process request: the command is unknown").immutable();
    private boolean relayingAllowed;
    private boolean needsCommandInjectionDetection;
    public SMTPSessionImpl(ProtocolTransport transport, SMTPConfiguration config) {
        super(transport, config);
        relayingAllowed = config.isRelayingAllowed(getRemoteAddress().getAddress().getHostAddress());
        needsCommandInjectionDetection = true;
    }
    
    public boolean needsCommandInjectionDetection() {
        return needsCommandInjectionDetection;
    }
    
    public void startDetectingCommadInjection() {
        needsCommandInjectionDetection = true;
    }
    
    public void stopDetectingCommandInjection() {
        needsCommandInjectionDetection = false;
    }
    
    public boolean isRelayingAllowed() {
        return relayingAllowed;
    }
    
    public void resetState() {
        Optional<String> currentHeloMode = getAttachment(CURRENT_HELO_MODE, State.Transaction);
        getState().clear();
        currentHeloMode.ifPresent(heloMode -> setAttachment(CURRENT_HELO_MODE, heloMode, State.Transaction));
    }
    
    public int getRcptCount() {
        return getAttachment(SMTPSession.RCPT_LIST, State.Transaction) .map(List::size) .orElse(0);
    }
    
    public boolean isAuthSupported() {
        return getConfiguration().isAuthRequired(getRemoteAddress().getAddress().getHostAddress());
    }
    
    public void setRelayingAllowed(boolean relayingAllowed) {
        this.relayingAllowed = relayingAllowed;
    }
    
    public Response newLineTooLongResponse() {
        return LINE_LENGTH_EXCEEDED;
    }
    
    public Response newFatalErrorResponse() {
        return FATAL_ERROR;
    }
    
    public Response newCommandNotFoundErrorResponse() {
        return UNKNOWN_COMMAND_ERROR;
    }
    
    public SMTPConfiguration getConfiguration() {
        return (SMTPConfiguration) config;
    }
    
}


