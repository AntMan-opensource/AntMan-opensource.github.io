package org.apache.james.imap.encode;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.james.imap.api.ImapSessionState;
import org.apache.james.imap.api.process.ImapLineHandler;
import org.apache.james.imap.api.process.ImapSession;
import org.apache.james.imap.api.process.SelectedMailbox;
public class FakeImapSession implements ImapSession {
    private ImapSessionState state = ImapSessionState.NON_AUTHENTICATED;
    private SelectedMailbox selectedMailbox = null;
    private final Map<String, Object> attributesByKey;
    private final SessionId sessionId;
    public FakeImapSession() {
        this.sessionId = SessionId.generate();
        this.attributesByKey = new ConcurrentHashMap<>();
    }
    
    public SessionId sessionId() {
        return sessionId;
    }
    
    public void logout() {
        closeMailbox();
        state = ImapSessionState.LOGOUT;
    }
    
    public void authenticated() {
        this.state = ImapSessionState.AUTHENTICATED;
    }
    
    public void deselect() {
        this.state = ImapSessionState.AUTHENTICATED;
        closeMailbox();
    }
    
    public void selected(SelectedMailbox mailbox) {
        this.state = ImapSessionState.SELECTED;
        closeMailbox();
        this.selectedMailbox = mailbox;
    }
    
    public SelectedMailbox getSelected() {
        return this.selectedMailbox;
    }
    
    public ImapSessionState getState() {
        return this.state;
    }
    
    public void closeMailbox() {
        if (selectedMailbox != null) {
            selectedMailbox.deselect();
            selectedMailbox = null;
        }
        
    }
    
    public Object getAttribute(String key) {
        return attributesByKey.get(key);
    }
    
    public void setAttribute(String key, Object value) {
        if (value == null) {
            attributesByKey.remove(key);
        }
         else {
            attributesByKey.put(key, value);
        }
        
    }
    
    public boolean startTLS() {
        return false;
    }
    
    public boolean supportStartTLS() {
        return false;
    }
    
    public boolean isCompressionSupported() {
        return false;
    }
    
    public boolean startCompression() {
        return false;
    }
    
    public void pushLineHandler(ImapLineHandler lineHandler) {
    }
    
    public void popLineHandler() {
    }
    
    public boolean isPlainAuthDisallowed() {
        return false;
    }
    
    public boolean isTLSActive() {
        return false;
    }
    
    public boolean supportMultipleNamespaces() {
        return false;
    }
    
    public boolean isCompressionActive() {
        return false;
    }
    
}


