package org.apache.james.protocols.api;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.apache.james.core.Username;
import org.apache.james.protocols.api.handler.LineHandler;
import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
public interface ProtocolSession {
    enum State {
        Connection, Transaction }
    class AttachmentKey<T> {
        public static <U> AttachmentKey<U> of(String value, Class<U> type) {
            Preconditions.checkArgument(!Strings.isNullOrEmpty(value), "An attachment key should not be empty or null");
            return new AttachmentKey<>(value, type);
        }
        
        private final String value;
        private final Class<T> type;
        private AttachmentKey(String value, Class<T> type) {
            this.value = value;
            this.type = type;
        }
        
        public String asString() {
            return value;
        }
        
        public Optional<T> convert(Object object) {
            return Optional.ofNullable(object) .filter(type::isInstance) .map(type::cast);
        }
        
        public final boolean equals(Object o) {
            if (o instanceof AttachmentKey) {
                AttachmentKey<?> that = (AttachmentKey<?>) o;
                return Objects.equals(this.value, that.value) && Objects.equals(this.type, that.type);
            }
            
            return false;
        }
        
        public final int hashCode() {
            return Objects.hash(value, type);
        }
        
        public String toString() {
            return MoreObjects.toStringHelper(this) .add("value", value) .add("type", type.getName()) .toString();
        }
        
    }
     <T> Optional<T> setAttachment(AttachmentKey<T> key, T value, State state); <T> Optional<T> removeAttachment(AttachmentKey<T> key,State state); <T> Optional<T> getAttachment(AttachmentKey<T> key, State state);
    @Deprecated
    Map<AttachmentKey<?>, Object> getState();
    @Deprecated
    Map<AttachmentKey<?>, Object> getConnectionState();
    void resetState();
    InetSocketAddress getRemoteAddress();
    InetSocketAddress getLocalAddress();
    String getSessionID();
    Response newLineTooLongResponse();
    Response newFatalErrorResponse();
    Response newCommandNotFoundErrorResponse();
    Username getUsername();
    void setUsername(Username username);
    boolean isStartTLSSupported();
    boolean isTLSStarted();
    ProtocolConfiguration getConfiguration();
    Charset getCharset();
    String getLineDelimiter(); <T extends ProtocolSession> void pushLineHandler(LineHandler<T> overrideCommandHandler);
    void popLineHandler();
    int getPushedLineHandlerCount();
}


