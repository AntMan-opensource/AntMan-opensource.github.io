package org.apache.james.imap.api.process;
import java.util.Objects;
import java.util.Optional;
import org.apache.commons.text.RandomStringGenerator;
import org.apache.james.core.Username;
import org.apache.james.imap.api.ImapSessionState;
import org.apache.james.mailbox.MailboxSession;
public interface ImapSession {
    class SessionId {
        private static final RandomStringGenerator RANDOM_STRING_GENERATOR = new RandomStringGenerator.Builder() .withinRange('a', 'z') .build();
        private static final int LENGTH = 12;
        public static SessionId generate() {
            return new SessionId("SID-" + RANDOM_STRING_GENERATOR.generate(LENGTH));
        }
        
        private final String value;
        private SessionId(String value) {
            this.value = value;
        }
        
        public String asString() {
            return value;
        }
        
        public final boolean equals(Object o) {
            if (o instanceof SessionId) {
                SessionId sessionId = (SessionId) o;
                return Objects.equals(this.value, sessionId.value);
            }
            
            return false;
        }
        
        public final int hashCode() {
            return Objects.hash(value);
        }
        
        public String toString() {
            return asString();
        }
        
    }
    
    String MAILBOX_SESSION_ATTRIBUTE_SESSION_KEY = "org.apache.james.api.imap.MAILBOX_SESSION_ATTRIBUTE_SESSION_KEY";
    SessionId sessionId();
    void logout();
    ImapSessionState getState();
    void authenticated();
    void selected(SelectedMailbox mailbox);
    void deselect();
    SelectedMailbox getSelected();
    Object getAttribute(String key);
    void setAttribute(String key, Object value);
    boolean startTLS();
    boolean isTLSActive();
    boolean supportStartTLS();
    boolean isCompressionActive();
    boolean isCompressionSupported();
    boolean startCompression();
    void pushLineHandler(ImapLineHandler lineHandler);
    void popLineHandler();
    boolean supportMultipleNamespaces();
    boolean isPlainAuthDisallowed();
    default void setMailboxSession(MailboxSession mailboxSession) {
        setAttribute(MAILBOX_SESSION_ATTRIBUTE_SESSION_KEY, mailboxSession);
    }
    
    default MailboxSession getMailboxSession() {
        return (MailboxSession) getAttribute(MAILBOX_SESSION_ATTRIBUTE_SESSION_KEY);
    }
    
    default Username getUserName() {
        return Optional.ofNullable(getMailboxSession()) .map(MailboxSession::getUser) .orElse(null);
    }
    
}


