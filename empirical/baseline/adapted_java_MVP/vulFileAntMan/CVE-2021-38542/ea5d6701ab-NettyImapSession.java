package org.apache.james.imapserver.netty;
import java.util.HashMap;
import java.util.Map;
import javax.net.ssl.SSLContext;
import org.apache.james.imap.api.ImapSessionState;
import org.apache.james.imap.api.process.ImapLineHandler;
import org.apache.james.imap.api.process.ImapSession;
import org.apache.james.imap.api.process.SelectedMailbox;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.handler.codec.compression.ZlibDecoder;
import org.jboss.netty.handler.codec.compression.ZlibEncoder;
import org.jboss.netty.handler.codec.compression.ZlibWrapper;
import org.jboss.netty.handler.ssl.SslHandler;
public class NettyImapSession implements ImapSession, NettyConstants {
    private ImapSessionState state = ImapSessionState.NON_AUTHENTICATED;
    private SelectedMailbox selectedMailbox;
    private final Map<String, Object> attributesByKey = new HashMap<>();
    private final SSLContext sslContext;
    private final String[] enabledCipherSuites;
    private final boolean compress;
    private final Channel channel;
    private int handlerCount;
    private final boolean plainAuthDisallowed;
    private final SessionId sessionId;
    public NettyImapSession(Channel channel, SSLContext sslContext, String[] enabledCipherSuites, boolean compress, boolean plainAuthDisallowed, SessionId sessionId) {
        this.channel = channel;
        this.sslContext = sslContext;
        this.enabledCipherSuites = enabledCipherSuites;
        this.compress = compress;
        this.plainAuthDisallowed = plainAuthDisallowed;
        this.sessionId = sessionId;
    }
    
    public SessionId sessionId() {
        return sessionId;
    }
    
    public void logout() {
        closeMailbox();
        state = ImapSessionState.LOGOUT;
    }
    
    public void authenticated() {
        this.state = ImapSessionState.AUTHENTICATED;
    }
    
    public void deselect() {
        this.state = ImapSessionState.AUTHENTICATED;
        closeMailbox();
    }
    
    public void selected(SelectedMailbox mailbox) {
        this.state = ImapSessionState.SELECTED;
        closeMailbox();
        this.selectedMailbox = mailbox;
    }
    
    public SelectedMailbox getSelected() {
        return this.selectedMailbox;
    }
    
    public ImapSessionState getState() {
        return this.state;
    }
    
    private void closeMailbox() {
        if (selectedMailbox != null) {
            selectedMailbox.deselect();
            selectedMailbox = null;
        }
        
    }
    
    public Object getAttribute(String key) {
        return attributesByKey.get(key);
    }
    
    public void setAttribute(String key, Object value) {
        if (value == null) {
            attributesByKey.remove(key);
        }
         else {
            attributesByKey.put(key, value);
        }
        
    }
    
    public boolean startTLS() {
        if (!supportStartTLS()) {
            return false;
        }
        
        channel.setReadable(false);
        SslHandler filter = new SslHandler(sslContext.createSSLEngine(), false);
        filter.getEngine().setUseClientMode(false);
        if (enabledCipherSuites != null && enabledCipherSuites.length > 0) {
            filter.getEngine().setEnabledCipherSuites(enabledCipherSuites);
        }
        
        channel.getPipeline().addFirst(SSL_HANDLER, filter);
        channel.setReadable(true);
        return true;
    }
    
    public boolean supportStartTLS() {
        return sslContext != null;
    }
    
    public boolean isCompressionSupported() {
        return compress;
    }
    
    public boolean startCompression() {
        if (!isCompressionSupported()) {
            return false;
        }
        
        channel.setReadable(false);
        ZlibDecoder decoder = new ZlibDecoder(ZlibWrapper.NONE);
        ZlibEncoder encoder = new ZlibEncoder(ZlibWrapper.NONE, 5);
        if (channel.getPipeline().get(SSL_HANDLER) == null) {
            channel.getPipeline().addFirst(ZLIB_DECODER, decoder);
            channel.getPipeline().addFirst(ZLIB_ENCODER, encoder);
        }
         else {
            channel.getPipeline().addAfter(SSL_HANDLER, ZLIB_DECODER, decoder);
            channel.getPipeline().addAfter(SSL_HANDLER, ZLIB_ENCODER, encoder);
        }
        
        channel.setReadable(true);
        return true;
    }
    
    public void pushLineHandler(ImapLineHandler lineHandler) {
        channel.setReadable(false);
        channel.getPipeline().addBefore(REQUEST_DECODER, "lineHandler" + handlerCount++, new ImapLineHandlerAdapter(this, lineHandler));
        channel.setReadable(true);
    }
    
    public void popLineHandler() {
        channel.setReadable(false);
        channel.getPipeline().remove("lineHandler" + --handlerCount);
        channel.setReadable(true);
    }
    
    public boolean isPlainAuthDisallowed() {
        return plainAuthDisallowed;
    }
    
    public boolean isTLSActive() {
        return channel.getPipeline().get(SSL_HANDLER) != null;
    }
    
    public boolean supportMultipleNamespaces() {
        return false;
    }
    
    public boolean isCompressionActive() {
        return channel.getPipeline().get(ZLIB_DECODER) != null;
    }
    
}


