package org.apache.james.pop3server.netty;
import org.apache.james.pop3server.core.CoreCmdHandlerLoader;
import org.apache.james.pop3server.jmx.JMXHandlersLoader;
import org.apache.james.protocols.api.ProtocolConfiguration;
import org.apache.james.protocols.lib.handler.HandlersPackage;
import org.apache.james.protocols.lib.netty.AbstractProtocolAsyncServer;
import org.apache.james.protocols.netty.AbstractChannelPipelineFactory;
import org.apache.james.protocols.netty.BasicChannelUpstreamHandler;
import org.apache.james.protocols.netty.ChannelHandlerFactory;
import org.apache.james.protocols.netty.LineDelimiterBasedChannelHandlerFactory;
import org.apache.james.protocols.netty.ProtocolMDCContextFactory;
import org.apache.james.protocols.pop3.POP3Protocol;
import org.jboss.netty.channel.ChannelUpstreamHandler;
public class POP3Server extends AbstractProtocolAsyncServer implements POP3ServerMBean {
    private final ProtocolConfiguration theConfigData = new POP3Configuration();
    private BasicChannelUpstreamHandler coreHandler;
    protected int getDefaultPort() {
        return 110;
    }
    
    public String getServiceType() {
        return "POP3 Service";
    }
    
    private class POP3Configuration implements ProtocolConfiguration {
        public String getHelloName() {
            return POP3Server.this.getHelloName();
        }
        
        public String getGreeting() {
            return null;
        }
        
        public String getSoftwareName() {
            return "JAMES POP3 Server ";
        }
        
    }
    
    protected void preInit() throws Exception {
        super.preInit();
        POP3Protocol protocol = new POP3Protocol(getProtocolHandlerChain(), theConfigData);
        coreHandler = new BasicChannelUpstreamHandler(new ProtocolMDCContextFactory.Standard(), protocol, getEncryption());
    }
    
    protected String getDefaultJMXName() {
        return "pop3server";
    }
    
    protected ChannelUpstreamHandler createCoreHandler() {
        return coreHandler; 
    }
    
    protected Class<? extends HandlersPackage> getCoreHandlersPackage() {
        return CoreCmdHandlerLoader.class;
    }
    
    protected Class<? extends HandlersPackage> getJMXHandlersPackage() {
        return JMXHandlersLoader.class;
    }
    
    protected ChannelHandlerFactory createFrameHandlerFactory() {
        return new LineDelimiterBasedChannelHandlerFactory(AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
    }
    
}


