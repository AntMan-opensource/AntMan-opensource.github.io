package org.apache.james.smtpserver.netty;
import java.util.Locale;
import javax.inject.Inject;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.james.dnsservice.api.DNSService;
import org.apache.james.dnsservice.library.netmatcher.NetMatcher;
import org.apache.james.protocols.api.ProtocolSession;
import org.apache.james.protocols.api.ProtocolTransport;
import org.apache.james.protocols.lib.handler.HandlersPackage;
import org.apache.james.protocols.lib.netty.AbstractProtocolAsyncServer;
import org.apache.james.protocols.netty.AbstractChannelPipelineFactory;
import org.apache.james.protocols.netty.ChannelHandlerFactory;
import org.apache.james.protocols.smtp.AllButStartTlsLineChannelHandlerFactory;
import org.apache.james.protocols.smtp.SMTPConfiguration;
import org.apache.james.protocols.smtp.SMTPProtocol;
import org.apache.james.smtpserver.CoreCmdHandlerLoader;
import org.apache.james.smtpserver.ExtendedSMTPSession;
import org.apache.james.smtpserver.jmx.JMXHandlersLoader;
import org.apache.james.util.Size;
import org.jboss.netty.channel.ChannelUpstreamHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class SMTPServer extends AbstractProtocolAsyncServer implements SMTPServerMBean {
    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractProtocolAsyncServer.class);
    public static final int AUTH_DISABLED = 0;
    public static final int AUTH_REQUIRED = 1;
    public static final int AUTH_ANNOUNCE = 2;
    private int authRequired = AUTH_DISABLED;
    private boolean heloEhloEnforcement = false;
    private String smtpGreeting = null;
    private NetMatcher authorizedNetworks = null;
    private long maxMessageSize = 0;
    private final SMTPConfiguration theConfigData = new SMTPHandlerConfigurationDataImpl();
    private final SmtpMetrics smtpMetrics;
    private boolean addressBracketsEnforcement = true;
    private boolean verifyIdentity;
    private DNSService dns;
    private String authorizedAddresses;
    private SMTPChannelUpstreamHandler coreHandler;
    public SMTPServer(SmtpMetrics smtpMetrics) {
        this.smtpMetrics = smtpMetrics;
    }
    
    public void setDnsService(DNSService dns) {
        this.dns = dns;
    }
    
    protected void preInit() throws Exception {
        super.preInit();
        if (authorizedAddresses != null) {
            java.util.StringTokenizer st = new java.util.StringTokenizer(authorizedAddresses, ", ", false);
            java.util.Collection<String> networks = new java.util.ArrayList<>();
            while (st.hasMoreTokens()) {
                String addr = st.nextToken();
                networks.add(addr);
            }
            
            authorizedNetworks = new NetMatcher(networks, dns);
        }
        
        SMTPProtocol transport = new SMTPProtocol(getProtocolHandlerChain(), theConfigData) { 

            public ProtocolSession newSession(ProtocolTransport transport) {
                return new ExtendedSMTPSession(theConfigData, transport);
            }
            
        };
        coreHandler = new SMTPChannelUpstreamHandler(transport, getEncryption(), smtpMetrics);
    }
    
    public void doConfigure(HierarchicalConfiguration<ImmutableNode> configuration) throws ConfigurationException {
        super.doConfigure(configuration);
        if (isEnabled()) {
            String authRequiredString = configuration.getString("authRequired", "false").trim().toLowerCase(Locale.US);
            if (authRequiredString.equals("true")) {
                authRequired = AUTH_REQUIRED;
            }
             else if (authRequiredString.equals("announce")) {
                authRequired = AUTH_ANNOUNCE;
            }
             else {
                authRequired = AUTH_DISABLED;
            }
            
            if (authRequired != AUTH_DISABLED) {
                LOGGER.info("This SMTP server requires authentication.");
            }
             else {
                LOGGER.info("This SMTP server does not require authentication.");
            }
            
            authorizedAddresses = configuration.getString("authorizedAddresses", null);
            if (authRequired == AUTH_DISABLED && authorizedAddresses == null) {
                authorizedAddresses = "0.0.0.0/0.0.0.0";
            }
            
            if (authorizedNetworks != null) {
                LOGGER.info("Authorized addresses: {}", authorizedNetworks);
            }
            
            maxMessageSize = Size.parse(configuration.getString("maxmessagesize", "0"), Size.Unit.K) .asBytes();
            if (maxMessageSize > 0) {
                LOGGER.info("The maximum allowed message size is {} bytes.", maxMessageSize);
            }
             else {
                LOGGER.info("No maximum message size is enforced for this server.");
            }
            
            heloEhloEnforcement = configuration.getBoolean("heloEhloEnforcement", true);
            smtpGreeting = configuration.getString("smtpGreeting", null);
            addressBracketsEnforcement = configuration.getBoolean("addressBracketsEnforcement", true);
            verifyIdentity = configuration.getBoolean("verifyIdentity", false);
            if (authRequired == AUTH_DISABLED && verifyIdentity) {
                throw new ConfigurationException( "SMTP configuration: 'verifyIdentity' can't be set to true if 'authRequired' is set to false.");
            }
            
        }
        
    }
    
    protected int getDefaultPort() {
        return 25;
    }
    
    public String getServiceType() {
        return "SMTP Service";
    }
    
    public class SMTPHandlerConfigurationDataImpl implements SMTPConfiguration {
        public String getHelloName() {
            return SMTPServer.this.getHelloName();
        }
        
        public long getMaxMessageSize() {
            return SMTPServer.this.maxMessageSize;
        }
        
        public boolean isRelayingAllowed(String remoteIP) {
            boolean relayingAllowed = false;
            if (authorizedNetworks != null) {
                relayingAllowed = SMTPServer.this.authorizedNetworks.matchInetNetwork(remoteIP);
            }
            
            return relayingAllowed;
        }
        
        public boolean useHeloEhloEnforcement() {
            return SMTPServer.this.heloEhloEnforcement;
        }
        
        public String getSMTPGreeting() {
            return SMTPServer.this.smtpGreeting;
        }
        
        public boolean useAddressBracketsEnforcement() {
            return SMTPServer.this.addressBracketsEnforcement;
        }
        
        public boolean isAuthRequired(String remoteIP) {
            if (SMTPServer.this.authRequired == AUTH_ANNOUNCE) {
                return true;
            }
            
            boolean authRequired = SMTPServer.this.authRequired != AUTH_DISABLED;
            if (authorizedNetworks != null) {
                authRequired = authRequired && !SMTPServer.this.authorizedNetworks.matchInetNetwork(remoteIP);
            }
            
            return authRequired;
        }
        
        public boolean verifyIdentity() {
            return SMTPServer.this.verifyIdentity;
        }
        
        public String getGreeting() {
            return SMTPServer.this.smtpGreeting;
        }
        
        public String getSoftwareName() {
            return "JAMES SMTP Server ";
        }
        
    }
    
    public long getMaximalMessageSize() {
        return maxMessageSize;
    }
    
    public boolean getAddressBracketsEnforcement() {
        return addressBracketsEnforcement;
    }
    
    public boolean getHeloEhloEnforcement() {
        return heloEhloEnforcement;
    }
    
    protected String getDefaultJMXName() {
        return "smtpserver";
    }
    
    public void setMaximalMessageSize(long maxSize) {
        this.maxMessageSize = maxSize;
    }
    
    public void setAddressBracketsEnforcement(boolean enforceAddressBrackets) {
        this.addressBracketsEnforcement = enforceAddressBrackets;
    }
    
    public void setHeloEhloEnforcement(boolean enforceHeloEHlo) {
        this.heloEhloEnforcement = enforceHeloEHlo;
    }
    
    public String getHeloName() {
        return theConfigData.getHelloName();
    }
    
    protected ChannelUpstreamHandler createCoreHandler() {
        return coreHandler;
    }
    
    protected Class<? extends HandlersPackage> getCoreHandlersPackage() {
        return CoreCmdHandlerLoader.class;
    }
    
    protected Class<? extends HandlersPackage> getJMXHandlersPackage() {
        return JMXHandlersLoader.class;
    }
    
    protected ChannelHandlerFactory createFrameHandlerFactory() {
        return new AllButStartTlsLineChannelHandlerFactory(AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
    }
    
    public int getAuthRequired() {
        return authRequired;
    }
    
}


