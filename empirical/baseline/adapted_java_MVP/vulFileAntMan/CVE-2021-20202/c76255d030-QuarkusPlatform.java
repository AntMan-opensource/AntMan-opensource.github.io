package org.keycloak.provider.quarkus;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import org.keycloak.platform.Platform;
import org.keycloak.platform.PlatformProvider;
public class QuarkusPlatform implements PlatformProvider {
    public static void addInitializationException(Throwable throwable) {
        QuarkusPlatform platform = (QuarkusPlatform) Platform.getPlatform();
        platform.addDeferredException(throwable);
    }
    
    public static void exitOnError() throws InitializationException {
        QuarkusPlatform platform = (QuarkusPlatform) Platform.getPlatform();
        if (!platform.getDeferredExceptions().isEmpty()) {
            InitializationException quarkusException = new InitializationException();
            for (Throwable inner : platform.getDeferredExceptions()) {
                quarkusException.addSuppressed(inner);
            }
            
            throw quarkusException;
        }
        
    }
    
    public static void exitOnError(Throwable cause) throws InitializationException{
        addInitializationException(cause);
        exitOnError();
    }
    
    Runnable startupHook;
    Runnable shutdownHook;
    private AtomicBoolean started = new AtomicBoolean(false);
    private List<Throwable> deferredExceptions = new CopyOnWriteArrayList<>();
    public void onStartup(Runnable startupHook) {
        this.startupHook = startupHook;
    }
    
    public void onShutdown(Runnable shutdownHook) {
        this.shutdownHook = shutdownHook;
    }
    
    public void exit(Throwable cause) {
        throw new RuntimeException(cause);
    }
    
    void started() {
        this.started.set(true);
    }
    
    public boolean isStarted() {
        return started.get();
    }
    
    private void addDeferredException(Throwable t) {
        deferredExceptions.add(t);
    }
    
    List<Throwable> getDeferredExceptions() {
        return deferredExceptions;
    }
    
}


