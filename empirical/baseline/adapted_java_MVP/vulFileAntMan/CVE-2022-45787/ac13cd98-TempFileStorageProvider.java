package org.apache.james.mime4j.storage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.apache.commons.io.FileUtils;
public class TempFileStorageProvider extends AbstractStorageProvider {
    private static final String DEFAULT_PREFIX = "m4j";
    private final String prefix;
    private final String suffix;
    private final File directory;
    public TempFileStorageProvider() {
        this(DEFAULT_PREFIX, null, null);
    }
    
    public TempFileStorageProvider(File directory) {
        this(DEFAULT_PREFIX, null, directory);
    }
    
    public TempFileStorageProvider(String prefix, String suffix, File directory) {
        if (prefix == null || prefix.length() < 3){
            throw new IllegalArgumentException("invalid prefix");
}
        if (directory != null) {
            try {
                FileUtils.forceMkdir(directory);
            }
             catch (IOException e) {
                throw new IllegalArgumentException("invalid directory");
            }
            
        }
        
        this.prefix = prefix;
        this.suffix = suffix;
        this.directory = directory;
    }
    
    public StorageOutputStream createStorageOutputStream() throws IOException {
        File file = File.createTempFile(prefix, suffix, directory);
        file.deleteOnExit();
        return new TempFileStorageOutputStream(file);
    }
    
    private static final class TempFileStorageOutputStream extends StorageOutputStream {
        private final File file;
        private OutputStream out;
        public TempFileStorageOutputStream(File file) throws IOException {
            this.file = file;
            this.out = new FileOutputStream(file);
        }
        
        public void close() throws IOException {
            super.close();
            out.close();
        }
        
        protected void write0(byte[] buffer, int offset, int length) throws IOException {
            out.write(buffer, offset, length);
        }
        
        protected Storage toStorage0() throws IOException {
            return new TempFileStorage(file);
        }
        
    }
    
    private static final class TempFileStorage implements Storage {
        private File file;
        private static final Set<File> filesToDelete = new HashSet<File>();
        public TempFileStorage(File file) {
            this.file = file;
        }
        
        public void delete() {
            synchronized (filesToDelete) {
                if (file != null) {
                    filesToDelete.add(file);
                    file = null;
                }
                
                for (Iterator<File> iterator = filesToDelete.iterator(); iterator .hasNext();) {
                    try {
                        FileUtils.forceDelete(iterator.next());
                        iterator.remove();
                    }
                     catch (IOException e) {
                    }
                    
                }
                
            }
            
        }
        
        public InputStream getInputStream() throws IOException {
            if (file == null){
                throw new IllegalStateException("storage has been deleted");
}
            return new BufferedInputStream(new FileInputStream(file));
        }
        
    }
    
}


