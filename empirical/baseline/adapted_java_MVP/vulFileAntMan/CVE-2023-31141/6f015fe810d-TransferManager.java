package org.opensearch.index.store.remote.utils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.lucene.store.IOContext;
import org.apache.lucene.store.IndexInput;
import org.opensearch.common.blobstore.BlobContainer;
import org.opensearch.index.store.remote.filecache.FileCache;
import org.opensearch.index.store.remote.filecache.FileCachedIndexInput;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Objects;
public class TransferManager {
    private static final Logger logger = LogManager.getLogger(TransferManager.class);
    private final BlobContainer blobContainer;
    private final ConcurrentInvocationLinearizer<Path, IndexInput> invocationLinearizer;
    private final FileCache fileCache;
    public TransferManager(final BlobContainer blobContainer, final FileCache fileCache) {
        this.blobContainer = blobContainer;
        this.invocationLinearizer = new ConcurrentInvocationLinearizer<>();
        this.fileCache = fileCache;
    }
    
    public IndexInput fetchBlob(BlobFetchRequest blobFetchRequest) throws InterruptedException, IOException {
        final IndexInput indexInput = invocationLinearizer.linearize( blobFetchRequest.getFilePath(), p -> fetchOriginBlob(blobFetchRequest) );
        return indexInput.clone();
    }
    
    private IndexInput fetchOriginBlob(BlobFetchRequest blobFetchRequest) throws IOException {
        IndexInput origin = fileCache.computeIfPresent(blobFetchRequest.getFilePath(), (path, cachedIndexInput) -> {
            if (cachedIndexInput.isClosed()) {
                try {
                    IndexInput luceneIndexInput = blobFetchRequest.getDirectory().openInput(blobFetchRequest.getFileName(), IOContext.READ);
                    return new FileCachedIndexInput(fileCache, blobFetchRequest.getFilePath(), luceneIndexInput);
                }
                 catch (IOException ioe) {
                    logger.warn("Open index input " + blobFetchRequest.getFilePath() + " got error ", ioe);
                    return null;
                }
                
            }
            
            return cachedIndexInput;
        }
        
);
        if (Objects.isNull(origin)) {
            IndexInput downloaded = downloadBlockLocally(blobFetchRequest);
            FileCachedIndexInput newOrigin = new FileCachedIndexInput(fileCache, blobFetchRequest.getFilePath(), downloaded);
            fileCache.put(blobFetchRequest.getFilePath(), newOrigin);
            origin = newOrigin;
        }
        
        return origin;
    }
    
    private IndexInput downloadBlockLocally(BlobFetchRequest blobFetchRequest) throws IOException {
        try ( InputStream snapshotFileInputStream = blobContainer.readBlob( blobFetchRequest.getBlobName(), blobFetchRequest.getPosition(), blobFetchRequest.getLength() ); OutputStream fileOutputStream = Files.newOutputStream(blobFetchRequest.getFilePath()); OutputStream localFileOutputStream = new BufferedOutputStream(fileOutputStream); ) {
            snapshotFileInputStream.transferTo(localFileOutputStream);
        }
        
        return blobFetchRequest.getDirectory().openInput(blobFetchRequest.getFileName(), IOContext.READ);
    }
    
}


