package org.keycloak.protocol.oidc.utils;
import org.jboss.logging.Logger;
import org.keycloak.common.util.Encode;
import org.keycloak.common.util.KeycloakUriBuilder;
import org.keycloak.common.util.UriUtils;
import org.keycloak.models.ClientModel;
import org.keycloak.models.Constants;
import org.keycloak.models.KeycloakSession;
import org.keycloak.models.KeycloakUriInfo;
import org.keycloak.models.RealmModel;
import org.keycloak.protocol.oidc.OIDCLoginProtocol;
import org.keycloak.services.Urls;
import org.keycloak.services.util.ResolveRelative;
import java.net.URI;
import java.util.Collection;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;
public class RedirectUtils {
    private static final Logger logger = Logger.getLogger(RedirectUtils.class);
    public static String verifyRealmRedirectUri(KeycloakSession session, String redirectUri) {
        Set<String> validRedirects = getValidateRedirectUris(session);
        return verifyRedirectUri(session, null, redirectUri, validRedirects, true);
    }
    
    public static String verifyRedirectUri(KeycloakSession session, String redirectUri, ClientModel client) {
        return verifyRedirectUri(session, redirectUri, client, true);
    }
    
    public static String verifyRedirectUri(KeycloakSession session, String redirectUri, ClientModel client, boolean requireRedirectUri) {
        if (client != null){
            return verifyRedirectUri(session, client.getRootUrl(), redirectUri, client.getRedirectUris(), requireRedirectUri);
}
        return null;
    }
    
    public static Set<String> resolveValidRedirects(KeycloakSession session, String rootUrl, Set<String> validRedirects) {
        Set<String> resolveValidRedirects = new TreeSet<>((String s1, String s2) -> s1.length() == s2.length()? s1.compareTo(s2) : s1.length() < s2.length()? 1 : -1);
        for (String validRedirect : validRedirects) {
            if (validRedirect.startsWith("/")) {
                validRedirect = relativeToAbsoluteURI(session, rootUrl, validRedirect);
                logger.debugv("replacing relative valid redirect with: {0}", validRedirect);
            }
            
            resolveValidRedirects.add(validRedirect);
        }
        
        return resolveValidRedirects;
    }
    
    private static Set<String> getValidateRedirectUris(KeycloakSession session) {
        RealmModel realm = session.getContext().getRealm();
        return session.clients().getAllRedirectUrisOfEnabledClients(realm).entrySet().stream() .filter(me -> me.getKey().isEnabled() && OIDCLoginProtocol.LOGIN_PROTOCOL.equals(me.getKey().getProtocol()) && !me.getKey().isBearerOnly() && (me.getKey().isStandardFlowEnabled() || me.getKey().isImplicitFlowEnabled())) .map(me -> resolveValidRedirects(session, me.getKey().getRootUrl(), me.getValue())) .flatMap(Collection::stream) .collect(Collectors.toSet());
    }
    
    public static String verifyRedirectUri(KeycloakSession session, String rootUrl, String redirectUri, Set<String> validRedirects, boolean requireRedirectUri) {
        KeycloakUriInfo uriInfo = session.getContext().getUri();
        RealmModel realm = session.getContext().getRealm();
        if (redirectUri == null) {
            if (!requireRedirectUri) {
                redirectUri = getSingleValidRedirectUri(validRedirects);
            }
            
            if (redirectUri == null) {
                logger.debug("No Redirect URI parameter specified");
                return null;
            }
            
        }
         else if (validRedirects.isEmpty()) {
            logger.debug("No Redirect URIs supplied");
            redirectUri = null;
        }
         else {
            URI originalRedirect = toUri(redirectUri);
            if (originalRedirect == null) {
                return null;
            }
            
            String decodedRedirectUri = decodeRedirectUri(redirectUri);
            URI decodedRedirect = toUri(decodedRedirectUri);
            decodedRedirectUri = getNormalizedRedirectUri(decodedRedirect);
            if (decodedRedirectUri == null) return null;
            String r = decodedRedirectUri;
            Set<String> resolveValidRedirects = resolveValidRedirects(session, rootUrl, validRedirects);
            String valid = matchesRedirects(resolveValidRedirects, r, true);
            if (valid == null && (r.startsWith(Constants.INSTALLED_APP_URL) || r.startsWith(Constants.INSTALLED_APP_LOOPBACK)) && r.indexOf(':', Constants.INSTALLED_APP_URL.length()) >= 0) {
                int i = r.indexOf(':', Constants.INSTALLED_APP_URL.length());
                StringBuilder sb = new StringBuilder();
                sb.append(r.substring(0, i));
                i = r.indexOf('/', i);
                if (i >= 0) {
                    sb.append(r.substring(i));
                }
                
                r = sb.toString();
                valid = matchesRedirects(resolveValidRedirects, r, true);
            }
            
            redirectUri = getNormalizedRedirectUri(originalRedirect);
            if (valid == null) {
                valid = matchesRedirects(resolveValidRedirects, redirectUri, false);
            }
            
            if (valid != null && !originalRedirect.isAbsolute()) {
                if (!redirectUri.startsWith("/")) {
                    redirectUri = "/" + redirectUri;
                }
                
                redirectUri = relativeToAbsoluteURI(session, rootUrl, redirectUri);
            }
            
            String scheme = decodedRedirect.getScheme();
            if (valid != null && scheme != null) {
                if (!valid.startsWith(scheme + ":") && !"http".equalsIgnoreCase(scheme) && !"https".equalsIgnoreCase(scheme)) {
                    logger.debugf("Invalid URI because scheme is not allowed: %s", redirectUri);
                    valid = null;
                }
                
            }
            
            redirectUri = valid != null ? redirectUri : null;
        }
        
        if (Constants.INSTALLED_APP_URN.equals(redirectUri)) {
            return Urls.realmInstalledAppUrnCallback(uriInfo.getBaseUri(), realm.getName()).toString();
        }
         else {
            return redirectUri;
        }
        
    }
    
    private static URI toUri(String redirectUri) {
        URI uri = null;
        if (redirectUri != null) {
            try {
                uri = URI.create(redirectUri);
            }
             catch (IllegalArgumentException cause) {
                logger.debug("Invalid redirect uri", cause);
            }
             catch (Exception cause) {
                logger.debug("Unexpected error when parsing redirect uri", cause);
            }
            
        }
        
        return uri;
    }
    
    private static String getNormalizedRedirectUri(URI uri) {
        String redirectUri = null;
        if (uri != null) {
            redirectUri = uri.normalize().toString();
        }
        
        return redirectUri;
    }
    
    private static String decodeRedirectUri(String redirectUri) {
        if (redirectUri == null) return null;
        int MAX_DECODING_COUNT = 5; 
        try {
            KeycloakUriBuilder uriBuilder = KeycloakUriBuilder.fromUri(redirectUri, false).preserveDefaultPort();
            String origQuery = uriBuilder.getQuery();
            String origFragment = uriBuilder.getFragment();
            String origUserInfo = uriBuilder.getUserInfo();
            String encodedRedirectUri = uriBuilder .replaceQuery(null) .fragment(null) .userInfo(null) .buildAsString();
            String decodedRedirectUri = null;
            for (int i = 0; i < MAX_DECODING_COUNT; i++) {
                decodedRedirectUri = Encode.decode(encodedRedirectUri);
                if (decodedRedirectUri.equals(encodedRedirectUri)) {
                    return KeycloakUriBuilder.fromUri(decodedRedirectUri, false).preserveDefaultPort() .replaceQuery(origQuery) .fragment(origFragment) .userInfo(origUserInfo) .buildAsString();
                }
                 else {
                    encodedRedirectUri = decodedRedirectUri;
                }
                
            }
            
        }
         catch (IllegalArgumentException iae) {
            logger.debugf("Illegal redirect URI used: %s, Details: %s", redirectUri, iae.getMessage());
        }
        
        logger.debugf("Was not able to decode redirect URI: %s", redirectUri);
        return null;
    }
    
    private static String relativeToAbsoluteURI(KeycloakSession session, String rootUrl, String relative) {
        if (rootUrl != null) {
            rootUrl = ResolveRelative.resolveRootUrl(session, rootUrl);
        }
        
        if (rootUrl == null || rootUrl.isEmpty()) {
            rootUrl = UriUtils.getOrigin(session.getContext().getUri().getBaseUri());
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append(rootUrl);
        sb.append(relative);
        return sb.toString();
    }
    
    private static String stripOffRedirectForWildcard(String redirect) {
        return KeycloakUriBuilder.fromUri(redirect, false) .preserveDefaultPort() .userInfo(null) .replaceQuery(null) .fragment(null) .buildAsString();
    }
    
    private static String matchesRedirects(Set<String> validRedirects, String redirect, boolean allowWildcards) {
        logger.tracef("matchesRedirects: redirect URL to check: %s, allow wildcards: %b, Configured valid redirect URLs: %s", redirect, allowWildcards, validRedirects);
        for (String validRedirect : validRedirects) {
            if (validRedirect.endsWith("*") && !validRedirect.contains("?") && allowWildcards) {
                String r = stripOffRedirectForWildcard(redirect);
                int length = validRedirect.length() - 1;
                validRedirect = validRedirect.substring(0, length);
                if (r.startsWith(validRedirect)) return validRedirect;
                if (length - 1 > 0 && validRedirect.charAt(length - 1) == '/') length--;
                validRedirect = validRedirect.substring(0, length);
                if (validRedirect.equals(r)) return validRedirect;
            }
             else if (validRedirect.equals(redirect)) return validRedirect;
        }
        
        return null;
    }
    
    private static String getSingleValidRedirectUri(Collection<String> validRedirects) {
        if (validRedirects.size() != 1) return null;
        String validRedirect = validRedirects.iterator().next();
        return validateRedirectUriWildcard(validRedirect);
    }
    
    public static String validateRedirectUriWildcard(String redirectUri) {
        if (redirectUri == null){
            return null;
}
        int idx = redirectUri.indexOf("/*");
        if (idx > -1) {
            redirectUri = redirectUri.substring(0, idx);
        }
        
        return redirectUri;
    }
    
    private static String getFirstValidRedirectUri(Collection<String> validRedirects) {
        final String redirectUri = validRedirects.stream().findFirst().orElse(null);
        return (redirectUri != null) ? validateRedirectUriWildcard(redirectUri) : null;
    }
    
    public static String getFirstValidRedirectUri(KeycloakSession session, String rootUrl, Set<String> validRedirects) {
        return getFirstValidRedirectUri(resolveValidRedirects(session, rootUrl, validRedirects));
    }
    
}


