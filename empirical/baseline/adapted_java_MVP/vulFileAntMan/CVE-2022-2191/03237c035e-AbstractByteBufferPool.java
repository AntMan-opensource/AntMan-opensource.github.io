package org.eclipse.jetty.io;
import java.nio.ByteBuffer;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;
import java.util.function.IntConsumer;
import org.eclipse.jetty.util.annotation.ManagedAttribute;
import org.eclipse.jetty.util.annotation.ManagedObject;
import org.eclipse.jetty.util.annotation.ManagedOperation;
@ManagedObject
abstract class AbstractByteBufferPool implements ByteBufferPool {
    private final int _factor;
    private final int _maxQueueLength;
    private final long _maxHeapMemory;
    private final long _maxDirectMemory;
    private final AtomicLong _heapMemory = new AtomicLong();
    private final AtomicLong _directMemory = new AtomicLong();
    protected AbstractByteBufferPool(int factor, int maxQueueLength, long maxHeapMemory, long maxDirectMemory) {
        _factor = factor <= 0 ? 1024 : factor;
        _maxQueueLength = maxQueueLength;
        _maxHeapMemory = (maxHeapMemory != 0) ? maxHeapMemory : Runtime.getRuntime().maxMemory() / 4;
        _maxDirectMemory = (maxDirectMemory != 0) ? maxDirectMemory : Runtime.getRuntime().maxMemory() / 4;
    }
    
    protected int getCapacityFactor() {
        return _factor;
    }
    
    protected int getMaxQueueLength() {
        return _maxQueueLength;
    }
    
    protected void decrementMemory(ByteBuffer buffer) {
        updateMemory(buffer, false);
    }
    
    protected void incrementMemory(ByteBuffer buffer) {
        updateMemory(buffer, true);
    }
    
    private void updateMemory(ByteBuffer buffer, boolean addOrSub) {
        AtomicLong memory = buffer.isDirect() ? _directMemory : _heapMemory;
        int capacity = buffer.capacity();
        memory.addAndGet(addOrSub ? capacity : -capacity);
    }
    
    protected void releaseExcessMemory(boolean direct, Consumer<Boolean> clearFn) {
        long maxMemory = direct ? _maxDirectMemory : _maxHeapMemory;
        if (maxMemory > 0){
            while (getMemory(direct) > maxMemory){
                clearFn.accept(direct);
            }
            
        }
        
    }
    
    @ManagedAttribute("The bytes retained by direct ByteBuffers")
    public long getDirectMemory() {
        return getMemory(true);
    }
    
    @ManagedAttribute("The bytes retained by heap ByteBuffers")
    public long getHeapMemory() {
        return getMemory(false);
    }
    
    @ManagedAttribute("The max num of bytes that can be retained from direct ByteBuffers")
    public long getMaxDirectMemory() {
        return _maxDirectMemory;
    }
    
    @ManagedAttribute("The max num of bytes that can be retained from heap ByteBuffers")
    public long getMaxHeapMemory() {
        return _maxHeapMemory;
    }
    
    public long getMemory(boolean direct) {
        AtomicLong memory = direct ? _directMemory : _heapMemory;
        return memory.get();
    }
    
    IntConsumer updateMemory(boolean direct) {
        return (direct) ? _directMemory::addAndGet : _heapMemory::addAndGet;
    }
    
    @ManagedOperation(value = "Clears this ByteBufferPool", impact = "ACTION")
    public void clear() {
        _heapMemory.set(0);
        _directMemory.set(0);
    }
    
}


