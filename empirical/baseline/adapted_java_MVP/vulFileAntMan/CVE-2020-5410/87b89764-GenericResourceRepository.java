package org.springframework.cloud.config.server.resource;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import org.springframework.cloud.config.server.environment.SearchPathLocator;
import org.springframework.cloud.config.server.support.PathUtils;
import org.springframework.context.ResourceLoaderAware;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.util.StringUtils;
public class GenericResourceRepository implements ResourceRepository, ResourceLoaderAware {
	private ResourceLoader resourceLoader;
	private SearchPathLocator service;
	public GenericResourceRepository(SearchPathLocator service) {
		this.service = service;
	}
	
	public void setResourceLoader(ResourceLoader resourceLoader) {
		this.resourceLoader = resourceLoader;
	}
	
	public synchronized Resource findOne(String application, String profile, String label, String path) {
		if (StringUtils.hasText(path)) {
			String[] locations = this.service.getLocations(application, profile, label) .getLocations();
			try {
				for (int i = locations.length; i-- > 0;) {
					String location = locations[i];
					if (PathUtils.isInvalidEncodedLocation(location)) {
						continue;
					}
					
					for (String local : getProfilePaths(profile, path)) {
						if (!PathUtils.isInvalidPath(local) && !PathUtils.isInvalidEncodedPath(local)) {
							Resource file = this.resourceLoader.getResource(location) .createRelative(local);
							if (file.exists() && file.isReadable()) {
								return file;
							}
							
						}
						
					}
					
				}
				
			}
			
			catch (IOException e) {
				throw new NoSuchResourceException( "Error : " + path + ". (" + e.getMessage() + ")");
			}
			
		}
		
		throw new NoSuchResourceException("Not found: " + path);
	}
	
	private Collection<String> getProfilePaths(String profiles, String path) {
		Set<String> paths = new LinkedHashSet<>();
		for (String profile : StringUtils.commaDelimitedListToSet(profiles)) {
			if (!StringUtils.hasText(profile) || "default".equals(profile)) {
				paths.add(path);
			}
			
			else {
				String ext = StringUtils.getFilenameExtension(path);
				String file = path;
				if (ext != null) {
					ext = "." + ext;
					file = StringUtils.stripFilenameExtension(path);
				}
				
				else {
					ext = "";
				}
				
				paths.add(file + "-" + profile + ext);
			}
			
		}
		
		paths.add(path);
		return paths;
	}
	
}


