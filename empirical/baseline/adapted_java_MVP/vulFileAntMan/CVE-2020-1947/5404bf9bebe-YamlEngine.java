package org.apache.shardingsphere.core.yaml.engine;
import com.google.common.base.Strings;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.apache.shardingsphere.core.yaml.config.YamlConfiguration;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public final class YamlEngine {
    public static <T extends YamlConfiguration> T unmarshal(final File yamlFile, final Class<T> classType) throws IOException {
        try ( FileInputStream fileInputStream = new FileInputStream(yamlFile); InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, "UTF-8") ) {
            return new Yaml(new Constructor(classType)).loadAs(inputStreamReader, classType);
        }
        
    }
    
    public static <T extends YamlConfiguration> T unmarshal(final byte[] yamlBytes, final Class<T> classType) throws IOException {
        try (InputStream inputStream = new ByteArrayInputStream(yamlBytes)) {
            return new Yaml(new Constructor(classType)).loadAs(inputStream, classType);
        }
        
    }
    
    public static <T> T unmarshal(final String yamlContent, final Class<T> classType) {
        return new Yaml(new Constructor(classType)).loadAs(yamlContent, classType);
    }
    
    public static Map<?, ?> unmarshal(final String yamlContent) {
        return Strings.isNullOrEmpty(yamlContent) ? new LinkedHashMap<>() : (Map) new Yaml().load(yamlContent);
    }
    
    public static Properties unmarshalProperties(final String yamlContent) {
        return Strings.isNullOrEmpty(yamlContent) ? new Properties() : new Yaml().loadAs(yamlContent, Properties.class);
    }
    
    public static String marshal(final Object value) {
        return new Yaml(new DefaultYamlRepresenter()).dumpAsMap(value);
    }
    
}


