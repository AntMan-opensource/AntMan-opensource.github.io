package org.apache.nifi.authorization;
class RemoteShellCommands implements ShellCommandsProvider {
    private final static String remoteCommand = "ssh " + "-o 'StrictHostKeyChecking no' " + "-o 'PasswordAuthentication no' " + "-o \"RemoteCommand %s\" " + "-i %s -p %s -l root %s";
    private ShellCommandsProvider innerProvider;
    private String privateKeyPath;
    private String remoteHost;
    private Integer remotePort;
    private RemoteShellCommands() {
    }
    
    public static ShellCommandsProvider wrapOtherProvider(ShellCommandsProvider otherProvider, String keyPath, String host, Integer port) {
        RemoteShellCommands remote = new RemoteShellCommands();
        remote.innerProvider = otherProvider;
        remote.privateKeyPath = keyPath;
        remote.remoteHost = host;
        remote.remotePort = port;
        return remote;
    }
    
    public String getUsersList() {
        return String.format(remoteCommand, innerProvider.getUsersList(), privateKeyPath, remotePort, remoteHost);
    }
    
    public String getGroupsList() {
        return String.format(remoteCommand, innerProvider.getGroupsList(), privateKeyPath, remotePort, remoteHost);
    }
    
    public String getGroupMembers(String groupName) {
        return String.format(remoteCommand, innerProvider.getGroupMembers(groupName), privateKeyPath, remotePort, remoteHost);
    }
    
    public String getUserById(String userId) {
        return String.format(remoteCommand, innerProvider.getUserById(userId), privateKeyPath, remotePort, remoteHost);
    }
    
    public String getUserByName(String userName) {
        return String.format(remoteCommand, innerProvider.getUserByName(userName), privateKeyPath, remotePort, remoteHost);
    }
    
    public String getGroupById(String groupId) {
        return String.format(remoteCommand, innerProvider.getGroupById(groupId), privateKeyPath, remotePort, remoteHost);
    }
    
    public String getSystemCheck() {
        return String.format(remoteCommand, innerProvider.getSystemCheck(), privateKeyPath, remotePort, remoteHost);
    }
    
}


