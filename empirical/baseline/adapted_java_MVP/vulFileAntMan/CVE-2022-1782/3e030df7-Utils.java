package com.erudika.para.core.utils;
import com.erudika.para.core.ParaObject;
import com.erudika.para.core.annotations.Email;
import com.samskivert.mustache.Mustache;
import com.vladsch.flexmark.ast.Link;
import com.vladsch.flexmark.ext.autolink.AutolinkExtension;
import com.vladsch.flexmark.ext.emoji.EmojiExtension;
import com.vladsch.flexmark.ext.emoji.EmojiImageType;
import com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;
import com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;
import com.vladsch.flexmark.ext.media.tags.MediaTagsExtension;
import com.vladsch.flexmark.ext.tables.TablesExtension;
import com.vladsch.flexmark.html.AttributeProvider;
import com.vladsch.flexmark.html.HtmlRenderer;
import com.vladsch.flexmark.html.IndependentAttributeProviderFactory;
import com.vladsch.flexmark.html.renderer.AttributablePart;
import com.vladsch.flexmark.html.renderer.LinkResolverContext;
import com.vladsch.flexmark.parser.Parser;
import com.vladsch.flexmark.util.ast.Document;
import com.vladsch.flexmark.util.ast.Node;
import com.vladsch.flexmark.util.data.MutableDataHolder;
import com.vladsch.flexmark.util.data.MutableDataSet;
import com.vladsch.flexmark.util.html.MutableAttributes;
import java.io.IOException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.Pattern;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.validation.constraints.NotNull;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.LocaleUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.safety.Safelist;
import org.mindrot.jbcrypt.BCrypt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public final class Utils {
	private static final Logger logger = LoggerFactory.getLogger(Utils.class);
	 private static final Pattern EMAIL_PATTERN = Pattern.compile(Email.EMAIL_PATTERN);
	private static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance();
	private static final Safelist SAFE_HTML_TAGS = getHTMLTagsWhitelist();
	private static final MutableDataHolder MD_OPTIONS = getMarkdownOptions();
	private static final Parser MD_PARSER = Parser.builder(MD_OPTIONS).build();
	private static final HtmlRenderer HTML_RENDERER_STRICT = HtmlRenderer.builder(MD_OPTIONS).build();
	private static final HtmlRenderer HTML_RENDERER_LOOSE = HtmlRenderer. builder(MD_OPTIONS.set(HtmlRenderer.ESCAPE_HTML, false)).build();
	private static HumanTime humantime;
	private static Utils instance;
	 private static final long TIMER_OFFSET = 1310084584692L; 
	private static final long WORKER_ID_BITS = 5L;
	private static final long DATACENTER_ID_BITS = 5L;
	private static final long MAX_WORKER_ID = -1L ^ (-1L << WORKER_ID_BITS);
	private static final long MAX_DATACENTER_ID = -1L ^ (-1L << DATACENTER_ID_BITS);
	private static final long SEQUENCE_BITS = 12L;
	private static final long WORKER_ID_SHIFT = SEQUENCE_BITS;
	private static final long DATACENTER_ID_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS;
	private static final long TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + DATACENTER_ID_BITS;
	private static final long SEQUENCE_MASK = -1L ^ (-1L << SEQUENCE_BITS);
	private static long lastTimestamp = -1L;
	private static long dataCenterId = 0L;	
	private static long workerId;	
	private static long sequence = 0L;
	static {
		initIdGenerator();
		NUMBER_FORMAT.setMinimumFractionDigits(2);
		NUMBER_FORMAT.setMaximumFractionDigits(2);
	}
	
	private Utils() { }
	 public static Utils getInstance() {
		if (instance == null) {
			instance = new Utils();
		}
		
		return instance;
	}
	
	 public static HumanTime getHumanTime() {
		if (humantime == null) {
			humantime = new HumanTime();
		}
		
		return humantime;
	}
	
	 private static void initIdGenerator() {
		String workerID = Para.getConfig().workerId();
		workerId = NumberUtils.toLong(workerID, 1);
		if (workerId > MAX_WORKER_ID || workerId < 0) {
			workerId = ThreadLocalRandom.current().nextInt((int) MAX_WORKER_ID + 1);
		}
		
		if (dataCenterId > MAX_DATACENTER_ID || dataCenterId < 0) {
			dataCenterId =  ThreadLocalRandom.current().nextInt((int) MAX_DATACENTER_ID + 1);
		}
		
	}
	
	 public static String md5(String s) {
		if (s == null) {
			return "";
		}
		
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(s.getBytes());
			byte[] byteData = md.digest();
			 StringBuilder sb = new StringBuilder();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}
			
			return sb.toString();
		}
		 catch (NoSuchAlgorithmException ex) {
			return "";
		}
		
	}
	
	 public static String hmacSHA256(String message, String secret) {
		try {
			Mac hmac = Mac.getInstance("HmacSHA256");
			hmac.init(new SecretKeySpec(secret.getBytes(Para.getConfig().defaultEncoding()), "HmacSHA256"));
			return Utils.base64enc(hmac.doFinal(message.getBytes(Para.getConfig().defaultEncoding())));
		}
		 catch (Exception e) {
			return "";
		}
		
	}
	
	 public static String bcrypt(String s) {
		return (s == null) ? s : BCrypt.hashpw(s, BCrypt.gensalt(12));
	}
	
	 public static boolean bcryptMatches(String plain, String storedHash) {
		if (StringUtils.isBlank(plain) || StringUtils.isBlank(storedHash)) {
			return false;
		}
		
		try {
			return BCrypt.checkpw(plain, storedHash);
		}
		 catch (Exception e) {
			return false;
		}
		
	}
	
	 public static String generateSecurityToken(int length, boolean urlSafe) {
		final byte[] bytes = new byte[length];
		SecureRandom rand;
		try {
			rand = SecureRandom.getInstance("SHA1PRNG");
		}
		 catch (NoSuchAlgorithmException ex) {
			logger.error(null, ex);
			rand = new SecureRandom();
		}
		
		rand.nextBytes(bytes);
		return urlSafe ? base64encURL(bytes) : base64enc(bytes);
	}
	
	 public static String generateSecurityToken(int length) {
		return generateSecurityToken(length, false);
	}
	
	 public static String generateSecurityToken() {
		return generateSecurityToken(32);
	}
	
	 public static String escapeJavascript(String str) {
		return (str == null) ? "" : StringEscapeUtils.escapeEcmaScript(str);
	}
	
	 public static String stripHtml(String html) {
		return (html == null) ? "" : Jsoup.parse(html).text();
	}
	
	 public static String markdownToHtml(String markdownString) {
		return markdownToHtml(markdownString, false);
	}
	
	 public static String markdownToHtml(String markdownString, boolean htmlTagsRenderingEnabled) {
		if (StringUtils.isBlank(markdownString)) {
			return "";
		}
		
		Document parsed = MD_PARSER.parse(markdownString);
		if (htmlTagsRenderingEnabled) {
			return Jsoup.clean(HTML_RENDERER_LOOSE.render(parsed), SAFE_HTML_TAGS);
		}
		 else {
			return HTML_RENDERER_STRICT.render(parsed);
		}
		
	}
	
	 public static String compileMustache(Map<String, Object> context, String template) {
		if (context == null || StringUtils.isBlank(template)) {
			return "";
		}
		
		Writer writer = new StringWriter();
		try {
			Mustache.compiler().escapeHTML(false).emptyStringIsFalse(true).compile(template).execute(context, writer);
		}
		 finally {
			try {
				writer.close();
			}
			 catch (IOException e) {
				logger.error(null, e);
			}
			
		}
		
		return writer.toString();
	}
	
	 public static String abbreviate(String str, int max) {
		return StringUtils.isBlank(str) ? "" : StringUtils.abbreviate(str, max);
	}
	
	 public static String arrayJoin(List<String> arr, String separator) {
		return (arr == null || separator == null) ? "" : StringUtils.join(arr, separator);
	}
	
	 public static String stripAndTrim(String str) {
		return stripAndTrim(str, "");
	}
	
	 public static String stripAndTrim(String str, String replaceWith) {
		return stripAndTrim(str, replaceWith, false);
	}
	
	 public static String stripAndTrim(String str, String replaceWith, boolean asciiOnly) {
		if (StringUtils.isBlank(str)) {
			return "";
		}
		
		String s = str;
		if (asciiOnly) {
			s = str.replaceAll("[^\\p{ASCII}]", "");
		}
		
		return s.replaceAll("[\\p{S}\\p{P}\\p{C}]", replaceWith).replaceAll("\\p{Z}+", " ").trim();
	}
	
	 public static String noSpaces(String str, String replaceWith) {
		return StringUtils.isBlank(str) ? "" : str.trim().replaceAll("[\\p{C}\\p{Z}]+", StringUtils.trimToEmpty(replaceWith)).toLowerCase();
	}
	
	 public static String formatMessage(String msg, Object... params) {
		try {
			 msg = StringUtils.replace(msg, "'", "''");
			return StringUtils.isBlank(msg) ? "" : MessageFormat.format(msg, params);
		}
		 catch (IllegalArgumentException e) {
			return msg;
		}
		
	}
	
	 public static String base64enc(byte[] str) {
		if (str == null) {
			return "";
		}
		
		return new String(Base64.encodeBase64(str));
	}
	
	 public static String base64encURL(byte[] str) {
		if (str == null) {
			return "";
		}
		
		return new String(Base64.encodeBase64URLSafe(str));
	}
	
	 public static String base64dec(String str) {
		if (str == null) {
			return "";
		}
		
		try {
			return new String(Base64.decodeBase64(str), Para.getConfig().defaultEncoding());
		}
		 catch (Exception ex) {
			logger.error("Failed to decode base64 string '{}'.", str, ex);
		}
		
		return "";
	}
	
	 private static MutableDataHolder getMarkdownOptions() {
		return new MutableDataSet() .set(HtmlRenderer.ESCAPE_HTML, true) .set(HtmlRenderer.SUPPRESSED_LINKS, "(?i)javascript:.*") .set(HtmlRenderer.SOFT_BREAK, Para.getConfig().markdownSoftBreak()) .set(HtmlRenderer.AUTOLINK_WWW_PREFIX, "https://") .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_FALLBACK_TO_IMAGE) .set(TablesExtension.COLUMN_SPANS, false) .set(TablesExtension.APPEND_MISSING_COLUMNS, true) .set(TablesExtension.DISCARD_EXTRA_COLUMNS, true) .set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true) .set(Parser.EXTENSIONS, Arrays.asList( TablesExtension.create(), EmojiExtension.create(), StrikethroughExtension.create(), TaskListExtension.create(), AutolinkExtension.create(), RelAttributeExtension.create(), MediaTagsExtension.create()));
	}
	
	private static Safelist getHTMLTagsWhitelist() {
		Safelist whitelist = Safelist.relaxed();
		whitelist.addTags("abbr", "hr", "del", "details", "summary", "center", "audio", "video", "source");
		whitelist.addProtocols("a", "href", "#");
		whitelist.addEnforcedAttribute("a", "rel", "nofollow noreferrer");
		whitelist.addAttributes("abbr", "title");
		whitelist.addAttributes("th", "align");
		whitelist.addAttributes("td", "align");
		whitelist.addAttributes("code", "class");
		whitelist.addAttributes("div", "class");
		whitelist.addAttributes("a", "rel");
		whitelist.addAttributes("audio", "controls", "autoplay", "muted", "loop");
		whitelist.addAttributes("video", "controls", "autoplay", "muted", "playsinline", "loop");
		whitelist.addAttributes("source", "src", "type");
		whitelist.addAttributes("details", "class", "open");
		whitelist.addAttributes("h1", "id");
		whitelist.addAttributes("h2", "id");
		whitelist.addAttributes("h3", "id");
		whitelist.addAttributes("h4", "id");
		whitelist.addAttributes("h5", "id");
		whitelist.addAttributes("h6", "id");
		whitelist.addAttributes("h7", "id");
		return whitelist;
	}
	
	static class RelAttributeExtension implements HtmlRenderer.HtmlRendererExtension {
		public void rendererOptions(@NotNull MutableDataHolder options) { }
		public void extend(@NotNull HtmlRenderer.Builder htmlRendererBuilder, @NotNull String rendererType) {
			htmlRendererBuilder.attributeProviderFactory(new IndependentAttributeProviderFactory() {
				public AttributeProvider apply(@NotNull LinkResolverContext context) {
					return new RelAttributeProvider();
				}
				
			}
			
);
		}
		
		static RelAttributeExtension create() {
			return new RelAttributeExtension();
		}
		
	}
	
	static class RelAttributeProvider implements AttributeProvider {
		public void setAttributes(@NotNull Node node, @NotNull AttributablePart part, @NotNull MutableAttributes attributes) {
			if (node instanceof Link && part == AttributablePart.LINK) {
				attributes.replaceValue("rel", "nofollow noreferrer");
			}
			
		}
		
	}
	
	 public static String formatDate(Long timestamp, String format, Locale loc) {
		if (StringUtils.isBlank(format)) {
			format = DateFormatUtils.ISO_8601_EXTENDED_DATE_FORMAT.getPattern();
		}
		
		if (timestamp == null) {
			timestamp = timestamp();
		}
		
		if (loc == null) {
			loc = Locale.US;
		}
		
		return DateFormatUtils.format(timestamp, format, loc);
	}
	
	 public static String formatDate(String format, Locale loc) {
		return formatDate(timestamp(), format, loc);
	}
	
	 public static int getCurrentYear() {
		return Calendar.getInstance().get(Calendar.YEAR);
	}
	
	 public static long timestamp() {
		return System.currentTimeMillis();
	}
	
	 public static String[] getMonths(Locale locale) {
		if (locale == null) {
			locale = Locale.US;
		}
		
		DateFormatSymbols dfs = DateFormatSymbols.getInstance(locale);
		return dfs.getMonths();
	}
	
	 public static Locale getLocale(String localeStr) {
		try {
			return LocaleUtils.toLocale(localeStr);
		}
		 catch (Exception e) {
			return Locale.US;
		}
		
	}
	
	 public static int round(float d) {
		return Math.round(d);
	}
	
	 public static String formatPrice(double price) {
		return NUMBER_FORMAT.format(price);
	}
	
	 public static double roundHalfUp(double d) {
		return roundHalfUp(d, 2);
	}
	
	 public static double roundHalfUp(double d, int scale) {
		return BigDecimal.valueOf(d).setScale(scale, RoundingMode.HALF_UP).doubleValue();
	}
	
	 public static String abbreviateInt(Number number, int decPlaces) {
		if (number == null) {
			return "";
		}
		
		String abbrevn = number.toString();
		 decPlaces = (int) Math.pow(10, decPlaces);
		 String[] abbrev = {"K", "M", "B", "T"};
		boolean done = false;
		 for (int i = abbrev.length - 1; i >= 0 && !done; i--) {
			 int size = (int) Math.pow(10, (double) (i + 1) * 3);
			 if (size <= number.intValue()) {
				 number = Math.round(number.intValue() * decPlaces / (float) size) / decPlaces;
				 abbrevn = number + abbrev[i];
				 done = true;
			}
			
		}
		
		return abbrevn;
	}
	
	 public static String urlDecode(String s) {
		if (s == null) {
			return "";
		}
		
		String decoded = s;
		try {
			decoded = URLDecoder.decode(s, Para.getConfig().defaultEncoding());
		}
		 catch (UnsupportedEncodingException ex) {
			logger.error(null, ex);
		}
		
		return decoded;
	}
	
	 public static String urlEncode(String s) {
		if (s == null) {
			return "";
		}
		
		String encoded = s;
		try {
			encoded = URLEncoder.encode(s, Para.getConfig().defaultEncoding());
		}
		 catch (UnsupportedEncodingException ex) {
			logger.error(null, ex);
		}
		
		return encoded;
	}
	
	 public static boolean isValidURL(String url) {
		return toURL(url) != null;
	}
	
	 public static boolean isValidEmail(String email) {
		return email != null && EMAIL_PATTERN.matcher(email).matches();
	}
	
	 public static String getHostFromURL(String url) {
		URL u = toURL(url);
		String host = (u == null) ? "" : u.getHost();
		return host;
	}
	
	 public static String getBaseURL(String url) {
		URL u = toURL(url);
		String base = null;
		if (u != null) {
			try {
				base = u.toURI().getScheme().concat("://").concat(u.getAuthority());
			}
			 catch (URISyntaxException ex) {
				base = null;
			}
			
		}
		
		return base;
	}
	
	private static URL toURL(String url) {
		if (StringUtils.isBlank(url)) {
			return null;
		}
		
		URL u;
		try {
			u = new URL(url);
		}
		 catch (MalformedURLException e) {
			 u = null;
		}
		
		return u;
	}
	
	 public static String getObjectURI(ParaObject obj, boolean includeName, boolean includeId) {
		if (obj == null) {
			return "/";
		}
		
		if (includeId && obj.getId() != null) {
			return (includeName && !StringUtils.isBlank(obj.getName())) ? obj.getObjectURI().concat("-"). concat(urlEncode(noSpaces(obj.getName(), "-"))) : obj.getObjectURI();
		}
		 else {
			return obj.getObjectURI();
		}
		
	}
	
	 public static String getSystemProperty(String name) {
		return StringUtils.isBlank(name) ? "" : System.getProperty(name);
	}
	
	 public static boolean isJsonType(String contentType) {
		return StringUtils.startsWith(contentType, "application/json") || StringUtils.startsWith(contentType, "application/javascript") || StringUtils.startsWith(contentType, "text/javascript");	
	}
	
	 public static String singularToPlural(String singul) {
		if (!StringUtils.isAsciiPrintable(singul)) {
			return singul;
		}
		
		return (StringUtils.isBlank(singul) || singul.endsWith("es") || singul.endsWith("ies")) ? singul : (singul.endsWith("s") ? singul + "es" : (singul.endsWith("y") ? StringUtils.removeEndIgnoreCase(singul, "y") + "ies" : singul + "s"));
	}
	
	 public static boolean isBasicType(Class<?> clazz) {
		return (clazz == null) ? false : (clazz.isPrimitive() || clazz.equals(String.class) || clazz.equals(Long.class) || clazz.equals(Integer.class) || clazz.equals(Boolean.class) || clazz.equals(Byte.class) || clazz.equals(Short.class) || clazz.equals(Float.class) || clazz.equals(Double.class) || clazz.equals(Character.class));
	}
	
	 public static String type(Class<? extends ParaObject> clazz) {
		return (clazz == null) ? "" : clazz.getSimpleName().toLowerCase();
	}
	
	 public static List<Field> getAllDeclaredFields(Class<? extends ParaObject> clazz) {
		LinkedList<Field> fields = new LinkedList<>();
		if (clazz == null) {
			return fields;
		}
		
		Class<?> parent = clazz;
		do {
			for (Field field : parent.getDeclaredFields()) {
				if (!Modifier.isTransient(field.getModifiers()) && !field.getName().equals("serialVersionUID")) {
					fields.add(field);
				}
				
			}
			
			parent = parent.getSuperclass();
		}
		 while (!parent.equals(Object.class));
		return fields;
	}
	
	 public static synchronized String getNewId() {
		 long timestamp = timestamp();
		if (lastTimestamp == timestamp) {
			sequence = (sequence + 1) & SEQUENCE_MASK;
			if (sequence == 0) {
				timestamp = tilNextMillis(lastTimestamp);
			}
			
		}
		 else {
			sequence = 0;
		}
		
		if (timestamp < lastTimestamp) {
			throw new IllegalStateException(String.format("Clock moved backwards.  " + "Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
		}
		
		lastTimestamp = timestamp;
		return Long.toString(((timestamp - TIMER_OFFSET) << TIMESTAMP_LEFT_SHIFT) | (dataCenterId << DATACENTER_ID_SHIFT) | (workerId << WORKER_ID_SHIFT) | (sequence));
	}
	
	private static long tilNextMillis(long lastTimestamp) {
		long timestamp = timestamp();
		while (timestamp <= lastTimestamp) {
			timestamp = timestamp();
		}
		
		return timestamp;
	}
	
}


