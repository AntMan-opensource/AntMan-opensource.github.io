package hudson.model;
import hudson.Extension;
import hudson.model.RunMap.Constructor;
import hudson.util.AlternativeUiTextProvider;
import java.io.File;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import jenkins.model.Jenkins;
import org.jenkinsci.plugins.externalmonitorjob.Messages;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
public class ExternalJob extends ViewJob<ExternalJob,ExternalRun> implements TopLevelItem {
    public ExternalJob(String name) {
        this(Jenkins.getInstance(),name);
    }
    
    public ExternalJob(ItemGroup parent, String name) {
        super(parent,name);
    }
    
    protected void reload() {
        this.runs.load(this,new Constructor<ExternalRun>() {
            public ExternalRun create(File dir) throws IOException {
                return new ExternalRun(ExternalJob.this,dir);
            }
            
        }
        
);
    }
    
    public synchronized ExternalRun newBuild() throws IOException {
        checkPermission(AbstractProject.BUILD);
        ExternalRun run = new ExternalRun(this);
        _getRuns();
        runs.put(run);
        return run;
    }
    
    public void doAcceptBuildResult(StaplerResponse rsp) throws IOException, ServletException {
        checkPermission(AbstractProject.BUILD);
        rsp.setStatus(HttpServletResponse.SC_OK);
    }
    
    public void doPostBuildResult( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {
        ExternalRun run = newBuild();
        run.acceptRemoteSubmission(req.getReader());
        rsp.setStatus(HttpServletResponse.SC_OK);
    }
    
    public TopLevelItemDescriptor getDescriptor() {
        return DESCRIPTOR;
    }
    
    public static final TopLevelItemDescriptor DESCRIPTOR = new DescriptorImpl();
    public String getPronoun() {
        return AlternativeUiTextProvider.get(PRONOUN, this, Messages.ExternalJob_displayName());
    }
    
    public static final class DescriptorImpl extends TopLevelItemDescriptor {
        public String getDisplayName() {
            return Messages.ExternalJob_displayName();
        }
        
        public String getCategoryId() {
            return "standalone-projects";
        }
        
        public String getDescription() {
            return Messages.ExternalJob_Description();
        }
        
        public String getIconFilePathPattern() {
            return "plugin/external-monitor-job/images/:size/externaljob.png";
        }
        
        public ExternalJob newInstance(ItemGroup parent, String name) {
            return new ExternalJob(parent,name);
        }
        
    }
    
}


