package org.silverpeas.core.web.http;
import org.apache.commons.fileupload.FileItem;
import org.silverpeas.kernel.SilverpeasRuntimeException;
import org.silverpeas.core.admin.user.model.User;
import org.silverpeas.core.cache.service.CacheAccessorProvider;
import org.silverpeas.core.i18n.I18NHelper;
import org.silverpeas.core.io.upload.FileUploadManager;
import org.silverpeas.core.io.upload.UploadedFile;
import org.silverpeas.kernel.util.StringUtil;
import org.silverpeas.core.util.file.FileUploadUtil;
import org.silverpeas.kernel.logging.SilverLogger;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import static java.util.Arrays.asList;
import static java.util.Arrays.stream;
import static org.apache.commons.lang3.StringUtils.split;
import static org.silverpeas.kernel.util.StringUtil.EMPTY;
public class HttpRequest extends HttpServletRequestWrapper {
  private static final String SECURE_PROPERTY = "secure";
  private List<FileItem> fileItems = null;
  private HttpRequest(HttpServletRequest request) {
    super(request);
    request.setAttribute(HttpRequest.class.getName(), this);
  }
  
  public static HttpRequest decorate(final HttpServletRequest request) {
    CacheAccessorProvider.getThreadCacheAccessor() .getCache() .put(SECURE_PROPERTY, request.isSecure());
    return request instanceof HttpRequest ? (HttpRequest) request : new HttpRequest(request);
  }
  
  public static HttpRequest decorate(final ServletRequest request) {
    return decorate((HttpServletRequest) request);
  }
  
  public static boolean isCurrentRequestSecure() {
    Boolean secure = CacheAccessorProvider.getThreadCacheAccessor() .getCache() .get(SECURE_PROPERTY, Boolean.class);
    if (secure == null) {
      throw new IllegalStateException( "The current execution context isn't relative to an incoming HTTP request");
    }
    
    return secure;
  }
  
  public boolean isWithinAnonymousUserSession() {
    User user = User.getCurrentRequester();
    return user != null && user.isAnonymous();
  }
  
  public boolean isWithinUserSession() {
    return User.getCurrentRequester() != null;
  }
  
  public List<FileItem> getFileItems() {
    if (fileItems == null) {
      fileItems = FileUploadUtil.parseRequest(this);
    }
    
    return fileItems;
  }
  
  public FileItem getFile(String name) {
    return FileUploadUtil.getFile(getFileItems(), name);
  }
  
  public FileItem getSingleFile() {
    return FileUploadUtil.getFile(getFileItems());
  }
  
  public String getUserLanguage() {
    String language = I18NHelper.DEFAULT_LANGUAGE;
    User user = User.getCurrentRequester();
    if (user != null) {
      language = user.getUserPreferences().getLanguage();
    }
    
    return language;
  }
  
  public Collection<UploadedFile> getUploadedFiles() {
    Collection<UploadedFile> uploadedFiles = new ArrayList<>();
    User user = User.getCurrentRequester();
    if (user != null) {
      uploadedFiles = FileUploadManager.getUploadedFiles(this, user);
    }
    
    return uploadedFiles;
  }
  
  public boolean getAttributeAsBoolean(String attributeName) {
    return RequestParameterDecoder.asBoolean(getAttribute(attributeName));
  }
  
  public Long getAttributeAsLong(String attributeName) {
    return RequestParameterDecoder.asLong(getAttribute(attributeName));
  }
  
  public String[] getParameterValues(String name) {
    String[] values = super.getParameterValues(name);
    if (values == null && isContentInMultipart() && isNotSOAPRequest() && isNotCmis()) {
      List<String> listOfValues = FileUploadUtil.getParameterValues(getFileItems(), name, getCharacterEncoding());
      values = listOfValues.toArray(new String[0]);
    }
    
    return values;
  }
  
  public Enumeration<String> getParameterNames() {
    Enumeration<String> names = super.getParameterNames();
    if (!names.hasMoreElements() && isContentInMultipart() && isNotSOAPRequest() && isNotCmis()) {
      List<FileItem> items = getFileItems();
      List<String> itemNames = new ArrayList<>(items.size());
      for (FileItem item : items) {
        if (item.isFormField()) {
          itemNames.add(item.getFieldName());
        }
        
      }
      
      names = Collections.enumeration(itemNames);
    }
    
    return names;
  }
  
  public Map<String, String[]> getParameterMap() {
    Map<String, String[]> map = super.getParameterMap();
    if (map.isEmpty() && isContentInMultipart() && isNotSOAPRequest() && isNotCmis()) {
      List<FileItem> items = getFileItems();
      map = new HashMap<>(items.size());
      for (FileItem item : items) {
        if (item.isFormField()) {
          String[] value;
          try {
            value = new String[]{item.getString(getCharacterEncoding())};
          }
           catch (UnsupportedEncodingException ex) {
            SilverLogger.getLogger(this).warn(ex);
            value = new String[]{item.getString()};
          }
          
          map.put(item.getFieldName(), value);
        }
        
      }
      
      map = Collections.unmodifiableMap(map);
    }
    
    return map;
  }
  
  public Map<String, String> getParameterSimpleMap() {
    return getParameterMap().entrySet() .stream() .collect(Collectors.toMap(Map.Entry::getKey, e -> stream(e.getValue()).findFirst().orElse(EMPTY)));
  }
  
  public void mergeSelectedItemsInto(Collection<String> selectedIds) {
    mergeSelectedItemsInto(selectedIds, "selectedIds", "unselectedIds");
  }
  
  public void mergeSelectedItemsInto(Collection<String> selectedIds, String selectedParamName, String unselectedParamName) {
    final String[] selected = getParameterMap().get(selectedParamName);
    final String[] unselected = getParameterMap().get(unselectedParamName);
    if (selected != null) {
      stream(selected).flatMap(i -> stream(i.split(","))).forEach(selectedIds::add);
    }
    
    if (unselected != null) {
      stream(unselected).flatMap(i -> stream(i.split(","))).forEach(selectedIds::remove);
    }
    
  }
  
  public String getParameter(String name) {
    String value = super.getParameter(name);
    if (value == null && isContentInMultipart() && isNotSOAPRequest() && isNotCmis()) {
      value = FileUploadUtil.getParameter(getFileItems(), name, null, getCharacterEncoding());
    }
    
    return value;
  }
  
  public boolean isParameterDefined(final String name) {
    return StringUtil.isDefined(super.getParameter(name));
  }
  
  public boolean isParameterNotNull(final String name) {
    return super.getParameter(name) != null;
  }
  
  public List<String> getParameterAsList(String parameterName) {
    String[] values = getParameterMap().get(parameterName);
    if (values == null) {
      values = new String[0];
    }
    
    if (values.length == 1) {
      return asList(split(values[0], ","));
    }
    
    return Arrays.stream(values).collect(Collectors.toList());
  }
  
  public RequestFile getParameterAsRequestFile(String parameterName) {
    RequestFile requestFile = null;
    FileItem fileItem = FileUploadUtil.getFile(getFileItems(), parameterName);
    if (fileItem != null) {
      requestFile = new RequestFile(fileItem);
    }
    
    return requestFile;
  }
  
  public boolean getParameterAsBoolean(String parameterName) {
    return RequestParameterDecoder.asBoolean(getParameter(parameterName));
  }
  
  public List<Boolean> getParameterAsBooleanList(String parameterName) {
    return getParameterAsList(parameterName).stream().map(RequestParameterDecoder::asBoolean) .collect(Collectors.toList());
  }
  
  public Long getParameterAsLong(String parameterName) {
    return RequestParameterDecoder.asLong(getParameter(parameterName));
  }
  
  public List<Long> getParameterAsLongList(String parameterName) {
    return getParameterAsList(parameterName).stream().map(RequestParameterDecoder::asLong) .collect(Collectors.toList());
  }
  
  public Integer getParameterAsInteger(String parameterName) {
    return RequestParameterDecoder.asInteger(getParameter(parameterName));
  }
  
  public List<Integer> getParameterAsIntegerList(String parameterName) {
    return getParameterAsList(parameterName).stream().map(RequestParameterDecoder::asInteger) .collect(Collectors.toList());
  }
  
  public Date getParameterAsDate(String dateParameterName) throws ParseException {
    return RequestParameterDecoder.asDate(getParameter(dateParameterName), null, getUserLanguage());
  }
  
  public List<Date> getParameterAsDateList(String dateParameterName) {
    return getParameterAsList(dateParameterName).stream().map(p -> {
      try {
        return RequestParameterDecoder.asDate(p, null, getUserLanguage());
      }
       catch (ParseException e) {
        throw new SilverpeasRuntimeException(e);
      }
      
    }
).collect(Collectors.toList());
  }
  
  public Date getParameterAsDate(String dateParameterName, String hourParameterName) throws ParseException {
    return RequestParameterDecoder.asDate(getParameter(dateParameterName), getParameter(hourParameterName), getUserLanguage());
  }
  
  public <E extends Enum<E>> E getParameterAsEnum(String enumValue, Class<E> enumClass) {
    return RequestParameterDecoder.asEnum(getParameter(enumValue), enumClass);
  }
  
  public <E extends Enum<E>> List<E> getParameterAsEnumList(String parameterName, Class<E> enumClass) {
    return getParameterAsList(parameterName).stream().map(p -> RequestParameterDecoder.asEnum(p, enumClass)) .collect(Collectors.toList());
  }
  
  public boolean isContentInMultipart() {
    return FileUploadUtil.isRequestMultipart(this);
  }
  
  public String getCharacterEncoding() {
    String encoding = super.getCharacterEncoding();
    if (StringUtil.isNotDefined(encoding)) {
      encoding = FileUploadUtil.DEFAULT_ENCODING;
    }
    
    return encoding;
  }
  
  private boolean isNotSOAPRequest() {
    return getHeader("SOAPAction") == null && !getContentType().contains("soap");
  }
  
  private boolean isNotCmis() {
    return !getRequestURI().contains("cmis");
  }
  
}


