package org.apache.ambari.server.state.alert;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.IntStream.range;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.apache.ambari.server.controller.jmx.JMXMetricHolder;
import org.apache.ambari.server.state.UriInfo;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.ListUtils;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
public class MetricSource extends Source {
  private UriInfo uri = null;
  private JmxInfo jmxInfo = null;
  private String gangliaInfo = null;
  public JmxInfo getJmxInfo() {
    return jmxInfo;
  }
  
  public String getGangliaInfo() {
    return gangliaInfo;
  }
  
  public UriInfo getUri() {
    return uri;
  }
  
  public int hashCode() {
    return Objects.hash(super.hashCode(), gangliaInfo, uri, jmxInfo);
  }
  
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    
    if (!super.equals(obj)) {
      return false;
    }
    
    if (getClass() != obj.getClass()) {
      return false;
    }
    
    MetricSource other = (MetricSource) obj;
    return Objects.equals(gangliaInfo, other.gangliaInfo) && Objects.equals(uri, other.uri) && Objects.equals(jmxInfo, other.jmxInfo);
  }
  
  @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE, setterVisibility = JsonAutoDetect.Visibility.NONE)
  public static class JmxInfo {
    private List<String> propertyList;
    private String value = "{0}";
    private String urlSuffix = "/jmx";
    public List<String> getPropertyList() {
      return propertyList;
    }
    
    public void setPropertyList(List<String> propertyList) {
      this.propertyList = propertyList;
    }
    
    public void setValue(String value) {
      this.value = value;
    }
    
    public Value getValue() {
      return new Value(value);
    }
    
    public boolean equals(Object object) {
      if (object instanceof JmxInfo) {
        JmxInfo other = (JmxInfo) object;
        if (propertyList == null) {
          return other.propertyList == null;
        }
         else {
          return other.propertyList != null && CollectionUtils.isEqualCollection(ListUtils.unmodifiableList(propertyList), ListUtils.unmodifiableList(other.propertyList));
        }
        
      }
      
      return false;
    }
    
    public int hashCode() {
      return Objects.hash(propertyList);
    }
    
    public String getUrlSuffix() {
      return urlSuffix;
    }
    
    public Optional<Number> eval(JMXMetricHolder jmxMetricHolder) {
      List<Object> metrics = jmxMetricHolder.findAll(propertyList);
      if (metrics.isEmpty()) {
        return Optional.empty();
      }
       else {
        Object value = getValue().eval(metrics);
        return value instanceof Number ? Optional.of((Number)value) : Optional.empty();
      }
      
    }
    
  }
  
  public static class Value {
    private final String value;
    public Value(String value) {
      this.value = value;
    }
    
    public Object eval(List<Object> metrics) {
      StandardEvaluationContext context = new StandardEvaluationContext();
      context.setVariables(range(0, metrics.size()).boxed().collect(toMap(i -> "var" + i, metrics::get)));
      return new SpelExpressionParser() .parseExpression(value.replaceAll("(\\{(\\d+)\\})", "#var$2")) .getValue(context);
    }
    
    public String toString() {
      return value;
    }
    
  }
  
}


