package org.apache.tika.parser.mp3;
import java.io.IOException;
import java.io.InputStream;
import org.apache.tika.exception.TikaException;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import static java.nio.charset.StandardCharsets.US_ASCII;
import static java.nio.charset.StandardCharsets.UTF_8;
public class LyricsHandler {
    boolean foundLyrics = false;
    String lyricsText = null;
    ID3v1Handler id3v1 = null;
    public LyricsHandler(InputStream stream, ContentHandler handler) throws IOException, SAXException, TikaException {
        this(getSuffix(stream, 10240+128));
    }
    
    protected LyricsHandler(byte[] tagData) throws IOException, SAXException, TikaException {
        if(tagData.length < 128) {
            return;
        }
        
        byte[] last128 = new byte[128];
        System.arraycopy(tagData, tagData.length-128, last128, 0, 128);
        id3v1 = new ID3v1Handler(last128);
        if(tagData.length < 137) {
            return;
        }
        
        int lookat = tagData.length - 9;
        if(id3v1.found) {
            lookat -= 128;
        }
        
        if(tagData[lookat+0] == 'L' && tagData[lookat+1] == 'Y' &&  tagData[lookat+2] == 'R' && tagData[lookat+3] == 'I' && tagData[lookat+4] == 'C' && tagData[lookat+5] == 'S' && tagData[lookat+6] == '2' && tagData[lookat+7] == '0' && tagData[lookat+8] == '0') {
            foundLyrics = true;
            int length = Integer.parseInt( new String(tagData, lookat-6, 6, UTF_8) );
            String lyrics = new String( tagData, lookat-length+5, length-11, US_ASCII );
            int pos = 0;
            while(pos < lyrics.length()-8) {
                String tagName = lyrics.substring(pos, pos+3);
                int tagLen = Integer.parseInt( lyrics.substring(pos+3, pos+8) );
                int startPos = pos + 8;
                int endPos = startPos + tagLen;
                if(tagName.equals("LYR")) {
                    lyricsText = lyrics.substring(startPos, endPos);
                }
                
                pos = endPos;
            }
            
        }
        
    }
    
    public boolean hasID3v1() {
        if(id3v1 == null || id3v1.found == false) {
            return false;
        }
        
        return true;
    }
    
    public boolean hasLyrics() {
        return lyricsText != null && lyricsText.length() > 0;
    }
    
    protected static byte[] getSuffix(InputStream stream, int length) throws IOException {
        byte[] buffer = new byte[2 * length];
        int bytesInBuffer = 0;
        int n = stream.read(buffer);
        while (n != -1) {
            bytesInBuffer += n;
            if (bytesInBuffer == buffer.length) {
                System.arraycopy(buffer, bytesInBuffer - length, buffer, 0, length);
                bytesInBuffer = length;
            }
            
            n = stream.read(buffer, bytesInBuffer, buffer.length - bytesInBuffer);
        }
        
        if (bytesInBuffer < length) {
            length = bytesInBuffer;
        }
        
        byte[] result = new byte[length];
        System.arraycopy(buffer, bytesInBuffer - length, result, 0, length);
        return result;
    }
    
}


