package io.jenkins.plugins.bitbucketpushandpullrequest.action;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import hudson.model.InvisibleAction;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.BitBucketPPRPayload;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.server.BitBucketPPRServerChange;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.server.BitBucketPPRServerClone;
public class BitBucketPPRServerRepositoryAction extends InvisibleAction implements BitBucketPPRAction {
  private static final Logger logger = Logger.getLogger(BitBucketPPRAction.class.getName());
  private final @Nonnull BitBucketPPRPayload payload;
  private List<String> scmUrls = new ArrayList<>(2);
  private String targetBranchName = null;
  private String targetBranchRefId = null;
  private String type;
  public BitBucketPPRServerRepositoryAction(BitBucketPPRPayload payload) {
    this.payload = payload;
    List<BitBucketPPRServerClone> clones = payload.getServerRepository().getLinks().getCloneProperty();
    for (BitBucketPPRServerClone clone : clones) {
      if (clone.getName().equalsIgnoreCase("http") || clone.getName().equalsIgnoreCase("https") || clone.getName().equalsIgnoreCase("ssh")) {
        this.scmUrls.add(clone.getHref());
      }
      
    }
    
    for (BitBucketPPRServerChange change : payload.getServerChanges()) {
      if (change.getRefId() != null) {
        this.targetBranchName = change.getRef().getDisplayId();
        this.targetBranchRefId = change.getRefId();
        this.type = change.getRef().getType();
        break;
      }
      
    }
    
    logger.log(Level.INFO, () -> "Received commit hook notification from server for destination branch: " + this.targetBranchName);
    logger.log(Level.INFO, () -> "Received commit hook type from server: " + this.type);
  }
  
  public String getTargetBranch() {
    return targetBranchName;
  }
  
  public String getTargetBranchRefId() {
    return targetBranchRefId;
  }
  
  public BitBucketPPRPayload getPayload() {
    return payload;
  }
  
  public String getScm() {
    return payload.getServerRepository().getScmId();
  }
  
  public String getUser() {
    return payload.getServerActor().getName();
  }
  
  public String getType() {
    return type;
  }
  
  public String getRepositoryName() {
    return payload.getServerRepository().getName();
  }
  
  public List<String> getScmUrls() {
    return scmUrls;
  }
  
  public String getPullRequestId() {
    return null;
  }
  
  public String getRepositoryId() {
    return payload.getServerRepository().getId();
  }
  
  public String getRepositoryUrl() {
    return payload.getServerRepository().getLinks().getSelfProperty().get(0).getHref();
  }
  
  public String getProjectUrl() {
    return payload.getServerRepository().getProject().getLinks().getSelfProperty().get(0).getHref();
  }
  
  public String toString() {
    return "BitBucketPPRServerRepositoryAction";
  }
  
  public String getLatestCommit() {
    for (BitBucketPPRServerChange change : payload.getServerChanges()) {
      if (change.getRefId() != null) {
        return change.getToHash();
      }
      
    }
    
    return null;
  }
  
  public List<String> getCommitLinks() {
    String baseUrl = getBaseUrl(getProjectUrl());
    if (baseUrl == null) {
      logger.log(Level.WARNING, "Base url is empty.");
      return new ArrayList<String>();
    }
    
    List<BitBucketPPRServerChange> changes = payload.getServerChanges();
    List<String> links = new ArrayList<>();
    for (BitBucketPPRServerChange change : changes) {
      links.add(baseUrl + "/rest/build-status/1.0/commits/" + change.getToHash());
    }
    
    return links;
  }
  
  private String getBaseUrl(String projectSelfUrl) {
    String baseUrl = null;
    try {
      URL url = new URL(projectSelfUrl);
      baseUrl = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort();
    }
     catch (MalformedURLException e) {
      logger.log(Level.WARNING, "Cannot extract base url", e);
    }
    
    return baseUrl;
  }
  
}


