package io.jenkins.plugins.bitbucketpushandpullrequest.action;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import hudson.model.InvisibleAction;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.BitBucketPPRPayload;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.cloud.BitBucketPPRChange;
public class BitBucketPPRRepositoryAction extends InvisibleAction implements BitBucketPPRAction {
  private static final Logger logger = Logger.getLogger(BitBucketPPRAction.class.getName());
  private final @Nonnull BitBucketPPRPayload payload;
  private List<String> scmUrls = new ArrayList<>(2);
  private String targetBranchName;
  private String type;
  private String repositoryUuid;
  public BitBucketPPRRepositoryAction(@Nonnull BitBucketPPRPayload payload) {
    this.payload = payload;
    scmUrls.add(payload.getRepository().getLinks().getHtml().getHref());
    for (BitBucketPPRChange change : payload.getPush().getChanges()) {
      if (change.getNewChange() != null) {
        this.targetBranchName = change.getNewChange().getName();
        this.type = change.getNewChange().getType();
        this.repositoryUuid = payload.getRepository().getUuid();
        break;
      }
      
    }
    
    logger.log(Level.INFO, () -> "Received commit hook notification for branch: " + this.targetBranchName);
    logger.log(Level.INFO, () -> "Received commit hook type: " + this.type);
  }
  
  public String getTargetBranch() {
    return targetBranchName;
  }
  
  public String getRepositoryUrl() {
    return payload.getRepository().getLinks().getHtml().getHref();
  }
  
  public BitBucketPPRPayload getPayload() {
    return payload;
  }
  
  public String getScm() {
    return payload.getRepository().getScm() != null ? payload.getRepository().getScm() : "git";
  }
  
  public String getUser() {
    return payload.getActor().getNickname();
  }
  
  public String getType() {
    return type;
  }
  
  public String getRepositoryName() {
    return payload.getRepository().getName();
  }
  
  public List<String> getScmUrls() {
    return scmUrls;
  }
  
  public String getRepositoryId() {
    return repositoryUuid;
  }
  
  public String getLatestCommit() {
    for (BitBucketPPRChange change : payload.getPush().getChanges()) {
      if (change.getNewChange() != null) {
        return change.getNewChange().getTarget().getHash();
      }
      
    }
    
    return null;
  }
  
  public List<String> getCommitLinks() {
    List<BitBucketPPRChange> changes = payload.getPush().getChanges();
    List<String> links = new ArrayList<>();
    for (BitBucketPPRChange change : changes) {
      links.add(change.getNewChange().getTarget().getLinks().getSelf().getHref());
    }
    
    return links;
  }
  
  public String toString() {
    return "BitBucketPPRRepositoryAction";
  }
  
}


