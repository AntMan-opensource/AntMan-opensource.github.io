package io.jenkins.plugins.bitbucketpushandpullrequest.action;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import hudson.model.InvisibleAction;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.BitBucketPPRPayload;
import io.jenkins.plugins.bitbucketpushandpullrequest.model.server.BitBucketPPRServerClone;
public class BitBucketPPRPullRequestServerAction extends InvisibleAction implements BitBucketPPRAction {
  private static final Logger logger = Logger.getLogger(BitBucketPPRPullRequestServerAction.class.getName());
  private final @Nonnull BitBucketPPRPayload payload;
  private List<String> scmUrls = new ArrayList<>(2);
  private String repositoryUuid;
  public BitBucketPPRPullRequestServerAction(@Nonnull BitBucketPPRPayload payload) {
    this.payload = payload;
    List<BitBucketPPRServerClone> clones = payload.getServerPullRequest().getToRef().getRepository().getLinks() .getCloneProperty();
    for (BitBucketPPRServerClone clone : clones) {
      if (clone.getName().equalsIgnoreCase("http") || clone.getName().equalsIgnoreCase("https") || clone.getName().equalsIgnoreCase("ssh")) {
        this.scmUrls.add(clone.getHref());
      }
      
    }
    
    logger.fine("BitBucketPPRPullRequestServerAction was called.");
  }
  
  public String getSourceBranch() {
    return payload.getServerPullRequest().getFromRef().getDisplayId();
  }
  
  public String getLatestCommitFromRef() {
    return payload.getServerPullRequest().getFromRef().getLatestCommit();
  }
  
  public String getLatestCommitToRef() {
    return payload.getServerPullRequest().getToRef().getLatestCommit();
  }
  
  public String getTargetBranch() {
    return payload.getServerPullRequest().getToRef().getDisplayId();
  }
  
  public String getTargetBranchRefId() {
    return payload.getServerPullRequest().getToRef().getId();
  }
  
  public String getPullRequestUrl() {
    return payload.getServerPullRequest().getLinks().getSelfProperty().get(0).getHref();
  }
  
  public String getScm() {
    return payload.getServerPullRequest().getFromRef().getRepository().getScmId();
  }
  
  public String getUser() {
    return payload.getServerActor().getName();
  }
  
  public String getTitle() {
    return payload.getServerPullRequest().getTitle();
  }
  
  public BitBucketPPRPayload getPayload() {
    return payload;
  }
  
  public String getRepositoryName() {
    return payload.getServerRepository().getName();
  }
  
  public String getServerComment() {
    if (payload.getServerComment() == null) {
      return "";
    }
    
    return payload.getServerComment().getText();
  }
  
  public List<String> getScmUrls() {
    return scmUrls;
  }
  
  public String getPullRequestId() {
    return Long.toString(payload.getServerPullRequest().getId());
  }
  
  public String getRepositoryId() {
    return repositoryUuid;
  }
  
  public String getLinkApprove() {
    String projectKey = payload.getServerPullRequest().getFromRef().getRepository().getProject().getKey();
    String repoSlug = payload.getServerPullRequest().getFromRef().getRepository().getSlug();
    Long pullrequestId = payload.getServerPullRequest().getId();
    String projectSelfUrl = payload.getServerPullRequest().getFromRef().getRepository().getProject().getLinks() .getSelfProperty().get(0).getHref();
    String baseUrl = getBaseUrl(projectSelfUrl);
    if (baseUrl == null) {
      logger.log(Level.WARNING, "Base url is empty.");
      return "";
    }
    
    return baseUrl + "/rest/api/1.0/projects/" + projectKey.trim() + "/repos/" + repoSlug.trim() + "/pull-requests/" + Long.toString(pullrequestId).trim() + "/approve";
  }
  
  public String getLinkDecline() {
    String projectKey = payload.getServerPullRequest().getFromRef().getRepository().getProject().getKey();
    String repoSlug = payload.getServerPullRequest().getFromRef().getRepository().getSlug();
    Long pullrequestId = payload.getServerPullRequest().getId();
    String projectSelfUrl = payload.getServerPullRequest().getFromRef().getRepository().getProject().getLinks() .getSelfProperty().get(0).getHref();
    String baseUrl = getBaseUrl(projectSelfUrl);
    if (baseUrl == null) {
      logger.log(Level.WARNING, "Base url is empty.");
      return "";
    }
    
    return baseUrl + "/rest/api/1.0/projects/" + projectKey.trim() + "/repos/" + repoSlug.trim() + "/pull-requests/" + Long.toString(pullrequestId).trim() + "/decline";
  }
  
  public String getLatestCommit() {
    return payload.getServerPullRequest().getFromRef().getLatestCommit();
  }
  
  public String getCommitLink() {
    String projectSelfUrl = payload.getServerPullRequest().getFromRef().getRepository().getProject().getLinks() .getSelfProperty().get(0).getHref();
    String commitId = payload.getServerPullRequest().getFromRef().getLatestCommit();
    String baseUrl = getBaseUrl(projectSelfUrl);
    if (baseUrl == null) {
      logger.log(Level.WARNING, "Base url is empty.");
      return "";
    }
    
    String result = baseUrl + "/rest/build-status/1.0/commits/" + commitId;
    return result;
  }
  
  public String toString() {
    return "BitBucketPPRPullRequestServerAction";
  }
  
  private String getBaseUrl(String projectSelfUrl) {
    String baseUrl = null;
    try {
      URL url = new URL(projectSelfUrl);
      baseUrl = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort();
    }
     catch (MalformedURLException e) {
      logger.log(Level.WARNING, "Cannot extract base url", e);
    }
    
    return baseUrl;
  }
  
}


