package com.xpn.xwiki.api;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.suigeneris.jrcs.diff.DifferentiationFailedException;
import org.suigeneris.jrcs.diff.delta.Delta;
import org.suigeneris.jrcs.rcs.Version;
import org.xwiki.component.util.DefaultParameterizedType;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContext;
import org.xwiki.display.internal.DocumentDisplayerParameters;
import org.xwiki.model.document.DocumentAuthors;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.ObjectReference;
import org.xwiki.model.reference.PageReference;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.parser.ParseException;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.security.authorization.Right;
import org.xwiki.stability.Unstable;
import org.xwiki.user.CurrentUserReference;
import org.xwiki.user.UserReference;
import org.xwiki.user.UserReferenceResolver;
import com.xpn.xwiki.XWiki;
import com.xpn.xwiki.XWikiConstant;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.criteria.impl.Period;
import com.xpn.xwiki.criteria.impl.PeriodFactory;
import com.xpn.xwiki.criteria.impl.Range;
import com.xpn.xwiki.criteria.impl.RangeFactory;
import com.xpn.xwiki.criteria.impl.RevisionCriteria;
import com.xpn.xwiki.criteria.impl.Scope;
import com.xpn.xwiki.criteria.impl.ScopeFactory;
import com.xpn.xwiki.doc.DocumentRevisionProvider;
import com.xpn.xwiki.doc.MetaDataDiff;
import com.xpn.xwiki.doc.XWikiAttachment;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.doc.XWikiDocumentArchive;
import com.xpn.xwiki.doc.XWikiLink;
import com.xpn.xwiki.doc.XWikiLock;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.BaseProperty;
import com.xpn.xwiki.objects.ObjectDiff;
import com.xpn.xwiki.objects.classes.BaseClass;
import com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;
import com.xpn.xwiki.stats.api.XWikiStatsService;
import com.xpn.xwiki.stats.impl.DocumentStats;
import com.xpn.xwiki.stats.impl.RefererStats;
import com.xpn.xwiki.util.TOCGenerator;
import com.xpn.xwiki.util.Util;
import com.xpn.xwiki.web.Utils;
public class Document extends Api {
    private static final Logger LOGGER = LoggerFactory.getLogger(Document.class);
    protected XWikiDocument initialDoc;
    protected XWikiDocument doc;
    protected Object currentObj;
    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;
    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;
    private EntityReferenceSerializer<String> localEntityReferenceSerializer;
    private EntityReferenceSerializer<String> compactWikiEntityReferenceSerializer;
    private DocumentRevisionProvider documentRevisionProvider;
    private ConfigurationSource configuration;
    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver() {
        if (this.currentMixedDocumentReferenceResolver == null) {
            this.currentMixedDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, "currentmixed");
        }
        
        return this.currentMixedDocumentReferenceResolver;
    }
    
    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer() {
        if (this.defaultEntityReferenceSerializer == null) {
            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);
        }
        
        return this.defaultEntityReferenceSerializer;
    }
    
    private EntityReferenceSerializer<String> getLocalEntityReferenceSerializer() {
        if (this.localEntityReferenceSerializer == null) {
            this.localEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "local");
        }
        
        return this.localEntityReferenceSerializer;
    }
    
    private EntityReferenceSerializer<String> getCompactWikiEntityReferenceSerializer() {
        if (this.compactWikiEntityReferenceSerializer == null) {
            this.compactWikiEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "compactwiki");
        }
        
        return this.compactWikiEntityReferenceSerializer;
    }
    
    private DocumentRevisionProvider getDocumentRevisionProvider() {
        if (this.documentRevisionProvider == null) {
            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);
        }
        
        return this.documentRevisionProvider;
    }
    
    private ConfigurationSource getConfiguration() {
        if (this.configuration == null) {
            this.configuration = Utils.getComponent(ConfigurationSource.class);
        }
        
        return this.configuration;
    }
    
    public Document(XWikiDocument doc, XWikiContext context) {
        super(context);
        this.initialDoc = doc;
        this.doc = this.initialDoc;
    }
    
    public XWikiDocument getDocument() {
        if (hasProgrammingRights()) {
            return this.doc;
        }
         else {
            return null;
        }
        
    }
    
    protected XWikiDocument getDoc() {
        if (this.initialDoc == this.doc) {
            this.doc = this.initialDoc.clone();
        }
        
        return this.doc;
    }
    
    public long getId() {
        return this.doc.getId();
    }
    
    public DocumentReference getDocumentReference() {
        return this.doc.getDocumentReference();
    }
    
    public DocumentReference getDocumentReferenceWithLocale() {
        return this.doc.getDocumentReferenceWithLocale();
    }
    
    public PageReference getPageReference() {
        return this.doc.getPageReference();
    }
    
    public PageReference getPageReferenceWithLocale() {
        return this.doc.getPageReferenceWithLocale();
    }
    
    public String getName() {
    return this.doc.getDocumentReference().getName();
}

    public String getSpace() {
        return this.doc.getSpace();
    }
    
    public String getWiki() {
        return this.doc.getDocumentReference().getWikiReference().getName();
    }
    
    public String getFullName() {
        return getLocalEntityReferenceSerializer().serialize(this.doc.getDocumentReference());
    }
    
    public String getPrefixedFullName() {
        return getDefaultEntityReferenceSerializer().serialize(this.doc.getDocumentReference());
    }
    
    public Version getRCSVersion() {
        return this.doc.getRCSVersion();
    }
    
    public String getVersion() {
        return this.doc.getVersion();
    }
    
    public String getPreviousVersion() {
        return this.doc.getPreviousVersion();
    }
    
    public String getTitle() {
        return this.doc.getTitle();
    }
    
    public String getDisplayTitle() {
        return this.doc.getRenderedTitle(getXWikiContext());
    }
    
    public String getPlainTitle() {
        return this.doc.getRenderedTitle(Syntax.PLAIN_1_0, getXWikiContext());
    }
    
    public String getRenderedTitle(String syntaxId) throws XWikiException {
        try {
            return this.doc.getRenderedTitle(Syntax.valueOf(syntaxId), getXWikiContext());
        }
         catch (ParseException e) {
            LOGGER.error("Failed to parse provided syntax identifier [" + syntaxId + "]", e);
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to parse syntax identifier [" + syntaxId + "]", e);
        }
         catch (Exception e) {
            LOGGER.error("Failed to render document [" + getPrefixedFullName() + "] title content", e);
            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN, "Failed to render document [" + getPrefixedFullName() + "] content title", e);
        }
        
    }
    
    public String getFormat() {
        return this.doc.getFormat();
    }
    
    public String getAuthor() {
        return this.doc.getAuthor();
    }
    
    public DocumentReference getAuthorReference() {
        return this.doc.getAuthorReference();
    }
    
    public String getContentAuthor() {
        return this.doc.getContentAuthor();
    }
    
    public DocumentReference getContentAuthorReference() {
        return this.doc.getContentAuthorReference();
    }
    
    public Date getDate() {
        return this.doc.getDate();
    }
    
    public Date getContentUpdateDate() {
        return this.doc.getContentUpdateDate();
    }
    
    public Date getCreationDate() {
        return this.doc.getCreationDate();
    }
    
    public String getParent() {
        return this.doc.getParent();
    }
    
    public DocumentReference getParentReference() {
        return this.doc.getParentReference();
    }
    
    public String getCreator() {
        return this.doc.getCreator();
    }
    
    public DocumentReference getCreatorReference() {
        return this.doc.getCreatorReference();
    }
    
    public String getContent() {
        return this.doc.getContent();
    }
    
    public XDOM getXDOM() {
        return this.doc.getXDOM();
    }
    
    public Syntax getSyntax() {
        return this.doc.getSyntax();
    }
    
    public String getSyntaxId() {
        return this.doc.getSyntax().toIdString();
    }
    
    public String getLanguage() {
        return this.doc.getLanguage();
    }
    
    public Locale getLocale() {
        return this.doc.getLocale();
    }
    
    public String getTemplate() {
        String templateReferenceAsString = "";
        DocumentReference templateDocumentReference = this.doc.getTemplateDocumentReference();
        if (templateDocumentReference != null) {
            templateReferenceAsString = getLocalEntityReferenceSerializer().serialize(templateDocumentReference);
        }
        
        return templateReferenceAsString;
    }
    
    public String getRealLanguage() throws XWikiException {
        return this.doc.getRealLanguage(getXWikiContext());
    }
    
    public Locale getRealLocale() {
        return this.doc.getRealLocale();
    }
    
    public String getDefaultLanguage() {
        return this.doc.getDefaultLanguage();
    }
    
    public Locale getDefaultLocale() {
        return this.doc.getDefaultLocale();
    }
    
    public void setDefaultLocale(Locale defaultLocale) {
        this.doc.setDefaultLocale(defaultLocale);
    }
    
    public String getDefaultTemplate() {
        return this.doc.getDefaultTemplate();
    }
    
    public String getComment() {
        return this.doc.getComment();
    }
    
    public boolean isMinorEdit() {
        return this.doc.isMinorEdit();
    }
    
    public List<Locale> getTranslationLocales() throws XWikiException {
        return this.doc.getTranslationLocales(getXWikiContext());
    }
    
    public String getTranslatedContent() throws XWikiException {
        return this.doc.getTranslatedContent(getXWikiContext());
    }
    
    public String getTranslatedContent(String locale) throws XWikiException {
        return this.doc.getTranslatedContent(locale, getXWikiContext());
    }
    
    public Document getTranslatedDocument(String locale) throws XWikiException {
        return this.doc.getTranslatedDocument(locale, getXWikiContext()).newDocument(getXWikiContext());
    }
    
    public Document getTranslatedDocument() throws XWikiException {
        return this.doc.getTranslatedDocument(getXWikiContext()).newDocument(getXWikiContext());
    }
    
    public String displayDocument(Syntax targetSyntax) throws XWikiException {
        return this.doc.displayDocument(targetSyntax, getXWikiContext());
    }
    
    public String displayDocument(Syntax targetSyntax, boolean restricted) throws XWikiException {
        return this.doc.displayDocument(targetSyntax, restricted, getXWikiContext());
    }
    
    public String displayDocument() throws XWikiException {
        return this.doc.displayDocument(getXWikiContext());
    }
    
    public String displayDocument(boolean restricted) throws XWikiException {
        return this.doc.displayDocument(restricted, getXWikiContext());
    }
    
    public String getRenderedContent() throws XWikiException {
        return this.doc.getRenderedContent(getXWikiContext());
    }
    
    public String getRenderedContent(boolean transformationContextIsolated) throws XWikiException {
        return this.doc.getRenderedContent(transformationContextIsolated, getXWikiContext());
    }
    
    public String getRenderedContent(String text) throws XWikiException {
        return getRenderedContent(text, Syntax.XWIKI_1_0.toIdString());
    }
    
    public String getRenderedContent(String text, String syntaxId) throws XWikiException {
        return getRenderedContent(text, syntaxId, false);
    }
    
    public String getRenderedContentRestricted(String text, String syntaxId) throws XWikiException {
        return getRenderedContent(text, syntaxId, true);
    }
    
    private String getRenderedContent(String text, String syntaxId, boolean restricted) throws XWikiException {
        return this.doc.getRenderedContent(text, syntaxId, restricted, getCallerDocument(getXWikiContext()), getXWikiContext());
    }
    
    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId) throws XWikiException {
        return this.doc.getRenderedContent(text, sourceSyntaxId, targetSyntaxId, false, getCallerDocument(getXWikiContext()), getXWikiContext());
    }
    
    private XWikiDocument getCallerDocument(XWikiContext xcontext) {
        XWikiDocument sdoc = (XWikiDocument) xcontext.get("sdoc");
        if (sdoc == null) {
            sdoc = xcontext.getDoc();
        }
        
        return sdoc;
    }
    
    public String getRenderedContent(Syntax targetSyntax) throws XWikiException {
        return this.doc.getRenderedContent(targetSyntax, getXWikiContext());
    }
    
    public String getEscapedContent() throws XWikiException {
        return this.doc.getEscapedContent(getXWikiContext());
    }
    
    public String getArchive() throws XWikiException {
        return this.doc.getDocumentArchive(getXWikiContext()).getArchive(getXWikiContext());
    }
    
    public XWikiDocumentArchive getDocumentArchive() throws XWikiException {
        if (hasProgrammingRights()) {
            return this.doc.getDocumentArchive(getXWikiContext());
        }
        
        return null;
    }
    
    public boolean isNew() {
        return this.doc.isNew();
    }
    
    public String getAttachmentURL(String filename) {
        return this.doc.getAttachmentURL(filename, getXWikiContext());
    }
    
    public String getAttachmentURL(String filename, String action) {
        return this.doc.getAttachmentURL(filename, action, getXWikiContext());
    }
    
    public String getAttachmentURL(String filename, String action, String queryString) {
        return this.doc.getAttachmentURL(filename, action, queryString, getXWikiContext());
    }
    
    public String getAttachmentRevisionURL(String filename, String version) {
        return this.doc.getAttachmentRevisionURL(filename, version, getXWikiContext());
    }
    
    public String getAttachmentRevisionURL(String filename, String version, String queryString) {
        return this.doc.getAttachmentRevisionURL(filename, version, queryString, getXWikiContext());
    }
    
    public String getURL() {
        return this.doc.getURL("view", getXWikiContext());
    }
    
    public String getURL(String action) {
        return this.doc.getURL(action, getXWikiContext());
    }
    
    public String getURL(String action, String queryString) {
        return this.doc.getURL(action, queryString, getXWikiContext());
    }
    
    public String getExternalURL() {
        return this.doc.getExternalURL("view", getXWikiContext());
    }
    
    public String getExternalURL(String action) {
        return this.doc.getExternalURL(action, getXWikiContext());
    }
    
    public String getExternalURL(String action, String queryString) {
        return this.doc.getExternalURL(action, queryString, getXWikiContext());
    }
    
    public String getParentURL() throws XWikiException {
        return this.doc.getParentURL(getXWikiContext());
    }
    
    public Class getxWikiClass() {
        BaseClass bclass = this.getDoc().getXClass();
        if (bclass == null) {
            return null;
        }
         else {
            return new Class(bclass, getXWikiContext());
        }
        
    }
    
    public Class[] getxWikiClasses() {
        List<BaseClass> list = this.getDoc().getXClasses(getXWikiContext());
        if (list == null) {
            return null;
        }
        
        Class[] result = new Class[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = new Class(list.get(i), getXWikiContext());
        }
        
        return result;
    }
    
    public int createNewObject(String classname) throws XWikiException {
        int index = getDoc().createNewObject(classname, getXWikiContext());
        updateAuthor();
        return index;
    }
    
    public Object newObject(String classname) throws XWikiException {
        int nb = createNewObject(classname);
        return getObject(classname, nb);
    }
    
    public boolean isFromCache() {
        return this.doc.isFromCache();
    }
    
    public int getObjectNumbers(String classname) {
        return this.doc.getObjectNumbers(classname);
    }
    
    public Map<String, Vector<Object>> getxWikiObjects() {
        Map<DocumentReference, List<BaseObject>> map = this.getDoc().getXObjects();
        Map<String, Vector<Object>> resultmap = new HashMap<String, Vector<Object>>();
        for (Map.Entry<DocumentReference, List<BaseObject>> entry : map.entrySet()) {
            List<BaseObject> objects = entry.getValue();
            if (objects != null) {
                resultmap.put(getLocalEntityReferenceSerializer().serialize(entry.getKey()), getXObjects(objects));
            }
            
        }
        
        return resultmap;
    }
    
    protected Vector<Object> getXObjects(List<BaseObject> objects) {
        if (objects == null) {
            return new Vector<Object>(0);
        }
        
        Vector<Object> result = new Vector<Object>(objects.size());
        for (BaseObject bobj : objects) {
            if (bobj != null) {
                result.add(newObjectApi(bobj, getXWikiContext()));
            }
            
        }
        
        return result;
    }
    
    public Vector<Object> getObjects(String className) {
        List<BaseObject> objects = this.getDoc().getXObjects(this.doc.resolveClassReference(className));
        return getXObjects(objects);
    }
    
    public Object getFirstObject(String fieldname) {
        try {
            BaseObject obj = this.getDoc().getFirstObject(fieldname, getXWikiContext());
            if (obj == null) {
                return null;
            }
             else {
                return newObjectApi(obj, getXWikiContext());
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public Object getObject(String classname, String key, String value, boolean failover) {
        try {
            BaseObject obj = this.getDoc().getObject(classname, key, value, failover);
            if (obj == null) {
                return null;
            }
             else {
                return newObjectApi(obj, getXWikiContext());
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public Vector<Object> getObjects(String classname, String key, String value) {
        Vector<Object> result = new Vector<Object>();
        if (StringUtils.isBlank(key) || value == null) {
            return getObjects(classname);
        }
        
        try {
            Vector<BaseObject> allObjects = this.getDoc().getObjects(classname);
            if (allObjects == null || allObjects.size() == 0) {
                return result;
            }
             else {
                for (BaseObject obj : allObjects) {
                    if (obj != null) {
                        BaseProperty prop = (BaseProperty) obj.get(key);
                        if (prop == null || prop.getValue() == null) {
                            continue;
                        }
                        
                        if (value.equals(prop.getValue().toString())) {
                            result.add(newObjectApi(obj, getXWikiContext()));
                        }
                        
                    }
                    
                }
                
            }
            
        }
         catch (Exception e) {
        }
        
        return result;
    }
    
    public Object getObject(String classname, String key, String value) {
        try {
            BaseObject obj = this.getDoc().getObject(classname, key, value);
            if (obj == null) {
                return null;
            }
             else {
                return newObjectApi(obj, getXWikiContext());
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public Object getObject(String classname) {
        return getObject(classname, false);
    }
    
    public Object getObject(String classname, boolean create) {
        try {
            BaseObject obj = getDoc().getObject(classname, create, getXWikiContext());
            if (obj == null) {
                return null;
            }
             else {
                return newObjectApi(obj, getXWikiContext());
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public Object getObject(String classname, int nb) {
        try {
            BaseObject obj = this.getDoc().getObject(classname, nb);
            if (obj == null) {
                return null;
            }
             else {
                return newObjectApi(obj, getXWikiContext());
            }
            
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public Object getObject(ObjectReference objectReference) {
        try {
            BaseObject obj = this.getDoc().getXObject(objectReference);
            return obj == null ? null : newObjectApi(obj, getXWikiContext());
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public Object getObject(ObjectReference objectReference, boolean create) {
        try {
            BaseObject obj = this.getDoc().getXObject(objectReference, create, getXWikiContext());
            return obj == null ? null : newObjectApi(obj, getXWikiContext());
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    private Object newObjectApi(BaseObject obj, XWikiContext context) {
        return obj.newObjectApi(obj, context);
    }
    
    public String getXMLContent() throws XWikiException {
        String xml = this.doc.getXMLContent(getXWikiContext());
        return getXWikiContext().getUtil().substitute("s/<email>.*?<\\/email>/<email>********<\\/email>/goi", getXWikiContext().getUtil().substitute("s/<password>.*?<\\/password>/<password>********<\\/password>/goi", xml));
    }
    
    public String toXML() throws XWikiException {
        if (hasProgrammingRights()) {
            return this.doc.toXML(getXWikiContext());
        }
         else {
            return "";
        }
        
    }
    
    public org.dom4j.Document toXMLDocument() throws XWikiException {
        if (hasProgrammingRights()) {
            return this.doc.toXMLDocument(getXWikiContext());
        }
         else {
            return null;
        }
        
    }
    
    public Version[] getRevisions() throws XWikiException {
        return this.doc.getRevisions(getXWikiContext());
    }
    
    public String[] getRecentRevisions() throws XWikiException {
        return this.doc.getRecentRevisions(5, getXWikiContext());
    }
    
    public String[] getRecentRevisions(int nb) throws XWikiException {
        return this.doc.getRecentRevisions(nb, getXWikiContext());
    }
    
    public List<String> getRevisions(RevisionCriteria criteria) throws XWikiException {
        return this.doc.getRevisions(criteria, this.context);
    }
    
    public RevisionInfo getRevisionInfo(String version) throws XWikiException {
        return new RevisionInfo(this.doc.getRevisionInfo(version, getXWikiContext()), getXWikiContext());
    }
    
    public List<Attachment> getAttachmentList() {
        List<Attachment> apis = new ArrayList<Attachment>();
        for (XWikiAttachment attachment : this.getDoc().getAttachmentList()) {
            apis.add(new Attachment(this, attachment, getXWikiContext()));
        }
        
        return apis;
    }
    
    public Vector<Object> getComments() {
        return getComments(true);
    }
    
    public Vector<Object> getComments(boolean asc) {
        return getXObjects(this.getDoc().getComments(asc));
    }
    
    public void use(Object object) {
        this.currentObj = object;
    }
    
    public void use(String className) {
        this.currentObj = getObject(className);
    }
    
    public void use(String className, int nb) {
        this.currentObj = getObject(className, nb);
    }
    
    public String getActiveClass() {
        if (this.currentObj == null) {
            return null;
        }
         else {
            return this.currentObj.getName();
        }
        
    }
    
    public String displayPrettyName(String fieldname) {
        if (this.currentObj == null) {
            return this.doc.displayPrettyName(fieldname, getXWikiContext());
        }
         else {
            return this.doc.displayPrettyName(fieldname, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
    }
    
    public String displayPrettyName(String fieldname, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.displayPrettyName(fieldname, obj.getBaseObject(), getXWikiContext());
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory) {
        if (this.currentObj == null) {
            return this.doc.displayPrettyName(fieldname, showMandatory, getXWikiContext());
        }
         else {
            return this.doc.displayPrettyName(fieldname, showMandatory, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.displayPrettyName(fieldname, showMandatory, obj.getBaseObject(), getXWikiContext());
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before) {
        if (this.currentObj == null) {
            return this.doc.displayPrettyName(fieldname, showMandatory, before, getXWikiContext());
        }
         else {
            return this.doc.displayPrettyName(fieldname, showMandatory, before, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
    }
    
    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.displayPrettyName(fieldname, showMandatory, before, obj.getBaseObject(), getXWikiContext());
    }
    
    public String displayTooltip(String fieldname) {
        if (this.currentObj == null) {
            return this.doc.displayTooltip(fieldname, getXWikiContext());
        }
         else {
            return this.doc.displayTooltip(fieldname, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
    }
    
    public String displayTooltip(String fieldname, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.displayTooltip(fieldname, obj.getBaseObject(), getXWikiContext());
    }
    
    public String display(String fieldname) {
        if (this.currentObj == null) {
            return this.doc.display(fieldname, getXWikiContext());
        }
         else {
            return this.doc.display(fieldname, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
    }
    
    public String display(String fieldname, String mode) {
        if (this.currentObj == null) {
            return this.doc.display(fieldname, mode, getXWikiContext());
        }
         else {
            return this.doc.display(fieldname, mode, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
    }
    
    public String display(String fieldname, String mode, String prefix) {
        if (this.currentObj == null) {
            return this.doc.display(fieldname, mode, prefix, getXWikiContext());
        }
         else {
            return this.doc.display(fieldname, mode, prefix, this.currentObj.getBaseObject(), getSyntaxId(), getXWikiContext());
        }
        
    }
    
    public String display(String fieldname, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.display(fieldname, obj.getBaseObject(), getXWikiContext());
    }
    
    public String display(String fieldname, String type, Object obj, String wrappingSyntaxId) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.display(fieldname, type, obj.getBaseObject(), wrappingSyntaxId, getXWikiContext());
    }
    
    public String display(String fieldname, String mode, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.display(fieldname, mode, obj.getBaseObject(), getXWikiContext());
    }
    
    public String display(String fieldname, String mode, String prefix, Object obj) {
        if (obj == null) {
            return "";
        }
        
        return this.doc.display(fieldname, mode, prefix, obj.getBaseObject(), getSyntaxId(), getXWikiContext());
    }
    
    public String displayForm(String className, String header, String format) {
        return this.doc.displayForm(className, header, format, getXWikiContext());
    }
    
    public String displayForm(String className, String header, String format, boolean linebreak) {
        return this.doc.displayForm(className, header, format, linebreak, getXWikiContext());
    }
    
    public String displayForm(String className) {
        return this.doc.displayForm(className, getXWikiContext());
    }
    
    public String displayRendered(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object) throws XWikiException {
        if ((pclass == null) || (object == null)) {
            return "";
        }
        
        return this.doc.displayRendered(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());
    }
    
    public String displayView(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object) {
        if ((pclass == null) || (object == null)) {
            return "";
        }
        
        return this.doc.displayView(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());
    }
    
    public String displayEdit(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object) {
        if ((pclass == null) || (object == null)) {
            return "";
        }
        
        return this.doc.displayEdit(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());
    }
    
    public String displayHidden(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object) {
        if ((pclass == null) || (object == null)) {
            return "";
        }
        
        return this.doc.displayHidden(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());
    }
    
    public List<String> getIncludedPages() {
        return this.doc.getIncludedPages(getXWikiContext());
    }
    
    public List<String> getIncludedMacros() {
        return this.doc.getIncludedMacros(getXWikiContext());
    }
    
    public List<String> getLinkedPages() {
        return new ArrayList<String>(this.doc.getUniqueLinkedPages(getXWikiContext()));
    }
    
    public Attachment getAttachment(String filename) {
        XWikiAttachment attach = this.getDoc().getAttachment(filename);
        if (attach == null) {
            return null;
        }
         else {
            return new Attachment(this, attach, getXWikiContext());
        }
        
    }
    
    public List<Delta> getContentDiff(Document origdoc, Document newdoc) throws XWikiException, DifferentiationFailedException {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return this.doc.getContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext());
            }
            
            if (newdoc == null) {
                return this.doc.getContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext());
            }
            
            return this.doc.getContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());
        }
         catch (Exception e) {
            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR, "Error while making content diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    public List<Delta> getXMLDiff(Document origdoc, Document newdoc) throws XWikiException, DifferentiationFailedException {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return this.doc.getXMLDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext());
            }
            
            if (newdoc == null) {
                return this.doc.getXMLDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext());
            }
            
            return this.doc.getXMLDiff(origdoc.doc, newdoc.doc, getXWikiContext());
        }
         catch (Exception e) {
            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_XML_ERROR, "Error while making xml diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    public List<Delta> getRenderedContentDiff(Document origdoc, Document newdoc) throws XWikiException, DifferentiationFailedException {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return this.doc.getRenderedContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext());
            }
            
            if (newdoc == null) {
                return this.doc.getRenderedContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext());
            }
            
            return this.doc.getRenderedContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());
        }
         catch (Exception e) {
            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_RENDERED_ERROR, "Error while making rendered diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    public List<MetaDataDiff> getMetaDataDiff(Document origdoc, Document newdoc) throws XWikiException {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return this.doc.getMetaDataDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext());
            }
            
            if (newdoc == null) {
                return this.doc.getMetaDataDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext());
            }
            
            return this.doc.getMetaDataDiff(origdoc.doc, newdoc.doc, getXWikiContext());
        }
         catch (Exception e) {
            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_METADATA_ERROR, "Error while making meta data diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    public List<List<ObjectDiff>> getObjectDiff(Document origdoc, Document newdoc) {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return this.doc.getObjectDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext());
            }
            
            if (newdoc == null) {
                return this.doc.getObjectDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext());
            }
            
            return this.doc.getObjectDiff(origdoc.doc, newdoc.doc, getXWikiContext());
        }
         catch (Exception e) {
            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_OBJECT_ERROR, "Error while making meta object diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    public List<List<ObjectDiff>> getClassDiff(Document origdoc, Document newdoc) {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return this.doc.getClassDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext());
            }
            
            if (newdoc == null) {
                return this.doc.getClassDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext());
            }
            
            return this.doc.getClassDiff(origdoc.doc, newdoc.doc, getXWikiContext());
        }
         catch (Exception e) {
            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CLASS_ERROR, "Error while making class diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    public List<AttachmentDiff> getAttachmentDiff(Document origdoc, Document newdoc) {
        try {
            if ((origdoc == null) && (newdoc == null)) {
                return Collections.emptyList();
            }
            
            if (origdoc == null) {
                return wrapAttachmentDiff(this.doc.getAttachmentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc, getXWikiContext()));
            }
            
            if (newdoc == null) {
                return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext()));
            }
            
            return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc, newdoc.doc, getXWikiContext()));
        }
         catch (Exception e) {
            java.lang.Object[] args = { (origdoc != null) ? origdoc.getFullName() : null, (origdoc != null) ? origdoc.getVersion() : null, (newdoc != null) ? newdoc.getVersion() : null };
            List list = new ArrayList();
            XWikiException xe = new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_ATTACHMENT_ERROR, "Error while making attachment diff of {0} between version {1} and version {2}", e, args);
            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());
            list.add(errormsg);
            return list;
        }
        
    }
    
    private List<AttachmentDiff> wrapAttachmentDiff(List<com.xpn.xwiki.doc.AttachmentDiff> diffs) {
        List<AttachmentDiff> safeAttachmentDiffs = new ArrayList<>();
        for (com.xpn.xwiki.doc.AttachmentDiff diff : diffs) {
            safeAttachmentDiffs.add(new AttachmentDiff(diff, getXWikiContext()));
        }
        
        return safeAttachmentDiffs;
    }
    
    public List<Delta> getLastChanges() throws XWikiException, DifferentiationFailedException {
        return this.doc.getLastChanges(getXWikiContext());
    }
    
    public DocumentStats getCurrentMonthPageStats(String action) {
        Scope scope = ScopeFactory.createPageScope(this.getFullName());
        Range range = RangeFactory.ALL;
        Period period = PeriodFactory.getCurrentMonth();
        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());
        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);
        if (stats.size() > 0) {
            return stats.get(0);
        }
        
        return new DocumentStats();
    }
    
    public DocumentStats getCurrentMonthSpaceStats(String action) {
        Scope scope = ScopeFactory.createSpaceScope(this.doc.getSpace(), false);
        Range range = RangeFactory.ALL;
        Period period = PeriodFactory.getCurrentMonth();
        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());
        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);
        if (stats.size() > 0) {
            return stats.get(0);
        }
        
        return new DocumentStats();
    }
    
    public List<RefererStats> getCurrentMonthRefStats() {
        Scope scope = ScopeFactory.createPageScope(this.getFullName());
        Range range = RangeFactory.ALL;
        Period period = PeriodFactory.getCurrentMonth();
        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());
        List<RefererStats> stats = statisticsService.getRefererStatistics("", scope, period, range, this.context);
        return stats;
    }
    
    public boolean checkAccess(String right) {
        try {
            return getXWikiContext().getWiki().checkAccess(right, this.doc, getXWikiContext());
        }
         catch (XWikiException e) {
            return false;
        }
        
    }
    
    public boolean hasAccessLevel(String level) {
        try {
            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, getXWikiContext().getUser(), this.getPrefixedFullName(), getXWikiContext());
        }
         catch (Exception e) {
            return false;
        }
        
    }
    
    public boolean hasAccessLevel(String level, String user) {
        try {
            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, user, this.getPrefixedFullName(), getXWikiContext());
        }
         catch (Exception e) {
            return false;
        }
        
    }
    
    public boolean hasAccess(Right right, DocumentReference userReference) {
        return getAuthorizationManager().hasAccess(right, userReference, getDocumentReference());
    }
    
    public boolean getLocked() {
        try {
            XWikiLock lock = this.doc.getLock(getXWikiContext());
            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {
                return true;
            }
             else {
                return false;
            }
            
        }
         catch (Exception e) {
            return false;
        }
        
    }
    
    public String getLockingUser() {
        try {
            XWikiLock lock = this.doc.getLock(getXWikiContext());
            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {
                return lock.getUserName();
            }
             else {
                return "";
            }
            
        }
         catch (XWikiException e) {
            return "";
        }
        
    }
    
    public Date getLockingDate() {
        try {
            XWikiLock lock = this.doc.getLock(getXWikiContext());
            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {
                return lock.getDate();
            }
             else {
                return null;
            }
            
        }
         catch (XWikiException e) {
            return null;
        }
        
    }
    
    public java.lang.Object get(String classOrFieldName) {
        if (this.currentObj != null) {
            return this.doc.display(classOrFieldName, this.currentObj.getBaseObject(), getXWikiContext());
        }
        
        BaseObject object = this.doc.getFirstObject(classOrFieldName, getXWikiContext());
        if (object != null) {
            return this.doc.display(classOrFieldName, object, getXWikiContext());
        }
        
        return this.getDoc().getObject(classOrFieldName);
    }
    
    public java.lang.Object getValue(String fieldName) {
        Object object;
        if (this.currentObj == null) {
            object = new Object(this.getDoc().getFirstObject(fieldName, getXWikiContext()), getXWikiContext());
        }
         else {
            object = this.currentObj;
        }
        
        return getValue(fieldName, object);
    }
    
    public java.lang.Object getValue(String fieldName, Object object) {
        if (object != null) {
            return object.getValue(fieldName);
        }
        
        return null;
    }
    
    public String getTextArea() {
        return com.xpn.xwiki.XWiki.getTextArea(this.doc.getContent(), getXWikiContext());
    }
    
    public Map<String, Map<String, java.lang.Object>> getTOC(int init, int max, boolean numbered) {
        getXWikiContext().put("tocNumbered", new Boolean(numbered));
        return TOCGenerator.generateTOC(getContent(), init, max, numbered, getXWikiContext());
    }
    
    public String getTags() {
        return this.doc.getTags(getXWikiContext());
    }
    
    public List<String> getTagList() {
        return this.getDoc().getTagsList(getXWikiContext());
    }
    
    public List<String> getTagsPossibleValues() {
        return this.doc.getTagsPossibleValues(getXWikiContext());
    }
    
    public void insertText(String text, String marker) throws XWikiException {
        if (hasAccessLevel("edit")) {
            getDoc().insertText(text, marker, getXWikiContext());
            updateAuthor();
            updateContentAuthor();
        }
        
    }
    
    public boolean equals(java.lang.Object arg0) {
        if (!(arg0 instanceof Document)) {
            return false;
        }
        
        Document d = (Document) arg0;
        return d.getXWikiContext().equals(getXWikiContext()) && this.doc.equals(d.doc);
    }
    
    public boolean same(XWikiDocument document) {
        return document == this.doc || document == this.initialDoc;
    }
    
    public List<String> getBacklinks() throws XWikiException {
        return this.doc.getBackLinkedPages(getXWikiContext());
    }
    
    public List<DocumentReference> getBackLinkedReferences() throws XWikiException {
        return this.doc.getBackLinkedReferences(getXWikiContext());
    }
    
    public List<XWikiLink> getLinks() throws XWikiException {
        return new ArrayList<XWikiLink>(this.doc.getUniqueWikiLinkedPages(getXWikiContext()));
    }
    
    public List<DocumentSection> getSections() throws XWikiException {
        return this.doc.getSections();
    }
    
    public List<String> getChildren() throws XWikiException {
        return this.doc.getChildren(getXWikiContext());
    }
    
    public List<DocumentReference> getChildrenReferences() throws XWikiException {
        return this.doc.getChildrenReferences(getXWikiContext());
    }
    
    public List<String> getChildren(int nb, int start) throws XWikiException {
        return this.doc.getChildren(nb, start, getXWikiContext());
    }
    
    public String getDefaultEditMode() throws XWikiException {
        return this.doc.getDefaultEditMode(getXWikiContext());
    }
    
    public String getDefaultEditURL() throws XWikiException {
        return this.doc.getDefaultEditURL(getXWikiContext());
    }
    
    public String getEditURL(String action, String mode) throws XWikiException {
        return this.doc.getEditURL(action, mode, getXWikiContext());
    }
    
    public String getEditURL(String action, String mode, String locale) {
        return this.doc.getEditURL(action, mode, locale, getXWikiContext());
    }
    
    public boolean isCurrentUserCreator() {
        return this.doc.isCurrentUserCreator(getXWikiContext());
    }
    
    public boolean isCurrentUserPage() {
        return this.doc.isCurrentUserPage(getXWikiContext());
    }
    
    public boolean isCurrentLocalUserPage() {
        return this.doc.isCurrentLocalUserPage(getXWikiContext());
    }
    
    public boolean isCreator(String username) {
        return this.doc.isCreator(username);
    }
    
    public void set(String fieldname, java.lang.Object value) {
        Object obj;
        if (this.currentObj != null) {
            obj = this.currentObj;
        }
         else {
            obj = getFirstObject(fieldname);
        }
        
        set(fieldname, value, obj);
    }
    
    public void set(String fieldname, java.lang.Object value, Object obj) {
        if (obj == null) {
            return;
        }
        
        obj.set(fieldname, value);
    }
    
    public void setTitle(String title) {
        getDoc().setTitle(title);
        updateAuthor();
        updateContentAuthor();
    }
    
    public void setCustomClass(String customClass) {
        getDoc().setCustomClass(customClass);
        updateAuthor();
    }
    
    public void setParent(String parent) {
        getDoc().setParent(parent);
        updateAuthor();
    }
    
    private void updateContentAuthor() {
        XWikiContext xcontext = getXWikiContext();
        getDoc().setContentAuthorReference(xcontext.getAuthorReference());
    }
    
    private void updateAuthor() {
        XWikiContext xcontext = getXWikiContext();
        getDoc().setAuthorReference(xcontext.getAuthorReference());
    }
    
    public void setContent(String content) {
        getDoc().setContent(content);
        updateAuthor();
        updateContentAuthor();
    }
    
    public void setContent(XDOM content) throws XWikiException {
        getDoc().setContent(content);
        updateAuthor();
        updateContentAuthor();
    }
    
    public void setSyntax(Syntax syntax) {
        getDoc().setSyntax(syntax);
        updateAuthor();
        updateContentAuthor();
    }
    
    public void setSyntaxId(String syntaxId) {
        getDoc().setSyntaxId(syntaxId);
        updateAuthor();
        updateContentAuthor();
    }
    
    public void setDefaultTemplate(String dtemplate) {
        getDoc().setDefaultTemplate(dtemplate);
        updateAuthor();
    }
    
    public void setComment(String comment) {
        getDoc().setComment(comment);
    }
    
    public void setMinorEdit(boolean isMinor) {
        getDoc().setMinorEdit(isMinor);
    }
    
    public void save() throws XWikiException {
        save("", false);
    }
    
    public void save(String comment) throws XWikiException {
        save(comment, false);
    }
    
    private UserReferenceResolver<CurrentUserReference> getCurrentUserReferenceResolver() {
        return Utils.getComponent(new DefaultParameterizedType(null, UserReferenceResolver.class, CurrentUserReference.class));
    }
    
    public void save(String comment, boolean minorEdit) throws XWikiException {
        if (hasAccessLevel("edit")) {
            DocumentAuthors authors = this.getAuthors();
            authors.setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));
            if (hasProgrammingRights() || !getConfiguration().getProperty("security.script.save.checkAuthor", true)) {
                saveDocument(comment, minorEdit);
            }
             else {
                saveAsAuthor(comment, minorEdit);
            }
            
        }
         else {
            java.lang.Object[] args = {getDefaultEntityReferenceSerializer().serialize(getDocumentReference())};
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied in edit mode on document {0}", null, args);
        }
        
    }
    
    public void saveWithProgrammingRights() throws XWikiException {
        saveWithProgrammingRights("", false);
    }
    
    public void saveWithProgrammingRights(String comment) throws XWikiException {
        saveWithProgrammingRights(comment, false);
    }
    
    public void saveWithProgrammingRights(String comment, boolean minorEdit) throws XWikiException {
        if (hasProgrammingRights()) {
            XWikiContext context = getXWikiContext();
            String currentWikiId = context.getWikiId();
            try {
                context.setWikiId(getWiki());
                if (!context.getWiki().isReadOnly()) {
                    saveDocument(comment, minorEdit, false);
                }
                 else {
                    java.lang.Object[] args = { getDefaultEntityReferenceSerializer().serialize(getDocumentReference()), getWiki() };
                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied in edit mode on document [{0}]. The wiki [{1}] is in read only mode.", null, args);
                }
                
            }
             finally {
                context.setWikiId(currentWikiId);
            }
            
        }
         else {
            java.lang.Object[] args = { this.getFullName() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied with no programming rights document {0}", null, args);
        }
        
    }
    
    public void saveAsAuthor() throws XWikiException {
        saveAsAuthor("", false);
    }
    
    public void saveAsAuthor(String comment) throws XWikiException {
        saveAsAuthor(comment, false);
    }
    
    public void saveAsAuthor(String comment, boolean minorEdit) throws XWikiException {
        XWikiContext xcontext = getXWikiContext();
        getAuthors() .setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));
        DocumentReference author = getEffectiveAuthorReference();
        if (hasAccess(Right.EDIT, author)) {
            DocumentReference currentUser = xcontext.getUserReference();
            try {
                xcontext.setUserReference(author);
                saveDocument(comment, minorEdit);
            }
             finally {
                xcontext.setUserReference(currentUser);
            }
            
        }
         else {
            java.lang.Object[] args = { author, xcontext.getDoc(), getFullName() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied; user {0}, acting through script in document {1} cannot save document {2}", null, args);
        }
        
    }
    
    protected void saveDocument(String comment, boolean minorEdit) throws XWikiException {
        saveDocument(comment, minorEdit, true);
    }
    
    private void saveDocument(String comment, boolean minorEdit, boolean checkSaving) throws XWikiException {
        XWikiDocument doc = getDoc();
        UserReference currentUserReference = getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE);
        doc.getAuthors().setEffectiveMetadataAuthor(currentUserReference);
        if (doc.isNew()) {
            doc.getAuthors().setCreator(currentUserReference);
        }
        
        if (checkSaving) {
            getXWikiContext().getWiki().checkSavingDocument(doc.getAuthorReference(), doc, comment, minorEdit, getXWikiContext());
        }
        
        getXWikiContext().getWiki().saveDocument(doc, comment, minorEdit, getXWikiContext());
        this.initialDoc = this.doc;
    }
    
    public com.xpn.xwiki.api.Object addObjectFromRequest() throws XWikiException {
        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(getDoc().addXObjectFromRequest(getXWikiContext()), getXWikiContext());
        updateAuthor();
        return obj;
    }
    
    public com.xpn.xwiki.api.Object addObjectFromRequest(String className) throws XWikiException {
        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object( getDoc().addObjectFromRequest(className, getXWikiContext()), getXWikiContext());
        updateAuthor();
        return obj;
    }
    
    public List<Object> addObjectsFromRequest(String className) throws XWikiException {
        return addObjectsFromRequest(className, "");
    }
    
    public com.xpn.xwiki.api.Object addObjectFromRequest(String className, String prefix) throws XWikiException {
        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object( getDoc().addObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());
        updateAuthor();
        return obj;
    }
    
    public List<Object> addObjectsFromRequest(String className, String prefix) throws XWikiException {
        List<BaseObject> objs = getDoc().addObjectsFromRequest(className, prefix, getXWikiContext());
        List<Object> wrapped = new ArrayList<Object>();
        for (BaseObject object : objs) {
            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));
        }
        
        updateAuthor();
        return wrapped;
    }
    
    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className) throws XWikiException {
        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object( getDoc().updateObjectFromRequest(className, getXWikiContext()), getXWikiContext());
        updateAuthor();
        return obj;
    }
    
    public List<Object> updateObjectsFromRequest(String className) throws XWikiException {
        return updateObjectsFromRequest(className, "");
    }
    
    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className, String prefix) throws XWikiException {
        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object( getDoc().updateObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());
        updateAuthor();
        return obj;
    }
    
    public List<Object> updateObjectsFromRequest(String className, String prefix) throws XWikiException {
        List<BaseObject> objs = getDoc().updateObjectsFromRequest(className, prefix, getXWikiContext());
        List<Object> wrapped = new ArrayList<Object>();
        for (BaseObject object : objs) {
            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));
        }
        
        updateAuthor();
        return wrapped;
    }
    
    public boolean isAdvancedContent() {
        return this.doc.isAdvancedContent();
    }
    
    public boolean isProgrammaticContent() {
        return this.doc.isProgrammaticContent();
    }
    
    public boolean removeObject(Object object) {
        return getDoc().removeObject(object.getBaseObject());
    }
    
    public boolean removeObjects(String className) {
        return getDoc().removeObjects(className);
    }
    
    protected void deleteDocument() throws XWikiException {
        getXWikiContext().getWiki().deleteDocument(this.doc, getXWikiContext());
        this.initialDoc = this.doc;
    }
    
    public void delete() throws XWikiException {
        if (hasAccessLevel("delete")) {
            deleteDocument();
        }
         else {
            java.lang.Object[] args = { this.getFullName() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied in edit mode on document {0}", null, args);
        }
        
    }
    
    public void deleteAsAuthor() throws XWikiException {
        XWikiContext xcontext = getXWikiContext();
        DocumentReference author = getEffectiveAuthorReference();
        if (hasAccess(Right.DELETE, author)) {
            DocumentReference currentUser = xcontext.getUserReference();
            try {
                xcontext.setUserReference(author);
                deleteDocument();
            }
             finally {
                xcontext.setUserReference(currentUser);
            }
            
        }
         else {
            java.lang.Object[] args = { author, xcontext.getDoc(), this.getFullName() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied; user {0}, acting through script in document {1} cannot delete document {2}", null, args);
        }
        
    }
    
    public void deleteWithProgrammingRights() throws XWikiException {
        if (hasProgrammingRights()) {
            deleteDocument();
        }
         else {
            java.lang.Object[] args = { this.getFullName() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied with no programming rights document {0}", null, args);
        }
        
    }
    
    public String getVersionHashCode() {
        return this.doc.getVersionHashCode(getXWikiContext());
    }
    
    public int addAttachments() throws XWikiException {
        return addAttachments(null);
    }
    
    public int addAttachments(String fieldName) throws XWikiException {
        if (!hasAccessLevel("edit")) {
            java.lang.Object[] args = { this.getFullName() };
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied in edit mode on document {0}", null, args);
        }
        
        XWiki xwiki = getXWikiContext().getWiki();
        FileUploadPlugin fileupload = (FileUploadPlugin) xwiki.getPlugin("fileupload", getXWikiContext());
        List<FileItem> fileuploadlist = fileupload.getFileItems(getXWikiContext());
        List<XWikiAttachment> attachments = new ArrayList<XWikiAttachment>();
        this.context.put("addedAttachments", attachments);
        int nb = 0;
        if (fileuploadlist == null) {
            return 0;
        }
        
        for (FileItem item : fileuploadlist) {
            String name = item.getFieldName();
            if (fieldName != null && !fieldName.equals(name)) {
                continue;
            }
            
            if (item.isFormField()) {
                continue;
            }
            
            byte[] data = fileupload.getFileItemData(name, getXWikiContext());
            String filename;
            String fname = fileupload.getFileName(name, getXWikiContext());
            int i = fname.lastIndexOf("\\");
            if (i == -1) {
                i = fname.lastIndexOf("/");
            }
            
            filename = fname.substring(i + 1);
            filename = filename.replaceAll("\\+", " ");
            if ((data != null) && (data.length > 0)) {
                XWikiAttachment attachment = this.getDoc().addAttachment(filename, data, getXWikiContext());
                getDoc().saveAttachmentContent(attachment, getXWikiContext());
                attachments.add(attachment);
                nb++;
            }
            
        }
        
        if (nb > 0) {
            getXWikiContext().getWiki().saveDocument(getDoc(), getXWikiContext());
            this.initialDoc = this.doc;
        }
        
        return nb;
    }
    
    public Attachment addAttachment(String fileName, InputStream iStream) {
        try {
            return new Attachment(this, this.getDoc().setAttachment(fileName, iStream, getXWikiContext()), getXWikiContext());
        }
         catch (IOException e) {
        }
         finally {
            updateAuthor();
        }
        
        return null;
    }
    
    public Attachment addAttachment(String fileName, byte[] data) {
        try {
            return new Attachment(this, this.getDoc().addAttachment(fileName, data, getXWikiContext()), getXWikiContext());
        }
         catch (XWikiException e) {
        }
         finally {
            updateAuthor();
        }
        
        return null;
    }
    
    public boolean validate() throws XWikiException {
        return this.doc.validate(getXWikiContext());
    }
    
    public boolean validate(String[] classNames) throws XWikiException {
        return this.doc.validate(classNames, getXWikiContext());
    }
    
    public String getValidationScript() {
        return getDoc().getValidationScript();
    }
    
    public void setValidationScript(String validationScript) {
        getDoc().setValidationScript(validationScript);
        updateAuthor();
    }
    
    public void rename(DocumentReference newReference) throws XWikiException {
        if (hasAccessLevel("delete") && this.context.getWiki().checkAccess("edit", this.context.getWiki().getDocument(newReference, this.context), this.context)) {
            this.getDoc().rename(newReference, getXWikiContext());
        }
        
    }
    
    public void rename(String newDocumentName, List<String> backlinkDocumentNames) throws XWikiException {
        rename(newDocumentName, backlinkDocumentNames, Collections.emptyList());
    }
    
    public void rename(String newDocumentName, List<String> backlinkDocumentNames, List<String> childDocumentNames) throws XWikiException {
        List<DocumentReference> backlinkDocumentReferences = new ArrayList<DocumentReference>();
        for (String backlinkDocumentName : backlinkDocumentNames) {
            backlinkDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(backlinkDocumentName));
        }
        
        List<DocumentReference> childDocumentReferences = new ArrayList<DocumentReference>();
        for (String childDocumentName : childDocumentNames) {
            childDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(childDocumentName));
        }
        
        rename(getCurrentMixedDocumentReferenceResolver().resolve(newDocumentName), backlinkDocumentReferences, childDocumentReferences);
    }
    
    public void rename(DocumentReference newReference, List<DocumentReference> backlinkDocumentNames, List<DocumentReference> childDocumentNames) throws XWikiException {
        if (hasAccessLevel("delete") && this.context.getWiki().checkAccess("edit", this.context.getWiki().getDocument(newReference, this.context), this.context)) {
            int counter = childDocumentNames.size();
            List<String> actuallyChildren = getChildren();
            while (counter > 0) {
                counter--;
                if (!actuallyChildren.contains(childDocumentNames.get(counter)) && !this.context.getWiki().checkAccess("edit", this.context.getWiki().getDocument(childDocumentNames.get(counter), this.context), this.context)) {
                    return;
                }
                
            }
            
            this.getDoc().rename(newReference, backlinkDocumentNames, childDocumentNames, getXWikiContext());
        }
        
    }
    
    public Document getDocumentRevision(String revision) {
        try {
            XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(this.doc, revision);
            return documentRevision != null ? new Document(documentRevision, this.context) : null;
        }
         catch (Exception e) {
            LOGGER.error("Failed to load revision [{}] of document [{}]", revision, getDocumentReferenceWithLocale(), e);
            return null;
        }
        
    }
    
    public Document getPreviousDocument() throws XWikiException {
        return getDocumentRevision(getPreviousVersion());
    }
    
    public boolean isMostRecent() {
        return this.doc.isMostRecent();
    }
    
    public String toString() {
        return this.doc.toString();
    }
    
    public boolean convertSyntax(String targetSyntaxId) throws XWikiException {
        try {
            getDoc().convertSyntax(targetSyntaxId, this.context);
        }
         catch (Exception ex) {
            LOGGER.error( "Failed to convert document [" + getPrefixedFullName() + "] to syntax [" + targetSyntaxId + "]", ex);
            return false;
        }
         finally {
            updateAuthor();
            updateContentAuthor();
        }
        
        return true;
    }
    
    public boolean isHidden() {
        return this.doc.isHidden();
    }
    
    public void setHidden(boolean hidden) {
        this.doc.setHidden(hidden);
    }
    
    public void dropPermissions() {
        final ExecutionContext context = Utils.getComponent(Execution.class).getContext();
        context.setProperty(XWikiConstant.DROPPED_PERMISSIONS, System.identityHashCode(context));
    }
    
    public boolean isTranslation() {
        return 1 == this.getDoc().getTranslation();
    }
    
    public int getLocalReferenceMaxLength() {
        return this.doc.getLocalReferenceMaxLength();
    }
    
    public DocumentAuthors getAuthors() {
        return doc.getAuthors();
    }
    
}


