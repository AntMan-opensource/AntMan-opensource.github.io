package org.springframework.boot.actuate.metrics.web.reactive.server;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;
import io.micrometer.core.instrument.Tag;
import org.springframework.boot.actuate.metrics.http.Outcome;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.util.StringUtils;
import org.springframework.web.reactive.HandlerMapping;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.util.pattern.PathPattern;
public final class WebFluxTags {
	private static final Tag URI_NOT_FOUND = Tag.of("uri", "NOT_FOUND");
	private static final Tag URI_REDIRECTION = Tag.of("uri", "REDIRECTION");
	private static final Tag URI_ROOT = Tag.of("uri", "root");
	private static final Tag URI_UNKNOWN = Tag.of("uri", "UNKNOWN");
	private static final Tag EXCEPTION_NONE = Tag.of("exception", "None");
	private static final Pattern FORWARD_SLASHES_PATTERN = Pattern.compile("//+");
	private static final Set<String> DISCONNECTED_CLIENT_EXCEPTIONS = new HashSet<>( Arrays.asList("AbortedException", "ClientAbortException", "EOFException", "EofException"));
	private WebFluxTags() {
	}
	
	 public static Tag method(ServerWebExchange exchange) {
		return Tag.of("method", exchange.getRequest().getMethodValue());
	}
	
	 public static Tag status(ServerWebExchange exchange) {
		HttpStatus status = exchange.getResponse().getStatusCode();
		if (status == null) {
			status = HttpStatus.OK;
		}
		
		return Tag.of("status", String.valueOf(status.value()));
	}
	
	 public static Tag uri(ServerWebExchange exchange) {
		return uri(exchange, false);
	}
	
	 public static Tag uri(ServerWebExchange exchange, boolean ignoreTrailingSlash) {
		PathPattern pathPattern = exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);
		if (pathPattern != null) {
			String patternString = pathPattern.getPatternString();
			if (ignoreTrailingSlash && patternString.length() > 1) {
				patternString = removeTrailingSlash(patternString);
			}
			
			if (patternString.isEmpty()) {
				return URI_ROOT;
			}
			
			return Tag.of("uri", patternString);
		}
		
		HttpStatus status = exchange.getResponse().getStatusCode();
		if (status != null) {
			if (status.is3xxRedirection()) {
				return URI_REDIRECTION;
			}
			
			if (status == HttpStatus.NOT_FOUND) {
				return URI_NOT_FOUND;
			}
			
		}
		
		String path = getPathInfo(exchange);
		if (path.isEmpty()) {
			return URI_ROOT;
		}
		
		return URI_UNKNOWN;
	}
	
	private static String getPathInfo(ServerWebExchange exchange) {
		String path = exchange.getRequest().getPath().value();
		String uri = StringUtils.hasText(path) ? path : "/";
		String singleSlashes = FORWARD_SLASHES_PATTERN.matcher(uri).replaceAll("/");
		return removeTrailingSlash(singleSlashes);
	}
	
	private static String removeTrailingSlash(String text) {
		if (!StringUtils.hasLength(text)) {
			return text;
		}
		
		return text.endsWith("/") ? text.substring(0, text.length() - 1) : text;
	}
	
	 public static Tag exception(Throwable exception) {
		if (exception != null) {
			String simpleName = exception.getClass().getSimpleName();
			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName : exception.getClass().getName());
		}
		
		return EXCEPTION_NONE;
	}
	
	 public static Tag outcome(ServerWebExchange exchange, Throwable exception) {
		if (exception != null) {
			if (exception instanceof CancelledServerWebExchangeException || DISCONNECTED_CLIENT_EXCEPTIONS.contains(exception.getClass().getSimpleName())) {
				return Outcome.UNKNOWN.asTag();
			}
			
		}
		
		Integer statusCode = extractStatusCode(exchange);
		Outcome outcome = (statusCode != null) ? Outcome.forStatus(statusCode) : Outcome.SUCCESS;
		return outcome.asTag();
	}
	
	private static Integer extractStatusCode(ServerWebExchange exchange) {
		ServerHttpResponse response = exchange.getResponse();
		Integer statusCode = response.getRawStatusCode();
		if (statusCode != null) {
			return statusCode;
		}
		
		HttpStatus status = response.getStatusCode();
		return (status != null) ? status.value() : null;
	}
	
}


