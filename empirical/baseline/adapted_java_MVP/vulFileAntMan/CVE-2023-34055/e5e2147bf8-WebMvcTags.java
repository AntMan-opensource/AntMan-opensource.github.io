package org.springframework.boot.actuate.metrics.web.servlet;
import java.util.regex.Pattern;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import io.micrometer.core.instrument.Tag;
import org.springframework.boot.actuate.metrics.http.Outcome;
import org.springframework.http.HttpStatus;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.HandlerMapping;
import org.springframework.web.util.pattern.PathPattern;
public final class WebMvcTags {
	private static final String DATA_REST_PATH_PATTERN_ATTRIBUTE = "org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.EFFECTIVE_REPOSITORY_RESOURCE_LOOKUP_PATH";
	private static final Tag URI_NOT_FOUND = Tag.of("uri", "NOT_FOUND");
	private static final Tag URI_REDIRECTION = Tag.of("uri", "REDIRECTION");
	private static final Tag URI_ROOT = Tag.of("uri", "root");
	private static final Tag URI_UNKNOWN = Tag.of("uri", "UNKNOWN");
	private static final Tag EXCEPTION_NONE = Tag.of("exception", "None");
	private static final Tag STATUS_UNKNOWN = Tag.of("status", "UNKNOWN");
	private static final Tag METHOD_UNKNOWN = Tag.of("method", "UNKNOWN");
	private static final Pattern TRAILING_SLASH_PATTERN = Pattern.compile("/$");
	private static final Pattern MULTIPLE_SLASH_PATTERN = Pattern.compile("//+");
	private WebMvcTags() {
	}
	
	 public static Tag method(HttpServletRequest request) {
		return (request != null) ? Tag.of("method", request.getMethod()) : METHOD_UNKNOWN;
	}
	
	 public static Tag status(HttpServletResponse response) {
		return (response != null) ? Tag.of("status", Integer.toString(response.getStatus())) : STATUS_UNKNOWN;
	}
	
	 public static Tag uri(HttpServletRequest request, HttpServletResponse response) {
		return uri(request, response, false);
	}
	
	 public static Tag uri(HttpServletRequest request, HttpServletResponse response, boolean ignoreTrailingSlash) {
		if (request != null) {
			String pattern = getMatchingPattern(request);
			if (pattern != null) {
				if (ignoreTrailingSlash && pattern.length() > 1) {
					pattern = TRAILING_SLASH_PATTERN.matcher(pattern).replaceAll("");
				}
				
				if (pattern.isEmpty()) {
					return URI_ROOT;
				}
				
				return Tag.of("uri", pattern);
			}
			
			if (response != null) {
				HttpStatus status = extractStatus(response);
				if (status != null) {
					if (status.is3xxRedirection()) {
						return URI_REDIRECTION;
					}
					
					if (status == HttpStatus.NOT_FOUND) {
						return URI_NOT_FOUND;
					}
					
				}
				
			}
			
			String pathInfo = getPathInfo(request);
			if (pathInfo.isEmpty()) {
				return URI_ROOT;
			}
			
		}
		
		return URI_UNKNOWN;
	}
	
	private static HttpStatus extractStatus(HttpServletResponse response) {
		try {
			return HttpStatus.valueOf(response.getStatus());
		}
		
		catch (IllegalArgumentException ex) {
			return null;
		}
		
	}
	
	private static String getMatchingPattern(HttpServletRequest request) {
		PathPattern dataRestPathPattern = (PathPattern) request.getAttribute(DATA_REST_PATH_PATTERN_ATTRIBUTE);
		if (dataRestPathPattern != null) {
			return dataRestPathPattern.getPatternString();
		}
		
		return (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);
	}
	
	private static String getPathInfo(HttpServletRequest request) {
		String pathInfo = request.getPathInfo();
		String uri = StringUtils.hasText(pathInfo) ? pathInfo : "/";
		uri = MULTIPLE_SLASH_PATTERN.matcher(uri).replaceAll("/");
		return TRAILING_SLASH_PATTERN.matcher(uri).replaceAll("");
	}
	
	 public static Tag exception(Throwable exception) {
		if (exception != null) {
			String simpleName = exception.getClass().getSimpleName();
			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName : exception.getClass().getName());
		}
		
		return EXCEPTION_NONE;
	}
	
	 public static Tag outcome(HttpServletResponse response) {
		Outcome outcome = (response != null) ? Outcome.forStatus(response.getStatus()) : Outcome.UNKNOWN;
		return outcome.asTag();
	}
	
}


