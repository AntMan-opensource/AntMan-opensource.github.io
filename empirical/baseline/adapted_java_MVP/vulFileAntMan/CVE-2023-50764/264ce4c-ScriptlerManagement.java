package org.jenkinsci.plugins.scriptler;
import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.Extension;
import hudson.ExtensionList;
import hudson.Util;
import hudson.markup.MarkupFormatter;
import hudson.markup.RawHtmlMarkupFormatter;
import hudson.model.*;
import hudson.security.Permission;
import jenkins.model.Jenkins;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.lang.StringUtils;
import org.jenkinsci.plugins.scriptler.config.Parameter;
import org.jenkinsci.plugins.scriptler.config.Script;
import org.jenkinsci.plugins.scriptler.config.ScriptlerConfiguration;
import org.jenkinsci.plugins.scriptler.git.GitScriptlerRepository;
import org.jenkinsci.plugins.scriptler.share.CatalogInfo;
import org.jenkinsci.plugins.scriptler.share.ScriptInfo;
import org.jenkinsci.plugins.scriptler.share.ScriptInfoCatalog;
import org.jenkinsci.plugins.scriptler.util.ScriptHelper;
import org.jenkinsci.plugins.scriptler.util.UIHelper;
import org.kohsuke.stapler.*;
import org.kohsuke.stapler.interceptor.RequirePOST;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
public class ScriptlerManagement extends ManagementLink implements RootAction {
    private final static Logger LOGGER = Logger.getLogger(ScriptlerManagement.class.getName());
    private final static String MASTER = "(master)";
    private final static String ALL = "(all)";
    private final static String ALL_SLAVES = "(all slaves)";
    private static final MarkupFormatter INSTANCE = RawHtmlMarkupFormatter.INSTANCE;
    public Permission getScriptlerRunScripts() {
        return ScriptlerPermissions.RUN_SCRIPTS;
    }
    
    public Permission getScriptlerConfigure() {
        return ScriptlerPermissions.CONFIGURE;
    }
    
    public boolean hasAtLeastOneScriptlerPermission(){
        return Jenkins.get().hasPermission(ScriptlerPermissions.RUN_SCRIPTS) || Jenkins.get().hasPermission(ScriptlerPermissions.CONFIGURE);
    }
    
    public void checkAtLeastOneScriptlerPermission(){
        if(!Jenkins.get().hasPermission(ScriptlerPermissions.RUN_SCRIPTS)){
            Jenkins.get().checkPermission(ScriptlerPermissions.CONFIGURE);
        }
        
    }
    
    public String getIconFileName() {
        return hasAtLeastOneScriptlerPermission() ? "symbol-file-tray-stacked-outline plugin-ionicons-api" : null;
    }
    
    public Category getCategory() {
        return Category.CONFIGURATION;
    }
    
    public String getUrlName() {
        return "scriptler";
    }
    
    public boolean disableRemoteCatalog() {
        return getConfiguration().isDisbableRemoteCatalog();
    }
    
    public String getDisplayName() {
        return Messages.display_name();
    }
    
    public String getDescription() {
        return Messages.description();
    }
    
    public ScriptlerManagement getScriptler() {
        return this;
    }
    
    public ScriptlerConfiguration getConfiguration() {
        return ScriptlerConfiguration.getConfiguration();
    }
    
    public MarkupFormatter getMarkupFormatter() {
        return INSTANCE;
    }
    
    public HttpResponse doScriptlerSettings(StaplerRequest res, StaplerResponse rsp, @QueryParameter("disableRemoteCatalog") boolean disableRemoteCatalog) throws IOException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        ScriptlerConfiguration cfg = getConfiguration();
        cfg.setDisbableRemoteCatalog(disableRemoteCatalog);
        cfg.save();
        return new HttpRedirect("settings");
    }
    
    public HttpResponse doDownloadScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String id, @QueryParameter("catalog") String catalogName) throws IOException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        ScriptlerConfiguration c = getConfiguration();
        if (c.isDisbableRemoteCatalog()) {
            return new HttpRedirect("index");
        }
        
        for (ScriptInfoCatalog<ScriptInfo> scriptInfoCatalog : getCatalogs()) {
            if (catalogName.equals(scriptInfoCatalog.getInfo().name)) {
                final ScriptInfo info = scriptInfoCatalog.getEntryById(id);
                final String source = scriptInfoCatalog.getScriptSource(scriptInfoCatalog.getEntryById(id));
                final List<Parameter> paramList = new ArrayList<>();
                for (String paramName : info.getParameters()) {
                    paramList.add(new Parameter(paramName, null));
                }
                
                final String finalName = saveScriptAndForward(id, info.getName(), info.getComment(), source, false, false, catalogName, id, paramList);
                return new HttpRedirect("editScript?id=" + finalName);
            }
            
        }
        
        final ForwardToView view = new ForwardToView(this, "catalog.jelly");
        view.with("message", Messages.download_failed(id, catalogName));
        view.with("catName", catalogName);
        return view;
    }
    
    public HttpResponse doScriptAdd(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String id, @QueryParameter("name") String name, @QueryParameter("comment") String comment, @QueryParameter("script") String script, @QueryParameter("nonAdministerUsing") boolean nonAdministerUsing, @QueryParameter("onlyMaster") boolean onlyMaster, String originCatalogName, String originId) throws IOException, ServletException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        List<Parameter> parameters = UIHelper.extractParameters(req.getSubmittedForm());
        saveScriptAndForward(id, name, comment, script, nonAdministerUsing, onlyMaster, originCatalogName, originId, parameters);
        return new HttpRedirect("index");
    }
    
    private String saveScriptAndForward(String id, String name, String comment, String script, boolean nonAdministerUsing, boolean onlyMaster, String originCatalogName, String originId, @NonNull List<Parameter> parameters) throws IOException {
        script = script == null ? "TODO" : script;
        if (StringUtils.isEmpty(id)) {
            throw new IllegalArgumentException("'id' must not be empty!");
        }
        
        final String displayName = name == null ? id : name;
        final String finalFileName = fixFileName(originCatalogName, id);
        File newScriptFile = new File(getScriptDirectory(), finalFileName);
        if(!Util.isDescendant(getScriptDirectory(), newScriptFile)) {
            LOGGER.log(Level.WARNING, "Folder traversal detected, file path received: {0}, after fixing: {1}", new Object[]{id, finalFileName});
            throw new IOException("Invalid file path received: " + id);
        }
        
        ScriptHelper.writeScriptToFile(newScriptFile, script);
        commitFileToGitRepo(finalFileName);
        ScriptHelper.putScriptInApprovalQueueIfRequired(script);
        Script newScript = null;
        if (!StringUtils.isEmpty(originId)) {
            newScript = new Script(finalFileName, displayName, comment, true, originCatalogName, originId, new SimpleDateFormat("dd MMM yyyy HH:mm:ss a").format(new Date()), parameters);
        }
         else {
            newScript = new Script(finalFileName, displayName, comment, nonAdministerUsing, parameters, onlyMaster);
        }
        
        ScriptlerConfiguration cfg = getConfiguration();
        cfg.addOrReplace(newScript);
        cfg.save();
        return finalFileName;
    }
    
    private void commitFileToGitRepo(final String finalFileName) {
        getGitRepo().addSingleFileToRepo(finalFileName);
    }
    
    private GitScriptlerRepository getGitRepo() {
        return ExtensionList.lookupSingleton(GitScriptlerRepository.class);
    }
    
    public HttpResponse doHardResetGit() throws IOException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        getGitRepo().hardReset();
        return new HttpRedirect("../scriptler.git");
    }
    
    public HttpResponse doRemoveScript(StaplerRequest res, StaplerResponse rsp, @QueryParameter("id") String id) throws IOException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        File oldScript = new File(getScriptDirectory(), id);
        if(!oldScript.delete() && oldScript.exists()) {
            throw new Failure("not able to delete " + oldScript.getAbsolutePath());
        }
        
        try {
            final GitScriptlerRepository gitRepo = ExtensionList.lookupSingleton(GitScriptlerRepository.class);
            gitRepo.rmSingleFileToRepo(id);
        }
         catch (IllegalStateException e) {
            throw new IOException("failed to update git repo", e);
        }
        
        ScriptlerConfiguration cfg = getConfiguration();
        cfg.removeScript(id);
        cfg.save();
        return new HttpRedirect("index");
    }
    
    public HttpResponse doUploadScript(StaplerRequest req) throws IOException, ServletException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        try {
            FileItem fileItem = req.getFileItem("file");
            boolean nonAdministerUsing = req.getSubmittedForm().getBoolean("nonAdministerUsing");
            String fileName = Util.getFileName(fileItem.getName());
            if (StringUtils.isEmpty(fileName)) {
                return new HttpRedirect(".");
            }
            
            saveScript(fileItem, nonAdministerUsing, fileName);
            return new HttpRedirect("index");
        }
         catch (IOException e) {
            throw e;
        }
         catch (Exception e) {
            throw new ServletException(e);
        }
        
    }
    
     void saveScript(FileItem fileItem, boolean nonAdministerUsing, String fileName) throws Exception {
        String fixedFileName = fixFileName(null, fileName);
        File fixedFile = new File(fixedFileName);
        if(fixedFile.isAbsolute()){
            LOGGER.log(Level.WARNING, "Folder traversal detected, file path received: {0}, after fixing: {1}. Seems to be an attempt to use absolute path instead of relative one", new Object[]{fileName, fixedFileName});
            throw new IOException("Invalid file path received: " + fileName);
        }
        
        File rootDir = getScriptDirectory();
        final File f = new File(rootDir, fixedFileName);
        if(!Util.isDescendant(rootDir, new File(rootDir,fixedFileName))) {             LOGGER.log(Level.WARNING, "Folder traversal detected, file path received: {0}, after fixing: {1}. Seems to be an attempt to use folder escape.", new Object[]{fileName, fixedFileName});
            throw new IOException("Invalid file path received: " + fileName);
        }
        
        fileItem.write(f);
        commitFileToGitRepo(fixedFileName);
        Script script = ScriptHelper.getScript(fixedFileName, false);
        if (script == null) {
            script = new Script(fixedFileName, fixedFileName, true, nonAdministerUsing, false);
        }
        
        String scriptSource = ScriptHelper.readScriptFromFile(f);
        ScriptHelper.putScriptInApprovalQueueIfRequired(scriptSource);
        ScriptlerConfiguration config = getConfiguration();
        config.addOrReplace(script);
    }
    
    public void doRunScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String id) throws IOException, ServletException {
        checkPermission(ScriptlerPermissions.RUN_SCRIPTS);
        Script script = ScriptHelper.getScript(id, true);
        if(script == null) {
            throw new IOException(Messages.scriptNotFound(id));
        }
        
        if(script.script == null){
            req.setAttribute("scriptNotFound", true);
        }
        else{
            boolean canByPassScriptApproval = Jenkins.get().hasPermission(Jenkins.RUN_SCRIPTS);
            if(!ScriptHelper.isApproved(script.script, false)){
                req.setAttribute("notApprovedYet", true);
            }
            
            req.setAttribute("canByPassScriptApproval", canByPassScriptApproval);
        }
        
        req.setAttribute("script", script);
        req.setAttribute("currentNode", MASTER);
        req.getView(this, "runScript.jelly").forward(req, rsp);
    }
    
    public void doTriggerScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String id, @QueryParameter("script") String scriptSrc, @QueryParameter("node") String node) throws IOException, ServletException {
        checkPermission(ScriptlerPermissions.RUN_SCRIPTS);
        final List<Parameter> parameters = UIHelper.extractParameters(req.getSubmittedForm());
        boolean canByPassScriptApproval = Jenkins.get().hasPermission(Jenkins.RUN_SCRIPTS);
        Script originalScript = ScriptHelper.getScript(id, true);
        if(originalScript == null){
            rsp.sendError(404, "No script found for id=" + id);
            return;
        }
        
        String originalScriptSourceCode = originalScript.script;
        Script tempScript = originalScript.copy();
        if(originalScriptSourceCode != null && originalScriptSourceCode.equals(scriptSrc)){
            tempScript.setScript(originalScriptSourceCode);
        }
        else{
            tempScript.setScript(scriptSrc);
            ScriptHelper.putScriptInApprovalQueueIfRequired(scriptSrc);
        }
        
        String output;
        if(ScriptHelper.isApproved(scriptSrc)){
            String[] slaves = resolveSlaveNames(node);
            output = ScriptHelper.runScript(slaves, scriptSrc, parameters);
        }
        else{
            LOGGER.log(Level.WARNING, "Script {0} was not approved yet, consider asking your administrator to approve it.", id);
            output = null;
            req.setAttribute("notApprovedYet", true);
        }
        
        tempScript.setParameters(parameters);
        req.setAttribute("script", tempScript);
        req.setAttribute("currentNode", node);
        req.setAttribute("output", output);
        req.setAttribute("canByPassScriptApproval", canByPassScriptApproval);
        req.getView(this, "runScript.jelly").forward(req, rsp);
    }
    
    public void doRun(StaplerRequest req, StaplerResponse rsp, @QueryParameter(fixEmpty = true) String script, @QueryParameter(fixEmpty = true) String node, @QueryParameter(fixEmpty = true) String contentType) throws IOException, ServletException {
        checkPermission(ScriptlerPermissions.RUN_SCRIPTS);
        String id = req.getRestOfPath();
        if (id.startsWith("/")) {
            id = id.substring(1);
        }
        
        if (StringUtils.isEmpty(id)) {
            throw new RuntimeException("Please specify a script id. Use /scriptler/run/<yourScriptId>");
        }
        
        Script tempScript = ScriptHelper.getScript(id, true);
        if (tempScript == null) {
            throw new RuntimeException("Unknown script: " + id + ". Use /scriptler/run/<yourScriptId>");
        }
        
        if (script == null) {
            script = tempScript.script;
        }
        
        if(!ScriptHelper.isApproved(script)){
            LOGGER.log(Level.WARNING, "Script {0} was not approved yet, consider asking your administrator to approve it.", id);
            rsp.sendError(HttpServletResponse.SC_FORBIDDEN, "Script not approved yet, consider asking your administrator to approve it.");
            return;
        }
        
        Collection<Parameter> paramArray = prepareParameters(req, tempScript);
        rsp.setContentType(contentType == null ? "text/plain" : contentType);
        final String[] slaves = resolveSlaveNames(node == null ? MASTER : node);
        if (slaves.length > 1) {
            rsp.getOutputStream().print(ScriptHelper.runScript(slaves, script, paramArray));
        }
        
        else {
            rsp.getOutputStream().print(ScriptHelper.runScript(slaves[0], script, paramArray));
        }
        
    }
    
    private Collection<Parameter> prepareParameters(StaplerRequest req, Script tempScript) {
        Map<String, Parameter> params = new HashMap<>();
        for (Parameter param : tempScript.getParameters()) {
            params.put(param.getName(), param);
        }
        
        for (Map.Entry<String, String[]> param : req.getParameterMap().entrySet()) {
            if (params.containsKey(param.getKey())) {
                params.put(param.getKey(), new Parameter(param.getKey(), param.getValue()[0]));
            }
            
        }
        
        return params.values();
    }
    
    private String[] resolveSlaveNames(String nameAlias) {
        List<String> slaves = null;
        if (nameAlias.equalsIgnoreCase(ALL) || nameAlias.equalsIgnoreCase(ALL_SLAVES)) {
            slaves = this.getSlaveNames();
            if (nameAlias.equalsIgnoreCase(ALL)) {
                if (!slaves.contains(MASTER)) {
                    slaves.add(MASTER);
                }
                
            }
            
            if (nameAlias.equalsIgnoreCase(ALL_SLAVES)) {
                slaves.remove(MASTER);
            }
            
        }
         else {
            slaves = Collections.singletonList(nameAlias);
        }
        
        return slaves.toArray(new String[0]);
    }
    
    public void doShowScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String id) throws IOException, ServletException {
        Script script = ScriptHelper.getScript(id, true);
        req.setAttribute("script", script);
        req.getView(this, "show.jelly").forward(req, rsp);
    }
    
    public void doEditScript(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String id) throws IOException, ServletException {
        checkPermission(ScriptlerPermissions.CONFIGURE);
        Script script = ScriptHelper.getScript(id, true);
        if(script == null || script.script == null){
            req.setAttribute("scriptNotFound", true);
        }
        else{
            boolean canByPassScriptApproval = Jenkins.get().hasPermission(Jenkins.RUN_SCRIPTS);
            if(!ScriptHelper.isApproved(script.script, false)){
                req.setAttribute("notApprovedYet", true);
            }
            
            req.setAttribute("canByPassScriptApproval", canByPassScriptApproval);
        }
        
        req.setAttribute("script", script);
        req.getView(this, "edit.jelly").forward(req, rsp);
    }
    
    public List<String> getSlaveAlias(Script script) {
        if (script.onlyMaster) {
            List<String> slaveNames = new ArrayList<>();
            slaveNames.add(MASTER);
            return slaveNames;
        }
        
        final List<String> slaveNames = getSlaveNames();
        if (!slaveNames.contains(MASTER)) {
            slaveNames.add(0, MASTER);
        }
        
        if (slaveNames.size() > 0) {
            if (!slaveNames.contains(ALL)) {
                slaveNames.add(1, ALL);
            }
            
            if (!slaveNames.contains(ALL_SLAVES)) {
                slaveNames.add(2, ALL_SLAVES);
            }
            
        }
        
        return slaveNames;
    }
    
    private List<String> getSlaveNames() {
        Computer[] computers = Jenkins.get().getComputers();
        List<String> slaves = new ArrayList<>();
        for (Computer c : computers) {
            slaves.add(c.getName());
        }
        
        return slaves;
    }
    
    public List<? extends ScriptInfoCatalog<ScriptInfo>> getCatalogs() {
        return ScriptInfoCatalog.all();
    }
    
    public ScriptInfoCatalog<? extends ScriptInfo> getCatalogByName(String catalogName) {
        if (StringUtils.isNotBlank(catalogName)) {
            for (ScriptInfoCatalog<ScriptInfo> sic : getCatalogs()) {
                final CatalogInfo info = sic.getInfo();
                if (catalogName.equals(info.name)) {
                    return sic;
                }
                
            }
            
        }
        
        return null;
    }
    
    public CatalogInfo getCatalogInfoByName(String catalogName) {
        if (StringUtils.isNotBlank(catalogName)) {
            for (ScriptInfoCatalog<ScriptInfo> sic : getCatalogs()) {
                final CatalogInfo info = sic.getInfo();
                if (catalogName.equals(info.name)) {
                    return info;
                }
                
            }
            
        }
        
        return null;
    }
    
    public static File getScriptDirectory() {
        return new File(getScriptlerHomeDirectory(), "scripts");
    }
    
    public static File getScriptlerHomeDirectory() {
        return new File(Jenkins.get().getRootDir(), "scriptler");
    }
    
    private void checkPermission(Permission permission) {
        Jenkins.get().checkPermission(permission);
    }
    
    private String fixFileName(String catalogName, String name) {
        if (!name.endsWith(".groovy")) {
            if (!StringUtils.isEmpty(catalogName)) {
                name += "." + catalogName;
            }
            
            name += ".groovy";
        }
        
        name = name.replace(" ", "_").trim();
        LOGGER.fine("set file name to: " + name);
        return name;
    }
    
}


