package org.jenkinsci.plugins.configfiles.buildwrapper;
import hudson.Extension;
import hudson.ExtensionPoint;
import hudson.Util;
import hudson.model.Describable;
import hudson.model.Descriptor;
import hudson.model.Item;
import hudson.model.ItemGroup;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import jenkins.model.Jenkins;
import org.jenkinsci.Symbol;
import org.jenkinsci.lib.configprovider.model.Config;
import org.jenkinsci.lib.configprovider.model.ConfigFile;
import org.jenkinsci.plugins.configfiles.ConfigFiles;
import org.jenkinsci.plugins.configfiles.utils.ConfigFileDetailLinkDescription;
import org.kohsuke.stapler.*;
import java.io.Serializable;
public class ManagedFile extends ConfigFile implements ExtensionPoint, Describable<ManagedFile>, Serializable {
    public String variable;
    public ManagedFile(String fileId) {
        super(fileId, null, false);
    }
    
    public ManagedFile(String fileId, String targetLocation, String variable, Boolean replaceTokens) {
        super(fileId, targetLocation, replaceTokens);
        this.variable = Util.fixEmptyAndTrim(variable);
    }
    
    public ManagedFile(String fileId, String targetLocation, String variable) {
        super(fileId, targetLocation, false);
        this.variable = Util.fixEmptyAndTrim(variable);
    }
    
    public void setTargetLocation(String targetLocation) {
        this.targetLocation = Util.fixEmptyAndTrim(targetLocation);
    }
    
    public String getVariable() {
        return this.variable;
    }
    
    public void setVariable(String variable) {
        this.variable = Util.fixEmptyAndTrim(variable);
    }
    
    public void setReplaceTokens(Boolean replaceTokens) {
        this.replaceTokens = replaceTokens != null ? replaceTokens : false;
    }
    
    public String toString() {
        return "[ManagedFile: id=" + getFileId() + ", targetLocation=" + getTargetLocation() + ", variable=" + variable + "]";
    }
    
    public Descriptor<ManagedFile> getDescriptor() {
        return (DescriptorImpl) Jenkins.get().getDescriptorOrDie(getClass());
    }
    
    public static class DescriptorImpl extends Descriptor<ManagedFile> {
        public String getDisplayName() {
            return "";
        }
        
        public ListBoxModel doFillFileIdItems(@AncestorInPath ItemGroup context) {
            ListBoxModel items = new ListBoxModel();
            items.add("please select", "");
            for (Config config : ConfigFiles.getConfigsInContext(context, null)) {
                items.add(config.name, config.id);
            }
            
            return items;
        }
        
        public HttpResponse doCheckFileId(StaplerRequest req, @AncestorInPath Item context, @QueryParameter String fileId) {
            final Config config = ConfigFiles.getByIdOrNull(context, fileId);
            if (config != null) {
                return ConfigFileDetailLinkDescription.getDescription(req, context, fileId);
            }
             else {
                return FormValidation.error("you must select a valid file");
            }
            
        }
        
    }
    
}


