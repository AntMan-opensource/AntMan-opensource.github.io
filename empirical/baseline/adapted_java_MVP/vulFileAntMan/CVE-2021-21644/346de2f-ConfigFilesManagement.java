package org.jenkinsci.plugins.configfiles;
import java.io.IOException;
import java.util.*;
import javax.servlet.ServletException;
import hudson.Extension;
import hudson.Util;
import hudson.model.Item;
import hudson.model.ManagementLink;
import hudson.security.Permission;
import hudson.util.FormValidation;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
import org.jenkinsci.lib.configprovider.ConfigProvider;
import org.jenkinsci.lib.configprovider.model.Config;
import org.jenkinsci.lib.configprovider.model.ContentType;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.HttpRedirect;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerProxy;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.interceptor.RequirePOST;
import org.kohsuke.stapler.verb.POST;
public class ConfigFilesManagement extends ManagementLink implements ConfigFilesUIContract, StaplerProxy {
    public static final String ICON_PATH = "/plugin/config-file-provider/images/cfg_logo.png";
    private ConfigFileStore store;
    public ConfigFilesManagement() {
        this.store = GlobalConfigFiles.get();
    }
    
    public String getDisplayName() {
        return Messages.display_name();
    }
    
    public String getDescription() {
        return Messages.description();
    }
    
    public String getIconFileName() {
        return ICON_PATH;
    }
    
    public String getIconUrl(String rootUrl) {
        if (rootUrl.endsWith("/")) {
            return rootUrl + ICON_PATH.substring(1);
        }
        
        return rootUrl + ICON_PATH;
    }
    
    public String getUrlName() {
        return "configfiles";
    }
    
    public String getCategoryName() {
        return "CONFIGURATION";
    }
    
    public ContentType getContentTypeForProvider(String providerId) {
        for (ConfigProvider provider : ConfigProvider.all()) {
            if (provider.getProviderId().equals(providerId)) {
                return provider.getContentType();
            }
            
        }
        
        return null;
    }
    
    public Map<ConfigProvider, Collection<Config>> getGroupedConfigs() {
        return store.getGroupedConfigs();
    }
    
    public List<ConfigProvider> getProviders() {
        return ConfigProvider.all();
    }
    
    public Collection<Config> getConfigs() {
        return Collections.unmodifiableCollection(store.getConfigs());
    }
    
    public HttpResponse doSaveConfig(StaplerRequest req) {
        checkPermission(Jenkins.ADMINISTER);
        try {
            JSONObject json = req.getSubmittedForm().getJSONObject("config");
            Config config = req.bindJSON(Config.class, json);
            if (!ID_PATTERN.matcher(config.id).matches()) {
                return FormValidation.error(Messages.ConfigFilesManagement_configIdContainsInvalidCharacters());
            }
            
            store.save(config);
        }
         catch (ServletException e) {
            e.printStackTrace();
        }
        
        return new HttpRedirect("index");
    }
    
    public void doShow(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String configId) throws IOException, ServletException {
        checkPermission(Jenkins.ADMINISTER);
        Config config = store.getById(configId);
        req.setAttribute("contentType", config.getProvider().getContentType());
        req.setAttribute("config", config);
        req.getView(this, JELLY_RESOURCES_PATH + "show.jelly").forward(req, rsp);
    }
    
    public void doEditConfig(StaplerRequest req, StaplerResponse rsp, @QueryParameter("id") String configId) throws IOException, ServletException {
        checkPermission(Jenkins.ADMINISTER);
        Config config = store.getById(configId);
        req.setAttribute("contentType", config.getProvider().getContentType());
        req.setAttribute("config", config);
        req.setAttribute("provider", config.getProvider());
        req.getView(this, JELLY_RESOURCES_PATH + "edit.jelly").forward(req, rsp);
    }
    
    public void doAddConfig(StaplerRequest req, StaplerResponse rsp, @QueryParameter("providerId") String providerId, @QueryParameter("configId") String configId) throws IOException, ServletException {
        checkPermission(Jenkins.ADMINISTER);
        FormValidation error = null;
        if (providerId == null || providerId.isEmpty()) {
            error = FormValidation.errorWithMarkup(Messages._ConfigFilesManagement_selectTypeOfFileToCreate().toString(req.getLocale()));
        }
        
        if (configId == null || configId.isEmpty()) {
            error = FormValidation.errorWithMarkup(Messages._ConfigFilesManagement_configIdCannotBeEmpty().toString(req.getLocale()));
        }
        
        if (!ID_PATTERN.matcher(configId).matches()) {
            error = FormValidation.error(Messages.ConfigFilesManagement_configIdContainsInvalidCharacters());
        }
        
        if (error != null) {
            req.setAttribute("error", error);
            checkPermission(Jenkins.ADMINISTER);
            req.setAttribute("providers", ConfigProvider.all());
            req.setAttribute("configId", configId);
            req.getView(this, JELLY_RESOURCES_PATH + "selectprovider.jelly").forward(req, rsp);
            return;
        }
        
        ConfigProvider provider = ConfigProvider.getByIdOrNull(providerId);
        if (provider == null) {
            throw new IllegalArgumentException("No provider found for id '" + providerId + "'");
        }
        
        req.setAttribute("contentType", provider.getContentType());
        req.setAttribute("provider", provider);
        Config config;
        if (Util.isOverridden(ConfigProvider.class, provider.getClass(), "newConfig", String.class)) {
            config = provider.newConfig(configId);
        }
         else {
            config = provider.newConfig();
        }
        
        config.setProviderId(provider.getProviderId());
        req.setAttribute("config", config);
        req.getView(this, JELLY_RESOURCES_PATH + "edit.jelly").forward(req, rsp);
    }
    
    public void doSelectProvider(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        checkPermission(Jenkins.ADMINISTER);
        req.setAttribute("providers", ConfigProvider.all());
        req.setAttribute("configId", UUID.randomUUID().toString());
        req.getView(this, JELLY_RESOURCES_PATH + "selectprovider.jelly").forward(req, rsp);
    }
    
    private void checkPermission(Permission permission) {
        Jenkins.get().checkPermission(permission);
    }
    
    public HttpResponse doRemoveConfig(StaplerRequest res, StaplerResponse rsp, @QueryParameter("id") String configId) throws IOException {
        checkPermission(Jenkins.ADMINISTER);
        store.remove(configId);
        return new HttpRedirect("index");
    }
    
    public FormValidation doCheckConfigId(@QueryParameter("configId") String configId) {
        if (configId == null || configId.isEmpty()) {
            return FormValidation.warning(Messages.ConfigFilesManagement_configIdCannotBeEmpty());
        }
        
        if (!ID_PATTERN.matcher(configId).matches()) {
            return FormValidation.error(Messages.ConfigFilesManagement_configIdContainsInvalidCharacters());
        }
        
        Config config = store.getById(configId);
        if (config == null) {
            return FormValidation.ok();
        }
         else {
            return FormValidation.warning(Messages.ConfigFilesManagement_configIdAlreadyUsed(config.name, config.id));
        }
        
    }
    
    public Object getTarget() {
        checkPermission(Item.EXTENDED_READ);
        return this;
    }
    
}


