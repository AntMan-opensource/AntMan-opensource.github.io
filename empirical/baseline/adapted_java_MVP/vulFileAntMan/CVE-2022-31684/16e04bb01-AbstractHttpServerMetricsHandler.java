package reactor.netty.http.server;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufHolder;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPromise;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.handler.codec.http2.Http2StreamChannel;
import reactor.netty.channel.ChannelOperations;
import reactor.util.Logger;
import reactor.util.Loggers;
import reactor.util.annotation.Nullable;
import java.time.Duration;
import java.util.function.Function;
abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
	private static final Logger log = Loggers.getLogger(AbstractHttpServerMetricsHandler.class);
	long dataReceived;
	long dataSent;
	long dataReceivedTime;
	long dataSentTime;
	final Function<String, String> uriTagValue;
	protected AbstractHttpServerMetricsHandler(@Nullable Function<String, String> uriTagValue) {
		this.uriTagValue = uriTagValue;
	}
	
	protected AbstractHttpServerMetricsHandler(AbstractHttpServerMetricsHandler copy) {
		this.dataReceived = copy.dataReceived;
		this.dataReceivedTime = copy.dataReceivedTime;
		this.dataSent = copy.dataSent;
		this.dataSentTime = copy.dataSentTime;
		this.uriTagValue = copy.uriTagValue;
	}
	
	public void channelActive(ChannelHandlerContext ctx) {
		 if (!(ctx.channel() instanceof Http2StreamChannel) && recorder() instanceof MicrometerHttpServerMetricsRecorder) {
			try {
				recorder().recordServerConnectionOpened(ctx.channel().localAddress());
			}
			
			catch (RuntimeException e) {
				log.warn("Exception caught while recording metrics.", e);
				 }
				 
		}
		
		ctx.fireChannelActive();
	}
	
	public void channelInactive(ChannelHandlerContext ctx) {
		if (!(ctx.channel() instanceof Http2StreamChannel) && recorder() instanceof MicrometerHttpServerMetricsRecorder) {
			try {
				recorder().recordServerConnectionClosed(ctx.channel().localAddress());
			}
			
			catch (RuntimeException e) {
				log.warn("Exception caught while recording metrics.", e);
				 }
				 
		}
		
		ctx.fireChannelInactive();
	}
	
	public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {
		try {
			if (msg instanceof HttpResponse) {
				if (((HttpResponse) msg).status().equals(HttpResponseStatus.CONTINUE)) {
					return;
				}
				
				dataSentTime = System.nanoTime();
			}
			
			dataSent += extractProcessedDataFromBuffer(msg);
			if (msg instanceof LastHttpContent) {
				promise.addListener(future -> {
					ChannelOperations<?, ?> channelOps = ChannelOperations.get(ctx.channel());
					if (channelOps instanceof HttpServerOperations) {
						HttpServerOperations ops = (HttpServerOperations) channelOps;
						try {
							recordWrite(ops, uriTagValue == null ? ops.path : uriTagValue.apply(ops.path), ops.method().name(), ops.status().codeAsText().toString());
						}
						
						catch (RuntimeException e) {
							log.warn("Exception caught while recording metrics.", e);
							 }
							 
						 if (ops.hostAddress() != null) {
							try {
								if (ops.isHttp2()) {
									recordClosedStream(ops);
								}
								
								else {
									recordInactiveConnection(ops);
								}
								
							}
							
							catch (RuntimeException e) {
								log.warn("Exception caught while recording metrics.", e);
								 }
								 
						}
						
					}
					
					dataSent = 0;
				}
				
);
			}
			
		}
		
		catch (RuntimeException e) {
			log.warn("Exception caught while recording metrics.", e);
			 }
			 
		finally {
			 ctx.write(msg, promise);
		}
		
	}
	
	public void channelRead(ChannelHandlerContext ctx, Object msg) {
		try {
			if (msg instanceof HttpRequest) {
				dataReceivedTime = System.nanoTime();
				ChannelOperations<?, ?> channelOps = ChannelOperations.get(ctx.channel());
				if (channelOps instanceof HttpServerOperations) {
					HttpServerOperations ops = (HttpServerOperations) channelOps;
					if (ops.isHttp2()) {
						recordOpenStream(ops);
					}
					
					else {
						recordActiveConnection(ops);
					}
					
				}
				
			}
			
			dataReceived += extractProcessedDataFromBuffer(msg);
			if (msg instanceof LastHttpContent) {
				ChannelOperations<?, ?> channelOps = ChannelOperations.get(ctx.channel());
				if (channelOps instanceof HttpServerOperations) {
					HttpServerOperations ops = (HttpServerOperations) channelOps;
					recordRead(ops, uriTagValue == null ? ops.path : uriTagValue.apply(ops.path), ops.method().name());
				}
				
				dataReceived = 0;
			}
			
		}
		
		catch (RuntimeException e) {
			log.warn("Exception caught while recording metrics.", e);
			 }
			 
		ctx.fireChannelRead(msg);
	}
	
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
		try {
			ChannelOperations<?, ?> channelOps = ChannelOperations.get(ctx.channel());
			if (channelOps instanceof HttpServerOperations) {
				HttpServerOperations ops = (HttpServerOperations) channelOps;
				 recordException(ops, uriTagValue == null ? ops.path : uriTagValue.apply(ops.path));
			}
			
		}
		
		catch (RuntimeException e) {
			log.warn("Exception caught while recording metrics.", e);
			 }
			 
		ctx.fireExceptionCaught(cause);
	}
	
	protected abstract HttpServerMetricsRecorder recorder();
	private long extractProcessedDataFromBuffer(Object msg) {
		if (msg instanceof ByteBufHolder) {
			return ((ByteBufHolder) msg).content().readableBytes();
		}
		
		else if (msg instanceof ByteBuf) {
			return ((ByteBuf) msg).readableBytes();
		}
		
		return 0;
	}
	
	protected void recordException(HttpServerOperations ops, String path) {
		 recorder().incrementErrorsCount(ops.remoteAddress(), path);
	}
	
	protected void recordRead(HttpServerOperations ops, String path, String method) {
		recorder().recordDataReceivedTime(path, method, Duration.ofNanos(System.nanoTime() - dataReceivedTime));
		 recorder().recordDataReceived(ops.remoteAddress(), path, dataReceived);
	}
	
	protected void recordWrite(HttpServerOperations ops, String path, String method, String status) {
		Duration dataSentTimeDuration = Duration.ofNanos(System.nanoTime() - dataSentTime);
		recorder().recordDataSentTime(path, method, status, dataSentTimeDuration);
		if (dataReceivedTime != 0) {
			recorder().recordResponseTime(path, method, status, Duration.ofNanos(System.nanoTime() - dataReceivedTime));
		}
		
		else {
			recorder().recordResponseTime(path, method, status, dataSentTimeDuration);
		}
		
		 recorder().recordDataSent(ops.remoteAddress(), path, dataSent);
	}
	
	protected void recordActiveConnection(HttpServerOperations ops) {
		recorder().recordServerConnectionActive(ops.hostAddress());
	}
	
	protected void recordInactiveConnection(HttpServerOperations ops) {
		recorder().recordServerConnectionInactive(ops.hostAddress());
	}
	
	protected void recordOpenStream(HttpServerOperations ops) {
		recorder().recordStreamOpened(ops.hostAddress());
	}
	
	protected void recordClosedStream(HttpServerOperations ops) {
		recorder().recordStreamClosed(ops.hostAddress());
	}
	
}


