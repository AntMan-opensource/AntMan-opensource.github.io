package org.apache.beam.sdk.io.mongodb;
import java.security.KeyStore;
import java.security.cert.X509Certificate;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
class SSLUtils {
  private static final TrustManager[] trustAllCerts = new TrustManager[] {         new X509TrustManager() {

          public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
          }
          
          public void checkClientTrusted(X509Certificate[] certs, String authType) {}
          public void checkServerTrusted(X509Certificate[] certs, String authType) {}
        }
        
      };
  static SSLContext ignoreSSLCertificate() {
    try {
      SSLContext sc = SSLContext.getInstance("TLS");
      sc.init(null, trustAllCerts, new java.security.SecureRandom());
      HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
      KeyStore ks = KeyStore.getInstance("JKS");
      ks.load( SSLUtils.class.getClassLoader().getResourceAsStream("resources/.keystore"), "changeit".toCharArray());
      KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      kmf.init(ks, "changeit".toCharArray());
      SSLContext ctx = SSLContext.getInstance("TLS");
      ctx.init(kmf.getKeyManagers(), trustAllCerts, null);
      SSLContext.setDefault(ctx);
      return ctx;
    }
     catch (Exception e) {
      throw new RuntimeException(e);
    }
    
  }
  
}


