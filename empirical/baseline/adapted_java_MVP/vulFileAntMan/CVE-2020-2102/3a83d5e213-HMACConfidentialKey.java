package jenkins.security;
import hudson.Util;
import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
public class HMACConfidentialKey extends ConfidentialKey {
    private volatile SecretKey key;
    private Mac mac;
    private final int length;
    public HMACConfidentialKey(String id, int length) {
        super(id);
        this.length = length;
    }
    
    public HMACConfidentialKey(String id) {
        this(id,Integer.MAX_VALUE);
    }
    
    public HMACConfidentialKey(Class owner, String shortName, int length) {
        this(owner.getName()+'.'+shortName,length);
    }
    
    public HMACConfidentialKey(Class owner, String shortName) {
        this(owner,shortName,Integer.MAX_VALUE);
    }
    
    public synchronized byte[] mac(byte[] message) {
        if (mac == null) {
            mac = createMac();
        }
        
        return chop(mac.doFinal(message));
    }
    
    public boolean checkMac(byte[] message, byte[] mac) {
        return Arrays.equals(mac(message),mac);
    }
    
    public String mac(String message) {
        try {
            return Util.toHexString(mac(message.getBytes("UTF-8")));
        }
         catch (UnsupportedEncodingException e) {
            throw new AssertionError(e);
        }
        
    }
    
    public boolean checkMac(String message, String mac) {
        return mac(message).equals(mac);
    }
    
    private byte[] chop(byte[] mac) {
        if (mac.length<=length)  return mac; 
        byte[] b = new byte[length];
        System.arraycopy(mac,0,b,0,b.length);
        return b;
    }
    
    public Mac createMac() {
        try {
            Mac mac = Mac.getInstance(ALGORITHM);
            mac.init(getKey());
            return mac;
        }
         catch (GeneralSecurityException e) {
            throw new Error(ALGORITHM+" not supported?",e);
        }
        
    }
    
    private SecretKey getKey() {
        if (key==null) {
            synchronized (this) {
                if (key==null) {
                    try {
                        byte[] encoded = load();
                        if (encoded==null) {
                            KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM);
                            SecretKey key = kg.generateKey();
                            store(encoded=key.getEncoded());
                        }
                        
                        key = new SecretKeySpec(encoded,ALGORITHM);
                    }
                     catch (IOException e) {
                        throw new Error("Failed to load the key: "+getId(),e);
                    }
                     catch (NoSuchAlgorithmException e) {
                        throw new Error("Failed to load the key: "+getId(),e);
                    }
                    
                }
                
            }
            
        }
        
        return key;
    }
    
    private static final String ALGORITHM = "HmacSHA256";
}


