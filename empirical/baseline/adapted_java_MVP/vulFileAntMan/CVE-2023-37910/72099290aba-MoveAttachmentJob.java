package org.xwiki.attachment.internal.refactoring.job;
import java.io.IOException;
import java.util.Objects;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Provider;
import org.xwiki.attachment.internal.AttachmentsManager;
import org.xwiki.attachment.internal.RedirectAttachmentClassDocumentInitializer;
import org.xwiki.attachment.refactoring.MoveAttachmentRequest;
import org.xwiki.attachment.refactoring.event.AttachmentMovedEvent;
import org.xwiki.component.annotation.Component;
import org.xwiki.localization.ContextualLocalizationManager;
import org.xwiki.model.reference.AttachmentReference;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.refactoring.internal.job.AbstractEntityJob;
import org.xwiki.refactoring.job.EntityJobStatus;
import org.xwiki.user.UserReference;
import org.xwiki.user.UserReferenceResolver;
import com.xpn.xwiki.XWiki;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.XWikiAttachment;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;
import static org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage;
import static org.xwiki.attachment.internal.RedirectAttachmentClassDocumentInitializer.SOURCE_NAME_FIELD;
import static org.xwiki.attachment.internal.RedirectAttachmentClassDocumentInitializer.TARGET_LOCATION_FIELD;
import static org.xwiki.attachment.internal.RedirectAttachmentClassDocumentInitializer.TARGET_NAME_FIELD;
public class MoveAttachmentJob extends AbstractEntityJob<MoveAttachmentRequest, EntityJobStatus<MoveAttachmentRequest>> {
    public static final String HINT = "refactoring/attachment/move";
    private Provider<XWikiContext> xcontextProvider;
    private EntityReferenceSerializer<String> entityReferenceSerializer;
    private ContextualLocalizationManager contextualLocalizationManager;
    private EntityReferenceSerializer<String> referenceSerializer;
    private AttachmentsManager attachmentsManager;
    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;
    public String getType() {
        return HINT;
    }
    
    protected void process(EntityReference source) {
        this.progressManager.pushLevelProgress(2, this);
        AttachmentReference destination = this.request.getProperty(MoveAttachmentRequest.DESTINATION);
        boolean autoRedirect = this.request.getProperty(MoveAttachmentRequest.AUTO_REDIRECT);
        XWiki wiki = this.xcontextProvider.get().getWiki();
        this.modelBridge.setContextUserReference(this.request.getUserReference());
        try {
            this.progressManager.startStep(this);
            moveAttachment(source, destination, autoRedirect, wiki);
            this.progressManager.endStep(this);
            this.progressManager.startStep(this);
            this.observationManager.notify(new AttachmentMovedEvent((AttachmentReference) source, destination), this, this.request);
            this.progressManager.endStep(this);
        }
         finally {
            this.progressManager.popLevelProgress(this);
        }
        
    }
    
    private void moveAttachment(EntityReference source, AttachmentReference destination, boolean autoRedirect, XWiki wiki) {
        try {
            XWikiDocument sourceDocument = wiki.getDocument(source.getParent(), this.xcontextProvider.get());
            XWikiDocument targetDocument = wiki.getDocument(destination.getParent(), this.xcontextProvider.get());
            XWikiAttachment sourceAttachment = sourceDocument.getExactAttachment(source.getName());
            UserReference authorUserReference = this.documentReferenceUserReferenceResolver.resolve(this.request.getUserReference());
            sourceDocument.getAuthors().setEffectiveMetadataAuthor(authorUserReference);
            sourceDocument.getAuthors().setOriginalMetadataAuthor(authorUserReference);
            targetDocument.getAuthors().setEffectiveMetadataAuthor(authorUserReference);
            targetDocument.getAuthors().setOriginalMetadataAuthor(authorUserReference);
            sourceDocument.removeAttachment(sourceAttachment);
            addAttachment(targetDocument, sourceAttachment, destination.getName());
            this.attachmentsManager.removeExistingRedirection(destination.getName(), targetDocument);
            if (autoRedirect) {
                initializeAutoRedirection(source, destination, sourceDocument);
            }
            
            if (Objects.equals(source.getParent(), destination.getParent())) {
                wiki.saveDocument(sourceDocument, this.contextualLocalizationManager.getTranslationPlain("attachment.job.saveDocument.inPlace", source.getName(), destination.getName()), this.xcontextProvider.get());
            }
             else {
                transactionalMove(wiki, sourceDocument, targetDocument, sourceAttachment.getFilename(), destination.getName());
            }
            
        }
         catch (XWikiException | IOException e) {
            this.logger.warn("Failed to move attachment [{}] to [{}]. Cause: [{}]", source, destination, getRootCauseMessage(e));
        }
        
    }
    
    private void transactionalMove(XWiki wiki, XWikiDocument sourceDocument, XWikiDocument targetDocument, String sourceFileName, String targetFileName) throws XWikiException, IOException {
        String sourceSerialized = this.referenceSerializer.serialize(sourceDocument.getDocumentReference());
        String destinationSerialized = this.referenceSerializer.serialize(targetDocument.getDocumentReference());
        String historyMessageSource = this.contextualLocalizationManager.getTranslationPlain("attachment.job.saveDocument.source", destinationSerialized);
        String historyMessageTarget = this.contextualLocalizationManager.getTranslationPlain("attachment.job.saveDocument.target", sourceSerialized);
        wiki.saveDocument(sourceDocument, historyMessageSource, this.xcontextProvider.get());
        try {
            wiki.saveDocument(targetDocument, historyMessageTarget, this.xcontextProvider.get());
        }
         catch (Exception e) {
            XWikiAttachment attachment = targetDocument.getExactAttachment(targetFileName);
            addAttachment(sourceDocument, attachment, sourceFileName);
            targetDocument.removeAttachment(attachment);
            String historyMessageRollbackTarget = this.contextualLocalizationManager.getTranslationPlain("attachment.job.rollbackDocument.target", sourceFileName, sourceSerialized);
            wiki.saveDocument(sourceDocument, historyMessageRollbackTarget, true, this.xcontextProvider.get());
            throw e;
        }
        
    }
    
    private void initializeAutoRedirection(EntityReference source, AttachmentReference destination, XWikiDocument sourceDocument) throws XWikiException {
        int idx = sourceDocument.createXObject(RedirectAttachmentClassDocumentInitializer.REFERENCE, this.xcontextProvider.get());
        BaseObject xObject = sourceDocument.getXObject(RedirectAttachmentClassDocumentInitializer.REFERENCE, idx);
        if (xObject != null) {
            xObject.setStringValue(SOURCE_NAME_FIELD, source.getName());
            xObject.setStringValue(TARGET_LOCATION_FIELD, this.entityReferenceSerializer.serialize(destination.getParent()));
            xObject.setStringValue(TARGET_NAME_FIELD, destination.getName());
        }
        
    }
    
    private void addAttachment(XWikiDocument targetDocument, XWikiAttachment oldAttachment, String newName) throws IOException, XWikiException {
        XWikiAttachment newAttachment = oldAttachment.clone(newName, this.xcontextProvider.get());
        newAttachment.setDoc(targetDocument);
        targetDocument.setAttachment(newAttachment);
    }
    
}


