package com.vaadin.flow.server;
import java.io.Serializable;
import java.util.Locale;
import java.util.function.BiConsumer;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.shared.ApplicationConstants;
public class HandlerHelper implements Serializable {
    static final SystemMessages DEFAULT_SYSTEM_MESSAGES = new SystemMessages();
    public enum RequestType {
        INIT(ApplicationConstants.REQUEST_TYPE_INIT), UIDL(ApplicationConstants.REQUEST_TYPE_UIDL), HEARTBEAT(ApplicationConstants.REQUEST_TYPE_HEARTBEAT), PUSH(ApplicationConstants.REQUEST_TYPE_PUSH);
        private String identifier;
        private RequestType(String identifier) {
            this.identifier = identifier;
        }
        
        public String getIdentifier() {
            return identifier;
        }
        
    }
    
    private HandlerHelper() {
    }
    
    public static boolean isRequestType(VaadinRequest request, RequestType requestType) {
        return requestType.getIdentifier().equals(request .getParameter(ApplicationConstants.REQUEST_TYPE_PARAMETER));
    }
    
    public static Locale findLocale(VaadinSession session, VaadinRequest request) {
        if (session == null) {
            session = VaadinSession.getCurrent();
        }
        
        if (session != null) {
            Locale locale = session.getLocale();
            if (locale != null) {
                return locale;
            }
            
        }
        
        if (request == null) {
            request = VaadinService.getCurrentRequest();
        }
        
        if (request != null) {
            Locale locale = request.getLocale();
            if (locale != null) {
                return locale;
            }
            
        }
        
        return Locale.getDefault();
    }
    
    public static void setResponseNoCacheHeaders( BiConsumer<String, String> headerSetter, BiConsumer<String, Long> longHeaderSetter) {
        headerSetter.accept("Cache-Control", "no-cache, no-store");
        headerSetter.accept("Pragma", "no-cache");
        longHeaderSetter.accept("Expires", 0L);
    }
    
    public static String getCancelingRelativePath(String pathToCancel) {
        StringBuilder sb = new StringBuilder(".");
        for (int i = 1; i < pathToCancel.length(); i++) {
            if (pathToCancel.charAt(i) == '/') {
                sb.append("/..");
            }
            
        }
        
        return sb.toString();
    }
    
}


