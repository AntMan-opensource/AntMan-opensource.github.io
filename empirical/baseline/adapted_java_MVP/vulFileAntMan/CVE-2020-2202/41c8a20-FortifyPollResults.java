package org.jenkinsci.plugins.fodupload.steps;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Set;
import com.google.common.collect.ImmutableSet;
import jenkins.model.Jenkins;
import org.jenkinsci.plugins.fodupload.SharedPollingBuildStep;
import org.jenkinsci.plugins.workflow.steps.StepContext;
import org.jenkinsci.plugins.workflow.steps.StepDescriptor;
import org.jenkinsci.plugins.workflow.steps.StepExecution;
import org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.BuildListener;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.Secret;
import org.kohsuke.stapler.verb.POST;
public class FortifyPollResults extends FortifyStep {
    private String releaseId;
    private String bsiToken;
    private int pollingInterval;
    private boolean overrideGlobalConfig;
    private int policyFailureBuildResultPreference;
    private String clientId;
    private String clientSecret;
    private String username;
    private String personalAccessToken;
    private String tenantId;
    private SharedPollingBuildStep commonBuildStep;
    public FortifyPollResults(String releaseId, String bsiToken, int pollingInterval) {
        super();
        this.releaseId = releaseId != null ? releaseId.trim() : "";
        this.bsiToken = bsiToken != null ? bsiToken.trim() : "";
        this.pollingInterval = pollingInterval;
    }
    
    public String getReleaseId() { return this.releaseId; }
    public String getBsiToken() {
        return this.bsiToken;
    }
    
    public int getPollingInterval() {
        return this.pollingInterval;
    }
    
    public boolean getOverrideGlobalConfig() {
        return overrideGlobalConfig;
    }
    
    public void setOverrideGlobalConfig(boolean overrideGlobalConfig) {
        this.overrideGlobalConfig = overrideGlobalConfig;
    }
    
    public int getPolicyFailureBuildResultPreference() {
        return policyFailureBuildResultPreference;
    }
    
    public void setPolicyFailureBuildResultPreference(int policyFailureBuildResultPreference) {
        this.policyFailureBuildResultPreference = policyFailureBuildResultPreference;
    }
    
    public String getClientId() {
        return clientId;
    }
    
    public void setClientId(String clientId) {
        this.clientId = clientId;
    }
    
    public String getClientSecret() {
        return clientSecret;
    }
    
    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }
    
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    public String getPersonalAccessToken() {
        return personalAccessToken;
    }
    
    public void setPersonalAccessToken(String personalAccessToken) {
        this.personalAccessToken = personalAccessToken;
    }
    
    public String getTenantId() {
        return tenantId;
    }
    
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }
    
    public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {
        PrintStream log = listener.getLogger();
        log.println("Fortify on Demand Poll Results PreBuild Running...");
        commonBuildStep = new SharedPollingBuildStep(releaseId, bsiToken, overrideGlobalConfig, pollingInterval, policyFailureBuildResultPreference, clientId, clientSecret, username, personalAccessToken, tenantId);
        return true;
    }
    
    public StepExecution start(StepContext context) throws Exception {
        return new FortifyPollResults.Execution(this, context);
    }
    
    public void perform(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws InterruptedException, IOException {
        PrintStream log = listener.getLogger();
        log.println("Fortify on Demand Poll Results Running...");
        commonBuildStep = new SharedPollingBuildStep(releaseId, bsiToken, overrideGlobalConfig, pollingInterval, policyFailureBuildResultPreference, clientId, clientSecret, username, personalAccessToken, tenantId);
        commonBuildStep.perform(build, workspace, launcher, listener);
    }
    
    public static class DescriptorImpl extends StepDescriptor {
        public String getDisplayName() {
            return "Poll Fortify on Demand for Results";
        }
        
        public String getFunctionName() {
            return "fodPollResults";
        }
        
        public Set<? extends Class<?>> getRequiredContext() {
            return ImmutableSet.of(Run.class, FilePath.class, Launcher.class, TaskListener.class);
        }
        
        @SuppressWarnings({"ThrowableResultOfMethodCallIgnored", "unused"})
        public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(SharedPollingBuildStep.USERNAME) final String username, @QueryParameter(SharedPollingBuildStep.PERSONAL_ACCESS_TOKEN) final String personalAccessToken, @QueryParameter(SharedPollingBuildStep.TENANT_ID) final String tenantId) {
            Jenkins.get().checkPermission(Jenkins.ADMINISTER);
            return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);
        }
        
        public ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {
            return SharedPollingBuildStep.doFillPolicyFailureBuildResultPreferenceItems();
        }
        
        public ListBoxModel doFillUsernameItems() {
            return SharedPollingBuildStep.doFillStringCredentialsItems();
        }
        
        public ListBoxModel doFillPersonalAccessTokenItems() {
            return SharedPollingBuildStep.doFillStringCredentialsItems();
        }
        
        public ListBoxModel doFillTenantIdItems() {
            return SharedPollingBuildStep.doFillStringCredentialsItems();
        }
        
    }
    
    private static class Execution extends SynchronousNonBlockingStepExecution<Void> {
        private static final long serialVersionUID = 1L;
        private transient FortifyPollResults polling;
        protected Execution(FortifyPollResults polling, StepContext context) {
            super(context);
            this.polling = polling;
        }
        
        protected Void run() throws Exception {
            getContext().get(TaskListener.class).getLogger().println("Running fodPollResults step");
            polling.perform(getContext().get(Run.class), getContext().get(FilePath.class), getContext().get(Launcher.class), getContext().get(TaskListener.class));
            return null;
        }
        
    }
    
}


