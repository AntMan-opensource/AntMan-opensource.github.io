package org.jenkinsci.plugins.fodupload;
import com.fortify.fod.parser.BsiToken;
import com.fortify.fod.parser.BsiTokenParser;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.model.AbstractProject;
import hudson.model.Result;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.tasks.Recorder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import hudson.util.Secret;
import jenkins.model.GlobalConfiguration;
import jenkins.tasks.SimpleBuildStep;
import org.jenkinsci.plugins.fodupload.polling.PollReleaseStatusResult;
import org.jenkinsci.plugins.fodupload.polling.ScanStatusPoller;
import org.kohsuke.stapler.DataBoundConstructor;
import javax.annotation.Nonnull;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URISyntaxException;
import jenkins.model.Jenkins;
import org.jenkinsci.plugins.fodupload.models.AuthenticationModel;
import org.jenkinsci.plugins.fodupload.models.FodEnums;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.verb.POST;
import static org.jenkinsci.plugins.fodupload.SharedPollingBuildStep.*;
public class PollingBuildStep extends Recorder implements SimpleBuildStep {
    SharedPollingBuildStep sharedBuildStep;
    public PollingBuildStep(String releaseId, String bsiToken, boolean overrideGlobalConfig, int pollingInterval, int policyFailureBuildResultPreference, String clientId, String clientSecret, String username, String personalAccessToken, String tenantId) {
        sharedBuildStep = new SharedPollingBuildStep(releaseId, bsiToken, overrideGlobalConfig, pollingInterval, policyFailureBuildResultPreference, clientId, clientSecret, username, personalAccessToken, tenantId);
    }
    
    public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath filePath, @Nonnull Launcher launcher, @Nonnull TaskListener taskListener) throws InterruptedException, IOException {
        sharedBuildStep.perform(run, filePath, launcher, taskListener);
    }
    
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }
    
    public String getReleaseId() {
        return sharedBuildStep.getReleaseId();
    }
    
    public String getBsiToken() {
        return sharedBuildStep.getBsiToken();
    }
    
    @SuppressWarnings({"unused", "WeakerAccess"})
    public int getPollingInterval() {
        return sharedBuildStep.getPollingInterval();
    }
    
    public int getPolicyFailureBuildResultPreference() {
        return sharedBuildStep.getPolicyFailureBuildResultPreference();
    }
    
    public String getUsername() {
        return sharedBuildStep.getAuthModel().getUsername();
    }
    
    public String getPersonalAccessToken() {
        return sharedBuildStep.getAuthModel().getPersonalAccessToken();
    }
    
    public String getTenantId() {
        return sharedBuildStep.getAuthModel().getTenantId();
    }
    
    public boolean getOverrideGlobalConfig() {
        return sharedBuildStep.getAuthModel().getOverrideGlobalConfig();
    }
    
    public PollingStepDescriptor getDescriptor() {
        return (PollingStepDescriptor) super.getDescriptor();
    }
    
    public static final class PollingStepDescriptor extends BuildStepDescriptor<Publisher> {
        public PollingStepDescriptor() {
            super();
            load();
        }
        
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }
        
        public String getDisplayName() {
            return "Poll Fortify on Demand for Results";
        }
        
        public FormValidation doCheckReleaseId(@QueryParameter String releaseId, @QueryParameter String bsiToken) {
            Jenkins.get().checkPermission(Jenkins.ADMINISTER);
            return SharedPollingBuildStep.doCheckReleaseId(releaseId, bsiToken);
        }
        
        public FormValidation doCheckBsiToken(@QueryParameter String bsiToken, @QueryParameter String releaseId) {
            Jenkins.get().checkPermission(Jenkins.ADMINISTER);
            return SharedPollingBuildStep.doCheckBsiToken(bsiToken, releaseId);
        }
        
        public FormValidation doCheckPollingInterval(@QueryParameter String pollingInterval) {
            return SharedPollingBuildStep.doCheckPollingInterval(pollingInterval);
        }
        
        @SuppressWarnings({"ThrowableResultOfMethodCallIgnored", "unused"})
        public FormValidation doTestPersonalAccessTokenConnection(@QueryParameter(USERNAME) final String username, @QueryParameter(PERSONAL_ACCESS_TOKEN) final String personalAccessToken, @QueryParameter(TENANT_ID) final String tenantId) {
            Jenkins.get().checkPermission(Jenkins.ADMINISTER);
            return SharedPollingBuildStep.doTestPersonalAccessTokenConnection(username, personalAccessToken, tenantId);
        }
        
        public ListBoxModel doFillPolicyFailureBuildResultPreferenceItems() {
            return SharedPollingBuildStep.doFillPolicyFailureBuildResultPreferenceItems();
        }
        
        public ListBoxModel doFillUsernameItems() {
            return SharedPollingBuildStep.doFillStringCredentialsItems();
        }
        
        public ListBoxModel doFillPersonalAccessTokenItems() {
            return SharedPollingBuildStep.doFillStringCredentialsItems();
        }
        
        public ListBoxModel doFillTenantIdItems() {
            return SharedPollingBuildStep.doFillStringCredentialsItems();
        }
        
    }
    
}


