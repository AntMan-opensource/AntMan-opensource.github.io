package org.elasticsearch.search.internal;
import org.elasticsearch.common.lease.Releasable;
import org.elasticsearch.common.lease.Releasables;
import org.elasticsearch.index.IndexService;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.search.RescoreDocIds;
import org.elasticsearch.search.dfs.AggregatedDfs;
import java.util.Objects;
public class LegacyReaderContext extends ReaderContext {
    private final ShardSearchRequest shardSearchRequest;
    private final ScrollContext scrollContext;
    private AggregatedDfs aggregatedDfs;
    private RescoreDocIds rescoreDocIds;
    private Engine.Searcher searcher;
    private Releasable onClose;
    public LegacyReaderContext(long id, IndexService indexService, IndexShard indexShard, Engine.SearcherSupplier reader, ShardSearchRequest shardSearchRequest, long keepAliveInMillis) {
        super(id, indexService, indexShard, reader, keepAliveInMillis, false);
        assert shardSearchRequest.readerId() == null;
        assert shardSearchRequest.keepAlive() == null;
        this.shardSearchRequest = Objects.requireNonNull(shardSearchRequest);
        if (shardSearchRequest.scroll() != null) {
            this.scrollContext = new ScrollContext();
        }
         else {
            this.scrollContext = null;
        }
        
    }
    
    public Engine.Searcher acquireSearcher(String source) {
        if (scrollContext != null && "search".equals(source)) {
            if (searcher == null) {
                Engine.Searcher delegate = searcherSupplier.acquireSearcher(source);
                onClose = delegate::close;
                searcher = new Engine.Searcher(delegate.source(), delegate.getDirectoryReader(), delegate.getSimilarity(), delegate.getQueryCache(), delegate.getQueryCachingPolicy(), () -> {});
            }
            
            return searcher;
        }
        
        return super.acquireSearcher(source);
    }
    
    @Override
    void doClose() {
        Releasables.close(onClose, super::doClose);
    }
    
    public ShardSearchRequest getShardSearchRequest(ShardSearchRequest other) {
        return shardSearchRequest;
    }
    
    public ScrollContext scrollContext() {
        return scrollContext;
    }
    
    public AggregatedDfs getAggregatedDfs(AggregatedDfs other) {
        return aggregatedDfs;
    }
    
    public void setAggregatedDfs(AggregatedDfs aggregatedDfs) {
        this.aggregatedDfs = aggregatedDfs;
    }
    
    public RescoreDocIds getRescoreDocIds(RescoreDocIds other) {
        return rescoreDocIds;
    }
    
    public void setRescoreDocIds(RescoreDocIds rescoreDocIds) {
        this.rescoreDocIds = rescoreDocIds;
    }
    
    public boolean singleSession() {
        return scrollContext == null || scrollContext.scroll == null;
    }
    
}


