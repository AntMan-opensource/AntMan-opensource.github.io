package org.elasticsearch.search.internal;
import org.elasticsearch.common.UUIDs;
import org.elasticsearch.common.lease.Releasable;
import org.elasticsearch.common.lease.Releasables;
import org.elasticsearch.common.util.concurrent.AbstractRefCounted;
import org.elasticsearch.index.IndexService;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.search.RescoreDocIds;
import org.elasticsearch.search.dfs.AggregatedDfs;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
public class ReaderContext implements Releasable {
    private final ShardSearchContextId id;
    private final IndexService indexService;
    private final IndexShard indexShard;
    protected final Engine.SearcherSupplier searcherSupplier;
    private final AtomicBoolean closed = new AtomicBoolean(false);
    private final boolean singleSession;
    private final AtomicLong keepAlive;
    private final AtomicLong lastAccessTime;
    private final AbstractRefCounted refCounted;
    private final List<Releasable> onCloses = new CopyOnWriteArrayList<>();
    private final long startTimeInNano = System.nanoTime();
    private Map<String, Object> context;
    public ReaderContext(long id, IndexService indexService, IndexShard indexShard, Engine.SearcherSupplier searcherSupplier, long keepAliveInMillis, boolean singleSession) {
        this.id = new ShardSearchContextId(UUIDs.base64UUID(), id);
        this.indexService = indexService;
        this.indexShard = indexShard;
        this.searcherSupplier = searcherSupplier;
        this.singleSession = singleSession;
        this.keepAlive = new AtomicLong(keepAliveInMillis);
        this.lastAccessTime = new AtomicLong(nowInMillis());
        this.refCounted = new AbstractRefCounted("reader_context") {
            protected void closeInternal() {
                doClose();
            }
            
        };
    }
    
    private long nowInMillis() {
        return indexShard.getThreadPool().relativeTimeInMillis();
    }
    
    public final void close() {
        if (closed.compareAndSet(false, true)) {
            refCounted.decRef();
        }
        
    }
    
    void doClose() {
        Releasables.close(Releasables.wrap(onCloses), searcherSupplier);
    }
    
    public void addOnClose(Releasable releasable) {
        onCloses.add(releasable);
    }
    
    public ShardSearchContextId id() {
        return id;
    }
    
    public IndexService indexService() {
        return indexService;
    }
    
    public IndexShard indexShard() {
        return indexShard;
    }
    
    public Engine.Searcher acquireSearcher(String source) {
        return searcherSupplier.acquireSearcher(source);
    }
    
    public void keepAlive(long keepAlive) {
        this.keepAlive.updateAndGet(curr -> Math.max(curr, keepAlive));
    }
    
    public Releasable markAsUsed() {
        refCounted.incRef();
        return Releasables.releaseOnce(() -> {
            this.lastAccessTime.updateAndGet(curr -> Math.max(curr, nowInMillis()));
            refCounted.decRef();
        }
        
);
    }
    
    public boolean isExpired() {
        if (refCounted.refCount() > 1) {
            return false; 
        }
        
        final long elapsed = nowInMillis() - lastAccessTime.get();
        return elapsed > keepAlive.get();
    }
    
    public ShardSearchRequest getShardSearchRequest(ShardSearchRequest other) {
        return Objects.requireNonNull(other);
    }
    
    public ScrollContext scrollContext() {
        return null;
    }
    
    public AggregatedDfs getAggregatedDfs(AggregatedDfs other) {
        return other;
    }
    
    public void setAggregatedDfs(AggregatedDfs aggregatedDfs) {
    }
    
    public RescoreDocIds getRescoreDocIds(RescoreDocIds other) {
        return Objects.requireNonNull(other);
    }
    
    public void setRescoreDocIds(RescoreDocIds rescoreDocIds) {
    }
    
    public boolean singleSession() {
        return singleSession;
    }
    
    public <T> T getFromContext(String key) {
        return context != null ? (T) context.get(key) : null;
    }
    
    public void putInContext(String key, Object value) {
        if (context == null) {
            context = new HashMap<>();
        }
        
        context.put(key, value);
    }
    
    public long getStartTimeInNano() {
        return startTimeInNano;
    }
    
}


