package hudson.plugins.jobConfigHistory;
import com.github.difflib.DiffUtils;
import com.github.difflib.UnifiedDiffUtils;
import com.github.difflib.patch.AbstractDelta;
import com.github.difflib.patch.Patch;
import com.google.common.collect.Lists;
import hudson.XmlFile;
import hudson.model.Action;
import hudson.plugins.jobConfigHistory.SideBySideView.Line;
import hudson.security.AccessControlled;
import hudson.util.MultipartFormDataParser;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.Stapler;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;
import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.builder.Input;
import org.xmlunit.diff.Comparison;
import org.xmlunit.diff.ComparisonResult;
import org.xmlunit.diff.ComparisonType;
import org.xmlunit.diff.DefaultNodeMatcher;
import org.xmlunit.diff.Diff;
import org.xmlunit.diff.Difference;
import org.xmlunit.diff.DifferenceEvaluator;
import org.xmlunit.diff.ElementSelectors;
import javax.servlet.ServletException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import static java.util.logging.Level.WARNING;
public abstract class JobConfigHistoryBaseAction implements Action {
    private static final Logger LOG = Logger.getLogger(JobConfigHistoryBaseAction.class.getName());
    private final TransformerFactory transformerFactory = TransformerFactory.newInstance();
    public String getDisplayName() {
        return Messages.displayName();
    }
    
    public String getUrlName() {
        return JobConfigHistoryConsts.URLNAME;
    }
    
    public final String getOutputType() {
        if (("xml").equalsIgnoreCase(getRequestParameter("type"))) {
            return "xml";
        }
        
        return "plain";
    }
    
    protected boolean checkTimestamp(String timestamp) {
        if (timestamp == null || "null".equals(timestamp)) {
            return false;
        }
        
        PluginUtils.parsedDate(timestamp);
        return true;
    }
    
    protected String getRequestParameter(final String parameterName) {
        return getCurrentRequest().getParameter(parameterName);
    }
    
    protected abstract void checkConfigurePermission();
    public abstract boolean hasAdminPermission();
    public abstract boolean hasDeleteEntryPermission();
    protected abstract void checkDeleteEntryPermission();
    protected abstract boolean hasConfigurePermission();
    public abstract int getRevisionAmount();
    protected abstract AccessControlled getAccessControlledObject();
    public final List<Line> getDiffLines(List<String> diffLines) {
        try {
            return new GetDiffLines(diffLines).get();
        }
         catch (Exception e) {
            LOG.log(Level.SEVERE, "DiffException occurred while trying to get diffs: {0}", e.getMessage());
            return Collections.emptyList();
        }
        
    }
    
    protected final String getDiffAsString(final File file1, final File file2, final String[] file1Lines, final String[] file2Lines) {
        return getDiffAsString(file1, file2, file1Lines, file2Lines, false);
    }
    
    private Diff getVersionDiffsOnly(final String file1Str, final String file2Str) {
        DifferenceEvaluator versionDifferenceEvaluator = new DifferenceEvaluator() {              
            public ComparisonResult evaluate(Comparison comparison, ComparisonResult comparisonResult) {
                if (comparison.getType() != ComparisonType.ATTR_VALUE) {
                    return ComparisonResult.EQUAL;
                }
                
                Node controlNode = comparison.getControlDetails().getTarget();
                Node testNode = comparison.getTestDetails().getTarget();
                if (controlNode == null || testNode == null) {
                    return ComparisonResult.EQUAL;
                }
                
                String[] controlValue = controlNode.getNodeValue().split("@");
                String[] testValue = testNode.getNodeValue().split("@");
                if (!controlValue[0].equals(testValue[0]) || controlValue.length != 2 || testValue.length != 2) {
                    return ComparisonResult.EQUAL;
                }
                
                if (controlValue[1].equals(testValue[1])) {
                    return ComparisonResult.EQUAL;
                }
                 else {
                    return ComparisonResult.DIFFERENT;
                }
                
            }
            
        };
        return DiffBuilder.compare(Input.fromString(file1Str)).withTest(Input.fromString(file2Str)) .ignoreWhitespace() .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)) .withDifferenceEvaluator(versionDifferenceEvaluator) .build();
    }
    
    public String getShowVersionDiffs() {
        String showVersionDiffs = this.getRequestParameter("showVersionDiffs");
        return (showVersionDiffs == null) ? "True" : showVersionDiffs;
    }
    
    public final List<Line> getLines() throws IOException {
        final boolean hideVersionDiffs = !Boolean.parseBoolean(getShowVersionDiffs());
        return getLines(hideVersionDiffs);
    }
    
    public abstract List<Line> getLines(boolean useRegex) throws IOException;
    private String reformatAndConcatStringArray(String[] arr) {
        String ret = "";
        final String firstLineRegex = "<[^<>]*>";
        final String firstLine = arr[0];
        if (firstLine.matches(firstLineRegex)) {
            ret += firstLine;
        }
         else {
            String tagThatBelongsInTheNextLine = firstLine.replaceFirst(firstLineRegex, "");
            ret += firstLine.substring(0, firstLine.length() - tagThatBelongsInTheNextLine.length()) + "\n" + tagThatBelongsInTheNextLine + "\n";
        }
        
        for (int i = 1; i < arr.length; ++i) {
            if (i < arr.length - 1) {
                ret = ret.concat(arr[i]).concat("\n");
            }
             else {
                ret = ret.concat(arr[i]);
            }
            
        }
        
        return ret;
    }
    
    protected final String getDiffAsString(final File file1, final File file2, final String[] file1Lines, final String[] file2Lines, final boolean hideVersionDiffs) {
        final Patch<String> patch;
        try {
            patch = DiffUtils.diff(Arrays.asList(file1Lines), Arrays.asList(file2Lines));
        }
         catch (Exception e) {
            LOG.log(Level.SEVERE, "DiffException occurred while trying to calculate diffs: {0}", e.getMessage());
            return "";
        }
        
        if (hideVersionDiffs) {
            Diff versionDiffs = getVersionDiffsOnly(reformatAndConcatStringArray(file1Lines), reformatAndConcatStringArray(file2Lines));
            List<AbstractDelta<String>> deltasToBeRemovedAfterTheMainLoop = new LinkedList<>();
            for (AbstractDelta<String> delta : patch.getDeltas()) {
                List<String> originalLines = Lists.newArrayList(delta.getSource().getLines());
                List<String> revisedLines = Lists.newArrayList(delta.getTarget().getLines());
                for (Difference versionDifference : versionDiffs.getDifferences()) {
                    String controlValue = versionDifference.getComparison().getControlDetails().getValue().toString();
                    String testValue = versionDifference.getComparison().getTestDetails().getValue().toString();
                    for (int oriLineNumber = 0; oriLineNumber < originalLines.size(); oriLineNumber++) {
                        String currentOriLine = originalLines.get(oriLineNumber);
                        String otherValue = "";
                        if (currentOriLine.contains(controlValue)) {
                            otherValue = testValue;
                        }
                         else if (currentOriLine.contains(testValue)) {
                            otherValue = controlValue;
                        }
                         else continue;
                        for (int revLineNumber = 0; revLineNumber < revisedLines.size(); revLineNumber++) {
                            String currentRevLine = revisedLines.get(revLineNumber);
                            if (currentRevLine.contains(otherValue)) {
                                originalLines.remove(oriLineNumber);
                                revisedLines.remove(revLineNumber);
                            }
                            
                        }
                        
                    }
                    
                }
                
                if (originalLines.isEmpty() && revisedLines.isEmpty()) {
                    deltasToBeRemovedAfterTheMainLoop.add(delta);
                }
                
                delta.getSource().setLines(originalLines);
                delta.getTarget().setLines(revisedLines);
            }
            
            patch.getDeltas().removeAll(deltasToBeRemovedAfterTheMainLoop);
        }
        
        return StringUtils.join( UnifiedDiffUtils.generateUnifiedDiff( file1.getPath(), file2.getPath(), Arrays.asList(file1Lines), patch, 3 ), "\n" ) + "\n";
    }
    
    public List<Integer> getRelevantPageNums(int currentPageNum) {
        return getRelevantPageNums(currentPageNum, getMaxPageNum());
    }
    
    public List<Integer> getRelevantPageNums(int currentPageNum, int maxPageNum) {
        final int epsilon = JobConfigHistoryConsts.PAGING_EPSILON;
        final HashSet<Integer> pageNumsSet = new HashSet<>();
        pageNumsSet.add(0);
        pageNumsSet.add(maxPageNum);
        if (maxPageNum > 10) {
            pageNumsSet.add(currentPageNum);
            for (int i = currentPageNum; i <= Math.min(currentPageNum + epsilon, maxPageNum); i++) {
                pageNumsSet.add(i);
            }
            
            for (int i = currentPageNum; i >= Math.max(0, currentPageNum - epsilon); i--) {
                pageNumsSet.add(i);
            }
            
        }
         else {
            for (int i = 0; i <= maxPageNum; i++) {
                pageNumsSet.add(i);
            }
            
        }
        
        ArrayList<Integer> pageNumsList = new ArrayList<>(pageNumsSet);
        pageNumsList.sort(Comparator.naturalOrder());
        int lastNumber = pageNumsList.get(0);
        for (int i = 1; i < pageNumsList.size(); i++) {
            int thisNumber = pageNumsList.get(i);
            if (lastNumber + 1 != thisNumber) {
                pageNumsList.add(i++, -1);
            }
            
            lastNumber = thisNumber;
        }
        
        return pageNumsList;
    }
    
    public int getMaxEntriesPerPage() {
        final String maxEntriesPerPage = getPlugin().getMaxEntriesPerPage();
        try {
            return (maxEntriesPerPage == null || maxEntriesPerPage.equals("")) ? JobConfigHistoryConsts.DEFAULT_MAX_ENTRIES_PER_PAGE : Integer.parseInt(maxEntriesPerPage);
        }
         catch (NumberFormatException e) {
            LOG.log(WARNING, "Configured MaxEntriesPerPage does not represent an integer: {0}. Falling back to default.", maxEntriesPerPage);
            return JobConfigHistoryConsts.DEFAULT_MAX_ENTRIES_PER_PAGE;
        }
        
    }
    
    public int getMaxPageNum() {
        String entriesPerPageStr = getCurrentRequest().getParameter("entriesPerPage");
        if (entriesPerPageStr != null && entriesPerPageStr.equals("all")) return 0;
        int entriesPerPage = (entriesPerPageStr != null && !entriesPerPageStr.equals("")) ? Integer.parseInt(entriesPerPageStr) : getMaxEntriesPerPage();
        int revisionAmount = getRevisionAmount();
        int div = revisionAmount / entriesPerPage;
        return (revisionAmount % entriesPerPage) == 0 ? div - 1 : div;
    }
    
    public void doDiffFiles(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
        String timestamp1 = req.getParameter("timestamp1");
        String timestamp2 = req.getParameter("timestamp2");
        if (PluginUtils.parsedDate(timestamp1).after(PluginUtils.parsedDate(timestamp2))) {
            timestamp1 = req.getParameter("timestamp2");
            timestamp2 = req.getParameter("timestamp1");
        }
        
        rsp.sendRedirect("showDiffFiles?timestamp1=" + timestamp1 + "&timestamp2=" + timestamp2);
    }
    
    public final void doDiffFilesPrevNext(StaplerRequest req, StaplerResponse rsp) throws IOException {
        final String timestamp1 = req.getParameter("timestamp1");
        final String timestamp2 = req.getParameter("timestamp2");
        rsp.sendRedirect("showDiffFiles?timestamp1=" + timestamp1 + "&timestamp2=" + timestamp2);
    }
    
    protected StaplerRequest getCurrentRequest() {
        return Stapler.getCurrentRequest();
    }
    
    protected JobConfigHistory getPlugin() {
        return PluginUtils.getPlugin();
    }
    
    protected HistoryDao getHistoryDao() {
        return PluginUtils.getHistoryDao();
    }
    
    private Writer sort(File file) throws IOException {
        try (Reader source = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
            InputStream xslt = JobConfigHistoryBaseAction.class.getResourceAsStream("xslt/sort.xslt");
            Objects.requireNonNull(xslt);
            Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));
            Writer result = new StringWriter();
            transformer.transform(new SAXSource(new InputSource(source)), new StreamResult(result));
            transformer.reset();
            return result;
        }
         catch (TransformerFactoryConfigurationError | TransformerException | NullPointerException e) {
            LogRecord lr = new LogRecord(Level.WARNING, "Diff may have extra changes for XML config {0}");
            lr.setParameters(new Object[]{file.toPath()});
            lr.setThrown(e);
            LOG.log(lr);
        }
        
        Writer fallback = new StringWriter();
        new XmlFile(file).writeRawTo(fallback);
        return fallback;
    }
    
    protected final List<Line> getLines(XmlFile leftConfig, XmlFile rightConfig, boolean hideVersionDiffs) throws IOException {
        final String[] leftLines = sort(leftConfig.getFile()).toString().split("\\n");
        final String[] rightLines = sort(rightConfig.getFile()).toString().split("\\n");
        final String diffAsString = getDiffAsString(leftConfig.getFile(), rightConfig.getFile(), leftLines, rightLines, hideVersionDiffs);
        final List<String> diffLines = Arrays.asList(diffAsString.split("\n"));
        return getDiffLines(diffLines);
    }
    
}


