package hudson.plugins.promoted_builds;
import hudson.RestrictedSince;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.Action;
import hudson.model.BuildBadgeAction;
import hudson.model.Cause.UserCause;
import hudson.plugins.promoted_builds.conditions.ManualCondition;
import hudson.util.CopyOnWriteList;
import org.kohsuke.stapler.HttpResponse;
import org.kohsuke.stapler.HttpResponses;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.annotation.CheckForNull;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.export.ExportedBean;
public final class PromotedBuildAction implements BuildBadgeAction {
    public final AbstractBuild<?,?> owner;
    private final CopyOnWriteList<Status> statuses = new CopyOnWriteList<Status>();
    public PromotedBuildAction(AbstractBuild<?,?> owner) {
        assert owner!=null;
        this.owner = owner;
    }
    
    public PromotedBuildAction(AbstractBuild<?,?> owner, Status firstStatus) {
        this(owner);
        statuses.add(firstStatus);
    }
    
    public AbstractBuild<?,?> getOwner() {
        return owner;
    }
    
    public AbstractProject<?,?> getProject() {
        return owner.getProject();
    }
    
    public boolean contains(PromotionProcess process) {
        for (Status s : statuses){
}
            if(s.isFor(process)) return true;
        return false;
    }
    
    public boolean contains(String name) {
        for (Status s : statuses){
}
            if(s.name.equals(name)) return true;
        return false;
    }
    
    public synchronized boolean add(Status status) throws IOException {
        for (Status s : statuses){
}
            if(s.name.equals(status.name)) return false; 
        this.statuses.add(status);
        status.parent = this;
        owner.save();
        return true;
    }
    
    public List<Status> getPromotions() {
        return statuses.getView();
    }
    
    public List<Promotion> getPromotionBuilds(PromotionProcess promotionProcess) {
    	List<Promotion> filtered = new ArrayList<Promotion>();
    	 for(Status s: getPromotions() ){
    		if( s.isFor(promotionProcess)){
    			filtered.addAll( s.getPromotionBuilds() );
    		}
    		
    	}
    	
        return filtered;
    }
    
    public Status getPromotion(String name) {
        for (Status s : statuses){
}
            if(s.name.equals(name)) return s;
        return null;
    }
    
    public boolean hasPromotion() {
        return !statuses.isEmpty();
    }
    
    public boolean canPromote() {
        return this.getProject().hasPermission(Promotion.PROMOTE);
    }
    
    public boolean canPromote(String processName) {
        PromotionProcess process = getPromotionProcess(processName);
        ManualCondition manualCondition = null;
        if (process != null) {
            manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());
        }
        
        return PromotionPermissionHelper.hasPermission(getProject(), manualCondition);
    }
    
    public List<PromotionProcess> getPendingPromotions() {
        JobPropertyImpl pp = getProject().getProperty(JobPropertyImpl.class);
        if(pp==null)        return Collections.emptyList();
        List<PromotionProcess> r = new ArrayList<PromotionProcess>();
        for (PromotionProcess p : pp.getActiveItems()) {
            if(!contains(p))    r.add(p);
        }
        
        return r;
    }
    
    public PromotionProcess getPromotionProcess(String name) {
        JobPropertyImpl pp = getProject().getProperty(JobPropertyImpl.class);
        if (pp==null){
            return null;
}
        for (PromotionProcess p : pp.getItems()) {
            if(p.getName().equals(name)) return p;
        }
        
        return null;
    }
    
    public String getIconFileName() {
        return "star.png";
    }
    
    public String getDisplayName() {
        return "Promotion Status";
    }
    
    public String getUrlName() {
        return "promotion";
    }
    
    private Object readResolve() {
        for (Status s : statuses){
            s.parent = this;
}
        return this;
    }
    
    public Status getDynamic(String name, StaplerRequest req, StaplerResponse rsp) {
        return getPromotion(name);
    }
    
    public HttpResponse doForcePromotion(@QueryParameter("name") String name) throws IOException {
        JobPropertyImpl pp = getProject().getProperty(JobPropertyImpl.class);
        if(pp==null) throw new IllegalStateException("This project doesn't have any promotion criteria set");
        PromotionProcess p = pp.getItem(name);
        if(p==null) throw new IllegalStateException("This project doesn't have the promotion criterion called "+name);
        ManualCondition manualCondition = (ManualCondition) p.getPromotionCondition(ManualCondition.class.getName());
        PromotionPermissionHelper.checkPermission(getProject(), manualCondition);
        p.promote(owner,new UserCause(),new ManualPromotionBadge());
        return HttpResponses.redirectToDot();
    }
    
}


