package hudson.plugins.promoted_builds;
import hudson.AbortException;
import hudson.EnvVars;
import hudson.Util;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.Cause.UserCause;
import hudson.model.ParameterDefinition;
import hudson.model.ParameterValue;
import hudson.model.Result;
import hudson.plugins.promoted_builds.conditions.ManualCondition;
import hudson.util.Iterators;
import net.sf.json.JSONArray;
import net.sf.json.JSONNull;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.concurrent.Future;
import java.util.logging.Logger;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import jenkins.model.Jenkins;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.export.ExportedBean;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
public final class Status {
    public final String name;
    private final PromotionBadge[] badges;
    public final Calendar timestamp = new GregorianCalendar();
    private int promotion = -1;
    private List<Integer> promotionAttempts = new ArrayList<Integer>();
     transient PromotedBuildAction parent;
    public Status(PromotionProcess process, Collection<? extends PromotionBadge> badges) {
        this.name = process.getName();
        this.badges = badges.toArray(new PromotionBadge[badges.size()]);
    }
    
    public String getName() {
        return name;
    }
    
    public PromotedBuildAction getParent() {
    	if (parent==null){
            final AbstractBuild<?, ?> target = getTarget();
            if (target != null) {
                parent = target.getAction(PromotedBuildAction.class);
            }
            
    	}
    	
        return parent;
    }
    
    public PromotionProcess getProcess() {
        assert parent != null : name;
        AbstractProject<?,?> project = parent.getProject();
        assert project != null : parent;
        JobPropertyImpl jp = project.getProperty(JobPropertyImpl.class);
        if(jp==null)    return null;
        return jp.getItem(name);
    }
    
    public String getIcon(String size) {
        String baseName;
        PromotionProcess p = getProcess();
        if (p == null) {
            baseName = "star-gold";
        }
         else {
            Promotion l = getLast();
            if (l!=null && l.getResult()!= Result.SUCCESS) {
              return Jenkins.RESOURCE_PATH+"/images/"+size+"/error.png";
            }
            
            baseName = p.getIcon();
        }
        
        return Jenkins.RESOURCE_PATH+"/plugin/promoted-builds/icons/"+size+"/"+ baseName +".png";
    }
    
    public AbstractBuild<?,?> getTarget() {
        final PromotedBuildAction _parent = getParent();
        return _parent != null ? _parent.owner : null;
    }
    
    public void buildEnvVars(AbstractBuild<?,?> build, EnvVars env) {
        for (PromotionBadge badge : badges) {
            badge.buildEnvVars(build, env);
        }
        
    }
    
    public String getTimestampString() {
        long duration = new GregorianCalendar().getTimeInMillis()-timestamp.getTimeInMillis();
        return Util.getTimeSpanString(duration);
    }
    
    public String getDelayString(AbstractBuild<?,?> owner) {
        long duration = timestamp.getTimeInMillis() - owner.getTimestamp().getTimeInMillis() - owner.getDuration();
        return Util.getTimeSpanString(duration);
    }
    
    public boolean isFor(PromotionProcess process) {
        return process.getName().equals(this.name);
    }
    
    public Promotion getSuccessfulPromotion(JobPropertyImpl jp) {
        if(promotion>=0) {
            PromotionProcess p = jp.getItem(name);
            if(p!=null) return p.getBuildByNumber(promotion);
        }
        
        return null;
    }
    
    public boolean isPromotionSuccessful() {
        return promotion>=0;
    }
    
    public boolean isPromotionAttempted() {
        return !promotionAttempts.isEmpty();
    }
    
    public boolean isInQueue() {
        PromotionProcess p = getProcess();
        AbstractBuild<?, ?> target = getTarget();
        return p != null && target != null && p.isInQueue(target);
    }
    
    public List<PromotionBadge> getBadges() {
        return Arrays.asList(badges);
    }
    
     void addPromotionAttempt(Promotion p) {
        promotionAttempts.add(p.getNumber());
    }
    
     void onSuccessfulPromotion(Promotion p) {
        promotion = p.getNumber();
    }
    
    public Promotion getLastSuccessful() {
        PromotionProcess p = getProcess();
        if (p == null) {
            return null;
        }
        
        for( Integer n : Iterators.reverse(promotionAttempts) ) {
            Promotion b = p.getBuildByNumber(n);
            if(b!=null && b.getResult()== Result.SUCCESS) return b;
        }
        
        return null;
    }
    
    public Promotion getLastFailed() {
        PromotionProcess p = getProcess();
        if (p == null) {
            return null;
        }
        
        for( Integer n : Iterators.reverse(promotionAttempts) ) {
            Promotion b = p.getBuildByNumber(n);
            if(b!=null && b.getResult()!=Result.SUCCESS) return b;
        }
        
        return null;
    }
    
    public Promotion getLast() {
        PromotionProcess p = getProcess();
        if (p == null) {
            return null;
        }
        
        for( Integer n : Iterators.reverse(promotionAttempts) ) {
            Promotion b = p.getBuildByNumber(n);
            if(b!=null) return b;
        }
        
        return null;
    }
    
    public Boolean isLastAnError() {
      Promotion l = getLast();
      return (l != null && l.getResult() != Result.SUCCESS);
    }
    
    public List<Promotion> getPromotionBuilds() {
        List<Promotion> builds = new ArrayList<Promotion>();
        PromotionProcess p = getProcess();
        if (p!=null) {
            for( Integer n : Iterators.reverse(promotionAttempts) ) {
                Promotion b = p.getBuildByNumber(n);
                if (b != null) {
                    builds.add(b);
                }
                
            }
            
        }
        
        return builds;
    }
    
    public Promotion getPromotionBuild(int number) {
        PromotionProcess p = getProcess();
        return p != null ? p.getBuildByNumber(number) : null;
    }
    
    public boolean isManuallyApproved(){
        final PromotionProcess process = getProcess();
    	if (process == null) {
            return false; 
        }
        
        ManualCondition manualCondition=(ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());
    	return manualCondition != null;
    }
    
    public boolean canBuild() {
        PromotionProcess process = getProcess();
        if (process == null) {
            return false;
        }
        
        AbstractBuild<?, ?> target = getTarget();
        if (target == null) {
            return false;
        }
        
        ManualCondition manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());
        return PromotionPermissionHelper.hasPermission(target.getProject(), manualCondition);
    }
    
    public void doBuild(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        final PromotionProcess process = getProcess();
        if (process == null) {
            throw new AbortException("Cannot retrieve the promotion process");
        }
        
        AbstractBuild<?, ?> target = getTarget();
        if (target ==null) {
            throw new AbortException("Cannot get the target build to be promoted");
        }
        
        ManualCondition manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());     
        if (!PromotionPermissionHelper.hasPermission(target.getProject(), manualCondition)) {
            return;
        }
        
        JSONObject formData = req.getSubmittedForm();
        List<ParameterValue> paramValues=null;
        if (formData!=null){
            paramValues = new ArrayList<ParameterValue>();
            if (manualCondition!=null){
            	List<ParameterDefinition> parameterDefinitions=manualCondition.getParameterDefinitions();
                if (parameterDefinitions != null && !parameterDefinitions.isEmpty()) {
                    JSONArray a = JSONArray.fromObject(formData.get("parameter"));
                    for (Object o : a) {
                        final JSONObject jo;
                        if (o instanceof JSONObject) {
                            jo = (JSONObject) o;
                        }
                         else if (o instanceof JSONNull) {
                            continue; 
                        }
                         else {
                            throw new IllegalArgumentException("Array type is not supported " + o);
                        }
                        
                        String name = jo.getString("name");
                        ParameterDefinition d = manualCondition.getParameterDefinition(name);
                        if (d==null){
                            throw new IllegalArgumentException("No such parameter definition: " + name);
}
                        paramValues.add(d.createValue(req, jo));
                    }
                    
                }
                
            }
            
        }
        
        if (paramValues==null){
        	paramValues = new ArrayList<ParameterValue>();
        }
        
        Future<Promotion> f = process.scheduleBuild2(target, new UserCause(), paramValues);
        if (f==null){
            LOGGER.warning("Failing to schedule the promotion of "+target);
}
        rsp.forwardToPreviousPage(req);
    }
    
    private static final Logger LOGGER = Logger.getLogger(Status.class.getName());
}


