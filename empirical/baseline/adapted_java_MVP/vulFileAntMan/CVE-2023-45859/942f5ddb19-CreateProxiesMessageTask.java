package com.hazelcast.client.impl.protocol.task;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec;
import com.hazelcast.cluster.Member;
import com.hazelcast.core.MemberLeftException;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.nio.Connection;
import com.hazelcast.spi.impl.operationservice.Operation;
import com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo;
import com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;
public class CreateProxiesMessageTask extends AbstractMultiTargetMessageTask<List<Map.Entry<String, String>>> implements Supplier<Operation> {
    public CreateProxiesMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected Supplier<Operation> createOperationSupplier() {
        return this;
    }
    
    public Operation get() {
        List<ProxyInfo> proxyInfos = new ArrayList<ProxyInfo>(parameters.size());
        for (Map.Entry<String, String> proxy : parameters) {
            proxyInfos.add(new ProxyInfo(proxy.getValue(), proxy.getKey(), endpoint.getUuid()));
        }
        
        return new PostJoinProxyOperation(proxyInfos);
    }
    
    protected Object reduce(Map<Member, Object> map) throws Throwable {
        for (Object result : map.values()) {
            if (result instanceof Throwable && !(result instanceof MemberLeftException)) {
                throw (Throwable) result;
            }
            
        }
        
        return null;
    }
    
    public Collection<Member> getTargets() {
        return nodeEngine.getClusterService().getMembers();
    }
    
    protected List<Map.Entry<String, String>> decodeClientMessage(ClientMessage clientMessage) {
        return ClientCreateProxiesCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        return ClientCreateProxiesCodec.encodeResponse();
    }
    
    public Permission getRequiredPermission() {
        return null;
    }
    
    public String getServiceName() {
        return null;
    }
    
    public String getDistributedObjectName() {
        return null;
    }
    
    public String getMethodName() {
        return null;
    }
    
    public Object[] getParameters() {
        return null;
    }
    
}


