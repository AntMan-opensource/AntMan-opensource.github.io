package com.hazelcast.cp.internal.datastructures.semaphore.client;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.SemaphoreGetSemaphoreTypeCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;
import com.hazelcast.config.cp.SemaphoreConfig;
import com.hazelcast.cp.internal.datastructures.semaphore.SemaphoreService;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.nio.Connection;
import java.security.Permission;
public class GetSemaphoreTypeMessageTask extends AbstractMessageTask<String> {
    public GetSemaphoreTypeMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected void processMessage() {
        SemaphoreConfig config = nodeEngine.getConfig().getCPSubsystemConfig().findSemaphoreConfig(parameters);
        boolean jdkCompatible = (config != null && config.isJDKCompatible());
        sendResponse(jdkCompatible);
    }
    
    protected String decodeClientMessage(ClientMessage clientMessage) {
        return SemaphoreGetSemaphoreTypeCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        return SemaphoreGetSemaphoreTypeCodec.encodeResponse((Boolean) response);
    }
    
    public String getServiceName() {
        return SemaphoreService.SERVICE_NAME;
    }
    
    public Permission getRequiredPermission() {
        return null;
    }
    
    public String getDistributedObjectName() {
        return parameters;
    }
    
    public String getMethodName() {
        return null;
    }
    
    public Object[] getParameters() {
        return new Object[0];
    }
    
}


