package com.hazelcast.client.impl.protocol.task.cache;
import com.hazelcast.cache.impl.CacheKeysWithCursor;
import com.hazelcast.cache.impl.CacheOperationProvider;
import com.hazelcast.cache.impl.operation.CacheFetchKeysOperation;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheIterateCodec;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.iteration.IterationPointer;
import com.hazelcast.internal.nio.Connection;
import com.hazelcast.spi.impl.operationservice.Operation;
import java.util.Collections;
import static com.hazelcast.internal.iteration.IterationPointer.decodePointers;
import static com.hazelcast.internal.iteration.IterationPointer.encodePointers;
public class CacheIterateMessageTask extends AbstractCacheMessageTask<CacheIterateCodec.RequestParameters> {
    public CacheIterateMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected Operation prepareOperation() {
        CacheOperationProvider operationProvider = getOperationProvider(parameters.name);
        IterationPointer[] pointers = decodePointers(parameters.iterationPointers);
        return operationProvider.createFetchKeysOperation(pointers, parameters.batch);
    }
    
    protected CacheIterateCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
        return CacheIterateCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        if (response == null) {
            return CacheIterateCodec.encodeResponse(Collections.emptyList(), Collections.emptyList());
        }
        
        CacheKeysWithCursor keyIteratorResult = (CacheKeysWithCursor) response;
        IterationPointer[] pointers = keyIteratorResult.getPointers();
        return CacheIterateCodec.encodeResponse(encodePointers(pointers), keyIteratorResult.getKeys());
    }
    
    public String getDistributedObjectName() {
        return parameters.name;
    }
    
    public Object[] getParameters() {
        return null;
    }
    
    public String getMethodName() {
        return "iterator";
    }
    
}


