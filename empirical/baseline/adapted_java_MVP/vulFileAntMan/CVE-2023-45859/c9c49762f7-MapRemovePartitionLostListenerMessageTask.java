package com.hazelcast.client.impl.protocol.task.map;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractRemoveListenerMessageTask;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.nio.Connection;
import com.hazelcast.map.impl.MapService;
import java.security.Permission;
import java.util.UUID;
import java.util.concurrent.Future;
public class MapRemovePartitionLostListenerMessageTask extends AbstractRemoveListenerMessageTask<MapRemovePartitionLostListenerCodec.RequestParameters> {
    public MapRemovePartitionLostListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected Future<Boolean> deRegisterListener() {
        MapService mapService = getService(MapService.SERVICE_NAME);
        return mapService.getMapServiceContext().removePartitionLostListenerAsync(parameters.name, parameters.registrationId);
    }
    
    protected UUID getRegistrationId() {
        return parameters.registrationId;
    }
    
    protected MapRemovePartitionLostListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
        return MapRemovePartitionLostListenerCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        return MapRemovePartitionLostListenerCodec.encodeResponse((Boolean) response);
    }
    
    public String getServiceName() {
        return MapService.SERVICE_NAME;
    }
    
    public String getDistributedObjectName() {
        return parameters.name;
    }
    
    public Permission getRequiredPermission() {
        return null;
    }
    
    public String getMethodName() {
        return "removePartitionLostListener";
    }
    
}


