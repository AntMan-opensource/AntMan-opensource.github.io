package com.hazelcast.client.impl.protocol.task.cache;
import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.cache.impl.ICacheService;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractRemoveListenerMessageTask;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.nio.Connection;
import java.security.Permission;
import java.util.UUID;
import java.util.concurrent.Future;
public class CacheRemovePartitionLostListenerMessageTask extends AbstractRemoveListenerMessageTask<CacheRemovePartitionLostListenerCodec.RequestParameters> {
    public CacheRemovePartitionLostListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected Future<Boolean> deRegisterListener() {
        ICacheService service = getService(CacheService.SERVICE_NAME);
        return service.getNodeEngine().getEventService() .deregisterListenerAsync(ICacheService.SERVICE_NAME, parameters.name, parameters.registrationId);
    }
    
    protected UUID getRegistrationId() {
        return parameters.registrationId;
    }
    
    protected CacheRemovePartitionLostListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
        return CacheRemovePartitionLostListenerCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        return CacheRemovePartitionLostListenerCodec.encodeResponse((Boolean) response);
    }
    
    public String getServiceName() {
        return CacheService.SERVICE_NAME;
    }
    
    public String getDistributedObjectName() {
        return parameters.name;
    }
    
    public Permission getRequiredPermission() {
        return null;
    }
    
    public String getMethodName() {
        return "removeCachePartitionLostListener";
    }
    
}


