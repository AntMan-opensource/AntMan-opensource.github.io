package com.hazelcast.client.impl.protocol.task.cache;
import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.cache.impl.operation.CacheDestroyOperation;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractInvocationMessageTask;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.nio.Connection;
import com.hazelcast.spi.impl.operationservice.InvocationBuilder;
import com.hazelcast.spi.impl.operationservice.Operation;
import com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl;
import java.security.Permission;
public class CacheDestroyMessageTask extends AbstractInvocationMessageTask<String> {
    public CacheDestroyMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected InvocationBuilder getInvocationBuilder(Operation op) {
        OperationServiceImpl operationService = nodeEngine.getOperationService();
        return operationService.createInvocationBuilder(CacheService.SERVICE_NAME, op, nodeEngine.getThisAddress());
    }
    
    protected Operation prepareOperation() {
        return new CacheDestroyOperation(parameters);
    }
    
    protected String decodeClientMessage(ClientMessage clientMessage) {
        return CacheDestroyCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        return CacheDestroyCodec.encodeResponse();
    }
    
    public String getServiceName() {
        return CacheService.SERVICE_NAME;
    }
    
    public Permission getRequiredPermission() {
        return null;
    }
    
    public String getDistributedObjectName() {
        return null;
    }
    
    public String getMethodName() {
        return null;
    }
    
    public Object[] getParameters() {
        return null;
    }
    
}


