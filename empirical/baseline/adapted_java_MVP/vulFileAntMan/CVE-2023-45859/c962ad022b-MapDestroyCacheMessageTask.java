package com.hazelcast.client.impl.protocol.task.map;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMultiTargetMessageTask;
import com.hazelcast.cluster.Member;
import com.hazelcast.instance.impl.Node;
import com.hazelcast.internal.nio.Connection;
import com.hazelcast.map.impl.querycache.subscriber.operation.DestroyQueryCacheOperation;
import com.hazelcast.spi.impl.operationservice.Operation;
import java.security.Permission;
import java.util.Collection;
import java.util.Map;
import java.util.function.Supplier;
import static com.hazelcast.map.impl.MapService.SERVICE_NAME;
public class MapDestroyCacheMessageTask extends AbstractMultiTargetMessageTask<ContinuousQueryDestroyCacheCodec.RequestParameters> implements Supplier<Operation> {
    public MapDestroyCacheMessageTask(ClientMessage clientMessage, Node node, Connection connection) {
        super(clientMessage, node, connection);
    }
    
    protected Supplier<Operation> createOperationSupplier() {
        return this;
    }
    
    protected Object reduce(Map<Member, Object> map) throws Throwable {
        return !map.values().contains(Boolean.FALSE);
    }
    
    public Collection<Member> getTargets() {
        return clientEngine.getClusterService().getMembers();
    }
    
    protected ContinuousQueryDestroyCacheCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
        return ContinuousQueryDestroyCacheCodec.decodeRequest(clientMessage);
    }
    
    protected ClientMessage encodeResponse(Object response) {
        return ContinuousQueryDestroyCacheCodec.encodeResponse((Boolean) response);
    }
    
    public String getServiceName() {
        return SERVICE_NAME;
    }
    
    public Permission getRequiredPermission() {
        return null;
    }
    
    public String getDistributedObjectName() {
        return null;
    }
    
    public String getMethodName() {
        return null;
    }
    
    public Object[] getParameters() {
        return null;
    }
    
    public Operation get() {
        DestroyQueryCacheOperation operation = new DestroyQueryCacheOperation(parameters.mapName, parameters.cacheName);
        operation.setCallerUuid(endpoint.getUuid());
        return operation;
    }
    
}


