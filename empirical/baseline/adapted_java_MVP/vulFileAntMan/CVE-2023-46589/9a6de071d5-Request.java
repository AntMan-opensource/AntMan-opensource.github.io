package org.apache.catalina.connector;
import java.io.BufferedReader;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.naming.NamingException;
import javax.security.auth.Subject;
import jakarta.servlet.AsyncContext;
import jakarta.servlet.DispatcherType;
import jakarta.servlet.FilterChain;
import jakarta.servlet.MultipartConfigElement;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletConnection;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletRequestAttributeEvent;
import jakarta.servlet.ServletRequestAttributeListener;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.SessionTrackingMode;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletMapping;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletRequestWrapper;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.HttpUpgradeHandler;
import jakarta.servlet.http.Part;
import jakarta.servlet.http.PushBuilder;
import org.apache.catalina.Container;
import org.apache.catalina.Context;
import org.apache.catalina.Globals;
import org.apache.catalina.Host;
import org.apache.catalina.Manager;
import org.apache.catalina.Realm;
import org.apache.catalina.Session;
import org.apache.catalina.TomcatPrincipal;
import org.apache.catalina.Wrapper;
import org.apache.catalina.core.ApplicationFilterChain;
import org.apache.catalina.core.ApplicationMapping;
import org.apache.catalina.core.ApplicationPart;
import org.apache.catalina.core.ApplicationPushBuilder;
import org.apache.catalina.core.ApplicationSessionCookieConfig;
import org.apache.catalina.core.AsyncContextImpl;
import org.apache.catalina.mapper.MappingData;
import org.apache.catalina.util.ParameterMap;
import org.apache.catalina.util.RequestUtil;
import org.apache.catalina.util.TLSUtil;
import org.apache.catalina.util.URLEncoder;
import org.apache.coyote.ActionCode;
import org.apache.coyote.UpgradeToken;
import org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;
import org.apache.juli.logging.Log;
import org.apache.juli.logging.LogFactory;
import org.apache.tomcat.InstanceManager;
import org.apache.tomcat.util.ExceptionUtils;
import org.apache.tomcat.util.buf.B2CConverter;
import org.apache.tomcat.util.buf.ByteChunk;
import org.apache.tomcat.util.buf.CharsetHolder;
import org.apache.tomcat.util.buf.EncodedSolidusHandling;
import org.apache.tomcat.util.buf.MessageBytes;
import org.apache.tomcat.util.buf.StringUtils;
import org.apache.tomcat.util.buf.UDecoder;
import org.apache.tomcat.util.http.CookieProcessor;
import org.apache.tomcat.util.http.FastHttpDateFormat;
import org.apache.tomcat.util.http.Parameters;
import org.apache.tomcat.util.http.Parameters.FailReason;
import org.apache.tomcat.util.http.Rfc6265CookieProcessor;
import org.apache.tomcat.util.http.ServerCookie;
import org.apache.tomcat.util.http.ServerCookies;
import org.apache.tomcat.util.http.fileupload.FileItem;
import org.apache.tomcat.util.http.fileupload.FileUpload;
import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
import org.apache.tomcat.util.http.fileupload.impl.InvalidContentTypeException;
import org.apache.tomcat.util.http.fileupload.impl.SizeException;
import org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext;
import org.apache.tomcat.util.http.parser.AcceptLanguage;
import org.apache.tomcat.util.http.parser.Upgrade;
import org.apache.tomcat.util.net.SSLSupport;
import org.apache.tomcat.util.res.StringManager;
import org.ietf.jgss.GSSCredential;
import org.ietf.jgss.GSSException;
public class Request implements HttpServletRequest {
    private static final String HTTP_UPGRADE_HEADER_NAME = "upgrade";
    private static final Log log = LogFactory.getLog(Request.class);
    public Request(Connector connector, org.apache.coyote.Request coyoteRequest) {
        this.connector = connector;
        this.coyoteRequest = coyoteRequest;
        inputBuffer = new InputBuffer(coyoteRequest);
    }
    
    protected final org.apache.coyote.Request coyoteRequest;
    public org.apache.coyote.Request getCoyoteRequest() {
        return this.coyoteRequest;
    }
    
    protected static final StringManager sm = StringManager.getManager(Request.class);
    protected Cookie[] cookies = null;
    protected static final Locale defaultLocale = Locale.getDefault();
    private final Map<String,Object> attributes = new ConcurrentHashMap<>();
    protected boolean sslAttributesParsed = false;
    protected final ArrayList<Locale> locales = new ArrayList<>();
    private final transient HashMap<String,Object> notes = new HashMap<>();
    protected String authType = null;
    protected DispatcherType internalDispatcherType = null;
    protected final InputBuffer inputBuffer;
    protected CoyoteInputStream inputStream;
    protected CoyoteReader reader;
    protected boolean usingInputStream = false;
    protected boolean usingReader = false;
    protected Principal userPrincipal = null;
    protected boolean parametersParsed = false;
    protected boolean cookiesParsed = false;
    protected boolean cookiesConverted = false;
    protected boolean secure = false;
    protected transient Subject subject = null;
    protected static final int CACHED_POST_LEN = 8192;
    protected byte[] postData = null;
    protected ParameterMap<String,String[]> parameterMap = new ParameterMap<>();
    protected Collection<Part> parts = null;
    protected Exception partsParseException = null;
    protected Session session = null;
    protected Object requestDispatcherPath = null;
    protected boolean requestedSessionCookie = false;
    protected String requestedSessionId = null;
    protected boolean requestedSessionURL = false;
    protected boolean requestedSessionSSL = false;
    protected boolean localesParsed = false;
    protected int localPort = -1;
    protected String remoteAddr = null;
    protected String peerAddr = null;
    protected String remoteHost = null;
    protected int remotePort = -1;
    protected String localAddr = null;
    protected String localName = null;
    private volatile AsyncContextImpl asyncContext = null;
    protected Boolean asyncSupported = null;
    private HttpServletRequest applicationRequest = null;
    protected void addPathParameter(String name, String value) {
        coyoteRequest.addPathParameter(name, value);
    }
    
    protected String getPathParameter(String name) {
        return coyoteRequest.getPathParameter(name);
    }
    
    public void setAsyncSupported(boolean asyncSupported) {
        this.asyncSupported = Boolean.valueOf(asyncSupported);
    }
    
    public void recycle() {
        internalDispatcherType = null;
        requestDispatcherPath = null;
        authType = null;
        inputBuffer.recycle();
        usingInputStream = false;
        usingReader = false;
        userPrincipal = null;
        subject = null;
        parametersParsed = false;
        if (parts != null) {
            for (Part part : parts) {
                try {
                    part.delete();
                }
                 catch (IOException ignored) {
                }
                
            }
            
            parts = null;
        }
        
        partsParseException = null;
        locales.clear();
        localesParsed = false;
        secure = false;
        remoteAddr = null;
        peerAddr = null;
        remoteHost = null;
        remotePort = -1;
        localPort = -1;
        localAddr = null;
        localName = null;
        attributes.clear();
        sslAttributesParsed = false;
        notes.clear();
        recycleSessionInfo();
        recycleCookieInfo(false);
        if (getDiscardFacades()) {
            parameterMap = new ParameterMap<>();
        }
         else {
            parameterMap.setLocked(false);
            parameterMap.clear();
        }
        
        mappingData.recycle();
        applicationMapping.recycle();
        applicationRequest = null;
        if (getDiscardFacades()) {
            if (facade != null) {
                facade.clear();
                facade = null;
            }
            
            if (inputStream != null) {
                inputStream.clear();
                inputStream = null;
            }
            
            if (reader != null) {
                reader.clear();
                reader = null;
            }
            
        }
        
        asyncSupported = null;
        if (asyncContext != null) {
            asyncContext.recycle();
        }
        
        asyncContext = null;
    }
    
    protected void recycleSessionInfo() {
        if (session != null) {
            try {
                session.endAccess();
            }
             catch (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                log.warn(sm.getString("coyoteRequest.sessionEndAccessFail"), t);
            }
            
        }
        
        session = null;
        requestedSessionCookie = false;
        requestedSessionId = null;
        requestedSessionURL = false;
        requestedSessionSSL = false;
    }
    
    protected void recycleCookieInfo(boolean recycleCoyote) {
        cookiesParsed = false;
        cookiesConverted = false;
        cookies = null;
        if (recycleCoyote) {
            getCoyoteRequest().getCookies().recycle();
        }
        
    }
    
    protected final Connector connector;
    public Connector getConnector() {
        return this.connector;
    }
    
    public Context getContext() {
        return mappingData.context;
    }
    
    public boolean getDiscardFacades() {
        return (connector == null) ? true : connector.getDiscardFacades();
    }
    
    protected FilterChain filterChain = null;
    public FilterChain getFilterChain() {
        return this.filterChain;
    }
    
    public void setFilterChain(FilterChain filterChain) {
        this.filterChain = filterChain;
    }
    
    public Host getHost() {
        return mappingData.host;
    }
    
    protected final MappingData mappingData = new MappingData();
    private final ApplicationMapping applicationMapping = new ApplicationMapping(mappingData);
    public MappingData getMappingData() {
        return mappingData;
    }
    
    protected RequestFacade facade = null;
    public HttpServletRequest getRequest() {
        if (facade == null) {
            facade = new RequestFacade(this);
        }
        
        if (applicationRequest == null) {
            applicationRequest = facade;
        }
        
        return applicationRequest;
    }
    
    public void setRequest(HttpServletRequest applicationRequest) {
        ServletRequest r = applicationRequest;
        while (r instanceof HttpServletRequestWrapper) {
            r = ((HttpServletRequestWrapper) r).getRequest();
        }
        
        if (r != facade) {
            throw new IllegalArgumentException(sm.getString("request.illegalWrap"));
        }
        
        this.applicationRequest = applicationRequest;
    }
    
    protected org.apache.catalina.connector.Response response = null;
    public org.apache.catalina.connector.Response getResponse() {
        return this.response;
    }
    
    public void setResponse(org.apache.catalina.connector.Response response) {
        this.response = response;
    }
    
    public InputStream getStream() {
        if (inputStream == null) {
            inputStream = new CoyoteInputStream(inputBuffer);
        }
        
        return inputStream;
    }
    
    protected B2CConverter URIConverter = null;
    protected B2CConverter getURIConverter() {
        return URIConverter;
    }
    
    protected void setURIConverter(B2CConverter URIConverter) {
        this.URIConverter = URIConverter;
    }
    
    public Wrapper getWrapper() {
        return mappingData.wrapper;
    }
    
    public ServletInputStream createInputStream() throws IOException {
        if (inputStream == null) {
            inputStream = new CoyoteInputStream(inputBuffer);
        }
        
        return inputStream;
    }
    
    public void finishRequest() throws IOException {
        if (response.getStatus() == HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE) {
            checkSwallowInput();
        }
        
    }
    
    public Object getNote(String name) {
        return notes.get(name);
    }
    
    public void removeNote(String name) {
        notes.remove(name);
    }
    
    public void setLocalPort(int port) {
        localPort = port;
    }
    
    public void setNote(String name, Object value) {
        notes.put(name, value);
    }
    
    public void setRemoteAddr(String remoteAddr) {
        this.remoteAddr = remoteAddr;
    }
    
    public void setRemoteHost(String remoteHost) {
        this.remoteHost = remoteHost;
    }
    
    public void setSecure(boolean secure) {
        this.secure = secure;
    }
    
    public void setServerPort(int port) {
        coyoteRequest.setServerPort(port);
    }
    
    public Object getAttribute(String name) {
        SpecialAttributeAdapter adapter = specialAttributes.get(name);
        if (adapter != null) {
            return adapter.get(this, name);
        }
        
        Object attr = attributes.get(name);
        if (attr != null) {
            return attr;
        }
        
        attr = coyoteRequest.getAttribute(name);
        if (attr != null) {
            return attr;
        }
        
        if (!sslAttributesParsed && TLSUtil.isTLSRequestAttribute(name)) {
            coyoteRequest.action(ActionCode.REQ_SSL_ATTRIBUTE, coyoteRequest);
            attr = coyoteRequest.getAttribute(Globals.CERTIFICATES_ATTR);
            if (attr != null) {
                attributes.put(Globals.CERTIFICATES_ATTR, attr);
            }
            
            attr = coyoteRequest.getAttribute(Globals.CIPHER_SUITE_ATTR);
            if (attr != null) {
                attributes.put(Globals.CIPHER_SUITE_ATTR, attr);
            }
            
            attr = coyoteRequest.getAttribute(Globals.KEY_SIZE_ATTR);
            if (attr != null) {
                attributes.put(Globals.KEY_SIZE_ATTR, attr);
            }
            
            attr = coyoteRequest.getAttribute(Globals.SSL_SESSION_ID_ATTR);
            if (attr != null) {
                attributes.put(Globals.SSL_SESSION_ID_ATTR, attr);
            }
            
            attr = coyoteRequest.getAttribute(Globals.SSL_SESSION_MGR_ATTR);
            if (attr != null) {
                attributes.put(Globals.SSL_SESSION_MGR_ATTR, attr);
            }
            
            attr = coyoteRequest.getAttribute(SSLSupport.PROTOCOL_VERSION_KEY);
            if (attr != null) {
                attributes.put(SSLSupport.PROTOCOL_VERSION_KEY, attr);
            }
            
            attr = coyoteRequest.getAttribute(SSLSupport.REQUESTED_PROTOCOL_VERSIONS_KEY);
            if (attr != null) {
                attributes.put(SSLSupport.REQUESTED_PROTOCOL_VERSIONS_KEY, attr);
            }
            
            attr = coyoteRequest.getAttribute(SSLSupport.REQUESTED_CIPHERS_KEY);
            if (attr != null) {
                attributes.put(SSLSupport.REQUESTED_CIPHERS_KEY, attr);
            }
            
            attr = attributes.get(name);
            sslAttributesParsed = true;
        }
        
        return attr;
    }
    
    public long getContentLengthLong() {
        return coyoteRequest.getContentLengthLong();
    }
    
    public Enumeration<String> getAttributeNames() {
        if (isSecure() && !sslAttributesParsed) {
            getAttribute(Globals.CERTIFICATES_ATTR);
        }
        
        Set<String> names = new HashSet<>(attributes.keySet());
        return Collections.enumeration(names);
    }
    
    public String getCharacterEncoding() {
        String characterEncoding = coyoteRequest.getCharsetHolder().getName();
        if (characterEncoding == null) {
            Context context = getContext();
            if (context != null) {
                characterEncoding = context.getRequestCharacterEncoding();
            }
            
        }
        
        return characterEncoding;
    }
    
    private Charset getCharset() {
        Charset charset = coyoteRequest.getCharsetHolder().getCharset();
        if (charset == null) {
            Context context = getContext();
            if (context != null) {
                charset = CharsetHolder.getInstance(context.getRequestCharacterEncoding()).getCharset();
            }
            
        }
        
        if (charset == null) {
            charset = org.apache.coyote.Constants.DEFAULT_BODY_CHARSET;
        }
        
        return charset;
    }
    
    public int getContentLength() {
        return coyoteRequest.getContentLength();
    }
    
    public String getContentType() {
        return coyoteRequest.getContentType();
    }
    
    public void setContentType(String contentType) {
        coyoteRequest.setContentType(contentType);
    }
    
    public ServletInputStream getInputStream() throws IOException {
        if (usingReader) {
            throw new IllegalStateException(sm.getString("coyoteRequest.getInputStream.ise"));
        }
        
        usingInputStream = true;
        if (inputStream == null) {
            inputStream = new CoyoteInputStream(inputBuffer);
        }
        
        return inputStream;
    }
    
    public Locale getLocale() {
        if (!localesParsed) {
            parseLocales();
        }
        
        if (locales.size() > 0) {
            return locales.get(0);
        }
        
        return defaultLocale;
    }
    
    public Enumeration<Locale> getLocales() {
        if (!localesParsed) {
            parseLocales();
        }
        
        if (locales.size() > 0) {
            return Collections.enumeration(locales);
        }
        
        ArrayList<Locale> results = new ArrayList<>();
        results.add(defaultLocale);
        return Collections.enumeration(results);
    }
    
    public String getParameter(String name) {
        if (!parametersParsed) {
            parseParameters();
        }
        
        return coyoteRequest.getParameters().getParameter(name);
    }
    
    public Map<String,String[]> getParameterMap() {
        if (parameterMap.isLocked()) {
            return parameterMap;
        }
        
        Enumeration<String> enumeration = getParameterNames();
        while (enumeration.hasMoreElements()) {
            String name = enumeration.nextElement();
            String[] values = getParameterValues(name);
            parameterMap.put(name, values);
        }
        
        parameterMap.setLocked(true);
        return parameterMap;
    }
    
    public Enumeration<String> getParameterNames() {
        if (!parametersParsed) {
            parseParameters();
        }
        
        return coyoteRequest.getParameters().getParameterNames();
    }
    
    public String[] getParameterValues(String name) {
        if (!parametersParsed) {
            parseParameters();
        }
        
        return coyoteRequest.getParameters().getParameterValues(name);
    }
    
    public String getProtocol() {
        return coyoteRequest.protocol().toString();
    }
    
    public BufferedReader getReader() throws IOException {
        if (usingInputStream) {
            throw new IllegalStateException(sm.getString("coyoteRequest.getReader.ise"));
        }
        
        if (coyoteRequest.getCharsetHolder().getName() == null) {
            Context context = getContext();
            if (context != null) {
                String enc = context.getRequestCharacterEncoding();
                if (enc != null) {
                    setCharacterEncoding(enc);
                }
                
            }
            
        }
        
        usingReader = true;
        inputBuffer.checkConverter();
        if (reader == null) {
            reader = new CoyoteReader(inputBuffer);
        }
        
        return reader;
    }
    
    public String getRemoteAddr() {
        if (remoteAddr == null) {
            coyoteRequest.action(ActionCode.REQ_HOST_ADDR_ATTRIBUTE, coyoteRequest);
            remoteAddr = coyoteRequest.remoteAddr().toString();
        }
        
        return remoteAddr;
    }
    
    public String getPeerAddr() {
        if (peerAddr == null) {
            coyoteRequest.action(ActionCode.REQ_PEER_ADDR_ATTRIBUTE, coyoteRequest);
            peerAddr = coyoteRequest.peerAddr().toString();
        }
        
        return peerAddr;
    }
    
    public String getRemoteHost() {
        if (remoteHost == null) {
            if (!connector.getEnableLookups()) {
                remoteHost = getRemoteAddr();
            }
             else {
                coyoteRequest.action(ActionCode.REQ_HOST_ATTRIBUTE, coyoteRequest);
                remoteHost = coyoteRequest.remoteHost().toString();
            }
            
        }
        
        return remoteHost;
    }
    
    public int getRemotePort() {
        if (remotePort == -1) {
            coyoteRequest.action(ActionCode.REQ_REMOTEPORT_ATTRIBUTE, coyoteRequest);
            remotePort = coyoteRequest.getRemotePort();
        }
        
        return remotePort;
    }
    
    public String getLocalName() {
        if (localName == null) {
            coyoteRequest.action(ActionCode.REQ_LOCAL_NAME_ATTRIBUTE, coyoteRequest);
            localName = coyoteRequest.localName().toString();
        }
        
        return localName;
    }
    
    public String getLocalAddr() {
        if (localAddr == null) {
            coyoteRequest.action(ActionCode.REQ_LOCAL_ADDR_ATTRIBUTE, coyoteRequest);
            localAddr = coyoteRequest.localAddr().toString();
        }
        
        return localAddr;
    }
    
    public int getLocalPort() {
        if (localPort == -1) {
            coyoteRequest.action(ActionCode.REQ_LOCALPORT_ATTRIBUTE, coyoteRequest);
            localPort = coyoteRequest.getLocalPort();
        }
        
        return localPort;
    }
    
    public RequestDispatcher getRequestDispatcher(String path) {
        Context context = getContext();
        if (context == null) {
            return null;
        }
        
        if (path == null) {
            return null;
        }
        
        int fragmentPos = path.indexOf('#');
        if (fragmentPos > -1) {
            log.warn(sm.getString("request.fragmentInDispatchPath", path));
            path = path.substring(0, fragmentPos);
        }
        
        if (path.startsWith("/")) {
            return context.getServletContext().getRequestDispatcher(path);
        }
        
        String servletPath = (String) getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
        if (servletPath == null) {
            servletPath = getServletPath();
        }
        
        String pathInfo = getPathInfo();
        String requestPath = null;
        if (pathInfo == null) {
            requestPath = servletPath;
        }
         else {
            requestPath = servletPath + pathInfo;
        }
        
        int pos = requestPath.lastIndexOf('/');
        String relative = null;
        if (context.getDispatchersUseEncodedPaths()) {
            if (pos >= 0) {
                relative = URLEncoder.DEFAULT.encode(requestPath.substring(0, pos + 1), StandardCharsets.UTF_8) + path;
            }
             else {
                relative = URLEncoder.DEFAULT.encode(requestPath, StandardCharsets.UTF_8) + path;
            }
            
        }
         else {
            if (pos >= 0) {
                relative = requestPath.substring(0, pos + 1) + path;
            }
             else {
                relative = requestPath + path;
            }
            
        }
        
        return context.getServletContext().getRequestDispatcher(relative);
    }
    
    public String getScheme() {
        return coyoteRequest.scheme().toString();
    }
    
    public String getServerName() {
        return coyoteRequest.serverName().toString();
    }
    
    public int getServerPort() {
        return coyoteRequest.getServerPort();
    }
    
    public boolean isSecure() {
        return secure;
    }
    
    public void removeAttribute(String name) {
        if (name.startsWith("org.apache.tomcat.")) {
            coyoteRequest.getAttributes().remove(name);
        }
        
        boolean found = attributes.containsKey(name);
        if (found) {
            Object value = attributes.get(name);
            attributes.remove(name);
            notifyAttributeRemoved(name, value);
        }
        
    }
    
    public void setAttribute(String name, Object value) {
        if (name == null) {
            throw new IllegalArgumentException(sm.getString("coyoteRequest.setAttribute.namenull"));
        }
        
        if (value == null) {
            removeAttribute(name);
            return;
        }
        
        SpecialAttributeAdapter adapter = specialAttributes.get(name);
        if (adapter != null) {
            adapter.set(this, name, value);
            return;
        }
        
        Object oldValue = attributes.put(name, value);
        if (name.startsWith("org.apache.tomcat.")) {
            coyoteRequest.setAttribute(name, value);
        }
        
        notifyAttributeAssigned(name, value, oldValue);
    }
    
    private void notifyAttributeAssigned(String name, Object value, Object oldValue) {
        Context context = getContext();
        if (context == null) {
            return;
        }
        
        Object listeners[] = context.getApplicationEventListeners();
        if ((listeners == null) || (listeners.length == 0)) {
            return;
        }
        
        boolean replaced = (oldValue != null);
        ServletRequestAttributeEvent event = null;
        if (replaced) {
            event = new ServletRequestAttributeEvent(context.getServletContext(), getRequest(), name, oldValue);
        }
         else {
            event = new ServletRequestAttributeEvent(context.getServletContext(), getRequest(), name, value);
        }
        
        for (Object o : listeners) {
            if (!(o instanceof ServletRequestAttributeListener)) {
                continue;
            }
            
            ServletRequestAttributeListener listener = (ServletRequestAttributeListener) o;
            try {
                if (replaced) {
                    listener.attributeReplaced(event);
                }
                 else {
                    listener.attributeAdded(event);
                }
                
            }
             catch (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                attributes.put(RequestDispatcher.ERROR_EXCEPTION, t);
                context.getLogger().error(sm.getString("coyoteRequest.attributeEvent"), t);
            }
            
        }
        
    }
    
    private void notifyAttributeRemoved(String name, Object value) {
        Context context = getContext();
        Object listeners[] = context.getApplicationEventListeners();
        if ((listeners == null) || (listeners.length == 0)) {
            return;
        }
        
        ServletRequestAttributeEvent event = new ServletRequestAttributeEvent(context.getServletContext(), getRequest(), name, value);
        for (Object o : listeners) {
            if (!(o instanceof ServletRequestAttributeListener)) {
                continue;
            }
            
            ServletRequestAttributeListener listener = (ServletRequestAttributeListener) o;
            try {
                listener.attributeRemoved(event);
            }
             catch (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                attributes.put(RequestDispatcher.ERROR_EXCEPTION, t);
                context.getLogger().error(sm.getString("coyoteRequest.attributeEvent"), t);
            }
            
        }
        
    }
    
    public void setCharacterEncoding(String enc) throws UnsupportedEncodingException {
        if (usingReader) {
            return;
        }
        
        CharsetHolder charsetHolder = CharsetHolder.getInstance(enc);
        charsetHolder.validate();
        coyoteRequest.setCharsetHolder(charsetHolder);
    }
    
    public void setCharacterEncoding(Charset charset) {
        if (usingReader) {
            return;
        }
        
        coyoteRequest.setCharsetHolder(CharsetHolder.getInstance(charset));
    }
    
    public ServletContext getServletContext() {
        return getContext().getServletContext();
    }
    
    public AsyncContext startAsync() {
        return startAsync(getRequest(), response.getResponse());
    }
    
    public AsyncContext startAsync(ServletRequest request, ServletResponse response) {
        if (!isAsyncSupported()) {
            IllegalStateException ise = new IllegalStateException(sm.getString("request.asyncNotSupported"));
            log.warn(sm.getString("coyoteRequest.noAsync", StringUtils.join(getNonAsyncClassNames())), ise);
            throw ise;
        }
        
        if (asyncContext == null) {
            asyncContext = new AsyncContextImpl(this);
        }
        
        asyncContext.setStarted(getContext(), request, response, request == getRequest() && response == getResponse().getResponse());
        asyncContext.setTimeout(getConnector().getAsyncTimeout());
        return asyncContext;
    }
    
    private Set<String> getNonAsyncClassNames() {
        Set<String> result = new HashSet<>();
        Wrapper wrapper = getWrapper();
        if (!wrapper.isAsyncSupported()) {
            result.add(wrapper.getServletClass());
        }
        
        FilterChain filterChain = getFilterChain();
        if (filterChain instanceof ApplicationFilterChain) {
            ((ApplicationFilterChain) filterChain).findNonAsyncFilters(result);
        }
         else {
            result.add(sm.getString("coyoteRequest.filterAsyncSupportUnknown"));
        }
        
        Container c = wrapper;
        while (c != null) {
            c.getPipeline().findNonAsyncValves(result);
            c = c.getParent();
        }
        
        return result;
    }
    
    public boolean isAsyncStarted() {
        if (asyncContext == null) {
            return false;
        }
        
        return asyncContext.isStarted();
    }
    
    public boolean isAsyncDispatching() {
        if (asyncContext == null) {
            return false;
        }
        
        AtomicBoolean result = new AtomicBoolean(false);
        coyoteRequest.action(ActionCode.ASYNC_IS_DISPATCHING, result);
        return result.get();
    }
    
    public boolean isAsyncCompleting() {
        if (asyncContext == null) {
            return false;
        }
        
        AtomicBoolean result = new AtomicBoolean(false);
        coyoteRequest.action(ActionCode.ASYNC_IS_COMPLETING, result);
        return result.get();
    }
    
    public boolean isAsync() {
        if (asyncContext == null) {
            return false;
        }
        
        AtomicBoolean result = new AtomicBoolean(false);
        coyoteRequest.action(ActionCode.ASYNC_IS_ASYNC, result);
        return result.get();
    }
    
    public boolean isAsyncSupported() {
        if (this.asyncSupported == null) {
            return true;
        }
        
        return asyncSupported.booleanValue();
    }
    
    public AsyncContext getAsyncContext() {
        if (!isAsyncStarted()) {
            throw new IllegalStateException(sm.getString("request.notAsync"));
        }
        
        return asyncContext;
    }
    
    public AsyncContextImpl getAsyncContextInternal() {
        return asyncContext;
    }
    
    public DispatcherType getDispatcherType() {
        if (internalDispatcherType == null) {
            return DispatcherType.REQUEST;
        }
        
        return this.internalDispatcherType;
    }
    
    public String getRequestId() {
        return coyoteRequest.getRequestId();
    }
    
    public String getProtocolRequestId() {
        return coyoteRequest.getProtocolRequestId();
    }
    
    public ServletConnection getServletConnection() {
        return coyoteRequest.getServletConnection();
    }
    
    public void addCookie(Cookie cookie) {
        if (!cookiesConverted) {
            convertCookies();
        }
        
        int size = 0;
        if (cookies != null) {
            size = cookies.length;
        }
        
        Cookie[] newCookies = new Cookie[size + 1];
        if (cookies != null) {
            System.arraycopy(cookies, 0, newCookies, 0, size);
        }
        
        newCookies[size] = cookie;
        cookies = newCookies;
    }
    
    public void addLocale(Locale locale) {
        locales.add(locale);
    }
    
    public void clearCookies() {
        cookiesParsed = true;
        cookiesConverted = true;
        cookies = null;
    }
    
    public void clearLocales() {
        locales.clear();
    }
    
    public void setAuthType(String type) {
        this.authType = type;
    }
    
    public void setPathInfo(String path) {
        mappingData.pathInfo.setString(path);
    }
    
    public void setRequestedSessionCookie(boolean flag) {
        this.requestedSessionCookie = flag;
    }
    
    public void setRequestedSessionId(String id) {
        this.requestedSessionId = id;
    }
    
    public void setRequestedSessionURL(boolean flag) {
        this.requestedSessionURL = flag;
    }
    
    public void setRequestedSessionSSL(boolean flag) {
        this.requestedSessionSSL = flag;
    }
    
    public String getDecodedRequestURI() {
        return coyoteRequest.decodedURI().toString();
    }
    
    public MessageBytes getDecodedRequestURIMB() {
        return coyoteRequest.decodedURI();
    }
    
    public void setUserPrincipal(final Principal principal) {
        userPrincipal = principal;
    }
    
    public boolean isTrailerFieldsReady() {
        return coyoteRequest.isTrailerFieldsReady();
    }
    
    public Map<String,String> getTrailerFields() {
        if (!isTrailerFieldsReady()) {
            throw new IllegalStateException(sm.getString("coyoteRequest.trailersNotReady"));
        }
        
        Map<String,String> result = new HashMap<>(coyoteRequest.getTrailerFields());
        return result;
    }
    
    public PushBuilder newPushBuilder() {
        return newPushBuilder(this);
    }
    
    public PushBuilder newPushBuilder(HttpServletRequest request) {
        AtomicBoolean result = new AtomicBoolean();
        coyoteRequest.action(ActionCode.IS_PUSH_SUPPORTED, result);
        if (result.get()) {
            return new ApplicationPushBuilder(this, request);
        }
         else {
            return null;
        }
        
    }
    
    public <T extends HttpUpgradeHandler> T upgrade(Class<T> httpUpgradeHandlerClass) throws java.io.IOException, ServletException {
        T handler;
        InstanceManager instanceManager = null;
        try {
            if (InternalHttpUpgradeHandler.class.isAssignableFrom(httpUpgradeHandlerClass)) {
                handler = httpUpgradeHandlerClass.getConstructor().newInstance();
            }
             else {
                instanceManager = getContext().getInstanceManager();
                handler = (T) instanceManager.newInstance(httpUpgradeHandlerClass);
            }
            
        }
         catch (ReflectiveOperationException | NamingException | IllegalArgumentException | SecurityException e) {
            throw new ServletException(e);
        }
        
        UpgradeToken upgradeToken = new UpgradeToken(handler, getContext(), instanceManager, getUpgradeProtocolName(httpUpgradeHandlerClass));
        coyoteRequest.action(ActionCode.UPGRADE, upgradeToken);
        response.setStatus(HttpServletResponse.SC_SWITCHING_PROTOCOLS);
        return handler;
    }
    
    private String getUpgradeProtocolName(Class<? extends HttpUpgradeHandler> httpUpgradeHandlerClass) {
        String result = response.getHeader(HTTP_UPGRADE_HEADER_NAME);
        if (result == null) {
            List<Upgrade> upgradeProtocols = Upgrade.parse(getHeaders(HTTP_UPGRADE_HEADER_NAME));
            if (upgradeProtocols != null && upgradeProtocols.size() == 1) {
                result = upgradeProtocols.get(0).toString();
            }
            
        }
        
        if (result == null) {
            result = httpUpgradeHandlerClass.getName();
        }
        
        return result;
    }
    
    public String getAuthType() {
        return authType;
    }
    
    public String getContextPath() {
        int lastSlash = mappingData.contextSlashCount;
        if (lastSlash == 0) {
            return "";
        }
        
        String canonicalContextPath = getServletContext().getContextPath();
        String uri = getRequestURI();
        int pos = 0;
        if (!getContext().getAllowMultipleLeadingForwardSlashInPath()) {
            do {
                pos++;
            }
             while (pos < uri.length() && uri.charAt(pos) == '/');
            pos--;
            uri = uri.substring(pos);
        }
        
        char[] uriChars = uri.toCharArray();
        while (lastSlash > 0) {
            pos = nextSlash(uriChars, pos + 1);
            if (pos == -1) {
                break;
            }
            
            lastSlash--;
        }
        
        String candidate;
        if (pos == -1) {
            candidate = uri;
        }
         else {
            candidate = uri.substring(0, pos);
        }
        
        candidate = removePathParameters(candidate);
        candidate = UDecoder.URLDecode(candidate, connector.getURICharset());
        candidate = org.apache.tomcat.util.http.RequestUtil.normalize(candidate);
        boolean match = canonicalContextPath.equals(candidate);
        while (!match && pos != -1) {
            pos = nextSlash(uriChars, pos + 1);
            if (pos == -1) {
                candidate = uri;
            }
             else {
                candidate = uri.substring(0, pos);
            }
            
            candidate = removePathParameters(candidate);
            candidate = UDecoder.URLDecode(candidate, connector.getURICharset());
            candidate = org.apache.tomcat.util.http.RequestUtil.normalize(candidate);
            match = canonicalContextPath.equals(candidate);
        }
        
        if (match) {
            if (pos == -1) {
                return uri;
            }
             else {
                return uri.substring(0, pos);
            }
            
        }
         else {
            throw new IllegalStateException( sm.getString("coyoteRequest.getContextPath.ise", canonicalContextPath, uri));
        }
        
    }
    
    private String removePathParameters(String input) {
        int nextSemiColon = input.indexOf(';');
        if (nextSemiColon == -1) {
            return input;
        }
        
        StringBuilder result = new StringBuilder(input.length());
        result.append(input.substring(0, nextSemiColon));
        while (true) {
            int nextSlash = input.indexOf('/', nextSemiColon);
            if (nextSlash == -1) {
                break;
            }
            
            nextSemiColon = input.indexOf(';', nextSlash);
            if (nextSemiColon == -1) {
                result.append(input.substring(nextSlash));
                break;
            }
             else {
                result.append(input.substring(nextSlash, nextSemiColon));
            }
            
        }
        
        return result.toString();
    }
    
    private int nextSlash(char[] uri, int startPos) {
        int len = uri.length;
        int pos = startPos;
        while (pos < len) {
            if (uri[pos] == '/') {
                return pos;
            }
             else if (connector.getEncodedSolidusHandlingInternal() == EncodedSolidusHandling.DECODE && uri[pos] == '%' && pos + 2 < len && uri[pos + 1] == '2' && (uri[pos + 2] == 'f' || uri[pos + 2] == 'F')) {
                return pos;
            }
            
            pos++;
        }
        
        return -1;
    }
    
    public Cookie[] getCookies() {
        if (!cookiesConverted) {
            convertCookies();
        }
        
        return cookies;
    }
    
    public ServerCookies getServerCookies() {
        parseCookies();
        return coyoteRequest.getCookies();
    }
    
    public long getDateHeader(String name) {
        String value = getHeader(name);
        if (value == null) {
            return -1L;
        }
        
        long result = FastHttpDateFormat.parseDate(value);
        if (result != (-1L)) {
            return result;
        }
        
        throw new IllegalArgumentException(value);
    }
    
    public String getHeader(String name) {
        return coyoteRequest.getHeader(name);
    }
    
    public Enumeration<String> getHeaders(String name) {
        return coyoteRequest.getMimeHeaders().values(name);
    }
    
    public Enumeration<String> getHeaderNames() {
        return coyoteRequest.getMimeHeaders().names();
    }
    
    public int getIntHeader(String name) {
        String value = getHeader(name);
        if (value == null) {
            return -1;
        }
        
        return Integer.parseInt(value);
    }
    
    public HttpServletMapping getHttpServletMapping() {
        return applicationMapping.getHttpServletMapping();
    }
    
    public String getMethod() {
        return coyoteRequest.method().toString();
    }
    
    public String getPathInfo() {
        return mappingData.pathInfo.toString();
    }
    
    public String getPathTranslated() {
        Context context = getContext();
        if (context == null) {
            return null;
        }
        
        if (getPathInfo() == null) {
            return null;
        }
        
        return context.getServletContext().getRealPath(getPathInfo());
    }
    
    public String getQueryString() {
        return coyoteRequest.queryString().toString();
    }
    
    public String getRemoteUser() {
        if (userPrincipal == null) {
            return null;
        }
        
        return userPrincipal.getName();
    }
    
    public MessageBytes getRequestPathMB() {
        return mappingData.requestPath;
    }
    
    public String getRequestedSessionId() {
        return requestedSessionId;
    }
    
    public String getRequestURI() {
        return coyoteRequest.requestURI().toString();
    }
    
    public StringBuffer getRequestURL() {
        return RequestUtil.getRequestURL(this);
    }
    
    public String getServletPath() {
        return mappingData.wrapperPath.toString();
    }
    
    public HttpSession getSession() {
        Session session = doGetSession(true);
        if (session == null) {
            return null;
        }
        
        return session.getSession();
    }
    
    public HttpSession getSession(boolean create) {
        Session session = doGetSession(create);
        if (session == null) {
            return null;
        }
        
        return session.getSession();
    }
    
    public boolean isRequestedSessionIdFromCookie() {
        if (requestedSessionId == null) {
            return false;
        }
        
        return requestedSessionCookie;
    }
    
    public boolean isRequestedSessionIdFromURL() {
        if (requestedSessionId == null) {
            return false;
        }
        
        return requestedSessionURL;
    }
    
    public boolean isRequestedSessionIdValid() {
        if (requestedSessionId == null) {
            return false;
        }
        
        Context context = getContext();
        if (context == null) {
            return false;
        }
        
        ClassLoader originalClassLoader = context.bind(null);
        try {
            Manager manager = context.getManager();
            if (manager == null) {
                return false;
            }
            
            Session session = null;
            try {
                session = manager.findSession(requestedSessionId);
            }
             catch (IOException e) {
            }
            
            if ((session == null) || !session.isValid()) {
                if (getMappingData().contexts == null) {
                    return false;
                }
                 else {
                    for (int i = (getMappingData().contexts.length); i > 0; i--) {
                        Context ctxt = getMappingData().contexts[i - 1];
                        try {
                            if (ctxt.getManager().findSession(requestedSessionId) != null) {
                                return true;
                            }
                            
                        }
                         catch (IOException e) {
                        }
                        
                    }
                    
                    return false;
                }
                
            }
            
            return true;
        }
         finally {
            context.unbind(originalClassLoader);
        }
        
    }
    
    public boolean isUserInRole(String role) {
        if (userPrincipal == null) {
            return false;
        }
        
        Context context = getContext();
        if (context == null) {
            return false;
        }
        
        if ("*".equals(role)) {
            return false;
        }
        
        if ("**".equals(role) && !context.findSecurityRole("**")) {
            return userPrincipal != null;
        }
        
        Realm realm = context.getRealm();
        if (realm == null) {
            return false;
        }
        
        return realm.hasRole(getWrapper(), userPrincipal, role);
    }
    
    public Principal getPrincipal() {
        return userPrincipal;
    }
    
    public Principal getUserPrincipal() {
        if (userPrincipal instanceof TomcatPrincipal) {
            GSSCredential gssCredential = ((TomcatPrincipal) userPrincipal).getGssCredential();
            if (gssCredential != null) {
                int left = -1;
                try {
                    left = gssCredential.getRemainingLifetime();
                }
                 catch (GSSException | IllegalStateException e) {
                    log.warn(sm.getString("coyoteRequest.gssLifetimeFail", userPrincipal.getName()), e);
                }
                
                if (left <= 0) {
                    try {
                        logout();
                    }
                     catch (ServletException e) {
                    }
                    
                    return null;
                }
                
            }
            
            return ((TomcatPrincipal) userPrincipal).getUserPrincipal();
        }
        
        return userPrincipal;
    }
    
    public Session getSessionInternal() {
        return doGetSession(true);
    }
    
    public void changeSessionId(String newSessionId) {
        if (requestedSessionId != null && requestedSessionId.length() > 0) {
            requestedSessionId = newSessionId;
        }
        
        Context context = getContext();
        if (context != null && !context.getServletContext().getEffectiveSessionTrackingModes().contains(SessionTrackingMode.COOKIE)) {
            return;
        }
        
        if (response != null) {
            Cookie newCookie = ApplicationSessionCookieConfig.createSessionCookie(context, newSessionId, isSecure());
            response.addSessionCookieInternal(newCookie);
        }
        
    }
    
    public String changeSessionId() {
        Session session = this.getSessionInternal(false);
        if (session == null) {
            throw new IllegalStateException(sm.getString("coyoteRequest.changeSessionId"));
        }
        
        Manager manager = this.getContext().getManager();
        String newSessionId = manager.rotateSessionId(session);
        this.changeSessionId(newSessionId);
        return newSessionId;
    }
    
    public Session getSessionInternal(boolean create) {
        return doGetSession(create);
    }
    
    public boolean isParametersParsed() {
        return parametersParsed;
    }
    
    public boolean isFinished() {
        return coyoteRequest.isFinished();
    }
    
    protected void checkSwallowInput() {
        Context context = getContext();
        if (context != null && !context.getSwallowAbortedUploads()) {
            coyoteRequest.action(ActionCode.DISABLE_SWALLOW_INPUT, null);
        }
        
    }
    
    public boolean authenticate(HttpServletResponse response) throws IOException, ServletException {
        if (response.isCommitted()) {
            throw new IllegalStateException(sm.getString("coyoteRequest.authenticate.ise"));
        }
        
        return getContext().getAuthenticator().authenticate(this, response);
    }
    
    public void login(String username, String password) throws ServletException {
        if (getAuthType() != null || getRemoteUser() != null || getUserPrincipal() != null) {
            throw new ServletException(sm.getString("coyoteRequest.alreadyAuthenticated"));
        }
        
        getContext().getAuthenticator().login(username, password, this);
    }
    
    public void logout() throws ServletException {
        getContext().getAuthenticator().logout(this);
    }
    
    public Collection<Part> getParts() throws IOException, IllegalStateException, ServletException {
        parseParts();
        if (partsParseException != null) {
            if (partsParseException instanceof IOException) {
                throw (IOException) partsParseException;
            }
             else if (partsParseException instanceof IllegalStateException) {
                throw (IllegalStateException) partsParseException;
            }
             else if (partsParseException instanceof ServletException) {
                throw (ServletException) partsParseException;
            }
            
        }
        
        return parts;
    }
    
    private void parseParts() {
        if (parts != null || partsParseException != null) {
            return;
        }
        
        Context context = getContext();
        MultipartConfigElement mce = getWrapper().getMultipartConfigElement();
        if (mce == null) {
            if (context.getAllowCasualMultipartParsing()) {
                mce = new MultipartConfigElement(null, connector.getMaxPostSize(), connector.getMaxPostSize(), connector.getMaxPostSize());
            }
             else {
                partsParseException = new IllegalStateException(sm.getString("coyoteRequest.noMultipartConfig"));
                return;
            }
            
        }
        
        int maxParameterCount = getConnector().getMaxParameterCount();
        Parameters parameters = coyoteRequest.getParameters();
        parameters.setLimit(maxParameterCount);
        boolean success = false;
        try {
            File location;
            String locationStr = mce.getLocation();
            if (locationStr == null || locationStr.length() == 0) {
                location = ((File) context.getServletContext().getAttribute(ServletContext.TEMPDIR));
            }
             else {
                location = new File(locationStr);
                if (!location.isAbsolute()) {
                    location = new File((File) context.getServletContext().getAttribute(ServletContext.TEMPDIR), locationStr).getAbsoluteFile();
                }
                
            }
            
            if (!location.exists() && context.getCreateUploadTargets()) {
                log.warn(sm.getString("coyoteRequest.uploadCreate", location.getAbsolutePath(), getMappingData().wrapper.getName()));
                if (!location.mkdirs()) {
                    log.warn(sm.getString("coyoteRequest.uploadCreateFail", location.getAbsolutePath()));
                }
                
            }
            
            if (!location.isDirectory()) {
                parameters.setParseFailedReason(FailReason.MULTIPART_CONFIG_INVALID);
                partsParseException = new IOException(sm.getString("coyoteRequest.uploadLocationInvalid", location));
                return;
            }
            
            DiskFileItemFactory factory = new DiskFileItemFactory();
            try {
                factory.setRepository(location.getCanonicalFile());
            }
             catch (IOException ioe) {
                parameters.setParseFailedReason(FailReason.IO_ERROR);
                partsParseException = ioe;
                return;
            }
            
            factory.setSizeThreshold(mce.getFileSizeThreshold());
            FileUpload upload = new FileUpload();
            upload.setFileItemFactory(factory);
            upload.setFileSizeMax(mce.getMaxFileSize());
            upload.setSizeMax(mce.getMaxRequestSize());
            if (maxParameterCount > -1) {
                upload.setFileCountMax(maxParameterCount - parameters.size());
            }
            
            parts = new ArrayList<>();
            try {
                List<FileItem> items = upload.parseRequest(new ServletRequestContext(this));
                int maxPostSize = getConnector().getMaxPostSize();
                int postSize = 0;
                Charset charset = getCharset();
                for (FileItem item : items) {
                    ApplicationPart part = new ApplicationPart(item, location);
                    parts.add(part);
                    if (part.getSubmittedFileName() == null) {
                        String name = part.getName();
                        if (maxPostSize >= 0) {
                            postSize += name.getBytes(charset).length;
                            postSize++;
                            postSize += part.getSize();
                            postSize++;
                            if (postSize > maxPostSize) {
                                parameters.setParseFailedReason(FailReason.POST_TOO_LARGE);
                                throw new IllegalStateException(sm.getString("coyoteRequest.maxPostSizeExceeded"));
                            }
                            
                        }
                        
                        String value = null;
                        try {
                            value = part.getString(charset.name());
                        }
                         catch (UnsupportedEncodingException uee) {
                        }
                        
                        parameters.addParameter(name, value);
                    }
                    
                }
                
                success = true;
            }
             catch (InvalidContentTypeException e) {
                parameters.setParseFailedReason(FailReason.INVALID_CONTENT_TYPE);
                partsParseException = new ServletException(e);
            }
             catch (SizeException e) {
                parameters.setParseFailedReason(FailReason.POST_TOO_LARGE);
                checkSwallowInput();
                partsParseException = new IllegalStateException(e);
            }
             catch (IOException e) {
                parameters.setParseFailedReason(FailReason.IO_ERROR);
                partsParseException = e;
            }
             catch (IllegalStateException e) {
                checkSwallowInput();
                partsParseException = e;
            }
            
        }
         finally {
            if (partsParseException != null || !success) {
                parameters.setParseFailedReason(FailReason.UNKNOWN);
            }
            
        }
        
    }
    
    public Part getPart(String name) throws IOException, IllegalStateException, ServletException {
        for (Part part : getParts()) {
            if (name.equals(part.getName())) {
                return part;
            }
            
        }
        
        return null;
    }
    
    protected Session doGetSession(boolean create) {
        Context context = getContext();
        if (context == null) {
            return null;
        }
        
        if ((session != null) && !session.isValid()) {
            session = null;
        }
        
        if (session != null) {
            return session;
        }
        
        Manager manager = context.getManager();
        if (manager == null) {
            return null; 
        }
        
        if (requestedSessionId != null) {
            try {
                session = manager.findSession(requestedSessionId);
            }
             catch (IOException e) {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("request.session.failed", requestedSessionId, e.getMessage()), e);
                }
                 else {
                    log.info(sm.getString("request.session.failed", requestedSessionId, e.getMessage()));
                }
                
                session = null;
            }
            
            if ((session != null) && !session.isValid()) {
                session = null;
            }
            
            if (session != null) {
                session.access();
                return session;
            }
            
        }
        
        if (!create) {
            return null;
        }
        
        boolean trackModesIncludesCookie = context.getServletContext().getEffectiveSessionTrackingModes().contains(SessionTrackingMode.COOKIE);
        if (trackModesIncludesCookie && response.getResponse().isCommitted()) {
            throw new IllegalStateException(sm.getString("coyoteRequest.sessionCreateCommitted"));
        }
        
        String sessionId = getRequestedSessionId();
        if (requestedSessionSSL) {
        }
         else if (("/".equals(context.getSessionCookiePath()) && isRequestedSessionIdFromCookie())) {
            if (context.getValidateClientProvidedNewSessionId()) {
                boolean found = false;
                for (Container container : getHost().findChildren()) {
                    Manager m = ((Context) container).getManager();
                    if (m != null) {
                        try {
                            if (m.findSession(sessionId) != null) {
                                found = true;
                                break;
                            }
                            
                        }
                         catch (IOException e) {
                        }
                        
                    }
                    
                }
                
                if (!found) {
                    sessionId = null;
                }
                
            }
            
        }
         else {
            sessionId = null;
        }
        
        session = manager.createSession(sessionId);
        if (session != null && trackModesIncludesCookie) {
            Cookie cookie = ApplicationSessionCookieConfig.createSessionCookie(context, session.getIdInternal(), isSecure());
            response.addSessionCookieInternal(cookie);
        }
        
        if (session == null) {
            return null;
        }
        
        session.access();
        return session;
    }
    
    protected String unescape(String s) {
        if (s == null) {
            return null;
        }
        
        if (s.indexOf('\\') == -1) {
            return s;
        }
        
        StringBuilder buf = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c != '\\') {
                buf.append(c);
            }
             else {
                if (++i >= s.length()) {
                    throw new IllegalArgumentException();
                }
                
                c = s.charAt(i);
                buf.append(c);
            }
            
        }
        
        return buf.toString();
    }
    
    private CookieProcessor getCookieProcessor() {
        Context context = getContext();
        if (context == null) {
            return new Rfc6265CookieProcessor();
        }
         else {
            return context.getCookieProcessor();
        }
        
    }
    
    protected void parseCookies() {
        if (cookiesParsed) {
            return;
        }
        
        cookiesParsed = true;
        ServerCookies serverCookies = coyoteRequest.getCookies();
        serverCookies.setLimit(connector.getMaxCookieCount());
        getCookieProcessor().parseCookieHeader(coyoteRequest.getMimeHeaders(), serverCookies);
    }
    
    protected void convertCookies() {
        if (cookiesConverted) {
            return;
        }
        
        cookiesConverted = true;
        parseCookies();
        ServerCookies serverCookies = coyoteRequest.getCookies();
        int count = serverCookies.getCookieCount();
        if (count <= 0) {
            return;
        }
        
        cookies = new Cookie[count];
        int idx = 0;
        for (int i = 0; i < count; i++) {
            ServerCookie scookie = serverCookies.getCookie(i);
            try {
                Cookie cookie = new Cookie(scookie.getName().toString(), null);
                scookie.getValue().getByteChunk().setCharset(getCookieProcessor().getCharset());
                cookie.setValue(unescape(scookie.getValue().toString()));
                cookies[idx++] = cookie;
            }
             catch (IllegalArgumentException e) {
            }
            
        }
        
        if (idx < count) {
            Cookie[] ncookies = new Cookie[idx];
            System.arraycopy(cookies, 0, ncookies, 0, idx);
            cookies = ncookies;
        }
        
    }
    
    protected void parseParameters() {
        parametersParsed = true;
        Parameters parameters = coyoteRequest.getParameters();
        boolean success = false;
        try {
            int maxParameterCount = getConnector().getMaxParameterCount();
            if (parts != null && maxParameterCount > 0) {
                maxParameterCount -= parts.size();
            }
            
            parameters.setLimit(maxParameterCount);
            Charset charset = getCharset();
            boolean useBodyEncodingForURI = connector.getUseBodyEncodingForURI();
            parameters.setCharset(charset);
            if (useBodyEncodingForURI) {
                parameters.setQueryStringCharset(charset);
            }
            
            parameters.handleQueryParameters();
            if (usingInputStream || usingReader) {
                success = true;
                return;
            }
            
            String contentType = getContentType();
            if (contentType == null) {
                contentType = "";
            }
            
            int semicolon = contentType.indexOf(';');
            if (semicolon >= 0) {
                contentType = contentType.substring(0, semicolon).trim();
            }
             else {
                contentType = contentType.trim();
            }
            
            if ("multipart/form-data".equals(contentType)) {
                parseParts();
                success = true;
                return;
            }
            
            if (!getConnector().isParseBodyMethod(getMethod())) {
                success = true;
                return;
            }
            
            if (!("application/x-www-form-urlencoded".equals(contentType))) {
                success = true;
                return;
            }
            
            int len = getContentLength();
            if (len > 0) {
                int maxPostSize = connector.getMaxPostSize();
                if ((maxPostSize >= 0) && (len > maxPostSize)) {
                    Context context = getContext();
                    if (context != null && context.getLogger().isDebugEnabled()) {
                        context.getLogger().debug(sm.getString("coyoteRequest.postTooLarge"));
                    }
                    
                    checkSwallowInput();
                    parameters.setParseFailedReason(FailReason.POST_TOO_LARGE);
                    return;
                }
                
                byte[] formData = null;
                if (len < CACHED_POST_LEN) {
                    if (postData == null) {
                        postData = new byte[CACHED_POST_LEN];
                    }
                    
                    formData = postData;
                }
                 else {
                    formData = new byte[len];
                }
                
                try {
                    readPostBodyFully(formData, len);
                }
                 catch (IOException e) {
                    Context context = getContext();
                    if (context != null && context.getLogger().isDebugEnabled()) {
                        context.getLogger().debug(sm.getString("coyoteRequest.parseParameters"), e);
                    }
                    
                    parameters.setParseFailedReason(FailReason.CLIENT_DISCONNECT);
                    return;
                }
                
                parameters.processParameters(formData, 0, len);
            }
             else if ("chunked".equalsIgnoreCase(coyoteRequest.getHeader("transfer-encoding"))) {
                byte[] formData = null;
                try {
                    formData = readChunkedPostBody();
                }
                 catch (IllegalStateException ise) {
                    parameters.setParseFailedReason(FailReason.POST_TOO_LARGE);
                    Context context = getContext();
                    if (context != null && context.getLogger().isDebugEnabled()) {
                        context.getLogger().debug(sm.getString("coyoteRequest.parseParameters"), ise);
                    }
                    
                    return;
                }
                 catch (IOException e) {
                    parameters.setParseFailedReason(FailReason.CLIENT_DISCONNECT);
                    Context context = getContext();
                    if (context != null && context.getLogger().isDebugEnabled()) {
                        context.getLogger().debug(sm.getString("coyoteRequest.parseParameters"), e);
                    }
                    
                    return;
                }
                
                if (formData != null) {
                    parameters.processParameters(formData, 0, formData.length);
                }
                
            }
            
            success = true;
        }
         finally {
            if (!success) {
                parameters.setParseFailedReason(FailReason.UNKNOWN);
            }
            
        }
        
    }
    
    protected void readPostBodyFully(byte[] body, int len) throws IOException {
        int offset = 0;
        do {
            int inputLen = getStream().read(body, offset, len - offset);
            if (inputLen <= 0) {
                throw new EOFException();
            }
            
            offset += inputLen;
        }
         while ((len - offset) > 0);
    }
    
    protected byte[] readChunkedPostBody() throws IOException {
        ByteChunk body = new ByteChunk();
        byte[] buffer = new byte[CACHED_POST_LEN];
        int len = 0;
        while (len > -1) {
            len = getStream().read(buffer, 0, CACHED_POST_LEN);
            if (connector.getMaxPostSize() >= 0 && (body.getLength() + len) > connector.getMaxPostSize()) {
                checkSwallowInput();
                throw new IllegalStateException(sm.getString("coyoteRequest.chunkedPostTooLarge"));
            }
            
            if (len > 0) {
                body.append(buffer, 0, len);
            }
            
        }
        
        if (body.getLength() == 0) {
            return null;
        }
        
        if (body.getLength() < body.getBuffer().length) {
            int length = body.getLength();
            byte[] result = new byte[length];
            System.arraycopy(body.getBuffer(), 0, result, 0, length);
            return result;
        }
        
        return body.getBuffer();
    }
    
    protected void parseLocales() {
        localesParsed = true;
        TreeMap<Double,ArrayList<Locale>> locales = new TreeMap<>();
        Enumeration<String> values = getHeaders("accept-language");
        while (values.hasMoreElements()) {
            String value = values.nextElement();
            parseLocalesHeader(value, locales);
        }
        
        for (ArrayList<Locale> list : locales.values()) {
            for (Locale locale : list) {
                addLocale(locale);
            }
            
        }
        
    }
    
    protected void parseLocalesHeader(String value, TreeMap<Double,ArrayList<Locale>> locales) {
        List<AcceptLanguage> acceptLanguages;
        try {
            acceptLanguages = AcceptLanguage.parse(new StringReader(value));
        }
         catch (IOException e) {
            return;
        }
        
        for (AcceptLanguage acceptLanguage : acceptLanguages) {
            Double key = Double.valueOf(-acceptLanguage.getQuality()); 
            locales.computeIfAbsent(key, k -> new ArrayList<>()).add(acceptLanguage.getLocale());
        }
        
    }
    
    private interface SpecialAttributeAdapter {
        Object get(Request request, String name);
        void set(Request request, String name, Object value);
    }
    
    private static final Map<String,SpecialAttributeAdapter> specialAttributes = new HashMap<>();
    static {
        specialAttributes.put(Globals.DISPATCHER_TYPE_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                return (request.internalDispatcherType == null) ? DispatcherType.REQUEST : request.internalDispatcherType;
            }
            
            public void set(Request request, String name, Object value) {
                request.internalDispatcherType = (DispatcherType) value;
            }
            
        }
        
);
        specialAttributes.put(Globals.DISPATCHER_REQUEST_PATH_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                return (request.requestDispatcherPath == null) ? request.getRequestPathMB().toString() : request.requestDispatcherPath.toString();
            }
            
            public void set(Request request, String name, Object value) {
                request.requestDispatcherPath = value;
            }
            
        }
        
);
        specialAttributes.put(Globals.ASYNC_SUPPORTED_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                return request.asyncSupported;
            }
            
            public void set(Request request, String name, Object value) {
                Boolean oldValue = request.asyncSupported;
                request.asyncSupported = (Boolean) value;
                request.notifyAttributeAssigned(name, value, oldValue);
            }
            
        }
        
);
        specialAttributes.put(Globals.GSS_CREDENTIAL_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                if (request.userPrincipal instanceof TomcatPrincipal) {
                    return ((TomcatPrincipal) request.userPrincipal).getGssCredential();
                }
                
                return null;
            }
            
            public void set(Request request, String name, Object value) {
            }
            
        }
        
);
        specialAttributes.put(Globals.PARAMETER_PARSE_FAILED_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                if (request.getCoyoteRequest().getParameters().isParseFailed()) {
                    return Boolean.TRUE;
                }
                
                return null;
            }
            
            public void set(Request request, String name, Object value) {
            }
            
        }
        
);
        specialAttributes.put(Globals.PARAMETER_PARSE_FAILED_REASON_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                return request.getCoyoteRequest().getParameters().getParseFailedReason();
            }
            
            public void set(Request request, String name, Object value) {
            }
            
        }
        
);
        specialAttributes.put(Globals.SENDFILE_SUPPORTED_ATTR, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                return Boolean.valueOf(request.getConnector().getProtocolHandler().isSendfileSupported() && request.getCoyoteRequest().getSendfile());
            }
            
            public void set(Request request, String name, Object value) {
            }
            
        }
        
);
        specialAttributes.put(Globals.REMOTE_IP_FILTER_SECURE, new SpecialAttributeAdapter() {
            public Object get(Request request, String name) {
                return Boolean.valueOf(request.isSecure());
            }
            
            public void set(Request request, String name, Object value) {
                if (value instanceof Boolean) {
                    request.setSecure(((Boolean) value).booleanValue());
                }
                
            }
            
        }
        
);
    }
    
}


