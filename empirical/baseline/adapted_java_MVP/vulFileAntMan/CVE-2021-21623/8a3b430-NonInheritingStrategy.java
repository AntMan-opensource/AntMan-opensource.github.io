package org.jenkinsci.plugins.matrixauth.inheritance;
import hudson.Extension;
import hudson.security.ACL;
import hudson.security.AccessControlled;
import hudson.security.Permission;
import jenkins.model.Jenkins;
import org.acegisecurity.Authentication;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.DataBoundConstructor;
import javax.annotation.Nonnull;
public class NonInheritingStrategy extends InheritanceStrategy {
    public NonInheritingStrategy() {
    }
    
    public ACL getEffectiveACL(ACL acl, AccessControlled subject) {
        final ACL rootACL = Jenkins.get().getAuthorizationStrategy().getRootACL();
        return new ACL() {
            public boolean hasPermission(@Nonnull Authentication a, @Nonnull Permission permission) {
                return isUltimatelyImpliedByAdminister(permission) && rootACL.hasPermission(a, Jenkins.ADMINISTER) || acl.hasPermission(a, permission);
            }
            
            private boolean isUltimatelyImpliedByAdminister(Permission permission) {
                while (permission.impliedBy != null) {
                    permission = permission.impliedBy;
                }
                
                return permission == Jenkins.ADMINISTER;
            }
            
        };
    }
    
    @Extension(ordinal = -100)
    public static class DescriptorImpl extends InheritanceStrategyDescriptor {
        public boolean isApplicable(Class<?> clazz) {
            return true;
        }
        
        public String getDisplayName() {
            return Messages.NonInheritingStrategy_DisplayName();
        }
        
    }
    
}


