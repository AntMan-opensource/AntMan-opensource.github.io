package org.jenkinsci.plugins.matrixauth.inheritance;
import hudson.Extension;
import hudson.model.AbstractItem;
import hudson.model.ItemGroup;
import hudson.security.ACL;
import hudson.security.AccessControlled;
import hudson.security.ProjectMatrixAuthorizationStrategy;
import jenkins.model.Jenkins;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.DataBoundConstructor;
import javax.annotation.Nonnull;
public class InheritParentStrategy extends InheritanceStrategy {
    public InheritParentStrategy() {
    }
    
    public ACL getEffectiveACL(ACL acl, AccessControlled subject) {
        if (subject instanceof AbstractItem) {
            AbstractItem item = (AbstractItem) subject;
            ItemGroup<?> parent = item.getParent();
            final ACL parentACL;
            if (parent instanceof AbstractItem) {
                parentACL = Jenkins.get().getAuthorizationStrategy().getACL((AbstractItem) parent);
            }
             else {
                parentACL = Jenkins.get().getAuthorizationStrategy().getRootACL();
            }
            
            return ProjectMatrixAuthorizationStrategy.inheritingACL(parentACL, acl);
        }
         else {
            throw new IllegalArgumentException("Expected subject to be AbstractItem, but got " + subject);
        }
        
    }
    
    @Extension(ordinal = 100)
    public static class DescriptorImpl extends InheritanceStrategyDescriptor {
        public boolean isApplicable(Class<?> clazz) {
            return AbstractItem.class.isAssignableFrom(clazz);
        }
        
        public String getDisplayName() {
            return Messages.InheritParentStrategy_DisplayName();
        }
        
    }
    
}


