package hudson.security;
import com.cloudbees.hudson.plugins.folder.AbstractFolder;
import hudson.model.AbstractItem;
import hudson.model.Descriptor;
import hudson.model.Node;
import jenkins.model.Jenkins;
import hudson.model.Item;
import hudson.model.ItemGroup;
import hudson.model.Job;
import hudson.Extension;
import org.acegisecurity.Authentication;
import org.jenkinsci.plugins.matrixauth.AuthorizationMatrixNodeProperty;
import org.jenkinsci.plugins.matrixauth.Messages;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.DoNotUse;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import javax.annotation.Nonnull;
import java.util.Set;
import java.util.TreeSet;
public class ProjectMatrixAuthorizationStrategy extends GlobalMatrixAuthorizationStrategy {
    public ACL getACL(@Nonnull Job<?,?> project) {
        AuthorizationMatrixProperty amp = project.getProperty(AuthorizationMatrixProperty.class);
        if (amp != null) {
            return amp.getInheritanceStrategy().getEffectiveACL(amp.getACL(), project);
        }
         else {
            return getACL(project.getParent());
        }
        
    }
    
    public static ACL inheritingACL(final ACL parent, final ACL child) {
        if (parent instanceof SidACL && child instanceof SidACL) {
            return ((SidACL) child).newInheritingACL((SidACL) parent);
        }
        
        return new ACL() {
            public boolean hasPermission(@Nonnull Authentication a, @Nonnull Permission permission) {
                return a.equals(SYSTEM) || child.hasPermission(a, permission) || parent.hasPermission(a, permission);
            }
            
        };
    }
    
    public ACL getACL(ItemGroup<?> g) {
        if (g instanceof Item) {
            Item item = (Item) g;
            return item.getACL();
        }
        
        return getRootACL();
    }
    
    public ACL getACL(@Nonnull Node node) {
        AuthorizationMatrixNodeProperty property = node.getNodeProperty(AuthorizationMatrixNodeProperty.class);
        if (property != null) {
            return property.getInheritanceStrategy().getEffectiveACL(property.getACL(), node);
        }
        
        return getRootACL();
    }
    
    public ACL getACL(@Nonnull AbstractItem item) {
        if (Jenkins.get().getPlugin("cloudbees-folder") != null) { 
            if (item instanceof AbstractFolder) {
                com.cloudbees.hudson.plugins.folder.properties.AuthorizationMatrixProperty p = ((AbstractFolder<?>) item).getProperties().get(com.cloudbees.hudson.plugins.folder.properties.AuthorizationMatrixProperty.class);
                if (p != null) {
                    return p.getInheritanceStrategy().getEffectiveACL(p.getACL(), item);
                }
                
            }
            
        }
        
        return getACL(item.getParent());
    }
    
    public Set<String> getGroups() {
        Set<String> r = new TreeSet<>(new IdStrategyComparator());
        r.addAll(super.getGroups());
        for (Job<?,?> j : Jenkins.get().getAllItems(Job.class)) {
            AuthorizationMatrixProperty jobProperty = j.getProperty(AuthorizationMatrixProperty.class);
            if (jobProperty != null){
                r.addAll(jobProperty.getGroups());
}
        }
        
        for (AbstractFolder<?> j : Jenkins.get().getAllItems(AbstractFolder.class)) {
            com.cloudbees.hudson.plugins.folder.properties.AuthorizationMatrixProperty folderProperty = j.getProperties().get(com.cloudbees.hudson.plugins.folder.properties.AuthorizationMatrixProperty.class);
            if (folderProperty != null){
                r.addAll(folderProperty.getGroups());
}
        }
        
        for (Node node : Jenkins.get().getNodes()) {
            AuthorizationMatrixNodeProperty nodeProperty = node.getNodeProperty(AuthorizationMatrixNodeProperty.class);
            if (nodeProperty != null) {
                r.addAll(nodeProperty.getGroups());
            }
            
        }
        
        return r;
    }
    
    public static final Descriptor<AuthorizationStrategy> DESCRIPTOR = new DescriptorImpl() {
        protected GlobalMatrixAuthorizationStrategy create() {
            return new ProjectMatrixAuthorizationStrategy();
        }
        
        public String getDisplayName() {
            return Messages.ProjectMatrixAuthorizationStrategy_DisplayName();
        }
        
    };
    public static class ConverterImpl extends GlobalMatrixAuthorizationStrategy.ConverterImpl {
        public GlobalMatrixAuthorizationStrategy create() {
            return new ProjectMatrixAuthorizationStrategy();
        }
        
        public boolean canConvert(Class type) {
            return type==ProjectMatrixAuthorizationStrategy.class;
        }
        
    }
    
}


