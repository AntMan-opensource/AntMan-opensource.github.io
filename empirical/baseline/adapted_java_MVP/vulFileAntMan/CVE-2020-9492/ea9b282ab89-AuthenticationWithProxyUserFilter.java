package org.apache.hadoop.security;
import org.apache.hadoop.security.authentication.server.AuthenticationFilter;
import org.apache.hadoop.security.authorize.AuthorizationException;
import org.apache.hadoop.security.authorize.ProxyUsers;
import org.apache.hadoop.util.HttpExceptionUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.List;
public class AuthenticationWithProxyUserFilter extends AuthenticationFilter {
  private static final String DO_AS = "doAs";
  private static final Charset UTF8_CHARSET = Charset.forName("UTF-8");
  protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
    String proxyUser = getDoAs(request);
    if (proxyUser != null) {
      UserGroupInformation realUser = UserGroupInformation.createRemoteUser(request.getRemoteUser());
      UserGroupInformation proxyUserInfo = UserGroupInformation.createProxyUser(proxyUser, realUser);
      try {
        ProxyUsers.authorize(proxyUserInfo, request.getRemoteAddr());
      }
       catch (AuthorizationException ex) {
        HttpExceptionUtils.createServletExceptionResponse(response, HttpServletResponse.SC_FORBIDDEN, ex);
        return;
      }
      
      final UserGroupInformation finalProxyUser = proxyUserInfo;
      request = new HttpServletRequestWrapper(request) {
        public String getRemoteUser() {
          return finalProxyUser.getUserName();
        }
        
      };
    }
    
    filterChain.doFilter(request, response);
  }
  
  public static String getDoAs(HttpServletRequest request) {
    String queryString = request.getQueryString();
    if (queryString == null) {
      return null;
    }
    
    List<NameValuePair> list = URLEncodedUtils.parse(queryString, UTF8_CHARSET);
    if (list != null) {
      for (NameValuePair nv : list) {
        if (DO_AS.equalsIgnoreCase(nv.getName())) {
          return nv.getValue();
        }
        
      }
      
    }
    
    return null;
  }
  
}


