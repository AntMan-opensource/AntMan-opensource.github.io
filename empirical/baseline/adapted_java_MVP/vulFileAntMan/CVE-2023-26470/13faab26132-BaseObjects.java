package com.xpn.xwiki.internal.doc;
import java.util.AbstractList;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentSkipListMap;
import com.xpn.xwiki.objects.BaseObject;
public class BaseObjects extends AbstractList<BaseObject> {
    private Map<Integer, BaseObject> map = new ConcurrentSkipListMap<>();
    private int size;
    public BaseObjects() {
    }
    
    public BaseObjects(Collection<BaseObject> collection) {
        collection.forEach(this::add);
    }
    
    public BaseObject get(int index) {
        rangeCheck(index);
        return this.map.get(index);
    }
    
    public int size() {
        return this.size;
    }
    
    private BaseObject put(int index, BaseObject element) {
        BaseObject old;
        if (element == null) {
            old = this.map.remove(index);
        }
         else {
            element.setNumber(index);
            old = this.map.put(index, element);
        }
        
        if (this.size <= index) {
            this.size = index + 1;
        }
        
        return old;
    }
    
    public void add(int index, BaseObject element) {
        rangeCheckForAdd(index);
        if (index < this.size) {
            for (int i = this.size - 1; i >= index; --i) {
                put(i + 1, get(i));
            }
            
        }
        
        put(index, element);
    }
    
    public BaseObject set(int index, BaseObject element) {
        rangeCheck(index);
        return put(index, element);
    }
    
    public BaseObject remove(int index) {
        rangeCheck(index);
        return this.map.remove(index);
    }
    
    private void rangeCheck(int index) {
        if (index < 0 || index >= this.size) {
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }
        
    }
    
    private void rangeCheckForAdd(int index) {
        if (index < 0 || index > this.size || index == Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }
        
    }
    
    private String outOfBoundsMsg(int index) {
        return "Index: " + index + ", Size: " + size;
    }
    
}


