package org.keycloak.protocol.oidc.utils;
import java.util.Map;
import java.util.regex.Pattern;
import org.jboss.logging.Logger;
import org.keycloak.common.util.Time;
import org.keycloak.events.Details;
import org.keycloak.events.EventBuilder;
import org.keycloak.models.AuthenticatedClientSessionModel;
import org.keycloak.models.KeycloakSession;
import org.keycloak.models.RealmModel;
import org.keycloak.models.SingleUseObjectProvider;
import org.keycloak.models.UserSessionModel;
import org.keycloak.services.managers.UserSessionCrossDCManager;
import static org.keycloak.utils.LockObjectsForModification.lockUserSessionsForModification;
public class OAuth2CodeParser {
    private static final Logger logger = Logger.getLogger(OAuth2CodeParser.class);
    private static final Pattern DOT = Pattern.compile("\\.");
    public static String persistCode(KeycloakSession session, AuthenticatedClientSessionModel clientSession, OAuth2Code codeData) {
        SingleUseObjectProvider codeStore = session.getProvider(SingleUseObjectProvider.class);
        String key = codeData.getId();
        if (key == null) {
            throw new IllegalStateException("ID not present in the data");
        }
        
        Map<String, String> serialized = codeData.serializeCode();
        codeStore.put(key, clientSession.getUserSession().getRealm().getAccessCodeLifespan(), serialized);
        return key + "." + clientSession.getUserSession().getId() + "." + clientSession.getClient().getId();
    }
    
    public static ParseResult parseCode(KeycloakSession session, String code, RealmModel realm, EventBuilder event) {
        ParseResult result = new ParseResult(code);
        String[] parsed = DOT.split(code, 3);
        if (parsed.length < 3) {
            logger.warn("Invalid format of the code");
            return result.illegalCode();
        }
        
        String userSessionId = parsed[1];
        String clientUUID = parsed[2];
        event.detail(Details.CODE_ID, userSessionId);
        event.session(userSessionId);
        String codeUUID;
        try {
            codeUUID = parsed[0];
        }
         catch (IllegalArgumentException re) {
            logger.warn("Invalid format of the UUID in the code");
            return result.illegalCode();
        }
        
        UserSessionModel userSession = lockUserSessionsForModification(session, () -> new UserSessionCrossDCManager(session).getUserSessionWithClient(realm, userSessionId, clientUUID));
        if (userSession == null) {
            userSession = lockUserSessionsForModification(session, () -> session.sessions().getUserSession(realm, userSessionId));
            if (userSession == null) {
                return result.illegalCode();
            }
            
        }
        
        result.clientSession = userSession.getAuthenticatedClientSessionByClient(clientUUID);
        SingleUseObjectProvider codeStore = session.getProvider(SingleUseObjectProvider.class);
        Map<String, String> codeData = codeStore.remove(codeUUID);
        if (codeData == null) {
            logger.warnf("Code '%s' already used for userSession '%s' and client '%s'.", codeUUID, userSessionId, clientUUID);
            return result.illegalCode();
        }
        
        logger.tracef("Successfully verified code '%s'. User session: '%s', client: '%s'", codeUUID, userSessionId, clientUUID);
        result.codeData = OAuth2Code.deserializeCode(codeData);
        int currentTime = Time.currentTime();
        if (currentTime > result.codeData.getExpiration()) {
            return result.expiredCode();
        }
        
        return result;
    }
    
    public static class ParseResult {
        private final String code;
        private OAuth2Code codeData;
        private AuthenticatedClientSessionModel clientSession;
        private boolean isIllegalCode = false;
        private boolean isExpiredCode = false;
        private ParseResult(String code, OAuth2Code codeData, AuthenticatedClientSessionModel clientSession) {
            this.code = code;
            this.codeData = codeData;
            this.clientSession = clientSession;
            this.isIllegalCode = false;
            this.isExpiredCode = false;
        }
        
        private ParseResult(String code) {
            this.code = code;
        }
        
        public String getCode() {
            return code;
        }
        
        public OAuth2Code getCodeData() {
            return codeData;
        }
        
        public AuthenticatedClientSessionModel getClientSession() {
            return clientSession;
        }
        
        public boolean isIllegalCode() {
            return isIllegalCode;
        }
        
        public boolean isExpiredCode() {
            return isExpiredCode;
        }
        
        private ParseResult illegalCode() {
            this.isIllegalCode = true;
            return this;
        }
        
        private ParseResult expiredCode() {
            this.isExpiredCode = true;
            return this;
        }
        
    }
    
}


