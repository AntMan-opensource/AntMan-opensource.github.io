package com.xpn.xwiki.web;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import javax.inject.Inject;
import javax.inject.Named;
import javax.script.ScriptContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.velocity.VelocityContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xwiki.bridge.event.ActionExecutedEvent;
import org.xwiki.bridge.event.ActionExecutingEvent;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.component.util.DefaultParameterizedType;
import org.xwiki.container.Container;
import org.xwiki.container.Request;
import org.xwiki.container.servlet.ServletContainerException;
import org.xwiki.container.servlet.ServletContainerInitializer;
import org.xwiki.container.servlet.ServletRequest;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContext;
import org.xwiki.csrf.CSRFToken;
import org.xwiki.internal.web.DocExistValidator;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.job.internal.DefaultJobProgress;
import org.xwiki.localization.ContextualLocalizationManager;
import org.xwiki.localization.LocaleUtils;
import org.xwiki.model.EntityType;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceProvider;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.EntityReferenceValueProvider;
import org.xwiki.model.reference.SpaceReference;
import org.xwiki.model.validation.EntityNameValidationConfiguration;
import org.xwiki.model.validation.EntityNameValidationManager;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.WrappedThreadEventListener;
import org.xwiki.rendering.async.AsyncContext;
import org.xwiki.rendering.internal.transformation.MutableRenderingContext;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.RenderingContext;
import org.xwiki.resource.NotFoundResourceHandlerException;
import org.xwiki.resource.ResourceReferenceHandler;
import org.xwiki.resource.ResourceReferenceManager;
import org.xwiki.resource.ResourceType;
import org.xwiki.resource.entity.EntityResourceReference;
import org.xwiki.resource.internal.DefaultResourceReferenceHandlerChain;
import org.xwiki.script.ScriptContextManager;
import org.xwiki.security.authorization.AuthorizationException;
import org.xwiki.security.authorization.ContextualAuthorizationManager;
import org.xwiki.security.authorization.Right;
import org.xwiki.stability.Unstable;
import org.xwiki.template.TemplateManager;
import org.xwiki.user.UserReference;
import org.xwiki.user.UserReferenceResolver;
import org.xwiki.velocity.VelocityManager;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.xpn.xwiki.XWiki;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.DocumentRevisionProvider;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.internal.web.LegacyAction;
import com.xpn.xwiki.monitor.api.MonitorPlugin;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;
import com.xpn.xwiki.redirection.RedirectionFilter;
public abstract class XWikiAction implements LegacyAction {
    public static final String ACTION_PROGRESS = "actionprogress";
    private static final Logger LOGGER = LoggerFactory.getLogger(XWikiAction.class);
    private static final List<String> ACTIONS_IGNORED_WHEN_WIKI_DOES_NOT_EXIST = Arrays.asList("skin", "ssx", "jsx", "download");
    protected ComponentDescriptor<LegacyAction> componentDescriptor;
    protected Container container;
    protected Execution execution;
    protected ObservationManager observation;
    private ComponentManager componentManager;
    protected boolean waitForXWikiInitialization = true;
    private DocumentReferenceResolver<String> currentmixedReferenceResolver;
    private ContextualAuthorizationManager autorization;
    private ContextualLocalizationManager localization;
    private JobProgressManager progress;
    private ScriptContextManager scriptContextManager;
    private EntityNameValidationManager entityNameValidationManager;
    private EntityNameValidationConfiguration entityNameValidationConfiguration;
    private EntityReferenceSerializer<String> localSerializer;
    private DocumentRevisionProvider documentRevisionProvider;
    private UserReferenceResolver<DocumentReference> userReferenceResolver;
    protected Class<? extends XWikiForm> getFormClass() {
        return null;
    }
    
    protected ContextualLocalizationManager getLocalization() {
        if (this.localization == null) {
            this.localization = Utils.getComponent(ContextualLocalizationManager.class);
        }
        
        return this.localization;
    }
    
    protected DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver() {
        return this.currentmixedReferenceResolver;
    }
    
    protected ContextualAuthorizationManager getContextualAuthorizationManager() {
        return this.autorization;
    }
    
    protected String localizePlainOrKey(String key, Object... parameters) {
        return StringUtils.defaultString(getLocalization().getTranslationPlain(key, parameters), key);
    }
    
    protected JobProgressManager getProgress() {
        if (this.progress == null) {
            this.progress = Utils.getComponent(JobProgressManager.class);
        }
        
        return this.progress;
    }
    
    protected EntityNameValidationManager getEntityNameValidationManager() {
        if (this.entityNameValidationManager == null) {
            this.entityNameValidationManager = Utils.getComponent(EntityNameValidationManager.class);
        }
        
        return this.entityNameValidationManager;
    }
    
    protected EntityNameValidationConfiguration getEntityNameValidationConfiguration() {
        if (this.entityNameValidationConfiguration == null) {
            this.entityNameValidationConfiguration = Utils.getComponent(EntityNameValidationConfiguration.class);
        }
        
        return this.entityNameValidationConfiguration;
    }
    
    protected EntityReferenceSerializer<String> getLocalSerializer() {
        if (this.localSerializer == null) {
            this.localSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, "local");
        }
        
        return this.localSerializer;
    }
    
    protected ScriptContext getCurrentScriptContext() {
        if (this.scriptContextManager == null) {
            this.scriptContextManager = Utils.getComponent(ScriptContextManager.class);
        }
        
        return this.scriptContextManager.getCurrentScriptContext();
    }
    
    public void execute(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws Exception {
        XWikiContext context = null;
        try {
            context = initializeXWikiContext(servletRequest, servletResponse);
            execute(context);
        }
         finally {
            if (context != null) {
                cleanupComponents();
            }
            
        }
        
    }
    
    protected boolean isEntityReferenceNameValid(EntityReference entityReference) {
        if (this.getEntityNameValidationManager().getEntityReferenceNameStrategy() != null && this.getEntityNameValidationConfiguration().useValidation()) {
            if (!this.getEntityNameValidationManager().getEntityReferenceNameStrategy().isValid(entityReference)) {
                Object[] args = {getLocalSerializer().serialize(entityReference)};
                XWikiException invalidNameException = new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_APP_DOCUMENT_NAME_INVALID, "Cannot create document {0} because its name does not respect the name strategy of the wiki.", null, args);
                ScriptContext scontext = getCurrentScriptContext();
                scontext.setAttribute("invalidNameReference", entityReference, ScriptContext.ENGINE_SCOPE);
                scontext.setAttribute("createException", invalidNameException, ScriptContext.ENGINE_SCOPE);
                return false;
            }
            
        }
        
        return true;
    }
    
    protected void writeAjaxErrorResponse(int httpStatusCode, String message, XWikiContext context) {
        try {
            context.getResponse().setContentType("text/plain");
            context.getResponse().setStatus(httpStatusCode);
            context.getResponse().setCharacterEncoding(context.getWiki().getEncoding());
            context.getResponse().getWriter().print(message);
        }
         catch (IOException e) {
            LOGGER.error("Failed to send error response to AJAX save and continue request.", e);
        }
        
    }
    
    public void execute(XWikiContext context) throws Exception {
        MonitorPlugin monitor = null;
        FileUploadPlugin fileupload = null;
        DefaultJobProgress actionProgress = null;
        String docName = "";
        boolean debug = StringUtils.equals(context.getRequest().get("debug"), "true");
        String sasync = context.getRequest().get("async");
        try {
            String action = context.getAction();
            if (debug) {
                actionProgress = new DefaultJobProgress(context.getURL().toExternalForm());
                this.observation.addListener(new WrappedThreadEventListener(actionProgress));
                ExecutionContext econtext = this.execution.getContext();
                if (econtext != null) {
                    econtext.setProperty(XWikiAction.ACTION_PROGRESS, actionProgress);
                }
                
            }
            
            getProgress().pushLevelProgress(2, this);
            getProgress().startStep(this, "Get XWiki instance");
            XWiki xwiki;
            try {
                xwiki = XWiki.getXWiki(this.waitForXWikiInitialization || StringUtils.equals(sasync, "false"), context);
                if (xwiki == null) {
                    renderInit(context);
                    return;
                }
                
            }
             catch (XWikiException e) {
                if (e.getCode() == XWikiException.ERROR_XWIKI_DOES_NOT_EXIST) {
                    xwiki = XWiki.getMainXWiki(context);
                    XWikiURLFactory urlf = xwiki.getURLFactoryService().createURLFactory(context.getMode(), context);
                    context.setURLFactory(urlf);
                    VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);
                    VelocityContext vcontext = velocityManager.getVelocityContext();
                    if (!sendGlobalRedirect(context.getResponse(), context.getURL().toString(), context)) {
                        if (!StringUtils.isEmpty(context.getWiki().Param("xwiki.virtual.redirect"))) {
                            LOGGER.warn(String.format("%s %s", "'xwiki.virtual.redirect' is no longer supported.", "Please update your configuration and/or see XWIKI-8914 for more details."));
                        }
                        
                        if (!ACTIONS_IGNORED_WHEN_WIKI_DOES_NOT_EXIST.contains(action)) {
                            xwiki.prepareResources(context);
                            EntityReferenceValueProvider valueProvider = Utils.getComponent(EntityReferenceValueProvider.class);
                            xwiki.setPhonyDocument(new DocumentReference(valueProvider.getDefaultValue(EntityType.WIKI), valueProvider.getDefaultValue(EntityType.SPACE), valueProvider.getDefaultValue(EntityType.DOCUMENT)), context, vcontext);
                            Utils.parseTemplate(context.getWiki().Param("xwiki.wiki_exception", "wikidoesnotexist"), context);
                            return;
                        }
                        
                    }
                     else {
                        return;
                    }
                    
                }
                 else {
                    LOGGER.error("Uncaught exception during XWiki initialisation:", e);
                    throw e;
                }
                
            }
            
            if (sendGlobalRedirect(context.getResponse(), context.getURL().toString(), context)) {
                return;
            }
            
            XWikiURLFactory urlf = xwiki.getURLFactoryService().createURLFactory(context.getMode(), context);
            context.setURLFactory(urlf);
            if (redirectSpaceURLs(action, urlf, xwiki, context)) {
                return;
            }
            
            String sajax = context.getRequest().get("ajax");
            boolean ajax = false;
            if (sajax != null && !sajax.trim().equals("") && !sajax.equals("0")) {
                ajax = true;
            }
            
            context.put("ajax", ajax);
            boolean async = false;
            if (StringUtils.isNotEmpty(sasync)) {
                async = sasync.equals("true");
            }
             else {
                async = !ajax && !this.waitForXWikiInitialization;
            }
            
            Utils.getComponent(AsyncContext.class).setEnabled(async);
            if (monitor != null) {
                monitor.startTimer("request");
            }
            
            getProgress().startStep(this, "Execute request");
            VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);
            VelocityContext vcontext = velocityManager.getVelocityContext();
            getProgress().pushLevelProgress(7, this);
            boolean eventSent = false;
            try {
                getProgress().startStep(this, "Prepare documents and put them in the context");
                if (!xwiki.prepareDocuments(context.getRequest(), context, vcontext)) {
                    return;
                }
                
                monitor = (MonitorPlugin) xwiki.getPlugin("monitor", context);
                if (monitor != null) {
                    monitor.startRequest("", context.getAction(), context.getURL());
                    monitor.startTimer("multipart");
                }
                
                getProgress().startStep(this, "Parses multipart");
                fileupload = Utils.handleMultipart(context.getRequest().getHttpServletRequest(), context);
                if (monitor != null) {
                    monitor.endTimer("multipart");
                }
                
                if (monitor != null) {
                    monitor.setWikiPage(context.getDoc().getFullName());
                }
                
                getProgress().startStep(this, "Send [" + context.getAction() + "] action start event");
                try {
                    ActionExecutingEvent event = new ActionExecutingEvent(context.getAction());
                    this.observation.notify(event, context.getDoc(), context);
                    eventSent = true;
                    if (event.isCanceled()) {
                        return;
                    }
                    
                }
                 catch (Throwable ex) {
                    LOGGER.error("Cannot send action notifications for document [" + context.getDoc() + " using action [" + context.getAction() + "]", ex);
                }
                
                if (monitor != null) {
                    monitor.endTimer("prenotify");
                }
                
                getProgress().startStep(this, "Search and execute entity resource handler");
                ResourceReferenceHandler entityResourceReferenceHandler = Utils.getComponent( new DefaultParameterizedType(null, ResourceReferenceHandler.class, ResourceType.class), "bin");
                EntityResourceReference entityResourceReference = (EntityResourceReference) Utils.getComponent(ResourceReferenceManager.class).getResourceReference();
                String originalAction = context.getAction();
                try {
                    context.setAction(entityResourceReference.getAction().getActionName());
                    entityResourceReferenceHandler.handle(entityResourceReference, DefaultResourceReferenceHandlerChain.EMPTY);
                    return;
                }
                 catch (NotFoundResourceHandlerException e) {
                    context.setAction(originalAction);
                }
                
                getProgress().startStep(this, "Execute action render");
                boolean hasRedirect = handleRedirect(context);
                String renderResult = null;
                XWikiDocument doc = context.getDoc();
                docName = doc.getFullName();
                if (!hasRedirect && action(context)) {
                    renderResult = render(context);
                }
                
                if (renderResult != null) {
                    if (shouldReturnDocDoesNotExist(doc, context)) {
                        String page = Utils.getPage(context.getRequest(), "docdoesnotexist");
                        getProgress().startStep(this, "Execute template [" + page + "]");
                        Utils.parseTemplate(page, context);
                    }
                     else {
                        String page = Utils.getPage(context.getRequest(), renderResult);
                        getProgress().startStep(this, "Execute template [" + page + "]");
                        Utils.parseTemplate(page, !page.equals("direct"), context);
                    }
                    
                }
                
                return;
            }
             catch (Throwable e) {
                if (e instanceof IOException) {
                    e = new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION, "Exception while sending response", e);
                }
                
                if (!(e instanceof XWikiException)) {
                    e = new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_UNKNOWN, "Uncaught exception", e);
                }
                
                try {
                    XWikiException xex = (XWikiException) e;
                    if (xex.getCode() == XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION) {
                        LOGGER.debug("Connection aborted", e);
                        return;
                    }
                     else if (xex.getCode() == XWikiException.ERROR_XWIKI_ACCESS_DENIED) {
                        Utils.parseTemplate(context.getWiki().Param("xwiki.access_exception", "accessdenied"), context);
                        return;
                    }
                     else if (xex.getCode() == XWikiException.ERROR_XWIKI_USER_INACTIVE || xex.getCode() == XWikiException.ERROR_XWIKI_USER_DISABLED) {
                        if (xex.getCode() == XWikiException.ERROR_XWIKI_USER_DISABLED) {
                            context.put("cause", "disabled");
                        }
                        
                        context.getResponse().setStatus(HttpServletResponse.SC_FORBIDDEN);
                        Utils.parseTemplate(context.getWiki().Param("xwiki.user_exception", "userinactive"), context);
                        return;
                    }
                     else if (xex.getCode() == XWikiException.ERROR_XWIKI_APP_ATTACHMENT_NOT_FOUND) {
                        context.put("message", "attachmentdoesnotexist");
                        Utils.parseTemplate( context.getWiki().Param("xwiki.attachment_exception", "attachmentdoesnotexist"), context);
                        return;
                    }
                     else if (xex.getCode() == XWikiException.ERROR_XWIKI_APP_URL_EXCEPTION) {
                        vcontext.put("message", localizePlainOrKey("platform.core.invalidUrl"));
                        xwiki.setPhonyDocument(xwiki.getDefaultSpace(context) + "." + xwiki.getDefaultPage(context), context, vcontext);
                        context.getResponse().setStatus(HttpServletResponse.SC_BAD_REQUEST);
                        Utils.parseTemplate(context.getWiki().Param("xwiki.invalid_url_exception", "error"), context);
                        return;
                    }
                    
                    velocityManager.getVelocityContext().put("exp", e);
                    if (LOGGER.isWarnEnabled()) {
                        if (ExceptionUtils.getRootCauseMessage(e).equals("IOException: Broken pipe")) {
                            return;
                        }
                        
                        LOGGER.warn("Uncaught exception: " + e.getMessage(), e);
                    }
                    
                    String exceptionTemplate = ajax ? "exceptioninline" : "exception";
                    Utils.parseTemplate(Utils.getPage(context.getRequest(), exceptionTemplate), context);
                    return;
                }
                 catch (XWikiException ex) {
                    if (ex.getCode() == XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION) {
                        LOGGER.error("Connection aborted");
                    }
                    
                }
                 catch (Exception e2) {
                    LOGGER.error("Uncaught exceptions (inner): ", e);
                    LOGGER.error("Uncaught exceptions (outer): ", e2);
                }
                
                return;
            }
             finally {
                try {
                    context.getResponse().getWriter().flush();
                }
                 catch (Throwable e) {
                }
                
                if (monitor != null) {
                    monitor.endTimer("request");
                    monitor.startTimer("notify");
                }
                
                if (eventSent) {
                    try {
                        this.observation.notify(new ActionExecutedEvent(context.getAction()), context.getDoc(), context);
                    }
                     catch (Throwable ex) {
                        LOGGER.error("Cannot send action notifications for document [" + docName + " using action [" + context.getAction() + "]", ex);
                    }
                    
                }
                
                if (monitor != null) {
                    monitor.endTimer("notify");
                }
                
                getProgress().startStep(this, "Cleanup database connections");
                xwiki.getStore().cleanUp(context);
                getProgress().popLevelProgress(this);
            }
            
        }
         finally {
            if (monitor != null) {
                monitor.endRequest();
            }
            
            if (actionProgress != null) {
                getProgress().popLevelProgress(this);
                this.observation.removeListener(actionProgress.getName());
            }
            
            if (fileupload != null) {
                fileupload.cleanFileList(context);
            }
            
        }
        
    }
    
    private boolean shouldReturnDocDoesNotExist(XWikiDocument doc, XWikiContext context) throws ComponentLookupException {
        boolean result = false;
        String action = context.getAction();
        if (this.componentManager.hasComponent(DocExistValidator.class, action)) {
            result = this.componentManager.<DocExistValidator>getInstance(DocExistValidator.class, action) .docExist(doc, context);
        }
        
        return result;
    }
    
    private void renderInit(XWikiContext xcontext) throws Exception {
        RenderingContext renderingContext = Utils.getComponent(RenderingContext.class);
        MutableRenderingContext mutableRenderingContext = renderingContext instanceof MutableRenderingContext ? (MutableRenderingContext) renderingContext : null;
        if (mutableRenderingContext != null) {
            mutableRenderingContext.push(renderingContext.getTransformation(), renderingContext.getXDOM(), renderingContext.getDefaultSyntax(), "init.vm", renderingContext.isRestricted(), Syntax.XHTML_1_0);
        }
        
        xcontext.getResponse().setStatus(202);
        xcontext.getResponse().setContentType("text/html; charset=UTF-8");
        try {
            Utils.getComponent(TemplateManager.class).render("init.vm", xcontext.getResponse().getWriter());
        }
         finally {
            if (mutableRenderingContext != null) {
                mutableRenderingContext.pop();
            }
            
        }
        
        xcontext.getResponse().flushBuffer();
        xcontext.setFinished(true);
    }
    
    protected XWikiContext initializeXWikiContext(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws XWikiException, ServletException, InstantiationException, IllegalAccessException {
        XWikiForm form;
        if (getFormClass() != null) {
            form = getFormClass().newInstance();
        }
         else {
            form = null;
        }
        
        return initializeXWikiContext(servletRequest, servletResponse, form);
    }
    
    protected String getName() {
        return this.componentDescriptor.getRoleHint();
    }
    
    protected XWikiContext initializeXWikiContext(HttpServletRequest servletRequest, HttpServletResponse servletResponse, XWikiForm form) throws XWikiException, ServletException {
        String action = getName();
        XWikiRequest request = new XWikiServletRequest(servletRequest);
        XWikiResponse response = new XWikiServletResponse(servletResponse);
        XWikiContext context = Utils.prepareContext(action, request, response, new XWikiServletContext(servletRequest.getServletContext()));
        if (form != null) {
            form.reset(request);
        }
        
        context.setForm(form);
        initializeContainerComponent(context);
        return context;
    }
    
    protected void initializeContainerComponent(XWikiContext context) throws ServletException {
        ServletContainerInitializer containerInitializer = Utils.getComponent(ServletContainerInitializer.class);
        try {
            containerInitializer.initializeRequest(context.getRequest().getHttpServletRequest(), context);
            containerInitializer.initializeResponse(context.getResponse());
            containerInitializer.initializeSession(context.getRequest().getHttpServletRequest());
        }
         catch (ServletContainerException e) {
            throw new ServletException("Failed to initialize Request/Response or Session", e);
        }
        
    }
    
    protected void cleanupComponents() {
        container.removeRequest();
        container.removeResponse();
        container.removeSession();
        execution.removeContext();
    }
    
    public String getRealPath(String path) {
        Request request = this.container.getRequest();
        if (request instanceof ServletRequest) {
            return ((ServletRequest) request).getHttpServletRequest().getServletContext().getRealPath(path);
        }
        
        return null;
    }
    
    public boolean action(XWikiContext context) throws XWikiException {
        return true;
    }
    
    public String render(XWikiContext context) throws XWikiException {
        return null;
    }
    
    protected boolean supportRedirections() {
        return false;
    }
    
    private UserReference getCurrentUserReference(XWikiContext context) {
        return this.userReferenceResolver.resolve(context.getUserReference());
    }
    
    protected void handleRevision(XWikiContext context) throws XWikiException {
        String rev = context.getRequest().getParameter("rev");
        if (rev != null) {
            context.put("rev", rev);
            XWikiDocument doc = (XWikiDocument) context.get("doc");
            XWikiDocument tdoc = (XWikiDocument) context.get("tdoc");
            if (rev.startsWith("deleted") && !StringUtils.isEmpty(context.getRequest().getParameter("language")) && doc == tdoc) {
                Locale locale = LocaleUtils.toLocale(context.getRequest().getParameter("language"), Locale.ROOT);
                tdoc = new XWikiDocument(tdoc.getDocumentReference(), locale);
            }
            
            DocumentReference documentReference = doc.getDocumentReference();
            try {
                documentRevisionProvider .checkAccess(Right.VIEW, getCurrentUserReference(context), documentReference, rev);
            }
             catch (AuthorizationException e) {
                Object[] args = { documentReference, rev, context.getUserReference() };
                throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access to document {0} with revision {1} has been denied to user {2}", e, args);
            }
            
            XWikiDocument rdoc;
            XWikiDocument rtdoc;
            if (doc.getLocale().equals(tdoc.getLocale())) {
                rdoc = this.documentRevisionProvider.getRevision(doc.getDocumentReferenceWithLocale(), rev);
                rtdoc = rdoc;
            }
             else {
                rdoc = doc;
                rtdoc = this.documentRevisionProvider.getRevision(tdoc.getDocumentReferenceWithLocale(), rev);
            }
            
            if (rdoc == null) {
                Object[] args = { doc.getDocumentReferenceWithLocale(), rev };
                throw new XWikiException(XWikiException.MODULE_XWIKI_STORE, XWikiException.ERROR_XWIKI_STORE_HIBERNATE_UNEXISTANT_VERSION, "Version {1} does not exist while reading document {0}", null, args);
            }
            
            context.put("tdoc", rtdoc);
            context.put("cdoc", rdoc);
            context.put("doc", rdoc);
        }
        
    }
    
    protected boolean sendGlobalRedirect(XWikiResponse response, String url, XWikiContext context) throws Exception {
        if ("1".equals(context.getWiki().Param("xwiki.preferences.redirect"))) {
            XWikiDocument globalPreferences = context.getWiki().getDocument("xwiki:XWiki.XWikiPreferences", context);
            Vector<BaseObject> redirects = globalPreferences.getObjects("XWiki.GlobalRedirect");
            if (redirects != null) {
                for (BaseObject redir : redirects) {
                    if (redir != null) {
                        String p = redir.getStringValue("pattern");
                        if (p != null && url.matches(p)) {
                            String dest = redir.getStringValue("destination");
                            response.sendRedirect(url.replaceAll(p, dest));
                            return true;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return false;
    }
    
    protected void sendRedirect(XWikiResponse response, String url) throws XWikiException {
        try {
            if (url != null) {
                response.sendRedirect(response.encodeRedirectURL(url));
            }
            
        }
         catch (IOException e) {
            Object[] args = {url};
            throw new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_APP_REDIRECT_EXCEPTION, "Exception while sending redirect to page {0}", e, args);
        }
        
    }
    
    protected XWikiDocument getTranslatedDocument(XWikiDocument doc, String language, XWikiContext context) throws XWikiException {
        XWikiDocument tdoc;
        if (StringUtils.isBlank(language) || language.equals("default") || language.equals(doc.getDefaultLanguage())) {
            tdoc = doc;
        }
         else {
            tdoc = doc.getTranslatedDocument(language, context);
            if (tdoc == doc) {
                tdoc = new XWikiDocument(doc.getDocumentReference());
                tdoc.setLanguage(language);
                tdoc.setStore(doc.getStore());
            }
            
            tdoc.setTranslation(1);
        }
        
        return tdoc;
    }
    
    protected boolean csrfTokenCheck(XWikiContext context) throws XWikiException {
        return csrfTokenCheck(context, false);
    }
    
    protected boolean csrfTokenCheck(XWikiContext context, boolean jsonAnswer) throws XWikiException {
        final boolean isAjaxRequest = Utils.isAjaxRequest(context);
        CSRFToken csrf = Utils.getComponent(CSRFToken.class);
        try {
            String token = context.getRequest().getParameter("form_token");
            if (!csrf.isTokenValid(token)) {
                if (isAjaxRequest) {
                    if (jsonAnswer) {
                        Map<String, String> jsonObject = new LinkedHashMap<>();
                        jsonObject.put("errorType", "CSRF");
                        jsonObject.put("resubmissionURI", csrf.getRequestURI());
                        jsonObject.put("newToken", csrf.getToken());
                        this.answerJSON(context, HttpServletResponse.SC_FORBIDDEN, jsonObject);
                    }
                     else {
                        final String csrfCheckFailedMessage = localizePlainOrKey("core.editors.csrfCheckFailed");
                        writeAjaxErrorResponse(HttpServletResponse.SC_FORBIDDEN, csrfCheckFailedMessage, context);
                    }
                    
                }
                 else {
                    sendRedirect(context.getResponse(), csrf.getResubmissionURL());
                }
                
                return false;
            }
            
        }
         catch (XWikiException exception) {
            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED, "Access denied, secret token verification failed", exception);
        }
        
        return true;
    }
    
    private boolean redirectSpaceURLs(String action, XWikiURLFactory urlf, XWiki xwiki, XWikiContext context) throws Exception {
        if ("view".equals(action) && !"false".equalsIgnoreCase(context.getRequest().getParameter("spaceRedirect"))) {
            DocumentReference reference = xwiki.getDocumentReference(context.getRequest(), context);
            if (!xwiki.exists(reference, context)) {
                String defaultDocumentName = Utils.getComponent(EntityReferenceProvider.class) .getDefaultReference(EntityType.DOCUMENT).getName();
                if (!reference.getName().equals(defaultDocumentName)) {
                    SpaceReference spaceReference = new SpaceReference(reference.getName(), reference.getParent());
                    String anchor = new URL(context.getRequest().getRequestURL().toString()).getRef();
                    URL forwardURL = urlf.createURL(getLocalSerializer().serialize(spaceReference), defaultDocumentName, action, context.getRequest().getQueryString(), anchor, spaceReference.getWikiReference().getName(), context);
                    String webappContext = xwiki.getWebAppPath(context);
                    String relativeURL = urlf.getURL(forwardURL, context);
                    relativeURL = '/' + StringUtils.substringAfter(relativeURL, webappContext);
                    context.getRequest().getRequestDispatcher(relativeURL).forward(context.getRequest(), context.getResponse());
                    return true;
                }
                
            }
            
        }
        
        return false;
    }
    
    protected void answerJSON(XWikiContext context, int status, Map<String, String> answer) throws XWikiException {
        ObjectMapper mapper = new ObjectMapper();
        try {
            String jsonAnswerAsString = mapper.writeValueAsString(answer);
            context.getResponse().setContentType("application/json");
            context.getResponse().setContentLength(jsonAnswerAsString.length());
            context.getResponse().setStatus(status);
            context.getResponse().setCharacterEncoding(context.getWiki().getEncoding());
            context.getResponse().getWriter().print(jsonAnswerAsString);
            context.setResponseSent(true);
        }
         catch (IOException e) {
            throw new XWikiException("Error while sending JSON answer.", e);
        }
        
    }
    
    protected void setContentLength(XWikiResponse response, long length) {
        response.setContentLengthLong(length);
    }
    
    protected DocumentReference resolveTemplate(String template) {
        if (StringUtils.isNotBlank(template)) {
            DocumentReference templateReference = getCurrentMixedDocumentReferenceResolver().resolve(template);
            if (getContextualAuthorizationManager().hasAccess(Right.VIEW, templateReference)) {
                return templateReference;
            }
            
        }
        
        return null;
    }
    
    protected boolean readFromTemplate(XWikiDocument document, String template, XWikiContext context) throws XWikiException {
        DocumentReference templateReference = resolveTemplate(template);
        if (templateReference != null) {
            document.readFromTemplate(templateReference, context);
            return true;
        }
        
        return false;
    }
    
    private boolean handleRedirect(XWikiContext context) throws XWikiException {
        if (this.supportRedirections()) {
            try {
                for (RedirectionFilter filter : this.componentManager.<RedirectionFilter>getInstanceList( RedirectionFilter.class)) {
                    if (filter.redirect(context)) {
                        return true;
                    }
                    
                }
                
            }
             catch (ComponentLookupException e) {
                throw new XWikiException("Failed to resolve the redirection filters list", e);
            }
            
        }
        
        return false;
    }
    
}


