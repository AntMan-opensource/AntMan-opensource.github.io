package de.ipb_halle.molecularfaces.component.molplugin;
import java.io.IOException;
import java.util.Formatter;
import java.util.Map;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.context.ResponseWriter;
import javax.faces.render.FacesRenderer;
import javax.faces.render.Renderer;
@FacesRenderer(rendererType = MarvinJSRenderer.RENDERER_TYPE, componentFamily = MolPluginCore.COMPONENT_FAMILY)
public class MarvinJSRenderer extends Renderer {
	public static final String RENDERER_TYPE = "molecularfaces.MarvinJSRenderer";
	 private String loaderJSVar = "molecularfaces.marvinJSLoaderInstance";
	public void decode(FacesContext context, UIComponent component) {
		Map<String, String> requestMap = context.getExternalContext().getRequestParameterMap();
		MolPluginCore plugin = (MolPluginCore) component;
		if (!plugin.isReadonly()) {
			String clientId = plugin.getClientId(context);
			String value = requestMap.get(clientId);
			plugin.setSubmittedValue(value);
		}
		
	}
	
	public void encodeBegin(FacesContext context, UIComponent component) throws IOException {
		MolPluginCore plugin = (MolPluginCore) component;
		if (!plugin.isRendered()) {
			return;
		}
		
		ResponseWriter writer = context.getResponseWriter();
		 writer.startElement("div", plugin);
		writer.writeAttribute("id", plugin.getClientId(), null);
		writer.writeAttribute("style", generateDivStyle(plugin), null);
		if (plugin.isReadonly()) {
			encodeViewer(context, writer, plugin);
		}
		 else {
			encodeEditor(context, writer, plugin);
		}
		
		 writer.endElement("div");
	}
	
	private void encodeViewer(FacesContext context, ResponseWriter writer, MolPluginCore plugin) throws IOException {
		String divId = plugin.getClientId() + "_MarvinJSViewer";
		encodeViewerHTML(writer, plugin, divId);
		encodeViewerJS(context, writer, plugin, divId);
	}
	
	 private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId) throws IOException {
		 writer.startElement("div", plugin);
		writer.writeAttribute("id", divId, null);
		writer.writeAttribute("style", generateDivStyle(plugin), null);
		writer.endElement("div");
	}
	
	 private void encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId) throws IOException {
		String escapedMolecule = escape((String) plugin.getValue());
		writer.startElement("script", plugin);
		writer.writeAttribute("type", "text/javascript", null);
		String installPath = context.getExternalContext().getInitParameter(MarvinJSComponent.WEBXML_MARVINJS_BASE_URL);
		if (installPath == null) {
			installPath = "";
		}
		
		StringBuilder sb = new StringBuilder(512 + installPath.length() + escapedMolecule.length());
		 sb.append(plugin.encodeLoadExtResources(loaderJSVar));
		Formatter fmt = new Formatter(sb);
		 String widgetVar = plugin.getWidgetVar();
		if ((widgetVar != null) && (!widgetVar.isEmpty())) {
			fmt.format("var %s = ", widgetVar);
		}
		
		 fmt.format("%s.status().then(() => {", loaderJSVar);
		fmt.format("return molecularfaces.MarvinJSViewer.newViewer(\"%s\", \"%s\", \"%s\", %d, %d);", divId, escapedMolecule, installPath, plugin.getHeight(), plugin.getWidth());
		fmt.close();
		 sb.append("});");
		writer.writeText(sb, null);
		writer.endElement("script");
	}
	
	private void encodeEditor(FacesContext context, ResponseWriter writer, MolPluginCore plugin) throws IOException {
		String clientId = plugin.getClientId();
		String hiddenInputId = clientId + "_Input";
		String iframeId = clientId + "_MarvinJSEditor";
		encodeEditorHTML(context, writer, plugin, iframeId, hiddenInputId);
		encodeEditorJS(context, writer, plugin, iframeId, hiddenInputId);
	}
	
	 private void encodeEditorHTML(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String iframeId, String hiddenInputId) throws IOException {
		 writer.startElement("iframe", plugin);
		writer.writeAttribute("id", iframeId, null);
		writer.writeAttribute("src", context.getExternalContext().getInitParameter(MarvinJSComponent.WEBXML_MARVINJS_BASE_URL) + "/editor.html", null);
		writer.writeAttribute("style", "height:" + plugin.getHeight() + "px;width:" + plugin.getWidth() + "px;", null);
		writer.endElement("iframe");
		 writer.startElement("input", plugin);
		writer.writeAttribute("type", "hidden", null);
		writer.writeAttribute("id", hiddenInputId, null);
		writer.writeAttribute("name", plugin.getClientId(), null);
		writer.writeAttribute("value", plugin.getValue(), "value");
		writer.endElement("input");
	}
	
	 private void encodeEditorJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String iframeId, String hiddenInputId) throws IOException {
		writer.startElement("script", plugin);
		writer.writeAttribute("type", "text/javascript", null);
		String installPath = context.getExternalContext().getInitParameter(MarvinJSComponent.WEBXML_MARVINJS_BASE_URL);
		if (installPath == null) {
			installPath = "";
		}
		
		String license = context.getExternalContext().getInitParameter(MarvinJSComponent.WEBXML_MARVINJS_LICENSE_URL);
		if (license == null) {
			license = "";
		}
		
		StringBuilder sb = new StringBuilder(512 + installPath.length() + license.length());
		 sb.append(plugin.encodeLoadExtResources(loaderJSVar));
		Formatter fmt = new Formatter(sb);
		 String widgetVar = plugin.getWidgetVar();
		if ((widgetVar != null) && (!widgetVar.isEmpty())) {
			fmt.format("var %s = ", widgetVar);
		}
		
		 fmt.format("%s.status().then(() => {", loaderJSVar);
		fmt.format( "return molecularfaces.MarvinJSEditor.newEditor(\"%s\", document.getElementById(\"%s\").getAttribute(\"value\"), \"%s\", \"%s\", %d, %d)", iframeId, hiddenInputId, installPath, license, plugin.getHeight(), plugin.getWidth());
		 fmt.format( ".then((editor) => editor.addChangeListener((mol) => { document.getElementById(\"%s\").setAttribute(\"value\", mol); }));", hiddenInputId);
		fmt.close();
		 sb.append("});");
		writer.writeText(sb, null);
		writer.endElement("script");
	}
	
	private String generateDivStyle(MolPluginCore plugin) {
		StringBuilder sb = new StringBuilder(128);
		 sb.append("width:").append(plugin.getWidth()).append("px;");
		 sb.append("height:").append(plugin.getHeight()).append("px;");
		 if (plugin.isBorder()) {
			sb.append("border:solid;border-width:1px;");
		}
		
		return sb.toString();
	}
	
	 private String escape(String s) {
		if (s == null) {
			return "";
		}
		
		return s.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n").replace("\r", "");
	}
	
}

