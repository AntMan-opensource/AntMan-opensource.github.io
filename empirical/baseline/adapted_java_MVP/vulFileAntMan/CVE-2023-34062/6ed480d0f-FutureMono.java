package reactor.netty;
import java.nio.channels.ClosedChannelException;
import java.util.Objects;
import java.util.function.Supplier;
import io.netty.util.concurrent.Future;
import io.netty.util.concurrent.GenericFutureListener;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;
import reactor.core.CoreSubscriber;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Operators;
import reactor.netty.channel.AbortedException;
import reactor.util.context.Context;
public abstract class FutureMono extends Mono<Void> {
	 public static <F extends Future<Void>> Mono<Void> from(F future) {
		Objects.requireNonNull(future, "future");
		if (future.isDone()) {
			if (!future.isSuccess()) {
				return Mono.error(FutureSubscription.wrapError(future.cause()));
			}
			
			return Mono.empty();
		}
		
		return new ImmediateFutureMono<>(future);
	}
	
	 public static <F extends Future<Void>> Mono<Void> deferFuture(Supplier<F> deferredFuture) {
		return new DeferredFutureMono<>(deferredFuture);
	}
	
	final static class ImmediateFutureMono<F extends Future<Void>> extends FutureMono {
		final F future;
		ImmediateFutureMono(F future) {
			this.future = Objects.requireNonNull(future, "future");
		}
		
		public void subscribe(final CoreSubscriber<? super Void> s) {
			doSubscribe(s, future);
		}
		
	}
	
	final static class DeferredFutureMono<F extends Future<Void>> extends FutureMono {
		final Supplier<F> deferredFuture;
		DeferredFutureMono(Supplier<F> deferredFuture) {
			this.deferredFuture = Objects.requireNonNull(deferredFuture, "deferredFuture");
		}
		
		public void subscribe(CoreSubscriber<? super Void> s) {
			F f;
			try {
				f = deferredFuture.get();
			}
			
			catch (Throwable t) {
				Operators.error(s, t);
				return;
			}
			
			if (f == null) {
				Operators.error(s, Operators.onOperatorError(new NullPointerException( "Deferred supplied null"), s.currentContext()));
				return;
			}
			
			doSubscribe(s, f);
		}
		
	}
	
	@SuppressWarnings("FutureReturnValueIgnored")
	static <F extends Future<Void>> void doSubscribe(CoreSubscriber<? super Void> s, F future) {
		if (future.isDone()) {
			if (future.isSuccess()) {
				Operators.complete(s);
			}
			
			else {
				Operators.error(s, FutureSubscription.wrapError(future.cause()));
			}
			
			return;
		}
		
		FutureSubscription<F> fs = new FutureSubscription<>(future, s);
		 s.onSubscribe(fs);
		 if (fs.cancelled) {
			 return;
		}
		
		 future.addListener(fs);
		 if (fs.cancelled) {
			 future.removeListener(fs);
		}
		
	}
	
	final static class FutureSubscription<F extends Future<Void>> implements GenericFutureListener<F>, Subscription, Supplier<Context> {
		final CoreSubscriber<? super Void> s;
		final F                            future;
		boolean cancelled;
		FutureSubscription(F future, CoreSubscriber<? super Void> s) {
			this.s = s;
			this.future = future;
		}
		
		public void request(long n) {
			 }
			 
		public Context get() {
			return s.currentContext();
		}
		
		public void cancel() {
			 this.cancelled = true;
			 future.removeListener(this);
		}
		
		public void operationComplete(F future) {
			if (!future.isSuccess()) {
				s.onError(wrapError(future.cause()));
			}
			
			else {
				s.onComplete();
			}
			
		}
		
		private static Throwable wrapError(Throwable error) {
			if (error instanceof ClosedChannelException) {
				return new AbortedException(error);
			}
			
			else {
				return error;
			}
			
		}
		
	}
	
}


