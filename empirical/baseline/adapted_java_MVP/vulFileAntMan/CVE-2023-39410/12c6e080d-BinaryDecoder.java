package org.apache.avro.io;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.apache.avro.AvroRuntimeException;
import org.apache.avro.InvalidNumberEncodingException;
import org.apache.avro.util.Utf8;
import org.slf4j.LoggerFactory;
public class BinaryDecoder extends Decoder {
  static final long MAX_ARRAY_SIZE = (long) Integer.MAX_VALUE - 8L;
  private static final String MAX_BYTES_LENGTH_PROPERTY = "org.apache.avro.limits.bytes.maxLength";
  protected final int maxBytesLength;
  private ByteSource source = null;
  private byte[] buf = null;
  private int minPos = 0;
  private int pos = 0;
  private int limit = 0;
  byte[] getBuf() {
    return buf;
  }
  
  int getPos() {
    return pos;
  }
  
  int getLimit() {
    return limit;
  }
  
  void setBuf(byte[] buf, int pos, int len) {
    this.buf = buf;
    this.pos = pos;
    this.limit = pos + len;
  }
  
  void clearBuf() {
    this.buf = null;
  }
  
  protected BinaryDecoder() {
    super();
    String o = System.getProperty(MAX_BYTES_LENGTH_PROPERTY);
    int i = Integer.MAX_VALUE;
    if (o != null) {
      try {
        i = Integer.parseUnsignedInt(o);
      }
       catch (NumberFormatException nfe) {
        LoggerFactory.getLogger(BinaryDecoder.class) .warn("Could not parse property " + MAX_BYTES_LENGTH_PROPERTY + ": " + o, nfe);
      }
      
    }
    
    maxBytesLength = i;
  }
  
  BinaryDecoder(InputStream in, int bufferSize) {
    this();
    configure(in, bufferSize);
  }
  
  BinaryDecoder(byte[] data, int offset, int length) {
    this();
    configure(data, offset, length);
  }
  
  BinaryDecoder configure(InputStream in, int bufferSize) {
    configureSource(bufferSize, new InputStreamByteSource(in));
    return this;
  }
  
  BinaryDecoder configure(byte[] data, int offset, int length) {
    configureSource(DecoderFactory.DEFAULT_BUFFER_SIZE, new ByteArrayByteSource(data, offset, length));
    return this;
  }
  
  private void configureSource(int bufferSize, ByteSource source) {
    if (null != this.source) {
      this.source.detach();
    }
    
    source.attach(bufferSize, this);
    this.source = source;
  }
  
  public void readNull() throws IOException {
  }
  
  public boolean readBoolean() throws IOException {
    if (limit == pos) {
      limit = source.tryReadRaw(buf, 0, buf.length);
      pos = 0;
      if (limit == 0) {
        throw new EOFException();
      }
      
    }
    
    int n = buf[pos++] & 0xff;
    return n == 1;
  }
  
  public int readInt() throws IOException {
    ensureBounds(5); 
    int len = 1;
    int b = buf[pos] & 0xff;
    int n = b & 0x7f;
    if (b > 0x7f) {
      b = buf[pos + len++] & 0xff;
      n ^= (b & 0x7f) << 7;
      if (b > 0x7f) {
        b = buf[pos + len++] & 0xff;
        n ^= (b & 0x7f) << 14;
        if (b > 0x7f) {
          b = buf[pos + len++] & 0xff;
          n ^= (b & 0x7f) << 21;
          if (b > 0x7f) {
            b = buf[pos + len++] & 0xff;
            n ^= (b & 0x7f) << 28;
            if (b > 0x7f) {
              throw new InvalidNumberEncodingException("Invalid int encoding");
            }
            
          }
          
        }
        
      }
      
    }
    
    pos += len;
    if (pos > limit) {
      throw new EOFException();
    }
    
    return (n >>> 1) ^ -(n & 1); 
  }
  
  public long readLong() throws IOException {
    ensureBounds(10);
    int b = buf[pos++] & 0xff;
    int n = b & 0x7f;
    long l;
    if (b > 0x7f) {
      b = buf[pos++] & 0xff;
      n ^= (b & 0x7f) << 7;
      if (b > 0x7f) {
        b = buf[pos++] & 0xff;
        n ^= (b & 0x7f) << 14;
        if (b > 0x7f) {
          b = buf[pos++] & 0xff;
          n ^= (b & 0x7f) << 21;
          if (b > 0x7f) {
            l = innerLongDecode((long) n);
          }
           else {
            l = n;
          }
          
        }
         else {
          l = n;
        }
        
      }
       else {
        l = n;
      }
      
    }
     else {
      l = n;
    }
    
    if (pos > limit) {
      throw new EOFException();
    }
    
    return (l >>> 1) ^ -(l & 1); 
  }
  
  private long innerLongDecode(long l) throws IOException {
    int len = 1;
    int b = buf[pos] & 0xff;
    l ^= (b & 0x7fL) << 28;
    if (b > 0x7f) {
      b = buf[pos + len++] & 0xff;
      l ^= (b & 0x7fL) << 35;
      if (b > 0x7f) {
        b = buf[pos + len++] & 0xff;
        l ^= (b & 0x7fL) << 42;
        if (b > 0x7f) {
          b = buf[pos + len++] & 0xff;
          l ^= (b & 0x7fL) << 49;
          if (b > 0x7f) {
            b = buf[pos + len++] & 0xff;
            l ^= (b & 0x7fL) << 56;
            if (b > 0x7f) {
              b = buf[pos + len++] & 0xff;
              l ^= (b & 0x7fL) << 63;
              if (b > 0x7f) {
                throw new InvalidNumberEncodingException("Invalid long encoding");
              }
              
            }
            
          }
          
        }
        
      }
      
    }
    
    pos += len;
    return l;
  }
  
  public float readFloat() throws IOException {
    ensureBounds(4);
    int len = 1;
    int n = (buf[pos] & 0xff) | ((buf[pos + len++] & 0xff) << 8) | ((buf[pos + len++] & 0xff) << 16) | ((buf[pos + len++] & 0xff) << 24);
    if ((pos + 4) > limit) {
      throw new EOFException();
    }
    
    pos += 4;
    return Float.intBitsToFloat(n);
  }
  
  public double readDouble() throws IOException {
    ensureBounds(8);
    int len = 1;
    int n1 = (buf[pos] & 0xff) | ((buf[pos + len++] & 0xff) << 8) | ((buf[pos + len++] & 0xff) << 16) | ((buf[pos + len++] & 0xff) << 24);
    int n2 = (buf[pos + len++] & 0xff) | ((buf[pos + len++] & 0xff) << 8) | ((buf[pos + len++] & 0xff) << 16) | ((buf[pos + len++] & 0xff) << 24);
    if ((pos + 8) > limit) {
      throw new EOFException();
    }
    
    pos += 8;
    return Double.longBitsToDouble((((long) n1) & 0xffffffffL) | (((long) n2) << 32));
  }
  
  public Utf8 readString(Utf8 old) throws IOException {
    long length = readLong();
    if (length > MAX_ARRAY_SIZE) {
      throw new UnsupportedOperationException("Cannot read strings longer than " + MAX_ARRAY_SIZE + " bytes");
    }
    
    if (length < 0L) {
      throw new AvroRuntimeException("Malformed data. Length is negative: " + length);
    }
    
    Utf8 result = (old != null ? old : new Utf8());
    result.setByteLength((int) length);
    if (0L != length) {
      doReadBytes(result.getBytes(), 0, (int) length);
    }
    
    return result;
  }
  
  private final Utf8 scratchUtf8 = new Utf8();
  public String readString() throws IOException {
    return readString(scratchUtf8).toString();
  }
  
  public void skipString() throws IOException {
    doSkipBytes(readLong());
  }
  
  public ByteBuffer readBytes(ByteBuffer old) throws IOException {
    long length = readLong();
    if (length > MAX_ARRAY_SIZE) {
      throw new UnsupportedOperationException( "Cannot read arrays longer than " + MAX_ARRAY_SIZE + " bytes in Java library");
    }
    
    if (length > maxBytesLength) {
      throw new AvroRuntimeException("Bytes length " + length + " exceeds maximum allowed");
    }
    
    if (length < 0L) {
      throw new AvroRuntimeException("Malformed data. Length is negative: " + length);
    }
    
    final ByteBuffer result;
    if (old != null && length <= old.capacity()) {
      result = old;
      ((Buffer) result).clear();
    }
     else {
      result = ByteBuffer.allocate((int) length);
    }
    
    doReadBytes(result.array(), result.position(), (int) length);
    ((Buffer) result).limit((int) length);
    return result;
  }
  
  public void skipBytes() throws IOException {
    doSkipBytes(readLong());
  }
  
  public void readFixed(byte[] bytes, int start, int length) throws IOException {
    doReadBytes(bytes, start, length);
  }
  
  public void skipFixed(int length) throws IOException {
    doSkipBytes(length);
  }
  
  public int readEnum() throws IOException {
    return readInt();
  }
  
  protected void doSkipBytes(long length) throws IOException {
    int remaining = limit - pos;
    if (length <= remaining) {
      pos = (int) (pos + length);
    }
     else {
      limit = pos = 0;
      length -= remaining;
      source.skipSourceBytes(length);
    }
    
  }
  
  protected void doReadBytes(byte[] bytes, int start, int length) throws IOException {
    if (length < 0){
      throw new AvroRuntimeException("Malformed data. Length is negative: " + length);
}
    int remaining = limit - pos;
    if (length <= remaining) {
      System.arraycopy(buf, pos, bytes, start, length);
      pos += length;
    }
     else {
      System.arraycopy(buf, pos, bytes, start, remaining);
      start += remaining;
      length -= remaining;
      pos = limit;
      source.readRaw(bytes, start, length);
    }
    
  }
  
  protected long doReadItemCount() throws IOException {
    long result = readLong();
    if (result < 0L) {
      readLong();
      result = -result;
    }
    
    return result;
  }
  
  private long doSkipItems() throws IOException {
    long result = readLong();
    while (result < 0L) {
      final long bytecount = readLong();
      doSkipBytes(bytecount);
      result = readLong();
    }
    
    return result;
  }
  
  public long readArrayStart() throws IOException {
    return doReadItemCount();
  }
  
  public long arrayNext() throws IOException {
    return doReadItemCount();
  }
  
  public long skipArray() throws IOException {
    return doSkipItems();
  }
  
  public long readMapStart() throws IOException {
    return doReadItemCount();
  }
  
  public long mapNext() throws IOException {
    return doReadItemCount();
  }
  
  public long skipMap() throws IOException {
    return doSkipItems();
  }
  
  public int readIndex() throws IOException {
    return readInt();
  }
  
  public boolean isEnd() throws IOException {
    if (pos < limit) {
      return false;
    }
    
    if (source.isEof()) {
      return true;
    }
    
    final int read = source.tryReadRaw(buf, 0, buf.length);
    pos = 0;
    limit = read;
    return (0 == read);
  }
  
  private void ensureBounds(int num) throws IOException {
    int remaining = limit - pos;
    if (remaining < num) {
      source.compactAndFill(buf, pos, minPos, remaining);
      if (pos >= limit){
        throw new EOFException();
}
    }
    
  }
  
  public InputStream inputStream() {
    return source;
  }
  
  static class BufferAccessor {
    private final BinaryDecoder decoder;
    private byte[] buf;
    private int pos;
    private int limit;
    boolean detached = false;
    private BufferAccessor(BinaryDecoder decoder) {
      this.decoder = decoder;
    }
    
    void detach() {
      this.buf = decoder.buf;
      this.pos = decoder.pos;
      this.limit = decoder.limit;
      detached = true;
    }
    
    int getPos() {
      if (detached){
        return this.pos;
}
      else{
        return decoder.pos;
}
    }
    
    int getLim() {
      if (detached){
        return this.limit;
}
      else{
        return decoder.limit;
}
    }
    
    byte[] getBuf() {
      if (detached){
        return this.buf;
}
      else{
        return decoder.buf;
}
    }
    
    void setPos(int pos) {
      if (detached){
        this.pos = pos;
}
      else{
        decoder.pos = pos;
}
    }
    
    void setLimit(int limit) {
      if (detached){
        this.limit = limit;
}
      else{
        decoder.limit = limit;
}
    }
    
    void setBuf(byte[] buf, int offset, int length) {
      if (detached) {
        this.buf = buf;
        this.limit = offset + length;
        this.pos = offset;
      }
       else {
        decoder.buf = buf;
        decoder.limit = offset + length;
        decoder.pos = offset;
        decoder.minPos = offset;
      }
      
    }
    
  }
  
  abstract static class ByteSource extends InputStream {
    protected BufferAccessor ba;
    protected ByteSource() {
    }
    
    abstract boolean isEof();
    protected void attach(int bufferSize, BinaryDecoder decoder) {
      decoder.buf = new byte[bufferSize];
      decoder.pos = 0;
      decoder.minPos = 0;
      decoder.limit = 0;
      this.ba = new BufferAccessor(decoder);
    }
    
    protected void detach() {
      ba.detach();
    }
    
    protected abstract void skipSourceBytes(long length) throws IOException;
    protected abstract long trySkipBytes(long skipLength) throws IOException;
    protected abstract void readRaw(byte[] data, int off, int len) throws IOException;
    protected abstract int tryReadRaw(byte[] data, int off, int len) throws IOException;
    protected void compactAndFill(byte[] buf, int pos, int minPos, int remaining) throws IOException {
      System.arraycopy(buf, pos, buf, minPos, remaining);
      ba.setPos(minPos);
      int newLimit = remaining + tryReadRaw(buf, minPos + remaining, buf.length - remaining);
      ba.setLimit(newLimit);
    }
    
    public int read(byte[] b, int off, int len) throws IOException {
      int lim = ba.getLim();
      int pos = ba.getPos();
      byte[] buf = ba.getBuf();
      int remaining = (lim - pos);
      if (remaining >= len) {
        System.arraycopy(buf, pos, b, off, len);
        pos = pos + len;
        ba.setPos(pos);
        return len;
      }
       else {
        System.arraycopy(buf, pos, b, off, remaining);
        pos = pos + remaining;
        ba.setPos(pos);
        int inputRead = remaining + tryReadRaw(b, off + remaining, len - remaining);
        if (inputRead == 0) {
          return -1;
        }
         else {
          return inputRead;
        }
        
      }
      
    }
    
    public long skip(long n) throws IOException {
      int lim = ba.getLim();
      int pos = ba.getPos();
      int remaining = lim - pos;
      if (remaining > n) {
        pos = (int) (pos + n);
        ba.setPos(pos);
        return n;
      }
       else {
        pos = lim;
        ba.setPos(pos);
        long isSkipCount = trySkipBytes(n - remaining);
        return isSkipCount + remaining;
      }
      
    }
    
    public int available() throws IOException {
      return (ba.getLim() - ba.getPos());
    }
    
  }
  
  private static class InputStreamByteSource extends ByteSource {
    private InputStream in;
    protected boolean isEof = false;
    private InputStreamByteSource(InputStream in) {
      super();
      this.in = in;
    }
    
    protected void skipSourceBytes(long length) throws IOException {
      boolean readZero = false;
      while (length > 0) {
        long n = in.skip(length);
        if (n > 0) {
          length -= n;
          continue;
        }
        
        if (n == 0) {
          if (readZero) {
            isEof = true;
            throw new EOFException();
          }
          
          readZero = true;
          continue;
        }
        
        isEof = true;
        throw new EOFException();
      }
      
    }
    
    protected long trySkipBytes(long length) throws IOException {
      long leftToSkip = length;
      try {
        boolean readZero = false;
        while (leftToSkip > 0) {
          long n = in.skip(length);
          if (n > 0) {
            leftToSkip -= n;
            continue;
          }
          
          if (n == 0) {
            if (readZero) {
              isEof = true;
              break;
            }
            
            readZero = true;
            continue;
          }
          
          isEof = true;
          break;
        }
        
      }
       catch (EOFException eof) {
        isEof = true;
      }
      
      return length - leftToSkip;
    }
    
    protected void readRaw(byte[] data, int off, int len) throws IOException {
      while (len > 0) {
        int read = in.read(data, off, len);
        if (read < 0) {
          isEof = true;
          throw new EOFException();
        }
        
        len -= read;
        off += read;
      }
      
    }
    
    protected int tryReadRaw(byte[] data, int off, int len) throws IOException {
      int leftToCopy = len;
      try {
        while (leftToCopy > 0) {
          int read = in.read(data, off, leftToCopy);
          if (read < 0) {
            isEof = true;
            break;
          }
          
          leftToCopy -= read;
          off += read;
        }
        
      }
       catch (EOFException eof) {
        isEof = true;
      }
      
      return len - leftToCopy;
    }
    
    public int read() throws IOException {
      if (ba.getLim() - ba.getPos() == 0) {
        return in.read();
      }
       else {
        int position = ba.getPos();
        int result = ba.getBuf()[position] & 0xff;
        ba.setPos(position + 1);
        return result;
      }
      
    }
    
    public boolean isEof() {
      return isEof;
    }
    
    public void close() throws IOException {
      in.close();
    }
    
  }
  
  private static class ByteArrayByteSource extends ByteSource {
    private static final int MIN_SIZE = 16;
    private byte[] data;
    private int position;
    private int max;
    private boolean compacted = false;
    private ByteArrayByteSource(byte[] data, int start, int len) {
      super();
      if (len < MIN_SIZE) {
        this.data = Arrays.copyOfRange(data, start, start + MIN_SIZE);
        this.position = 0;
        this.max = len;
      }
       else {
        this.data = data;
        this.position = start;
        this.max = start + len;
      }
      
    }
    
    protected void attach(int bufferSize, BinaryDecoder decoder) {
      decoder.buf = this.data;
      decoder.pos = this.position;
      decoder.minPos = this.position;
      decoder.limit = this.max;
      this.ba = new BufferAccessor(decoder);
    }
    
    protected void skipSourceBytes(long length) throws IOException {
      long skipped = trySkipBytes(length);
      if (skipped < length) {
        throw new EOFException();
      }
      
    }
    
    protected long trySkipBytes(long length) throws IOException {
      max = ba.getLim();
      position = ba.getPos();
      long remaining = (long) max - position;
      if (remaining >= length) {
        position = (int) (position + length);
        ba.setPos(position);
        return length;
      }
       else {
        position += remaining;
        ba.setPos(position);
        return remaining;
      }
      
    }
    
    protected void readRaw(byte[] data, int off, int len) throws IOException {
      int read = tryReadRaw(data, off, len);
      if (read < len) {
        throw new EOFException();
      }
      
    }
    
    protected int tryReadRaw(byte[] data, int off, int len) throws IOException {
      return 0;
    }
    
    protected void compactAndFill(byte[] buf, int pos, int minPos, int remaining) throws IOException {
      if (!compacted) {
        byte[] tinybuf = new byte[remaining + 16];
        System.arraycopy(buf, pos, tinybuf, 0, remaining);
        ba.setBuf(tinybuf, 0, remaining);
        compacted = true;
      }
      
    }
    
    public int read() throws IOException {
      max = ba.getLim();
      position = ba.getPos();
      if (position >= max) {
        return -1;
      }
       else {
        int result = ba.getBuf()[position++] & 0xff;
        ba.setPos(position);
        return result;
      }
      
    }
    
    public void close() throws IOException {
      ba.setPos(ba.getLim()); 
    }
    
    public boolean isEof() {
      int remaining = ba.getLim() - ba.getPos();
      return (remaining == 0);
    }
    
  }
  
}


