package org.apache.avro.util;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import org.apache.avro.AvroRuntimeException;
import org.apache.avro.io.BinaryData;
import org.slf4j.LoggerFactory;
public class Utf8 implements Comparable<Utf8>, CharSequence, Externalizable {
  private static final String MAX_LENGTH_PROPERTY = "org.apache.avro.limits.string.maxLength";
  private static final int MAX_LENGTH;
  private static final byte[] EMPTY = new byte[0];
  static {
    String o = System.getProperty(MAX_LENGTH_PROPERTY);
    int i = Integer.MAX_VALUE;
    if (o != null) {
      try {
        i = Integer.parseUnsignedInt(o);
      }
       catch (NumberFormatException nfe) {
        LoggerFactory.getLogger(Utf8.class).warn("Could not parse property " + MAX_LENGTH_PROPERTY + ": " + o, nfe);
      }
      
    }
    
    MAX_LENGTH = i;
  }
  
  private byte[] bytes;
  private int hash;
  private int length;
  private String string;
  public Utf8() {
    bytes = EMPTY;
  }
  
  public Utf8(String string) {
    byte[] bytes = getBytesFor(string);
    int length = bytes.length;
    checkLength(length);
    this.bytes = bytes;
    this.length = length;
    this.string = string;
  }
  
  public Utf8(Utf8 other) {
    this.length = other.length;
    this.bytes = Arrays.copyOf(other.bytes, other.length);
    this.string = other.string;
    this.hash = other.hash;
  }
  
  public Utf8(byte[] bytes) {
    int length = bytes.length;
    checkLength(length);
    this.bytes = bytes;
    this.length = length;
  }
  
  public byte[] getBytes() {
    return bytes;
  }
  
  public int getLength() {
    return length;
  }
  
  public int getByteLength() {
    return length;
  }
  
  public Utf8 setLength(int newLength) {
    return setByteLength(newLength);
  }
  
  public Utf8 setByteLength(int newLength) {
    checkLength(newLength);
    if (this.bytes.length < newLength) {
      this.bytes = Arrays.copyOf(this.bytes, newLength);
    }
    
    this.length = newLength;
    this.string = null;
    this.hash = 0;
    return this;
  }
  
  public Utf8 set(String string) {
    byte[] bytes = getBytesFor(string);
    int length = bytes.length;
    checkLength(length);
    this.bytes = bytes;
    this.length = length;
    this.string = string;
    this.hash = 0;
    return this;
  }
  
  public Utf8 set(Utf8 other) {
    if (this.bytes.length < other.length) {
      this.bytes = new byte[other.length];
    }
    
    this.length = other.length;
    System.arraycopy(other.bytes, 0, bytes, 0, length);
    this.string = other.string;
    this.hash = other.hash;
    return this;
  }
  
  public String toString() {
    if (this.length == 0){
      return "";
}
    if (this.string == null) {
      this.string = new String(bytes, 0, length, StandardCharsets.UTF_8);
    }
    
    return this.string;
  }
  
  public boolean equals(Object o) {
    if (o == this){
      return true;
}
    if (!(o instanceof Utf8)){
      return false;
}
    Utf8 that = (Utf8) o;
    if (!(this.length == that.length)){
      return false;
}
    byte[] thatBytes = that.bytes;
    for (int i = 0; i < this.length; i++){
      if (bytes[i] != thatBytes[i]){
        return false;
}
}
    return true;
  }
  
  public int hashCode() {
    int h = hash;
    if (h == 0) {
      byte[] bytes = this.bytes;
      int length = this.length;
      for (int i = 0; i < length; i++) {
        h = h * 31 + bytes[i];
      }
      
      this.hash = h;
    }
    
    return h;
  }
  
  public int compareTo(Utf8 that) {
    return BinaryData.compareBytes(this.bytes, 0, this.length, that.bytes, 0, that.length);
  }
  
  public char charAt(int index) {
    return toString().charAt(index);
  }
  
  public int length() {
    return toString().length();
  }
  
  public CharSequence subSequence(int start, int end) {
    return toString().subSequence(start, end);
  }
  
  private static void checkLength(int length) {
    if (length > MAX_LENGTH) {
      throw new AvroRuntimeException("String length " + length + " exceeds maximum allowed");
    }
    
  }
  
  public static byte[] getBytesFor(String str) {
    return str.getBytes(StandardCharsets.UTF_8);
  }
  
  public void writeExternal(ObjectOutput out) throws IOException {
    out.writeInt(bytes.length);
    out.write(bytes);
  }
  
  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
    setByteLength(in.readInt());
    in.readFully(bytes);
  }
  
}


