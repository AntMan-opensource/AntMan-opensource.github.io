package org.apache.avro.io;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import org.apache.avro.AvroRuntimeException;
import org.apache.avro.InvalidNumberEncodingException;
import org.apache.avro.util.ByteBufferInputStream;
class DirectBinaryDecoder extends BinaryDecoder {
  private InputStream in;
  private class ByteReader {
    public ByteBuffer read(ByteBuffer old, long length) throws IOException {
      this.checkLength(length);
      final ByteBuffer result;
      if (old != null && length <= old.capacity()) {
        result = old;
        result.clear();
      }
       else {
        result = ByteBuffer.allocate((int) length);
      }
      
      doReadBytes(result.array(), result.position(), (int) length);
      result.limit((int) length);
      return result;
    }
    
    protected final void checkLength(long length) {
      if (length < 0L) {
        throw new AvroRuntimeException("Malformed data. Length is negative: " + length);
      }
      
      if (length > MAX_ARRAY_SIZE) {
        throw new UnsupportedOperationException( "Cannot read arrays longer than " + MAX_ARRAY_SIZE + " bytes in Java library");
      }
      
      if (length > maxBytesLength) {
        throw new AvroRuntimeException("Bytes length " + length + " exceeds maximum allowed");
      }
      
    }
    
  }
  
  private class ReuseByteReader extends ByteReader {
    private final ByteBufferInputStream bbi;
    public ReuseByteReader(ByteBufferInputStream bbi) {
      this.bbi = bbi;
    }
    
    public ByteBuffer read(ByteBuffer old, long length) throws IOException {
      this.checkLength(length);
      if (old != null) {
        return super.read(old, length);
      }
       else {
        return bbi.readBuffer((int) length);
      }
      
    }
    
  }
  
  private ByteReader byteReader;
  DirectBinaryDecoder(InputStream in) {
    super();
    configure(in);
  }
  
  DirectBinaryDecoder configure(InputStream in) {
    this.in = in;
    byteReader = (in instanceof ByteBufferInputStream) ? new ReuseByteReader((ByteBufferInputStream) in) : new ByteReader();
    return this;
  }
  
  public boolean readBoolean() throws IOException {
    int n = in.read();
    if (n < 0) {
      throw new EOFException();
    }
    
    return n == 1;
  }
  
  public int readInt() throws IOException {
    int n = 0;
    int b;
    int shift = 0;
    do {
      b = in.read();
      if (b >= 0) {
        n |= (b & 0x7F) << shift;
        if ((b & 0x80) == 0) {
          return (n >>> 1) ^ -(n & 1); 
        }
        
      }
       else {
        throw new EOFException();
      }
      
      shift += 7;
    }
     while (shift < 32);
    throw new InvalidNumberEncodingException("Invalid int encoding");
  }
  
  public long readLong() throws IOException {
    long n = 0;
    int b;
    int shift = 0;
    do {
      b = in.read();
      if (b >= 0) {
        n |= (b & 0x7FL) << shift;
        if ((b & 0x80) == 0) {
          return (n >>> 1) ^ -(n & 1); 
        }
        
      }
       else {
        throw new EOFException();
      }
      
      shift += 7;
    }
     while (shift < 64);
    throw new InvalidNumberEncodingException("Invalid long encoding");
  }
  
  private final byte[] buf = new byte[8];
  public float readFloat() throws IOException {
    doReadBytes(buf, 0, 4);
    int n = (((int) buf[0]) & 0xff) | ((((int) buf[1]) & 0xff) << 8) | ((((int) buf[2]) & 0xff) << 16) | ((((int) buf[3]) & 0xff) << 24);
    return Float.intBitsToFloat(n);
  }
  
  public double readDouble() throws IOException {
    doReadBytes(buf, 0, 8);
    long n = (((long) buf[0]) & 0xff) | ((((long) buf[1]) & 0xff) << 8) | ((((long) buf[2]) & 0xff) << 16) | ((((long) buf[3]) & 0xff) << 24) | ((((long) buf[4]) & 0xff) << 32) | ((((long) buf[5]) & 0xff) << 40) | ((((long) buf[6]) & 0xff) << 48) | ((((long) buf[7]) & 0xff) << 56);
    return Double.longBitsToDouble(n);
  }
  
  public ByteBuffer readBytes(ByteBuffer old) throws IOException {
    long length = readLong();
    return byteReader.read(old, length);
  }
  
  protected void doSkipBytes(long length) throws IOException {
    while (length > 0) {
      long n = in.skip(length);
      if (n <= 0) {
        throw new EOFException();
      }
      
      length -= n;
    }
    
  }
  
  protected void doReadBytes(byte[] bytes, int start, int length) throws IOException {
    for (;;) {
      int n = in.read(bytes, start, length);
      if (n == length || length == 0) {
        return;
      }
       else if (n < 0) {
        throw new EOFException();
      }
      
      start += n;
      length -= n;
    }
    
  }
  
  public InputStream inputStream() {
    return in;
  }
  
  public boolean isEnd() throws IOException {
    throw new UnsupportedOperationException();
  }
  
}


