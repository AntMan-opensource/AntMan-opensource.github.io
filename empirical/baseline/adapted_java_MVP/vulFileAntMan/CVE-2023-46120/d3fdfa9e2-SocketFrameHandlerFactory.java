package com.rabbitmq.client.impl;
import com.rabbitmq.client.Address;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.SocketConfigurator;
import com.rabbitmq.client.SslContextFactory;
import javax.net.SocketFactory;
import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
public class SocketFrameHandlerFactory extends AbstractFrameHandlerFactory {
    private final SocketFactory socketFactory;
    private final ExecutorService shutdownExecutor;
    private final SslContextFactory sslContextFactory;
    public SocketFrameHandlerFactory(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator, boolean ssl) {
        this(connectionTimeout, socketFactory, configurator, ssl, null);
    }
    
    public SocketFrameHandlerFactory(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator, boolean ssl, ExecutorService shutdownExecutor) {
        this(connectionTimeout, socketFactory, configurator, ssl, shutdownExecutor, null);
    }
    
    public SocketFrameHandlerFactory(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator, boolean ssl, ExecutorService shutdownExecutor, SslContextFactory sslContextFactory) {
        super(connectionTimeout, configurator, ssl);
        this.socketFactory = socketFactory;
        this.shutdownExecutor = shutdownExecutor;
        this.sslContextFactory = sslContextFactory;
    }
    
    public FrameHandler create(Address addr, String connectionName) throws IOException {
        int portNumber = ConnectionFactory.portOrDefault(addr.getPort(), ssl);
        Socket socket = null;
        try {
            socket = createSocket(connectionName);
            configurator.configure(socket);
            socket.connect(addr.toInetSocketAddress(portNumber), connectionTimeout);
            return create(socket);
        }
         catch (IOException ioe) {
            quietTrySocketClose(socket);
            throw ioe;
        }
        
    }
    
    protected Socket createSocket(String connectionName) throws IOException {
        if (socketFactory != null) {
            return socketFactory.createSocket();
        }
         else {
            if (ssl) {
                return sslContextFactory.create(connectionName).getSocketFactory().createSocket();
            }
             else {
                return SocketFactory.getDefault().createSocket();
            }
            
        }
        
    }
    
    public FrameHandler create(Socket sock) throws IOException {
        return new SocketFrameHandler(sock, this.shutdownExecutor);
    }
    
    private static void quietTrySocketClose(Socket socket) {
        if (socket != null){
            try {
 socket.close(); 
}
 catch (Exception _e) {}
 catch (Exception _e) {

}


}
    }
    
}


