package com.rabbitmq.client.impl.nio;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLEngineResult;
import javax.net.ssl.SSLException;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
public class SslEngineFrameBuilder extends FrameBuilder {
    private final SSLEngine sslEngine;
    private final ByteBuffer cipherBuffer;
    private boolean isUnderflowHandlingEnabled = false;
    public SslEngineFrameBuilder(SSLEngine sslEngine, ByteBuffer plainIn, ByteBuffer cipherIn, ReadableByteChannel channel) {
        super(channel, plainIn);
        this.sslEngine = sslEngine;
        this.cipherBuffer = cipherIn;
    }
    
    protected boolean somethingToRead() throws IOException {
        if (applicationBuffer.hasRemaining() && !isUnderflowHandlingEnabled) {
            return true;
        }
         else {
            applicationBuffer.clear();
            boolean underflowHandling = false;
            try {
                SSLEngineResult result = sslEngine.unwrap(cipherBuffer, applicationBuffer);
                switch (result.getStatus()) {
                    case OK:
                        applicationBuffer.flip();
                        if (applicationBuffer.hasRemaining()) {
                            return true;
                        }
                        
                        applicationBuffer.clear();
                        break;
                    case BUFFER_OVERFLOW:
                        throw new SSLException("buffer overflow in read");
                    case BUFFER_UNDERFLOW:
                        cipherBuffer.compact();
                        underflowHandling = true;
                        return false;
                    case CLOSED:
                        throw new SSLException("closed in read");
                    default: throw new IllegalStateException("Invalid SSL status: " + result.getStatus());
                }
                
            }
             finally {
                isUnderflowHandlingEnabled = underflowHandling;
            }
            
            return false;
        }
        
    }
    
    public boolean isUnderflowHandlingEnabled() {
        return isUnderflowHandlingEnabled;
    }
    
}


