package com.hccake.ballcat.codegen.service.impl;
import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.io.IoUtil;
import cn.hutool.core.util.StrUtil;
import com.hccake.ballcat.codegen.constant.TemplateEntryTypeEnum;
import com.hccake.ballcat.codegen.engine.TemplateEngineDelegator;
import com.hccake.ballcat.codegen.engine.TemplateEngineTypeEnum;
import com.hccake.ballcat.codegen.model.bo.FileEntry;
import com.hccake.ballcat.codegen.model.bo.TableDetails;
import com.hccake.ballcat.codegen.model.bo.TemplateFile;
import com.hccake.ballcat.codegen.model.dto.GeneratorOptionDTO;
import com.hccake.ballcat.codegen.model.entity.TemplateEntry;
import com.hccake.ballcat.codegen.service.GeneratorService;
import com.hccake.ballcat.codegen.service.TableInfoQuery;
import com.hccake.ballcat.codegen.service.TemplateEntryService;
import com.hccake.ballcat.codegen.util.GenUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
public class GeneratorServiceImpl implements GeneratorService {
	private final TableInfoQuery tableInfoQuery;
	private final TemplateEntryService templateEntryService;
	private final TemplateEngineDelegator templateEngineDelegator;
	public byte[] generatorCode(GeneratorOptionDTO generatorOptionDTO) throws IOException {
		 Map<String, FileEntry> map = getStringFileEntryMap(generatorOptionDTO);
		try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); ZipOutputStream zip = new ZipOutputStream(outputStream)) {
			 for (Map.Entry<String, FileEntry> entry : map.entrySet()) {
				FileEntry fileEntry = entry.getValue();
				 if (TemplateEntryTypeEnum.FILE.getType().equals(fileEntry.getType())) {
					 String filePath = entry.getKey();
					zip.putNextEntry(new ZipEntry(filePath));
					IoUtil.write(zip, StandardCharsets.UTF_8, false, fileEntry.getContent());
					zip.closeEntry();
				}
				
			}
			
			 zip.finish();
			return outputStream.toByteArray();
		}
		
	}
	
	public List<FileEntry> previewCode(GeneratorOptionDTO generateOptionDTO) {
		 Map<String, FileEntry> map = getStringFileEntryMap(generateOptionDTO);
		 return CollectionUtil.sort(map.values(), Comparator.comparing(FileEntry::getFilename, String.CASE_INSENSITIVE_ORDER));
	}
	
	 private Map<String, FileEntry> getStringFileEntryMap(GeneratorOptionDTO generateOptionDTO) {
		 List<TemplateEntry> templateEntryList = templateEntryService.listByIds(generateOptionDTO.getTemplateEntryIds());
		List<TemplateFile> templateFiles = templateEntryService.convertToTemplateFile(templateEntryList);
		return getStringFileEntryMap(generateOptionDTO, templateFiles);
	}
	
	 private Map<String, FileEntry> getStringFileEntryMap(GeneratorOptionDTO generateOptionDTO, List<TemplateFile> templateFiles) {
		Map<String, FileEntry> map = new HashMap<>(templateFiles.size());
		for (String tableName : generateOptionDTO.getTableNames()) {
			 TableDetails tableDetails = tableInfoQuery.queryTableDetails(tableName);
			 Map<String, FileEntry> fileEntryMap = generatorCode(tableDetails, generateOptionDTO.getTablePrefix(), generateOptionDTO.getGenProperties(), templateFiles);
			map.putAll(fileEntryMap);
		}
		
		return map;
	}
	
	 public Map<String, FileEntry> generatorCode(TableDetails tableDetails, String tablePrefix, Map<String, String> customProperties, List<TemplateFile> templateFiles) {
		Map<String, FileEntry> map = new HashMap<>(templateFiles.size());
		 Map<String, Object> context = GenUtils.getContext(tableDetails, tablePrefix, customProperties);
		for (TemplateFile templateFile : templateFiles) {
			FileEntry fileEntry = new FileEntry();
			fileEntry.setType(templateFile.getType());
			 String filename = StrUtil.format(templateFile.getFilename(), context);
			fileEntry.setFilename(filename);
			String parentFilePath = GenUtils.evaluateRealPath(templateFile.getParentFilePath(), context);
			fileEntry.setParentFilePath(parentFilePath);
			 if (TemplateEntryTypeEnum.FILE.getType().equals(fileEntry.getType())) {
				fileEntry.setFilePath(GenUtils.concatFilePath(parentFilePath, filename));
				 TemplateEngineTypeEnum engineTypeEnum = TemplateEngineTypeEnum.of(templateFile.getEngineType());
				String content = templateEngineDelegator.render(engineTypeEnum, templateFile.getContent(), context);
				fileEntry.setContent(content);
			}
			
			else {
				String currentPath = GenUtils.evaluateRealPath(templateFile.getFilename(), context);
				fileEntry.setFilePath(GenUtils.concatFilePath(parentFilePath, currentPath));
			}
			
			map.put(fileEntry.getFilePath(), fileEntry);
		}
		
		return map;
	}
	
}


