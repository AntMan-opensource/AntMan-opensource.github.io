package org.codehaus.jettison.json;
import java.io.IOException;
import java.io.Serializable;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ListIterator;
import java.util.Map;
public class JSONArray implements Serializable {
    private ArrayList myArrayList;
    private boolean escapeForwardSlashAlways = true;
    public boolean isEscapeForwardSlashAlways() {
      return escapeForwardSlashAlways;
    }
    
    public void setEscapeForwardSlashAlways(boolean escapeForwardSlashAlways) {
      this.escapeForwardSlashAlways = escapeForwardSlashAlways;
    }
    
    public JSONArray() {
        this.myArrayList = new ArrayList();
    }
    
    public JSONArray(int capacity) {
        this.myArrayList = new ArrayList(capacity);
    }
    
    public JSONArray(JSONTokener x) throws JSONException {
        this();
        if (x.nextClean() != '[') {
            throw x.syntaxError("A JSONArray text must start with '['");
        }
        
        char c = x.nextClean();
        if (c == 0) {
        	throw x.syntaxError("JSONArray text must end with ']'");
        }
         else if (c == ',') {
        	throw x.syntaxError("JSONArray text has a trailing ','");
        }
         
        if (c == ']') {
            return;
        }
        
        x.back();
        for (;;) {
            if (x.nextClean() == ',') {
            	if (c == '[') {
            		throw x.syntaxError("JSONArray text has a trailing ','");
            	}
            	
                x.back();
                this.myArrayList.add(null);
            }
             else {
                x.back();
                this.myArrayList.add(x.nextValue());
            }
            
            switch (x.nextClean()) {
            case ';':
            case ',':
            	char nextClean = x.nextClean();
                if (nextClean == 0) {
                	throw x.syntaxError("JSONArray text has a trailing ','");
                }
                 else if (nextClean == ']') {
                    return;
                }
                
                x.back();
                break;
            case ']':
                return;
            default: throw x.syntaxError("Expected a ',' or ']'");
            }
            
        }
        
    }
    
    public JSONArray(String string) throws JSONException {
        this(new JSONTokener(string));
    }
    
    public JSONArray(Collection collection) {
        this.myArrayList = (collection == null) ? new ArrayList() : new ArrayList(collection);
        for (ListIterator iter = myArrayList.listIterator(); iter.hasNext();) {
             Object e = iter.next();
             if (e instanceof Collection) {
                 iter.set(new JSONArray((Collection) e));
             }
             
             if (e instanceof Map) {
                 iter.set(new JSONObject((Map) e));
             }
             
        }
                
    }
    
    public Object get(int index) throws JSONException {
        Object o = opt(index);
        if (o == null) {
            throw new JSONException("JSONArray[" + index + "] not found.");
        }
        
        return o;
    }
    
    public boolean getBoolean(int index) throws JSONException {
        Object o = get(index);
        if (o.equals(Boolean.FALSE) || (o instanceof String && ((String)o).equalsIgnoreCase("false"))) {
            return false;
        }
         else if (o.equals(Boolean.TRUE) || (o instanceof String && ((String)o).equalsIgnoreCase("true"))) {
            return true;
        }
        
        throw new JSONException("JSONArray[" + index + "] is not a Boolean.");
    }
    
    public double getDouble(int index) throws JSONException {
        Object o = get(index);
        try {
            return o instanceof Number ? ((Number)o).doubleValue() :  Double.valueOf((String)o).doubleValue();
        }
         catch (Exception e) {
            throw new JSONException("JSONArray[" + index + "] is not a number.");
        }
        
    }
    
    public int getInt(int index) throws JSONException {
        Object o = get(index);
        return o instanceof Number ? ((Number)o).intValue() : (int)getDouble(index);
    }
    
    public JSONArray getJSONArray(int index) throws JSONException {
        Object o = get(index);
        if (o instanceof JSONArray) {
            return (JSONArray)o;
        }
        
        throw new JSONException("JSONArray[" + index + "] is not a JSONArray.");
    }
    
    public JSONObject getJSONObject(int index) throws JSONException {
        Object o = get(index);
        if (o instanceof JSONObject) {
            return (JSONObject)o;
        }
        
        throw new JSONException("JSONArray[" + index + "] is not a JSONObject.");
    }
    
    public long getLong(int index) throws JSONException {
        Object o = get(index);
        return o instanceof Number ? ((Number)o).longValue() : (long)getDouble(index);
    }
    
    public String getString(int index) throws JSONException {
        return get(index).toString();
    }
    
    public boolean isNull(int index) {
        return JSONObject.NULL.equals(opt(index));
    }
    
    public String join(String separator) throws JSONException {
        int len = length();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; i += 1) {
            if (i > 0) {
                sb.append(separator);
            }
            
            sb.append(JSONObject.valueToString(this.myArrayList.get(i), escapeForwardSlashAlways));
        }
        
        return sb.toString();
    }
    
    public int length() {
        return this.myArrayList.size();
    }
    
    public Object opt(int index) {
        return (index < 0 || index >= length()) ? null : this.myArrayList.get(index);
    }
    
    public boolean optBoolean(int index)  {
        return optBoolean(index, false);
    }
    
    public boolean optBoolean(int index, boolean defaultValue)  {
        try {
            return getBoolean(index);
        }
         catch (Exception e) {
            return defaultValue;
        }
        
    }
    
    public double optDouble(int index) {
        return optDouble(index, Double.NaN);
    }
    
    public double optDouble(int index, double defaultValue) {
        try {
            return getDouble(index);
        }
         catch (Exception e) {
            return defaultValue;
        }
        
    }
    
    public int optInt(int index) {
        return optInt(index, 0);
    }
    
    public int optInt(int index, int defaultValue) {
        try {
            return getInt(index);
        }
         catch (Exception e) {
            return defaultValue;
        }
        
    }
    
    public JSONArray optJSONArray(int index) {
        Object o = opt(index);
        return o instanceof JSONArray ? (JSONArray)o : null;
    }
    
    public JSONObject optJSONObject(int index) {
        Object o = opt(index);
        return o instanceof JSONObject ? (JSONObject)o : null;
    }
    
    public long optLong(int index) {
        return optLong(index, 0);
    }
    
    public long optLong(int index, long defaultValue) {
        try {
            return getLong(index);
        }
         catch (Exception e) {
            return defaultValue;
        }
        
    }
    
    public String optString(int index) {
        return optString(index, "");
    }
    
    public String optString(int index, String defaultValue) {
        Object o = opt(index);
        return o != null ? o.toString() : defaultValue;
    }
    
    public JSONArray put(boolean value) {
        put(value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
    
    public JSONArray put(Collection value) {
        put(new JSONArray(value));
        return this;
    }
    
    public JSONArray put(double value) throws JSONException {
        Double d = new Double(value);
        JSONObject.testValidity(d);
        put(d);
        return this;
    }
    
    public JSONArray put(int value) {
        put(Integer.valueOf(value));
        return this;
    }
    
    public JSONArray put(long value) {
        put(Long.valueOf(value));
        return this;
    }
    
    public JSONArray put(Map value) {
        put(new JSONObject(value));
        return this;
    }
    
    public JSONArray put(Object value) {
        this.myArrayList.add(value);
        return this;
    }
    
    public JSONArray remove(Object value) {
        this.myArrayList.remove(value);
        return this;
    }
    
    public JSONArray put(int index, boolean value) throws JSONException {
        put(index, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
    
    public JSONArray put(int index, Collection value) throws JSONException {
        put(index, new JSONArray(value));
        return this;
    }
    
    public JSONArray put(int index, double value) throws JSONException {
        put(index, new Double(value));
        return this;
    }
    
    public JSONArray put(int index, int value) throws JSONException {
        put(index, Integer.valueOf(value));
        return this;
    }
    
    public JSONArray put(int index, long value) throws JSONException {
        put(index, Long.valueOf(value));
        return this;
    }
    
    public JSONArray put(int index, Map value) throws JSONException {
        put(index, new JSONObject(value));
        return this;
    }
    
    public JSONArray put(int index, Object value) throws JSONException {
        JSONObject.testValidity(value);
        if (index < 0) {
            throw new JSONException("JSONArray[" + index + "] not found.");
        }
        
        if (index < length()) {
            this.myArrayList.set(index, value);
        }
         else {
            while (index != length()) {
                put(JSONObject.NULL);
            }
            
            put(value);
        }
        
        return this;
    }
    
    public JSONObject toJSONObject(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0 || length() == 0) {
            return null;
        }
        
        JSONObject jo = new JSONObject();
        for (int i = 0; i < names.length(); i += 1) {
            jo.put(names.getString(i), this.opt(i));
        }
        
        return jo;
    }
    
    public String toString() {
        try {
            return '[' + join(",") + ']';
        }
         catch (Exception e) {
            return null;
        }
        
    }
    
    public String toString(int indentFactor) throws JSONException {
        return toString(indentFactor, 0);
    }
    
    String toString(int indentFactor, int indent) throws JSONException {
        int len = length();
        if (len == 0) {
            return "[]";
        }
        
        int i;
        StringBuilder sb = new StringBuilder("[");
        if (len == 1) {
            sb.append(JSONObject.valueToString(this.myArrayList.get(0), indentFactor, indent, escapeForwardSlashAlways));
        }
         else {
            int newindent = indent + indentFactor;
            sb.append('\n');
            for (i = 0; i < len; i += 1) {
                if (i > 0) {
                    sb.append(",\n");
                }
                
                for (int j = 0; j < newindent; j += 1) {
                    sb.append(' ');
                }
                
                sb.append(JSONObject.valueToString(this.myArrayList.get(i), indentFactor, newindent, escapeForwardSlashAlways));
            }
            
            sb.append('\n');
            for (i = 0; i < indent; i += 1) {
                sb.append(' ');
            }
            
        }
        
        sb.append(']');
        return sb.toString();
    }
    
    public int hashCode() {
    	return myArrayList.hashCode();
    }
    
    public boolean equals(Object obj) {
    	if (obj instanceof JSONArray) {
    		return myArrayList.equals(((JSONArray)obj).myArrayList);
    	}
    	 else {
    		return false;
    	}
    	
    }
    
    public Writer write(Writer writer) throws JSONException {
        try {
            boolean b = false;
            int     len = length();
            writer.write('[');
            for (int i = 0; i < len; i += 1) {
                if (b) {
                    writer.write(',');
                }
                
                Object v = this.myArrayList.get(i);
                if (v instanceof JSONObject) {
                    ((JSONObject)v).write(writer);
                }
                 else if (v instanceof JSONArray) {
                    ((JSONArray)v).write(writer);
                }
                 else {
                    writer.write(JSONObject.valueToString(v, escapeForwardSlashAlways));
                }
                
                b = true;
            }
            
            writer.write(']');
            return writer;
        }
         catch (IOException e) {
           throw new JSONException(e);
        }
        
    }
    
}

