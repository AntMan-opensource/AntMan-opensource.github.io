package jenkins.plugins.publish_over_ssh.descriptor;
import hudson.Extension;
import hudson.model.AbstractProject;
import hudson.model.Descriptor;
import hudson.model.Item;
import hudson.security.AccessControlled;
import hudson.util.FormValidation;
import jenkins.model.Jenkins;
import jenkins.plugins.publish_over.BPBuildInfo;
import jenkins.plugins.publish_over_ssh.BapSshCredentials;
import jenkins.plugins.publish_over_ssh.BapSshHostConfiguration;
import jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.Stapler;
import java.io.IOException;
public class BapSshCredentialsDescriptor extends Descriptor<BapSshCredentials> {
    public BapSshCredentialsDescriptor() {
        super(BapSshCredentials.class);
    }
    
    public String getDisplayName() {
        return "not seen";
    }
    
    public FormValidation doCheckUsername(@QueryParameter final String value) {
        return FormValidation.validateRequired(value);
    }
    
    public FormValidation doCheckKeyPath(@QueryParameter final String value) {
        AccessControlled subject = Stapler.getCurrentRequest().findAncestorObject(AbstractProject.class);
        if (subject == null) {
            subject = Jenkins.getInstance();
        }
        
        if (!subject.hasPermission(Item.CONFIGURE)&&subject.hasPermission(Item.EXTENDED_READ)) {
            return FormValidation.ok();
        }
        
        try {
            return Jenkins.getInstance().getRootPath().validateRelativePath(value, true, true);
        }
         catch (final IOException ioe) {
            return FormValidation.error(ioe, "");
        }
         catch (final NullPointerException npe) {
            return FormValidation.error(npe, "");
        }
        
    }
    
    public FormValidation doTestConnection(@QueryParameter final String configName, @QueryParameter final String username, @QueryParameter final String encryptedPassphrase, @QueryParameter final String key, @QueryParameter final String keyPath) {
        final BapSshCredentials credentials = new BapSshCredentials(username, encryptedPassphrase, key, keyPath);
        final BPBuildInfo buildInfo = BapSshPublisherPluginDescriptor.createDummyBuildInfo();
        buildInfo.put(BPBuildInfo.OVERRIDE_CREDENTIALS_CONTEXT_KEY, credentials);
        Jenkins j = Jenkins.getInstanceOrNull();
        final BapSshPublisherPlugin.Descriptor pluginDescriptor;
        if(j != null) {
            pluginDescriptor = j.getDescriptorByType(BapSshPublisherPlugin.Descriptor.class);
        }
        
        else {
            throw new NullPointerException("Jenkins is not ready on going to be offline...");
        }
        
        final BapSshHostConfiguration hostConfig = pluginDescriptor.getConfiguration(configName);
        return BapSshPublisherPluginDescriptor.validateConnection(hostConfig, buildInfo);
    }
    
    public jenkins.plugins.publish_over.view_defaults.HostConfiguration.Messages getCommonFieldNames() {
        return new jenkins.plugins.publish_over.view_defaults.HostConfiguration.Messages();
    }
    
}


