package org.xwiki.rendering.internal.macro.dashboard;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import org.apache.commons.lang3.StringUtils;
import org.apache.velocity.VelocityContext;
import org.xwiki.component.annotation.Component;
import org.xwiki.context.Execution;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.model.EntityType;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.GroupBlock;
import org.xwiki.rendering.block.LinkBlock;
import org.xwiki.rendering.block.WordBlock;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.executor.ContentExecutor;
import org.xwiki.rendering.executor.ContentExecutorException;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;
import org.xwiki.rendering.macro.dashboard.Gadget;
import org.xwiki.rendering.macro.dashboard.GadgetSource;
import org.xwiki.rendering.parser.MissingParserException;
import org.xwiki.rendering.parser.ParseException;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.util.ParserUtils;
import org.xwiki.security.authorization.AuthorExecutor;
import org.xwiki.velocity.VelocityEngine;
import org.xwiki.velocity.VelocityManager;
import com.xpn.xwiki.XWiki;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;
public class DefaultGadgetSource implements GadgetSource {
    protected static final EntityReference GADGET_CLASS = new EntityReference("GadgetClass", EntityType.DOCUMENT, new EntityReference("XWiki", EntityType.SPACE));
    protected Execution execution;
    protected DocumentReferenceResolver<String> currentReferenceResolver;
    protected DocumentReferenceResolver<EntityReference> currentReferenceEntityResolver;
    private EntityReferenceSerializer<String> localReferenceSerializer;
    private AuthorExecutor authorExecutor;
    private VelocityManager velocityManager;
    private ContentExecutor<MacroTransformationContext> contentExecutor;
    private JobProgressManager progress;
    private ParserUtils parserUtils = new ParserUtils();
    public List<Gadget> getGadgets(String source, MacroTransformationContext context) throws Exception {
        DocumentReference sourceDocRef = getSourceDocumentReference(source);
        if (sourceDocRef == null) {
            return new ArrayList<>();
        }
        
        XWikiContext xContext = getXWikiContext();
        XWiki xWiki = xContext.getWiki();
        XWikiDocument sourceDoc = xWiki.getDocument(sourceDocRef, xContext);
        DocumentReference gadgetsClass = currentReferenceEntityResolver.resolve(GADGET_CLASS);
        List<BaseObject> gadgetObjects = sourceDoc.getXObjects(gadgetsClass);
        if (gadgetObjects == null || gadgetObjects.isEmpty()) {
            return new ArrayList<>();
        }
        
        this.progress.startStep(this, "dashboard.progress.prepareGadgets", "Prepare gadgets for document [{}] ({})", sourceDocRef, gadgetObjects.size());
        this.progress.pushLevelProgress(gadgetObjects.size(), this);
        try {
            return prepareGadgets(gadgetObjects, sourceDoc.getSyntax(), context);
        }
         finally {
            this.progress.popLevelProgress(this);
            this.progress.endStep(this);
        }
        
    }
    
    private List<Gadget> prepareGadgets(List<BaseObject> objects, Syntax sourceSyntax, MacroTransformationContext context) throws Exception {
        List<Gadget> gadgets = new ArrayList<>();
        VelocityContext velocityContext = velocityManager.getVelocityContext();
        String key = context.getTransformationContext().getId();
        if (key == null) {
            key = "unknown namespace";
        }
        
        VelocityEngine velocityEngine = velocityManager.getVelocityEngine();
        for (BaseObject xObject : objects) {
            if (xObject != null) {
                this.progress.startStep(this, "dashboard.progress.prepareGadget", "Prepare gadget [{}:{}]", xObject.getDocumentReference(), xObject.getNumber());
                String title = xObject.getStringValue("title");
                String content = xObject.getLargeStringValue("content");
                String position = xObject.getStringValue("position");
                String id = xObject.getNumber() + "";
                StringWriter writer = new StringWriter();
                velocityEngine.evaluate(velocityContext, writer, key, title);
                String gadgetTitle = writer.toString();
                List<Block> titleBlocks = renderGadgetProperty(gadgetTitle, sourceSyntax, xObject.getDocumentReference(), xObject.getOwnerDocument(), context);
                List<Block> contentBlocks = renderGadgetProperty(content, sourceSyntax, xObject.getDocumentReference(), xObject.getOwnerDocument(), context);
                Gadget gadget = new Gadget(id, titleBlocks, contentBlocks, position);
                gadget.setTitleSource(title);
                gadgets.add(gadget);
            }
             else {
                this.progress.startStep(this, "dashboard.progress.skipNullGadget", "Null gadget object");
            }
            
            this.progress.endStep(this);
        }
        
        return gadgets;
    }
    
    private List<Block> renderGadgetProperty(String content, Syntax sourceSyntax, EntityReference sourceReference, XWikiDocument ownerDocument, MacroTransformationContext context) throws Exception {
        return authorExecutor.call(() -> {
            XDOM xdom = this.contentExecutor.execute(content, sourceSyntax, sourceReference, context);
            List<Block> xdomBlocks = xdom.getChildren();
            this.parserUtils.removeTopLevelParagraph(xdomBlocks);
            return xdomBlocks;
        }, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference());
    }
    
    private DocumentReference getSourceDocumentReference(String source) {
        if (StringUtils.isEmpty(source)) {
            return getXWikiContext().getDoc().getDocumentReference();
        }
        
        return currentReferenceResolver.resolve(source);
    }
    
    private XWikiContext getXWikiContext() {
        return (XWikiContext) execution.getContext().getProperty("xwikicontext");
    }
    
    public List<Block> getDashboardSourceMetadata(String source, MacroTransformationContext context) {
        DocumentReference sourceDoc = getSourceDocumentReference(source);
        String classParameterName = "class";
        GroupBlock metadataContainer = new GroupBlock();
        metadataContainer.setParameter(classParameterName, DashboardMacro.METADATA);
        XWikiContext xContext = getXWikiContext();
        String editURL = xContext.getWiki().getURL(sourceDoc, "save", "", "", xContext);
        LinkBlock editURLBlock = new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(editURL, ResourceType.URL), false);
        editURLBlock.setParameter(classParameterName, DashboardMacro.EDIT_URL);
        metadataContainer.addChild(editURLBlock);
        String removeURL = xContext.getWiki().getURL(sourceDoc, "objectremove", "", "", xContext);
        LinkBlock removeURLBlock = new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(removeURL, ResourceType.URL), false);
        removeURLBlock.setParameter(classParameterName, DashboardMacro.REMOVE_URL);
        metadataContainer.addChild(removeURLBlock);
        String addURL = xContext.getWiki().getURL(sourceDoc, "objectadd", "", "", xContext);
        LinkBlock addURLBlock = new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(addURL, ResourceType.URL), false);
        addURLBlock.setParameter(classParameterName, DashboardMacro.ADD_URL);
        metadataContainer.addChild(addURLBlock);
        GroupBlock sourcePageBlock = new GroupBlock();
        sourcePageBlock.addChild(new WordBlock(sourceDoc.getName()));
        sourcePageBlock.setParameter(classParameterName, DashboardMacro.SOURCE_PAGE);
        metadataContainer.addChild(sourcePageBlock);
        GroupBlock sourceSpaceBlock = new GroupBlock();
        sourceSpaceBlock.addChild(new WordBlock( this.localReferenceSerializer.serialize(sourceDoc.getLastSpaceReference())));
        sourceSpaceBlock.setParameter(classParameterName, DashboardMacro.SOURCE_SPACE);
        metadataContainer.addChild(sourceSpaceBlock);
        GroupBlock sourceWikiBlock = new GroupBlock();
        sourceWikiBlock.addChild(new WordBlock(sourceDoc.getWikiReference().getName()));
        sourceWikiBlock.setParameter(classParameterName, DashboardMacro.SOURCE_WIKI);
        metadataContainer.addChild(sourceWikiBlock);
        String sourceURL = xContext.getWiki().getURL(sourceDoc, "view", "", "", xContext);
        LinkBlock sourceURLBlock = new LinkBlock(Collections.<Block> emptyList(), new ResourceReference(sourceURL, ResourceType.URL), false);
        sourceURLBlock.setParameter(classParameterName, DashboardMacro.SOURCE_URL);
        metadataContainer.addChild(sourceURLBlock);
        return Collections.<Block> singletonList(metadataContainer);
    }
    
    public boolean isEditing() {
        XWikiContext context = getXWikiContext();
        return "inline".equals(context.getAction()) || "edit".equals(context.getAction());
    }
    
}


