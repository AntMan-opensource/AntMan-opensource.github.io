package org.apache.zeppelin.rest;
import com.google.gson.Gson;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import org.apache.commons.lang3.StringUtils;
import org.apache.zeppelin.annotation.ZeppelinApi;
import org.apache.zeppelin.server.JsonResponse;
import org.apache.zeppelin.service.AuthenticationService;
import org.apache.zeppelin.ticket.TicketContainer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class SecurityRestApi {
  private static final Logger LOG = LoggerFactory.getLogger(SecurityRestApi.class);
  private static final Gson gson = new Gson();
  private final AuthenticationService authenticationService;
  public SecurityRestApi(AuthenticationService authenticationService) {
    this.authenticationService = authenticationService;
  }
  
  public Response ticket() {
    String principal = authenticationService.getPrincipal();
    Set<String> roles = authenticationService.getAssociatedRoles();
    String ticket;
    if ("anonymous".equals(principal)) {
      ticket = "anonymous";
    }
     else {
      ticket = TicketContainer.instance.getTicket(principal);
    }
    
    Map<String, String> data = new HashMap<>();
    data.put("principal", principal);
    data.put("roles", gson.toJson(roles));
    data.put("ticket", ticket);
    JsonResponse<Map<String, String>> response = new JsonResponse<>(Response.Status.OK, "", data);
    LOG.warn("{}", response);
    return response.build();
  }
  
  public Response getUserList(@PathParam("searchText") final String searchText) {
    final int numUsersToFetch = 5;
    List<String> usersList = authenticationService.getMatchedUsers(searchText, numUsersToFetch);
    List<String> rolesList = authenticationService.getMatchedRoles();
    List<String> autoSuggestUserList = new ArrayList<>();
    List<String> autoSuggestRoleList = new ArrayList<>();
    Collections.sort(usersList);
    Collections.sort(rolesList);
    Collections.sort( usersList, (o1, o2) -> {
          if (o1.matches(searchText + "(.*)") && o2.matches(searchText + "(.*)")) {
            return 0;
          }
           else if (o1.matches(searchText + "(.*)")) {
            return -1;
          }
          
          return 0;
        }
        
);
    int maxLength = 0;
    for (String user : usersList) {
      if (StringUtils.containsIgnoreCase(user, searchText)) {
        autoSuggestUserList.add(user);
        maxLength++;
      }
      
      if (maxLength == numUsersToFetch) {
        break;
      }
      
    }
    
    for (String role : rolesList) {
      if (StringUtils.containsIgnoreCase(role, searchText)) {
        autoSuggestRoleList.add(role);
      }
      
    }
    
    Map<String, List<String>> returnListMap = new HashMap<>();
    returnListMap.put("users", autoSuggestUserList);
    returnListMap.put("roles", autoSuggestRoleList);
    return new JsonResponse<>(Response.Status.OK, "", returnListMap).build();
  }
  
}


