package org.apache.zeppelin.rest;
import com.google.common.collect.Sets;
import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.zeppelin.annotation.ZeppelinApi;
import org.apache.zeppelin.conf.ZeppelinConfiguration;
import org.apache.zeppelin.interpreter.InterpreterResult;
import org.apache.zeppelin.notebook.Note;
import org.apache.zeppelin.notebook.NoteInfo;
import org.apache.zeppelin.notebook.Notebook;
import org.apache.zeppelin.notebook.Paragraph;
import org.apache.zeppelin.notebook.AuthorizationService;
import org.apache.zeppelin.notebook.scheduler.SchedulerService;
import org.apache.zeppelin.rest.exception.BadRequestException;
import org.apache.zeppelin.rest.exception.ForbiddenException;
import org.apache.zeppelin.rest.exception.NoteNotFoundException;
import org.apache.zeppelin.rest.exception.ParagraphNotFoundException;
import org.apache.zeppelin.rest.message.CronRequest;
import org.apache.zeppelin.rest.message.NewNoteRequest;
import org.apache.zeppelin.rest.message.NewParagraphRequest;
import org.apache.zeppelin.rest.message.NoteJobStatus;
import org.apache.zeppelin.rest.message.ParagraphJobStatus;
import org.apache.zeppelin.rest.message.RenameNoteRequest;
import org.apache.zeppelin.rest.message.ParametersRequest;
import org.apache.zeppelin.rest.message.UpdateParagraphRequest;
import org.apache.zeppelin.search.SearchService;
import org.apache.zeppelin.server.JsonResponse;
import org.apache.zeppelin.service.AuthenticationService;
import org.apache.zeppelin.service.JobManagerService;
import org.apache.zeppelin.service.NotebookService;
import org.apache.zeppelin.service.ServiceContext;
import org.apache.zeppelin.socket.NotebookServer;
import org.apache.zeppelin.user.AuthenticationInfo;
import org.quartz.CronExpression;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import static org.apache.zeppelin.common.Message.MSG_ID_NOT_DEFINED;
public class NotebookRestApi extends AbstractRestApi {
  private static final Logger LOGGER = LoggerFactory.getLogger(NotebookRestApi.class);
  private static final Gson GSON = new Gson();
  private ZeppelinConfiguration zConf;
  private Notebook notebook;
  private NotebookServer notebookServer;
  private SearchService noteSearchService;
  private AuthorizationService authorizationService;
  private NotebookService notebookService;
  private JobManagerService jobManagerService;
  private AuthenticationService authenticationService;
  private SchedulerService schedulerService;
  public NotebookRestApi( Notebook notebook, NotebookServer notebookServer, NotebookService notebookService, SearchService search, AuthorizationService authorizationService, ZeppelinConfiguration zConf, AuthenticationService authenticationService, JobManagerService jobManagerService, SchedulerService schedulerService) {
    super(authenticationService);
    this.notebook = notebook;
    this.notebookServer = notebookServer;
    this.notebookService = notebookService;
    this.jobManagerService = jobManagerService;
    this.noteSearchService = search;
    this.authorizationService = authorizationService;
    this.zConf = zConf;
    this.authenticationService = authenticationService;
    this.schedulerService = schedulerService;
  }
  
  public Response getNotePermissions(@PathParam("noteId") String noteId) throws IOException {
    checkIfUserIsAnon(getBlockNotAuthenticatedUserErrorMsg());
    checkIfUserCanRead(noteId, "Insufficient privileges you cannot get the list of permissions for this note");
    HashMap<String, Set<String>> permissionsMap = new HashMap<>();
    permissionsMap.put("owners", authorizationService.getOwners(noteId));
    permissionsMap.put("readers", authorizationService.getReaders(noteId));
    permissionsMap.put("writers", authorizationService.getWriters(noteId));
    permissionsMap.put("runners", authorizationService.getRunners(noteId));
    return new JsonResponse<>(Status.OK, "", permissionsMap).build();
  }
  
  private String ownerPermissionError(Set<String> current, Set<String> allowed) {
    LOGGER.info("Cannot change permissions. Connection owners {}. Allowed owners {}", current.toString(), allowed.toString());
    return "Insufficient privileges to change permissions.\n\n" + "Allowed owners: " + allowed.toString() + "\n\n" + "User belongs to: " + current.toString();
  }
  
  private String getBlockNotAuthenticatedUserErrorMsg() {
    return "Only authenticated user can set the permission.";
  }
  
  private void checkIfUserIsAnon(String errorMsg) {
    boolean isAuthenticated = authenticationService.isAuthenticated();
    if (isAuthenticated && authenticationService.getPrincipal().equals("anonymous")) {
      LOGGER.info("Anonymous user cannot set any permissions for this note.");
      throw new ForbiddenException(errorMsg);
    }
    
  }
  
  private void checkIfUserIsOwner(String noteId, String errorMsg) {
    Set<String> userAndRoles = Sets.newHashSet();
    userAndRoles.add(authenticationService.getPrincipal());
    userAndRoles.addAll(authenticationService.getAssociatedRoles());
    if (!authorizationService.isOwner(userAndRoles, noteId)) {
     throw new ForbiddenException(errorMsg);
    }
    
  }
  
  private void checkIfUserCanWrite(String noteId, String errorMsg) {
    Set<String> userAndRoles = Sets.newHashSet();
    userAndRoles.add(authenticationService.getPrincipal());
    userAndRoles.addAll(authenticationService.getAssociatedRoles());
    if (!authorizationService.hasWritePermission(userAndRoles, noteId)) {
     throw new ForbiddenException(errorMsg);
    }
    
  }
  
  private void checkIfUserCanRead(String noteId, String errorMsg) {
    Set<String> userAndRoles = Sets.newHashSet();
    userAndRoles.add(authenticationService.getPrincipal());
    userAndRoles.addAll(authenticationService.getAssociatedRoles());
    if (!authorizationService.hasReadPermission(userAndRoles, noteId)) {
      throw new ForbiddenException(errorMsg);
    }
    
  }
  
  private void checkIfUserCanRun(String noteId, String errorMsg) {
    Set<String> userAndRoles = Sets.newHashSet();
    userAndRoles.add(authenticationService.getPrincipal());
    userAndRoles.addAll(authenticationService.getAssociatedRoles());
    if (!authorizationService.hasRunPermission(userAndRoles, noteId)) {
     throw new ForbiddenException(errorMsg);
    }
    
  }
  
  private void checkIfNoteIsNotNull(Note note, String noteId) {
    if (note == null) {
      throw new NoteNotFoundException(noteId);
    }
    
  }
  
  private void checkIfNoteSupportsCron(Note note) {
    if (!note.isCronSupported(notebook.getConf())) {
      LOGGER.error("Cron is not enabled from Zeppelin server");
      throw new ForbiddenException("Cron is not enabled from Zeppelin server");
    }
    
  }
  
  private void checkIfParagraphIsNotNull(Paragraph paragraph, String paragraphId) {
    if (paragraph == null) {
      throw new ParagraphNotFoundException(paragraphId);
    }
    
  }
  
  public Response putNotePermissions(@PathParam("noteId") String noteId, String req) throws IOException {
    String principal = authenticationService.getPrincipal();
    Set<String> roles = authenticationService.getAssociatedRoles();
    HashSet<String> userAndRoles = new HashSet<>();
    userAndRoles.add(principal);
    userAndRoles.addAll(roles);
    checkIfUserIsAnon(getBlockNotAuthenticatedUserErrorMsg());
    checkIfUserIsOwner(noteId, ownerPermissionError(userAndRoles, authorizationService.getOwners(noteId)));
    HashMap<String, HashSet<String>> permMap = GSON.fromJson(req, new TypeToken<HashMap<String, HashSet<String>>>() {             }.getType());
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    HashSet<String> readers = permMap.get("readers");
    HashSet<String> runners = permMap.get("runners");
    HashSet<String> owners = permMap.get("owners");
    HashSet<String> writers = permMap.get("writers");
    LOGGER.info("Set permissions to note: {} with current user:{}, owners:{}, readers:{}, runners:{}, writers:{}", noteId, principal, owners, readers, runners, writers);
    if (readers != null && !readers.isEmpty()) {
      if (runners.isEmpty()) {
        runners = Sets.newHashSet(authenticationService.getPrincipal());
      }
      
      if (writers.isEmpty()) {
        writers = Sets.newHashSet(authenticationService.getPrincipal());
      }
      
      if (owners.isEmpty()) {
        owners = Sets.newHashSet(authenticationService.getPrincipal());
      }
      
    }
    
    if (runners != null && !runners.isEmpty()) {
      if (writers.isEmpty()) {
        writers = Sets.newHashSet(authenticationService.getPrincipal());
      }
      
      if (owners.isEmpty()) {
        owners = Sets.newHashSet(authenticationService.getPrincipal());
      }
      
    }
    
    if (writers != null && !writers.isEmpty()) {
      if (owners.isEmpty()) {
        owners = Sets.newHashSet(authenticationService.getPrincipal());
      }
      
    }
    
    authorizationService.setReaders(noteId, readers);
    authorizationService.setRunners(noteId, runners);
    authorizationService.setWriters(noteId, writers);
    authorizationService.setOwners(noteId, owners);
    LOGGER.debug("After set permissions {} {} {} {}", authorizationService.getOwners(noteId), authorizationService.getReaders(noteId), authorizationService.getRunners(noteId), authorizationService.getWriters(noteId));
    AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
    authorizationService.saveNoteAuth(noteId, subject);
    notebookServer.broadcastNote(note);
    notebookServer.broadcastNoteList(subject, userAndRoles);
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response getNoteList() throws IOException {
    List<NoteInfo> notesInfo = notebookService.listNotesInfo(false, getServiceContext(), new RestServiceCallback<List<NoteInfo>>());
    return new JsonResponse<>(Status.OK, "", notesInfo).build();
  }
  
  public Response getNote(@PathParam("noteId") String noteId) throws IOException {
    Note note = notebookService.getNote(noteId, getServiceContext(), new RestServiceCallback());
    return new JsonResponse<>(Status.OK, "", note).build();
  }
  
  public Response exportNote(@PathParam("noteId") String noteId) throws IOException {
    checkIfUserCanRead(noteId, "Insufficient privileges you cannot export this note");
    String exportJson = notebook.exportNote(noteId);
    return new JsonResponse<>(Status.OK, "", exportJson).build();
  }
  
  public Response importNote(@QueryParam("notePath") String notePath, String noteJson) throws IOException {
    Note note = notebookService.importNote(notePath, noteJson, getServiceContext(), new RestServiceCallback());
    return new JsonResponse<>(Status.OK, "", note.getId()).build();
  }
  
  public Response createNote(String message) throws IOException {
    String user = authenticationService.getPrincipal();
    LOGGER.info("Creating new note by JSON {}", message);
    NewNoteRequest request = NewNoteRequest.fromJson(message);
    String defaultInterpreterGroup = request.getDefaultInterpreterGroup();
    if (StringUtils.isBlank(defaultInterpreterGroup)) {
      defaultInterpreterGroup = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_DEFAULT);
    }
    
    Note note = notebookService.createNote( request.getName(), defaultInterpreterGroup, false, getServiceContext(), new RestServiceCallback<>());
    AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
    if (request.getParagraphs() != null) {
      for (NewParagraphRequest paragraphRequest : request.getParagraphs()) {
        Paragraph p = note.addNewParagraph(subject);
        initParagraph(p, paragraphRequest, user);
      }
      
    }
    
    return new JsonResponse<>(Status.OK, "", note.getId()).build();
  }
  
  public Response deleteNote(@PathParam("noteId") String noteId) throws IOException {
    LOGGER.info("Delete note {} ", noteId);
    notebookService.removeNote(noteId, getServiceContext(), new RestServiceCallback<String>() {
              public void onSuccess(String message, ServiceContext context) {
                notebookServer.broadcastNoteList(context.getAutheInfo(), context.getUserAndRoles());
              }
              
            }
            
);
    return new JsonResponse<>(Status.OK, "").build();
  }
  
  public Response cloneNote(@PathParam("noteId") String noteId, String message) throws IOException, IllegalArgumentException {
    LOGGER.info("Clone note by JSON {}", message);
    checkIfUserCanWrite(noteId, "Insufficient privileges you cannot clone this note");
    NewNoteRequest request = NewNoteRequest.fromJson(message);
    String newNoteName = null;
    if (request != null) {
      newNoteName = request.getName();
    }
    
    AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
    Note newNote = notebookService.cloneNote(noteId, newNoteName, getServiceContext(), new RestServiceCallback<Note>() {
              public void onSuccess(Note newNote, ServiceContext context) throws IOException {
                notebookServer.broadcastNote(newNote);
                notebookServer.broadcastNoteList(subject, context.getUserAndRoles());
              }
              
            }
            
);
    return new JsonResponse<>(Status.OK, "", newNote.getId()).build();
  }
  
  public Response renameNote(@PathParam("noteId") String noteId, String message) throws IOException {
    LOGGER.info("Rename note by JSON {}", message);
    RenameNoteRequest request = GSON.fromJson(message, RenameNoteRequest.class);
    String newName = request.getName();
    if (newName.isEmpty()) {
      LOGGER.warn("Trying to rename notebook {} with empty name parameter", noteId);
      throw new BadRequestException("name can not be empty");
    }
    
    notebookService.renameNote(noteId, request.getName(), false, getServiceContext(), new RestServiceCallback<Note>() {
              public void onSuccess(Note note, ServiceContext context) throws IOException {
                notebookServer.broadcastNote(note);
                notebookServer.broadcastNoteList(context.getAutheInfo(), context.getUserAndRoles());
              }
              
            }
            
);
    return new JsonResponse<>(Status.OK, "").build();
  }
  
  public Response insertParagraph(@PathParam("noteId") String noteId, String message) throws IOException {
    String user = authenticationService.getPrincipal();
    LOGGER.info("Insert paragraph {} {}", noteId, message);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanWrite(noteId, "Insufficient privileges you cannot add paragraph to this note");
    NewParagraphRequest request = NewParagraphRequest.fromJson(message);
    AuthenticationInfo subject = new AuthenticationInfo(user);
    Paragraph p;
    Double indexDouble = request.getIndex();
    if (indexDouble == null) {
      p = note.addNewParagraph(subject);
    }
     else {
      p = note.insertNewParagraph(indexDouble.intValue(), subject);
    }
    
    initParagraph(p, request, user);
    notebook.saveNote(note, subject);
    notebookServer.broadcastNote(note);
    return new JsonResponse<>(Status.OK, "", p.getId()).build();
  }
  
  public Response getParagraph(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId) throws IOException {
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRead(noteId, "Insufficient privileges you cannot get this paragraph");
    Paragraph p = note.getParagraph(paragraphId);
    checkIfParagraphIsNotNull(p, paragraphId);
    return new JsonResponse<>(Status.OK, "", p).build();
  }
  
  public Response updateParagraph(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId, String message) throws IOException {
    String user = authenticationService.getPrincipal();
    LOGGER.info("{} will update paragraph {} {}", user, noteId, paragraphId);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanWrite(noteId, "Insufficient privileges you cannot update this paragraph");
    Paragraph p = note.getParagraph(paragraphId);
    checkIfParagraphIsNotNull(p, paragraphId);
    UpdateParagraphRequest updatedParagraph = GSON.fromJson(message, UpdateParagraphRequest.class);
    p.setText(updatedParagraph.getText());
    if (updatedParagraph.getTitle() != null) {
      p.setTitle(updatedParagraph.getTitle());
    }
    
    AuthenticationInfo subject = new AuthenticationInfo(user);
    notebook.saveNote(note, subject);
    notebookServer.broadcastParagraph(note, p, MSG_ID_NOT_DEFINED);
    return new JsonResponse<>(Status.OK, "").build();
  }
  
  public Response updateParagraphConfig(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId, String message) throws IOException {
    String user = authenticationService.getPrincipal();
    LOGGER.info("{} will update paragraph config {} {}", user, noteId, paragraphId);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanWrite(noteId, "Insufficient privileges you cannot update this paragraph config");
    Paragraph p = note.getParagraph(paragraphId);
    checkIfParagraphIsNotNull(p, paragraphId);
    Map<String, Object> newConfig = GSON.fromJson(message, HashMap.class);
    configureParagraph(p, newConfig, user);
    AuthenticationInfo subject = new AuthenticationInfo(user);
    notebook.saveNote(note, subject);
    return new JsonResponse<>(Status.OK, "", p).build();
  }
  
  public Response moveParagraph(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId, @PathParam("newIndex") String newIndex) throws IOException {
    LOGGER.info("Move paragraph {} {} {}", noteId, paragraphId, newIndex);
    notebookService.moveParagraph(noteId, paragraphId, Integer.parseInt(newIndex), getServiceContext(), new RestServiceCallback<Paragraph>() {
              public void onSuccess(Paragraph result, ServiceContext context) throws IOException {
                notebookServer.broadcastNote(result.getNote());
              }
              
            }
            
);
    return new JsonResponse<>(Status.OK, "").build();
  }
  
  public Response deleteParagraph(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId) throws IOException {
    LOGGER.info("Delete paragraph {} {}", noteId, paragraphId);
    notebookService.removeParagraph(noteId, paragraphId, getServiceContext(), new RestServiceCallback<Paragraph>() {
              public void onSuccess(Paragraph p, ServiceContext context) throws IOException {
                notebookServer.broadcastNote(p.getNote());
              }
              
            }
            
);
    return new JsonResponse<>(Status.OK, "").build();
  }
  
  public Response nextSessionParagraph(@PathParam("noteId") String noteId, @QueryParam("maxParagraph") int maxParagraph) throws IOException {
    Paragraph p = notebookService.getNextSessionParagraph(noteId, maxParagraph, getServiceContext(), new RestServiceCallback<>());
    return new JsonResponse<>(Status.OK, p.getId()).build();
  }
  
  public Response clearAllParagraphOutput(@PathParam("noteId") String noteId) throws IOException {
    LOGGER.info("Clear all paragraph output of note {}", noteId);
    notebookService.clearAllParagraphOutput(noteId, getServiceContext(), new RestServiceCallback<>());
    return new JsonResponse<>(Status.OK, "").build();
  }
  
  public Response runNoteJobs(@PathParam("noteId") String noteId, @QueryParam("blocking") Boolean blocking, @QueryParam("isolated") Boolean isolated, String message) throws Exception, IllegalArgumentException {
    if (blocking == null) {
      blocking = false;
    }
    
    if (isolated == null) {
      isolated = false;
    }
    
    Map<String, Object> params = new HashMap<>();
    if (!StringUtils.isEmpty(message)) {
      ParametersRequest request = ParametersRequest.fromJson(message);
      params = request.getParams();
    }
    
    LOGGER.info("Run note jobs, noteId: {}, blocking: {}, isolated: {}, params: {}", noteId, blocking, isolated, params);
    Note note = notebook.getNote(noteId);
    AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
    subject.setRoles(new LinkedList<>(authenticationService.getAssociatedRoles()));
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRun(noteId, "Insufficient privileges you cannot run job for this note");
    note.runAll(subject, blocking, isolated, params);
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response stopNoteJobs(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {
    LOGGER.info("Stop note jobs {} ", noteId);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRun(noteId, "Insufficient privileges you cannot stop this job for this note");
    for (Paragraph p : note.getParagraphs()) {
      if (!p.isTerminated()) {
        p.abort();
      }
      
    }
    
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response getNoteJobStatus(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {
    LOGGER.info("Get note job status.");
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRead(noteId, "Insufficient privileges you cannot get job status");
    return new JsonResponse<>(Status.OK, null, new NoteJobStatus(note)).build();
  }
  
  public Response getNoteParagraphJobStatus(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId) throws IOException, IllegalArgumentException {
    LOGGER.info("Get note paragraph job status.");
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRead(noteId, "Insufficient privileges you cannot get job status");
    Paragraph paragraph = note.getParagraph(paragraphId);
    checkIfParagraphIsNotNull(paragraph, paragraphId);
    return new JsonResponse<>(Status.OK, null, new ParagraphJobStatus(paragraph)).build();
  }
  
  public Response runParagraph(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId, @QueryParam("sessionId") String sessionId, String message) throws IOException, IllegalArgumentException {
    LOGGER.info("Run paragraph job asynchronously {} {} {}", noteId, paragraphId, message);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    Paragraph paragraph = note.getParagraph(paragraphId);
    checkIfParagraphIsNotNull(paragraph, paragraphId);
    Map<String, Object> params = new HashMap<>();
    if (!StringUtils.isEmpty(message)) {
      ParametersRequest request = ParametersRequest.fromJson(message);
      params = request.getParams();
    }
    
    notebookService.runParagraph(noteId, paragraphId, paragraph.getTitle(), paragraph.getText(), params, new HashMap<>(), sessionId, false, false, getServiceContext(), new RestServiceCallback<>());
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response runParagraphSynchronously(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId, @QueryParam("sessionId") String sessionId, String message) throws IOException, IllegalArgumentException {
    LOGGER.info("Run paragraph synchronously {} {} {}", noteId, paragraphId, message);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    Paragraph paragraph = note.getParagraph(paragraphId);
    checkIfParagraphIsNotNull(paragraph, paragraphId);
    Map<String, Object> params = new HashMap<>();
    if (!StringUtils.isEmpty(message)) {
      ParametersRequest request = ParametersRequest.fromJson(message);
      params = request.getParams();
    }
    
    if (notebookService.runParagraph(noteId, paragraphId, paragraph.getTitle(), paragraph.getText(), params, new HashMap<>(), sessionId, false, true, getServiceContext(), new RestServiceCallback<>())) {       note = notebookService.getNote(noteId, getServiceContext(), new RestServiceCallback<>());
      Paragraph p = note.getParagraph(paragraphId);
      InterpreterResult result = p.getReturn();
      return new JsonResponse<>(Status.OK, result).build();
    }
     else {
      return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR, "Fail to run paragraph").build();
    }
    
  }
  
  public Response cancelParagraph(@PathParam("noteId") String noteId, @PathParam("paragraphId") String paragraphId) throws IOException, IllegalArgumentException {
    LOGGER.info("stop paragraph job {} ", noteId);
    notebookService.cancelParagraph(noteId, paragraphId, getServiceContext(), new RestServiceCallback<Paragraph>());
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response registerCronJob(@PathParam("noteId") String noteId, String message) throws IOException, IllegalArgumentException {
    LOGGER.info("Register cron job note={} request cron msg={}", noteId, message);
    CronRequest request = CronRequest.fromJson(message);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRun(noteId, "Insufficient privileges you cannot set a cron job for this note");
    checkIfNoteSupportsCron(note);
    if (!CronExpression.isValidExpression(request.getCronString())) {
      return new JsonResponse<>(Status.BAD_REQUEST, "wrong cron expressions.").build();
    }
    
    Map<String, Object> config = note.getConfig();
    config.put("cron", request.getCronString());
    config.put("releaseresource", request.getReleaseResource());
    note.setConfig(config);
    schedulerService.refreshCron(note.getId());
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response removeCronJob(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {
    LOGGER.info("Remove cron job note {}", noteId);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserIsOwner(noteId, "Insufficient privileges you cannot remove this cron job from this note");
    checkIfNoteSupportsCron(note);
    Map<String, Object> config = note.getConfig();
    config.remove("cron");
    config.remove("releaseresource");
    note.setConfig(config);
    schedulerService.refreshCron(note.getId());
    return new JsonResponse<>(Status.OK).build();
  }
  
  public Response getCronJob(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {
    LOGGER.info("Get cron job note {}", noteId);
    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note, noteId);
    checkIfUserCanRead(noteId, "Insufficient privileges you cannot get cron information");
    checkIfNoteSupportsCron(note);
    Map<String, Object> response = new HashMap<>();
    response.put("cron", note.getConfig().get("cron"));
    response.put("releaseResource", note.getConfig().get("releaseresource"));
    return new JsonResponse<>(Status.OK, response).build();
  }
  
  public Response getJobListforNote() throws IOException, IllegalArgumentException {
    LOGGER.info("Get note jobs for job manager");
    List<JobManagerService.NoteJobInfo> noteJobs = jobManagerService .getNoteJobInfoByUnixTime(0, getServiceContext(), new RestServiceCallback<>());
    Map<String, Object> response = new HashMap<>();
    response.put("lastResponseUnixTime", System.currentTimeMillis());
    response.put("jobs", noteJobs);
    return new JsonResponse<>(Status.OK, response).build();
  }
  
  public Response getUpdatedJobListforNote(@PathParam("lastUpdateUnixtime") long lastUpdateUnixTime) throws IOException, IllegalArgumentException {
    LOGGER.info("Get updated note jobs lastUpdateTime {}", lastUpdateUnixTime);
    List<JobManagerService.NoteJobInfo> noteJobs = jobManagerService.getNoteJobInfoByUnixTime(lastUpdateUnixTime, getServiceContext(), new RestServiceCallback<>());
    Map<String, Object> response = new HashMap<>();
    response.put("lastResponseUnixTime", System.currentTimeMillis());
    response.put("jobs", noteJobs);
    return new JsonResponse<>(Status.OK, response).build();
  }
  
  public Response search(@QueryParam("q") String queryTerm) {
    LOGGER.info("Searching notes for: {}", queryTerm);
    String principal = authenticationService.getPrincipal();
    Set<String> roles = authenticationService.getAssociatedRoles();
    HashSet<String> userAndRoles = new HashSet<>();
    userAndRoles.add(principal);
    userAndRoles.addAll(roles);
    List<Map<String, String>> notesFound = noteSearchService.query(queryTerm);
    for (int i = 0; i < notesFound.size(); i++) {
      String[] ids = notesFound.get(i).get("id").split("/", 2);
      String noteId = ids[0];
      if (!authorizationService.isOwner(noteId, userAndRoles) && !authorizationService.isReader(noteId, userAndRoles) && !authorizationService.isWriter(noteId, userAndRoles) && !authorizationService.isRunner(noteId, userAndRoles)) {
        notesFound.remove(i);
        i--;
      }
      
    }
    
    LOGGER.info("{} notes found", notesFound.size());
    return new JsonResponse<>(Status.OK, notesFound).build();
  }
  
  private void handleParagraphParams(String message, Note note, Paragraph paragraph) throws IOException {
    if (!StringUtils.isEmpty(message)) {
      ParametersRequest request = ParametersRequest.fromJson(message);
      Map<String, Object> paramsForUpdating = request.getParams();
      if (paramsForUpdating != null) {
        paragraph.settings.getParams().putAll(paramsForUpdating);
        AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
        notebook.saveNote(note, subject);
      }
      
    }
    
  }
  
  private void initParagraph(Paragraph p, NewParagraphRequest request, String user) {
    LOGGER.info("Init Paragraph for user {}", user);
    checkIfParagraphIsNotNull(p, "");
    p.setTitle(request.getTitle());
    p.setText(request.getText());
    Map<String, Object> config = request.getConfig();
    if (config != null && !config.isEmpty()) {
      configureParagraph(p, config, user);
    }
    
  }
  
  private void configureParagraph(Paragraph p, Map<String, Object> newConfig, String user) {
    LOGGER.info("Configure Paragraph for user {}", user);
    if (newConfig == null || newConfig.isEmpty()) {
      LOGGER.warn("{} is trying to update paragraph {} of note {} with empty config", user, p.getId(), p.getNote().getId());
      throw new BadRequestException("paragraph config cannot be empty");
    }
    
    Map<String, Object> origConfig = p.getConfig();
    for (final Map.Entry<String, Object> entry : newConfig.entrySet()) {
      origConfig.put(entry.getKey(), entry.getValue());
    }
    
    p.setConfig(origConfig);
  }
  
}


