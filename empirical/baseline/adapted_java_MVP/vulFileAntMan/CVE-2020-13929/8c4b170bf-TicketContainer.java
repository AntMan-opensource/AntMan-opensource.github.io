package org.apache.zeppelin.ticket;
import java.util.Calendar;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class TicketContainer {
  private static final Logger LOGGER = LoggerFactory.getLogger(TicketContainer.class);
  private static class Entry {
    public final String ticket;
    public final long lastAccessTime;
    Entry(String ticket) {
      this.ticket = ticket;
      this.lastAccessTime = Calendar.getInstance().getTimeInMillis();
    }
    
  }
  
  private Map<String, Entry> sessions = new ConcurrentHashMap<>();
  public static final TicketContainer instance = new TicketContainer();
  public boolean isValid(String principal, String ticket) {
    if ("anonymous".equals(principal) && "anonymous".equals(ticket)){
      return true;
}
    Entry entry = sessions.get(principal);
    return entry != null && entry.ticket.equals(ticket);
  }
  
  public synchronized String getTicket(String principal) {
    Entry entry = sessions.get(principal);
    String ticket;
    if (entry == null) {
      if (principal.equals("anonymous")){
        ticket = "anonymous";
}
      else{
        ticket = UUID.randomUUID().toString();
}
    }
     else {
      ticket = entry.ticket;
    }
    
    entry = new Entry(ticket);
    sessions.put(principal, entry);
    return ticket;
  }
  
  public synchronized void removeTicket(String principal) {
    try {
      if (sessions.get(principal) != null) {
        sessions.remove(principal);
      }
      
    }
     catch (Exception e) {
      LOGGER.error("Error removing ticket", e);
    }
    
  }
  
}


