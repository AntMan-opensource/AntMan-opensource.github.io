package org.apache.jena.rdfxml.xmlinput.impl;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UTFDataFormatException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.apache.jena.rdfxml.xmlinput.FatalParsingErrorException ;
import org.apache.jena.rdfxml.xmlinput.SAX2RDF ;
import org.apache.jena.shared.JenaException;
import org.apache.jena.util.CharEncoding ;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
public class RDFXMLParser extends XMLHandler {
    private XMLReader saxParser;
    private String readerXMLEncoding = null;
    private String xmlEncoding = null;
    protected RDFXMLParser(XMLReader rdr) {
        super();
        saxParser = rdr;
        try {
            SAX2RDF.installHandlers(rdr, this);
        }
         catch (SAXException e) {
            throw new RuntimeException("Supposedly impossible:", e);
        }
        
    }
    
    public XMLReader getSAXParser() {
        return saxParser;
    }
    
    private static SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
    public static RDFXMLParser create() {
        try { 
            SAXParser saxParser = saxParserFactory.newSAXParser();
            XMLReader xmlreader = saxParser.getXMLReader();
            RDFXMLParser a = new RDFXMLParser(xmlreader);
            a.setEncoding("UTF");
            return a;
        }
         catch (Exception ex) {
            throw new JenaException("Failed to create an RDFXMLParser", ex);
        }
        
    }
    
    public void parse(InputSource input) throws IOException, SAXException {
        parse(input, input.getSystemId());
    }
    
    synchronized public void parse(InputSource input, String base) throws IOException, SAXException {
        initParse(base,"");
        SAX2RDF.installHandlers(saxParser, this);
        initEncodingChecks(input);
        try {
            saxParser.parse(input);
        }
         
        catch (UTFDataFormatException e) {
                generalError(ERR_UTF_ENCODING, e);
        }
         
        catch (IOException e) {
                generalError(ERR_GENERIC_IO, e);
        }
         
        catch (WrappedException wrapped) {
            wrapped.throwMe();
        }
        
        catch (FatalParsingErrorException e) {
        }
        
        finally {
            afterParse();
        }
        
    }
    
    private void initEncodingChecks(InputSource in) {
        Reader rdr = in.getCharacterStream();
        readerXMLEncoding = null;
        encodingProblems = false;
        if (rdr != null && rdr instanceof InputStreamReader) {
            String javaEnc = ((InputStreamReader) rdr).getEncoding();
            readerXMLEncoding = CharEncoding.create(javaEnc).name();
        }
        
    }
    
    protected void setEncoding(String original) throws SAXParseException {
        CharEncoding encodingInfo = CharEncoding.create(original);
        String e = encodingInfo.name();
        if (xmlEncoding == null) {
            if (e.equals("UTF") && readerXMLEncoding != null && readerXMLEncoding.startsWith("UTF")) {
                xmlEncoding = readerXMLEncoding;
                return;
            }
            
            xmlEncoding = e;
            if (readerXMLEncoding != null && !readerXMLEncoding.equalsIgnoreCase(e)) {
                warning(null, WARN_ENCODING_MISMATCH, "Encoding on InputStreamReader or FileReader does not match that of XML document. Use FileInputStream. [" + readerXMLEncoding + " != " + e + "]");
                encodingProblems = true;
            }
            
            if (e.equals("UTF")){
                return;
}
            if (!encodingInfo.isIANA()) {
                warning(null,encodingInfo.isInNIO() ? WARN_NON_IANA_ENCODING : WARN_UNSUPPORTED_ENCODING, encodingInfo .warningMessage());
            }
             else if (!original.equalsIgnoreCase(e)) {
                warning(null,WARN_NONCANONICAL_IANA_NAME, "The encoding \"" + original + "\" is not the canonical name at IANA, suggest \"" + e + "\" would give more interoperability.");
            }
            
        }
        
    }
    
}


