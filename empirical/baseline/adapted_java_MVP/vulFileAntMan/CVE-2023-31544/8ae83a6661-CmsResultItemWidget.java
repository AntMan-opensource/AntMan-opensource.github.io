package org.opencms.ade.galleries.client.ui;
import org.opencms.ade.galleries.client.ui.css.I_CmsLayoutBundle;
import org.opencms.ade.galleries.shared.CmsResultItemBean;
import org.opencms.gwt.client.CmsCoreProvider;
import org.opencms.gwt.client.dnd.I_CmsDragHandle;
import org.opencms.gwt.client.dnd.I_CmsDraggable;
import org.opencms.gwt.client.ui.CmsListItemWidget;
import org.opencms.gwt.client.ui.input.CmsLabel.I_TitleGenerator;
import org.opencms.gwt.client.util.CmsClientStringUtil;
import org.opencms.gwt.client.util.CmsToolTipHandler;
import org.opencms.gwt.shared.CmsAdditionalInfoBean;
import org.opencms.gwt.shared.CmsListInfoBean;
import com.google.gwt.user.client.ui.HTML;
public class CmsResultItemWidget extends CmsListItemWidget {
    public class ImageTile extends HTML implements I_CmsDragHandle {
        private I_CmsDraggable m_draggable;
        public ImageTile(String content) {
            super(content);
        }
        
        public I_CmsDraggable getDraggable() {
            return m_draggable;
        }
        
        public void setDraggable(I_CmsDraggable draggable) {
            m_draggable = draggable;
        }
        
    }
    
    private static final String IMAGE_SCALE_PARAM = "?__scale=t:1,c:ffffff,r:0";
    private boolean m_hasTileView;
    private ImageTile m_imageTile;
    private CmsToolTipHandler m_tooltipHandler;
    public CmsResultItemWidget(CmsResultItemBean infoBean, boolean showPath) {
        super(infoBean);
        if (showPath) {
            setSubtitleLabel(infoBean.getPath());
            setSubtitleTitle(infoBean.getSubTitle());
        }
         else {
            setSubtitleTitle(infoBean.getPath());
        }
        
        if (CmsResultsTab.isImagelikeType(infoBean.getType())) {
            m_hasTileView = true;
            String src = infoBean.getViewLink();
            if (src == null) {
                src = CmsCoreProvider.get().link(infoBean.getPath());
            }
            
            String timeParam = "&time=" + System.currentTimeMillis();
            ImageTile imageTile = new ImageTile("<img src=\"" + src + getBigImageScaleParam() + timeParam + "\" class=\"" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImage() + "\" />" + "<img src=\"" + src + getSmallImageScaleParam(infoBean) + timeParam + "\" class=\"" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImage() + "\" />" + "<div class='" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().expiredImageOverlay() + "' />");
            imageTile.setStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().imageTile());
            if (CmsClientStringUtil.checkIsPathOrLinkToSvg(infoBean.getPath())) {
                imageTile.addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().svg());
            }
            
            m_imageTile = imageTile;
            m_tooltipHandler = new CmsToolTipHandler(imageTile, generateTooltipHtml(infoBean));
            m_contentPanel.insert(imageTile, 0);
        }
        
    }
    
    public ImageTile getImageTile() {
        return m_imageTile;
    }
    
    public boolean hasTileView() {
        return m_hasTileView;
    }
    
    public void setSubtitleTitle(final String subtitleTitle) {
        m_subtitle.setTitle(subtitleTitle);
        m_subtitle.setTitleGenerator(new I_TitleGenerator() {
            public String getTitle(String originalText) {
                return subtitleTitle;
            }
            
        }
        
);
    }
    
    protected void onDetach() {
        if (m_tooltipHandler != null) {
            m_tooltipHandler.clearShowing();
        }
        
        super.onDetach();
    }
    
    private String generateTooltipHtml(CmsListInfoBean infoBean) {
        StringBuffer result = new StringBuffer();
        result.append("<p><b>").append(CmsClientStringUtil.shortenString(infoBean.getTitle(), 70)).append("</b></p>");
        if (infoBean.hasAdditionalInfo()) {
            for (CmsAdditionalInfoBean additionalInfo : infoBean.getAdditionalInfo()) {
                result.append("<p>").append(additionalInfo.getName()).append(":&nbsp;");
                result.append(CmsClientStringUtil.shortenString(additionalInfo.getValue(), 45)).append("</p>");
            }
            
        }
        
        return result.toString();
    }
    
    private String getBigImageScaleParam() {
        return IMAGE_SCALE_PARAM + ",w:" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageWidth() + ",h:" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageHeight();
    }
    
    private String getSmallImageScaleParam(CmsResultItemBean infoBean) {
        String result = null;
        if (infoBean.getDimension() != null) {
            String[] sizes = infoBean.getDimension().split("x");
            try {
                int width = Integer.parseInt(sizes[0].trim());
                int height = Integer.parseInt(sizes[1].trim());
                if ((I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageWidth() > width) || (I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageHeight() > height)) {
                    result = IMAGE_SCALE_PARAM + ",w:" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImageWidth() + ",h:" + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImageHeight();
                }
                
            }
             catch (Exception e) {
            }
            
        }
        
        if (result == null) {
            result = getBigImageScaleParam();
        }
        
        return result;
    }
    
}


