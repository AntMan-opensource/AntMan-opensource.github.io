package org.eclipse.lemminx.utils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.eclipse.lemminx.utils.platform.Platform;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
public class FilesUtils {
	public static final String FILE_SCHEME = "file://";
	public static final String LEMMINX_WORKDIR_KEY = "lemminx.workdir";
	private static String cachePathSetting = null;
	private static Pattern uriSchemePattern = Pattern.compile("^([a-zA-Z\\-]+:\\/\\/).*");
	private static Pattern endFilePattern = Pattern.compile(".*[\\\\\\/]\\.[\\S]+");
	public static String getCachePathSetting() {
		return cachePathSetting;
	}
	
	public static void setCachePathSetting(String cachePathSetting) {
		if (StringUtils.isEmpty(cachePathSetting)) {
			FilesUtils.cachePathSetting = null;
		}
		 else {
			FilesUtils.cachePathSetting = cachePathSetting;
		}
		
		resetDeployPath();
	}
	
	private FilesUtils() {
	}
	
	public static Supplier<Path> DEPLOYED_BASE_PATH;
	static {
		resetDeployPath();
	}
	
	 public static void resetDeployPath() {
		DEPLOYED_BASE_PATH = Suppliers.memoize(() -> getDeployedBasePath());
	}
	
	 public static String normalizePath(String pathString) {
		if (pathString != null && !pathString.isEmpty()) {
			if (pathString.indexOf("~") == 0) {
				pathString = System.getProperty("user.home") + (pathString.length() > 1 ? pathString.substring(1) : "");
			}
			
			pathString = pathString.replace("/", File.separator);
			pathString = pathString.replace("\\", File.separator);
			Path p = Paths.get(pathString);
			pathString = p.normalize().toString();
			return pathString;
		}
		
		return null;
	}
	
	private static Path getDeployedBasePath() {
		String dir = System.getProperty(LEMMINX_WORKDIR_KEY);
		if (dir != null) {
			return Paths.get(dir);
		}
		
		if (cachePathSetting != null && !cachePathSetting.isEmpty()) {
			return Paths.get(cachePathSetting);
		}
		
		dir = System.getProperty("user.home");
		if (dir == null) {
			dir = System.getProperty("user.dir");
		}
		
		if (dir == null) {
			dir = "";
		}
		
		return getPath(dir).resolve(".lemminx");
	}
	
	 public static Path getDeployedPath(Path path) throws IOException {
		return DEPLOYED_BASE_PATH.get().resolve(path);
	}
	
	 public static void saveToFile(InputStream in, Path outFile) throws IOException {
		saveToFile(IOUtils.convertStreamToString(in), outFile);
	}
	
	 public static void saveToFile(String content, Path outFile) throws IOException {
		if (!Files.exists(outFile.getParent())) {
			Files.createDirectories(outFile.getParent());
		}
		
		try (Writer writer = Files.newBufferedWriter(outFile, StandardCharsets.UTF_8)) {
			writer.write(content);
		}
		
		 outFile.toFile().setExecutable(false);
	}
	
	public static int getOffsetAfterScheme(String uri) {
		Matcher m = uriSchemePattern.matcher(uri);
		if (m.matches()) {
			return m.group(1).length();
		}
		
		return -1;
	}
	
	 public static String getFilePathSlash(String text) {
		if (text.contains("\\")) {
			return "\\";
		}
		
		return "/";
	}
	
	 public static String convertToWindowsPath(String pathString) {
		String pathSlash = getFilePathSlash(pathString);
		if (pathString.startsWith(pathSlash)) {
			if (pathString.length() > 3) {
				char letter = pathString.charAt(1);
				char colon = pathString.charAt(2);
				if (Character.isLetter(letter) && ':' == colon) {
					pathString = pathString.substring(1);
				}
				
			}
			
		}
		
		return pathString.replace("/", "\\");
	}
	
	public static boolean pathEndsWithFile(String pathString) {
		Matcher m = endFilePattern.matcher(pathString);
		return m.matches();
	}
	
	public static boolean isIncludedInDeployedPath(Path resourceCachePath) {
		return resourceCachePath.normalize().startsWith(DEPLOYED_BASE_PATH.get());
	}
	
	 public static String removeFileScheme(String fileURI) {
		return removeFileScheme(fileURI, false);
	}
	
	private static String removeFileScheme(String fileURI, boolean removeLastSlash) {
		int index = fileURI.indexOf(FILE_SCHEME);
		if (index != -1) {
			index = index + FILE_SCHEME.length() - 1;
			if (removeLastSlash && index + 1 < fileURI.length() && fileURI.charAt(index + 1) == '/') {
				index++;
			}
			
			fileURI = fileURI.substring(index + 1, fileURI.length());
		}
		
		return fileURI;
	}
	
	 public static File toFile(String fileUri) {
		String convertedUri = fileUri.replace("file:///", "file:/"); 
		convertedUri = convertedUri.replace("file://", "file:/"); 
		return new File(URI.create(convertedUri));
	}
	
	 public static Path getPath(String uri) {
		 uri = removeFileScheme(uri, Platform.isWindows);
		try {
			 uri = URLDecoder.decode(uri, StandardCharsets.UTF_8.name());
		}
		 catch (UnsupportedEncodingException e) {
			 }
			 
		return Paths.get(uri);
	}
	
	 public static String encodePath(String path) {
		return path.replace(" ", "%20");
	}
	
}


