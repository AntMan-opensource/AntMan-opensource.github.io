package org.apache.wiki.plugin;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.oro.text.GlobCompiler;
import org.apache.oro.text.regex.MalformedPatternException;
import org.apache.oro.text.regex.Pattern;
import org.apache.oro.text.regex.PatternCompiler;
import org.apache.oro.text.regex.PatternMatcher;
import org.apache.oro.text.regex.Perl5Matcher;
import org.apache.wiki.api.core.Context;
import org.apache.wiki.api.exceptions.PluginException;
import org.apache.wiki.api.plugin.Plugin;
import org.apache.wiki.util.TextUtil;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;
public class Denounce implements Plugin {
    private static final Logger log = LogManager.getLogger(Denounce.class);
    public static final String PARAM_LINK = "link";
    public static final String PARAM_TEXT = "text";
    private static final String PROPERTYFILE = "org/apache/wiki/plugin/denounce.properties";
    private static final String PROP_AGENTPATTERN   = "denounce.agentpattern.";
    private static final String PROP_HOSTPATTERN    = "denounce.hostpattern.";
    private static final String PROP_REFERERPATTERN = "denounce.refererpattern.";
    private static final String PROP_DENOUNCETEXT   = "denounce.denouncetext";
    private static final ArrayList<Pattern> c_refererPatterns = new ArrayList<>();
    private static final ArrayList<Pattern> c_agentPatterns   = new ArrayList<>();
    private static final ArrayList<Pattern> c_hostPatterns    = new ArrayList<>();
    private static String    c_denounceText    = "";
    static {
        try {
            final PatternCompiler compiler = new GlobCompiler();
            final ClassLoader loader = Denounce.class.getClassLoader();
            final InputStream in = loader.getResourceAsStream( PROPERTYFILE );
            if( in == null ) {
                throw new IOException("No property file found! (Check the installation, it should be there.)");
            }
            
            final Properties props = new Properties();
            props.load( in );
            c_denounceText = props.getProperty( PROP_DENOUNCETEXT, c_denounceText );
            for( final Enumeration< ? > e = props.propertyNames(); e.hasMoreElements(); ) {
                final String name = (String) e.nextElement();
                try {
                    if( name.startsWith( PROP_REFERERPATTERN ) ) {
                        c_refererPatterns.add( compiler.compile( props.getProperty(name) ) );
                    }
                    
                    else if( name.startsWith( PROP_AGENTPATTERN ) ){
                        c_agentPatterns.add( compiler.compile( props.getProperty(name) ) );
                    }
                    
                    else if( name.startsWith( PROP_HOSTPATTERN ) ){
                        c_hostPatterns.add( compiler.compile( props.getProperty(name) ) );
                    }
                    
                }
                
                catch( final MalformedPatternException ex ) {
                    log.error( "Malformed URL pattern in "+PROPERTYFILE+": "+props.getProperty(name), ex );
                }
                
            }
            
            log.debug("Added "+c_refererPatterns.size()+c_agentPatterns.size()+c_hostPatterns.size()+" crawlers to denounce list.");
        }
        
        catch( final IOException e ) {
            log.error( "Unable to load URL patterns from "+PROPERTYFILE, e );
        }
        
        catch( final Exception e ) {
            log.error( "Unable to initialize Denounce plugin", e );
        }
        
    }
    
    public String execute( final Context context, final Map<String, String> params ) throws PluginException {
        final String link = params.get( PARAM_LINK );
        String text = params.get( PARAM_TEXT );
        boolean linkAllowed = true;
        if( link == null ) {
            throw new PluginException("Denounce: No parameter "+PARAM_LINK+" defined!");
        }
        
        final HttpServletRequest request = context.getHttpRequest();
        if( request != null ) {
            linkAllowed = !matchHeaders( request );
        }
        
        if( text == null ) text = link;
        if( linkAllowed ) {
            return "<a href=\""+link+"\">"+ TextUtil.replaceEntities(text) +"</a>";
        }
        
        return c_denounceText;
    }
    
    private boolean matchPattern( final List< Pattern > list, final String path ) {
        final PatternMatcher matcher = new Perl5Matcher();
        for( final Pattern pattern : list ) {
            if( matcher.matches( path, pattern ) ) {
                return true;
            }
            
        }
        
        return false;
    }
    
    private boolean matchHeaders( final HttpServletRequest request ) {
        final String userAgent = request.getHeader("User-Agent");
        if( userAgent != null && matchPattern( c_agentPatterns, userAgent ) ) {
            log.debug("Matched user agent "+userAgent+" for denounce.");
            return true;
        }
        
        final String refererPath = request.getHeader("Referer");
        if( refererPath != null && matchPattern( c_refererPatterns, refererPath ) ) {
            log.debug("Matched referer "+refererPath+" for denounce.");
            return true;
        }
        
        final String host = request.getRemoteHost();
        if( host != null && matchPattern( c_hostPatterns, host ) ) {
            log.debug("Matched host "+host+" for denounce.");
            return true;
        }
        
        return false;
    }
    
}


