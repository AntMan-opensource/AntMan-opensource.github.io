package uk.ac.ed.ph.qtiworks.services;
import uk.ac.ed.ph.qtiworks.QtiWorksRuntimeException;
import uk.ac.ed.ph.qtiworks.domain.entities.AssessmentPackage;
import uk.ac.ed.ph.qtiworks.domain.entities.AssessmentPackageImportType;
import uk.ac.ed.ph.qtiworks.services.domain.AssessmentPackageDataImportException;
import uk.ac.ed.ph.qtiworks.services.domain.AssessmentPackageDataImportException.ImportFailureReason;
import uk.ac.ed.ph.jqtiplus.internal.util.Assert;
import uk.ac.ed.ph.jqtiplus.node.AssessmentObjectType;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.ContentPackageResource;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.ImsManifestException;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.QtiContentPackageExtractor;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.QtiContentPackageSummary;
import uk.ac.ed.ph.jqtiplus.xmlutils.XmlResourceNotFoundException;
import java.io.EOFException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipInputStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import com.google.common.io.ByteStreams;
public class AssessmentPackageFileImporter {
    private static final Logger logger = LoggerFactory.getLogger(AssessmentPackageFileImporter.class);
    private static final String STANDALONE_XML_IMPORT_FILE_NAME = "qti.xml";
    public AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory, final MultipartFile multipartFile) throws AssessmentPackageDataImportException {
        Assert.notNull(importSandboxDirectory, "importSandboxDirectory");
        Assert.notNull(multipartFile, "multipartFile");
        AssessmentPackage assessmentPackage = null;
        final String contentType = ServiceUtilities.computeContentType(multipartFile);
        if ("application/xml".equals(contentType) || "text/xml".equals(contentType) || contentType.endsWith("+xml")) {
            logger.debug("Import data uses a known XML MIME type {} so saving to {} and treating as XML", contentType, importSandboxDirectory);
            assessmentPackage = importStandaloneXml(importSandboxDirectory, multipartFile);
        }
        
        else {
            final boolean zipSuccess = tryUnpackZipFile(importSandboxDirectory, multipartFile);
            if (zipSuccess) {
                logger.debug("Import data was successfully expanded as a ZIP file");
                assessmentPackage = processUnpackedZip(importSandboxDirectory);
            }
            
            else {
                logger.warn("Import data with MIME type {} was neither a supported XML MIME type nor a ZIP file (containing at least one entry)", contentType);
                throw new AssessmentPackageDataImportException(ImportFailureReason.NOT_XML_OR_ZIP);
            }
            
        }
        
        logger.info("Successfully imported data for new {}", assessmentPackage);
        return assessmentPackage;
    }
    
    private AssessmentPackage importStandaloneXml(final File importSandboxDirectory, final MultipartFile multipartFile) {
        final File resultFile = new File(importSandboxDirectory, STANDALONE_XML_IMPORT_FILE_NAME);
        try {
            multipartFile.transferTo(resultFile);
        }
        
        catch (final IOException e) {
            throw QtiWorksRuntimeException.unexpectedException(e);
        }
        
        final AssessmentPackage assessmentPackage = new AssessmentPackage();
        assessmentPackage.setAssessmentType(AssessmentObjectType.ASSESSMENT_ITEM);
        assessmentPackage.setImportType(AssessmentPackageImportType.STANDALONE_ITEM_XML);
        assessmentPackage.setAssessmentHref(STANDALONE_XML_IMPORT_FILE_NAME);
        assessmentPackage.setSandboxPath(importSandboxDirectory.getAbsolutePath());
        assessmentPackage.setQtiFileHrefs(new HashSet<String>(Arrays.asList(STANDALONE_XML_IMPORT_FILE_NAME)));
        return assessmentPackage;
    }
    
    private boolean tryUnpackZipFile(final File importSandboxDirectory, final MultipartFile multipartFile) {
        ZipEntry zipEntry = null;
        InputStream inputStream = null;
        ZipInputStream zipInputStream = null;
        boolean foundEntry = false;
        try {
            inputStream = ServiceUtilities.ensureInputSream(multipartFile);
            zipInputStream = new ZipInputStream(inputStream);
            while ((zipEntry = zipInputStream.getNextEntry()) != null) {
                foundEntry = true;
                final File destFile = new File(importSandboxDirectory, zipEntry.getName());
                if (!zipEntry.isDirectory()) {
                    ServiceUtilities.ensureFileCreated(destFile);
                    final FileOutputStream destOutputStream = new FileOutputStream(destFile);
                    try {
                        ByteStreams.copy(zipInputStream, destOutputStream);
                    }
                    
                    finally {
                        ServiceUtilities.ensureClose(destOutputStream);
                    }
                    
                    zipInputStream.closeEntry();
                }
                
            }
            
        }
        
        catch (final EOFException e) {
            return false;
        }
        
        catch (final ZipException e) {
            return false;
        }
        
        catch (final IOException e) {
            throw QtiWorksRuntimeException.unexpectedException(e);
        }
        
        finally {
            ServiceUtilities.ensureClose(zipInputStream, inputStream);
        }
        
        return foundEntry;
    }
    
    private AssessmentPackage processUnpackedZip(final File importSandboxDirectory) throws AssessmentPackageDataImportException {
        final QtiContentPackageExtractor contentPackageExtractor = new QtiContentPackageExtractor(importSandboxDirectory);
        QtiContentPackageSummary contentPackageSummary;
        try {
            contentPackageSummary = contentPackageExtractor.parse();
        }
        
        catch (final XmlResourceNotFoundException e) {
            throw new AssessmentPackageDataImportException(ImportFailureReason.NOT_CONTENT_PACKAGE, e);
        }
        
        catch (final ImsManifestException e) {
            throw new AssessmentPackageDataImportException(ImportFailureReason.BAD_IMS_MANIFEST, e);
        }
        
        logger.trace("Submitted content package was successfully parsed as {}", contentPackageSummary);
        final int testCount = contentPackageSummary.getTestResources().size();
        final int itemCount = contentPackageSummary.getItemResources().size();
        final AssessmentPackage assessmentPackage = new AssessmentPackage();
        assessmentPackage.setImportType(AssessmentPackageImportType.CONTENT_PACKAGE);
        assessmentPackage.setSandboxPath(importSandboxDirectory.getAbsolutePath());
        if (testCount==1) {
            logger.debug("Package contains 1 test resource, so treating this as an AssessmentTest");
            assessmentPackage.setAssessmentType(AssessmentObjectType.ASSESSMENT_TEST);
            assessmentPackage.setAssessmentHref(checkPackageFile(importSandboxDirectory, contentPackageSummary.getTestResources().get(0).getHref()));
        }
        
        else if (testCount==0 && itemCount==1) {
            logger.debug("Package contains 1 item resource and no test resources, so treating this as an AssessmentItem");
            assessmentPackage.setAssessmentType(AssessmentObjectType.ASSESSMENT_ITEM);
            assessmentPackage.setAssessmentHref(checkPackageFile(importSandboxDirectory, contentPackageSummary.getItemResources().get(0).getHref()));
        }
        
        else {
            logger.debug("Package contains {} items and {} tests. Don't know how to deal with this", itemCount, testCount);
            throw new AssessmentPackageDataImportException(ImportFailureReason.UNSUPPORTED_PACKAGE_CONTENTS, itemCount, testCount);
        }
        
        final Set<String> packageQtiFileBuilder = new HashSet<String>();
        final Set<String> packageSafeFileBuilder = new HashSet<String>();
        buildPackageFileMap(importSandboxDirectory, packageQtiFileBuilder, packageSafeFileBuilder, contentPackageSummary.getItemResources());
        buildPackageFileMap(importSandboxDirectory, packageQtiFileBuilder, packageSafeFileBuilder, contentPackageSummary.getTestResources());
        assessmentPackage.setQtiFileHrefs(packageQtiFileBuilder);
        assessmentPackage.setSafeFileHrefs(packageSafeFileBuilder);
        return assessmentPackage;
    }
    
    private void buildPackageFileMap(final File importSandboxDirectory, final Set<String> packageQtiFileBuilder, final Set<String> packageSafeFileBuilder, final List<ContentPackageResource> qtiResources) throws AssessmentPackageDataImportException {
        for (final ContentPackageResource qtiResource : qtiResources) {
            final List<URI> fileHrefs = qtiResource.getFileHrefs();
            boolean isFirst = true;
            for (final URI fileHref : fileHrefs) {
                final String fileHrefString = checkPackageFile(importSandboxDirectory, fileHref);
                if (isFirst) {
                    packageQtiFileBuilder.add(fileHrefString);
                }
                
                else {
                    packageSafeFileBuilder.add(fileHrefString);
                }
                
                isFirst = false;
            }
            
        }
        
    }
    
    private String checkPackageFile(final File importSandboxDirectory, final URI href) throws AssessmentPackageDataImportException {
        final String hrefString = href.toString();
        final URI sandboxUri = importSandboxDirectory.toURI();
        final URI resolvedFileUri = sandboxUri.resolve(href);
        if (!resolvedFileUri.toString().startsWith(sandboxUri.toString())) {
            throw new AssessmentPackageDataImportException(ImportFailureReason.HREF_OUTSIDE_PACKAGE, hrefString);
        }
        
        final File resolvedFile = new File(resolvedFileUri);
        if (!resolvedFile.exists()) {
            throw new AssessmentPackageDataImportException(ImportFailureReason.FILE_MISSING, hrefString);
        }
        
        return hrefString;
    }
    
}


