package org.xwiki.rendering.internal.parser;
import java.io.StringReader;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Provider;
import javax.inject.Singleton;
import org.xwiki.component.annotation.Component;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.parser.ContentParser;
import org.xwiki.rendering.parser.MissingParserException;
import org.xwiki.rendering.parser.ParseException;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.syntax.Syntax;
public class DefaultContentParser implements ContentParser {
    private Provider<ComponentManager> componentManagerProvider;
    private EntityReferenceSerializer<String> serializer;
    public XDOM parse(String content, Syntax syntax) throws ParseException, MissingParserException {
        return getParser(syntax).parse(new StringReader(content == null ? "" : content));
    }
    
    public XDOM parse(String content, Syntax syntax, EntityReference source) throws ParseException, MissingParserException {
        XDOM xdom = parse(content, syntax);
        if (source != null) {
            xdom.getMetaData().addMetaData(MetaData.SOURCE, serializer.serialize(source));
        }
        
        return xdom;
    }
    
    private Parser getParser(Syntax syntax) throws MissingParserException {
        try {
            return this.componentManagerProvider.get().getInstance(Parser.class, syntax.toIdString());
        }
         catch (ComponentLookupException e) {
            throw new MissingParserException(syntax, e);
        }
        
    }
    
}


