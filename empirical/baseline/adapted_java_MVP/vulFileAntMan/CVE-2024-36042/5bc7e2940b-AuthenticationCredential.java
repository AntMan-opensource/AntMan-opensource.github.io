package org.silverpeas.core.security.authentication;
import org.silverpeas.core.security.authentication.exception.AuthenticationException;
import org.silverpeas.kernel.bundle.ResourceLocator;
import org.silverpeas.kernel.bundle.SettingBundle;
import org.silverpeas.kernel.util.StringUtil;
import org.silverpeas.kernel.annotation.Defined;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import static java.util.Optional.ofNullable;
public class AuthenticationCredential {
  private final SettingBundle authenticationSettings = ResourceLocator.getSettingBundle( "org.silverpeas.authentication.settings.authenticationSettings");
  private final Map<String, Serializable> capabilities = new HashMap<>();
  private String login;
  private String password;
  private String domainId;
  private AuthenticationCredential() {
  }
  
  public static AuthenticationCredential newWithAsLogin(@Defined String login) throws AuthenticationException {
    StringUtil.requireDefined(login, () -> new AuthenticationException("The user login isn't defined!"));
    AuthenticationCredential credential = new AuthenticationCredential();
    credential.setLogin(login);
    return credential;
  }
  
  public AuthenticationCredential withAsPassword(String password) {
    setPassword(password);
    return this;
  }
  
  public AuthenticationCredential withAsDomainId(String domainId) {
    setDomainId(domainId);
    return this;
  }
  
  public String getLogin() {
    return login;
  }
  
  public String getPassword() {
    return password;
  }
  
  public String getDomainId() {
    return domainId;
  }
  
  public Map<String, Serializable> getCapabilities() {
    return capabilities;
  }
  
  public boolean loginIgnoreCase() {
    return ofNullable(getDomainId()).filter(StringUtil::isDefined) .map(d -> authenticationSettings.getString("loginIgnoreCaseOnUserAuthentication.domain" + d, null)) .filter(StringUtil::isDefined) .map(StringUtil::getBooleanValue) .orElseGet( () -> authenticationSettings.getBoolean("loginIgnoreCaseOnUserAuthentication.default", false));
  }
  
  private void setLogin(String login) {
    this.login = login;
  }
  
  public void setPassword(String password) {
    this.password = password;
  }
  
  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }
  
  public boolean isPasswordSet() {
    return this.password != null;
  }
  
}


