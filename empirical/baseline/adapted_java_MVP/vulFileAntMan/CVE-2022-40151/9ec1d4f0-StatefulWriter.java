package com.thoughtworks.xstream.io;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import com.thoughtworks.xstream.core.util.FastStack;
public class StatefulWriter extends WriterWrapper {
    public static int STATE_OPEN = 0;
    public static int STATE_NODE_START = 1;
    public static int STATE_VALUE = 2;
    public static int STATE_NODE_END = 3;
    public static int STATE_CLOSED = 4;
    private transient int state = STATE_OPEN;
    private transient int balance;
    private transient FastStack<Set<String>> attributes;
    public StatefulWriter(final HierarchicalStreamWriter wrapped) {
        super(wrapped);
        attributes = new FastStack<>(16);
    }
    
    public void startNode(final String name) {
        startNodeCommon();
        super.startNode(name);
    }
    
    public void startNode(final String name, final Class<?> clazz) {
        startNodeCommon();
        super.startNode(name, clazz);
    }
    
    private void startNodeCommon() {
        checkClosed();
        if (state == STATE_VALUE) {
            throw new StreamException(new IllegalStateException("Opening node after writing text"));
        }
        
        state = STATE_NODE_START; ++balance;
        attributes.push(new HashSet<String>());
    }
    
    public void addAttribute(final String name, final String value) {
        checkClosed();
        if (state != STATE_NODE_START) {
            throw new StreamException(new IllegalStateException("Writing attribute '" + name + "' without an opened node"));
        }
        
        final Set<String> currentAttributes = attributes.peek();
        if (currentAttributes.contains(name)) {
            throw new StreamException(new IllegalStateException("Writing attribute '" + name + "' twice"));
        }
        
        currentAttributes.add(name);
        super.addAttribute(name, value);
    }
    
    public void setValue(final String text) {
        checkClosed();
        if (state != STATE_NODE_START) {
            throw new StreamException(new IllegalStateException("Writing text without an opened node"));
        }
        
        state = STATE_VALUE;
        super.setValue(text);
    }
    
    public void endNode() {
        checkClosed();
        if (balance-- == 0) {
            throw new StreamException(new IllegalStateException("Unbalanced node"));
        }
        
        attributes.popSilently();
        state = STATE_NODE_END;
        super.endNode();
    }
    
    public void flush() {
        checkClosed();
        super.flush();
    }
    
    public void close() {
        if (state != STATE_NODE_END && state != STATE_OPEN) {
        }
        
        state = STATE_CLOSED;
        super.close();
    }
    
    private void checkClosed() {
        if (state == STATE_CLOSED) {
            throw new StreamException(new IOException("Writing on a closed stream"));
        }
        
    }
    
    public int state() {
        return state;
    }
    
    private Object readResolve() {
        attributes = new FastStack<>(16);
        return this;
    }
    
}


