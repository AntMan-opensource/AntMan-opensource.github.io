package com.thoughtworks.xstream.mapper;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.thoughtworks.xstream.security.AnyTypePermission;
import com.thoughtworks.xstream.security.ForbiddenClassException;
import com.thoughtworks.xstream.security.NoTypePermission;
import com.thoughtworks.xstream.security.TypePermission;
public class SecurityMapper extends MapperWrapper {
    private final List<TypePermission> permissions;
    public SecurityMapper(final Mapper wrapped) {
        this(wrapped, (TypePermission[])null);
    }
    
    public SecurityMapper(final Mapper wrapped, final TypePermission... permissions) {
        super(wrapped);
        this.permissions = permissions == null  ? new ArrayList<TypePermission>() : new ArrayList<TypePermission>(Arrays.asList(permissions));
    }
    
    public void addPermission(final TypePermission permission) {
        if (permission.equals(NoTypePermission.NONE) || permission.equals(AnyTypePermission.ANY)) {
            permissions.clear();
        }
        
        permissions.add(0, permission);
    }
    
    public Class<?> realClass(final String elementName) {
        final Class<?> type = super.realClass(elementName);
        for (final TypePermission permission : permissions) {
            if (permission.allows(type)) {
                return type;
            }
            
        }
        
        throw new ForbiddenClassException(type);
    }
    
}


