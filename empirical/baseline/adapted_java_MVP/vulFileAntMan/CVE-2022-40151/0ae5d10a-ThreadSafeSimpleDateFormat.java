package com.thoughtworks.xstream.core.util;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
public class ThreadSafeSimpleDateFormat {
    private final String formatString;
    private final Pool<DateFormat> pool;
    private final TimeZone timeZone;
    public ThreadSafeSimpleDateFormat( final String format, final TimeZone timeZone, final int initialPoolSize, final int maxPoolSize, final boolean lenient) {
        this(format, timeZone, Locale.ENGLISH, initialPoolSize, maxPoolSize, lenient);
    }
    
    public ThreadSafeSimpleDateFormat( final String format, final TimeZone timeZone, final Locale locale, final int initialPoolSize, final int maxPoolSize, final boolean lenient) {
        formatString = format;
        this.timeZone = timeZone;
        pool = new Pool<DateFormat>(initialPoolSize, maxPoolSize, new Pool.Factory<DateFormat>() {
            public SimpleDateFormat newInstance() {
                final SimpleDateFormat dateFormat = new SimpleDateFormat(formatString, locale);
                dateFormat.setLenient(lenient);
                return dateFormat;
            }
            
        }
        
);
    }
    
    public String format(final Date date) {
        final DateFormat format = fetchFromPool();
        try {
            return format.format(date);
        }
         finally {
            pool.putInPool(format);
        }
        
    }
    
    public Date parse(final String date) throws ParseException {
        final DateFormat format = fetchFromPool();
        try {
            return format.parse(date);
        }
         finally {
            pool.putInPool(format);
        }
        
    }
    
    private DateFormat fetchFromPool() {
        final DateFormat format = pool.fetchFromPool();
        final TimeZone tz = timeZone != null ? timeZone : TimeZone.getDefault();
        if (!tz.equals(format.getTimeZone())) {
            format.setTimeZone(tz);
        }
        
        return format;
    }
    
    public String toString() {
        return formatString;
    }
    
}


