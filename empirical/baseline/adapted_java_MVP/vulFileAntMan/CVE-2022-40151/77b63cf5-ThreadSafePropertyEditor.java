package com.thoughtworks.xstream.core.util;
import java.beans.PropertyEditor;
import com.thoughtworks.xstream.converters.ConversionException;
import com.thoughtworks.xstream.converters.ErrorWritingException;
import com.thoughtworks.xstream.converters.reflection.ObjectAccessException;
public class ThreadSafePropertyEditor {
    private final Class<? extends PropertyEditor> editorType;
    private final Pool<PropertyEditor> pool;
    public ThreadSafePropertyEditor( final Class<? extends PropertyEditor> type, final int initialPoolSize, final int maxPoolSize) {
        if (!PropertyEditor.class.isAssignableFrom(type)) {
            throw new IllegalArgumentException(type.getName() + " is not a " + PropertyEditor.class.getName());
        }
        
        editorType = type;
        pool = new Pool<PropertyEditor>(initialPoolSize, maxPoolSize, new Pool.Factory<PropertyEditor>() {
            public PropertyEditor newInstance() {
                ErrorWritingException ex = null;
                try {
                    return editorType.newInstance();
                }
                 catch (final InstantiationException e) {
                    ex = new ConversionException("Faild to call default constructor", e);
                }
                 catch (final IllegalAccessException e) {
                    ex = new ObjectAccessException("Cannot call default constructor", e);
                }
                
                ex.add("construction-type", editorType.getName());
                throw ex;
            }
            
        }
        
);
    }
    
    public String getAsText(final Object object) {
        final PropertyEditor editor = fetchFromPool();
        try {
            editor.setValue(object);
            return editor.getAsText();
        }
         finally {
            pool.putInPool(editor);
        }
        
    }
    
    public Object setAsText(final String str) {
        final PropertyEditor editor = fetchFromPool();
        try {
            editor.setAsText(str);
            return editor.getValue();
        }
         finally {
            pool.putInPool(editor);
        }
        
    }
    
    private PropertyEditor fetchFromPool() {
        return pool.fetchFromPool();
    }
    
}


