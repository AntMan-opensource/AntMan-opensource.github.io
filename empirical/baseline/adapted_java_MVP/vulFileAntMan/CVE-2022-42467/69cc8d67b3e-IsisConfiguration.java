package org.apache.isis.core.config;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.activation.DataSource;
import javax.inject.Named;
import javax.validation.Constraint;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.Payload;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.validation.annotation.Validated;
import org.apache.isis.applib.IsisModuleApplib;
import org.apache.isis.applib.annotation.ActionLayout;
import org.apache.isis.applib.annotation.Introspection.IntrospectionPolicy;
import org.apache.isis.applib.annotation.LabelPosition;
import org.apache.isis.applib.annotation.PromptStyle;
import org.apache.isis.applib.services.i18n.Mode;
import org.apache.isis.applib.services.iactn.Execution;
import org.apache.isis.applib.services.publishing.spi.EntityChangesSubscriber;
import org.apache.isis.applib.services.publishing.spi.EntityPropertyChangeSubscriber;
import org.apache.isis.applib.services.userreg.EmailNotificationService;
import org.apache.isis.applib.services.userreg.UserRegistrationService;
import org.apache.isis.applib.services.userui.UserMenu;
import org.apache.isis.applib.value.semantics.TemporalValueSemantics.TemporalEditingPattern;
import org.apache.isis.commons.internal.base._NullSafe;
import org.apache.isis.commons.internal.context._Context;
import org.apache.isis.core.config.metamodel.facets.DefaultViewConfiguration;
import org.apache.isis.core.config.metamodel.facets.EditingObjectsConfiguration;
import org.apache.isis.core.config.metamodel.facets.PublishingPolicies.ActionPublishingPolicy;
import org.apache.isis.core.config.metamodel.facets.PublishingPolicies.EntityChangePublishingPolicy;
import org.apache.isis.core.config.metamodel.facets.PublishingPolicies.PropertyPublishingPolicy;
import org.apache.isis.core.config.metamodel.services.ApplicationFeaturesInitConfiguration;
import org.apache.isis.core.config.metamodel.specloader.IntrospectionMode;
import org.apache.isis.core.config.viewer.web.DialogMode;
import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;
import lombok.Value;
import lombok.val;
public class IsisConfiguration {
    public static final String ROOT_PREFIX = "isis";
    private final ConfigurableEnvironment environment;
    public IsisConfiguration(final ConfigurableEnvironment environment) {
        this.environment = environment;
    }
    
    private final Security security = new Security();
    public static class Security {
        private final Shiro shiro = new Shiro();
        public static class Shiro {
            private boolean autoLogoutIfAlreadyAuthenticated = false;
        }
        
        private final Spring spring = new Spring();
        public static class Spring {
            private boolean allowCsrfFilters = false;
        }
        
        private final Keycloak keycloak = new Keycloak();
        public static class Keycloak {
            private String realm;
            private String baseUrl;
            private String loginSuccessUrl = "/wicket";
        }
        
    }
    
    private final Applib applib = new Applib();
    public static class Applib {
        private final Annotation annotation = new Annotation();
        public static class Annotation {
            private final DomainObject domainObject = new DomainObject();
            public interface ConfigPropsForPropertyOrParameterLayout {
                LabelPosition getLabelPosition();
            }
            
            public static class DomainObject {
                private EntityChangePublishingPolicy entityChangePublishing = EntityChangePublishingPolicy.NONE;
                private EditingObjectsConfiguration editing = EditingObjectsConfiguration.FALSE;
                private final CreatedLifecycleEvent createdLifecycleEvent = new CreatedLifecycleEvent();
                public static class CreatedLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
                private final LoadedLifecycleEvent loadedLifecycleEvent = new LoadedLifecycleEvent();
                public static class LoadedLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
                private final PersistingLifecycleEvent persistingLifecycleEvent = new PersistingLifecycleEvent();
                public static class PersistingLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
                private final PersistedLifecycleEvent persistedLifecycleEvent = new PersistedLifecycleEvent();
                public static class PersistedLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
                private final RemovingLifecycleEvent removingLifecycleEvent = new RemovingLifecycleEvent();
                public static class RemovingLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
                private final UpdatedLifecycleEvent updatedLifecycleEvent = new UpdatedLifecycleEvent();
                public static class UpdatedLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
                private final UpdatingLifecycleEvent updatingLifecycleEvent = new UpdatingLifecycleEvent();
                public static class UpdatingLifecycleEvent {
                    private boolean postForDefault = true;
                }
                
            }
            
            private final DomainObjectLayout domainObjectLayout = new DomainObjectLayout();
            public static class DomainObjectLayout {
                private int paged = 25;
                private final CssClassUiEvent cssClassUiEvent = new CssClassUiEvent();
                public static class CssClassUiEvent {
                    private boolean postForDefault = false;
                }
                
                private final IconUiEvent iconUiEvent = new IconUiEvent();
                public static class IconUiEvent {
                    private boolean postForDefault = false;
                }
                
                private final LayoutUiEvent layoutUiEvent = new LayoutUiEvent();
                public static class LayoutUiEvent {
                    private boolean postForDefault = false;
                }
                
                private final TitleUiEvent titleUiEvent = new TitleUiEvent();
                public static class TitleUiEvent {
                    private boolean postForDefault = false;
                }
                
            }
            
            private final Action action = new Action();
            public static class Action {
                private ActionPublishingPolicy commandPublishing = ActionPublishingPolicy.NONE;
                private ActionPublishingPolicy executionPublishing = ActionPublishingPolicy.NONE;
                private final DomainEvent domainEvent = new DomainEvent();
                public static class DomainEvent {
                    private boolean postForDefault = true;
                }
                
            }
            
            private final ActionLayout actionLayout = new ActionLayout();
            public static class ActionLayout {
                private final CssClass cssClass = new CssClass();
                public static class CssClass {
                    private String[] patterns = {
                                    "delete.*:btn-danger", "discard.*:btn-warning", "remove.*:btn-warning"};
                    @Getter(lazy = true)
                    private final Map<Pattern, String> patternsAsMap = asMap(getPatterns());
                }
                
                private final CssClassFa cssClassFa = new CssClassFa();
                public static class CssClassFa {
                    private String[] patterns = {
                            "add.*:fa-plus-square", "all.*:fa-list", "approve.*:fa-thumbs-o-up", "assign.*:fa-hand-o-right", "calculate.*:fa-calculator", "cancel.*:fa-stop", "categorise.*:fa-folder-open-o", "change.*:fa-edit", "clear.*:fa-remove", "copy.*:fa-copy", "create.*:fa-plus", "decline.*:fa-thumbs-o-down", "delete.*:fa-trash", "discard.*:fa-trash-o", "download.*:fa-download", "edit.*:fa-edit", "execute.*:fa-bolt", "export.*:fa-download", "first.*:fa-star", "find.*:fa-search", "install.*:fa-wrench", "list.*:fa-list", "import.*:fa-upload", "lookup.*:fa-search", "maintain.*:fa-edit", "move.*:fa-exchange", "new.*:fa-plus", "next.*:fa-step-forward", "pause.*:fa-pause", "previous.*:fa-step-backward", "refresh.*:fa-sync", "remove.*:fa-minus-square", "renew.*:fa-redo", "reset.*:fa-redo", "resume.*:fa-play", "run.*:fa-bolt", "save.*:fa-floppy-o", "search.*:fa-search", "stop.*:fa-stop", "suspend.*:fa-pause", "switch.*:fa-exchange", "terminate.*:fa-stop", "update.*:fa-edit", "upload.*:fa-upload", "verify.*:fa-check-circle", "view.*:fa-search"};
                    @Getter(lazy = true)
                    private final Map<Pattern, String> patternsAsMap = asMap(getPatterns());
                }
                
            }
            
            private final Property property = new Property();
            public static class Property {
                private PropertyPublishingPolicy commandPublishing = PropertyPublishingPolicy.NONE;
                private PropertyPublishingPolicy executionPublishing = PropertyPublishingPolicy.NONE;
                private final DomainEvent domainEvent = new DomainEvent();
                public static class DomainEvent {
                    private boolean postForDefault = true;
                }
                
            }
            
            private final PropertyLayout propertyLayout = new PropertyLayout();
            public static class PropertyLayout implements Applib.Annotation.ConfigPropsForPropertyOrParameterLayout {
                private LabelPosition labelPosition = LabelPosition.NOT_SPECIFIED;
            }
            
            private final Collection collection = new Collection();
            public static class Collection {
                private final DomainEvent domainEvent = new DomainEvent();
                public static class DomainEvent {
                    private boolean postForDefault = true;
                }
                
            }
            
            private final CollectionLayout collectionLayout = new CollectionLayout();
            public static class CollectionLayout {
                private DefaultViewConfiguration defaultView = DefaultViewConfiguration.TABLE;
                private int paged = 12;
            }
            
            private final ViewModel viewModel = new ViewModel();
            public static class ViewModel {
                private final Validation validation = new Validation();
                public static class Validation {
                    private final SemanticChecking semanticChecking = new SemanticChecking();
                    public static class SemanticChecking {
                        private boolean enable = false;
                    }
                    
                }
                
            }
            
            private final ViewModelLayout viewModelLayout = new ViewModelLayout();
            public static class ViewModelLayout {
                private final CssClassUiEvent cssClassUiEvent = new CssClassUiEvent();
                public static class CssClassUiEvent {
                    private boolean postForDefault =true;
                }
                
                private final IconUiEvent iconUiEvent = new IconUiEvent();
                public static class IconUiEvent {
                    private boolean postForDefault =true;
                }
                
                private final LayoutUiEvent layoutUiEvent = new LayoutUiEvent();
                public static class LayoutUiEvent {
                    private boolean postForDefault =true;
                }
                
                private final TitleUiEvent titleUiEvent = new TitleUiEvent();
                public static class TitleUiEvent {
                    private boolean postForDefault =true;
                }
                
            }
            
            private final ParameterLayout parameterLayout = new ParameterLayout();
            public static class ParameterLayout implements Applib.Annotation.ConfigPropsForPropertyOrParameterLayout {
                private LabelPosition labelPosition = LabelPosition.NOT_SPECIFIED;
            }
            
        }
        
    }
    
    private final Core core = new Core();
    public static class Core {
        private final Config config = new Config();
        public static class Config {
            public static enum ConfigurationPropertyVisibilityPolicy {
                NEVER_SHOW, SHOW_ONLY_IN_PROTOTYPE, ALWAYS_SHOW }
            private ConfigurationPropertyVisibilityPolicy configurationPropertyVisibilityPolicy = ConfigurationPropertyVisibilityPolicy.SHOW_ONLY_IN_PROTOTYPE;
        }
        
        private final MetaModel metaModel = new MetaModel();
        public static class MetaModel {
            private boolean filterVisibility = true;
            private final ProgrammingModel programmingModel = new ProgrammingModel();
            public static class ProgrammingModel {
                private boolean ignoreDeprecated = false;
            }
            
            private final Introspector introspector = new Introspector();
            public static class Introspector {
                private IntrospectionPolicy policy;
                public IntrospectionPolicy getPolicy() {
                    return Optional.ofNullable(policy) .orElse(IntrospectionPolicy.ANNOTATION_OPTIONAL);
                }
                
                private boolean parallelize = false; 
                private IntrospectionMode mode = IntrospectionMode.LAZY_UNLESS_PRODUCTION;
                private boolean lockAfterFullIntrospection = true;
                private boolean validateIncrementally = true;
            }
            
            private final Validator validator = new Validator();
            public static class Validator {
                private boolean parallelize = true;
                private boolean allowDeprecated = true;
                private boolean actionCollectionParameterChoices = true;
                private boolean explicitLogicalTypeNames = false;
                private final JaxbViewModel jaxbViewModel = new JaxbViewModel();
                public static class JaxbViewModel {
                    private boolean notAbstract = true;
                    private boolean notInnerClass = true;
                    private boolean noArgConstructor = false;
                    private boolean referenceTypeAdapter = true;
                    private boolean dateTimeTypeAdapter = true;
                }
                
                private final Jdoql jdoql = new Jdoql();
                public static class Jdoql {
                    private boolean fromClause = true;
                    private boolean variablesClause = true;
                }
                
            }
            
        }
        
        private final Runtime runtime = new Runtime();
        public static class Runtime {
            private Optional<String> locale = Optional.empty();
            private String timezone;
        }
        
        private final RuntimeServices runtimeServices = new RuntimeServices();
        public static class RuntimeServices {
            private final Email email = new Email();
            public static class Email {
                private int port = 587;
                private int socketConnectionTimeout = 2000;
                private int socketTimeout = 2000;
                private boolean throwExceptionOnFail = true;
                private final Override override = new Override();
                public static class Override {
                    private String to;
                    private String cc;
                    private String bcc;
                }
                
                private final Sender sender = new Sender();
                public static class Sender {
                    private String hostname;
                    private String username;
                    private String password;
                    private String address;
                }
                
                private final Tls tls = new Tls();
                public static class Tls {
                    private boolean enabled = true;
                }
                
            }
            
            private final ApplicationFeatures applicationFeatures = new ApplicationFeatures();
            public static class ApplicationFeatures {
                ApplicationFeaturesInitConfiguration init = ApplicationFeaturesInitConfiguration.NOT_SPECIFIED;
            }
            
            private final RepositoryService repositoryService = new RepositoryService();
            public static class RepositoryService {
                private boolean disableAutoFlush = false;
            }
            
            private final ExceptionRecognizer exceptionRecognizer = new ExceptionRecognizer();
            public static class ExceptionRecognizer {
                private final Dae dae = new Dae();
                public static class Dae {
                    private boolean disable = false;
                }
                
            }
            
            private final Translation translation = new Translation();
            public static class Translation {
                private final Po po = new Po();
                private String resourceLocation = null;
                public static class Po {
                    Mode mode = Mode.WRITE;
                }
                
            }
            
        }
        
    }
    
    private final Persistence persistence = new Persistence();
    public static class Persistence {
        private final Schema schema = new Schema();
        public static class Schema {
            private final List<String> autoCreateSchemas = new ArrayList<>();
            private final List<String> additionalOrmFiles = new ArrayList<>();
            private String createSchemaSqlTemplate = "CREATE SCHEMA IF NOT EXISTS %S";
        }
        
    }
    
    private final Viewer viewer = new Viewer();
    public static class Viewer {
        private final Restfulobjects restfulobjects = new Restfulobjects();
        public static class Restfulobjects {
            private final Authentication authentication = new Authentication();
            public static class Authentication {
                private Optional<String> strategyClassName = Optional.empty();
            }
            
            private boolean honorUiHints = false;
            private boolean objectPropertyValuesOnly = false;
            private boolean strictAcceptChecking = false;
            private boolean suppressDescribedByLinks = false;
            private boolean suppressMemberDisabledReason = false;
            private boolean suppressMemberExtensions = false;
            private boolean suppressMemberId = false;
            private boolean suppressMemberLinks = false;
            private boolean suppressUpdateLink = false;
            private Optional<String> baseUri = Optional.empty();
        }
        
        private final Wicket wicket = new Wicket();
        public static class Wicket {
            private String app = "org.apache.isis.viewer.wicket.viewer.wicketapp.IsisWicketApplication";
            private boolean ajaxDebugMode = false;
            @javax.validation.constraints.Pattern(regexp="^[/](.*[/]|)$") @NotNull @NotEmpty private String basePath = "/wicket/";
            private boolean clearOriginalDestination = false;
            private DialogMode dialogMode = DialogMode.SIDEBAR;
            private DialogMode dialogModeForMenu = DialogMode.MODAL;
            private Optional<String> liveReloadUrl = Optional.empty();
            private int maxTitleLengthInTables = 12;
            private static boolean isMaxTitleLenghtValid(final int len) {
                return len>=0;
            }
            
            private int asTitleLenght(final int len) {
                return isMaxTitleLenghtValid(len) ? len : getMaxTitleLengthInTables();
            }
            
            private int maxTitleLengthInParentedTables = -1;
            public int getMaxTitleLengthInParentedTables() {
                return asTitleLenght(maxTitleLengthInParentedTables);
            }
            
            public void setMaxTitleLengthInParentedTables(final int val) {
                maxTitleLengthInParentedTables = val;
            }
            
            private int maxTitleLengthInStandaloneTables = -1;
            public int getMaxTitleLengthInStandaloneTables() {
                return asTitleLenght(maxTitleLengthInStandaloneTables);
            }
            
            public void setMaxTitleLengthInStandaloneTables(final int val) {
                maxTitleLengthInStandaloneTables = val;
            }
            
            private PromptStyle promptStyle = PromptStyle.INLINE;
            private boolean redirectEvenIfSameObject = false;
            private boolean replaceDisabledTagWithReadonlyTag = true;
            private boolean preventDoubleClickForFormSubmit = true;
            private boolean preventDoubleClickForNoArgAction = true;
            private boolean showFooter = true;
            private boolean stripWicketTags = true;
            private boolean suppressSignUp = false;
            private boolean suppressPasswordReset = false;
            private boolean useIndicatorForFormSubmit = true;
            private boolean useIndicatorForNoArgAction = true;
            private boolean wicketSourcePlugin = false;
            private final Application application = new Application();
            public static class Application {
                private String about;
                private Optional<String> brandLogoHeader = Optional.empty();
                private Optional<String> brandLogoSignin = Optional.empty();
                private Optional<String> css = Optional.empty();
                private Optional<String> faviconUrl = Optional.empty();
                private Optional<String> js = Optional.empty();
                @NotNull @NotEmpty private String menubarsLayoutXml = "menubars.layout.xml";
                @NotNull @NotEmpty private String name = "Apache Isis ™";
                private String version;
            }
            
            private final BookmarkedPages bookmarkedPages = new BookmarkedPages();
            public static class BookmarkedPages {
                private boolean showChooser = true;
                private int maxSize = 15;
                private boolean showDropDownOnFooter = true;
            }
            
            private final Breadcrumbs breadcrumbs = new Breadcrumbs();
            public static class Breadcrumbs {
                private boolean enabled = true;
                private int maxParentChainLength = 64;
            }
            
            private List<Credit> credit = new ArrayList<>();
            public static class Credit {
                private String url;
                private String name;
                private String image;
                public boolean isDefined() { return (name != null || image != null) && url != null; }
            }
            
            private final DatePicker datePicker = new DatePicker();
            public static class DatePicker {
                @NotEmpty @NotNull private String minDate = "1900-01-01T00:00:00.000Z";
                @NotEmpty @NotNull private String maxDate = "2100-01-01T00:00:00.000Z";
            }
            
            private final DevelopmentUtilities developmentUtilities = new DevelopmentUtilities();
            public static class DevelopmentUtilities {
                private boolean enable = false;
            }
            
            private final RememberMe rememberMe = new RememberMe();
            public static class RememberMe {
                private boolean suppress = false;
                private String cookieKey = "isisWicketRememberMe";
                private Optional<String> encryptionKey = Optional.empty();
            }
            
            private final Themes themes = new Themes();
            public static class Themes {
                private List<String> enabled = listOf("Cosmo","Flatly","Darkly","Sandstone","United");
                @NotEmpty @NotNull private String initial = "Flatly";
                private boolean showChooser = false;
            }
            
            private final Welcome welcome = new Welcome();
            public static class Welcome {
                private String text;
            }
            
            private final MessagePopups messagePopups = new MessagePopups();
            public static class MessagePopups {
                Duration infoDelay = Duration.ofMillis(3500);
                Duration warningDelay = Duration.ofMillis(0);
                Duration errorDelay = Duration.ofMillis(0);
                int offset = 100;
                private final Placement placement = new Placement();
                public static class Placement {
                    public static enum Vertical {
                        TOP, BOTTOM }
                    public static enum Horizontal {
                        LEFT, RIGHT }
                    Vertical vertical = Vertical.TOP;
                    Horizontal horizontal = Horizontal.RIGHT;
                }
                
            }
            
        }
        
    }
    
    private final ValueTypes valueTypes = new ValueTypes();
    public static class ValueTypes {
        private final Temporal temporal = new Temporal();
        public static class Temporal {
            private final TemporalEditingPattern editing = new TemporalEditingPattern();
        }
        
    }
    
    private final Testing testing = new Testing();
    public static class Testing {
        private final Fixtures fixtures = new Fixtures();
        public static class Fixtures {
            private Class<?> initialScript = null;
            private final FixtureScriptsSpecification fixtureScriptsSpecification = new FixtureScriptsSpecification();
            public static class FixtureScriptsSpecification {
                private Class<?> contextClass = null;
                private String packagePrefix = null;
                public enum NonPersistedObjectsStrategy {
                    PERSIST, IGNORE }
                public enum MultipleExecutionStrategy {
                    EXECUTE_ONCE_BY_CLASS, EXECUTE_ONCE_BY_VALUE, EXECUTE;
                }
                
                private MultipleExecutionStrategy multipleExecutionStrategy = MultipleExecutionStrategy.EXECUTE_ONCE_BY_CLASS;
                private NonPersistedObjectsStrategy nonPersistedObjectsStrategy = NonPersistedObjectsStrategy.PERSIST;
                private Class<?> recreate = null;
                private Class<?> runScriptDefault = null;
            }
            
        }
        
    }
    
    private final Extensions extensions = new Extensions();
    public static class Extensions {
        private final Cors cors = new Cors();
        public static class Cors {
            private boolean allowCredentials = false;
            private List<String> allowedOrigins = listOf("*");
            private List<String> allowedHeaders = listOf( "Content-Type", "Accept", "Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", "Authorization", "Cache-Control", "If-Modified-Since", "Pragma");
            private List<String> allowedMethods = listOf("GET","PUT","DELETE","POST","OPTIONS");
            private List<String> exposedHeaders = listOf("Authorization");
        }
        
        private final Quartz quartz = new Quartz();
        public static class Quartz {
        }
        
        private final CommandLog commandLog = new CommandLog();
        public static class CommandLog {
            public enum PublishPolicy {
                ALWAYS, ONLY_IF_SYSTEM_CHANGED, ;
                public boolean isAlways() { return this == ALWAYS; }
                public boolean isOnlyIfSystemChanged() { return this == ONLY_IF_SYSTEM_CHANGED; }
            }
            
            @Getter @Setter private PublishPolicy publishPolicy = PublishPolicy.ALWAYS;
        }
        
        private final CommandReplay commandReplay = new CommandReplay();
        public static class CommandReplay {
            private final PrimaryAccess primaryAccess = new PrimaryAccess();
            public static class PrimaryAccess {
                private Optional<String> baseUrlRestful = Optional.empty();
                private Optional<String> user = Optional.empty();
                private Optional<String> password = Optional.empty();
                private Optional<String> baseUrlWicket = Optional.empty();
            }
            
            private final SecondaryAccess secondaryAccess = new SecondaryAccess();
            public static class SecondaryAccess {
                private Optional<String> baseUrlWicket = Optional.empty();
            }
            
            private Integer batchSize = 10;
            private final QuartzSession quartzSession = new QuartzSession();
            public static class QuartzSession {
                private String user = "isisModuleExtCommandReplaySecondaryUser";
                private List<String> roles = listOf("isisModuleExtCommandReplaySecondaryRole");
            }
            
            private final QuartzReplicateAndReplayJob quartzReplicateAndReplayJob = new QuartzReplicateAndReplayJob();
            public static class QuartzReplicateAndReplayJob {
                private long startDelay = 15000;
                private long repeatInterval = 10000;
            }
            
            private final Analyser analyser = new Analyser();
            public static class Analyser {
                private final Result result = new Result();
                public static class Result {
                    private boolean enabled = true;
                }
                
                private final Exception exception = new Exception();
                public static class Exception {
                    private boolean enabled = true;
                }
                
            }
            
        }
        
        private final Secman secman = new Secman();
        public static class Secman {
            private final Seed seed = new Seed();
            public static class Seed {
                public static final String ADMIN_USER_NAME_DEFAULT = "secman-admin";
                public static final String ADMIN_PASSWORD_DEFAULT = "pass";
                public static final String ADMIN_ROLE_NAME_DEFAULT = "isis-ext-secman-admin";
                public static final List<String> ADMIN_STICKY_NAMESPACE_PERMISSIONS_DEFAULT = Collections.unmodifiableList(listOf( IsisModuleApplib.NAMESPACE, IsisModuleApplib.NAMESPACE_SUDO, IsisModuleApplib.NAMESPACE_CONF, IsisModuleApplib.NAMESPACE_FEAT, "isis.security", "isis.ext.h2Console", "isis.ext.secman" ));
                public static final List<String> ADMIN_ADDITIONAL_NAMESPACE_PERMISSIONS = Collections.unmodifiableList(listOf());
                public static final String REGULAR_USER_ROLE_NAME_DEFAULT = "isis-ext-secman-user";
                public static final boolean AUTO_UNLOCK_IF_DELEGATED_AND_AUTHENTICATED_DEFAULT = false;
                private final Admin admin = new Admin();
                public static class Admin {
                    private String userName = ADMIN_USER_NAME_DEFAULT;
                    private String password = ADMIN_PASSWORD_DEFAULT;
                    private String roleName = ADMIN_ROLE_NAME_DEFAULT;
                    private final NamespacePermissions namespacePermissions = new NamespacePermissions();
                    public static class NamespacePermissions {
                        private List<String> sticky = ADMIN_STICKY_NAMESPACE_PERMISSIONS_DEFAULT;
                        @Getter @Setter private List<String> additional = ADMIN_ADDITIONAL_NAMESPACE_PERMISSIONS;
                    }
                    
                }
                
                private final RegularUser regularUser = new RegularUser();
                public static class RegularUser {
                    private String roleName = REGULAR_USER_ROLE_NAME_DEFAULT;
                }
                
            }
            
            private final DelegatedUsers delegatedUsers = new DelegatedUsers();
            public static class DelegatedUsers {
                public enum AutoCreatePolicy {
                    AUTO_CREATE_AS_LOCKED, AUTO_CREATE_AS_UNLOCKED, }
                @Getter @Setter private AutoCreatePolicy autoCreatePolicy = AutoCreatePolicy.AUTO_CREATE_AS_LOCKED;
            }
            
            public enum PermissionsEvaluationPolicy {
                ALLOW_BEATS_VETO, VETO_BEATS_ALLOW }
            private PermissionsEvaluationPolicy permissionsEvaluationPolicy = PermissionsEvaluationPolicy.ALLOW_BEATS_VETO;
            private final UserRegistration userRegistration = new UserRegistration();
            public static class UserRegistration {
                private final List<String> initialRoleNames = new ArrayList<>();
            }
            
            public enum UserMenuMeActionPolicy {
                HIDE, DISABLE, ENABLE }
            private UserMenuMeActionPolicy userMenuMeActionPolicy = UserMenuMeActionPolicy.HIDE;
        }
        
        private final SessionLog sessionLog = new SessionLog();
        public static class SessionLog {
            boolean autoLogoutOnRestart = true;
        }
        
    }
    
    private static List<String> listOf(final String ...values) {
        return new ArrayList<>(Arrays.asList(values));
    }
    
    @Value
    static class PatternToString {
        private final Pattern pattern;
        private final String string;
    }
    
    private static Map<Pattern, String> asMap(final String... mappings) {
        return new LinkedHashMap<>(_NullSafe.stream(mappings).map(mapping -> {
            final String[] parts = mapping.split(":");
            if (parts.length != 2) {
                return null;
            }
            
            try {
                return new PatternToString(Pattern.compile(parts[0], Pattern.CASE_INSENSITIVE), parts[1]);
            }
             catch(Exception ex) {
                return null;
            }
            
        }
).filter(Objects::nonNull) .collect(Collectors.toMap(PatternToString::getPattern, PatternToString::getString)));
    }
    
    @Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE })
    @Constraint(validatedBy = AssignableFromValidator.class)
    public @interface AssignableFrom {
        String value();
        String message() default "{org.apache.isis.core.config.IsisConfiguration.AssignableFrom.message}";
        Class<?>[] groups() default { };
        Class<? extends Payload>[] payload() default { };
    }
    
    public static class AssignableFromValidator implements ConstraintValidator<AssignableFrom, Class<?>> {
        private Class<?> superType;
        public void initialize(final AssignableFrom assignableFrom) {
            val className = assignableFrom.value();
            try {
                superType = _Context.loadClass(className);
            }
             catch (ClassNotFoundException e) {
                superType = null;
            }
            
        }
        
        public boolean isValid( final Class<?> candidateClass, final ConstraintValidatorContext constraintContext) {
            if (superType == null || candidateClass == null) {
                return true;
            }
            
            return superType.isAssignableFrom(candidateClass);
        }
        
    }
    
    @Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE })
    @Constraint(validatedBy = OneOfValidator.class)
    public @interface OneOf {
        String[] value();
        String message() default "{org.apache.isis.core.config.IsisConfiguration.OneOf.message}";
        Class<?>[] groups() default { };
        Class<? extends Payload>[] payload() default { };
    }
    
    public static class OneOfValidator implements ConstraintValidator<OneOf, String> {
        private List<String> allowed;
        public void initialize(final OneOf assignableFrom) {
            val value = assignableFrom.value();
            allowed = value != null? Collections.unmodifiableList(Arrays.asList(value)): Collections.emptyList();
        }
        
        public boolean isValid( final String candidateValue, final ConstraintValidatorContext constraintContext) {
            return allowed.contains(candidateValue);
        }
        
    }
    
}


