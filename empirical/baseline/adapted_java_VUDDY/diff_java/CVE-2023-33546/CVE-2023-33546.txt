commit a38d95247f669e11feb29c0dd8096051d35af1a4
Author: Arno Unkrig <aunkrig@users.noreply.github.com>
Date:   Thu Jun 15 11:18:56 2023 +0200

    Issue #201: A Stack overflow error
    Catch StackOverflowError in all relevant API methods 8e.g. "cook()" and "guessParameterNames()") and convert it into a CompileException.

diff --git a/commons-compiler-jdk/src/main/java/org/codehaus/commons/compiler/jdk/Compiler.java b/commons-compiler-jdk/src/main/java/org/codehaus/commons/compiler/jdk/Compiler.java
index e07acead..098b5fa4 100644
--- a/commons-compiler-jdk/src/main/java/org/codehaus/commons/compiler/jdk/Compiler.java
+++ b/commons-compiler-jdk/src/main/java/org/codehaus/commons/compiler/jdk/Compiler.java
@@ -374,9 +374,7 @@ class Compiler extends AbstractCompiler {
                 options,          // options
                 null,             // classes
                 sourceFileObjects // compilationUnits
-            ).call() || compileErrorCount[0] > 0) {
-                throw new CompileException("Compilation failed with " + compileErrorCount[0] + " errors", null);
-            }
+            ).call() && compileErrorCount[0] == 0) throw new CompileException("Compilation failed for an unknown reason", null);
         } catch (RuntimeException rte) {
 
             // Unwrap the compilation exception and throw it.
@@ -390,6 +388,10 @@ class Compiler extends AbstractCompiler {
             }
             throw rte;
         }
+
+        if (compileErrorCount[0] > 0) {
+            throw new CompileException("Compilation failed with " + compileErrorCount[0] + " errors", null);
+        }
     }
 
     private static String
diff --git a/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/CompilerTest.java b/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/CompilerTest.java
index 9b597f81..e1a52915 100644
--- a/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/CompilerTest.java
+++ b/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/CompilerTest.java
@@ -527,7 +527,11 @@ class CompilerTest {
                 @Override public void handleError(String message, @Nullable Location location) { count[0]++; }
             });
 
-            CompilerTest.assertUncompilable("Compilation failed with 1 errors|error.*while compiling", compiler, sourceFinder);
+            CompilerTest.assertUncompilable(
+                "Compilation failed with 1 errors|error.*while compiling|unknown reason",
+                compiler,
+                sourceFinder
+            );
             Assert.assertEquals(1, count[0]);
         }
     }
diff --git a/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/EvaluatorTest.java b/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/EvaluatorTest.java
index c3478fa3..1c1d4db5 100644
--- a/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/EvaluatorTest.java
+++ b/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/EvaluatorTest.java
@@ -287,7 +287,7 @@ class EvaluatorTest extends CommonsCompilerTestSuite {
                 @Override public void handleError(String message, @Nullable Location location) { count[0]++; }
             });
 
-            et.assertUncookable("failed with 1 errors|error.*while compiling");
+            et.assertUncookable("failed with 1 errors|error.*while compiling|unknown reason");
             Assert.assertTrue(count[0] > 0);
         }
     }
diff --git a/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/ReportedBugsTest.java b/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/ReportedBugsTest.java
index 59a2c649..420b59dc 100644
--- a/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/ReportedBugsTest.java
+++ b/commons-compiler-tests/src/test/java/org/codehaus/commons/compiler/tests/ReportedBugsTest.java
@@ -1674,4 +1674,25 @@ class ReportedBugsTest extends CommonsCompilerTestSuite {
             + "}\n"
         );
     }
+
+    @Test public void
+    testIssue201() throws Exception {
+
+        // That should be enough to cause a stack overflow:
+        String expression = ReportedBugsTest._nestedDoc(20000, "( ", ") ", "t");
+
+        ExpressionTest et = new ExpressionTest(expression);
+        et.setParameters(new String[] { "t" }, new Class[] { int.class });
+
+        et.assertUncookable("nested|unknown reason");
+    }
+
+    public static String
+    _nestedDoc(int nesting, String open, String close, String content) {
+        StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));
+        for (int i = 0; i < nesting; ++i) sb.append(open);
+        sb.append(content);
+        for (int i = 0; i < nesting; ++i) sb.append(close);
+        return sb.toString();
+    }
 }
diff --git a/commons-compiler-tests/src/test/java/util/CommonsCompilerTestSuite.java b/commons-compiler-tests/src/test/java/util/CommonsCompilerTestSuite.java
index 4bfc01a1..9db7429c 100644
--- a/commons-compiler-tests/src/test/java/util/CommonsCompilerTestSuite.java
+++ b/commons-compiler-tests/src/test/java/util/CommonsCompilerTestSuite.java
@@ -150,6 +150,8 @@ class CommonsCompilerTestSuite {
         @Override public void setCompileErrorHandler(ErrorHandler errorHandler) { this.expressionEvaluator.setCompileErrorHandler(errorHandler); }
         @Override public void setWarningHandler(WarningHandler warningHandler)  { this.expressionEvaluator.setWarningHandler(warningHandler);    }
 
+        public void setParameters(String[] parameterNames, Class<?>[] parameterTypes) { this.expressionEvaluator.setParameters(parameterNames, parameterTypes); }
+
         @Override protected void
         cook() throws Exception {
             this.expressionEvaluator.cook(this.expression);
diff --git a/janino/src/main/java/org/codehaus/janino/ClassBodyEvaluator.java b/janino/src/main/java/org/codehaus/janino/ClassBodyEvaluator.java
index 5cb6f027..53278611 100644
--- a/janino/src/main/java/org/codehaus/janino/ClassBodyEvaluator.java
+++ b/janino/src/main/java/org/codehaus/janino/ClassBodyEvaluator.java
@@ -269,6 +269,15 @@ class ClassBodyEvaluator extends Cookable implements IClassBodyEvaluator {
 
     public void
     cook(Scanner scanner) throws CompileException, IOException {
+        try {
+            this.cook2(scanner);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Script is nested too deeply", null, soe);
+        }
+    }
+
+    private void
+    cook2(Scanner scanner) throws CompileException, IOException {
 
         Parser parser = new Parser(scanner);
         parser.setSourceVersion(this.sourceVersion);
diff --git a/janino/src/main/java/org/codehaus/janino/Compiler.java b/janino/src/main/java/org/codehaus/janino/Compiler.java
index 40b9e641..d195d327 100644
--- a/janino/src/main/java/org/codehaus/janino/Compiler.java
+++ b/janino/src/main/java/org/codehaus/janino/Compiler.java
@@ -209,6 +209,15 @@ class Compiler extends AbstractCompiler {
 
     @Override public void
     compile(Resource[] sourceResources) throws CompileException, IOException {
+        try {
+            this.compile2(sourceResources);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Compilation unit is nested too deeply", null, soe);
+        }
+    }
+
+    private void
+    compile2(Resource[] sourceResources) throws CompileException, IOException {
 
         this.benchmark.beginReporting();
         try {
diff --git a/janino/src/main/java/org/codehaus/janino/ExpressionEvaluator.java b/janino/src/main/java/org/codehaus/janino/ExpressionEvaluator.java
index 4b3b8149..f60655e1 100644
--- a/janino/src/main/java/org/codehaus/janino/ExpressionEvaluator.java
+++ b/janino/src/main/java/org/codehaus/janino/ExpressionEvaluator.java
@@ -448,6 +448,15 @@ class ExpressionEvaluator extends MultiCookable implements IExpressionEvaluator
      */
     public final void
     cook(Parser... parsers) throws CompileException, IOException {
+        try {
+            this.cook2(parsers);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Expression is nested too deeply", null, soe);
+        }
+    }
+
+    private void
+    cook2(Parser... parsers) throws CompileException, IOException {
 
         int count = parsers.length;
         this.se.setScriptCount(count);
@@ -701,6 +710,15 @@ class ExpressionEvaluator extends MultiCookable implements IExpressionEvaluator
      */
     public static String[]
     guessParameterNames(Scanner scanner) throws CompileException, IOException {
+        try {
+            return ExpressionEvaluator.guessParameterNames2(scanner);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Expression is nested too deeply", null, soe);
+        }
+    }
+
+    private static String[]
+    guessParameterNames2(Scanner scanner) throws CompileException, IOException {
 
         Parser parser = new Parser(scanner);
 
diff --git a/janino/src/main/java/org/codehaus/janino/ScriptEvaluator.java b/janino/src/main/java/org/codehaus/janino/ScriptEvaluator.java
index d45f1f4e..9954ec93 100644
--- a/janino/src/main/java/org/codehaus/janino/ScriptEvaluator.java
+++ b/janino/src/main/java/org/codehaus/janino/ScriptEvaluator.java
@@ -683,6 +683,15 @@ class ScriptEvaluator extends MultiCookable implements IScriptEvaluator {
      */
     public final void
     cook(Parser[] parsers) throws CompileException, IOException {
+        try {
+            this.cook2(parsers);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Script is nested too deeply", null, soe);
+        }
+    }
+
+    private void
+    cook2(Parser[] parsers) throws CompileException, IOException {
 
         int count = parsers.length;
 
@@ -1306,6 +1315,15 @@ class ScriptEvaluator extends MultiCookable implements IScriptEvaluator {
      */
     public static String[]
     guessParameterNames(Scanner scanner) throws CompileException, IOException {
+        try {
+            return ScriptEvaluator.guessParameterNames2(scanner);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Script is nested too deeply", null, soe);
+        }
+    }
+
+    private static String[]
+    guessParameterNames2(Scanner scanner) throws CompileException, IOException {
 
         Parser parser = new Parser(scanner);
 
diff --git a/janino/src/main/java/org/codehaus/janino/SimpleCompiler.java b/janino/src/main/java/org/codehaus/janino/SimpleCompiler.java
index 8a7eb6c0..3ebaf02b 100644
--- a/janino/src/main/java/org/codehaus/janino/SimpleCompiler.java
+++ b/janino/src/main/java/org/codehaus/janino/SimpleCompiler.java
@@ -225,6 +225,15 @@ class SimpleCompiler extends Cookable implements ISimpleCompiler {
      */
     public void
     cook(Scanner scanner) throws CompileException, IOException {
+        try {
+            this.cook2(scanner);
+        } catch (StackOverflowError soe) {
+            throw new CompileException("Compilation unit is nested too deeply", null, soe);
+        }
+    }
+
+    private void
+    cook2(Scanner scanner) throws CompileException, IOException {
 
         Parser parser = new Parser(scanner);
         parser.setSourceVersion(this.sourceVersion);
