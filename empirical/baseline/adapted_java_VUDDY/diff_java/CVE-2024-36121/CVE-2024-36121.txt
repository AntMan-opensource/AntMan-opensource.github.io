commit ee93b421c02156e1e55a1787df48ac31059da6e5
Author: Greg Rubin <SalusaSecondus@users.noreply.github.com>
Date:   Tue Jun 4 08:00:56 2024 -0700

    Merge pull request from GHSA-g762-h86w-8749
    
    * Fix integer overflow in nonce calculation
    
    * Guarantee nonce remains bad after overflow
    
    ---------
    
    Co-authored-by: Greg Rubin <ga_rubin@apple.com>

diff --git a/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLAEADContext.java b/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLAEADContext.java
index 9662bd7..36acf56 100644
--- a/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLAEADContext.java
+++ b/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLAEADContext.java
@@ -34,7 +34,8 @@ final class BoringSSLAEADContext extends BoringSSLCryptoContext implements AEADC
         }
 
         @Override
-        int execute(long ctx, ByteBufAllocator alloc, long ad, int adLen, long in, int inLen, long out, int outLen) {
+        int execute(long ctx, ByteBufAllocator alloc, long ad, int adLen, long in, int inLen, long out, int outLen)
+                throws CryptoException {
             int result = BoringSSL.EVP_AEAD_CTX_seal(
                     ctx, out, outLen, nonce.computeNext(alloc), nonce.length(), in, inLen, ad, adLen);
             if (result >= 0) {
@@ -51,7 +52,8 @@ final class BoringSSLAEADContext extends BoringSSLCryptoContext implements AEADC
         }
 
         @Override
-        int execute(long ctx, ByteBufAllocator alloc, long ad, int adLen, long in, int inLen, long out, int outLen) {
+        int execute(long ctx, ByteBufAllocator alloc, long ad, int adLen, long in, int inLen, long out, int outLen)
+                throws CryptoException {
             int result = BoringSSL.EVP_AEAD_CTX_open(
                     ctx, out, outLen, nonce.computeNext(alloc), nonce.length(), in, inLen, ad, adLen);
             if (result >= 0) {
@@ -95,22 +97,32 @@ final class BoringSSLAEADContext extends BoringSSLCryptoContext implements AEADC
     private static final class Nonce {
         private final int nonceLen;
         private final byte[] baseNonce;
+        private final long maxNonce;
 
         private ByteBuf nonce;
         private long nonceAddress;
-        private int seq;
+        private long seq;
 
         Nonce(byte[] baseNonce) {
             this.baseNonce = baseNonce.clone();
             this.nonceLen = baseNonce.length;
+            this.maxNonce = nonceLen >= Long.BYTES ? Long.MAX_VALUE : (1L << (8 * nonceLen)) - 1L;
         }
 
         int length() {
             return nonceLen;
         }
 
-        void incrementSequence() {
+        void incrementSequence() throws CryptoException {
+            if (seq >= maxNonce) {
+                throw new CryptoException("Message limit reached");
+            }
             seq++;
+            if (seq == 0) {
+                // decrement so we will throw the exception again on next call
+                seq--;
+                throw new CryptoException("Nonce overflow");
+            }
         }
 
         /**
diff --git a/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLCryptoOperation.java b/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLCryptoOperation.java
index d32d603..b158f3b 100644
--- a/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLCryptoOperation.java
+++ b/codec-ohttp-hpke-classes-boringssl/src/main/java/io/netty/incubator/codec/hpke/boringssl/BoringSSLCryptoOperation.java
@@ -17,6 +17,7 @@ package io.netty.incubator.codec.hpke.boringssl;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
+import io.netty.incubator.codec.hpke.CryptoException;
 
 /**
  * Abstract base class to perform native crypto operations via BoringSSL.
@@ -35,7 +36,8 @@ abstract class BoringSSLCryptoOperation {
      * @param out   the buffer for writing into.
      * @return      {@code true} if successful, {@code false} otherwise.
      */
-    final boolean execute(long ctx, ByteBufAllocator alloc, ByteBuf aad, ByteBuf in, ByteBuf out) {
+    final boolean execute(long ctx, ByteBufAllocator alloc, ByteBuf aad, ByteBuf in, ByteBuf out)
+            throws CryptoException {
         ByteBuf directAad = null;
         ByteBuf directIn = null;
         ByteBuf directOut = null;
@@ -78,7 +80,7 @@ abstract class BoringSSLCryptoOperation {
     abstract int maxOutLen(long ctx, int inReadable);
 
     abstract int execute(long ctx, ByteBufAllocator alloc,
-                         long ad, int adLen, long in, int inLen, long out, int outLen);
+                         long ad, int adLen, long in, int inLen, long out, int outLen) throws CryptoException;
 
     private static ByteBuf directReadable(ByteBufAllocator alloc, ByteBuf in) {
         if (in.isDirect()) {
