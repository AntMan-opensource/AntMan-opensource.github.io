commit 4b7b29d3469dc020ec61a387c0c793c1f1ac31dd
Author: Jesse Glick <jglick@cloudbees.com>
Date:   Tue May 9 12:40:48 2023 -0400

    SECURITY-3123
    
    (cherry picked from commit 4c90bcddc7df7b85364490a312eaee051b02949f)

diff --git a/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterDefinition.java b/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterDefinition.java
index 4c03ad7..255be46 100644
--- a/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterDefinition.java
+++ b/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterDefinition.java
@@ -25,22 +25,32 @@
 package io.jenkins.plugins.file_parameters;
 
 import hudson.cli.CLICommand;
+import hudson.model.Failure;
 import hudson.model.ParameterDefinition;
 import hudson.model.ParameterValue;
+import hudson.util.FormValidation;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Base64;
 import javax.servlet.ServletException;
+import jenkins.model.Jenkins;
 import net.sf.json.JSONObject;
 import org.apache.commons.fileupload.FileItem;
 import org.apache.commons.fileupload.FileUploadBase;
+import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 
 abstract class AbstractFileParameterDefinition extends ParameterDefinition {
 
     protected AbstractFileParameterDefinition(String name) {
         super(name);
+        Jenkins.checkGoodName(name);
+    }
+
+    protected Object readResolve() {
+        Jenkins.checkGoodName(getName());
+        return this;
     }
 
     protected abstract Class<? extends AbstractFileParameterValue> valueType();
@@ -74,7 +84,7 @@ abstract class AbstractFileParameterDefinition extends ParameterDefinition {
             }
             src.delete();
             p.setDescription(getDescription());
-            p.filename = src.getName();
+            p.setFilename(src.getName());
             return p;
         } catch (ServletException | IOException x) {
             throw new RuntimeException(x);
@@ -94,4 +104,17 @@ abstract class AbstractFileParameterDefinition extends ParameterDefinition {
         return p;
     }
 
+    protected static abstract class AbstractFileParameterDefinitionDescriptor extends ParameterDescriptor {
+
+        public FormValidation doCheckName(@QueryParameter String name) {
+            try {
+                Jenkins.checkGoodName(name);
+                return FormValidation.ok();
+            } catch (Failure x) {
+                return FormValidation.error(x.getMessage());
+            }
+        }
+
+    }
+
 }
diff --git a/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterValue.java b/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterValue.java
index 667d92a..5b419fc 100644
--- a/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterValue.java
+++ b/src/main/java/io/jenkins/plugins/file_parameters/AbstractFileParameterValue.java
@@ -30,6 +30,7 @@ import hudson.EnvVars;
 import hudson.FilePath;
 import hudson.Launcher;
 import hudson.Util;
+import hudson.model.Failure;
 import hudson.model.ParameterValue;
 import hudson.model.Run;
 import hudson.model.TaskListener;
@@ -37,6 +38,7 @@ import java.io.FilterInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import jenkins.model.Jenkins;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;
 import org.kohsuke.stapler.AncestorInPath;
@@ -47,12 +49,27 @@ import org.kohsuke.stapler.StaplerResponse;
  */
 public abstract class AbstractFileParameterValue extends ParameterValue {
 
-    @CheckForNull public String filename;
+    private @CheckForNull String filename;
 
     protected AbstractFileParameterValue(String name) {
         super(name);
     }
 
+    public final String getFilename() {
+        return filename;
+    }
+
+    final void setFilename(String filename) {
+        try {
+            Jenkins.checkGoodName(filename);
+            this.filename = filename;
+        } catch (Failure x) {
+            // Ignore and leave the filename undefined.
+            // FileItem.getName Javadoc claims Opera might pass a full path.
+            // This is a best effort anyway (scripts should be written to tolerate an undefined name).
+        }
+    }
+
     protected InputStream open(@CheckForNull Run<?,?> build) throws IOException, InterruptedException {
         assert Util.isOverridden(AbstractFileParameterValue.class, getClass(), "createTempFile", Run.class, FilePath.class, EnvVars.class, Launcher.class, TaskListener.class);
         if (build == null) {
@@ -93,8 +110,9 @@ public abstract class AbstractFileParameterValue extends ParameterValue {
     
     @Override public void buildEnvironment(Run<?, ?> build, EnvVars env) {
         super.buildEnvironment(build, env);
-        if (filename != null) {
-            env.put(name + "_FILENAME", filename);
+        String fname = getFilename();
+        if (fname != null) {
+            env.put(name + "_FILENAME", fname);
         }
     }
 
diff --git a/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterDefinition.java b/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterDefinition.java
index 07e35d8..3772a5e 100644
--- a/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterDefinition.java
+++ b/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterDefinition.java
@@ -25,7 +25,6 @@
 package io.jenkins.plugins.file_parameters;
 
 import hudson.Extension;
-import hudson.model.ParameterDefinition;
 import java.io.IOException;
 import java.io.InputStream;
 import org.jenkinsci.Symbol;
@@ -48,7 +47,7 @@ public final class Base64FileParameterDefinition extends AbstractFileParameterDe
     // TODO equals/hashCode
 
     @Symbol("base64File")
-    @Extension public static final class DescriptorImpl extends ParameterDefinition.ParameterDescriptor {
+    @Extension public static final class DescriptorImpl extends AbstractFileParameterDefinitionDescriptor {
         
         @Override public String getDisplayName() {
             return "Base64 File Parameter";
diff --git a/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterValue.java b/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterValue.java
index b275e34..dc86dff 100644
--- a/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterValue.java
+++ b/src/main/java/io/jenkins/plugins/file_parameters/Base64FileParameterValue.java
@@ -47,7 +47,7 @@ public final class Base64FileParameterValue extends AbstractFileParameterValue {
 
     @DataBoundSetter public void setFile(FileItem file) throws IOException {
         base64 = Base64.getEncoder().encodeToString(IOUtils.toByteArray(file.getInputStream()));
-        filename = file.getName();
+        setFilename(file.getName());
         file.delete();
     }
 
diff --git a/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterDefinition.java b/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterDefinition.java
index a0998ab..5f7c002 100644
--- a/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterDefinition.java
+++ b/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterDefinition.java
@@ -25,7 +25,6 @@
 package io.jenkins.plugins.file_parameters;
 
 import hudson.Extension;
-import hudson.model.ParameterDefinition;
 import java.io.IOException;
 import java.io.InputStream;
 import org.jenkinsci.Symbol;
@@ -48,7 +47,7 @@ public final class StashedFileParameterDefinition extends AbstractFileParameterD
     // TODO equals/hashCode
 
     @Symbol("stashedFile")
-    @Extension public static final class DescriptorImpl extends ParameterDefinition.ParameterDescriptor {
+    @Extension public static final class DescriptorImpl extends AbstractFileParameterDefinitionDescriptor {
 
         @Override public String getDisplayName() {
             return "Stashed File Parameter";
diff --git a/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterValue.java b/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterValue.java
index b7ed138..e77b32b 100644
--- a/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterValue.java
+++ b/src/main/java/io/jenkins/plugins/file_parameters/StashedFileParameterValue.java
@@ -51,7 +51,7 @@ public final class StashedFileParameterValue extends AbstractFileParameterValue
     
     @DataBoundConstructor public StashedFileParameterValue(String name, FileItem file) throws IOException {
         this(name, file.getInputStream());
-        filename = file.getName();
+        setFilename(file.getName());
         file.delete();
     }
 
diff --git a/src/test/java/io/jenkins/plugins/file_parameters/FileParameterWrapperTest.java b/src/test/java/io/jenkins/plugins/file_parameters/FileParameterWrapperTest.java
index bc905e9..3873daa 100644
--- a/src/test/java/io/jenkins/plugins/file_parameters/FileParameterWrapperTest.java
+++ b/src/test/java/io/jenkins/plugins/file_parameters/FileParameterWrapperTest.java
@@ -25,12 +25,15 @@
 package io.jenkins.plugins.file_parameters;
 
 import hudson.cli.CLICommandInvoker;
+import hudson.model.Failure;
 import hudson.model.ParameterDefinition;
 import hudson.model.ParametersDefinitionProperty;
 import java.io.ByteArrayInputStream;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 import hudson.model.Result;
+import java.io.File;
+import org.apache.commons.io.FileUtils;
 import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;
 import org.jenkinsci.plugins.workflow.job.WorkflowJob;
 import org.jenkinsci.plugins.workflow.job.WorkflowRun;
@@ -39,6 +42,7 @@ import org.junit.Test;
 import static org.junit.Assert.*;
 import org.junit.Rule;
 import org.jvnet.hudson.test.BuildWatcher;
+import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
 
 public class FileParameterWrapperTest {
@@ -208,6 +212,27 @@ public class FileParameterWrapperTest {
         r.assertLogContains("loaded 'UPLOADED CONTENT HERE'", b);
     }
 
+    @Issue("SECURITY-3123")
+    @Test public void stashMaliciousFilename() throws Exception {
+        String hack = "../../../../../../../../../../../../../../../../../../../../../tmp/file-parameters-plugin-SECURITY-3123";
+        File result = new File("/tmp/file-parameters-plugin-SECURITY-3123");
+        FileUtils.deleteQuietly(result);
+        WorkflowJob p = r.createProject(WorkflowJob.class, "p");
+        try {
+            p.addProperty(new ParametersDefinitionProperty(new StashedFileParameterDefinition(hack)));
+        } catch (Failure x) {
+            return; // good
+        }
+        p.setDefinition(new CpsFlowDefinition("", true));
+        assertThat(new CLICommandInvoker(r, "build").
+                       withStdin(new ByteArrayInputStream("malicious content here".getBytes())).
+                       invokeWithArgs("-f", "-p", hack + "=", "p"),
+                   CLICommandInvoker.Matcher.succeeded());
+        WorkflowRun b = p.getBuildByNumber(1);
+        assertNotNull(b);
+        assertFalse(result.isFile());
+    }
+
     @Test public void shortParameterName() throws Exception {
         r.createSlave("remote", null, null);
         WorkflowJob p = r.createProject(WorkflowJob.class, "p");
