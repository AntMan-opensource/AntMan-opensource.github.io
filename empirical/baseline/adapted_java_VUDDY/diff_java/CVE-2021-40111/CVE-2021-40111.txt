commit acc2ce90fd1de47c64e853e3c9762a6673a82969
Author: Benoit Tellier <btellier@linagora.com>
Date:   Sun Aug 22 13:31:42 2021 +0700

    JAMES-3634 Prevent String OutOfBoundException for IMAP APPEND

diff --git a/protocols/imap/src/main/java/org/apache/james/imap/decode/DecoderUtils.java b/protocols/imap/src/main/java/org/apache/james/imap/decode/DecoderUtils.java
index 5207b71e11..39735982d5 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/decode/DecoderUtils.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/decode/DecoderUtils.java
@@ -155,7 +155,7 @@ public final class DecoderUtils {
         boolean result;
         if (chars == null) {
             result = false;
-        } else if (chars.length() < 20) {
+        } else if (chars.length() < 26) {
             // Be liberal in what you accept
             result = false;
         } else {
diff --git a/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java b/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java
index 6f1fb3a90d..65735a449d 100644
--- a/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java
+++ b/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java
@@ -69,6 +69,28 @@ class AppendCommandParserTest {
         assertThat(testee.parseDateTime(request).toInstant(ZoneOffset.UTC)).isEqualTo(DATE);
     }
 
+    @Test
+    void fuzzedDateParsingShouldNotCrash() {
+        String base64Input = "byAiMDAtbk92LTUxMDExbjYwMC8wMDAuMCI=";
+        byte[] bytes = Base64.getDecoder().decode(base64Input);
+
+        assertThatThrownBy(() -> new AppendCommandParser(new UnpooledStatusResponseFactory(), CLOCK)
+            .decode(new ImapRequestStreamLineReader(new ByteArrayInputStream(bytes),
+                new ByteArrayOutputStream()), new Tag("AEA"), new FakeImapSession()))
+            .isInstanceOf(DecodingException.class);
+    }
+
+    @Test
+    void fuzzedDateParsing2ShouldNotCrash() {
+        String base64Input = "byAiMDAtbk92LTUxMDExbjYwMC8wMDAuMCI=";
+        byte[] bytes = Base64.getDecoder().decode(base64Input);
+
+        assertThatThrownBy(() -> new AppendCommandParser(new UnpooledStatusResponseFactory(), CLOCK)
+            .decode(new ImapRequestStreamLineReader(new ByteArrayInputStream(bytes),
+                new ByteArrayOutputStream()), new Tag("AEA"), new FakeImapSession()))
+            .isInstanceOf(DecodingException.class);
+    }
+
     @Test
     void parseDateTimeShouldNotConsumeNonDateLiteral() throws Exception {
         ImapRequestStreamLineReader request = toRequest("any\n");
