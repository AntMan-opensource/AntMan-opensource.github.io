commit 91c102e03a620d73e58fc368296b76ff67279c23
Author: Michal Vavřík <mvavrik@redhat.com>
Date:   Mon Nov 27 18:25:52 2023 +0100

    Move RESTEasy Classic RBAC security checks to JAX-RS filter

diff --git a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java
index 645b431b017..86f050084f3 100644
--- a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java
+++ b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java
@@ -31,10 +31,12 @@
 import io.quarkus.resteasy.runtime.AuthenticationFailedExceptionMapper;
 import io.quarkus.resteasy.runtime.AuthenticationRedirectExceptionMapper;
 import io.quarkus.resteasy.runtime.CompositeExceptionMapper;
+import io.quarkus.resteasy.runtime.EagerSecurityFilter;
 import io.quarkus.resteasy.runtime.ExceptionMapperRecorder;
 import io.quarkus.resteasy.runtime.ForbiddenExceptionMapper;
 import io.quarkus.resteasy.runtime.JaxRsSecurityConfig;
 import io.quarkus.resteasy.runtime.NotFoundExceptionMapper;
+import io.quarkus.resteasy.runtime.PreventRepeatedSecurityChecksInterceptor;
 import io.quarkus.resteasy.runtime.SecurityContextFilter;
 import io.quarkus.resteasy.runtime.UnauthorizedExceptionMapper;
 import io.quarkus.resteasy.runtime.vertx.JsonArrayReader;
@@ -156,6 +158,10 @@ void setUpSecurity(BuildProducer<ResteasyJaxrsProviderBuildItem> providers,
         if (capabilities.isPresent(Capability.SECURITY)) {
             providers.produce(new ResteasyJaxrsProviderBuildItem(SecurityContextFilter.class.getName()));
             additionalBeanBuildItem.produce(AdditionalBeanBuildItem.unremovableOf(SecurityContextFilter.class));
+            providers.produce(new ResteasyJaxrsProviderBuildItem(EagerSecurityFilter.class.getName()));
+            additionalBeanBuildItem.produce(AdditionalBeanBuildItem.unremovableOf(EagerSecurityFilter.class));
+            additionalBeanBuildItem
+                    .produce(AdditionalBeanBuildItem.unremovableOf(PreventRepeatedSecurityChecksInterceptor.class));
         }
     }
 
diff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/EagerSecurityCheckTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/EagerSecurityCheckTest.java
new file mode 100644
index 00000000000..d71665b4f12
--- /dev/null
+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/EagerSecurityCheckTest.java
@@ -0,0 +1,176 @@
+package io.quarkus.resteasy.test.security;
+
+import jakarta.annotation.security.DenyAll;
+import jakarta.annotation.security.PermitAll;
+import jakarta.annotation.security.RolesAllowed;
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.Produces;
+import jakarta.ws.rs.core.MediaType;
+
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.RegisterExtension;
+
+import io.quarkus.security.Authenticated;
+import io.quarkus.security.test.utils.TestIdentityController;
+import io.quarkus.security.test.utils.TestIdentityProvider;
+import io.quarkus.test.QuarkusUnitTest;
+import io.restassured.RestAssured;
+import io.restassured.http.ContentType;
+import io.restassured.response.Response;
+import io.vertx.core.json.JsonObject;
+
+/**
+ * Tests that {@link io.quarkus.security.spi.runtime.SecurityCheck}s are executed by Jakarta REST filters.
+ */
+public class EagerSecurityCheckTest {
+
+    @RegisterExtension
+    static QuarkusUnitTest runner = new QuarkusUnitTest()
+            .withApplicationRoot((jar) -> jar
+                    .addClasses(TestIdentityProvider.class, TestIdentityController.class, JsonResource.class,
+                            AbstractJsonResource.class, JsonSubResource.class));
+
+    @BeforeAll
+    public static void setupUsers() {
+        TestIdentityController.resetRoles()
+                .add("admin", "admin", "admin")
+                .add("user", "user", "user");
+    }
+
+    @Test
+    public void testAuthenticated() {
+        testPostJson("auth", "admin", true).then().statusCode(400);
+        testPostJson("auth", null, true).then().statusCode(401);
+        testPostJson("auth", "admin", false).then().statusCode(200);
+        testPostJson("auth", null, false).then().statusCode(401);
+    }
+
+    @Test
+    public void testRolesAllowed() {
+        testPostJson("roles", "admin", true).then().statusCode(400);
+        testPostJson("roles", "user", true).then().statusCode(403);
+        testPostJson("roles", "admin", false).then().statusCode(200);
+        testPostJson("roles", "user", false).then().statusCode(403);
+    }
+
+    @Test
+    public void testRolesAllowedOverriddenMethod() {
+        testPostJson("/roles-overridden", "admin", true).then().statusCode(400);
+        testPostJson("/roles-overridden", "user", true).then().statusCode(403);
+        testPostJson("/roles-overridden", "admin", false).then().statusCode(200);
+        testPostJson("/roles-overridden", "user", false).then().statusCode(403);
+    }
+
+    @Test
+    public void testDenyAll() {
+        testPostJson("deny", "admin", true).then().statusCode(403);
+        testPostJson("deny", null, true).then().statusCode(401);
+        testPostJson("deny", "admin", false).then().statusCode(403);
+        testPostJson("deny", null, false).then().statusCode(401);
+    }
+
+    @Test
+    public void testDenyAllClassLevel() {
+        testPostJson("/sub-resource/deny-class-level-annotation", "admin", true).then().statusCode(403);
+        testPostJson("/sub-resource/deny-class-level-annotation", null, true).then().statusCode(401);
+        testPostJson("/sub-resource/deny-class-level-annotation", "admin", false).then().statusCode(403);
+        testPostJson("/sub-resource/deny-class-level-annotation", null, false).then().statusCode(401);
+    }
+
+    @Test
+    public void testPermitAll() {
+        testPostJson("permit", "admin", true).then().statusCode(400);
+        testPostJson("permit", null, true).then().statusCode(400);
+        testPostJson("permit", "admin", false).then().statusCode(200);
+        testPostJson("permit", null, false).then().statusCode(200);
+    }
+
+    @Test
+    public void testSubResource() {
+        testPostJson("/sub-resource/roles", "admin", true).then().statusCode(400);
+        testPostJson("/sub-resource/roles", "user", true).then().statusCode(403);
+        testPostJson("/sub-resource/roles", "admin", false).then().statusCode(200);
+        testPostJson("/sub-resource/roles", "user", false).then().statusCode(403);
+    }
+
+    private static Response testPostJson(String path, String username, boolean invalid) {
+        var req = RestAssured.given();
+        if (username != null) {
+            req = req.auth().preemptive().basic(username, username);
+        }
+        return req
+                .contentType(ContentType.JSON)
+                .body((invalid ? "}" : "") + "{\"simple\": \"obj\"}").post(path);
+    }
+
+    @Path("/")
+    @Produces(MediaType.APPLICATION_JSON)
+    @Consumes(MediaType.APPLICATION_JSON)
+    public static class JsonResource extends AbstractJsonResource {
+
+        @Authenticated
+        @Path("/auth")
+        @POST
+        public JsonObject auth(JsonObject array) {
+            return array.put("test", "testval");
+        }
+
+        @RolesAllowed("admin")
+        @Path("/roles")
+        @POST
+        public JsonObject roles(JsonObject array) {
+            return array.put("test", "testval");
+        }
+
+        @PermitAll
+        @Path("/permit")
+        @POST
+        public JsonObject permit(JsonObject array) {
+            return array.put("test", "testval");
+        }
+
+        @PermitAll
+        @Path("/sub-resource")
+        public JsonSubResource subResource() {
+            return new JsonSubResource();
+        }
+
+        @RolesAllowed("admin")
+        @Override
+        public JsonObject rolesOverridden(JsonObject array) {
+            return array.put("test", "testval");
+        }
+    }
+
+    @DenyAll
+    public static class JsonSubResource {
+        @RolesAllowed("admin")
+        @Path("/roles")
+        @POST
+        public JsonObject roles(JsonObject array) {
+            return array.put("test", "testval");
+        }
+
+        @Path("/deny-class-level-annotation")
+        @POST
+        public JsonObject denyClassLevelAnnotation(JsonObject array) {
+            return array.put("test", "testval");
+        }
+    }
+
+    public static abstract class AbstractJsonResource {
+        @DenyAll
+        @Path("/deny")
+        @POST
+        public JsonObject deny(JsonObject array) {
+            return array.put("test", "testval");
+        }
+
+        @Path("/roles-overridden")
+        @POST
+        public abstract JsonObject rolesOverridden(JsonObject array);
+    }
+}
diff --git a/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/EagerSecurityFilter.java b/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/EagerSecurityFilter.java
new file mode 100644
index 00000000000..3f972c04d35
--- /dev/null
+++ b/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/EagerSecurityFilter.java
@@ -0,0 +1,63 @@
+package io.quarkus.resteasy.runtime;
+
+import java.io.IOException;
+import java.lang.reflect.Method;
+
+import jakarta.annotation.Priority;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.Priorities;
+import jakarta.ws.rs.container.ContainerRequestContext;
+import jakarta.ws.rs.container.ContainerRequestFilter;
+import jakarta.ws.rs.container.ResourceInfo;
+import jakarta.ws.rs.core.Context;
+import jakarta.ws.rs.ext.Provider;
+
+import io.quarkus.security.UnauthorizedException;
+import io.quarkus.security.identity.SecurityIdentity;
+import io.quarkus.security.spi.runtime.AuthorizationController;
+import io.quarkus.security.spi.runtime.SecurityCheck;
+import io.quarkus.security.spi.runtime.SecurityCheckStorage;
+import io.vertx.ext.web.RoutingContext;
+
+@Priority(Priorities.AUTHENTICATION)
+@Provider
+public class EagerSecurityFilter implements ContainerRequestFilter {
+
+    @Context
+    ResourceInfo resourceInfo;
+
+    @Inject
+    RoutingContext routingContext;
+
+    @Inject
+    SecurityCheckStorage securityCheckStorage;
+
+    @Inject
+    SecurityIdentity securityIdentity;
+
+    @Inject
+    AuthorizationController authorizationController;
+
+    @Override
+    public void filter(ContainerRequestContext requestContext) throws IOException {
+        if (!authorizationController.isAuthorizationEnabled()) {
+            return;
+        }
+        Method method = resourceInfo.getResourceMethod();
+        SecurityCheck check = securityCheckStorage.getSecurityCheck(method);
+        if (check != null) {
+            if (!check.isPermitAll()) {
+                if (check.requiresMethodArguments()) {
+                    if (securityIdentity.isAnonymous()) {
+                        throw new UnauthorizedException();
+                    }
+                    // security check will be performed by CDI interceptor
+                    return;
+                }
+                check.apply(securityIdentity, method, null);
+            }
+            // prevent repeated security checks
+            routingContext.put(EagerSecurityFilter.class.getName(), method);
+        }
+    }
+}
diff --git a/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/PreventRepeatedSecurityChecksInterceptor.java b/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/PreventRepeatedSecurityChecksInterceptor.java
new file mode 100644
index 00000000000..01ae1995ca6
--- /dev/null
+++ b/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/PreventRepeatedSecurityChecksInterceptor.java
@@ -0,0 +1,45 @@
+package io.quarkus.resteasy.runtime;
+
+import static io.quarkus.security.spi.runtime.SecurityHandlerConstants.EXECUTED;
+import static io.quarkus.security.spi.runtime.SecurityHandlerConstants.SECURITY_HANDLER;
+
+import java.lang.reflect.Method;
+
+import jakarta.annotation.Priority;
+import jakarta.annotation.security.PermitAll;
+import jakarta.annotation.security.RolesAllowed;
+import jakarta.inject.Inject;
+import jakarta.interceptor.AroundInvoke;
+import jakarta.interceptor.Interceptor;
+import jakarta.interceptor.InvocationContext;
+
+import io.quarkus.security.Authenticated;
+import io.quarkus.security.PermissionsAllowed;
+import io.quarkus.security.spi.runtime.AuthorizationController;
+import io.vertx.ext.web.RoutingContext;
+
+@Interceptor
+@RolesAllowed("")
+@PermissionsAllowed("")
+@PermitAll
+@Authenticated
+@Priority(Interceptor.Priority.PLATFORM_BEFORE)
+public class PreventRepeatedSecurityChecksInterceptor {
+
+    @Inject
+    AuthorizationController controller;
+
+    @Inject
+    RoutingContext routingContext;
+
+    @AroundInvoke
+    public Object intercept(InvocationContext ic) throws Exception {
+        if (controller.isAuthorizationEnabled()) {
+            Method method = routingContext.get(EagerSecurityFilter.class.getName());
+            if (method != null && method.equals(ic.getMethod())) {
+                ic.getContextData().put(SECURITY_HANDLER, EXECUTED);
+            }
+        }
+        return ic.proceed();
+    }
+}
diff --git a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java
index 04f9bfa314e..826ca2c04da 100644
--- a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java
+++ b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java
@@ -229,6 +229,7 @@ public int compare(AnnotationInstance o1, AnnotationInstance o2) {
                         // we also need to check string as long as duplicate "PermissionsAllowedInterceptor" exists
                         // in RESTEasy Reactive, however this workaround should be removed when the interceptor is dropped
                         if (PERMISSIONS_ALLOWED_INTERCEPTOR.equals(clazz.name())
+                                || clazz.name().toString().endsWith("PreventRepeatedSecurityChecksInterceptor")
                                 || clazz.name().toString().endsWith("PermissionsAllowedInterceptor")) {
                             continue;
                         }
diff --git a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java
index 48978c322c1..abb5b45d806 100644
--- a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java
+++ b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java
@@ -1,5 +1,6 @@
 package io.quarkus.security.deployment;
 
+import static io.quarkus.arc.processor.DotNames.INTERCEPTOR;
 import static io.quarkus.gizmo.MethodDescriptor.ofMethod;
 import static io.quarkus.security.deployment.DotNames.DENY_ALL;
 import static io.quarkus.security.deployment.DotNames.PERMISSIONS_ALLOWED;
@@ -779,6 +780,9 @@ private void gatherSecurityAnnotations(
         for (AnnotationInstance instance : instances) {
             AnnotationTarget target = instance.target();
             if (target.kind() == AnnotationTarget.Kind.CLASS) {
+                if (target.asClass().hasDeclaredAnnotation(INTERCEPTOR)) {
+                    continue;
+                }
                 List<MethodInfo> methods = target.asClass().methods();
                 AnnotationInstance existingClassInstance = classLevelAnnotations.get(target.asClass());
                 if (existingClassInstance == null) {
