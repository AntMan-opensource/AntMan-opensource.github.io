commit 027ddafc38a1048d6bd64d896b07ee35b0268894
Author: Tom Akehurst <tom@wiremock.org>
Date:   Tue Aug 15 18:41:24 2023 +0100

    Moved enforcement of network address rules to Apache client DNS resolver to avoid race condition where rules can be bypassed via successive lookups returning different IP addresses

diff --git a/src/main/java/com/github/tomakehurst/wiremock/common/ProhibitedNetworkAddressException.java b/src/main/java/com/github/tomakehurst/wiremock/common/ProhibitedNetworkAddressException.java
new file mode 100644
index 000000000..3d2776c4f
--- /dev/null
+++ b/src/main/java/com/github/tomakehurst/wiremock/common/ProhibitedNetworkAddressException.java
@@ -0,0 +1,18 @@
+/*
+ * Copyright (C) 2023 Thomas Akehurst
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.tomakehurst.wiremock.common;
+
+public class ProhibitedNetworkAddressException extends RuntimeException {}
diff --git a/src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java b/src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
index b898db4c8..adc3f59ca 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/http/HttpClientFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011-2021 Thomas Akehurst
+ * Copyright (C) 2011-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@ import static com.github.tomakehurst.wiremock.http.RequestMethod.*;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.apache.commons.lang3.StringUtils.isEmpty;
 
+import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.http.ssl.*;
@@ -64,7 +65,11 @@ public class HttpClientFactory {
       KeyStoreSettings trustStoreSettings,
       boolean trustSelfSignedCertificates,
       final List<String> trustedHosts,
-      boolean useSystemProperties) {
+      boolean useSystemProperties,
+      NetworkAddressRules networkAddressRules) {
+
+    NetworkAddressRulesAdheringDnsResolver dnsResolver =
+        new NetworkAddressRulesAdheringDnsResolver(networkAddressRules);
 
     HttpClientBuilder builder =
         HttpClientBuilder.create()
@@ -75,6 +80,7 @@ public class HttpClientFactory {
             .disableContentCompression()
             .setConnectionManager(
                 PoolingHttpClientConnectionManagerBuilder.create()
+                    .setDnsResolver(dnsResolver)
                     .setMaxConnPerRoute(maxConnections)
                     .setMaxConnTotal(maxConnections)
                     .setValidateAfterInactivity(TimeValue.ofSeconds(5)) // TODO Verify duration
@@ -113,6 +119,7 @@ public class HttpClientFactory {
     PoolingHttpClientConnectionManager connectionManager =
         PoolingHttpClientConnectionManagerBuilder.create()
             .setSSLSocketFactory(sslSocketFactory)
+            .setDnsResolver(dnsResolver)
             .build();
     builder.setConnectionManager(connectionManager);
 
@@ -168,7 +175,8 @@ public class HttpClientFactory {
       int timeoutMilliseconds,
       ProxySettings proxySettings,
       KeyStoreSettings trustStoreSettings,
-      boolean useSystemProperties) {
+      boolean useSystemProperties,
+      NetworkAddressRules networkAddressRules) {
     return createClient(
         maxConnections,
         timeoutMilliseconds,
@@ -176,7 +184,8 @@ public class HttpClientFactory {
         trustStoreSettings,
         true,
         Collections.<String>emptyList(),
-        useSystemProperties);
+        useSystemProperties,
+        networkAddressRules);
   }
 
   private static SSLContext buildSSLContextWithTrustStore(
@@ -226,7 +235,13 @@ public class HttpClientFactory {
   }
 
   public static CloseableHttpClient createClient(int maxConnections, int timeoutMilliseconds) {
-    return createClient(maxConnections, timeoutMilliseconds, NO_PROXY, NO_STORE, true);
+    return createClient(
+        maxConnections,
+        timeoutMilliseconds,
+        NO_PROXY,
+        NO_STORE,
+        true,
+        NetworkAddressRules.ALLOW_ALL);
   }
 
   public static CloseableHttpClient createClient(int timeoutMilliseconds) {
@@ -234,7 +249,13 @@ public class HttpClientFactory {
   }
 
   public static CloseableHttpClient createClient(ProxySettings proxySettings) {
-    return createClient(DEFAULT_MAX_CONNECTIONS, DEFAULT_TIMEOUT, proxySettings, NO_STORE, true);
+    return createClient(
+        DEFAULT_MAX_CONNECTIONS,
+        DEFAULT_TIMEOUT,
+        proxySettings,
+        NO_STORE,
+        true,
+        NetworkAddressRules.ALLOW_ALL);
   }
 
   public static CloseableHttpClient createClient() {
diff --git a/src/main/java/com/github/tomakehurst/wiremock/http/NetworkAddressRulesAdheringDnsResolver.java b/src/main/java/com/github/tomakehurst/wiremock/http/NetworkAddressRulesAdheringDnsResolver.java
new file mode 100644
index 000000000..c7bf3ba08
--- /dev/null
+++ b/src/main/java/com/github/tomakehurst/wiremock/http/NetworkAddressRulesAdheringDnsResolver.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2023 Thomas Akehurst
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.tomakehurst.wiremock.http;
+
+import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
+import com.github.tomakehurst.wiremock.common.ProhibitedNetworkAddressException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.stream.Stream;
+import org.apache.hc.client5.http.SystemDefaultDnsResolver;
+
+public class NetworkAddressRulesAdheringDnsResolver extends SystemDefaultDnsResolver {
+
+  private final NetworkAddressRules networkAddressRules;
+
+  public NetworkAddressRulesAdheringDnsResolver(NetworkAddressRules networkAddressRules) {
+    this.networkAddressRules = networkAddressRules;
+  }
+
+  @Override
+  public InetAddress[] resolve(String host) throws UnknownHostException {
+    if (!networkAddressRules.isAllowed(host)) {
+      throw new ProhibitedNetworkAddressException();
+    }
+
+    final InetAddress[] resolved = super.resolve(host);
+    if (Stream.of(resolved)
+        .anyMatch(address -> !networkAddressRules.isAllowed(address.getHostAddress()))) {
+      throw new ProhibitedNetworkAddressException();
+    }
+
+    return resolved;
+  }
+}
diff --git a/src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java b/src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
index 32b24665c..4d491febc 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/http/ProxyResponseRenderer.java
@@ -20,6 +20,7 @@ import static com.github.tomakehurst.wiremock.http.Response.response;
 import static java.net.HttpURLConnection.HTTP_INTERNAL_ERROR;
 
 import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
+import com.github.tomakehurst.wiremock.common.ProhibitedNetworkAddressException;
 import com.github.tomakehurst.wiremock.common.ProxySettings;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.global.GlobalSettings;
@@ -27,11 +28,8 @@ import com.github.tomakehurst.wiremock.store.SettingsStore;
 import com.github.tomakehurst.wiremock.stubbing.ServeEvent;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.net.InetAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.net.UnknownHostException;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
@@ -83,7 +81,8 @@ public class ProxyResponseRenderer implements ResponseRenderer {
             trustStoreSettings,
             true,
             Collections.emptyList(),
-            true);
+            true,
+            targetAddressRules);
     forwardProxyClient =
         HttpClientFactory.createClient(
             1000,
@@ -92,7 +91,8 @@ public class ProxyResponseRenderer implements ResponseRenderer {
             trustStoreSettings,
             trustAllProxyTargets,
             trustAllProxyTargets ? Collections.emptyList() : trustedProxyTargets,
-            false);
+            false,
+            targetAddressRules);
 
     this.preserveHostHeader = preserveHostHeader;
     this.hostHeaderValue = hostHeaderValue;
@@ -103,13 +103,13 @@ public class ProxyResponseRenderer implements ResponseRenderer {
   @Override
   public Response render(ServeEvent serveEvent) {
     ResponseDefinition responseDefinition = serveEvent.getResponseDefinition();
-    if (targetAddressProhibited(responseDefinition.getProxyUrl())) {
-      return response()
-          .status(500)
-          .headers(new HttpHeaders(new HttpHeader("Content-Type", "text/plain")))
-          .body("The target proxy address is denied in WireMock's configuration.")
-          .build();
-    }
+    //    if (targetAddressProhibited(responseDefinition.getProxyUrl())) {
+    //      return response()
+    //          .status(500)
+    //          .headers(new HttpHeaders(new HttpHeader("Content-Type", "text/plain")))
+    //          .body("The target proxy address is denied in WireMock's configuration.")
+    //          .build();
+    //    }
 
     HttpUriRequest httpRequest = getHttpRequestFor(responseDefinition);
     addRequestHeaders(httpRequest, responseDefinition);
@@ -140,6 +140,12 @@ public class ProxyResponseRenderer implements ResponseRenderer {
                       responseDefinition.getDelayDistribution())
                   .chunkedDribbleDelay(responseDefinition.getChunkedDribbleDelay())
                   .build());
+    } catch (ProhibitedNetworkAddressException e) {
+      return response()
+          .status(HTTP_INTERNAL_ERROR)
+          .headers(new HttpHeaders(new HttpHeader("Content-Type", "text/plain")))
+          .body("The target proxy address is denied in WireMock's configuration.")
+          .build();
     } catch (SSLException e) {
       return proxyResponseError("SSL", httpRequest, e);
     } catch (IOException e) {
@@ -147,17 +153,6 @@ public class ProxyResponseRenderer implements ResponseRenderer {
     }
   }
 
-  private boolean targetAddressProhibited(String proxyUrl) {
-    String host = URI.create(proxyUrl).getHost();
-    try {
-      final InetAddress[] resolvedAddresses = InetAddress.getAllByName(host);
-      return !Arrays.stream(resolvedAddresses)
-          .allMatch(address -> targetAddressRules.isAllowed(address.getHostAddress()));
-    } catch (UnknownHostException e) {
-      return true;
-    }
-  }
-
   private Response proxyResponseError(String type, HttpUriRequest request, Exception e) {
     return response()
         .status(HTTP_INTERNAL_ERROR)
diff --git a/src/test/java/com/github/tomakehurst/wiremock/http/HttpClientFactoryCertificateVerificationTest.java b/src/test/java/com/github/tomakehurst/wiremock/http/HttpClientFactoryCertificateVerificationTest.java
index 4eba5cbbc..4a0b39e50 100644
--- a/src/test/java/com/github/tomakehurst/wiremock/http/HttpClientFactoryCertificateVerificationTest.java
+++ b/src/test/java/com/github/tomakehurst/wiremock/http/HttpClientFactoryCertificateVerificationTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2020-2021 Thomas Akehurst
+ * Copyright (C) 2020-2023 Thomas Akehurst
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@ import static com.github.tomakehurst.wiremock.crypto.X509CertificateVersion.V3;
 import static java.util.Collections.emptyList;
 
 import com.github.tomakehurst.wiremock.WireMockServer;
+import com.github.tomakehurst.wiremock.common.NetworkAddressRules;
 import com.github.tomakehurst.wiremock.common.ssl.KeyStoreSettings;
 import com.github.tomakehurst.wiremock.crypto.CertificateSpecification;
 import com.github.tomakehurst.wiremock.crypto.InMemoryKeyStore;
@@ -53,11 +54,11 @@ public abstract class HttpClientFactoryCertificateVerificationTest {
 
     CertificateSpecification certificateSpecification =
         new X509CertificateSpecification(
-            /* version = */ V3,
-            /* subject = */ "CN=" + certificateCN,
-            /* issuer = */ "CN=wiremock.org",
-            /* notBefore = */ new Date(),
-            /* notAfter = */ new Date(System.currentTimeMillis() + (365L * 24 * 60 * 60 * 1000)));
+            /* version= */ V3,
+            /* subject= */ "CN=" + certificateCN,
+            /* issuer= */ "CN=wiremock.org",
+            /* notBefore= */ new Date(),
+            /* notAfter= */ new Date(System.currentTimeMillis() + (365L * 24 * 60 * 60 * 1000)));
 
     Certificate certificate = certificateSpecification.certificateFor(keyPair);
 
@@ -90,9 +91,10 @@ public abstract class HttpClientFactoryCertificateVerificationTest {
             5 * 1000 * 60,
             NO_PROXY,
             clientTrustStoreSettings,
-            /* trustSelfSignedCertificates = */ false,
+            /* trustSelfSignedCertificates= */ false,
             trustedHosts,
-            false);
+            false,
+            NetworkAddressRules.ALLOW_ALL);
   }
 
   @AfterEach
