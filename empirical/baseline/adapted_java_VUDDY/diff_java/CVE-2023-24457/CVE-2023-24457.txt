commit 7a3045926943e0d39a6522eede81d7e758e84e14
Author: Matt Ramey <matt.ramey@delostools.net>
Date:   Fri May 19 13:26:19 2023 -0700

    [SECURITY-2986] Add verification check for state parameter that comes back during finish login request.

diff --git a/src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java b/src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java
index 927aeee..bba976c 100644
--- a/src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java
+++ b/src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java
@@ -44,6 +44,7 @@ import org.acegisecurity.AuthenticationException;
 import org.acegisecurity.AuthenticationManager;
 import org.acegisecurity.BadCredentialsException;
 import org.acegisecurity.context.SecurityContextHolder;
+import org.apache.commons.lang.StringUtils;
 import org.keycloak.KeycloakSecurityContext;
 import org.keycloak.OAuth2Constants;
 import org.keycloak.adapters.AdapterDeploymentContext;
@@ -74,6 +75,7 @@ import org.kohsuke.stapler.HttpResponses;
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
+import org.springframework.security.authentication.AuthenticationServiceException;
 
 import hudson.Extension;
 import hudson.model.Descriptor;
@@ -178,7 +180,8 @@ public class KeycloakSecurityRealm extends SecurityRealm {
 
         KeycloakUriBuilder builder = getKeycloakDeployment().getAuthUrl().clone()
 				.queryParam(OAuth2Constants.CLIENT_ID, getKeycloakDeployment().getResourceName())
-				.queryParam(OAuth2Constants.REDIRECT_URI, redirect).queryParam(OAuth2Constants.STATE, state)
+				.queryParam(OAuth2Constants.REDIRECT_URI, redirect)
+				.queryParam(OAuth2Constants.STATE, state)
 				.queryParam(OAuth2Constants.RESPONSE_TYPE, OAuth2Constants.CODE)
 				.queryParam(OAuth2Constants.SCOPE, scopeParam);
         String keycloakIdp = getKeycloakIdp();
@@ -187,6 +190,7 @@ public class KeycloakSecurityRealm extends SecurityRealm {
         }
 		String authUrl = builder.build().toString();
 		request.getSession().setAttribute(AUTH_REQUESTED, Boolean.valueOf(true));
+		request.getSession().setAttribute(OAuth2Constants.STATE, state);
 		createFilter();
 		return new HttpRedirect(authUrl);
 
@@ -233,6 +237,8 @@ public class KeycloakSecurityRealm extends SecurityRealm {
 
 			LOGGER.log(Level.FINE, "TokenURL" + resolvedDeployment.getTokenUrl());
 
+			checkState(request.getParameter(OAuth2Constants.STATE), request.getSession().getAttribute(OAuth2Constants.STATE));
+
 			AccessTokenResponse tokenResponse = ServerRequest.invokeAccessCodeToToken(resolvedDeployment,
 					request.getParameter(OAuth2Constants.CODE), redirect, null);
 
@@ -292,6 +298,21 @@ public class KeycloakSecurityRealm extends SecurityRealm {
 		return HttpResponses.redirectToContextRoot();
 	}
 
+	private void checkState(String queryState, Object sessionStateObj) {
+		if (StringUtils.isEmpty(queryState) || sessionStateObj == null) {
+			LOGGER.log(Level.WARNING, "Cannot validate incoming authentication attempt due to state not being found. State from query: "
+				+ queryState + " State from session: " + sessionStateObj);
+			throw new AuthenticationServiceException("Could not validate state token during authentication.");
+		}
+		String sessionState = sessionStateObj.toString();
+		if (StringUtils.equals(queryState, sessionState)) {
+			LOGGER.log(Level.FINE, "State cookie matches parameter value.");
+		} else {
+			LOGGER.log(Level.WARNING, "State session value (" + sessionState + ") did NOT match parameter value (" + queryState + ")");
+			throw new AuthenticationServiceException("State values did not match");
+		}
+	}
+
 	/*
 	 * (non-Javadoc)
 	 *
