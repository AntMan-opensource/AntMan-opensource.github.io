commit 2e0bd43cb5bf5759e9343363dd43e912d9cbe216
Author: dushaniw <dushaniwellappili@gmail.com>
Date:   Fri Mar 13 17:08:50 2020 +0530

    Fix xml parsing issues in event receiver and publisher configurations

diff --git a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java
index c60af623ca..768ae36cb6 100644
--- a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java
+++ b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/CarbonEventPublisherService.java
@@ -18,8 +18,10 @@ package org.wso2.carbon.event.publisher.core.internal;
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.util.AXIOMUtil;
 import org.apache.axis2.dataretrieval.DataRetrievalUtil;
+import org.apache.axis2.util.XMLUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.Document;
 import org.wso2.carbon.context.PrivilegedCarbonContext;
 import org.wso2.carbon.databridge.commons.StreamDefinition;
 import org.wso2.carbon.event.output.adapter.core.OutputEventAdapterSchema;
@@ -42,15 +44,19 @@ import org.wso2.carbon.registry.core.Resource;
 import org.wso2.carbon.registry.core.exceptions.RegistryException;
 import org.wso2.carbon.registry.core.service.RegistryService;
 import org.wso2.carbon.registry.core.utils.RegistryUtils;
+import org.xml.sax.InputSource;
 
 import java.io.File;
 import java.io.InputStream;
+import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.stream.XMLStreamException;
 
 public class CarbonEventPublisherService implements EventPublisherService {
@@ -587,7 +593,10 @@ public class CarbonEventPublisherService implements EventPublisherService {
             throws EventPublisherConfigurationException {
         int tenantId = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId();
         try {
-            OMElement omElement = AXIOMUtil.stringToOM(eventPublisherConfigurationXml);
+            DocumentBuilderFactory dbf = EventPublisherUtil.getSecuredDocumentBuilder();
+            DocumentBuilder builder = dbf.newDocumentBuilder();
+            Document document = builder.parse(new InputSource(new StringReader(eventPublisherConfigurationXml)));
+            OMElement omElement = XMLUtils.toOM((document).getDocumentElement());
             omElement.build();
             EventPublisherConfigurationHelper.validateEventPublisherConfiguration(omElement);
             String mappingType = EventPublisherConfigurationHelper.getOutputMappingType(omElement);
@@ -607,7 +616,7 @@ public class CarbonEventPublisherService implements EventPublisherService {
             } else {
                 throw new EventPublisherConfigurationException("Mapping type of the Event Publisher " + originalEventPublisherName + " cannot be null");
             }
-        } catch (XMLStreamException e) {
+        } catch (Exception e) {
             throw new EventPublisherConfigurationException("Error while building XML configuration :" + e.getMessage(), e);
         }
     }
diff --git a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java
index 1193e7953c..d7558e7062 100644
--- a/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java
+++ b/components/event-publisher/org.wso2.carbon.event.publisher.core/src/main/java/org/wso2/carbon/event/publisher/core/internal/util/EventPublisherUtil.java
@@ -15,6 +15,10 @@
 package org.wso2.carbon.event.publisher.core.internal.util;
 
 import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.xerces.impl.Constants;
+import org.apache.xerces.util.SecurityManager;
 import org.wso2.carbon.context.CarbonContext;
 import org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
 import org.wso2.carbon.event.publisher.core.config.EventPublisherConfiguration;
@@ -31,10 +35,15 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
 public class EventPublisherUtil {
 
     private static final String JVM_BIT_ARCH_SYSTEM_PROPERTY = "sun.arch.data.model";
     private static int referenceSize;
+    private static final int ENTITY_EXPANSION_LIMIT = 0;
+    private static final Log log = LogFactory.getLog(EventPublisherUtil.class);
 
     static {
         String arch = System.getProperty(JVM_BIT_ARCH_SYSTEM_PROPERTY);
@@ -46,6 +55,29 @@ public class EventPublisherUtil {
         }
     }
 
+    public static DocumentBuilderFactory getSecuredDocumentBuilder() {
+
+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+        dbf.setNamespaceAware(true);
+        dbf.setXIncludeAware(false);
+        dbf.setExpandEntityReferences(false);
+        try {
+            dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);
+            dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);
+            dbf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);
+        } catch (ParserConfigurationException e) {
+            log.error(
+                    "Failed to load XML Processor Feature " + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + " or "
+                            + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + " or "
+                            + Constants.LOAD_EXTERNAL_DTD_FEATURE);
+        }
+
+        SecurityManager securityManager = new SecurityManager();
+        securityManager.setEntityExpansionLimit(ENTITY_EXPANSION_LIMIT);
+        dbf.setAttribute(Constants.XERCES_PROPERTY_PREFIX + Constants.SECURITY_MANAGER_PROPERTY, securityManager);
+        return dbf;
+    }
+
     public static String generateFilePath(String eventPublisherName, String repositoryPath) throws EventPublisherConfigurationException {
         File repoDir = new File(repositoryPath);
         if (!repoDir.exists()) {
diff --git a/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/CarbonEventReceiverService.java b/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/CarbonEventReceiverService.java
index b0739faddd..db8883d880 100644
--- a/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/CarbonEventReceiverService.java
+++ b/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/CarbonEventReceiverService.java
@@ -18,8 +18,10 @@ package org.wso2.carbon.event.receiver.core.internal;
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.util.AXIOMUtil;
 import org.apache.axis2.engine.AxisConfiguration;
+import org.apache.axis2.util.XMLUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.Document;
 import org.wso2.carbon.context.PrivilegedCarbonContext;
 import org.wso2.carbon.databridge.commons.StreamDefinition;
 import org.wso2.carbon.event.input.adapter.core.EventAdapterUtil;
@@ -40,9 +42,13 @@ import org.wso2.carbon.event.receiver.core.internal.util.helper.EventReceiverCon
 import org.wso2.carbon.event.receiver.core.internal.util.helper.EventReceiverConfigurationHelper;
 import org.wso2.carbon.event.stream.core.EventStreamService;
 import org.wso2.carbon.event.stream.core.exception.EventStreamConfigurationException;
+import org.xml.sax.InputSource;
 
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.stream.XMLStreamException;
 import java.io.File;
+import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -548,7 +554,10 @@ public class CarbonEventReceiverService implements EventReceiverService {
             throws EventReceiverConfigurationException {
         int tenantId = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId();
         try {
-            OMElement omElement = AXIOMUtil.stringToOM(eventReceiverConfigurationXml);
+            DocumentBuilderFactory dbf = EventReceiverUtil.getSecuredDocumentBuilder();
+            DocumentBuilder builder = dbf.newDocumentBuilder();
+            Document document = builder.parse(new InputSource(new StringReader(eventReceiverConfigurationXml)));
+            OMElement omElement = XMLUtils.toOM((document).getDocumentElement());
             omElement.build();
             EventReceiverConfigurationHelper.validateEventReceiverConfiguration(omElement);
             String mappingType = EventReceiverConfigurationHelper.getInputMappingType(omElement);
@@ -568,7 +577,7 @@ public class CarbonEventReceiverService implements EventReceiverService {
             } else {
                 throw new EventReceiverConfigurationException("Mapping type of the Event Receiver " + originalEventReceiverName + " cannot be null");
             }
-        } catch (XMLStreamException e) {
+        } catch (Exception e) {
             throw new EventReceiverConfigurationException("Error while building XML configuration: " + e.getMessage(), e);
         }
     }
diff --git a/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/util/EventReceiverUtil.java b/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/util/EventReceiverUtil.java
index 06d904ce52..8e932a695a 100644
--- a/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/util/EventReceiverUtil.java
+++ b/components/event-receiver/org.wso2.carbon.event.receiver.core/src/main/java/org/wso2/carbon/event/receiver/core/internal/util/EventReceiverUtil.java
@@ -18,6 +18,10 @@
 
 package org.wso2.carbon.event.receiver.core.internal.util;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.xerces.impl.Constants;
+import org.apache.xerces.util.SecurityManager;
 import org.wso2.carbon.databridge.commons.Attribute;
 import org.wso2.carbon.databridge.commons.AttributeType;
 import org.wso2.carbon.databridge.commons.Event;
@@ -34,10 +38,15 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
 public class EventReceiverUtil {
 
     private static final String JVM_BIT_ARCH_SYSTEM_PROPERTY = "sun.arch.data.model";
     private static int referenceSize;
+    private static final int ENTITY_EXPANSION_LIMIT = 0;
+    private static final Log log = LogFactory.getLog(EventReceiverUtil.class);
 
     static {
         String arch = System.getProperty(JVM_BIT_ARCH_SYSTEM_PROPERTY);
@@ -49,6 +58,29 @@ public class EventReceiverUtil {
         }
     }
 
+    public static DocumentBuilderFactory getSecuredDocumentBuilder() {
+
+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+        dbf.setNamespaceAware(true);
+        dbf.setXIncludeAware(false);
+        dbf.setExpandEntityReferences(false);
+        try {
+            dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);
+            dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);
+            dbf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);
+        } catch (ParserConfigurationException e) {
+            log.error(
+                    "Failed to load XML Processor Feature " + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + " or "
+                            + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + " or "
+                            + Constants.LOAD_EXTERNAL_DTD_FEATURE);
+        }
+
+        SecurityManager securityManager = new SecurityManager();
+        securityManager.setEntityExpansionLimit(ENTITY_EXPANSION_LIMIT);
+        dbf.setAttribute(Constants.XERCES_PROPERTY_PREFIX + Constants.SECURITY_MANAGER_PROPERTY, securityManager);
+        return dbf;
+    }
+
     public static Object getConvertedAttributeObject(String value, AttributeType type) {
         switch (type) {
             case INT:
