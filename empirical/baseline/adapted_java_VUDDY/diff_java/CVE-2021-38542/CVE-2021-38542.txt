commit 6263d87f10fd733fc4d7933a24ca7fe21cea7ff6
Author: Benoit Tellier <btellier@linagora.com>
Date:   Wed Aug 11 16:16:43 2021 +0700

    JAMES-1862 Generalize STARTTLS sanitizing fix
    
    All line based protocols are subject to command injections for "man in the middle"
    attacks. We hereby generalize the SMTP fix.
    
    Note that we slightly modified the behaviour to bypass this sanitizing as soon as the users
    are authenticated: indeed authentication happens for sure after STARTTLS upgrades.

diff --git a/protocols/api/src/main/java/org/apache/james/protocols/api/CommandDetectionSession.java b/protocols/api/src/main/java/org/apache/james/protocols/api/CommandDetectionSession.java
new file mode 100644
index 0000000000..ddb00bb650
--- /dev/null
+++ b/protocols/api/src/main/java/org/apache/james/protocols/api/CommandDetectionSession.java
@@ -0,0 +1,29 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.protocols.api;
+
+// https://nostarttls.secvuln.info/
+public interface CommandDetectionSession {
+    boolean needsCommandInjectionDetection();
+
+    void startDetectingCommandInjection();
+
+    void stopDetectingCommandInjection();
+}
diff --git a/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSession.java b/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSession.java
index a08c0ae312..a9dc57e805 100644
--- a/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSession.java
+++ b/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSession.java
@@ -35,7 +35,7 @@ import com.google.common.base.Strings;
 /**
  * Session for a protocol. Every new connection generates a new session
  */
-public interface ProtocolSession {
+public interface ProtocolSession extends CommandDetectionSession {
    
     enum State {
         Connection,
@@ -237,5 +237,4 @@ public interface ProtocolSession {
      * @return size of the pushed line handler
      */
     int getPushedLineHandlerCount();
-
 }
diff --git a/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSessionImpl.java b/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSessionImpl.java
index d713f64f86..1e88275088 100644
--- a/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSessionImpl.java
+++ b/protocols/api/src/main/java/org/apache/james/protocols/api/ProtocolSessionImpl.java
@@ -43,6 +43,7 @@ public class ProtocolSessionImpl implements ProtocolSession {
     private final Map<AttachmentKey<?>, Object> sessionState;
     private Username username;
     protected final ProtocolConfiguration config;
+    private boolean needsCommandInjectionDetection;
     private static final String DELIMITER = "\r\n";
     
     public ProtocolSessionImpl(ProtocolTransport transport, ProtocolConfiguration config) {
@@ -50,6 +51,22 @@ public class ProtocolSessionImpl implements ProtocolSession {
         this.connectionState = new HashMap<>();
         this.sessionState = new HashMap<>();
         this.config = config;
+        this.needsCommandInjectionDetection = true;
+    }
+
+    @Override
+    public boolean needsCommandInjectionDetection() {
+        return needsCommandInjectionDetection;
+    }
+
+    @Override
+    public void startDetectingCommandInjection() {
+        needsCommandInjectionDetection = true;
+    }
+
+    @Override
+    public void stopDetectingCommandInjection() {
+        needsCommandInjectionDetection = false;
     }
 
     @Override
diff --git a/protocols/imap/src/main/java/org/apache/james/imap/api/process/ImapSession.java b/protocols/imap/src/main/java/org/apache/james/imap/api/process/ImapSession.java
index 57ec6392e0..84db08856b 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/api/process/ImapSession.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/api/process/ImapSession.java
@@ -26,6 +26,7 @@ import org.apache.commons.text.RandomStringGenerator;
 import org.apache.james.core.Username;
 import org.apache.james.imap.api.ImapSessionState;
 import org.apache.james.mailbox.MailboxSession;
+import org.apache.james.protocols.api.CommandDetectionSession;
 
 /**
  * Encapsulates all state held for an ongoing Imap session, which commences when
@@ -34,7 +35,7 @@ import org.apache.james.mailbox.MailboxSession;
  * 
  * @version $Revision: 109034 $
  */
-public interface ImapSession {
+public interface ImapSession extends CommandDetectionSession {
     class SessionId {
         private static final RandomStringGenerator RANDOM_STRING_GENERATOR = new RandomStringGenerator.Builder()
             .withinRange('a', 'z')
diff --git a/protocols/imap/src/main/java/org/apache/james/imap/encode/FakeImapSession.java b/protocols/imap/src/main/java/org/apache/james/imap/encode/FakeImapSession.java
index e2c375e31b..cbf644723d 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/encode/FakeImapSession.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/encode/FakeImapSession.java
@@ -40,6 +40,21 @@ public class FakeImapSession implements ImapSession {
         this.attributesByKey = new ConcurrentHashMap<>();
     }
 
+    @Override
+    public boolean needsCommandInjectionDetection() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void startDetectingCommandInjection() {
+
+    }
+
+    @Override
+    public void stopDetectingCommandInjection() {
+
+    }
+
     @Override
     public SessionId sessionId() {
         return sessionId;
diff --git a/protocols/imap/src/main/java/org/apache/james/imap/processor/AbstractAuthProcessor.java b/protocols/imap/src/main/java/org/apache/james/imap/processor/AbstractAuthProcessor.java
index c693f1faf9..f8af8a15ad 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/processor/AbstractAuthProcessor.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/processor/AbstractAuthProcessor.java
@@ -73,6 +73,7 @@ public abstract class AbstractAuthProcessor<R extends ImapRequest> extends Abstr
                     session.setMailboxSession(mailboxSession);
                     provisionInbox(session, mailboxManager, mailboxSession);
                     okComplete(request, responder);
+                    session.stopDetectingCommandInjection();
                 } catch (BadCredentialsException e) {
                     authFailure = true;
                 }
diff --git a/protocols/imap/src/main/java/org/apache/james/imap/processor/AppendProcessor.java b/protocols/imap/src/main/java/org/apache/james/imap/processor/AppendProcessor.java
index 4b9cc56819..9faa718f44 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/processor/AppendProcessor.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/processor/AppendProcessor.java
@@ -64,6 +64,8 @@ public class AppendProcessor extends AbstractMailboxProcessor<AppendRequest> {
         final Flags flags = request.getFlags();
         final MailboxPath mailboxPath = PathConverter.forSession(session).buildFullPath(mailboxName);
 
+        session.stopDetectingCommandInjection();
+
         try {
             final MailboxManager mailboxManager = getMailboxManager();
             final MessageManager mailbox = mailboxManager.getMailbox(mailboxPath, session.getMailboxSession());
diff --git a/protocols/imap/src/main/java/org/apache/james/imap/processor/AuthenticateProcessor.java b/protocols/imap/src/main/java/org/apache/james/imap/processor/AuthenticateProcessor.java
index 067d397619..96d88a59d7 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/processor/AuthenticateProcessor.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/processor/AuthenticateProcessor.java
@@ -96,6 +96,7 @@ public class AuthenticateProcessor extends AbstractAuthProcessor<AuthenticateReq
         } else {
             doAuth(authenticationAttempt, session, request, responder, HumanReadableText.AUTHENTICATION_FAILED);
         }
+        session.stopDetectingCommandInjection();
     }
 
     private AuthenticationAttempt parseDelegationAttempt(String initialClientResponse) {
diff --git a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/AllButStartTlsLineBasedChannelHandler.java b/protocols/netty/src/main/java/org/apache/james/protocols/netty/AllButStartTlsLineBasedChannelHandler.java
similarity index 78%
rename from protocols/smtp/src/main/java/org/apache/james/protocols/smtp/AllButStartTlsLineBasedChannelHandler.java
rename to protocols/netty/src/main/java/org/apache/james/protocols/netty/AllButStartTlsLineBasedChannelHandler.java
index eba24c6dbd..fa3f127a61 100644
--- a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/AllButStartTlsLineBasedChannelHandler.java
+++ b/protocols/netty/src/main/java/org/apache/james/protocols/netty/AllButStartTlsLineBasedChannelHandler.java
@@ -16,13 +16,13 @@
  * specific language governing permissions and limitations      *
  * under the License.                                           *
  ****************************************************************/
-package org.apache.james.protocols.smtp;
+package org.apache.james.protocols.netty;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Locale;
 
-import org.apache.james.protocols.netty.HandlerConstants;
+import org.apache.james.protocols.api.CommandDetectionSession;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
@@ -32,21 +32,20 @@ import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import com.google.common.base.CharMatcher;
 import com.google.common.base.Splitter;
 
-
 public class AllButStartTlsLineBasedChannelHandler extends LineBasedFrameDecoder {
-
-    private static final String STARTTLS = "starttls";
     private static final Boolean FAIL_FAST = true;
     private final ChannelPipeline pipeline;
+    private final String pattern;
 
-    public AllButStartTlsLineBasedChannelHandler(ChannelPipeline pipeline, int maxFrameLength, boolean stripDelimiter) {
+    public AllButStartTlsLineBasedChannelHandler(ChannelPipeline pipeline, int maxFrameLength, boolean stripDelimiter, String pattern) {
         super(maxFrameLength, stripDelimiter, !FAIL_FAST);
         this.pipeline = pipeline;
+        this.pattern = pattern;
     }
 
     @Override
     protected Object decode(ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer) throws Exception {
-        SMTPSession session = (SMTPSession) pipeline.getContext(HandlerConstants.CORE_HANDLER).getAttachment();
+        CommandDetectionSession session = retrieveSession(ctx, channel);
 
         if (session == null || session.needsCommandInjectionDetection()) {
             String trimedLowerCasedInput = readAll(buffer).trim().toLowerCase(Locale.US);
@@ -57,6 +56,10 @@ public class AllButStartTlsLineBasedChannelHandler extends LineBasedFrameDecoder
         return super.decode(ctx, channel, buffer);
     }
 
+    protected CommandDetectionSession retrieveSession(ChannelHandlerContext ctx, Channel channel) {
+        return (CommandDetectionSession) pipeline.getContext(HandlerConstants.CORE_HANDLER).getAttachment();
+    }
+
     private String readAll(ChannelBuffer buffer) {
         return buffer.toString(StandardCharsets.US_ASCII);
     }
@@ -68,13 +71,13 @@ public class AllButStartTlsLineBasedChannelHandler extends LineBasedFrameDecoder
         return hasInvalidStartTlsPart(parts) || multiPartsAndOneStartTls(parts);
     }
 
-    private boolean multiPartsAndOneStartTls(List<String> parts) {
+    protected boolean multiPartsAndOneStartTls(List<String> parts) {
         return parts.stream()
-            .anyMatch(line -> line.startsWith(STARTTLS)) && parts.size() > 1;
+            .anyMatch(line -> line.startsWith(pattern)) && parts.size() > 1;
     }
 
-    private boolean hasInvalidStartTlsPart(List<String> parts) {
+    protected boolean hasInvalidStartTlsPart(List<String> parts) {
         return parts.stream()
-            .anyMatch(line -> line.startsWith(STARTTLS) && !line.endsWith(STARTTLS));
+            .anyMatch(line -> line.startsWith(pattern) && !line.endsWith(pattern));
     }
 }
diff --git a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/AllButStartTlsLineChannelHandlerFactory.java b/protocols/netty/src/main/java/org/apache/james/protocols/netty/AllButStartTlsLineChannelHandlerFactory.java
similarity index 87%
rename from protocols/smtp/src/main/java/org/apache/james/protocols/smtp/AllButStartTlsLineChannelHandlerFactory.java
rename to protocols/netty/src/main/java/org/apache/james/protocols/netty/AllButStartTlsLineChannelHandlerFactory.java
index 94d9b2fa8b..65886168bc 100644
--- a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/AllButStartTlsLineChannelHandlerFactory.java
+++ b/protocols/netty/src/main/java/org/apache/james/protocols/netty/AllButStartTlsLineChannelHandlerFactory.java
@@ -16,22 +16,22 @@
  * specific language governing permissions and limitations      *
  * under the License.                                           *
  ****************************************************************/
-package org.apache.james.protocols.smtp;
+package org.apache.james.protocols.netty;
 
-import org.apache.james.protocols.netty.ChannelHandlerFactory;
 import org.jboss.netty.channel.ChannelHandler;
 import org.jboss.netty.channel.ChannelPipeline;
 
 public class AllButStartTlsLineChannelHandlerFactory implements ChannelHandlerFactory {
-
+    private final String pattern;
     private int maxFrameLength;
 
-    public AllButStartTlsLineChannelHandlerFactory(int maxFrameLength) {
+    public AllButStartTlsLineChannelHandlerFactory(String pattern, int maxFrameLength) {
+        this.pattern = pattern;
         this.maxFrameLength = maxFrameLength;
     }
 
     @Override
     public ChannelHandler create(ChannelPipeline pipeline) {
-        return new AllButStartTlsLineBasedChannelHandler(pipeline, maxFrameLength, false);
+        return new AllButStartTlsLineBasedChannelHandler(pipeline, maxFrameLength, false, pattern);
     }
 }
diff --git a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/CommandInjectionDetectedException.java b/protocols/netty/src/main/java/org/apache/james/protocols/netty/CommandInjectionDetectedException.java
similarity index 96%
rename from protocols/smtp/src/main/java/org/apache/james/protocols/smtp/CommandInjectionDetectedException.java
rename to protocols/netty/src/main/java/org/apache/james/protocols/netty/CommandInjectionDetectedException.java
index 1c153466a0..175baac2d1 100644
--- a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/CommandInjectionDetectedException.java
+++ b/protocols/netty/src/main/java/org/apache/james/protocols/netty/CommandInjectionDetectedException.java
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations      *
  * under the License.                                           *
  ****************************************************************/
-package org.apache.james.protocols.smtp;
+package org.apache.james.protocols.netty;
 
 public class CommandInjectionDetectedException extends RuntimeException {
 
diff --git a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSession.java b/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSession.java
index 1167750e4c..82ed979048 100644
--- a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSession.java
+++ b/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSession.java
@@ -57,12 +57,6 @@ public interface SMTPSession extends ProtocolSession {
      * @return the relaying status
      */
     boolean isRelayingAllowed();
-
-    boolean needsCommandInjectionDetection();
-
-    void startDetectingCommadInjection();
-
-    void stopDetectingCommandInjection();
     
     /**
      * Set if reallying is allowed
diff --git a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSessionImpl.java b/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSessionImpl.java
index 86a70db6e0..0d0fe8e879 100644
--- a/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSessionImpl.java
+++ b/protocols/smtp/src/main/java/org/apache/james/protocols/smtp/SMTPSessionImpl.java
@@ -43,20 +43,6 @@ public class SMTPSessionImpl extends ProtocolSessionImpl implements SMTPSession
         needsCommandInjectionDetection = true;
     }
 
-    @Override
-    public boolean needsCommandInjectionDetection() {
-        return needsCommandInjectionDetection;
-    }
-
-    @Override
-    public void startDetectingCommadInjection() {
-        needsCommandInjectionDetection = true;
-    }
-
-    @Override
-    public void stopDetectingCommandInjection() {
-        needsCommandInjectionDetection = false;
-    }
 
     @Override
     public boolean isRelayingAllowed() {
diff --git a/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/netty/NettyStartTlsSMTPServerTest.java b/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/netty/NettyStartTlsSMTPServerTest.java
index 1b2a5630b4..a97528cd78 100644
--- a/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/netty/NettyStartTlsSMTPServerTest.java
+++ b/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/netty/NettyStartTlsSMTPServerTest.java
@@ -32,8 +32,6 @@ import javax.mail.Session;
 import javax.mail.internet.InternetAddress;
 import javax.mail.internet.MimeMessage;
 
-import com.sun.mail.smtp.SMTPTransport;
-
 import org.apache.commons.net.smtp.SMTPReply;
 import org.apache.commons.net.smtp.SMTPSClient;
 import org.apache.james.metrics.tests.RecordingMetricFactory;
@@ -47,8 +45,8 @@ import org.apache.james.protocols.api.utils.BogusSslContextFactory;
 import org.apache.james.protocols.api.utils.BogusTrustManagerFactory;
 import org.apache.james.protocols.api.utils.ProtocolServerUtils;
 import org.apache.james.protocols.netty.AbstractChannelPipelineFactory;
+import org.apache.james.protocols.netty.AllButStartTlsLineChannelHandlerFactory;
 import org.apache.james.protocols.netty.NettyServer;
-import org.apache.james.protocols.smtp.AllButStartTlsLineChannelHandlerFactory;
 import org.apache.james.protocols.smtp.SMTPConfigurationImpl;
 import org.apache.james.protocols.smtp.SMTPProtocol;
 import org.apache.james.protocols.smtp.SMTPProtocolHandlerChain;
@@ -59,6 +57,8 @@ import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import com.sun.mail.smtp.SMTPTransport;
+
 public class NettyStartTlsSMTPServerTest {
 
     private static final String LOCALHOST_IP = "127.0.0.1";
@@ -88,7 +88,7 @@ public class NettyStartTlsSMTPServerTest {
         NettyServer server = new NettyServer.Factory(hashedWheelTimer)
                 .protocol(protocol)
                 .secure(enc)
-                .frameHandlerFactory(new AllButStartTlsLineChannelHandlerFactory(AbstractChannelPipelineFactory.MAX_LINE_LENGTH))
+                .frameHandlerFactory(new AllButStartTlsLineChannelHandlerFactory("starttls", AbstractChannelPipelineFactory.MAX_LINE_LENGTH))
                 .build();
         server.setListenAddresses(new InetSocketAddress(LOCALHOST_IP, RANDOM_PORT));
         return server;
diff --git a/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/utils/BaseFakeSMTPSession.java b/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/utils/BaseFakeSMTPSession.java
index 46320f2df7..3013f5f80e 100644
--- a/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/utils/BaseFakeSMTPSession.java
+++ b/protocols/smtp/src/test/java/org/apache/james/protocols/smtp/utils/BaseFakeSMTPSession.java
@@ -43,7 +43,7 @@ public class BaseFakeSMTPSession implements SMTPSession {
     }
 
     @Override
-    public void startDetectingCommadInjection() {
+    public void startDetectingCommandInjection() {
         throw new UnsupportedOperationException("Unimplemented Stub Method");
     }
 
diff --git a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/NettyImapSession.java b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/NettyImapSession.java
index ea5d6701ab..30718cda47 100644
--- a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/NettyImapSession.java
+++ b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/NettyImapSession.java
@@ -44,6 +44,7 @@ public class NettyImapSession implements ImapSession, NettyConstants {
     private int handlerCount;
     private final boolean plainAuthDisallowed;
     private final SessionId sessionId;
+    private boolean needsCommandInjectionDetection;
 
     public NettyImapSession(Channel channel, SSLContext sslContext, String[] enabledCipherSuites, boolean compress, boolean plainAuthDisallowed, SessionId sessionId) {
         this.channel = channel;
@@ -52,6 +53,22 @@ public class NettyImapSession implements ImapSession, NettyConstants {
         this.compress = compress;
         this.plainAuthDisallowed = plainAuthDisallowed;
         this.sessionId = sessionId;
+        this.needsCommandInjectionDetection = true;
+    }
+
+    @Override
+    public boolean needsCommandInjectionDetection() {
+        return needsCommandInjectionDetection;
+    }
+
+    @Override
+    public void startDetectingCommandInjection() {
+        needsCommandInjectionDetection = true;
+    }
+
+    @Override
+    public void stopDetectingCommandInjection() {
+        needsCommandInjectionDetection = false;
     }
 
     @Override
diff --git a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoder.java b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoder.java
index b05cdc68be..64ce9c4f01 100644
--- a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoder.java
+++ b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoder.java
@@ -19,19 +19,26 @@
 
 package org.apache.james.imapserver.netty;
 
+import java.util.List;
+
+import org.apache.james.imap.api.ImapConstants;
+import org.apache.james.imap.api.process.ImapSession;
+import org.apache.james.protocols.api.CommandDetectionSession;
+import org.apache.james.protocols.netty.AllButStartTlsLineBasedChannelHandler;
 import org.jboss.netty.buffer.ChannelBuffer;
+import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
+import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.channel.Channels;
 import org.jboss.netty.channel.MessageEvent;
-import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 
-public class SwitchableLineBasedFrameDecoder extends LineBasedFrameDecoder {
+public class SwitchableLineBasedFrameDecoder extends AllButStartTlsLineBasedChannelHandler {
+    public static final String PATTERN = ImapConstants.STARTTLS_COMMAND.getName().toLowerCase();
 
-    private static final Boolean FAIL_FAST = true;
     private volatile boolean framingEnabled = true;
 
-    public SwitchableLineBasedFrameDecoder(int maxFrameLength, boolean stripDelimiter) {
-        super(maxFrameLength, stripDelimiter, !FAIL_FAST);
+    public SwitchableLineBasedFrameDecoder(ChannelPipeline pipeline, int maxFrameLength, boolean stripDelimiter) {
+        super(pipeline, maxFrameLength, stripDelimiter, PATTERN);
     }
 
     @Override
@@ -45,7 +52,6 @@ public class SwitchableLineBasedFrameDecoder extends LineBasedFrameDecoder {
 
     public synchronized void enableFraming() {
         this.framingEnabled = true;
-
     }
 
     public synchronized void disableFraming(ChannelHandlerContext ctx) {
@@ -56,4 +62,31 @@ public class SwitchableLineBasedFrameDecoder extends LineBasedFrameDecoder {
         }
     }
 
+    @Override
+    protected CommandDetectionSession retrieveSession(ChannelHandlerContext ctx, Channel channel) {
+        return (ImapSession) NettyConstants.attributes.get(ctx.getChannel());
+    }
+
+    @Override
+    protected boolean multiPartsAndOneStartTls(List<String> parts) {
+        return parts.stream()
+            .map(this::removeTag)
+            .anyMatch(line -> line.startsWith(PATTERN)) && parts.size() > 1;
+    }
+
+    @Override
+    protected boolean hasInvalidStartTlsPart(List<String> parts) {
+        return parts.stream()
+            .map(this::removeTag)
+            .anyMatch(line -> line.startsWith(PATTERN) && !line.endsWith(PATTERN));
+    }
+
+    protected String removeTag(String input) {
+        String trimmedInput = input.trim();
+        int tagEnd = input.indexOf(' ');
+        if (tagEnd < 0) {
+            return input;
+        }
+        return trimmedInput.substring(tagEnd + 1);
+    }
 }
\ No newline at end of file
diff --git a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoderFactory.java b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoderFactory.java
index 9c5f5d4a09..a9cc66c30b 100644
--- a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoderFactory.java
+++ b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/SwitchableLineBasedFrameDecoderFactory.java
@@ -32,6 +32,6 @@ public class SwitchableLineBasedFrameDecoderFactory implements ChannelHandlerFac
 
     @Override
     public ChannelHandler create(ChannelPipeline pipeline) {
-        return new SwitchableLineBasedFrameDecoder(maxLineLength, false);
+        return new SwitchableLineBasedFrameDecoder(pipeline, maxLineLength, false);
     }
 }
diff --git a/server/protocols/protocols-managesieve/src/main/java/org/apache/james/managesieveserver/netty/ManageSieveServer.java b/server/protocols/protocols-managesieve/src/main/java/org/apache/james/managesieveserver/netty/ManageSieveServer.java
index 8d89aa2cdc..3343668c18 100644
--- a/server/protocols/protocols-managesieve/src/main/java/org/apache/james/managesieveserver/netty/ManageSieveServer.java
+++ b/server/protocols/protocols-managesieve/src/main/java/org/apache/james/managesieveserver/netty/ManageSieveServer.java
@@ -26,11 +26,12 @@ import javax.net.ssl.SSLEngine;
 import org.apache.james.managesieve.transcode.ManageSieveProcessor;
 import org.apache.james.protocols.api.Encryption;
 import org.apache.james.protocols.lib.netty.AbstractConfigurableAsyncServer;
+import org.apache.james.protocols.netty.AbstractChannelPipelineFactory;
+import org.apache.james.protocols.netty.AllButStartTlsLineChannelHandlerFactory;
 import org.apache.james.protocols.netty.ChannelGroupHandler;
 import org.apache.james.protocols.netty.ChannelHandlerFactory;
 import org.apache.james.protocols.netty.ConnectionLimitUpstreamHandler;
 import org.apache.james.protocols.netty.ConnectionPerIpLimitUpstreamHandler;
-import org.apache.james.protocols.netty.LineDelimiterBasedChannelHandlerFactory;
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.channel.ChannelPipelineFactory;
 import org.jboss.netty.channel.ChannelUpstreamHandler;
@@ -140,6 +141,6 @@ public class ManageSieveServer extends AbstractConfigurableAsyncServer implement
 
     @Override
     protected ChannelHandlerFactory createFrameHandlerFactory() {
-        return new LineDelimiterBasedChannelHandlerFactory(maxLineLength);
+        return new AllButStartTlsLineChannelHandlerFactory("starttls", AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
     }
 }
diff --git a/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/core/PassCmdHandler.java b/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/core/PassCmdHandler.java
index 4569f67731..07b4e93aa1 100644
--- a/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/core/PassCmdHandler.java
+++ b/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/core/PassCmdHandler.java
@@ -88,6 +88,7 @@ public class PassCmdHandler extends AbstractPassCmdHandler  {
         MailboxSession mSession = null;
         try {
             mSession = manager.login(session.getUsername(), password);
+            session.stopDetectingCommandInjection();
             manager.startProcessingRequest(mSession);
             MailboxPath inbox = MailboxPath.inbox(mSession);
             
diff --git a/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/netty/POP3Server.java b/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/netty/POP3Server.java
index bd235ec670..4c4981fab5 100644
--- a/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/netty/POP3Server.java
+++ b/server/protocols/protocols-pop3/src/main/java/org/apache/james/pop3server/netty/POP3Server.java
@@ -24,9 +24,9 @@ import org.apache.james.protocols.api.ProtocolConfiguration;
 import org.apache.james.protocols.lib.handler.HandlersPackage;
 import org.apache.james.protocols.lib.netty.AbstractProtocolAsyncServer;
 import org.apache.james.protocols.netty.AbstractChannelPipelineFactory;
+import org.apache.james.protocols.netty.AllButStartTlsLineChannelHandlerFactory;
 import org.apache.james.protocols.netty.BasicChannelUpstreamHandler;
 import org.apache.james.protocols.netty.ChannelHandlerFactory;
-import org.apache.james.protocols.netty.LineDelimiterBasedChannelHandlerFactory;
 import org.apache.james.protocols.netty.ProtocolMDCContextFactory;
 import org.apache.james.protocols.pop3.POP3Protocol;
 import org.jboss.netty.channel.ChannelUpstreamHandler;
@@ -101,7 +101,7 @@ public class POP3Server extends AbstractProtocolAsyncServer implements POP3Serve
 
     @Override
     protected ChannelHandlerFactory createFrameHandlerFactory() {
-        return new LineDelimiterBasedChannelHandlerFactory(AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
+        return new AllButStartTlsLineChannelHandlerFactory("stls", AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
     }
 
 }
diff --git a/server/protocols/protocols-smtp/src/main/java/org/apache/james/smtpserver/netty/SMTPServer.java b/server/protocols/protocols-smtp/src/main/java/org/apache/james/smtpserver/netty/SMTPServer.java
index bda14598ce..1358ffff21 100644
--- a/server/protocols/protocols-smtp/src/main/java/org/apache/james/smtpserver/netty/SMTPServer.java
+++ b/server/protocols/protocols-smtp/src/main/java/org/apache/james/smtpserver/netty/SMTPServer.java
@@ -32,8 +32,8 @@ import org.apache.james.protocols.api.ProtocolTransport;
 import org.apache.james.protocols.lib.handler.HandlersPackage;
 import org.apache.james.protocols.lib.netty.AbstractProtocolAsyncServer;
 import org.apache.james.protocols.netty.AbstractChannelPipelineFactory;
+import org.apache.james.protocols.netty.AllButStartTlsLineChannelHandlerFactory;
 import org.apache.james.protocols.netty.ChannelHandlerFactory;
-import org.apache.james.protocols.smtp.AllButStartTlsLineChannelHandlerFactory;
 import org.apache.james.protocols.smtp.SMTPConfiguration;
 import org.apache.james.protocols.smtp.SMTPProtocol;
 import org.apache.james.smtpserver.CoreCmdHandlerLoader;
@@ -335,7 +335,7 @@ public class SMTPServer extends AbstractProtocolAsyncServer implements SMTPServe
 
     @Override
     protected ChannelHandlerFactory createFrameHandlerFactory() {
-        return new AllButStartTlsLineChannelHandlerFactory(AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
+        return new AllButStartTlsLineChannelHandlerFactory("starttls", AbstractChannelPipelineFactory.MAX_LINE_LENGTH);
     }
 
     public int getAuthRequired() {
