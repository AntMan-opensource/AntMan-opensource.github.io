commit 106206cdd3843ef39dac6e89725b367a8e925898
Author: Christian Del Monte <register@cdelmonte.de>
Date:   Mon Aug 14 11:44:01 2023 +0200

    Fix Security Issue-3165

diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/BitBucketPPRTrigger.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/BitBucketPPRTrigger.java
index 039f587..84c70c3 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/BitBucketPPRTrigger.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/BitBucketPPRTrigger.java
@@ -293,7 +293,7 @@ public class BitBucketPPRTrigger extends Trigger<Job<?, ?>> {
       }
 
       return new StandardListBoxModel().includeEmptyValue()
-          .includeMatchingAs(ACL.SYSTEM, Jenkins.getInstance(), StandardCredentials.class,
+          .includeMatchingAs(ACL.SYSTEM, context, StandardCredentials.class,
               Collections.<DomainRequirement>emptyList(), CredentialsMatchers.always())
           .includeCurrentValue(credentialsId);
     }
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRAction.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRAction.java
index bb642e3..1685765 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRAction.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRAction.java
@@ -96,6 +96,10 @@ public interface BitBucketPPRAction extends Action {
     return null;
   }
 
+  public default String getPullRequestApiUrl(){
+    return null;
+  }
+
   public default String getPullRequestUrl(){
     return null;
   }
@@ -131,8 +135,8 @@ public interface BitBucketPPRAction extends Action {
   public default String getLatestCommitFromRef() {
     return null;
   }
-  
+
   public default String getLatestCommitToRef() {
     return null;
   }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestAction.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestAction.java
index 3af0427..bb8d1d3 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestAction.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestAction.java
@@ -21,24 +21,51 @@
 
 package io.jenkins.plugins.bitbucketpushandpullrequest.action;
 
+import io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils;
+import io.jenkins.plugins.bitbucketpushandpullrequest.exception.BitBucketPPRRepositoryNotParsedException;
+
 import java.util.ArrayList;
 import java.util.List;
-
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import javax.annotation.Nonnull;
 
 import hudson.model.InvisibleAction;
 import io.jenkins.plugins.bitbucketpushandpullrequest.model.BitBucketPPRPayload;
+import static java.util.Objects.nonNull;
 
 public class BitBucketPPRPullRequestAction extends InvisibleAction implements BitBucketPPRAction {
-
+  private static final Logger logger = Logger.getLogger(BitBucketPPRPullRequestAction.class.getName());
+  public static final String APPROVE = "/approve";
+  public static final String DECLINE = "/decline";
+  public static final String STATUSES = "/statuses";
+  public static final String COMMIT = "commit";
+  public static final String BITBUCKET_API_BASE_URL = "https://api.bitbucket.org/2.0";
+  public static final String BITBUCKET_HTTP_BASE_URL = "https://bitbucket.org/";
+
+  private static final String PULL_REQUEST = "pullrequests";
+  private static final String BITBUCKET_REPOSITORIES = "repositories";
   private final @Nonnull BitBucketPPRPayload payload;
-  private List<String> scmUrls = new ArrayList<>(2);
+  private final @Nonnull String workspace;
+
+  private final @Nonnull String repoSlug;
+
+  private final @Nonnull String pullRequestId;
 
   public BitBucketPPRPullRequestAction(@Nonnull BitBucketPPRPayload payload) {
     this.payload = payload;
-
-    // TODO Why??
-    scmUrls.add(payload.getRepository().getLinks().getHtml().getHref());
+    this.pullRequestId = payload.getPullRequest().getId();
+
+    Map<String, String> workspaceRepo;
+    try {
+      workspaceRepo = BitBucketPPRUtils.extractRepositoryNameFromHTTPSUrl(
+          payload.getRepository().getLinks().getHtml().getHref());
+    } catch (BitBucketPPRRepositoryNotParsedException e) {
+      throw new RuntimeException(e);
+    }
+    this.repoSlug = workspaceRepo.get(BitBucketPPRUtils.BB_REPOSITORY);
+    this.workspace = workspaceRepo.get(BitBucketPPRUtils.BB_WORKSPACE);
   }
 
   @Override
@@ -46,24 +73,31 @@ public class BitBucketPPRPullRequestAction extends InvisibleAction implements Bi
     return payload.getPullRequest().getSource().getBranch().getName();
   }
 
-  @Override
-  public String getTargetBranch() {
-    return payload.getPullRequest().getDestination().getBranch().getName();
-  }
-  
   @Override
   public String getLatestCommitFromRef() {
     return payload.getPullRequest().getSource().getCommit().getHash();
   }
-  
+
+  @Override
+  public String getTargetBranch() {
+    return payload.getPullRequest().getDestination().getBranch().getName();
+  }
+
   @Override
   public String getLatestCommitToRef() {
     return payload.getPullRequest().getDestination().getCommit().getHash();
   }
 
+  @Override
+  public String getPullRequestApiUrl() {
+    return String.join("/", BITBUCKET_API_BASE_URL, BITBUCKET_REPOSITORIES, workspace, repoSlug,
+        PULL_REQUEST, pullRequestId);
+  }
+
   @Override
   public String getPullRequestUrl() {
-    return payload.getPullRequest().getLinks().getHtml().getHref();
+    return String.join("/", BITBUCKET_HTTP_BASE_URL, workspace, repoSlug, PULL_REQUEST,
+        pullRequestId);
   }
 
   @Override
@@ -83,7 +117,13 @@ public class BitBucketPPRPullRequestAction extends InvisibleAction implements Bi
 
   @Override
   public String getScm() {
-    return payload.getRepository().getScm() != null ? payload.getRepository().getScm() : "git";
+    String scm =
+        nonNull(payload.getRepository().getScm()) ? payload.getRepository().getScm() : "git";
+    if (!scm.equalsIgnoreCase("git")) {
+      logger.log(Level.WARNING, "Payload received from SCM other than git.");
+    }
+
+    return payload.getRepository().getScm();
   }
 
   @Override
@@ -98,7 +138,9 @@ public class BitBucketPPRPullRequestAction extends InvisibleAction implements Bi
 
   @Override
   public List<String> getScmUrls() {
-    return scmUrls;
+    List<String> res = new ArrayList<>();
+    res.add(payload.getRepository().getLinks().getHtml().getHref());
+    return res;
   }
 
   @Override
@@ -127,17 +169,20 @@ public class BitBucketPPRPullRequestAction extends InvisibleAction implements Bi
 
   @Override
   public String getLinkApprove() {
-    return payload.getPullRequest().getLinks().getApprove().getHref();
+    return String.join("/", BITBUCKET_API_BASE_URL, BITBUCKET_REPOSITORIES, workspace, repoSlug,
+        PULL_REQUEST, pullRequestId) + APPROVE;
   }
 
   @Override
   public String getLinkDecline() {
-    return payload.getPullRequest().getLinks().getDecline().getHref();
+    return String.join("/", BITBUCKET_API_BASE_URL, BITBUCKET_REPOSITORIES, workspace, repoSlug,
+        PULL_REQUEST, pullRequestId) + DECLINE;
   }
 
   @Override
   public String getLinkStatuses() {
-    return payload.getPullRequest().getLinks().getStatuses().getHref();
+    return String.join("/", BITBUCKET_API_BASE_URL, BITBUCKET_REPOSITORIES, workspace, repoSlug,
+        PULL_REQUEST, pullRequestId) + STATUSES;
   }
 
   @Override
@@ -147,7 +192,8 @@ public class BitBucketPPRPullRequestAction extends InvisibleAction implements Bi
 
   @Override
   public String getCommitLink() {
-    return payload.getPullRequest().getSource().getCommit().getLinks().getSelf().getHref();
+    return String.join("/", BITBUCKET_API_BASE_URL, BITBUCKET_REPOSITORIES, workspace, repoSlug,
+        COMMIT) + '/' + this.getLatestCommit();
   }
 
   @Override
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestServerAction.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestServerAction.java
index 175422f..5c4392f 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestServerAction.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRPullRequestServerAction.java
@@ -38,6 +38,7 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
   private static final Logger logger = Logger.getLogger(BitBucketPPRPullRequestServerAction.class.getName());
 
   private final @Nonnull BitBucketPPRPayload payload;
+  private URL baseUrl;
   private List<String> scmUrls = new ArrayList<>(2);
   private String repositoryUuid;
 
@@ -49,8 +50,14 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
         .getCloneProperty();
 
     for (BitBucketPPRServerClone clone : clones) {
-      if (clone.getName().equalsIgnoreCase("http") || clone.getName().equalsIgnoreCase("https")
-          || clone.getName().equalsIgnoreCase("ssh")) {
+      if (clone.getName().equalsIgnoreCase("http") || clone.getName().equalsIgnoreCase("https")) {
+        try {
+          this.baseUrl = new URL(clone.getHref());
+          this.scmUrls.add(clone.getHref());
+        } catch (MalformedURLException e) {
+          throw new RuntimeException(e);
+        }
+      } else if (clone.getName().equalsIgnoreCase("ssh")) {
         this.scmUrls.add(clone.getHref());
       }
     }
@@ -62,12 +69,10 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
   public String getSourceBranch() {
     return payload.getServerPullRequest().getFromRef().getDisplayId();
   }
-  
   @Override
   public String getLatestCommitFromRef() {
     return payload.getServerPullRequest().getFromRef().getLatestCommit();
   }
-  
   @Override
   public String getLatestCommitToRef() {
     return payload.getServerPullRequest().getToRef().getLatestCommit();
@@ -84,8 +89,8 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
   }
 
   @Override
-  public String getPullRequestUrl() {
-    return payload.getServerPullRequest().getLinks().getSelfProperty().get(0).getHref();
+  public String getPullRequestApiUrl() {
+    return baseUrl.toString();
   }
 
   @Override
@@ -138,22 +143,11 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
 
   @Override
   public String getLinkApprove() {
-    // returns:
-    // {baseUrl}/rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve
-
     String projectKey = payload.getServerPullRequest().getFromRef().getRepository().getProject().getKey();
     String repoSlug = payload.getServerPullRequest().getFromRef().getRepository().getSlug();
     Long pullrequestId = payload.getServerPullRequest().getId();
 
-    String projectSelfUrl = payload.getServerPullRequest().getFromRef().getRepository().getProject().getLinks()
-        .getSelfProperty().get(0).getHref();
-    String baseUrl = getBaseUrl(projectSelfUrl);
-    if (baseUrl == null) {
-      logger.log(Level.WARNING, "Base url is empty.");
-      return "";
-    }
-
-    return baseUrl + "/rest/api/1.0/projects/" + projectKey.trim() + "/repos/" + repoSlug.trim() + "/pull-requests/"
+    return getBaseUrl() + "/rest/api/1.0/projects/" + projectKey.trim() + "/repos/" + repoSlug.trim() + "/pull-requests/"
         + Long.toString(pullrequestId).trim() + "/approve";
   }
 
@@ -166,15 +160,7 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
     String repoSlug = payload.getServerPullRequest().getFromRef().getRepository().getSlug();
     Long pullrequestId = payload.getServerPullRequest().getId();
 
-    String projectSelfUrl = payload.getServerPullRequest().getFromRef().getRepository().getProject().getLinks()
-        .getSelfProperty().get(0).getHref();
-    String baseUrl = getBaseUrl(projectSelfUrl);
-    if (baseUrl == null) {
-      logger.log(Level.WARNING, "Base url is empty.");
-      return "";
-    }
-
-    return baseUrl + "/rest/api/1.0/projects/" + projectKey.trim() + "/repos/" + repoSlug.trim() + "/pull-requests/"
+    return getBaseUrl() + "/rest/api/1.0/projects/" + projectKey.trim() + "/repos/" + repoSlug.trim() + "/pull-requests/"
         + Long.toString(pullrequestId).trim() + "/decline";
   }
 
@@ -187,18 +173,13 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
   public String getCommitLink() {
     // returns:
     // /rest/build-status/1.0/commits/{commitId}
-    String projectSelfUrl = payload.getServerPullRequest().getFromRef().getRepository().getProject().getLinks()
-        .getSelfProperty().get(0).getHref();
     String commitId = payload.getServerPullRequest().getFromRef().getLatestCommit();
 
-    String baseUrl = getBaseUrl(projectSelfUrl);
-    if (baseUrl == null) {
-      logger.log(Level.WARNING, "Base url is empty.");
-      return "";
-    }
+    return getBaseUrl() + "/rest/build-status/1.0/commits/" + commitId;
+  }
 
-    String result = baseUrl + "/rest/build-status/1.0/commits/" + commitId;
-    return result;
+  private String getBaseUrl() {
+    return baseUrl.getProtocol() + "://" + baseUrl.getHost() + ":" + baseUrl.getPort();
   }
 
   @Override
@@ -206,15 +187,4 @@ public class BitBucketPPRPullRequestServerAction extends InvisibleAction impleme
     return "BitBucketPPRPullRequestServerAction";
   }
 
-  private String getBaseUrl(String projectSelfUrl) {
-    String baseUrl = null;
-    try {
-      URL url = new URL(projectSelfUrl);
-      baseUrl = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort();
-    } catch (MalformedURLException e) {
-      logger.log(Level.WARNING, "Cannot extract base url", e);
-    }
-    return baseUrl;
-  }
-
 }
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRRepositoryAction.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRRepositoryAction.java
index 77fe36c..43f8ab1 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRRepositoryAction.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRRepositoryAction.java
@@ -21,22 +21,30 @@
 
 package io.jenkins.plugins.bitbucketpushandpullrequest.action;
 
+import io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils;
+import io.jenkins.plugins.bitbucketpushandpullrequest.exception.BitBucketPPRRepositoryNotParsedException;
+
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nonnull;
 import hudson.model.InvisibleAction;
 import io.jenkins.plugins.bitbucketpushandpullrequest.model.BitBucketPPRPayload;
 import io.jenkins.plugins.bitbucketpushandpullrequest.model.cloud.BitBucketPPRChange;
+import java.util.stream.Collectors;
 
 
 public class BitBucketPPRRepositoryAction extends InvisibleAction implements BitBucketPPRAction {
   private static final Logger logger = Logger.getLogger(BitBucketPPRAction.class.getName());
+  public static final String COMMIT = "commit";
+  private static final String BITBUCKET_API_BASE_URL = "https://api.bitbucket.org/2.0";
+  private static final String BITBUCKET_REPOSITORIES = "repositories";
 
   private final @Nonnull BitBucketPPRPayload payload;
-
-  private List<String> scmUrls = new ArrayList<>(2);
+  private final String repoSlug;
+  private final String workspace;
 
   private String targetBranchName;
 
@@ -47,9 +55,6 @@ public class BitBucketPPRRepositoryAction extends InvisibleAction implements Bit
   public BitBucketPPRRepositoryAction(@Nonnull BitBucketPPRPayload payload) {
     this.payload = payload;
 
-    // TODO: why??
-    scmUrls.add(payload.getRepository().getLinks().getHtml().getHref());
-
     for (BitBucketPPRChange change : payload.getPush().getChanges()) {
       if (change.getNewChange() != null) {
         this.targetBranchName = change.getNewChange().getName();
@@ -59,6 +64,16 @@ public class BitBucketPPRRepositoryAction extends InvisibleAction implements Bit
       }
     }
 
+    Map<String, String> workspaceRepo;
+    try {
+      workspaceRepo = BitBucketPPRUtils.extractRepositoryNameFromHTTPSUrl(
+          payload.getRepository().getLinks().getHtml().getHref());
+    } catch (BitBucketPPRRepositoryNotParsedException e) {
+      throw new RuntimeException(e);
+    }
+    this.repoSlug = workspaceRepo.get(BitBucketPPRUtils.BB_REPOSITORY);
+    this.workspace = workspaceRepo.get(BitBucketPPRUtils.BB_WORKSPACE);
+
     logger.log(Level.INFO,
         () -> "Received commit hook notification for branch: " + this.targetBranchName);
     logger.log(Level.INFO, () -> "Received commit hook type: " + this.type);
@@ -101,7 +116,9 @@ public class BitBucketPPRRepositoryAction extends InvisibleAction implements Bit
 
   @Override
   public List<String> getScmUrls() {
-    return scmUrls;
+    List<String> res = new ArrayList<>();
+    res.add(payload.getRepository().getLinks().getHtml().getHref());
+    return res;
   }
 
   @Override
@@ -124,17 +141,12 @@ public class BitBucketPPRRepositoryAction extends InvisibleAction implements Bit
 
   @Override
   public List<String> getCommitLinks() {
-    List<BitBucketPPRChange> changes = payload.getPush().getChanges();
-    List<String> links = new ArrayList<>();
-
-    for (BitBucketPPRChange change : changes) {
-      links.add(change.getNewChange().getTarget().getLinks().getSelf().getHref());
-    }
-
-    return links;
+    return payload.getPush().getChanges().stream().map(c -> String.join("/",
+        BITBUCKET_API_BASE_URL, BITBUCKET_REPOSITORIES, workspace, repoSlug, COMMIT,
+        c.getNewChange().getTarget().getHash())).collect(Collectors.toList());
   }
 
-  @Override 
+  @Override
   public String toString() {
     return "BitBucketPPRRepositoryAction";
   }
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRServerRepositoryAction.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRServerRepositoryAction.java
index 310d4ed..ef49340 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRServerRepositoryAction.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/action/BitBucketPPRServerRepositoryAction.java
@@ -25,12 +25,16 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 import javax.annotation.Nonnull;
 
 import hudson.model.InvisibleAction;
+import io.jenkins.plugins.bitbucketpushandpullrequest.common.BitBucketPPRUtils;
+import io.jenkins.plugins.bitbucketpushandpullrequest.exception.BitBucketPPRRepositoryNotParsedException;
 import io.jenkins.plugins.bitbucketpushandpullrequest.model.BitBucketPPRPayload;
 import io.jenkins.plugins.bitbucketpushandpullrequest.model.server.BitBucketPPRServerChange;
 import io.jenkins.plugins.bitbucketpushandpullrequest.model.server.BitBucketPPRServerClone;
@@ -39,6 +43,7 @@ public class BitBucketPPRServerRepositoryAction extends InvisibleAction implemen
   private static final Logger logger = Logger.getLogger(BitBucketPPRAction.class.getName());
 
   private final @Nonnull BitBucketPPRPayload payload;
+  private URL baseUrl;
   private List<String> scmUrls = new ArrayList<>(2);
   private String targetBranchName = null;
   private String targetBranchRefId = null;
@@ -51,8 +56,14 @@ public class BitBucketPPRServerRepositoryAction extends InvisibleAction implemen
     List<BitBucketPPRServerClone> clones = payload.getServerRepository().getLinks().getCloneProperty();
 
     for (BitBucketPPRServerClone clone : clones) {
-      if (clone.getName().equalsIgnoreCase("http") || clone.getName().equalsIgnoreCase("https")
-          || clone.getName().equalsIgnoreCase("ssh")) {
+      if (clone.getName().equalsIgnoreCase("http") || clone.getName().equalsIgnoreCase("https")) {
+        try {
+          this.baseUrl = new URL(clone.getHref());
+          this.scmUrls.add(clone.getHref());
+        } catch (MalformedURLException e) {
+          throw new RuntimeException(e);
+        }
+      } else if (clone.getName().equalsIgnoreCase("ssh")) {
         this.scmUrls.add(clone.getHref());
       }
     }
@@ -153,11 +164,7 @@ public class BitBucketPPRServerRepositoryAction extends InvisibleAction implemen
     // returns:
     // /rest/build-status/1.0/commits/{commitId}
 
-    String baseUrl = getBaseUrl(getProjectUrl());
-    if (baseUrl == null) {
-      logger.log(Level.WARNING, "Base url is empty.");
-      return new ArrayList<String>();
-    }
+    String baseUrl = getBaseUrl();
 
     List<BitBucketPPRServerChange> changes = payload.getServerChanges();
     List<String> links = new ArrayList<>();
@@ -168,14 +175,7 @@ public class BitBucketPPRServerRepositoryAction extends InvisibleAction implemen
     return links;
   }
 
-  private String getBaseUrl(String projectSelfUrl) {
-    String baseUrl = null;
-    try {
-      URL url = new URL(projectSelfUrl);
-      baseUrl = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort();
-    } catch (MalformedURLException e) {
-      logger.log(Level.WARNING, "Cannot extract base url", e);
-    }
-    return baseUrl;
+  private String getBaseUrl() {
+    return baseUrl.getProtocol() + "://" + baseUrl.getHost() + ":" + baseUrl.getPort();
   }
 }
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtils.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtils.java
index 1022046..f662877 100644
--- a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtils.java
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtils.java
@@ -1,17 +1,17 @@
 /*******************************************************************************
  * The MIT License
- * 
+ *
  * Copyright (C) 2020, CloudBees, Inc.
- * 
+ *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
  * associated documentation files (the "Software"), to deal in the Software without restriction,
  * including without limitation the rights to use, copy, modify, merge, publish, distribute,
  * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
  * furnished to do so, subject to the following conditions:
- * 
+ *
  * The above copyright notice and this permission notice shall be included in all copies or
  * substantial portions of the Software.
- * 
+ *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
  * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
@@ -23,20 +23,28 @@ package io.jenkins.plugins.bitbucketpushandpullrequest.common;
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import javax.annotation.Nonnull;
 import hudson.EnvVars;
 import hudson.plugins.git.BranchSpec;
 
+import io.jenkins.plugins.bitbucketpushandpullrequest.exception.BitBucketPPRRepositoryNotParsedException;
+
 public class BitBucketPPRUtils {
 
   private static final Logger logger = Logger.getLogger(BitBucketPPRUtils.class.getName());
 
+  public static final String BB_WORKSPACE = "workspace";
+  public static final String BB_REPOSITORY = "repository";
+
   public static boolean matches(String allBranches, String branchName, EnvVars env) {
     String allowedBranchesPattern = allBranches != null ? allBranches : "";
 
@@ -101,4 +109,64 @@ public class BitBucketPPRUtils {
       }
     };
   }
+
+  public static Map<String, String> extractRepositoryNameFromHTTPSUrl(String url)
+      throws BitBucketPPRRepositoryNotParsedException {
+    String workspacePattern = "([^/]+)";
+    Matcher matcher = Pattern.compile(workspacePattern).matcher(url);
+    List<String> workspace = new ArrayList<>();
+    List<String> repoSlug = new ArrayList<>();
+    int x = 0;
+    while (matcher.find()) {
+      if (x == 2) {
+        workspace.add(matcher.group(1));
+      }
+      if (x == 3) {
+        repoSlug.add(matcher.group(1));
+      }
+      x++;
+    }
+
+    if (workspace.isEmpty() || repoSlug.isEmpty()) {
+      throw new BitBucketPPRRepositoryNotParsedException();
+    }
+    Map<String, String> result = new HashMap<>();
+    result.put(BB_WORKSPACE, workspace.get(0));
+    result.put(BB_REPOSITORY, repoSlug.get(0));
+
+    return result;
+  }
+
+  public Map<String, String> extractRepositoryNameFromSSHUri(final String url) {
+    String repoNamePattern = "([^/]+)\\.git$";
+    Matcher repoNameMatcher = Pattern.compile(repoNamePattern).matcher(url);
+    List<String> repoNameResult = new ArrayList<>();
+    while (repoNameMatcher.find()) {
+      repoNameResult.add(repoNameMatcher.group(1));
+    }
+    if (repoNameResult.size() > 1) {
+      logger.warning("An error has occurred matching the name of the bitbucket repository");
+    }
+
+    String workspacePattern = "([^:]+)/";
+    Matcher workspaceNameMatcher = Pattern.compile(workspacePattern).matcher(url);
+    List<String> workspaceNameResult = new ArrayList<>();
+    while (workspaceNameMatcher.find()) {
+      workspaceNameResult.add(workspaceNameMatcher.group(1));
+    }
+    if (workspaceNameResult.size() > 1) {
+      logger.warning("An error has occurred matching the name of the bitbucket workspace");
+    }
+
+    Map<String, String> result = new HashMap<>();
+    result.put(BB_WORKSPACE, workspaceNameResult.get(0));
+    result.put(BB_REPOSITORY, repoNameResult.get(0));
+
+    return result;
+  }
+
+  public Map<String, String> extractRepositoryNameFromHTTPSUrlForTest(String url)
+      throws BitBucketPPRRepositoryNotParsedException {
+    return BitBucketPPRUtils.extractRepositoryNameFromHTTPSUrl(url);
+  }
 }
diff --git a/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/exception/BitBucketPPRRepositoryNotParsedException.java b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/exception/BitBucketPPRRepositoryNotParsedException.java
new file mode 100644
index 0000000..b65946f
--- /dev/null
+++ b/src/main/java/io/jenkins/plugins/bitbucketpushandpullrequest/exception/BitBucketPPRRepositoryNotParsedException.java
@@ -0,0 +1,4 @@
+package io.jenkins.plugins.bitbucketpushandpullrequest.exception;
+
+public class BitBucketPPRRepositoryNotParsedException extends Exception {
+}
diff --git a/src/test/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtilsTest.java b/src/test/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtilsTest.java
new file mode 100644
index 0000000..5536d97
--- /dev/null
+++ b/src/test/java/io/jenkins/plugins/bitbucketpushandpullrequest/common/BitBucketPPRUtilsTest.java
@@ -0,0 +1,49 @@
+package io.jenkins.plugins.bitbucketpushandpullrequest.common;
+
+import io.jenkins.plugins.bitbucketpushandpullrequest.exception.BitBucketPPRRepositoryNotParsedException;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.Map;
+import java.util.stream.Stream;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+class BitBucketPPRUtilsTest {
+
+    @ParameterizedTest
+    @MethodSource("gitSSHRepos")
+    void testExtractRepositoryNameFromSSHUri(String repository, String expectedResultWorkspace, String expectedResultRepository) {
+        BitBucketPPRUtils utils = new BitBucketPPRUtils();
+        Map<String, String> res = utils.extractRepositoryNameFromSSHUri(repository);
+
+        assertEquals(expectedResultWorkspace, res.get(BitBucketPPRUtils.BB_WORKSPACE));
+        assertEquals(expectedResultRepository, res.get(BitBucketPPRUtils.BB_REPOSITORY));
+    }
+
+    private static Stream<Arguments> gitSSHRepos() {
+        return Stream.of(
+                arguments("git@bitbucket.org:work-space/reponame.git","work-space", "reponame"),
+                arguments("git@bitbucket.org:workspace/reponame.git", "workspace", "reponame"),
+                arguments("git@bitbucket.org:work&&space/reponame.git", "work&&space", "reponame"));
+    }
+
+    @ParameterizedTest
+    @MethodSource("gitHTTPSRepos")
+    void testExtractRepositoryNameFromHTTPSUrl(String repository, String expectedResultWorkspace, String expectedResultRepository) throws BitBucketPPRRepositoryNotParsedException {
+        BitBucketPPRUtils utils = new BitBucketPPRUtils();
+        Map<String, String> res = utils.extractRepositoryNameFromHTTPSUrlForTest(repository);
+
+        assertEquals(expectedResultWorkspace, res.get(BitBucketPPRUtils.BB_WORKSPACE));
+        assertEquals(expectedResultRepository, res.get(BitBucketPPRUtils.BB_REPOSITORY));
+    }
+
+    private static Stream<Arguments> gitHTTPSRepos() {
+        return Stream.of(
+                arguments("https://username@bitbucket.org/work-space/reponame","work-space", "reponame"),
+                arguments("https://username@bitbucket.org/workspace/reponame", "workspace", "reponame"),
+                arguments("https://username@bitbucket.org/work&&space/reponame/", "work&&space", "reponame"));
+    }
+}
\ No newline at end of file
