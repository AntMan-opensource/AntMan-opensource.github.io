commit b6749e86505735ec16e8bb8fa4d3243d32d9284b
Author: minux <songmw725@gmail.com>
Date:   Wed Aug 11 16:23:53 2021 +0900

    Prohibit mirroring to internal repositories (#621)
    
    * Prohibit mirroring to internal repositories
    Motivation:
    We should prohibit mirroring to internal repositories which can cause a security incident.
    
    Modifications:
    - Raise an exception if the `localRepo` of mirroring setting is one of `meta` and `dogma` which are internal repositories.
    
    Result:
    - You cannot set up mirroring to internal repositories anymore.

diff --git a/it/src/test/java/com/linecorp/centraldogma/it/mirror/git/GitMirrorTest.java b/it/src/test/java/com/linecorp/centraldogma/it/mirror/git/GitMirrorTest.java
index e19e7d43..43d332fe 100644
--- a/it/src/test/java/com/linecorp/centraldogma/it/mirror/git/GitMirrorTest.java
+++ b/it/src/test/java/com/linecorp/centraldogma/it/mirror/git/GitMirrorTest.java
@@ -46,12 +46,15 @@ import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.CsvSource;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.google.common.base.Strings;
 import com.google.common.io.Files;
 
 import com.linecorp.centraldogma.client.CentralDogma;
+import com.linecorp.centraldogma.common.CentralDogmaException;
 import com.linecorp.centraldogma.common.Change;
 import com.linecorp.centraldogma.common.Entry;
 import com.linecorp.centraldogma.common.Revision;
@@ -392,13 +395,25 @@ class GitMirrorTest {
                 .hasMessageContaining("byte");
     }
 
+    @CsvSource({ "meta", "dogma" })
+    @ParameterizedTest
+    void cannotMirrorToInternalRepositories(String localRepo) {
+        assertThatThrownBy(() -> pushMirrorSettings(localRepo, "/", "/"))
+                .hasCauseInstanceOf(CentralDogmaException.class)
+                .hasMessageContaining("invalid localRepo:");
+    }
+
     private void pushMirrorSettings(@Nullable String localPath, @Nullable String remotePath) {
+        pushMirrorSettings(REPO_FOO, localPath, remotePath);
+    }
+
+    private void pushMirrorSettings(String localRepo, @Nullable String localPath, @Nullable String remotePath) {
         client.push(projName, Project.REPO_META, Revision.HEAD, "Add /mirrors.json",
                     Change.ofJsonUpsert("/mirrors.json",
                                         "[{" +
                                         "  \"type\": \"single\"," +
                                         "  \"direction\": \"REMOTE_TO_LOCAL\"," +
-                                        "  \"localRepo\": \"" + REPO_FOO + "\"," +
+                                        "  \"localRepo\": \"" + localRepo + "\"," +
                                         (localPath != null ? "\"localPath\": \"" + localPath + "\"," : "") +
                                         "  \"remoteUri\": \"" + gitUri + firstNonNull(remotePath, "") + '"' +
                                         "}]")).join();
diff --git a/server/src/main/java/com/linecorp/centraldogma/server/internal/api/ContentServiceV1.java b/server/src/main/java/com/linecorp/centraldogma/server/internal/api/ContentServiceV1.java
index 3e1e8a65..1e54f40e 100644
--- a/server/src/main/java/com/linecorp/centraldogma/server/internal/api/ContentServiceV1.java
+++ b/server/src/main/java/com/linecorp/centraldogma/server/internal/api/ContentServiceV1.java
@@ -29,15 +29,19 @@ import static java.util.Objects.requireNonNull;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Function;
 
 import javax.annotation.Nullable;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
+import com.google.common.collect.Streams;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpResponse;
@@ -76,6 +80,8 @@ import com.linecorp.centraldogma.server.internal.api.converter.MergeQueryRequest
 import com.linecorp.centraldogma.server.internal.api.converter.QueryRequestConverter;
 import com.linecorp.centraldogma.server.internal.api.converter.WatchRequestConverter;
 import com.linecorp.centraldogma.server.internal.api.converter.WatchRequestConverter.WatchRequest;
+import com.linecorp.centraldogma.server.internal.storage.repository.DefaultMetaRepository;
+import com.linecorp.centraldogma.server.storage.project.Project;
 import com.linecorp.centraldogma.server.storage.project.ProjectManager;
 import com.linecorp.centraldogma.server.storage.repository.FindOption;
 import com.linecorp.centraldogma.server.storage.repository.FindOptions;
@@ -90,6 +96,8 @@ import com.linecorp.centraldogma.server.storage.repository.Repository;
 @ExceptionHandler(HttpApiExceptionHandler.class)
 public class ContentServiceV1 extends AbstractService {
 
+    private static final String MIRROR_LOCAL_REPO = "localRepo";
+
     private final WatchService watchService;
 
     public ContentServiceV1(ProjectManager projectManager, CommandExecutor executor,
@@ -177,6 +185,7 @@ public class ContentServiceV1 extends AbstractService {
             Author author,
             CommitMessageDto commitMessage,
             @RequestConverter(ChangesRequestConverter.class) Iterable<Change<?>> changes) {
+        checkMirrorLocalRepo(repository.name(), changes);
 
         final long commitTimeMillis = System.currentTimeMillis();
         return push(commitTimeMillis, author, repository, new Revision(revision), commitMessage, changes)
@@ -390,4 +399,41 @@ public class ContentServiceV1 extends AbstractService {
             @RequestConverter(MergeQueryRequestConverter.class) MergeQuery<T> query) {
         return repository.mergeFiles(new Revision(revision), query).thenApply(DtoConverter::convert);
     }
+
+    /**
+     * Checks if the commit is for mirroring setting and raises an exception if the {@code localRepo} field
+     * is one of {@code meta} and {@code dogma} which are internal repositories.
+     */
+    public static void checkMirrorLocalRepo(String repoName, Iterable<Change<?>> changes) {
+        // TODO(minwoox): Provide an internal API for mirroring setup with a better UI(?) and check this there.
+        if (Project.REPO_META.equals(repoName)) {
+            final Optional<String> notAllowedLocalRepo =
+                    Streams.stream(changes)
+                           .filter(change -> DefaultMetaRepository.PATH_MIRRORS.equals(change.path()))
+                           .filter(change -> change.content() != null)
+                           .map(change -> {
+                               final Object content = change.content();
+                               if (content instanceof JsonNode) {
+                                   final JsonNode node = (JsonNode) content;
+                                   if (!node.isArray()) {
+                                       return null;
+                                   }
+                                   for (JsonNode jsonNode : node) {
+                                       final JsonNode localRepoNode = jsonNode.get(MIRROR_LOCAL_REPO);
+                                       if (localRepoNode != null) {
+                                           final String localRepo = localRepoNode.textValue();
+                                           if (Project.isReservedRepoName(localRepo)) {
+                                               return localRepo;
+                                           }
+                                       }
+                                   }
+                               }
+                               return null;
+                           }).filter(Objects::nonNull).findFirst();
+            if (notAllowedLocalRepo.isPresent()) {
+                throw new IllegalArgumentException("invalid " + MIRROR_LOCAL_REPO + ": " +
+                                                   notAllowedLocalRepo.get());
+            }
+        }
+    }
 }
diff --git a/server/src/main/java/com/linecorp/centraldogma/server/internal/storage/repository/DefaultMetaRepository.java b/server/src/main/java/com/linecorp/centraldogma/server/internal/storage/repository/DefaultMetaRepository.java
index e3f320e6..43bc3b0b 100644
--- a/server/src/main/java/com/linecorp/centraldogma/server/internal/storage/repository/DefaultMetaRepository.java
+++ b/server/src/main/java/com/linecorp/centraldogma/server/internal/storage/repository/DefaultMetaRepository.java
@@ -63,8 +63,7 @@ public class DefaultMetaRepository extends RepositoryWrapper implements MetaRepo
     @VisibleForTesting
     static final String PATH_CREDENTIALS = "/credentials.json";
 
-    @VisibleForTesting
-    static final String PATH_MIRRORS = "/mirrors.json";
+    public static final String PATH_MIRRORS = "/mirrors.json";
 
     private static final String PATH_CREDENTIALS_AND_MIRRORS = PATH_CREDENTIALS + ',' + PATH_MIRRORS;
 
diff --git a/server/src/main/java/com/linecorp/centraldogma/server/internal/thrift/CentralDogmaServiceImpl.java b/server/src/main/java/com/linecorp/centraldogma/server/internal/thrift/CentralDogmaServiceImpl.java
index 2fbb77c9..b289e0ad 100644
--- a/server/src/main/java/com/linecorp/centraldogma/server/internal/thrift/CentralDogmaServiceImpl.java
+++ b/server/src/main/java/com/linecorp/centraldogma/server/internal/thrift/CentralDogmaServiceImpl.java
@@ -17,6 +17,7 @@ package com.linecorp.centraldogma.server.internal.thrift;
 
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.linecorp.centraldogma.common.Author.SYSTEM;
+import static com.linecorp.centraldogma.server.internal.api.ContentServiceV1.checkMirrorLocalRepo;
 import static com.linecorp.centraldogma.server.internal.thrift.Converter.convert;
 import static com.linecorp.centraldogma.server.storage.project.Project.isReservedRepoName;
 import static com.linecorp.centraldogma.server.storage.repository.FindOptions.FIND_ALL_WITHOUT_CONTENT;
@@ -288,11 +289,18 @@ public class CentralDogmaServiceImpl implements CentralDogmaService.AsyncIface {
     @Override
     public void push(String projectName, String repositoryName, Revision baseRevision, Author author,
                      String summary, Comment detail, List<Change> changes, AsyncMethodCallback resultHandler) {
-
+        final List<com.linecorp.centraldogma.common.Change<?>> convertedChanges =
+                convert(changes, Converter::convert);
+        try {
+            checkMirrorLocalRepo(repositoryName, convertedChanges);
+        } catch (Exception e) {
+            resultHandler.onError(e);
+            return;
+        }
         // TODO(trustin): Change Repository.commit() to return a Commit.
         handle(executor.execute(Command.push(convert(author), projectName, repositoryName,
                                              convert(baseRevision), summary, detail.getContent(),
-                                             convert(detail.getMarkup()), convert(changes, Converter::convert)))
+                                             convert(detail.getMarkup()), convertedChanges))
                        .thenCompose(commitResult -> {
                            final com.linecorp.centraldogma.common.Revision newRev = commitResult.revision();
                            return projectManager.get(projectName).repos().get(repositoryName)
