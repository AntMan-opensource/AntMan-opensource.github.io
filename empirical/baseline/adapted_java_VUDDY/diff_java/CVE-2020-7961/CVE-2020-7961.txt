commit 02221b8ffe6245b35ceefd043b92bfd4a1cd4fb0
Author: Carlos Sierra <carlos.sierra@liferay.com>
Date:   Wed Jul 3 16:20:38 2019 +0200

    LPS-97029 Add the logic to check for whitelisted classes
    
    We don't need to check for whitelisted classes when:
     - The requested type is not assignable to the target type
     - The type matches the actual target type
     - The type is a translation from a model interface to a model
     implementation
    
     in other cases, when the requested type is a subclass or an
     implementation of an interface as the target type, the class needs to
     be whitelisted.

diff --git a/portal-impl/src/com/liferay/portal/jsonwebservice/JSONWebServiceActionImpl.java b/portal-impl/src/com/liferay/portal/jsonwebservice/JSONWebServiceActionImpl.java
index 908701c7abab2..5238ce5a0c4e3 100644
--- a/portal-impl/src/com/liferay/portal/jsonwebservice/JSONWebServiceActionImpl.java
+++ b/portal-impl/src/com/liferay/portal/jsonwebservice/JSONWebServiceActionImpl.java
@@ -23,10 +23,13 @@ import com.liferay.portal.kernel.jsonwebservice.JSONWebServiceNaming;
 import com.liferay.portal.kernel.log.Log;
 import com.liferay.portal.kernel.log.LogFactoryUtil;
 import com.liferay.portal.kernel.service.ServiceContext;
+import com.liferay.portal.kernel.util.ArrayUtil;
 import com.liferay.portal.kernel.util.CamelCaseUtil;
 import com.liferay.portal.kernel.util.GetterUtil;
 import com.liferay.portal.kernel.util.LocaleUtil;
 import com.liferay.portal.kernel.util.MethodParameter;
+import com.liferay.portal.kernel.util.PropsKeys;
+import com.liferay.portal.util.PropsUtil;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Method;
@@ -38,6 +41,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 
 import jodd.bean.BeanCopy;
 import jodd.bean.BeanUtil;
@@ -92,6 +96,40 @@ public class JSONWebServiceActionImpl implements JSONWebServiceAction {
 		return new JSONRPCResponse(jsonRPCRequest, result, exception);
 	}
 
+	private void _checkTypeIsAssignable(
+		int argumentPos, Class<?> targetClass, Class<?> parameterType) {
+
+		if (Objects.equals(targetClass, parameterType)) {
+			return;
+		}
+
+		String parameterTypeName = parameterType.getName();
+
+		if (!ReflectUtil.isTypeOf(parameterType, targetClass)) {
+			throw new IllegalArgumentException(
+				StringBundler.concat(
+					"Unmatched argument type ", parameterTypeName,
+					" for method argument ", argumentPos));
+		}
+
+		if (parameterTypeName.equals(
+				_jsonWebServiceNaming.convertModelClassToImplClassName(
+					targetClass))) {
+
+			return;
+		}
+
+		if (ArrayUtil.contains(
+				_JSONWS_WEB_SERVICE_PARAMETER_TYPE_WHITELIST_CLASS_NAMES,
+				parameterTypeName)) {
+
+			return;
+		}
+
+		throw new TypeConversionException(
+			parameterTypeName + " is not allowed to be instantiated");
+	}
+
 	private Object _convertListToArray(List<?> list, Class<?> componentType) {
 		Object array = Array.newInstance(componentType, list.size());
 
@@ -443,7 +481,9 @@ public class JSONWebServiceActionImpl implements JSONWebServiceAction {
 			Object parameterValue = null;
 
 			if (value != null) {
-				Class<?> parameterType = methodParameters[i].getType();
+				Class<?> targetClass = methodParameters[i].getType();
+
+				Class<?> parameterType = targetClass;
 
 				String parameterTypeName =
 					_jsonWebServiceActionParameters.getParameterTypeName(
@@ -454,15 +494,7 @@ public class JSONWebServiceActionImpl implements JSONWebServiceAction {
 
 					parameterType = classLoader.loadClass(parameterTypeName);
 
-					if (!ReflectUtil.isTypeOf(
-							parameterType, methodParameters[i].getType())) {
-
-						throw new IllegalArgumentException(
-							StringBundler.concat(
-								"Unmatched argument type ",
-								parameterType.getName(),
-								" for method argument ", i));
-					}
+					_checkTypeIsAssignable(i, targetClass, parameterType);
 				}
 
 				if (value.equals(Void.TYPE)) {
@@ -500,6 +532,12 @@ public class JSONWebServiceActionImpl implements JSONWebServiceAction {
 		return parameters;
 	}
 
+	private static final String[]
+		_JSONWS_WEB_SERVICE_PARAMETER_TYPE_WHITELIST_CLASS_NAMES =
+			PropsUtil.getArray(
+				PropsKeys.
+					JSONWS_WEB_SERVICE_PARAMETER_TYPE_WHITELIST_CLASS_NAMES);
+
 	private static final Log _log = LogFactoryUtil.getLog(
 		JSONWebServiceActionImpl.class);
 
