commit b54d4e6693e0bcd63a97a0328f4f065b8a81b75e
Author: Carsten Ziegeler <cziegeler@apache.org>
Date:   Fri Jan 19 09:22:19 2024 +0100

    SLING-12233 : Ignore resource type with invalid paths

diff --git a/src/main/java/org/apache/sling/servlets/resolver/internal/SlingScriptResolverImpl.java b/src/main/java/org/apache/sling/servlets/resolver/internal/SlingScriptResolverImpl.java
index 61340e1..ff13872 100644
--- a/src/main/java/org/apache/sling/servlets/resolver/internal/SlingScriptResolverImpl.java
+++ b/src/main/java/org/apache/sling/servlets/resolver/internal/SlingScriptResolverImpl.java
@@ -63,32 +63,34 @@ public class SlingScriptResolverImpl
     @Override
     public SlingScript findScript(final ResourceResolver resourceResolver, final String name)
     throws SlingException {
-
-        // is the path absolute
         SlingScript script = null;
-        if (name.startsWith("/")) {
+        // is the path valid
+        if (!SlingServletResolver.isInvalidPath(name)) {
+            // is the path absolute
+            if (name.startsWith("/")) {
 
-            final String path = ResourceUtil.normalize(name);
-            if ( SlingServletResolver.isPathAllowed(path, this.executionPaths) ) {
-                final Resource resource = resourceResolver.getResource(path);
-                if ( resource != null ) {
-                    script = resource.adaptTo(SlingScript.class);
+                final String path = ResourceUtil.normalize(name);
+                if ( SlingServletResolver.isPathAllowed(path, this.executionPaths) ) {
+                    final Resource resource = resourceResolver.getResource(path);
+                    if ( resource != null ) {
+                        script = resource.adaptTo(SlingScript.class);
+                    }
                 }
-            }
-        } else {
+            } else {
 
-            // relative script resolution against search path
-            final String[] path = resourceResolver.getSearchPath();
-            for (int i = 0; script == null && i < path.length; i++) {
-                final String scriptPath = ResourceUtil.normalize(path[i] + name);
-                if ( SlingServletResolver.isPathAllowed(scriptPath, this.executionPaths) ) {
-                    final Resource resource = resourceResolver.getResource(scriptPath);
-                    if (resource != null) {
-                        script = resource.adaptTo(SlingScript.class);
+                // relative script resolution against search path
+                final String[] path = resourceResolver.getSearchPath();
+                for (int i = 0; script == null && i < path.length; i++) {
+                    final String scriptPath = ResourceUtil.normalize(path[i] + name);
+                    if ( SlingServletResolver.isPathAllowed(scriptPath, this.executionPaths) ) {
+                        final Resource resource = resourceResolver.getResource(scriptPath);
+                        if (resource != null) {
+                            script = resource.adaptTo(SlingScript.class);
+                        }
                     }
                 }
-            }
 
+            }
         }
 
         // log result
diff --git a/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java b/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java
index 00fd7c4..2eecb28 100644
--- a/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java
+++ b/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java
@@ -452,6 +452,16 @@ public class SlingServletResolver
             final ResourceResolver resolver) {
         Servlet servlet = null;
 
+        if (isInvalidPath(scriptNameOrResourceType)) {
+            if (request != null) {
+                request.getRequestProgressTracker().log(
+                        "Will not look for a servlet at {0} as it contains more than two consecutive dots",
+                        scriptNameOrResourceType
+                        );
+            }
+            return null;
+        }
+
         // first check whether the type of a resource is the absolute
         // path of a servlet (or script)
         if (scriptNameOrResourceType.charAt(0) == '/') {
@@ -732,6 +742,33 @@ public class SlingServletResolver
         this.defaultExtensions.set(null);
     }
 
+    /**
+     * Reject paths with more than two consecutive dots
+     * @param path The path
+     * @return {@code true} if the path is invalid
+     */
+    public static boolean isInvalidPath(final String path) {
+        int index = 0;
+        while (index < path.length()) {
+            int charCount = 0;
+            int dotCount = 0;
+            // count dots (".") and total chars in each path segment (between two '/')
+            while (index < path.length() && path.charAt(index) != '/') {
+                if (path.charAt(index) == '.') {
+                    dotCount++;
+                }
+                charCount++;
+                index++;
+            }
+            // if all chars are dots (".") and there are more than two dots, then the path is rejected
+            if (charCount > 2 && dotCount == charCount) {
+                return true;
+            }
+            index++;
+        }
+        return false;
+    }
+
     /**
      * This method checks whether a path is allowed to be executed.
      *
diff --git a/src/test/java/org/apache/sling/servlets/resolver/internal/SlingServletResolverTest.java b/src/test/java/org/apache/sling/servlets/resolver/internal/SlingServletResolverTest.java
new file mode 100644
index 0000000..f0bc8aa
--- /dev/null
+++ b/src/test/java/org/apache/sling/servlets/resolver/internal/SlingServletResolverTest.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.servlets.resolver.internal;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
+public class SlingServletResolverTest {
+
+    @Test public void testIsInvalidPath() {
+        assertFalse(SlingServletResolver.isInvalidPath("/../"));
+        assertTrue(SlingServletResolver.isInvalidPath("/.../"));
+        assertTrue(SlingServletResolver.isInvalidPath("/..../"));
+
+        assertFalse(SlingServletResolver.isInvalidPath("/.."));
+        assertTrue(SlingServletResolver.isInvalidPath("/..."));
+        assertTrue(SlingServletResolver.isInvalidPath("/...."));
+
+        assertFalse(SlingServletResolver.isInvalidPath("../"));
+        assertTrue(SlingServletResolver.isInvalidPath(".../"));
+        assertTrue(SlingServletResolver.isInvalidPath("..../"));
+
+        assertFalse(SlingServletResolver.isInvalidPath(".."));
+        assertTrue(SlingServletResolver.isInvalidPath("..."));
+        assertTrue(SlingServletResolver.isInvalidPath("...."));
+
+        assertFalse(SlingServletResolver.isInvalidPath("/../aa"));
+        assertTrue(SlingServletResolver.isInvalidPath("/.../aa"));
+        assertTrue(SlingServletResolver.isInvalidPath("/..../aa"));
+
+        assertFalse(SlingServletResolver.isInvalidPath("aa/../"));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/.../"));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/..../"));
+
+        assertFalse(SlingServletResolver.isInvalidPath("aa/../"));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/.../"));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/..../"));
+
+        assertFalse(SlingServletResolver.isInvalidPath("aa/../aa"));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/.../aa"));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/..../aa"));
+
+        assertFalse(SlingServletResolver.isInvalidPath("/aa/../aa"));
+        assertTrue(SlingServletResolver.isInvalidPath("/aa/.../aa"));
+        assertTrue(SlingServletResolver.isInvalidPath("/aa/..../aa"));
+
+        assertFalse(SlingServletResolver.isInvalidPath("aa/.."));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/..."));
+        assertTrue(SlingServletResolver.isInvalidPath("aa/...."));
+    }
+}
