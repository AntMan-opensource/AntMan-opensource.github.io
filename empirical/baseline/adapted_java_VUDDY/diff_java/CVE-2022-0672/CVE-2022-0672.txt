commit 076b88052c2a63f60a98ef4b45e3e38c217b70ae
Author: Fred Bricon <fbricon@gmail.com>
Date:   Mon Feb 14 12:34:35 2022 +0100

    Limit resource downloads and redirects to http, https and ftp
    
    Signed-off-by: Fred Bricon <fbricon@gmail.com>

diff --git a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java
index 412f3c92..006745e7 100644
--- a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java
+++ b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java
@@ -65,7 +65,7 @@ public class CacheResourcesManager {
 
 	private boolean downloadExternalResources;
 
-	private final Set<String> protocolsForCahe;
+	private final Set<String> protocolsForCache;
 
 	class ResourceInfo {
 
@@ -132,7 +132,7 @@ public class CacheResourcesManager {
 
 	public CacheResourcesManager(Cache<String, CacheResourceDownloadedException> cache) {
 		resourcesLoading = new HashMap<>();
-		protocolsForCahe = new HashSet<>();
+		protocolsForCache = new HashSet<>();
 		unavailableURICache = cache;
 		addDefaultProtocolsForCache();
 		setDownloadExternalResources(true);
@@ -183,12 +183,17 @@ public class CacheResourcesManager {
 
 	private CompletableFuture<Path> downloadResource(final String resourceURI, Path resourceCachePath) {
 		return CompletableFuture.supplyAsync(() -> {
-			LOGGER.info("Downloading " + resourceURI + " to " + resourceCachePath + "...");
 			long start = System.currentTimeMillis();
 			URLConnection conn = null;
 			try {
 				String actualURI = resourceURI;
 				URL url = new URL(actualURI);
+				String originalProtocol = url.getProtocol();
+				if (!protocolsForCache.contains(formatProtocol(originalProtocol))) {
+					throw new InvalidURIException(resourceURI, InvalidURIException.InvalidURIError.UNSUPPORTED_PROTOCOL, originalProtocol);
+				}
+				boolean isOriginalRequestSecure = isSecure(originalProtocol);
+				LOGGER.info("Downloading " + resourceURI + " to " + resourceCachePath + "...");
 				conn = url.openConnection();
 				conn.setRequestProperty(USER_AGENT_KEY, USER_AGENT_VALUE);
 				/* XXX: This should really be implemented using HttpClient or similar */
@@ -197,6 +202,13 @@ public class CacheResourcesManager {
 				{
 					allowedRedirects--;
 					url = new URL(actualURI = conn.getHeaderField("Location")); //$NON-NLS-1$
+					String protocol = url.getProtocol();
+					if (!protocolsForCache.contains(formatProtocol(protocol))) {
+						throw new InvalidURIException(url.toString(), InvalidURIException.InvalidURIError.UNSUPPORTED_PROTOCOL, protocol);
+					}
+					if (isOriginalRequestSecure && !isSecure(protocol)) {
+						throw new InvalidURIException(resourceURI, InvalidURIException.InvalidURIError.INSECURE_REDIRECTION, url.toString());
+					}
 					conn = url.openConnection();
 					conn.setRequestProperty(USER_AGENT_KEY, USER_AGENT_VALUE);
 				}
@@ -238,6 +250,11 @@ public class CacheResourcesManager {
 		});
 	}
 
+	private boolean isSecure(String protocol) {
+		//really dumb way to check for secure protocol
+		return "https".equals(protocol);
+	}
+
 	public static Path getResourceCachePath(String resourceURI) throws IOException {
 		URI uri = null;
 		try {
@@ -345,8 +362,8 @@ public class CacheResourcesManager {
 	 *
 	 * @param protocol the protocol to add.
 	 */
-	public void addProtocolForCahe(String protocol) {
-		protocolsForCahe.add(formatProtocol(protocol));
+	public void addProtocolForCache(String protocol) {
+		protocolsForCache.add(formatProtocol(protocol));
 	}
 
 	/**
@@ -355,8 +372,8 @@ public class CacheResourcesManager {
 	 *
 	 * @param protocol the protocol to remove.
 	 */
-	public void removeProtocolForCahe(String protocol) {
-		protocolsForCahe.remove(formatProtocol(protocol));
+	public void removeProtocolForCache(String protocol) {
+		protocolsForCache.remove(formatProtocol(protocol));
 	}
 
 	/**
@@ -384,7 +401,7 @@ public class CacheResourcesManager {
 		if (StringUtils.isEmpty(url)) {
 			return false;
 		}
-		for (String protocol : protocolsForCahe) {
+		for (String protocol : protocolsForCache) {
 			if (url.startsWith(protocol)) {
 				return true;
 			}
@@ -396,9 +413,9 @@ public class CacheResourcesManager {
 	 * Add http, https, ftp protocol to use cache.
 	 */
 	private void addDefaultProtocolsForCache() {
-		addProtocolForCahe("http");
-		addProtocolForCahe("https");
-		addProtocolForCahe("ftp");
+		addProtocolForCache("http");
+		addProtocolForCache("https");
+		addProtocolForCache("ftp");
 	}
 
 }
diff --git a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java
index 4d04f8ae..973f6a0e 100644
--- a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java
+++ b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java
@@ -30,7 +30,11 @@ public class InvalidURIException extends CacheResourceException {
 
 		ILLEGAL_SYNTAX("The ''{0}'' URI cannot be parsed: {1}"),
 		
-		INVALID_PATH("''{0}'' does not resolve to a valid URI.");
+		INVALID_PATH("''{0}'' does not resolve to a valid URI."),
+		
+		UNSUPPORTED_PROTOCOL("Unsupported ''{1}'' protocol in ''{0}''"),
+		
+		INSECURE_REDIRECTION("Redirection from ''{0}'' to insecure ''{1}'' is forbidden");
 
 		private final String rawMessage;
 
@@ -51,11 +55,21 @@ public class InvalidURIException extends CacheResourceException {
 		this.errorCode = errorCode;
 	}
 
-	public InvalidURIException(String resourceURI, InvalidURIError errorCode) {
-		super(resourceURI, errorCode.getMessage(resourceURI));
+	public InvalidURIException(String resourceURI, InvalidURIError errorCode, String... arguments) {
+		super(resourceURI, errorCode.getMessage(combine(resourceURI, arguments)));
 		this.errorCode = errorCode;
 	}
 
+	private static Object[] combine(String resourceURI, String[] arguments) {
+		if (arguments == null || arguments.length == 0) {
+			return new Object[]{resourceURI};
+		}
+		String[] newArr = new String[arguments.length + 1];
+		System.arraycopy(arguments, 0, newArr, 1, arguments.length);
+		newArr[0] = resourceURI;
+		return newArr;
+	}
+
 	public InvalidURIError getErrorCode() {
 		return errorCode;
 	}
diff --git a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java
index 428ec344..2d526d24 100644
--- a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java
+++ b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java
@@ -24,7 +24,16 @@ import java.nio.file.Path;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.eclipse.jetty.server.Handler;
+import org.eclipse.jetty.server.Request;
+import org.eclipse.jetty.server.handler.AbstractHandler;
+import org.eclipse.jetty.server.handler.HandlerWrapper;
 import org.eclipse.lemminx.AbstractCacheBasedTest;
+import org.eclipse.lemminx.utils.ExceptionUtils;
 import org.eclipse.lemminx.utils.FilesUtils;
 import org.eclipse.lemminx.utils.platform.Platform;
 import org.junit.jupiter.api.AfterEach;
@@ -156,9 +165,36 @@ public class CacheResourcesManagerTest extends AbstractCacheBasedTest {
 			assertEquals(InvalidURIException.class, e.getClass());
 			assertEquals(InvalidURIException.InvalidURIError.INVALID_PATH, ((InvalidURIException)e).getErrorCode());
 		}
-		
-
-		
+	}
+	
+	@Test
+	public void testForbiddenRedirection() throws Exception {    
+		Handler redirectHandler = new AbstractHandler() {
+			@Override
+			public void handle(String target, Request baseRequest, HttpServletRequest request,
+					HttpServletResponse response) throws IOException, ServletException {
+				response.setHeader("Location", request.getParameter("redirect"));
+			}
+			
+		}; 
+		FileServer server = new FileServer(redirectHandler);
+		server.start();
+		String uri = server.getUri("/?redirect=file:///etc/password");
+		try {
+			cacheResourcesManager.getResource(uri);
+			fail("cacheResourcesManager should be busy downloading the url");
+		} catch (CacheResourceDownloadingException containsFuture) {
+			try {
+				containsFuture.getFuture().get(2, TimeUnit.SECONDS);
+				fail("Download should have failed");
+			} catch (ExecutionException failedDownload) {
+				Throwable cause = failedDownload.getCause();
+				assertEquals(CacheResourceDownloadedException.class, cause.getClass());
+				Throwable rootCause = ExceptionUtils.getRootCause(cause);
+				assertEquals(InvalidURIException.InvalidURIError.UNSUPPORTED_PROTOCOL, ((InvalidURIException)rootCause).getErrorCode());
+				assertEquals("Unsupported 'file' protocol in 'file:/etc/password'", rootCause.getMessage());
+			}
+		}
 	}
 
 	private Cache<String, CacheResourceDownloadedException> testingCache() {
diff --git a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/FileServer.java b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/FileServer.java
index f7022888..0c1fc6fd 100644
--- a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/FileServer.java
+++ b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/FileServer.java
@@ -52,15 +52,26 @@ public class FileServer {
 	 */
 	public FileServer(Path baseDir) throws IOException {
 		Files.createDirectories(baseDir);
-		server = new Server(0);
 		ResourceHandler resourceHandler = new ModifiedResourceHandler();
 		resourceHandler.setResourceBase(baseDir.toUri().toString());
 		resourceHandler.setDirectoriesListed(true);
-		HandlerList handlers = new HandlerList();
-		handlers.setHandlers(new Handler[] { resourceHandler, new DefaultHandler() });
-		server.setHandler(handlers);
+		serve(resourceHandler, new DefaultHandler());
+	}
+	
+	/**
+	 * Creates an http server on a random port, delegating to the given handlers
+	 * @param handlers the Handlers to delegate serving to.
+	 * @throws IOException
+	 */
+	public FileServer(Handler...handlers) throws IOException {
+		serve(handlers);
 	}
 
+	private void serve(Handler...handlers) {
+		server = new Server(0);
+		server.setHandler(new HandlerList(handlers));
+	}
+	
 	/**
 	 * @return the port the server was started on.
 	 * @throws Exception
