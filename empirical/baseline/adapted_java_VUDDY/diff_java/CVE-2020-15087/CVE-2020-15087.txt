commit 484bb73ca278cdcdf67814953e4f3282fb1efaaa
Author: Dain Sundstrom <dain@iq80.com>
Date:   Wed Jun 24 11:28:20 2020 -0700

    Encapsulate internal request processing

diff --git a/presto-main/src/main/java/io/prestosql/server/InternalAuthenticationManager.java b/presto-main/src/main/java/io/prestosql/server/InternalAuthenticationManager.java
index 99c7707dea..4d89909d61 100644
--- a/presto-main/src/main/java/io/prestosql/server/InternalAuthenticationManager.java
+++ b/presto-main/src/main/java/io/prestosql/server/InternalAuthenticationManager.java
@@ -22,17 +22,21 @@ import io.jsonwebtoken.JwtException;
 import io.jsonwebtoken.Jwts;
 import io.jsonwebtoken.SignatureAlgorithm;
 import io.prestosql.server.security.InternalPrincipal;
+import io.prestosql.spi.security.Identity;
 
 import javax.inject.Inject;
 import javax.ws.rs.container.ContainerRequestContext;
+import javax.ws.rs.core.Response;
 
-import java.security.Principal;
 import java.time.ZonedDateTime;
 import java.util.Date;
 
 import static io.airlift.http.client.Request.Builder.fromRequest;
+import static io.prestosql.server.ServletSecurityUtils.setAuthenticatedIdentity;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Objects.requireNonNull;
+import static javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE;
+import static javax.ws.rs.core.Response.Status.UNAUTHORIZED;
 
 public class InternalAuthenticationManager
         implements HttpRequestFilter
@@ -72,25 +76,32 @@ public class InternalAuthenticationManager
         this.nodeId = nodeId;
     }
 
-    public boolean isInternalRequest(ContainerRequestContext request)
+    public static boolean isInternalRequest(ContainerRequestContext request)
     {
         return request.getHeaders().getFirst(PRESTO_INTERNAL_BEARER) != null;
     }
 
-    public Principal authenticateInternalRequest(ContainerRequestContext request)
+    public void handleInternalRequest(ContainerRequestContext request)
     {
-        String internalBarer = request.getHeaders().getFirst(PRESTO_INTERNAL_BEARER);
+        String subject;
         try {
-            String subject = parseJwt(internalBarer);
-            return new InternalPrincipal(subject);
+            subject = parseJwt(request.getHeaders().getFirst(PRESTO_INTERNAL_BEARER));
         }
         catch (JwtException e) {
             log.error(e, "Internal authentication failed");
-            return null;
+            request.abortWith(Response.status(UNAUTHORIZED)
+                    .type(TEXT_PLAIN_TYPE.toString())
+                    .build());
+            return;
         }
         catch (RuntimeException e) {
             throw new RuntimeException("Authentication error", e);
         }
+
+        Identity identity = Identity.forUser("<internal>")
+                .withPrincipal(new InternalPrincipal(subject))
+                .build();
+        setAuthenticatedIdentity(request, identity);
     }
 
     @Override
diff --git a/presto-main/src/main/java/io/prestosql/server/security/AuthenticationFilter.java b/presto-main/src/main/java/io/prestosql/server/security/AuthenticationFilter.java
index 142f23f2e5..2b181b0075 100644
--- a/presto-main/src/main/java/io/prestosql/server/security/AuthenticationFilter.java
+++ b/presto-main/src/main/java/io/prestosql/server/security/AuthenticationFilter.java
@@ -25,16 +25,13 @@ import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.container.ContainerRequestFilter;
 import javax.ws.rs.container.ContainerResponseContext;
 import javax.ws.rs.container.ContainerResponseFilter;
-import javax.ws.rs.core.Response;
 
-import java.security.Principal;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 
 import static com.google.common.base.Strings.emptyToNull;
-import static com.google.common.net.MediaType.PLAIN_TEXT_UTF_8;
 import static io.prestosql.client.PrestoHeaders.PRESTO_USER;
 import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;
 import static io.prestosql.server.ServletSecurityUtils.sendErrorMessage;
@@ -44,7 +41,6 @@ import static io.prestosql.server.security.BasicAuthCredentials.extractBasicAuth
 import static java.util.Objects.requireNonNull;
 import static javax.ws.rs.Priorities.AUTHENTICATION;
 import static javax.ws.rs.core.Response.Status.FORBIDDEN;
-import static javax.ws.rs.core.Response.Status.UNAUTHORIZED;
 
 @Priority(AUTHENTICATION)
 public class AuthenticationFilter
@@ -68,18 +64,8 @@ public class AuthenticationFilter
     @Override
     public void filter(ContainerRequestContext request)
     {
-        if (internalAuthenticationManager.isInternalRequest(request)) {
-            Principal principal = internalAuthenticationManager.authenticateInternalRequest(request);
-            if (principal == null) {
-                request.abortWith(Response.status(UNAUTHORIZED)
-                        .type(PLAIN_TEXT_UTF_8.toString())
-                        .build());
-                return;
-            }
-            Identity identity = Identity.forUser("<internal>")
-                    .withPrincipal(principal)
-                    .build();
-            setAuthenticatedIdentity(request, identity);
+        if (InternalAuthenticationManager.isInternalRequest(request)) {
+            internalAuthenticationManager.handleInternalRequest(request);
             return;
         }
 
