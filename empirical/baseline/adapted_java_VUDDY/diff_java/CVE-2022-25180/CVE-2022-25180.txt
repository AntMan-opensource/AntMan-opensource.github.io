commit 886676efdd711e126307ec70a539f2fe613151f9
Author: Yaroslav Afenkin <yaroslav.afenkin@gmail.com>
Date:   Wed Feb 9 16:45:36 2022 -0500

    [SECURITY-2443]

diff --git a/src/main/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayAction.java b/src/main/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayAction.java
index 6691f877..1c7c4da9 100644
--- a/src/main/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayAction.java
+++ b/src/main/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayAction.java
@@ -35,8 +35,10 @@ import hudson.init.Initializer;
 import hudson.model.Action;
 import hudson.model.Cause;
 import hudson.model.CauseAction;
+import hudson.model.Failure;
 import hudson.model.Item;
 import hudson.model.ParametersAction;
+import hudson.model.PasswordParameterValue;
 import hudson.model.Queue;
 import hudson.model.Run;
 import hudson.model.queue.QueueTaskFuture;
@@ -262,12 +264,22 @@ public class ReplayAction implements Action {
         }
         actions.add(new ReplayFlowFactoryAction(replacementMainScript, replacementLoadedScripts, execution.isSandbox()));
         actions.add(new CauseAction(new Cause.UserIdCause(), new ReplayCause(run)));
+
+        if (hasPasswordParameter(this.run)) {
+            throw new Failure("Replay is not allowed when password parameters are used.");
+        }
+
         for (Class<? extends Action> c : COPIED_ACTIONS) {
             actions.addAll(run.getActions(c));
         }
         return ParameterizedJobMixIn.scheduleBuild2(run.getParent(), 0, actions.toArray(new Action[actions.size()]));
     }
 
+    private boolean hasPasswordParameter(Run run) {
+        ParametersAction pa = run.getAction(ParametersAction.class);
+        return pa != null && pa.getParameters().stream().anyMatch(PasswordParameterValue.class::isInstance);
+    }
+
     /**
      * Finds a set of Groovy class names which are eligible for replacement.
      * @param execution the associated execution
diff --git a/src/test/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayActionTest.java b/src/test/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayActionTest.java
index 8e3eef2c..7b83aed5 100644
--- a/src/test/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayActionTest.java
+++ b/src/test/java/org/jenkinsci/plugins/workflow/cps/replay/ReplayActionTest.java
@@ -33,9 +33,12 @@ import hudson.XmlFile;
 import hudson.cli.CLICommandInvoker;
 import hudson.init.InitMilestone;
 import hudson.init.Initializer;
+import hudson.model.Failure;
 import hudson.model.Item;
 import hudson.model.ParametersAction;
 import hudson.model.ParametersDefinitionProperty;
+import hudson.model.PasswordParameterDefinition;
+import hudson.model.PasswordParameterValue;
 import hudson.model.Run;
 import hudson.model.StringParameterDefinition;
 import hudson.model.StringParameterValue;
@@ -135,6 +138,21 @@ public class ReplayActionTest {
         });
     }
 
+    @Issue("SECURITY-2443")
+    @Test public void withPasswordParameter() {
+        story.then(r -> {
+            WorkflowJob p = story.j.jenkins.createProject(WorkflowJob.class, "p");
+            p.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("passwordParam", "top secret", "")));
+            p.setDefinition(new CpsFlowDefinition("echo(/passwordParam: ${passwordParam}/)", true));
+            WorkflowRun run1 = story.j.assertBuildStatusSuccess(p.scheduleBuild2(0,
+                    new ParametersAction(new PasswordParameterValue("passwordParam", "confidential"))));
+
+            // When we replay a build with password parameter it should fail with access denied exception.
+            assertThrows(Failure.class,
+                    () -> run1.getAction(ReplayAction.class).run("echo(/Replaying passwordParam: ${passwordParam}/)", Collections.emptyMap()).get());
+        });
+    }
+
     @Issue("JENKINS-50784")
     @Test public void lazyLoadExecutionStillReplayable() throws Exception {
         story.then( r-> {
