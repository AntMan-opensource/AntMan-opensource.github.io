commit 3bf623f286bde25325833ed9f0091cb5b377a12d
Author: boaglio <boaglio@gmail.com>
Date:   Sat Oct 24 02:15:40 2020 -0300

    +hidden password

diff --git a/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/EnvUtil.java b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/EnvUtil.java
new file mode 100644
index 0000000..6016bcf
--- /dev/null
+++ b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/EnvUtil.java
@@ -0,0 +1,48 @@
+package org.jenkinsci.plugins.sqlplus.script.runner;
+
+import java.io.IOException;
+
+import hudson.Launcher;
+import hudson.model.Run;
+import hudson.model.TaskListener;
+import hudson.remoting.LocalChannel;
+import hudson.remoting.VirtualChannel;
+
+public class EnvUtil {
+
+	private static final String WINDOWS_OS = "win";
+
+	private static final String OPERATION_SYSTEM = "os.name";
+
+	private static final String OPERATION_SYSTEM_SLAVE = "OS";
+	
+	public static boolean isSlaveMachine(Launcher launcher) {
+		VirtualChannel vc = launcher.getChannel();
+		boolean slaveMachine = true;
+		if (vc instanceof LocalChannel) {
+			slaveMachine = false;
+		}
+		return slaveMachine;
+	}
+
+	public static boolean isWindowsOS(boolean slaveMachine,TaskListener listener,Run<?, ?> build) throws IOException, InterruptedException {
+
+		boolean isWindows = false;
+
+		if (slaveMachine) {
+			String osSlave = build.getEnvironment(listener).get(OPERATION_SYSTEM_SLAVE);
+			if (osSlave != null) {
+				isWindows = osSlave.toLowerCase().indexOf(WINDOWS_OS) >= 0;
+			}
+		} else {
+			String osMaster = System.getProperty(OPERATION_SYSTEM);
+			if (osMaster != null) {
+				isWindows = osMaster.toLowerCase().indexOf(WINDOWS_OS) >= 0;
+			}
+		}
+
+		return isWindows;
+
+	}
+
+}
diff --git a/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/MessageUtil.java b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/MessageUtil.java
new file mode 100644
index 0000000..0e15137
--- /dev/null
+++ b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/MessageUtil.java
@@ -0,0 +1,59 @@
+package org.jenkinsci.plugins.sqlplus.script.runner;
+
+public class MessageUtil {
+
+	// console messages
+	public static final String MSG_TEMP_SCRIPT = Messages.SQLPlusRunner_tempScript();
+	public static final String ON = Messages.SQLPlusRunner_on();
+	public static final String FOUND_SQL_PLUS_ON = "found SQL*Plus on ";
+	public static final String WINDOWS_FILE_SEPARATOR = "\\";	
+	public static final String MSG_ORACLE_HOME = Messages.SQLPlusRunner_usingOracleHome();
+	public static final String MSG_SCRIPT = Messages.SQLPlusRunner_runningScript();
+	public static final String MSG_DEFINED_SCRIPT = Messages.SQLPlusRunner_runningDefinedScript();
+	public static final String MSG_GET_ORACLE_HOME = Messages.SQLPlusRunner_gettingOracleHome();
+	public static final String MSG_CUSTOM_ORACLE_HOME = Messages.SQLPlusRunner_usingCustomOracleHome();
+	public static final String MSG_CUSTOM_SQLPLUS_HOME = Messages.SQLPlusRunner_usingCustomSQLPlusHome();
+	public static final String MSG_CUSTOM_TNS_ADMIN = Messages.SQLPlusRunner_usingCustomTNSAdmin();
+	public static final String MSG_GLOBAL_ORACLE_HOME = Messages.SQLPlusRunner_usingGlobalOracleHome();
+	public static final String MSG_GLOBAL_SQLPLUS_HOME = Messages.SQLPlusRunner_usingGlobalSQLPlusHome();
+	public static final String MSG_GLOBAL_TNS_ADMIN = Messages.SQLPlusRunner_usingGlobalTNSAdmin();
+	public static final String MSG_USING_DETECTED_ORACLE_HOME = Messages.SQLPlusRunner_usingDetectedOracleHome();
+	public static final String MSG_GLOBAL_ORACLE_HOME_SELECTED = Messages.SQLPlusRunner_globalOracleHomeSelected();
+	public static final String MSG_GLOBAL_SQLPLUS_HOME_SELECTED = Messages.SQLPlusRunner_globalSQLPlusHomeSelected();
+	public static final String MSG_GLOBAL_TNS_ADMIN_SELECTED = Messages.SQLPlusRunner_globalTNSAdminSelected();
+	public static final String MSG_ERROR = Messages.SQLPlusRunner_error();
+	public static final String MSG_GET_SQL_PLUS_VERSION = Messages.SQLPlusRunner_gettingSQLPlusVersion();
+	public static final String MSG_ORACLE_HOME_MISSING = Messages.SQLPlusRunner_missingOracleHome();
+	public static final String MSG_TRY_DETECTED_ORACLE_HOME = Messages.SQLPlusRunner_tryToDetectOracleHome();
+	public static final String MSG_GLOBAL_ORACLE_HOME_SELECTED_ANYWAY = Messages
+			.SQLPlusRunner_globalOracleHomeSelectedAnyway();
+	public static final String LOCAL_DATABASE_MSG = "local";
+	public static final String DEBUG_MSG = "[DEBUG] ";
+	public static final String HIDDEN_PASSWORD = "********";
+	public static final String LINE = Messages.SQLPlusRunner_line();
+
+	// for executing commands
+	public static final String AT = "@";
+	public static final String SLASH = "/";
+	public static final String DOUBLE_QUOTES = "\"";
+
+	// for variables
+	public static final String ENV_LD_LIBRARY_PATH = "LD_LIBRARY_PATH";
+	public static final String ENV_ORACLE_HOME = "ORACLE_HOME";
+	public static final String ENV_TNS_ADMIN = "TNS_ADMIN";
+	public static final String ENV_PASSWORD = "HIDDEN_PASSWORD";
+	public static final String ENV_PASSWORD_FOR_WINDOWS = "%HIDDEN_PASSWORD%";
+	public static final String ENV_PASSWORD_FOR_LINUX = "$HIDDEN_PASSWORD";
+
+	// for SQL*Plus
+	public static final String SQLPLUS_TRY_LOGIN_JUST_ONCE = "-L";
+	public static final String SQLPLUS_VERSION = "-v";
+	public static final String SQLPLUS = "sqlplus";
+	public static final String SQLPLUS_FOR_WINDOWS = "sqlplus.exe";
+	public static final String LIB_DIR = "lib";
+	public static final String BIN_DIR = "bin";
+	public static final String NET_DIR = "network";
+	public static final String NET_ADM_DIR = "admin";
+	public static final String TNSNAMES_ORA = "tnsnames.ora";
+
+}
diff --git a/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunner.java b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunner.java
index b85baae..1e8f232 100755
--- a/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunner.java
+++ b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunner.java
@@ -10,8 +10,6 @@ import hudson.FilePath;
 import hudson.Launcher;
 import hudson.model.Run;
 import hudson.model.TaskListener;
-import hudson.remoting.LocalChannel;
-import hudson.remoting.VirtualChannel;
 import hudson.util.ArgumentListBuilder;
 
 /**
@@ -19,81 +17,8 @@ import hudson.util.ArgumentListBuilder;
  */
 @SuppressFBWarnings
 public class SQLPlusRunner implements Serializable {
-
-	private static final String FOUND_SQL_PLUS_ON = "found SQL*Plus on ";
-
-	private static final String WINDOWS_FILE_SEPARATOR = "\\";
-
-	private static final long serialVersionUID = -310945626014565712L;
-
-	private static final String WINDOWS_OS = "win";
-
-	private static final String OPERATION_SYSTEM = "os.name";
-
-	private static final String OPERATION_SYSTEM_SLAVE = "OS";
-
-	private static final String MSG_TEMP_SCRIPT = Messages.SQLPlusRunner_tempScript();
-
-	private static final String ON = Messages.SQLPlusRunner_on();
-
-	private static final String MSG_ORACLE_HOME = Messages.SQLPlusRunner_usingOracleHome();
-
-	private static final String MSG_SCRIPT = Messages.SQLPlusRunner_runningScript();
-
-	private static final String MSG_DEFINED_SCRIPT = Messages.SQLPlusRunner_runningDefinedScript();
-
-	private static final String AT = "@";
-
-	private static final String SLASH = "/";
-	
-	private static final String DOUBLE_QUOTES = "\"";
-
-	private static final String MSG_ERROR = Messages.SQLPlusRunner_error();
-
-	private static final String MSG_GET_SQL_PLUS_VERSION = Messages.SQLPlusRunner_gettingSQLPlusVersion();
-
-	private static final String MSG_ORACLE_HOME_MISSING = Messages.SQLPlusRunner_missingOracleHome();
-
-	private static final String MSG_GET_ORACLE_HOME = Messages.SQLPlusRunner_gettingOracleHome();
-	private static final String MSG_CUSTOM_ORACLE_HOME = Messages.SQLPlusRunner_usingCustomOracleHome();
-	private static final String MSG_CUSTOM_SQLPLUS_HOME = Messages.SQLPlusRunner_usingCustomSQLPlusHome();
-	private static final String MSG_CUSTOM_TNS_ADMIN = Messages.SQLPlusRunner_usingCustomTNSAdmin();
-	private static final String MSG_GLOBAL_ORACLE_HOME = Messages.SQLPlusRunner_usingGlobalOracleHome();
-	private static final String MSG_GLOBAL_SQLPLUS_HOME = Messages.SQLPlusRunner_usingGlobalSQLPlusHome();
-	private static final String MSG_GLOBAL_TNS_ADMIN = Messages.SQLPlusRunner_usingGlobalTNSAdmin();
-	private static final String MSG_USING_DETECTED_ORACLE_HOME = Messages.SQLPlusRunner_usingDetectedOracleHome();
-	private static final String MSG_GLOBAL_ORACLE_HOME_SELECTED = Messages.SQLPlusRunner_globalOracleHomeSelected();
-	private static final String MSG_GLOBAL_SQLPLUS_HOME_SELECTED = Messages.SQLPlusRunner_globalSQLPlusHomeSelected();
-	private static final String MSG_GLOBAL_TNS_ADMIN_SELECTED = Messages.SQLPlusRunner_globalTNSAdminSelected();
-
-	private static final String MSG_TRY_DETECTED_ORACLE_HOME = Messages.SQLPlusRunner_tryToDetectOracleHome();
-	private static final String MSG_GLOBAL_ORACLE_HOME_SELECTED_ANYWAY = Messages
-			.SQLPlusRunner_globalOracleHomeSelectedAnyway();
-
-	private static final String LOCAL_DATABASE_MSG = "local";
-
-	private static final String DEBUG_MSG = "[DEBUG] ";
-
-	private static final String HIDDEN_PASSWORD = "********";
-
-	private static final String LINE = Messages.SQLPlusRunner_line();
-
-	// For executing commands
-	private static final String LIB_DIR = "lib";
-	private static final String BIN_DIR = "bin";
-	private static final String NET_DIR = "network";
-	private static final String NET_ADM_DIR = "admin";
-
-	private static final String ENV_LD_LIBRARY_PATH = "LD_LIBRARY_PATH";
-	private static final String ENV_ORACLE_HOME = "ORACLE_HOME";
-	private static final String ENV_TNS_ADMIN = "TNS_ADMIN";
-
-	private static final String SQLPLUS_TRY_LOGIN_JUST_ONCE = "-L";
-	private static final String SQLPLUS_VERSION = "-v";
-	private static final String SQLPLUS = "sqlplus";
-	private static final String SQLPLUS_FOR_WINDOWS = "sqlplus.exe";
-
-	private static final String TNSNAMES_ORA = "tnsnames.ora";
+ 
+	private static final long serialVersionUID = -2426963507463371935L;
 
 	private static final int PROCESS_EXIT_CODE_SUCCESSFUL = 0;
 
@@ -158,6 +83,124 @@ public class SQLPlusRunner implements Serializable {
 
 	private final boolean debug;
 
+
+	/**
+	 * Get SQL Plus version
+	 *
+	 * @param customSQLPlusHome - custom SQL*Plus home 
+	 * @param oracleHome - Oracle Home
+	 * @param listener - Jenkins listener
+	 * @param launcher - Jenkins launcher
+	 */
+	public void runGetSQLPLusVersion(String customSQLPlusHome, String oracleHome, TaskListener listener,
+			Launcher launcher) {
+
+		if (oracleHome == null || oracleHome.length() < 1) {
+			throw new RuntimeException(MessageUtil.MSG_ORACLE_HOME_MISSING);
+		}
+
+		boolean slaveMachine = EnvUtil.isSlaveMachine(launcher);
+		if (debug) {
+			listener.getLogger().println(" detected host = " + NetUtil.getHostName());
+			listener.getLogger().println(" slave machine ? " + slaveMachine);
+		}
+
+		boolean hasCustomSQLPlusHome = false;
+		if (customSQLPlusHome != null && customSQLPlusHome.length() > 0) {
+			hasCustomSQLPlusHome = true;
+		}
+
+		if (!slaveMachine && !hasCustomSQLPlusHome) {
+			File directoryAccessTest = new File(oracleHome);
+			if (!directoryAccessTest.exists()) {
+				throw new RuntimeException(Messages.SQLPlusRunner_wrongOracleHome(oracleHome));
+			}
+		}
+
+		listener.getLogger().println(MessageUtil.LINE);
+		listener.getLogger().println(MessageUtil.MSG_ORACLE_HOME + oracleHome);
+		listener.getLogger().println(MessageUtil.LINE);
+		listener.getLogger().println(MessageUtil.MSG_GET_SQL_PLUS_VERSION);
+		try {
+			String sqlplus = MessageUtil.SQLPLUS;
+			String fileSeparator = File.separator;
+			if (EnvUtil.isWindowsOS(slaveMachine,listener,build)) {
+				sqlplus = MessageUtil.SQLPLUS_FOR_WINDOWS;
+				fileSeparator = MessageUtil.WINDOWS_FILE_SEPARATOR;
+			}
+
+			EnvVars envVars = new EnvVars();
+			envVars.put(MessageUtil.ENV_ORACLE_HOME, oracleHome);
+			if (debug)
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "ORACLE_HOME = " + oracleHome);
+			envVars.put(MessageUtil.ENV_LD_LIBRARY_PATH, oracleHome + fileSeparator + MessageUtil.LIB_DIR);
+			if (debug)
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "LD_LIBRARY_PATH = " + oracleHome + fileSeparator + MessageUtil.LIB_DIR);
+
+			// create command arguments
+			ArgumentListBuilder args = new ArgumentListBuilder();
+
+			if (debug)
+				listener.getLogger().println("SQL*Plus exec file = " + sqlplus);
+
+			if (hasCustomSQLPlusHome) {
+				args.add(customSQLPlusHome);
+			} else {
+
+				boolean findSQLPlusOnOracleHomeBin = FileUtil.findFile(sqlplus,
+						new File(oracleHome + fileSeparator + MessageUtil.BIN_DIR));
+
+				boolean findSQLPlusOnOracleHome = FileUtil.findFile(sqlplus, new File(oracleHome));
+
+				if (findSQLPlusOnOracleHomeBin) {
+					listener.getLogger().println(
+							MessageUtil.FOUND_SQL_PLUS_ON + new File(oracleHome + fileSeparator + MessageUtil.BIN_DIR).getAbsolutePath());
+					args.add(oracleHome + fileSeparator + MessageUtil.BIN_DIR + fileSeparator + sqlplus);
+				} else if (findSQLPlusOnOracleHome) {
+					listener.getLogger().println(MessageUtil.FOUND_SQL_PLUS_ON + new File(oracleHome).getAbsolutePath());
+					args.add(oracleHome + fileSeparator + sqlplus);
+				} else if (slaveMachine) {
+					listener.getLogger().println("SQL*Plus directory: " + oracleHome + fileSeparator + MessageUtil.BIN_DIR);
+					args.add(oracleHome + fileSeparator + MessageUtil.BIN_DIR + fileSeparator + sqlplus);
+				} else {
+					throw new RuntimeException(Messages.SQLPlusRunner_missingSQLPlus());
+				}
+			}
+
+			args.add(MessageUtil.SQLPLUS_VERSION);
+
+			if (debug) {
+				listener.getLogger().println(MessageUtil.LINE);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "Statement:");
+				for (String a : args.toList()) {
+					listener.getLogger().print(a + " ");
+				}
+				listener.getLogger().println(" ");
+				listener.getLogger().println(MessageUtil.LINE);
+			}
+
+			int exitCode = 0;
+			if (slaveMachine) {
+				FilePath pwdDir = workspace;
+				exitCode = launcher.launch().cmds(args).envs(build.getEnvironment(listener).overrideAll(envVars)).stdout(listener)
+						.pwd(pwdDir).join();
+			} else {
+				exitCode = launcher.launch().cmds(args).envs(build.getEnvironment(listener).overrideAll(envVars)).stdout(listener)
+						.pwd(workspace).join();
+			}
+
+			listener.getLogger().printf(Messages.SQLPlusRunner_processEnd() + " %d%n", exitCode);
+
+		} catch (RuntimeException e) {
+			listener.getLogger().println(MessageUtil.MSG_ERROR + e.getMessage());
+			throw e;
+		} catch (Exception e) {
+			listener.getLogger().println(MessageUtil.MSG_ERROR + e.getMessage());
+			throw new RuntimeException(e);
+		}
+		listener.getLogger().println(MessageUtil.LINE);
+	}
+	
 	/**
 	 * Main process to run SQLPlus
 	 */
@@ -165,34 +208,34 @@ public class SQLPlusRunner implements Serializable {
 
 		String selectedOracleHome = null;
 		String detectedOracleHome = null;
-		boolean slaveMachine = isSlaveMachine(launcher);
+		boolean slaveMachine = EnvUtil.isSlaveMachine(launcher);
 
-		listener.getLogger().println(LINE);
-		listener.getLogger().println(MSG_GET_ORACLE_HOME);
+		listener.getLogger().println(MessageUtil.LINE);
+		listener.getLogger().println(MessageUtil.MSG_GET_ORACLE_HOME);
 
 		// custom SQLPLUS_HOME overrides file location
 		if (customSQLPlusHome != null && customSQLPlusHome.length() > 0) {
-			listener.getLogger().println(MSG_CUSTOM_SQLPLUS_HOME);
+			listener.getLogger().println(MessageUtil.MSG_CUSTOM_SQLPLUS_HOME);
 			listener.getLogger().println("SQL*Plus >>> " + customSQLPlusHome);
 		} else if (globalSQLPlusHome != null && globalSQLPlusHome.length() > 0) {
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + MSG_GLOBAL_SQLPLUS_HOME_SELECTED);
-			listener.getLogger().println(LINE);
-			listener.getLogger().println(MSG_GLOBAL_SQLPLUS_HOME);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.MSG_GLOBAL_SQLPLUS_HOME_SELECTED);
+			listener.getLogger().println(MessageUtil.LINE);
+			listener.getLogger().println(MessageUtil.MSG_GLOBAL_SQLPLUS_HOME);
 			customSQLPlusHome = globalSQLPlusHome;
 		}
 
 		// custom TNS_ADMIN
 		boolean hasCustomTNSAdmin = false;
 		if (customTNSAdmin != null && customTNSAdmin.length() > 0) {
-			listener.getLogger().println(MSG_CUSTOM_TNS_ADMIN);
+			listener.getLogger().println(MessageUtil.MSG_CUSTOM_TNS_ADMIN);
 			listener.getLogger().println("TNS_ADMIN >>> " + customTNSAdmin);
 			hasCustomTNSAdmin = true;
 		} else if (globalTNSAdmin != null && globalTNSAdmin.length() > 0) {
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + MSG_GLOBAL_TNS_ADMIN_SELECTED);
-			listener.getLogger().println(LINE);
-			listener.getLogger().println(MSG_GLOBAL_TNS_ADMIN);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.MSG_GLOBAL_TNS_ADMIN_SELECTED);
+			listener.getLogger().println(MessageUtil.LINE);
+			listener.getLogger().println(MessageUtil.MSG_GLOBAL_TNS_ADMIN);
 			customTNSAdmin = globalTNSAdmin;
 			hasCustomTNSAdmin = true;
 			listener.getLogger().println("TNS_ADMIN >>> " + customTNSAdmin);
@@ -200,32 +243,32 @@ public class SQLPlusRunner implements Serializable {
 
 		// custom ORACLE_HOME overrides everything
 		 
-		detectedOracleHome = build.getEnvironment(listener).get(ENV_ORACLE_HOME);
+		detectedOracleHome = build.getEnvironment(listener).get(MessageUtil.ENV_ORACLE_HOME);
 		
 		if (customOracleHome != null && customOracleHome.length() > 0) {
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + MSG_CUSTOM_ORACLE_HOME);
-			listener.getLogger().println(LINE);
-			listener.getLogger().println(MSG_CUSTOM_ORACLE_HOME);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.MSG_CUSTOM_ORACLE_HOME);
+			listener.getLogger().println(MessageUtil.LINE);
+			listener.getLogger().println(MessageUtil.MSG_CUSTOM_ORACLE_HOME);
 			selectedOracleHome = customOracleHome;
 			// global ORACLE_HOME comes next
 		} else if (globalOracleHome != null && globalOracleHome.length() > 0) {
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + MSG_GLOBAL_ORACLE_HOME_SELECTED);
-			listener.getLogger().println(LINE);
-			listener.getLogger().println(MSG_GLOBAL_ORACLE_HOME);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.MSG_GLOBAL_ORACLE_HOME_SELECTED);
+			listener.getLogger().println(MessageUtil.LINE);
+			listener.getLogger().println(MessageUtil.MSG_GLOBAL_ORACLE_HOME);
 			selectedOracleHome = globalOracleHome;
 			// now try to detect ORACLE_HOME
 		} else if (tryToDetectOracleHome && detectedOracleHome != null) {
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + MSG_TRY_DETECTED_ORACLE_HOME);
-			listener.getLogger().println(LINE);
-			listener.getLogger().println(MSG_USING_DETECTED_ORACLE_HOME);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.MSG_TRY_DETECTED_ORACLE_HOME);
+			listener.getLogger().println(MessageUtil.LINE);
+			listener.getLogger().println(MessageUtil.MSG_USING_DETECTED_ORACLE_HOME);
 			selectedOracleHome = detectedOracleHome;
 		} else {
 			// nothing works, get global ORACLE_HOME
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + MSG_GLOBAL_ORACLE_HOME_SELECTED_ANYWAY);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.MSG_GLOBAL_ORACLE_HOME_SELECTED_ANYWAY);
 			selectedOracleHome = globalOracleHome;
 		}
 
@@ -237,7 +280,7 @@ public class SQLPlusRunner implements Serializable {
 			listener.getLogger().println(" detected host = " + NetUtil.getHostName());
 
 		if (selectedOracleHome == null || selectedOracleHome.length() < 1) {
-			throw new RuntimeException(MSG_ORACLE_HOME_MISSING);
+			throw new RuntimeException(MessageUtil.MSG_ORACLE_HOME_MISSING);
 		}
 
 		boolean hasCustomSQLPlusHome = false;
@@ -248,7 +291,7 @@ public class SQLPlusRunner implements Serializable {
 		if (!slaveMachine && !hasCustomSQLPlusHome) {
 			File directoryAccessTest = new File(selectedOracleHome);
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + "testing directory " + directoryAccessTest.getAbsolutePath());
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "testing directory " + directoryAccessTest.getAbsolutePath());
 			if (!directoryAccessTest.exists()) {
 				throw new RuntimeException(Messages.SQLPlusRunner_wrongOracleHome(selectedOracleHome));
 			}
@@ -258,29 +301,31 @@ public class SQLPlusRunner implements Serializable {
 			throw new RuntimeException(Messages.SQLPlusRunner_missingScript(workspace));
 		}
 
-		String instanceStr = LOCAL_DATABASE_MSG;
+		String instanceStr = MessageUtil.LOCAL_DATABASE_MSG;
 		if (instance != null) {
 			instanceStr = instance;
 		}
 
-		listener.getLogger().println(LINE);
-		listener.getLogger().println(MSG_ORACLE_HOME + selectedOracleHome);
-		listener.getLogger().println(LINE);
+		listener.getLogger().println(MessageUtil.LINE);
+		listener.getLogger().println(MessageUtil.MSG_ORACLE_HOME + selectedOracleHome);
+		listener.getLogger().println(MessageUtil.LINE);
 
-		String sqlplus = SQLPLUS;
+		String sqlplus = MessageUtil.SQLPLUS;
 		String fileSeparator = File.separator;
-		if (isWindowsOS(slaveMachine)) {
-			sqlplus = SQLPLUS_FOR_WINDOWS;
-			fileSeparator = WINDOWS_FILE_SEPARATOR;
+		String hidePasswordEnv = MessageUtil.ENV_PASSWORD_FOR_LINUX;
+		if (EnvUtil.isWindowsOS(slaveMachine,listener,build)) {
+			sqlplus = MessageUtil.SQLPLUS_FOR_WINDOWS;
+			fileSeparator = MessageUtil.WINDOWS_FILE_SEPARATOR;
+			hidePasswordEnv = MessageUtil.ENV_PASSWORD_FOR_WINDOWS;
 		}
 
 		FilePath tempScript = null;
 		FilePath scriptFilePath = null;
 		if (ScriptType.userDefined.name().equals(scriptType)) {
-			listener.getLogger().println(MSG_DEFINED_SCRIPT + " " + user + SLASH + HIDDEN_PASSWORD + AT + instanceStr);
+			listener.getLogger().println(MessageUtil.MSG_DEFINED_SCRIPT + " " + user + MessageUtil.SLASH + MessageUtil.HIDDEN_PASSWORD + MessageUtil.AT + instanceStr);
 			scriptFilePath = FileUtil.createTempScript(build, workspace, script, slaveMachine);
 			tempScript = scriptFilePath;
-			listener.getLogger().println(MSG_TEMP_SCRIPT + " " + scriptFilePath.absolutize().toURI());
+			listener.getLogger().println(MessageUtil.MSG_TEMP_SCRIPT + " " + scriptFilePath.absolutize().toURI());
 		} else {
 
 			String strScript = null;
@@ -295,10 +340,10 @@ public class SQLPlusRunner implements Serializable {
 			}
 
 			if (scriptFilePath != null)
-				listener.getLogger().println(MSG_SCRIPT + " " + scriptFilePath.getRemote() + " " + ON + " " + user
-						+ SLASH + HIDDEN_PASSWORD + AT + instanceStr);
+				listener.getLogger().println(MessageUtil.MSG_SCRIPT + " " + scriptFilePath.getRemote() + " " + MessageUtil.ON + " " + user
+						+ MessageUtil.SLASH + MessageUtil.HIDDEN_PASSWORD + MessageUtil.AT + instanceStr);
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + "testing script " + scriptFilePath.getRemote());
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "testing script " + scriptFilePath.getRemote());
 			if (!slaveMachine && scriptFilePath != null && !scriptFilePath.exists()) {
 				throw new RuntimeException(
 						Messages.SQLPlusRunner_missingScript(scriptFilePath.getRemote()));
@@ -307,51 +352,52 @@ public class SQLPlusRunner implements Serializable {
 				FileUtil.addExitInTheEnd(scriptFilePath);
 		}
 
-		listener.getLogger().println(LINE);
+		listener.getLogger().println(MessageUtil.LINE);
 
 		int exitCode = 0;
 		try {
 			// and the extra ones for the plugin
 			EnvVars envVars = new EnvVars();
-			envVars.put(ENV_ORACLE_HOME, selectedOracleHome);
+			envVars.put(MessageUtil.ENV_ORACLE_HOME, selectedOracleHome);
+			envVars.put(MessageUtil.ENV_PASSWORD, password);
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + "ORACLE_HOME = " + selectedOracleHome);
-			envVars.put(ENV_LD_LIBRARY_PATH,
-					selectedOracleHome + fileSeparator + LIB_DIR + File.pathSeparator + selectedOracleHome);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "ORACLE_HOME = " + selectedOracleHome);
+			envVars.put(MessageUtil.ENV_LD_LIBRARY_PATH,
+					selectedOracleHome + fileSeparator + MessageUtil.LIB_DIR + File.pathSeparator + selectedOracleHome);
 			if (debug)
-				listener.getLogger().println(DEBUG_MSG + "LD_LIBRARY_PATH = " + selectedOracleHome + fileSeparator
-						+ LIB_DIR + File.pathSeparator + selectedOracleHome);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + "LD_LIBRARY_PATH = " + selectedOracleHome + fileSeparator
+						+ MessageUtil.LIB_DIR + File.pathSeparator + selectedOracleHome);
 
 			if (hasCustomTNSAdmin) {
-				envVars.put(ENV_TNS_ADMIN, customTNSAdmin);
-				boolean findTNSNAMES = FileUtil.findFile(TNSNAMES_ORA, new File(customTNSAdmin));
+				envVars.put(MessageUtil.ENV_TNS_ADMIN, customTNSAdmin);
+				boolean findTNSNAMES = FileUtil.findFile(MessageUtil.TNSNAMES_ORA, new File(customTNSAdmin));
 				if (findTNSNAMES) {
-					if (debug) listener.getLogger().println(DEBUG_MSG + "found TNSNAMES.ORA on " + new File(customTNSAdmin).getAbsolutePath());
+					if (debug) listener.getLogger().println(MessageUtil.DEBUG_MSG + "found TNSNAMES.ORA on " + new File(customTNSAdmin).getAbsolutePath());
 				} else {
 				   throw new RuntimeException(Messages.SQLPlusRunner_missingTNSNAMES());
 			    }
 			} else if (slaveMachine) {
-				envVars.put(ENV_TNS_ADMIN, selectedOracleHome);
+				envVars.put(MessageUtil.ENV_TNS_ADMIN, selectedOracleHome);
 			} else {
-				boolean findTNSNAMESOracleHome = FileUtil.findFile(TNSNAMES_ORA, new File(selectedOracleHome));
-				boolean findTNSNAMESOracleHomeNetworkAdmin = FileUtil.findFile(TNSNAMES_ORA,
-						new File(selectedOracleHome + fileSeparator + NET_DIR + fileSeparator + NET_ADM_DIR));
+				boolean findTNSNAMESOracleHome = FileUtil.findFile(MessageUtil.TNSNAMES_ORA, new File(selectedOracleHome));
+				boolean findTNSNAMESOracleHomeNetworkAdmin = FileUtil.findFile(MessageUtil.TNSNAMES_ORA,
+						new File(selectedOracleHome + fileSeparator + MessageUtil.NET_DIR + fileSeparator + MessageUtil.NET_ADM_DIR));
 				if (findTNSNAMESOracleHomeNetworkAdmin) {
-					envVars.put(ENV_TNS_ADMIN,
-							selectedOracleHome + fileSeparator + NET_DIR + fileSeparator + NET_ADM_DIR);
+					envVars.put(MessageUtil.ENV_TNS_ADMIN,
+							selectedOracleHome + fileSeparator + MessageUtil.NET_DIR + fileSeparator + MessageUtil.NET_ADM_DIR);
 					if (debug) {
-						listener.getLogger().println(DEBUG_MSG + "found TNSNAMES.ORA on "
-								+ new File(selectedOracleHome + fileSeparator + NET_DIR + fileSeparator + NET_ADM_DIR)
+						listener.getLogger().println(MessageUtil.DEBUG_MSG + "found TNSNAMES.ORA on "
+								+ new File(selectedOracleHome + fileSeparator + MessageUtil.NET_DIR + fileSeparator + MessageUtil.NET_ADM_DIR)
 										.getAbsolutePath());
-						listener.getLogger().println(DEBUG_MSG + "TNS_ADMIN = " + selectedOracleHome + fileSeparator
-								+ NET_DIR + fileSeparator + NET_ADM_DIR);
+						listener.getLogger().println(MessageUtil.DEBUG_MSG + "TNS_ADMIN = " + selectedOracleHome + fileSeparator
+								+ MessageUtil.NET_DIR + fileSeparator + MessageUtil.NET_ADM_DIR);
 					}
 				} else if (findTNSNAMESOracleHome) {
-					envVars.put(ENV_TNS_ADMIN, selectedOracleHome);
+					envVars.put(MessageUtil.ENV_TNS_ADMIN, selectedOracleHome);
 					if (debug) {
 						listener.getLogger().println(
-								DEBUG_MSG + "found TNSNAMES.ORA on " + new File(selectedOracleHome).getAbsolutePath());
-						listener.getLogger().println(DEBUG_MSG + "TNS_ADMIN = " + selectedOracleHome);
+								MessageUtil.DEBUG_MSG + "found TNSNAMES.ORA on " + new File(selectedOracleHome).getAbsolutePath());
+						listener.getLogger().println(MessageUtil.DEBUG_MSG + "TNS_ADMIN = " + selectedOracleHome);
 					}
 				} else {
 					throw new RuntimeException(Messages.SQLPlusRunner_missingTNSNAMES());
@@ -361,9 +407,10 @@ public class SQLPlusRunner implements Serializable {
 			// create command arguments
 			ArgumentListBuilder args = new ArgumentListBuilder();
 
-			String arg1 = user + SLASH + DOUBLE_QUOTES + password + DOUBLE_QUOTES;
-			if (instance != null) {
-				arg1 = arg1 + AT + instance;
+			String arg1 = user + MessageUtil.SLASH + MessageUtil.DOUBLE_QUOTES + hidePasswordEnv + MessageUtil.DOUBLE_QUOTES;
+			
+			if (instance != null && instance.trim().length()>0) {
+				arg1 = arg1 + MessageUtil.AT + instance.trim();
 			}
 
 			String arg2 = scriptFilePath.getRemote();
@@ -378,40 +425,40 @@ public class SQLPlusRunner implements Serializable {
 				listener.getLogger().println("SQL*Plus exec file = " + sqlplus);
 
 				boolean findSQLPlusOnOracleHomeBin = FileUtil.findFile(sqlplus,
-						new File(selectedOracleHome + fileSeparator + BIN_DIR));
+						new File(selectedOracleHome + fileSeparator + MessageUtil.BIN_DIR));
 
 				boolean findSQLPlusOnOracleHome = FileUtil.findFile(sqlplus, new File(selectedOracleHome));
 
 				if (findSQLPlusOnOracleHomeBin) {
 					if (debug)
-						listener.getLogger().println(DEBUG_MSG + FOUND_SQL_PLUS_ON
-								+ new File(selectedOracleHome + fileSeparator + BIN_DIR).getAbsolutePath());
-					args.add(selectedOracleHome + fileSeparator + BIN_DIR + fileSeparator + sqlplus);
+						listener.getLogger().println(MessageUtil.DEBUG_MSG + MessageUtil.FOUND_SQL_PLUS_ON
+								+ new File(selectedOracleHome + fileSeparator + MessageUtil.BIN_DIR).getAbsolutePath());
+					args.add(selectedOracleHome + fileSeparator + MessageUtil.BIN_DIR + fileSeparator + sqlplus);
 				} else if (findSQLPlusOnOracleHome) {
 					if (debug)
 						listener.getLogger().println(
-								DEBUG_MSG + FOUND_SQL_PLUS_ON + new File(selectedOracleHome).getAbsolutePath());
+								MessageUtil.DEBUG_MSG + MessageUtil.FOUND_SQL_PLUS_ON + new File(selectedOracleHome).getAbsolutePath());
 					args.add(selectedOracleHome + fileSeparator + sqlplus);
 				} else if (slaveMachine) {
-					listener.getLogger().println("SQL*Plus directory: " + selectedOracleHome + fileSeparator + BIN_DIR);
-					args.add(selectedOracleHome + fileSeparator + BIN_DIR + fileSeparator + sqlplus);
+					listener.getLogger().println("SQL*Plus directory: " + selectedOracleHome + fileSeparator + MessageUtil.BIN_DIR);
+					args.add(selectedOracleHome + fileSeparator + MessageUtil.BIN_DIR + fileSeparator + sqlplus);
 				} else {
 					throw new RuntimeException(Messages.SQLPlusRunner_missingSQLPlus());
 				}
 			}
 
-			args.add(SQLPLUS_TRY_LOGIN_JUST_ONCE);
+			args.add(MessageUtil.SQLPLUS_TRY_LOGIN_JUST_ONCE);
 			args.add(arg1);
-			args.add(AT + arg2);
+			args.add(MessageUtil.AT + arg2);
 
 			if (debug) {
-				listener.getLogger().println(DEBUG_MSG + " Statement: ");
-				listener.getLogger().println(LINE);
+				listener.getLogger().println(MessageUtil.DEBUG_MSG + " Statement: ");
+				listener.getLogger().println(MessageUtil.LINE);
 				for (String a : args.toList()) {
 					listener.getLogger().print(a + " ");
 				}
 				listener.getLogger().println(" ");
-				listener.getLogger().println(LINE);
+				listener.getLogger().println(MessageUtil.LINE);
 				listener.getLogger().println(" ");
 			}
 
@@ -429,7 +476,7 @@ public class SQLPlusRunner implements Serializable {
 		} catch (RuntimeException e) {
 			throw e;
 		} catch (Exception e) {
-			listener.getLogger().println(MSG_ERROR + e.getMessage());
+			listener.getLogger().println(MessageUtil.MSG_ERROR + e.getMessage());
 			throw new RuntimeException(e);
 		} finally {
 			if (tempScript != null) {
@@ -438,165 +485,19 @@ public class SQLPlusRunner implements Serializable {
 					if (!removed)
 						listener.getLogger().printf(Messages.SQLPlusRunner_tempFileNotRemoved());
 				} catch (Exception e) {
-					listener.getLogger().println(MSG_ERROR + e.getMessage());
+					listener.getLogger().println(MessageUtil.MSG_ERROR + e.getMessage());
 				}
 			}
 		}
 
 		if (exitCode != PROCESS_EXIT_CODE_SUCCESSFUL) {
-			listener.getLogger().println(LINE);
+			listener.getLogger().println(MessageUtil.LINE);
 			listener.getLogger().println("Exit code: " + exitCode);
-			listener.getLogger().println(LINE);
+			listener.getLogger().println(MessageUtil.LINE);
 			throw new RuntimeException(Messages.SQLPlusRunner_processErrorEnd());
 		}
 
-		listener.getLogger().println(LINE);
-	}
-
-	/**
-	 * Get SQL Plus version
-	 *
-	 * @param customSQLPlusHome - custom SQL*Plus home 
-	 * @param oracleHome - Oracle Home
-	 * @param listener - Jenkins listener
-	 * @param launcher - Jenkins launcher
-	 */
-	public void runGetSQLPLusVersion(String customSQLPlusHome, String oracleHome, TaskListener listener,
-			Launcher launcher) {
-
-		if (oracleHome == null || oracleHome.length() < 1) {
-			throw new RuntimeException(MSG_ORACLE_HOME_MISSING);
-		}
-
-		boolean slaveMachine = isSlaveMachine(launcher);
-		if (debug) {
-			listener.getLogger().println(" detected host = " + NetUtil.getHostName());
-			listener.getLogger().println(" slave machine ? " + slaveMachine);
-		}
-
-		boolean hasCustomSQLPlusHome = false;
-		if (customSQLPlusHome != null && customSQLPlusHome.length() > 0) {
-			hasCustomSQLPlusHome = true;
-		}
-
-		if (!slaveMachine && !hasCustomSQLPlusHome) {
-			File directoryAccessTest = new File(oracleHome);
-			if (!directoryAccessTest.exists()) {
-				throw new RuntimeException(Messages.SQLPlusRunner_wrongOracleHome(oracleHome));
-			}
-		}
-
-		listener.getLogger().println(LINE);
-		listener.getLogger().println(MSG_ORACLE_HOME + oracleHome);
-		listener.getLogger().println(LINE);
-		listener.getLogger().println(MSG_GET_SQL_PLUS_VERSION);
-		try {
-			String sqlplus = SQLPLUS;
-			String fileSeparator = File.separator;
-			if (isWindowsOS(slaveMachine)) {
-				sqlplus = SQLPLUS_FOR_WINDOWS;
-				fileSeparator = WINDOWS_FILE_SEPARATOR;
-			}
-
-			EnvVars envVars = new EnvVars();
-			envVars.put(ENV_ORACLE_HOME, oracleHome);
-			if (debug)
-				listener.getLogger().println(DEBUG_MSG + "ORACLE_HOME = " + oracleHome);
-			envVars.put(ENV_LD_LIBRARY_PATH, oracleHome + fileSeparator + LIB_DIR);
-			if (debug)
-				listener.getLogger().println(DEBUG_MSG + "LD_LIBRARY_PATH = " + oracleHome + fileSeparator + LIB_DIR);
-
-			// create command arguments
-			ArgumentListBuilder args = new ArgumentListBuilder();
-
-			if (debug)
-				listener.getLogger().println("SQL*Plus exec file = " + sqlplus);
-
-			if (hasCustomSQLPlusHome) {
-				args.add(customSQLPlusHome);
-			} else {
-
-				boolean findSQLPlusOnOracleHomeBin = FileUtil.findFile(sqlplus,
-						new File(oracleHome + fileSeparator + BIN_DIR));
-
-				boolean findSQLPlusOnOracleHome = FileUtil.findFile(sqlplus, new File(oracleHome));
-
-				if (findSQLPlusOnOracleHomeBin) {
-					listener.getLogger().println(
-							FOUND_SQL_PLUS_ON + new File(oracleHome + fileSeparator + BIN_DIR).getAbsolutePath());
-					args.add(oracleHome + fileSeparator + BIN_DIR + fileSeparator + sqlplus);
-				} else if (findSQLPlusOnOracleHome) {
-					listener.getLogger().println(FOUND_SQL_PLUS_ON + new File(oracleHome).getAbsolutePath());
-					args.add(oracleHome + fileSeparator + sqlplus);
-				} else if (slaveMachine) {
-					listener.getLogger().println("SQL*Plus directory: " + oracleHome + fileSeparator + BIN_DIR);
-					args.add(oracleHome + fileSeparator + BIN_DIR + fileSeparator + sqlplus);
-				} else {
-					throw new RuntimeException(Messages.SQLPlusRunner_missingSQLPlus());
-				}
-			}
-
-			args.add(SQLPLUS_VERSION);
-
-			if (debug) {
-				listener.getLogger().println(LINE);
-				listener.getLogger().println(DEBUG_MSG + "Statement:");
-				for (String a : args.toList()) {
-					listener.getLogger().print(a + " ");
-				}
-				listener.getLogger().println(" ");
-				listener.getLogger().println(LINE);
-			}
-
-			int exitCode = 0;
-			if (slaveMachine) {
-				FilePath pwdDir = workspace;
-				exitCode = launcher.launch().cmds(args).envs(build.getEnvironment(listener).overrideAll(envVars)).stdout(listener)
-						.pwd(pwdDir).join();
-			} else {
-				exitCode = launcher.launch().cmds(args).envs(build.getEnvironment(listener).overrideAll(envVars)).stdout(listener)
-						.pwd(workspace).join();
-			}
-
-			listener.getLogger().printf(Messages.SQLPlusRunner_processEnd() + " %d%n", exitCode);
-
-		} catch (RuntimeException e) {
-			listener.getLogger().println(MSG_ERROR + e.getMessage());
-			throw e;
-		} catch (Exception e) {
-			listener.getLogger().println(MSG_ERROR + e.getMessage());
-			throw new RuntimeException(e);
-		}
-		listener.getLogger().println(LINE);
-	}
-
-	private boolean isSlaveMachine(Launcher launcher) {
-		VirtualChannel vc = launcher.getChannel();
-		boolean slaveMachine = true;
-		if (vc instanceof LocalChannel) {
-			slaveMachine = false;
-		}
-		return slaveMachine;
-	}
-
-	private boolean isWindowsOS(boolean slaveMachine) throws IOException, InterruptedException {
-
-		boolean isWindows = false;
-
-		if (slaveMachine) {
-			String osSlave = build.getEnvironment(listener).get(OPERATION_SYSTEM_SLAVE);
-			if (osSlave != null) {
-				isWindows = osSlave.toLowerCase().indexOf(WINDOWS_OS) >= 0;
-			}
-		} else {
-			String osMaster = System.getProperty(OPERATION_SYSTEM);
-			if (osMaster != null) {
-				isWindows = osMaster.toLowerCase().indexOf(WINDOWS_OS) >= 0;
-			}
-		}
-
-		return isWindows;
-
+		listener.getLogger().println(MessageUtil.LINE);
 	}
 
 }
diff --git a/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunnerBuilder.java b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunnerBuilder.java
index e83dd75..1c44cee 100755
--- a/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunnerBuilder.java
+++ b/src/main/java/org/jenkinsci/plugins/sqlplus/script/runner/SQLPlusRunnerBuilder.java
@@ -148,7 +148,7 @@ public class SQLPlusRunnerBuilder extends Builder implements SimpleBuildStep {
 		}
 
 		List<StandardUsernamePasswordCredentials> lookupCredentials = CredentialsProvider.lookupCredentials(
-				StandardUsernamePasswordCredentials.class, Jenkins.getInstance(), ACL.SYSTEM, null, null);
+				StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM, null, null);
 		CredentialsMatcher credentialsMatcher = CredentialsMatchers.withId(credentialsId);
 		StandardUsernamePasswordCredentials credentials = CredentialsMatchers.firstOrNull(lookupCredentials,
 				credentialsMatcher);
