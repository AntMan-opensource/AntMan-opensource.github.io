commit a890d68699ad6ca0c8fbc297a1d4b7ebf23f384b
Author: Daniel Beck <daniel-beck@users.noreply.github.com>
Date:   Mon Jan 11 16:50:57 2021 +0000

    [SECURITY-2025]

diff --git a/core/src/main/java/hudson/util/Graph.java b/core/src/main/java/hudson/util/Graph.java
index de98dd99a8..cd9468aaa0 100644
--- a/core/src/main/java/hudson/util/Graph.java
+++ b/core/src/main/java/hudson/util/Graph.java
@@ -23,10 +23,14 @@
  */
 package hudson.util;
 
+import com.google.common.annotations.VisibleForTesting;
+import jenkins.util.SystemProperties;
 import org.jfree.chart.JFreeChart;
 import org.jfree.chart.ChartRenderingInfo;
 import org.jfree.chart.ChartUtilities;
 import org.jfree.chart.plot.Plot;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
@@ -56,6 +60,9 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;
  * @since 1.320
  */
 public abstract class Graph {
+    @Restricted(NoExternalUse.class)
+    /* package for test */ static /* non-final for script console */ int MAX_AREA = SystemProperties.getInteger(Graph.class.getName() + ".maxArea", 10_000_000); // 4k*2.5k
+
     private final long timestamp;
     private final int defaultW;
     private final int defaultH;
@@ -95,7 +102,20 @@ public abstract class Graph {
         Plot p = graph.getPlot();
         p.setBackgroundPaint(plotBg);
 
-        return graph.createBufferedImage(Integer.parseInt(w),Integer.parseInt(h),info);
+        int width = Integer.parseInt(w);
+        int height = Integer.parseInt(h);
+        Dimension safeDimension = safeDimension(width, height, defaultW, defaultH);
+        return graph.createBufferedImage(safeDimension.width, safeDimension.height, info);
+    }
+
+    @Restricted(NoExternalUse.class)
+    @VisibleForTesting
+    public static Dimension safeDimension(int width, int height, int defaultWidth, int defaultHeight) {
+        if (width <= 0 || height <= 0 || width > MAX_AREA/height) {
+            width = defaultWidth;
+            height = defaultHeight;
+        }
+        return new Dimension(width, height);
     }
 
     @NonNull private static Color stringToColor(@CheckForNull String s) {
diff --git a/core/src/test/java/hudson/util/Security2025GraphTest.java b/core/src/test/java/hudson/util/Security2025GraphTest.java
new file mode 100644
index 0000000000..ed4f01c9c3
--- /dev/null
+++ b/core/src/test/java/hudson/util/Security2025GraphTest.java
@@ -0,0 +1,58 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2020, CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package hudson.util;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.awt.*;
+
+public class Security2025GraphTest {
+
+    public static final int DEFAULT_W = 400;
+    public static final int DEFAULT_H = 300;
+
+    @Test
+    public void testDimensions() throws Exception {
+        final Dimension keep = Graph.safeDimension(Graph.MAX_AREA/1_000, 1000, DEFAULT_W, DEFAULT_H);
+        Assert.assertEquals(Graph.MAX_AREA/1_000, keep.width);
+        Assert.assertEquals(1_000, keep.height);
+
+        final Dimension keep2 = Graph.safeDimension(Graph.MAX_AREA/2, 2, DEFAULT_W, DEFAULT_H);
+        Assert.assertEquals(Graph.MAX_AREA/2, keep2.width);
+        Assert.assertEquals(2, keep2.height);
+
+        final Dimension resetArea = Graph.safeDimension(Graph.MAX_AREA, Graph.MAX_AREA, DEFAULT_W, DEFAULT_H);
+        Assert.assertEquals(DEFAULT_W, resetArea.width);
+        Assert.assertEquals(DEFAULT_H, resetArea.height);
+
+        final Dimension resetNegativeWidth = Graph.safeDimension(-50, 1000, DEFAULT_W, DEFAULT_H);
+        Assert.assertEquals(DEFAULT_W, resetNegativeWidth.width);
+        Assert.assertEquals(DEFAULT_H, resetNegativeWidth.height);
+
+        final Dimension resetNegativeHeight = Graph.safeDimension(1000, -50, DEFAULT_W, DEFAULT_H);
+        Assert.assertEquals(DEFAULT_W, resetNegativeHeight.width);
+        Assert.assertEquals(DEFAULT_H, resetNegativeHeight.height);
+    }
+}
