commit 7a438d96897af0034cb2e06db0819ca4595c24cb
Author: Tim Jacomb <timjacomb1+github@gmail.com>
Date:   Tue Aug 25 09:29:17 2020 +0100

    SECURITY-1024

diff --git a/src/main/java/org/jenkinsci/plugins/database/AbstractRemoteDatabaseDescriptor.java b/src/main/java/org/jenkinsci/plugins/database/AbstractRemoteDatabaseDescriptor.java
index 450d45b..0644bf5 100644
--- a/src/main/java/org/jenkinsci/plugins/database/AbstractRemoteDatabaseDescriptor.java
+++ b/src/main/java/org/jenkinsci/plugins/database/AbstractRemoteDatabaseDescriptor.java
@@ -3,12 +3,14 @@ package org.jenkinsci.plugins.database;
 import hudson.util.FormValidation;
 import hudson.util.Secret;
 import java.sql.Statement;
+import jenkins.model.Jenkins;
 import org.kohsuke.stapler.QueryParameter;
 
 import javax.sql.DataSource;
 import java.lang.reflect.InvocationTargetException;
 import java.sql.Connection;
 import java.sql.SQLException;
+import org.kohsuke.stapler.verb.POST;
 
 /**
  * @author Kohsuke Kawaguchi
@@ -21,15 +23,17 @@ public abstract class AbstractRemoteDatabaseDescriptor extends DatabaseDescripto
         super(clazz);
     }
 
+    @POST
     public FormValidation doValidate(
             @QueryParameter String hostname,
             @QueryParameter String database,
             @QueryParameter String username,
-            @QueryParameter String password,
+            @QueryParameter Secret password,
             @QueryParameter String properties) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException {
-
+        Jenkins.get().checkPermission(Jenkins.ADMINISTER);
+        
         try {
-            Database db = clazz.getConstructor(String.class,String.class,String.class,Secret.class,String.class).newInstance(hostname, database, username, Secret.fromString(password), properties);
+            Database db = clazz.getConstructor(String.class,String.class,String.class,Secret.class,String.class).newInstance(hostname, database, username, password, properties);
             DataSource ds = db.getDataSource();
             try (Connection con = ds.getConnection(); Statement statement = con.createStatement()) {
                 statement.execute("SELECT 1");
diff --git a/src/main/java/org/jenkinsci/plugins/database/GenericDatabase.java b/src/main/java/org/jenkinsci/plugins/database/GenericDatabase.java
index 36a51eb..65d23f5 100644
--- a/src/main/java/org/jenkinsci/plugins/database/GenericDatabase.java
+++ b/src/main/java/org/jenkinsci/plugins/database/GenericDatabase.java
@@ -12,6 +12,7 @@ import javax.servlet.http.HttpServletRequest;
 import javax.sql.DataSource;
 import java.io.File;
 import java.sql.SQLException;
+import org.kohsuke.stapler.verb.POST;
 
 /**
  * {@link Database} implementation that allows the user to specify arbitrary JDBC connection string.
@@ -82,7 +83,10 @@ public class GenericDatabase extends Database {
             return loader;
         }
 
+        @POST
         public FormValidation doCheckDriver(@QueryParameter String value) {
+            Jenkins.get().checkPermission(Jenkins.ADMINISTER);
+            
             if (value.length()==0)
                 return FormValidation.ok(); // no value typed yet.
 
@@ -94,12 +98,15 @@ public class GenericDatabase extends Database {
             }
         }
 
+        @POST
         public FormValidation doValidate(@QueryParameter String driver,
                                          @QueryParameter String url,
                                          @QueryParameter String username,
-                                         @QueryParameter String password) {
+                                         @QueryParameter Secret password) {
+            Jenkins.get().checkPermission(Jenkins.ADMINISTER);
+            
             try {
-                new GenericDatabase(url,driver,username,Secret.fromString(password)).getDataSource();
+                new GenericDatabase(url,driver,username, password).getDataSource();
                 // XXX what about the "SELECT 1" trick from AbstractRemoteDatabaseDescriptor?
                 return FormValidation.ok("OK");
             } catch (SQLException e) {
