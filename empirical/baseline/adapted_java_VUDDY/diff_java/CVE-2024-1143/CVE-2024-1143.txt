commit 8edcf913b88101aff70008156b0881850e005783
Author: minux <songmw725@gmail.com>
Date:   Fri Feb 2 14:15:49 2024 +0900

    Merge pull request from GHSA-34q3-p352-c7q8
    
    Motivation:
    SAML `RelayState` is utilized to direct authenticated users to the correct resource. As it is inserted into the HTML document, proper HTML-escaping is crucial to prevent potential security risks, such as XSS attacks.
    [Reference](https://developer.okta.com/docs/concepts/saml/)
    For example, when the `RelayState` is `'.substr(0,1)...`, the redirection script will be:
    `<html ... <body onload="window.location.href='/#'.substr(0,1)....."></body></html>` which an attacker can insert XSS code to `.....`.
    
    Modification:
    - Implement HTML-escaping for SAML `RelayState` when creating the redirection script.
    
    Result:
    - Improved security by mitigating the risk of XSS attacks through HTML-escaping of SAML `RelayState`.

diff --git a/server-auth/saml/src/main/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandler.java b/server-auth/saml/src/main/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandler.java
index eb1de14d..66ebc890 100644
--- a/server-auth/saml/src/main/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandler.java
+++ b/server-auth/saml/src/main/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandler.java
@@ -38,6 +38,7 @@ import org.opensaml.saml.saml2.core.NameIDType;
 import org.opensaml.saml.saml2.core.Response;
 
 import com.google.common.base.Strings;
+import com.google.common.html.HtmlEscapers;
 
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpRequest;
@@ -125,11 +126,12 @@ final class SamlAuthSsoHandler implements SamlSingleSignOnHandler {
 
         final String redirectionScript;
         if (!Strings.isNullOrEmpty(relayState)) {
-            redirectionScript = "window.location.href='/#" + relayState + '\'';
+            redirectionScript = "window.location.href='/#" +
+                                HtmlEscapers.htmlEscaper().escape(relayState) + '\'';
         } else {
             redirectionScript = "window.location.href='/'";
         }
-        return HttpResponse.from(loginSessionPropagator.apply(session).thenApply(
+        return HttpResponse.of(loginSessionPropagator.apply(session).thenApply(
                 unused -> HttpResponse.of(HttpStatus.OK, MediaType.HTML_UTF_8, getHtmlWithOnload(
                         "localStorage.setItem('sessionId','" + sessionId + "')",
                         redirectionScript))));
diff --git a/server-auth/saml/src/test/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandlerTest.java b/server-auth/saml/src/test/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandlerTest.java
new file mode 100644
index 00000000..2caf68d2
--- /dev/null
+++ b/server-auth/saml/src/test/java/com/linecorp/centraldogma/server/auth/saml/SamlAuthSsoHandlerTest.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright 2024 LINE Corporation
+ *
+ * LINE Corporation licenses this file to you under the Apache License,
+ * version 2.0 (the "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at:
+ *
+ *   https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+package com.linecorp.centraldogma.server.auth.saml;
+
+import static com.linecorp.centraldogma.server.auth.saml.HtmlUtil.getHtmlWithOnload;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.time.Duration;
+import java.util.concurrent.CompletableFuture;
+
+import org.junit.jupiter.api.Test;
+import org.opensaml.messaging.context.MessageContext;
+import org.opensaml.saml.saml2.core.Assertion;
+import org.opensaml.saml.saml2.core.NameID;
+import org.opensaml.saml.saml2.core.Response;
+import org.opensaml.saml.saml2.core.Subject;
+
+import com.google.common.collect.ImmutableList;
+
+import com.linecorp.armeria.common.AggregatedHttpRequest;
+import com.linecorp.armeria.common.HttpMethod;
+import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.server.ServiceRequestContext;
+
+class SamlAuthSsoHandlerTest {
+
+    @Test
+    void relayStateIsHtmlEscaped() {
+        final SamlAuthSsoHandler samlAuthSsoHandler =
+                new SamlAuthSsoHandler(() -> "id", session -> CompletableFuture.completedFuture(null),
+                                       Duration.ofDays(1), name -> "foo", "foo", null);
+
+        final AggregatedHttpRequest req = AggregatedHttpRequest.of(HttpMethod.GET, "/");
+        final ServiceRequestContext ctx = ServiceRequestContext.of(req.toHttpRequest());
+
+        final NameID nameId = mock(NameID.class);
+        when(nameId.getFormat()).thenReturn("foo");
+        when(nameId.getValue()).thenReturn("foo");
+        final Subject subject = mock(Subject.class);
+        when(subject.getNameID()).thenReturn(nameId);
+        final Assertion assertion = mock(Assertion.class);
+        when(assertion.getSubject()).thenReturn(subject);
+        final Response response = mock(Response.class);
+        when(response.getAssertions()).thenReturn(ImmutableList.of(assertion));
+
+        final MessageContext<Response> messageContext = new MessageContext<>();
+        messageContext.setMessage(response);
+        final String relayState = "'.substr(0.1)'\"&<>";
+        final HttpResponse httpResponse =
+                samlAuthSsoHandler.loginSucceeded(ctx, req, messageContext, null, relayState);
+        assertThat(httpResponse.aggregate().join().contentUtf8()).isEqualTo(getHtmlWithOnload(
+                "localStorage.setItem('sessionId','id')",
+                "window.location.href='/#&#39;.substr(0.1)&#39;&quot;&amp;&lt;&gt;'"));
+    }
+}
