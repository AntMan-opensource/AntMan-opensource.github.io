commit cd17a19e9ab1028dc662e972dd8dbb3fa68b4a33
Author: Andreas Lehmk√ºhler <lehmi@apache.org>
Date:   Sun Apr 25 10:35:50 2021 +0000

    PDFBOX-5177: don't use number of objects to initialize list of objects, don't read beyond the part of the stream reserved for object numbers
    
    git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889168 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java
index 5004d3ea2..bceb9d430 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFObjectStreamParser.java
@@ -92,7 +92,7 @@ public class PDFObjectStreamParser extends BaseParser
         try
         {
             Map<Integer, Long> offsets = readOffsets();
-            streamObjects = new ArrayList<COSObject>( numberOfObjects );
+            streamObjects = new ArrayList<COSObject>(offsets.size());
             for (Entry<Integer, Long> offset : offsets.entrySet())
             {
                 COSBase cosObject = parseObject(offset.getKey());
@@ -128,8 +128,14 @@ public class PDFObjectStreamParser extends BaseParser
         // but we can't rely on that, so that we have to sort the offsets
         // as the sequential parsers relies on it, see PDFBOX-4927
         Map<Integer, Long> objectNumbers = new TreeMap<Integer, Long>();
+        long firstObjectPosition = seqSource.getPosition() + firstObject - 1;
         for (int i = 0; i < numberOfObjects; i++)
         {
+            // don't read beyond the part of the stream reserved for the object numbers
+            if (seqSource.getPosition() >= firstObjectPosition)
+            {
+                break;
+            }
             long objectNumber = readObjectNumber();
             int offset = (int) readLong();
             objectNumbers.put(offset, objectNumber);
