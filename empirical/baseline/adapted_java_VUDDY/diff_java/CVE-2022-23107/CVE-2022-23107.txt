commit 3a4d44156874afcb925988891a7131296b752442
Author: Yaroslav Afenkin <yaroslav.afenkin@gmail.com>
Date:   Wed Dec 15 16:35:37 2021 +0200

    [SECURITY-2090]

diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/AnalysisResult.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/AnalysisResult.java
index 9036acaee..f28f7b3d7 100644
--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/AnalysisResult.java
+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/AnalysisResult.java
@@ -32,6 +32,7 @@ import hudson.model.Run;
 import io.jenkins.plugins.analysis.core.charts.JenkinsBuild;
 import io.jenkins.plugins.analysis.core.util.IssuesStatistics;
 import io.jenkins.plugins.analysis.core.util.IssuesStatisticsBuilder;
+import io.jenkins.plugins.analysis.core.util.ModelValidation;
 import io.jenkins.plugins.analysis.core.util.QualityGateEvaluator;
 import io.jenkins.plugins.analysis.core.util.QualityGateStatus;
 import io.jenkins.plugins.analysis.core.util.StaticAnalysisRun;
@@ -223,6 +224,7 @@ public class AnalysisResult implements Serializable, StaticAnalysisRun {
         this.owner = owner;
 
         Report allIssues = report.getAllIssues();
+        new ModelValidation().ensureValidId(id);
         this.id = id;
 
         totals = report.getStatistics();
diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/Tool.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/Tool.java
index a49486220..c2c43f989 100644
--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/Tool.java
+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/model/Tool.java
@@ -70,6 +70,8 @@ public abstract class Tool extends AbstractDescribableImpl<Tool> implements Seri
      */
     @DataBoundSetter
     public void setId(final String id) {
+        new ModelValidation().ensureValidId(id);
+
         this.id = id;
     }
 
diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/AnalysisResultTest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/AnalysisResultTest.java
index dce3592f9..aaf7ff5ca 100644
--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/AnalysisResultTest.java
+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/AnalysisResultTest.java
@@ -2,15 +2,24 @@ package io.jenkins.plugins.analysis.core.model;
 
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.Collections;
 
+import org.assertj.core.api.Assertions;
 import org.junit.jupiter.api.Test;
+import org.jvnet.hudson.test.Issue;
 
 import edu.hm.hafner.util.ResourceTest;
 
 import hudson.XmlFile;
+import hudson.model.Run;
 import hudson.util.XStream2;
 
+import io.jenkins.plugins.analysis.core.util.QualityGateStatus;
+import io.jenkins.plugins.forensics.blame.Blames;
+import io.jenkins.plugins.forensics.miner.RepositoryStatistics;
+
 import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;
+import static org.mockito.Mockito.*;
 
 /**
  * Tests the class {@link AnalysisResult}.
@@ -29,4 +38,14 @@ class AnalysisResultTest extends ResourceTest {
         assertThat(restored).hasTotalSize(14).hasNewSize(9).hasFixedSize(0);
         assertThat(restored.getTotals()).hasTotalSize(14).hasNewSize(9).hasFixedSize(0);
     }
+
+    @Test
+    @Issue("SECURITY-2090")
+    void constructorShouldThrowExceptionIfIdHasInvalidPattern() {
+        Assertions.assertThatIllegalArgumentException()
+                .isThrownBy(
+                        () -> new AnalysisResult(mock(Run.class), "../../invalid-id", mock(DeltaReport.class),
+                                new Blames(), new RepositoryStatistics(),
+                                QualityGateStatus.PASSED, Collections.emptyMap()));
+    }
 }
diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/ToolITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/ToolITest.java
new file mode 100644
index 000000000..3bcd847f1
--- /dev/null
+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/model/ToolITest.java
@@ -0,0 +1,25 @@
+package io.jenkins.plugins.analysis.core.model;
+
+import java.util.Collections;
+
+import org.assertj.core.api.Assertions;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+
+import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerSuite;
+import io.jenkins.plugins.analysis.warnings.groovy.GroovyParser;
+import io.jenkins.plugins.analysis.warnings.groovy.GroovyScript;
+import io.jenkins.plugins.analysis.warnings.groovy.ParserConfiguration;
+
+public class ToolITest extends IntegrationTestWithJenkinsPerSuite {
+
+    @Test
+    @Issue("SECURITY-2090")
+    public void setIdShouldThrowExceptionIfCustomIdHasInvalidPattern() {
+        ParserConfiguration configuration = ParserConfiguration.getInstance();
+        configuration.setParsers(Collections.singletonList(new GroovyParser("groovy", "", "", "", "")));
+        Tool groovyScript = new GroovyScript("groovy");
+
+        Assertions.assertThatIllegalArgumentException().isThrownBy(() -> groovyScript.setId("../../invalid-id"));
+    }
+}
\ No newline at end of file
