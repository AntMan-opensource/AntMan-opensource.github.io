commit 7f90aed0c38a972979b2464274b6d90d6aea68fe
Author: schatti <schatti@synopsys.com>
Date:   Fri Jan 13 16:11:59 2023 +0530

    SECURITY-2793

diff --git a/src/main/java/com/synopsys/integration/jenkins/coverity/SynopsysCoverityCredentialsHelper.java b/src/main/java/com/synopsys/integration/jenkins/coverity/SynopsysCoverityCredentialsHelper.java
index 86e5475..bf5d03f 100644
--- a/src/main/java/com/synopsys/integration/jenkins/coverity/SynopsysCoverityCredentialsHelper.java
+++ b/src/main/java/com/synopsys/integration/jenkins/coverity/SynopsysCoverityCredentialsHelper.java
@@ -7,15 +7,9 @@
  */
 package com.synopsys.integration.jenkins.coverity;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Collections;
-import java.util.Optional;
-
-import org.jenkinsci.plugins.plaincredentials.FileCredentials;
-
 import com.cloudbees.plugins.credentials.CredentialsMatcher;
 import com.cloudbees.plugins.credentials.CredentialsMatchers;
+import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.common.StandardCredentials;
 import com.cloudbees.plugins.credentials.common.StandardListBoxModel;
 import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl;
@@ -26,11 +20,18 @@ import com.synopsys.integration.jenkins.wrapper.SynopsysCredentialsHelper;
 import com.synopsys.integration.log.IntLogger;
 import com.synopsys.integration.log.SilentIntLogger;
 import com.synopsys.integration.rest.credentials.CredentialsBuilder;
-
+import hudson.model.Item;
 import hudson.security.ACL;
 import hudson.util.ListBoxModel;
 import hudson.util.Secret;
 import jenkins.model.Jenkins;
+import org.jenkinsci.plugins.plaincredentials.FileCredentials;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Collections;
+import java.util.Optional;
 
 public class SynopsysCoverityCredentialsHelper extends SynopsysCredentialsHelper {
     public static final Class<FileCredentials> AUTH_KEY_FILE_CREDENTIALS_CLASS = FileCredentials.class;
@@ -106,4 +107,27 @@ public class SynopsysCoverityCredentialsHelper extends SynopsysCredentialsHelper
         return credentialsBuilder.build();
     }
 
-}
+    public void checkPermissionToAccessCredentials(Item item) {
+        Jenkins jenkins = getJenkins();
+        if (jenkins == null) {
+            throw new RuntimeException("Jenkins instance is null");
+        }
+
+        if (item == null) {
+            jenkins.checkPermission(Jenkins.ADMINISTER);
+        } else {
+            item.checkPermission(Item.EXTENDED_READ);
+            item.checkPermission(CredentialsProvider.USE_ITEM);
+        }
+    }
+
+    @Nullable
+    private Jenkins getJenkins() {
+        Optional<Jenkins> optionalJenkins = jenkinsWrapper.getJenkins();
+        if (optionalJenkins.isPresent()) {
+            return optionalJenkins.get();
+        } else {
+            return null;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/CheckForIssuesInView.java b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/CheckForIssuesInView.java
index 02a2214..e4b53bb 100644
--- a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/CheckForIssuesInView.java
+++ b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/CheckForIssuesInView.java
@@ -7,21 +7,24 @@
  */
 package com.synopsys.integration.jenkins.coverity.extensions;
 
-import org.kohsuke.stapler.DataBoundConstructor;
-import org.kohsuke.stapler.QueryParameter;
-import org.slf4j.LoggerFactory;
-
 import com.synopsys.integration.jenkins.annotations.HelpMarkdown;
+import com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper;
 import com.synopsys.integration.jenkins.coverity.extensions.buildstep.CoverityBuildStep;
 import com.synopsys.integration.jenkins.coverity.extensions.utils.IssueViewFieldHelper;
 import com.synopsys.integration.jenkins.extensions.JenkinsSelectBoxEnum;
+import com.synopsys.integration.jenkins.wrapper.JenkinsWrapper;
 import com.synopsys.integration.log.Slf4jIntLogger;
-
 import hudson.Extension;
 import hudson.RelativePath;
 import hudson.model.AbstractDescribableImpl;
 import hudson.model.Descriptor;
+import hudson.model.Item;
 import hudson.util.ListBoxModel;
+import org.kohsuke.stapler.AncestorInPath;
+import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.verb.POST;
+import org.slf4j.LoggerFactory;
 
 public class CheckForIssuesInView extends AbstractDescribableImpl<CheckForIssuesInView> {
     // Jenkins directly serializes the names of the fields, so they are an important part of the plugin's API.
@@ -61,20 +64,25 @@ public class CheckForIssuesInView extends AbstractDescribableImpl<CheckForIssues
     @Extension
     public static class DescriptorImpl extends Descriptor<CheckForIssuesInView> {
         private final IssueViewFieldHelper issueViewFieldHelper;
+        private final SynopsysCoverityCredentialsHelper credentialsHelper;
 
         public DescriptorImpl() {
             super(CheckForIssuesInView.class);
             load();
             Slf4jIntLogger slf4jIntLogger = new Slf4jIntLogger(LoggerFactory.getLogger(CheckForIssuesInView.class));
             issueViewFieldHelper = new IssueViewFieldHelper(slf4jIntLogger);
+            credentialsHelper = new SynopsysCoverityCredentialsHelper(slf4jIntLogger, JenkinsWrapper.initializeFromJenkinsJVM());
         }
 
+        @POST
         public ListBoxModel doFillViewNameItems(
-            @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials,
-            @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_CREDENTIALS_ID) String credentialsId,
-            @QueryParameter("updateNow") boolean updateNow
+                @AncestorInPath Item item,
+                @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials,
+                @RelativePath(PATH_TO_COVERITY_BUILD_STEP) @QueryParameter(CoverityBuildStep.FIELD_CREDENTIALS_ID) String credentialsId,
+                @QueryParameter("updateNow") boolean updateNow
         ) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             if (updateNow) {
                 issueViewFieldHelper.updateNow(coverityInstanceUrl, overrideDefaultCredentials, credentialsId);
             }
diff --git a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/buildstep/CoverityBuildStep.java b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/buildstep/CoverityBuildStep.java
index 50dc6c1..2c7c09d 100644
--- a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/buildstep/CoverityBuildStep.java
+++ b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/buildstep/CoverityBuildStep.java
@@ -7,17 +7,6 @@
  */
 package com.synopsys.integration.jenkins.coverity.extensions.buildstep;
 
-import java.io.IOException;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.apache.commons.lang.StringUtils;
-import org.kohsuke.stapler.DataBoundConstructor;
-import org.kohsuke.stapler.DataBoundSetter;
-import org.kohsuke.stapler.QueryParameter;
-import org.slf4j.LoggerFactory;
-
 import com.synopsys.integration.jenkins.annotations.HelpMarkdown;
 import com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper;
 import com.synopsys.integration.jenkins.coverity.extensions.CheckForIssuesInView;
@@ -33,19 +22,30 @@ import com.synopsys.integration.jenkins.extensions.JenkinsSelectBoxEnum;
 import com.synopsys.integration.jenkins.wrapper.JenkinsVersionHelper;
 import com.synopsys.integration.jenkins.wrapper.JenkinsWrapper;
 import com.synopsys.integration.log.Slf4jIntLogger;
-
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.Launcher;
 import hudson.model.AbstractBuild;
 import hudson.model.AbstractProject;
 import hudson.model.BuildListener;
+import hudson.model.Item;
 import hudson.tasks.BuildStepDescriptor;
 import hudson.tasks.BuildStepMonitor;
 import hudson.tasks.Builder;
 import hudson.util.ComboBoxModel;
 import hudson.util.FormValidation;
 import hudson.util.ListBoxModel;
+import org.apache.commons.lang.StringUtils;
+import org.kohsuke.stapler.AncestorInPath;
+import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.DataBoundSetter;
+import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.verb.POST;
+import org.slf4j.LoggerFactory;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.IOException;
 
 public class CoverityBuildStep extends Builder {
     // Jenkins directly serializes the names of the fields, so they are an important part of the plugin's API.
@@ -248,26 +248,36 @@ public class CoverityBuildStep extends Builder {
             return true;
         }
 
-        public ListBoxModel doFillCoverityInstanceUrlItems() {
+        @POST
+        public ListBoxModel doFillCoverityInstanceUrlItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doFillCoverityInstanceUrlItems();
         }
 
-        public ListBoxModel doFillCredentialsIdItems() {
+        @POST
+        public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return credentialsHelper.listSupportedCredentials();
         }
 
-        public FormValidation doCheckCoverityInstanceUrl(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId) {
+        @POST
+        public FormValidation doCheckCoverityInstanceUrl(@AncestorInPath Item item, @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrl(coverityInstanceUrl, overrideDefaultCredentials, credentialsId);
         }
 
-        public ComboBoxModel doFillProjectNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter("updateNow") boolean updateNow) throws InterruptedException {
+        @POST
+        public ComboBoxModel doFillProjectNameItems(@AncestorInPath Item item, @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter("updateNow") boolean updateNow) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             if (updateNow) {
                 projectStreamFieldHelper.updateNow(coverityInstanceUrl, overrideDefaultCredentials, credentialsId);
             }
             return projectStreamFieldHelper.getProjectNamesForComboBox(coverityInstanceUrl, overrideDefaultCredentials, credentialsId);
         }
 
-        public FormValidation doCheckProjectName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName) {
+        @POST
+        public FormValidation doCheckProjectName(@AncestorInPath Item item, @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             FormValidation urlValidation = coverityConnectionFieldHelper.doCheckCoverityInstanceUrlIgnoreMessage(coverityInstanceUrl, overrideDefaultCredentials, credentialsId);
             if (urlValidation.kind == FormValidation.Kind.ERROR) {
                 return urlValidation;
@@ -276,11 +286,15 @@ public class CoverityBuildStep extends Builder {
             }
         }
 
-        public ComboBoxModel doFillStreamNameItems(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName) throws InterruptedException {
-            return projectStreamFieldHelper.getStreamNamesForComboBox(coverityInstanceUrl, overrideDefaultCredentials,credentialsId, projectName);
+        @POST
+        public ComboBoxModel doFillStreamNameItems(@AncestorInPath Item item, @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
+            return projectStreamFieldHelper.getStreamNamesForComboBox(coverityInstanceUrl, overrideDefaultCredentials, credentialsId, projectName);
         }
 
-        public FormValidation doCheckStreamName(@QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName, @QueryParameter(FIELD_STREAM_NAME) String streamName) {
+        @POST
+        public FormValidation doCheckStreamName(@AncestorInPath Item item, @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl, @QueryParameter(FIELD_OVERRIDE_CREDENTIALS) Boolean overrideDefaultCredentials, @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId, @QueryParameter(FIELD_PROJECT_NAME) String projectName, @QueryParameter(FIELD_STREAM_NAME) String streamName) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             FormValidation urlValidation = coverityConnectionFieldHelper.doCheckCoverityInstanceUrlIgnoreMessage(coverityInstanceUrl, overrideDefaultCredentials, credentialsId);
             if (urlValidation.kind == FormValidation.Kind.ERROR) {
                 return urlValidation;
@@ -303,4 +317,4 @@ public class CoverityBuildStep extends Builder {
 
     }
 
-}
+}
\ No newline at end of file
diff --git a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/global/CoverityConnectInstance.java b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/global/CoverityConnectInstance.java
index f97a88d..402bf91 100644
--- a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/global/CoverityConnectInstance.java
+++ b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/global/CoverityConnectInstance.java
@@ -7,22 +7,6 @@
  */
 package com.synopsys.integration.jenkins.coverity.extensions.global;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.nio.charset.StandardCharsets;
-import java.util.Optional;
-
-import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang3.StringUtils;
-import org.jenkinsci.plugins.plaincredentials.FileCredentials;
-import org.kohsuke.stapler.DataBoundConstructor;
-import org.kohsuke.stapler.DataBoundSetter;
-import org.kohsuke.stapler.QueryParameter;
-import org.kohsuke.stapler.verb.POST;
-import org.slf4j.LoggerFactory;
-
 import com.synopsys.integration.coverity.config.CoverityServerConfig;
 import com.synopsys.integration.jenkins.annotations.HelpMarkdown;
 import com.synopsys.integration.jenkins.coverity.SynopsysCoverityCredentialsHelper;
@@ -32,13 +16,29 @@ import com.synopsys.integration.jenkins.wrapper.JenkinsWrapper;
 import com.synopsys.integration.log.IntLogger;
 import com.synopsys.integration.log.Slf4jIntLogger;
 import com.synopsys.integration.rest.credentials.Credentials;
-
 import hudson.Extension;
 import hudson.model.AbstractDescribableImpl;
 import hudson.model.Descriptor;
+import hudson.model.Item;
 import hudson.util.FormValidation;
 import hudson.util.ListBoxModel;
 import jenkins.model.Jenkins;
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.jenkinsci.plugins.plaincredentials.FileCredentials;
+import org.kohsuke.stapler.AncestorInPath;
+import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.DataBoundSetter;
+import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.verb.POST;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Optional;
 
 public class CoverityConnectInstance extends AbstractDescribableImpl<CoverityConnectInstance> {
     @HelpMarkdown("Specify the URL for your Coverity Connect instance.  \r\n"
@@ -163,7 +163,9 @@ public class CoverityConnectInstance extends AbstractDescribableImpl<CoverityCon
             return FormValidation.ok();
         }
 
-        public ListBoxModel doFillDefaultCredentialsIdItems() {
+        @POST
+        public ListBoxModel doFillDefaultCredentialsIdItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return credentialsHelper.listSupportedCredentials();
         }
 
@@ -184,4 +186,4 @@ public class CoverityConnectInstance extends AbstractDescribableImpl<CoverityCon
         }
     }
 
-}
+}
\ No newline at end of file
diff --git a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/pipeline/CheckForIssuesStep.java b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/pipeline/CheckForIssuesStep.java
index 10e6c31..5f06c35 100644
--- a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/pipeline/CheckForIssuesStep.java
+++ b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/pipeline/CheckForIssuesStep.java
@@ -7,30 +7,6 @@
  */
 package com.synopsys.integration.jenkins.coverity.extensions.pipeline;
 
-import java.io.IOException;
-import java.io.Serializable;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Optional;
-import java.util.Set;
-import java.util.function.UnaryOperator;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.apache.commons.lang3.StringUtils;
-import org.jenkinsci.Symbol;
-import org.jenkinsci.plugins.workflow.graph.FlowNode;
-import org.jenkinsci.plugins.workflow.steps.Step;
-import org.jenkinsci.plugins.workflow.steps.StepContext;
-import org.jenkinsci.plugins.workflow.steps.StepDescriptor;
-import org.jenkinsci.plugins.workflow.steps.StepExecution;
-import org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution;
-import org.kohsuke.stapler.DataBoundConstructor;
-import org.kohsuke.stapler.DataBoundSetter;
-import org.kohsuke.stapler.QueryParameter;
-import org.slf4j.LoggerFactory;
-
 import com.synopsys.integration.jenkins.annotations.HelpMarkdown;
 import com.synopsys.integration.jenkins.coverity.CoverityJenkinsIntLogger;
 import com.synopsys.integration.jenkins.coverity.JenkinsCoverityEnvironmentVariable;
@@ -44,17 +20,33 @@ import com.synopsys.integration.jenkins.wrapper.JenkinsVersionHelper;
 import com.synopsys.integration.jenkins.wrapper.JenkinsWrapper;
 import com.synopsys.integration.log.Slf4jIntLogger;
 import com.synopsys.integration.util.IntEnvironmentVariables;
-
-import hudson.AbortException;
-import hudson.EnvVars;
-import hudson.Extension;
-import hudson.Launcher;
-import hudson.Util;
+import hudson.*;
+import hudson.model.Item;
 import hudson.model.Node;
 import hudson.model.Run;
 import hudson.model.TaskListener;
 import hudson.util.FormValidation;
 import hudson.util.ListBoxModel;
+import org.apache.commons.lang3.StringUtils;
+import org.jenkinsci.Symbol;
+import org.jenkinsci.plugins.workflow.graph.FlowNode;
+import org.jenkinsci.plugins.workflow.steps.*;
+import org.kohsuke.stapler.AncestorInPath;
+import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.DataBoundSetter;
+import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.verb.POST;
+import org.slf4j.LoggerFactory;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Optional;
+import java.util.Set;
+import java.util.function.UnaryOperator;
 
 public class CheckForIssuesStep extends Step implements Serializable {
     public static final String DISPLAY_NAME = "Check for Issues in Coverity View";
@@ -213,54 +205,73 @@ public class CheckForIssuesStep extends Step implements Serializable {
             return DISPLAY_NAME;
         }
 
-        public ListBoxModel doFillCoverityInstanceUrlItems() {
+        @POST
+        public ListBoxModel doFillCoverityInstanceUrlItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doFillCoverityInstanceUrlItems();
         }
 
+        @POST
         public FormValidation doCheckCoverityInstanceUrl(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
         ) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrl(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
-        public ListBoxModel doFillCredentialsIdItems() {
+        @POST
+        public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return credentialsHelper.listSupportedCredentials();
         }
 
+        @POST
         public ListBoxModel doFillProjectNameItems(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
-            @QueryParameter("updateNow") boolean updateNow
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
+                @QueryParameter("updateNow") boolean updateNow
         ) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             if (updateNow) {
                 projectStreamFieldHelper.updateNow(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
             }
             return projectStreamFieldHelper.getProjectNamesForListBox(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public FormValidation doCheckProjectName(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
         ) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrlIgnoreMessage(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public ListBoxModel doFillViewNameItems(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
-            @QueryParameter("updateNow") boolean updateNow
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
+                @QueryParameter("updateNow") boolean updateNow
         ) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             if (updateNow) {
                 issueViewFieldHelper.updateNow(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
             }
             return issueViewFieldHelper.getViewNamesForListBox(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public FormValidation doCheckViewName(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
         ) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrlIgnoreMessage(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
@@ -345,4 +356,4 @@ public class CheckForIssuesStep extends Step implements Serializable {
         }
 
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/wrap/CoverityEnvironmentWrapper.java b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/wrap/CoverityEnvironmentWrapper.java
index a0c8818..3a48f62 100644
--- a/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/wrap/CoverityEnvironmentWrapper.java
+++ b/src/main/java/com/synopsys/integration/jenkins/coverity/extensions/wrap/CoverityEnvironmentWrapper.java
@@ -7,27 +7,6 @@
  */
 package com.synopsys.integration.jenkins.coverity.extensions.wrap;
 
-import static com.synopsys.integration.jenkins.coverity.JenkinsCoverityEnvironmentVariable.TEMPORARY_AUTH_KEY_PATH;
-
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.Serializable;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Optional;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.apache.commons.lang3.StringUtils;
-import org.jenkinsci.Symbol;
-import org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper;
-import org.kohsuke.stapler.DataBoundConstructor;
-import org.kohsuke.stapler.DataBoundSetter;
-import org.kohsuke.stapler.QueryParameter;
-import org.slf4j.LoggerFactory;
-
 import com.synopsys.integration.jenkins.PasswordMaskingOutputStream;
 import com.synopsys.integration.jenkins.annotations.HelpMarkdown;
 import com.synopsys.integration.jenkins.coverity.CoverityJenkinsIntLogger;
@@ -46,23 +25,39 @@ import com.synopsys.integration.jenkins.wrapper.JenkinsWrapper;
 import com.synopsys.integration.log.SilentIntLogger;
 import com.synopsys.integration.log.Slf4jIntLogger;
 import com.synopsys.integration.util.IntEnvironmentVariables;
-
 import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.Launcher;
 import hudson.console.ConsoleLogFilter;
-import hudson.model.AbstractProject;
-import hudson.model.Computer;
-import hudson.model.Node;
-import hudson.model.Run;
-import hudson.model.TaskListener;
+import hudson.model.*;
 import hudson.scm.ChangeLogSet;
 import hudson.tasks.BuildWrapperDescriptor;
 import hudson.util.ComboBoxModel;
 import hudson.util.FormValidation;
 import hudson.util.ListBoxModel;
 import jenkins.tasks.SimpleBuildWrapper;
+import org.apache.commons.lang3.StringUtils;
+import org.jenkinsci.Symbol;
+import org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper;
+import org.kohsuke.stapler.AncestorInPath;
+import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.DataBoundSetter;
+import org.kohsuke.stapler.QueryParameter;
+import org.kohsuke.stapler.verb.POST;
+import org.slf4j.LoggerFactory;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.Serializable;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Optional;
+
+import static com.synopsys.integration.jenkins.coverity.JenkinsCoverityEnvironmentVariable.TEMPORARY_AUTH_KEY_PATH;
 
 public class CoverityEnvironmentWrapper extends SimpleBuildWrapper {
     // Jenkins directly serializes the names of the fields, so they are an important part of the plugin's API.
@@ -263,67 +258,92 @@ public class CoverityEnvironmentWrapper extends SimpleBuildWrapper {
             credentialsHelper = new SynopsysCoverityCredentialsHelper(slf4jIntLogger, JenkinsWrapper.initializeFromJenkinsJVM());
         }
 
-        public ListBoxModel doFillCoverityInstanceUrlItems() {
+        @POST
+        public ListBoxModel doFillCoverityInstanceUrlItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doFillCoverityInstanceUrlItems();
         }
 
+        @POST
         public FormValidation doCheckCoverityInstanceUrl(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
         ) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrl(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
-        public ListBoxModel doFillCredentialsIdItems() {
+        @POST
+        public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Item item) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return credentialsHelper.listSupportedCredentials();
         }
 
+        @POST
         public ComboBoxModel doFillProjectNameItems(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
-            @QueryParameter("updateNow") boolean updateNow
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
+                @QueryParameter("updateNow") boolean updateNow
         ) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             if (updateNow) {
                 projectStreamFieldHelper.updateNow(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
             }
             return projectStreamFieldHelper.getProjectNamesForComboBox(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public FormValidation doCheckProjectName(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId
         ) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrlIgnoreMessage(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public ComboBoxModel doFillStreamNameItems(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
-            @QueryParameter(FIELD_PROJECT_NAME) String projectName
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
+                @QueryParameter(FIELD_PROJECT_NAME) String projectName
         ) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return projectStreamFieldHelper.getStreamNamesForComboBox(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId, projectName);
         }
 
+        @POST
         public FormValidation doCheckStreamName(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId) {
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrlIgnoreMessage(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public ListBoxModel doFillViewNameItems(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
-            @QueryParameter("updateNow") boolean updateNow
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId,
+                @QueryParameter("updateNow") boolean updateNow
         ) throws InterruptedException {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             if (updateNow) {
                 issueViewFieldHelper.updateNow(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
             }
             return issueViewFieldHelper.getViewNamesForListBox(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
+        @POST
         public FormValidation doCheckViewName(
-            @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
-            @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId) {
+                @AncestorInPath Item item,
+                @QueryParameter(FIELD_COVERITY_INSTANCE_URL) String coverityInstanceUrl,
+                @QueryParameter(FIELD_CREDENTIALS_ID) String credentialsId) {
+            credentialsHelper.checkPermissionToAccessCredentials(item);
             return coverityConnectionFieldHelper.doCheckCoverityInstanceUrl(coverityInstanceUrl, StringUtils.isNotBlank(credentialsId), credentialsId);
         }
 
@@ -375,4 +395,4 @@ public class CoverityEnvironmentWrapper extends SimpleBuildWrapper {
         }
     }
 
-}
+}
\ No newline at end of file
