commit 9e09678c445613521c45acce0ce525160747ff3e
Author: Boris Yao <byao@cloudbees.com>
Date:   Thu Sep 7 20:18:37 2023 +0200

    SECURITY-3246

diff --git a/src/main/java/com/coravy/hudson/plugins/github/GithubLinkAnnotator.java b/src/main/java/com/coravy/hudson/plugins/github/GithubLinkAnnotator.java
index fcac430..9aaa780 100644
--- a/src/main/java/com/coravy/hudson/plugins/github/GithubLinkAnnotator.java
+++ b/src/main/java/com/coravy/hudson/plugins/github/GithubLinkAnnotator.java
@@ -7,9 +7,20 @@ import hudson.model.Run;
 import hudson.plugins.git.GitChangeSet;
 import hudson.scm.ChangeLogAnnotator;
 import hudson.scm.ChangeLogSet.Entry;
+import org.apache.commons.lang.StringUtils;
 
+import javax.annotation.CheckForNull;
+import javax.annotation.CheckReturnValue;
+import javax.annotation.Nonnull;
+
+import static hudson.Functions.htmlAttributeEscape;
 import static java.lang.String.format;
 
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.regex.Pattern;
 
 /**
@@ -26,6 +37,13 @@ import java.util.regex.Pattern;
 @Extension
 public class GithubLinkAnnotator extends ChangeLogAnnotator {
 
+    private static final Set<String> ALLOWED_URI_SCHEMES = new HashSet<String>();
+
+    static {
+        ALLOWED_URI_SCHEMES.addAll(
+                Arrays.asList("http", "https"));
+    }
+
     @Override
     public void annotate(Run<?, ?> build, Entry change, MarkupText text) {
         final GithubProjectProperty p = build.getParent().getProperty(
@@ -38,15 +56,18 @@ public class GithubLinkAnnotator extends ChangeLogAnnotator {
 
     void annotate(final GithubUrl url, final MarkupText text, final Entry change) {
         final String base = url.baseUrl();
+        boolean isValid = verifyUrl(base);
+        if (!isValid) {
+            throw new IllegalArgumentException("The provided Github URL is not valid");
+        }
         for (LinkMarkup markup : MARKUPS) {
             markup.process(text, base);
         }
-
         if (change instanceof GitChangeSet) {
             GitChangeSet cs = (GitChangeSet) change;
             final String id = cs.getId();
             text.wrapBy("", format(" (<a href='%s'>commit: %s</a>)",
-                                   url.commitId(id),
+                    htmlAttributeEscape(url.commitId(id)),
                                    id.substring(0, Math.min(id.length(), 7))));
         }
     }
@@ -66,7 +87,7 @@ public class GithubLinkAnnotator extends ChangeLogAnnotator {
 
         void process(MarkupText text, String url) {
             for (SubText st : text.findTokens(pattern)) {
-                st.surroundWith("<a href='" + url + href + "'>", "</a>");
+                st.surroundWith("<a href='" + htmlAttributeEscape(url) + href + "'>", "</a>");
             }
         }
 
@@ -78,4 +99,34 @@ public class GithubLinkAnnotator extends ChangeLogAnnotator {
     private static final LinkMarkup[] MARKUPS = new LinkMarkup[]{new LinkMarkup(
             "(?:C|c)lose(?:s?)\\s(?<!\\:)(?:#)NUM", // "Closes #123"
             "issues/$1")};
+
+    @Nonnull
+    public static String getAllowedUriSchemes() {
+        return StringUtils.join(ALLOWED_URI_SCHEMES, ',');
+    }
+
+    @CheckReturnValue
+    @Nonnull
+    public static boolean verifyUrl(@CheckForNull String urlString) {
+        if (StringUtils.isBlank(urlString)) {
+            return false;
+        }
+
+        // Copy of the code from Functions#getActionUrl()
+        final URI uri;
+        try {
+            uri = new URI(urlString);
+        } catch (URISyntaxException ex) {
+            return false;
+        }
+
+        // Let's check if the scheme is allowed
+        String toCheck = uri.getScheme().toLowerCase();
+        if (!ALLOWED_URI_SCHEMES.contains(toCheck)) {
+            return false;
+        }
+
+        return true;
+
+    }
 }
diff --git a/src/test/java/com/coravy/hudson/plugins/github/GithubLinkAnnotatorTest.java b/src/test/java/com/coravy/hudson/plugins/github/GithubLinkAnnotatorTest.java
index 7362e93..1f89c54 100644
--- a/src/test/java/com/coravy/hudson/plugins/github/GithubLinkAnnotatorTest.java
+++ b/src/test/java/com/coravy/hudson/plugins/github/GithubLinkAnnotatorTest.java
@@ -10,6 +10,8 @@ import java.util.Random;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.jvnet.hudson.test.Issue;
+
 import static java.lang.String.format;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
@@ -80,6 +82,22 @@ public class GithubLinkAnnotatorTest {
                 is(expected + expectedChangeSetAnnotation));
     }
 
+    //Test to verify that fake url starting with sentences like javascript are not validated
+    @Test(expected = IllegalArgumentException.class)
+    @Issue("SECURITY-3246")
+    public void urlValidationTest() {
+        GithubLinkAnnotator annotator = new GithubLinkAnnotator();
+        annotator.annotate(new GithubUrl("javascript:alert(1); //"), null, null);
+    }
+
+    //Test to verify that fake url are not validated
+    @Test(expected = IllegalArgumentException.class)
+    @Issue("SECURITY-3246")
+    public void urlHtmlAttributeValidationTest() {
+        GithubLinkAnnotator annotator = new GithubLinkAnnotator();
+        annotator.annotate(new GithubUrl("a' onclick=alert(777) foo='bar/\n"), null, null);
+    }
+
     private String annotate(final String originalText, GitChangeSet changeSet) {
         MarkupText markupText = new MarkupText(originalText);
 
