commit d374a5f77e6b58e36f0e0e4419be18b95edcd7ff
Author: Julian Ladisch <julianladisch@users.noreply.github.com>
Date:   Mon Nov 21 18:46:32 2022 +0100

    FOLIO-3645: schema name SQL injection
    
    SELECT EXISTS now uses a prepared statement.
    
    PostgreSQL doesn't support a prepared statement for CREATE SCHEMA and DROP SCHEMA.
    Instead we validate the schema name before use to mitigate any SQL injection attack.

diff --git a/tenant/src/main/java/org/folio/spring/tenant/hibernate/HibernateSchemaService.java b/tenant/src/main/java/org/folio/spring/tenant/hibernate/HibernateSchemaService.java
index dbf4af3..ad52309 100644
--- a/tenant/src/main/java/org/folio/spring/tenant/hibernate/HibernateSchemaService.java
+++ b/tenant/src/main/java/org/folio/spring/tenant/hibernate/HibernateSchemaService.java
@@ -6,6 +6,7 @@ import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.sql.Connection;
 import java.sql.DriverManager;
+import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
@@ -41,8 +42,6 @@ import org.springframework.core.io.ResourceLoader;
 import org.springframework.core.type.filter.AnnotationTypeFilter;
 import org.springframework.stereotype.Service;
 
-import static org.hibernate.cfg.AvailableSettings.*;
-
 @Service("hibernateSchemaService")
 public class HibernateSchemaService implements InitializingBean {
 
@@ -177,9 +176,10 @@ public class HibernateSchemaService implements InitializingBean {
   }
 
   private boolean schemaExists(Connection connection, String schema) throws SQLException {
-    try (Statement statement = connection.createStatement()) {
-      String queryTemplate = "SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = '%s');";
-      ResultSet resultSet = statement.executeQuery(String.format(queryTemplate, schema));
+    String sql = "SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = ?)";
+    try (PreparedStatement statement = connection.prepareStatement(sql)) {
+      statement.setString(1, schema);
+      ResultSet resultSet = statement.executeQuery();
       if (resultSet.next()) {
         return resultSet.getBoolean(1);
       }
diff --git a/tenant/src/main/java/org/folio/spring/tenant/service/SchemaService.java b/tenant/src/main/java/org/folio/spring/tenant/service/SchemaService.java
index 32eee78..682672f 100644
--- a/tenant/src/main/java/org/folio/spring/tenant/service/SchemaService.java
+++ b/tenant/src/main/java/org/folio/spring/tenant/service/SchemaService.java
@@ -1,5 +1,6 @@
 package org.folio.spring.tenant.service;
 
+import java.util.regex.Pattern;
 import org.folio.spring.tenant.properties.BuildInfoProperties;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
@@ -7,11 +8,17 @@ import org.springframework.stereotype.Service;
 @Service
 public class SchemaService {
 
+  private static final Pattern SCHEMA_REGEXP = Pattern.compile("[a-zA-Z0-9_]+");
+
   @Autowired
   private BuildInfoProperties buildInfoProperties;
 
   public String getSchema(String tenant) {
-    return String.format("%s_%s", tenant, buildInfoProperties.getArtifact()).replace("-", "_");
+    var schema = String.format("%s_%s", tenant, buildInfoProperties.getArtifact()).replace("-", "_");
+    if (! SCHEMA_REGEXP.matcher(schema).matches()) {
+      throw new IllegalArgumentException("Illegal character in schema name: " + schema);
+    }
+    return schema;
   }
 
 }
