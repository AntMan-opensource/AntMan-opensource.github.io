commit e59cec5e33ea188688f4e337a707c4a030d336b0
Author: Antonio Mu√±iz <amunizmartin@gmail.com>
Date:   Thu Mar 23 14:28:23 2023 +0100

    [SECURITY-3079]
    
    (cherry picked from commit ac7bfe4c82fa10529106582fb6ba1e97046db233)

diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/SecretsMasker.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/SecretsMasker.java
index 05bb0dee..83c7d76d 100644
--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/SecretsMasker.java
+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/SecretsMasker.java
@@ -42,6 +42,8 @@ import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.regex.Pattern;
+
 import org.csanchez.jenkins.plugins.kubernetes.KubernetesComputer;
 import org.csanchez.jenkins.plugins.kubernetes.KubernetesSlave;
 import org.csanchez.jenkins.plugins.kubernetes.PodTemplate;
@@ -61,14 +63,19 @@ public final class SecretsMasker extends TaskListenerDecorator {
 
     private final Set<String> values;
 
+    private final Pattern pattern;
+
     private SecretsMasker(Set<String> values) {
         assert !values.isEmpty();
         this.values = values;
+        // stored at creation time so SecretPatternFactory extensions are properly loaded
+        // when/if this decorator runs at agent side (see DurableTaskStep.USE_WATCHING)
+        this.pattern = SecretPatterns.getAggregateSecretPattern(values);
     }
 
     @Override
     public OutputStream decorate(OutputStream logger) throws IOException, InterruptedException {
-        return new SecretPatterns.MaskingOutputStream(logger, () -> SecretPatterns.getAggregateSecretPattern(values), "UTF-8");
+        return new SecretPatterns.MaskingOutputStream(logger, () -> pattern, "UTF-8");
     }
 
     @Extension
diff --git a/src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java b/src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java
index c6720ef0..9f018eb7 100644
--- a/src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java
+++ b/src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java
@@ -74,6 +74,7 @@ import org.csanchez.jenkins.plugins.kubernetes.PodTemplateUtils;
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.Matchers;
 import org.jenkinsci.plugins.workflow.job.WorkflowRun;
+import org.jenkinsci.plugins.workflow.steps.durable_task.DurableTaskStep;
 import org.jenkinsci.plugins.workflow.test.steps.SemaphoreStep;
 import org.junit.After;
 import org.junit.Before;
@@ -247,7 +248,7 @@ public class KubernetesPipelineTest extends AbstractKubernetesPipelineTest {
                 deletePods(cloud.connect(), getLabels(cloud, this, name), true));
     }
 
-    @Issue("JENKINS-57893")
+    @Issue({"JENKINS-57893", "SECURITY-3079"})
     @Test
     public void runInPodFromYaml() throws Exception {
         List<PodTemplate> templates = cloud.getTemplates();
@@ -265,6 +266,14 @@ public class KubernetesPipelineTest extends AbstractKubernetesPipelineTest {
         r.assertLogContains("INSIDE_CONTAINER_ENV_VAR_FROM_SECRET = **** or " + CONTAINER_ENV_VAR_FROM_SECRET_VALUE.toUpperCase(Locale.ROOT) + "\n", b);
         assertFalse("There are pods leftover after test execution, see previous logs",
                 deletePods(cloud.connect(), getLabels(cloud, this, name), true));
+
+        // SECURITY-3079
+        DurableTaskStep.USE_WATCHING = true;
+        WorkflowRun build = p.scheduleBuild2(0).waitForStart();
+        r.assertBuildStatusSuccess(r.waitForCompletion(build));
+        r.assertLogNotContains(CONTAINER_ENV_VAR_FROM_SECRET_VALUE, build);
+        r.assertLogContains("INSIDE_CONTAINER_ENV_VAR_FROM_SECRET = **** or " + CONTAINER_ENV_VAR_FROM_SECRET_VALUE.toUpperCase(Locale.ROOT) + "\n", build);
+        DurableTaskStep.USE_WATCHING = false;
     }
 
     @Test
