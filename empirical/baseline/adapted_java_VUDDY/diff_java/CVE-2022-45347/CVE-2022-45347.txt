commit c1ad1bc58fb293f8eacf15d9a28249012ed37aa0
Author: 吴伟杰 <wuweijie@apache.org>
Date:   Thu Dec 1 14:26:38 2022 +0800

    Proxy support MySQL COM_RESET_CONNECTION (#22555)
    
    * Proxy support MySQL COM_RESET_CONNECTION
    
    * Fix checkstyle

diff --git a/db-protocol/mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/command/admin/MySQLComResetConnectionPacket.java b/db-protocol/mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/command/admin/MySQLComResetConnectionPacket.java
new file mode 100644
index 00000000000..ef8d87d99b4
--- /dev/null
+++ b/db-protocol/mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/command/admin/MySQLComResetConnectionPacket.java
@@ -0,0 +1,33 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.db.protocol.mysql.packet.command.admin;
+
+import org.apache.shardingsphere.db.protocol.mysql.packet.command.MySQLCommandPacket;
+import org.apache.shardingsphere.db.protocol.mysql.packet.command.MySQLCommandPacketType;
+
+/**
+ * COM_RESET_CONNECTION packet for MySQL.
+ *
+ * @see <a href="https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_com_reset_connection.html">COM_RESET_CONNECTION</a>
+ */
+public final class MySQLComResetConnectionPacket extends MySQLCommandPacket {
+    
+    public MySQLComResetConnectionPacket() {
+        super(MySQLCommandPacketType.COM_RESET_CONNECTION);
+    }
+}
diff --git a/proxy/backend/src/main/java/org/apache/shardingsphere/proxy/backend/session/ServerPreparedStatementRegistry.java b/proxy/backend/src/main/java/org/apache/shardingsphere/proxy/backend/session/ServerPreparedStatementRegistry.java
index c932276b15f..66f1989e974 100644
--- a/proxy/backend/src/main/java/org/apache/shardingsphere/proxy/backend/session/ServerPreparedStatementRegistry.java
+++ b/proxy/backend/src/main/java/org/apache/shardingsphere/proxy/backend/session/ServerPreparedStatementRegistry.java
@@ -57,4 +57,11 @@ public final class ServerPreparedStatementRegistry {
     public void removePreparedStatement(final Object statementId) {
         preparedStatements.remove(statementId);
     }
+    
+    /**
+     * Clear prepared statements.
+     */
+    public void clear() {
+        preparedStatements.clear();
+    }
 }
diff --git a/proxy/backend/src/test/java/org/apache/shardingsphere/proxy/backend/session/ServerServerPreparedStatementRegistryTest.java b/proxy/backend/src/test/java/org/apache/shardingsphere/proxy/backend/session/ServerServerPreparedStatementRegistryTest.java
index aeda58ee77d..1c8b011f9a8 100644
--- a/proxy/backend/src/test/java/org/apache/shardingsphere/proxy/backend/session/ServerServerPreparedStatementRegistryTest.java
+++ b/proxy/backend/src/test/java/org/apache/shardingsphere/proxy/backend/session/ServerServerPreparedStatementRegistryTest.java
@@ -37,6 +37,14 @@ public final class ServerServerPreparedStatementRegistryTest {
         assertNull(registry.getPreparedStatement(1));
     }
     
+    @Test
+    public void assertClearPreparedStatements() {
+        ServerPreparedStatementRegistry registry = new ServerPreparedStatementRegistry();
+        registry.addPreparedStatement(1, new DummyServerPreparedStatement());
+        registry.clear();
+        assertNull(registry.getPreparedStatement(1));
+    }
+    
     private static class DummyServerPreparedStatement implements ServerPreparedStatement {
         
         @Override
diff --git a/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactory.java b/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactory.java
index 417cf8e71ce..d4cc24640f0 100644
--- a/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactory.java
+++ b/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactory.java
@@ -33,6 +33,7 @@ import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.text.que
 import org.apache.shardingsphere.db.protocol.packet.CommandPacket;
 import org.apache.shardingsphere.proxy.backend.session.ConnectionSession;
 import org.apache.shardingsphere.proxy.frontend.command.executor.CommandExecutor;
+import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.MySQLComResetConnectionExecutor;
 import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.MySQLComSetOptionExecutor;
 import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.initdb.MySQLComInitDbExecutor;
 import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.ping.MySQLComPingExecutor;
@@ -89,6 +90,8 @@ public final class MySQLCommandExecutorFactory {
                 return new MySQLComStmtCloseExecutor((MySQLComStmtClosePacket) commandPacket, connectionSession);
             case COM_SET_OPTION:
                 return new MySQLComSetOptionExecutor((MySQLComSetOptionPacket) commandPacket, connectionSession);
+            case COM_RESET_CONNECTION:
+                return new MySQLComResetConnectionExecutor(connectionSession);
             default:
                 return new MySQLUnsupportedCommandExecutor(commandPacketType);
         }
diff --git a/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactory.java b/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactory.java
index 0f6119e0526..9d65e60281c 100644
--- a/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactory.java
+++ b/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactory.java
@@ -21,6 +21,7 @@ import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.MySQLCommandPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.MySQLCommandPacketType;
+import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.MySQLComResetConnectionPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.MySQLComSetOptionPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.MySQLUnsupportedCommandPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.initdb.MySQLComInitDbPacket;
@@ -79,6 +80,8 @@ public final class MySQLCommandPacketFactory {
                 return new MySQLComSetOptionPacket(payload);
             case COM_PING:
                 return new MySQLComPingPacket();
+            case COM_RESET_CONNECTION:
+                return new MySQLComResetConnectionPacket();
             default:
                 return new MySQLUnsupportedCommandPacket(commandPacketType);
         }
diff --git a/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/admin/MySQLComResetConnectionExecutor.java b/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/admin/MySQLComResetConnectionExecutor.java
new file mode 100644
index 00000000000..b3df71e411b
--- /dev/null
+++ b/proxy/frontend/mysql/src/main/java/org/apache/shardingsphere/proxy/frontend/mysql/command/admin/MySQLComResetConnectionExecutor.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.frontend.mysql.command.admin;
+
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;
+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;
+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.JDBCBackendConnection;
+import org.apache.shardingsphere.proxy.backend.communication.jdbc.transaction.JDBCBackendTransactionManager;
+import org.apache.shardingsphere.proxy.backend.session.ConnectionSession;
+import org.apache.shardingsphere.proxy.frontend.command.executor.CommandExecutor;
+import org.apache.shardingsphere.proxy.frontend.mysql.command.ServerStatusFlagCalculator;
+
+import java.sql.SQLException;
+import java.util.Collection;
+import java.util.Collections;
+
+/**
+ * COM_RESET_CONNECTION command executor for MySQL.
+ */
+@RequiredArgsConstructor
+public final class MySQLComResetConnectionExecutor implements CommandExecutor {
+    
+    private final ConnectionSession connectionSession;
+    
+    @Override
+    public Collection<DatabasePacket<?>> execute() throws SQLException {
+        if (connectionSession.getBackendConnection() instanceof JDBCBackendConnection) {
+            new JDBCBackendTransactionManager((JDBCBackendConnection) connectionSession.getBackendConnection()).rollback();
+        }
+        connectionSession.setAutoCommit(true);
+        connectionSession.setDefaultIsolationLevel(null);
+        connectionSession.setIsolationLevel(null);
+        connectionSession.getServerPreparedStatementRegistry().clear();
+        return Collections.singletonList(new MySQLOKPacket(1, ServerStatusFlagCalculator.calculateFor(connectionSession)));
+    }
+}
diff --git a/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java b/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java
index cc425a0a71a..92f9c1e6aad 100644
--- a/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java
+++ b/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandExecutorFactoryTest.java
@@ -42,6 +42,7 @@ import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.JDB
 import org.apache.shardingsphere.proxy.backend.context.ProxyContext;
 import org.apache.shardingsphere.proxy.backend.session.ConnectionSession;
 import org.apache.shardingsphere.proxy.frontend.mysql.ProxyContextRestorer;
+import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.MySQLComResetConnectionExecutor;
 import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.MySQLComSetOptionExecutor;
 import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.initdb.MySQLComInitDbExecutor;
 import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.ping.MySQLComPingExecutor;
@@ -167,6 +168,12 @@ public final class MySQLCommandExecutorFactoryTest extends ProxyContextRestorer
         assertThat(MySQLCommandExecutorFactory.newInstance(MySQLCommandPacketType.COM_SET_OPTION, mock(MySQLComSetOptionPacket.class), connectionSession), instanceOf(MySQLComSetOptionExecutor.class));
     }
     
+    @Test
+    public void assertNewInstanceWithComResetConnection() throws SQLException {
+        assertThat(MySQLCommandExecutorFactory.newInstance(MySQLCommandPacketType.COM_RESET_CONNECTION, mock(MySQLComSetOptionPacket.class), connectionSession),
+                instanceOf(MySQLComResetConnectionExecutor.class));
+    }
+    
     @Test
     public void assertNewInstanceWithUnsupportedCommand() throws SQLException {
         assertThat(MySQLCommandExecutorFactory.newInstance(MySQLCommandPacketType.COM_REFRESH, mock(CommandPacket.class), connectionSession), instanceOf(MySQLUnsupportedCommandExecutor.class));
diff --git a/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactoryTest.java b/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactoryTest.java
index e34d8a21a1f..c6d37c8b125 100644
--- a/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactoryTest.java
+++ b/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/MySQLCommandPacketFactoryTest.java
@@ -19,6 +19,7 @@ package org.apache.shardingsphere.proxy.frontend.mysql.command;
 
 import org.apache.shardingsphere.db.protocol.mysql.constant.MySQLNewParametersBoundFlag;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.MySQLCommandPacketType;
+import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.MySQLComResetConnectionPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.MySQLComSetOptionPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.MySQLUnsupportedCommandPacket;
 import org.apache.shardingsphere.db.protocol.mysql.packet.command.admin.initdb.MySQLComInitDbPacket;
@@ -109,6 +110,11 @@ public final class MySQLCommandPacketFactoryTest {
         assertThat(MySQLCommandPacketFactory.newInstance(MySQLCommandPacketType.COM_PING, payload, connectionSession, false), instanceOf(MySQLComPingPacket.class));
     }
     
+    @Test
+    public void assertNewInstanceWithComResetConnectionPacket() {
+        assertThat(MySQLCommandPacketFactory.newInstance(MySQLCommandPacketType.COM_RESET_CONNECTION, payload, connectionSession, false), instanceOf(MySQLComResetConnectionPacket.class));
+    }
+    
     @Test
     public void assertNewInstanceWithComSleepPacket() {
         assertThat(MySQLCommandPacketFactory.newInstance(MySQLCommandPacketType.COM_SLEEP, payload, connectionSession, false), instanceOf(MySQLUnsupportedCommandPacket.class));
@@ -223,9 +229,4 @@ public final class MySQLCommandPacketFactoryTest {
     public void assertNewInstanceWithComBinlogDumpGTIDPacket() {
         assertThat(MySQLCommandPacketFactory.newInstance(MySQLCommandPacketType.COM_BINLOG_DUMP_GTID, payload, connectionSession, false), instanceOf(MySQLUnsupportedCommandPacket.class));
     }
-    
-    @Test
-    public void assertNewInstanceWithComResetConnectionPacket() {
-        assertThat(MySQLCommandPacketFactory.newInstance(MySQLCommandPacketType.COM_RESET_CONNECTION, payload, connectionSession, false), instanceOf(MySQLUnsupportedCommandPacket.class));
-    }
 }
diff --git a/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/admin/MySQLComResetConnectionExecutorTest.java b/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/admin/MySQLComResetConnectionExecutorTest.java
new file mode 100644
index 00000000000..dc50aa23ead
--- /dev/null
+++ b/proxy/frontend/mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/admin/MySQLComResetConnectionExecutorTest.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.frontend.mysql.command.admin;
+
+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;
+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;
+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.JDBCBackendConnection;
+import org.apache.shardingsphere.proxy.backend.communication.jdbc.transaction.JDBCBackendTransactionManager;
+import org.apache.shardingsphere.proxy.backend.session.ConnectionSession;
+import org.apache.shardingsphere.proxy.backend.session.ServerPreparedStatementRegistry;
+import org.apache.shardingsphere.proxy.backend.session.transaction.TransactionStatus;
+import org.apache.shardingsphere.proxy.frontend.mysql.command.query.binary.MySQLServerPreparedStatement;
+import org.apache.shardingsphere.transaction.core.TransactionType;
+import org.junit.Test;
+import org.mockito.MockedConstruction;
+
+import java.sql.SQLException;
+import java.util.Collection;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.mockConstruction;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+public final class MySQLComResetConnectionExecutorTest {
+    
+    @Test
+    public void assertExecute() throws SQLException {
+        ConnectionSession connectionSession = mock(ConnectionSession.class);
+        JDBCBackendConnection backendConnection = mock(JDBCBackendConnection.class);
+        when(connectionSession.getBackendConnection()).thenReturn(backendConnection);
+        when(connectionSession.getTransactionStatus()).thenReturn(new TransactionStatus(TransactionType.LOCAL));
+        when(connectionSession.getServerPreparedStatementRegistry()).thenReturn(new ServerPreparedStatementRegistry());
+        int statementId = 1;
+        connectionSession.getServerPreparedStatementRegistry().addPreparedStatement(statementId, new MySQLServerPreparedStatement("", null));
+        Collection<DatabasePacket<?>> actual;
+        try (MockedConstruction<JDBCBackendTransactionManager> ignored = mockConstruction(JDBCBackendTransactionManager.class)) {
+            actual = new MySQLComResetConnectionExecutor(connectionSession).execute();
+        }
+        assertThat(actual.size(), is(1));
+        assertThat(actual.iterator().next(), instanceOf(MySQLOKPacket.class));
+        verify(connectionSession).setAutoCommit(true);
+        verify(connectionSession).setDefaultIsolationLevel(null);
+        verify(connectionSession).setIsolationLevel(null);
+        assertNull(connectionSession.getServerPreparedStatementRegistry().getPreparedStatement(statementId));
+    }
+}
