commit cf61d543f17d284a7c878c27704857e2ebc08079
Author: Honor Systems Updater Jenkins <hsujenkins@j2eeguys.com>
Date:   Mon Jun 20 21:10:24 2022 +0000

    Honor Systems generated updates. Closes #296.

diff --git a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/Five.java b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/Five.java
index 9ecbfdd6..5556098f 100644
--- a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/Five.java
+++ b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/Five.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2008, 2009, 2011, 2015 XStream Committers.
+ * Copyright (C) 2008, 2009, 2011, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -39,6 +39,6 @@ public class Five extends One {
     }
 
     public int hashCode() {
-        return super.hashCode() + two + new Boolean(three).hashCode() + five.toString().hashCode();
+        return super.hashCode() + two + Boolean.valueOf(three).hashCode() + five.toString().hashCode();
     }
-}
\ No newline at end of file
+}
diff --git a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/FiveBean.java b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/FiveBean.java
index a219f39c..7e0d819e 100644
--- a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/FiveBean.java
+++ b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/FiveBean.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2009, 2011, 2015 XStream Committers.
+ * Copyright (C) 2009, 2011, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -63,6 +63,6 @@ public class FiveBean extends OneBean {
     }
 
     public int hashCode() {
-        return super.hashCode() + two + new Boolean(three).hashCode() + five.toString().hashCode();
+        return super.hashCode() + two + Boolean.valueOf(three).hashCode() + five.toString().hashCode();
     }
-}
\ No newline at end of file
+}
diff --git a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/SerializableFive.java b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/SerializableFive.java
index cefc10d0..2c0a5d8a 100644
--- a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/SerializableFive.java
+++ b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/model/SerializableFive.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2008, 2009, 2011, 2015 XStream Committers.
+ * Copyright (C) 2008, 2009, 2011, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -52,6 +52,6 @@ public class SerializableFive extends SerializableOne {
     }
 
     public int hashCode() {
-        return super.hashCode() + two + new Boolean(three).hashCode() + five.toString().hashCode();
+        return super.hashCode() + two + Boolean.valueOf(three).hashCode() + five.toString().hashCode();
     }
-}
\ No newline at end of file
+}
diff --git a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/BasicTarget.java b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/BasicTarget.java
index 582f717a..8932afbb 100644
--- a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/BasicTarget.java
+++ b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/BasicTarget.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2008, 2009, 2011, 2015 XStream Committers.
+ * Copyright (C) 2008, 2009, 2011, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -31,14 +31,14 @@ public class BasicTarget implements Target {
     
     public BasicTarget() {
         list = new ArrayList();
-        list.add(new Integer(1));
-        list.add(new Byte((byte)2));
-        list.add(new Short((short)3));
-        list.add(new Long(4));
+        list.add(Integer.valueOf(1));
+        list.add(Byte.valueOf((byte)2));
+        list.add(Short.valueOf((short)3));
+        list.add(Long.valueOf(4));
         list.add("Profile");
         list.add(Boolean.TRUE);
-        list.add(new Float(1.2f));
-        list.add(new Double(1.2f));
+        list.add(Float.valueOf(1.2f));
+        list.add(Double.valueOf(1.2f));
         list.add(new File("profile.txt"));
         list.add(Locale.ENGLISH);
     }
diff --git a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/ExtendedTarget.java b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/ExtendedTarget.java
index cc0e78a9..71fbfab4 100644
--- a/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/ExtendedTarget.java
+++ b/xstream-benchmark/src/java/com/thoughtworks/xstream/tools/benchmark/targets/ExtendedTarget.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2008, 2009, 2011, 2015 XStream Committers.
+ * Copyright (C) 2008, 2009, 2011, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -85,9 +85,9 @@ public class ExtendedTarget implements Target {
 
         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
             if (method.equals(EQUALS)) {
-                return new Boolean(args[0] instanceof Runnable);
+                return Boolean.valueOf(args[0] instanceof Runnable);
             } else if (method.getName().equals("hashCode")) {
-                return new Integer(System.identityHashCode(proxy));
+                return Integer.valueOf(System.identityHashCode(proxy));
             } else if (method.getName().equals("toString")) {
                 return "Proxy" + System.identityHashCode(proxy);
             } else if (method.getName().equals("getClass")) {
diff --git a/xstream-jmh/src/java/com/thoughtworks/xstream/benchmark/jmh/StringConverterBenchmark.java b/xstream-jmh/src/java/com/thoughtworks/xstream/benchmark/jmh/StringConverterBenchmark.java
index 91f83591..bd71f53c 100644
--- a/xstream-jmh/src/java/com/thoughtworks/xstream/benchmark/jmh/StringConverterBenchmark.java
+++ b/xstream-jmh/src/java/com/thoughtworks/xstream/benchmark/jmh/StringConverterBenchmark.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015, 2017, 2021 XStream Committers.
+ * Copyright (C) 2015, 2017, 2021, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -39,7 +39,6 @@ import com.thoughtworks.xstream.core.util.WeakCache;
 import com.thoughtworks.xstream.io.xml.CompactWriter;
 import com.thoughtworks.xstream.io.xml.MXParserDriver;
 import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
-import com.thoughtworks.xstream.io.xml.Xpp3Driver;
 import com.thoughtworks.xstream.security.ArrayTypePermission;
 import com.thoughtworks.xstream.security.NoTypePermission;
 
@@ -171,7 +170,7 @@ public class StringConverterBenchmark {
          * @since 1.4.9
          */
         public ConcurrentHashMapStringConverter(final int lengthLimit) {
-            this(new ConcurrentHashMap<String, String>(), lengthLimit);
+            this(new ConcurrentHashMap<>(), lengthLimit);
         }
 
         @Override
diff --git a/xstream/src/java/com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.java b/xstream/src/java/com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.java
index a1194ecc..10467dda 100644
--- a/xstream/src/java/com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.java
+++ b/xstream/src/java/com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2004, 2005, 2006 Joe Walnes.
- * Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018 XStream Committers.
+ * Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -191,7 +191,7 @@ public abstract class AbstractReflectionConverter implements Converter, Caching
         };
 
         final Map<String, Set<Mapper.ImplicitCollectionMapping>> hiddenMappers =
-                new HashMap<String, Set<Mapper.ImplicitCollectionMapping>>();
+                new HashMap<>();
         for (final FieldInfo info : fields) {
             if (info.value != null) {
                 final boolean isCollection = info.value instanceof Collection;
diff --git a/xstream/src/java/com/thoughtworks/xstream/converters/reflection/NativeFieldKeySorter.java b/xstream/src/java/com/thoughtworks/xstream/converters/reflection/NativeFieldKeySorter.java
index 544af247..4349423d 100644
--- a/xstream/src/java/com/thoughtworks/xstream/converters/reflection/NativeFieldKeySorter.java
+++ b/xstream/src/java/com/thoughtworks/xstream/converters/reflection/NativeFieldKeySorter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2007, 2014 XStream Committers.
+ * Copyright (C) 2007, 2014, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -26,7 +26,7 @@ public class NativeFieldKeySorter implements FieldKeySorter {
 
     @Override
     public Map<FieldKey, Field> sort(final Class<?> type, final Map<FieldKey, Field> keyedByFieldKey) {
-        final Map<FieldKey, Field> map = new TreeMap<FieldKey, Field>(new Comparator<FieldKey>() {
+        final Map<FieldKey, Field> map = new TreeMap<>(new Comparator<FieldKey>() {
 
             @Override
             public int compare(final FieldKey fieldKey1, final FieldKey fieldKey2) {
diff --git a/xstream/src/java/com/thoughtworks/xstream/converters/reflection/XStream12FieldKeySorter.java b/xstream/src/java/com/thoughtworks/xstream/converters/reflection/XStream12FieldKeySorter.java
index 14a6d255..3569bf03 100644
--- a/xstream/src/java/com/thoughtworks/xstream/converters/reflection/XStream12FieldKeySorter.java
+++ b/xstream/src/java/com/thoughtworks/xstream/converters/reflection/XStream12FieldKeySorter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2007, 2008, 2013, 2014 XStream Committers.
+ * Copyright (C) 2007, 2008, 2013, 2014, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -27,7 +27,7 @@ public class XStream12FieldKeySorter implements FieldKeySorter {
 
     @Override
     public Map<FieldKey, Field> sort(final Class<?> type, final Map<FieldKey, Field> keyedByFieldKey) {
-        final Map<FieldKey, Field> map = new TreeMap<FieldKey, Field>(new Comparator<FieldKey>() {
+        final Map<FieldKey, Field> map = new TreeMap<>(new Comparator<FieldKey>() {
 
             @Override
             public int compare(final FieldKey fieldKey1, final FieldKey fieldKey2) {
diff --git a/xstream/src/java/com/thoughtworks/xstream/core/DefaultConverterLookup.java b/xstream/src/java/com/thoughtworks/xstream/core/DefaultConverterLookup.java
index 0e34bd57..e97dd2ef 100644
--- a/xstream/src/java/com/thoughtworks/xstream/core/DefaultConverterLookup.java
+++ b/xstream/src/java/com/thoughtworks/xstream/core/DefaultConverterLookup.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2004, 2005, 2006 Joe Walnes.
- * Copyright (C) 2006, 2007, 2008, 2009, 2011, 2013, 2014, 2015, 2016, 2017, 2019 XStream Committers.
+ * Copyright (C) 2006, 2007, 2008, 2009, 2011, 2013, 2014, 2015, 2016, 2017, 2019, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -37,7 +37,7 @@ public class DefaultConverterLookup implements ConverterLookup, ConverterRegistr
     private Map<String, Converter> serializationMap = null;
 
     public DefaultConverterLookup() {
-        this(new HashMap<String, Converter>());
+        this(new HashMap<>());
     }
 
     /**
@@ -107,7 +107,7 @@ public class DefaultConverterLookup implements ConverterLookup, ConverterRegistr
     }
 
     private Object readResolve() {
-        typeToConverterMap = serializationMap == null ? new HashMap<String, Converter>() : serializationMap;
+        typeToConverterMap = serializationMap == null ? new HashMap<>() : serializationMap;
         serializationMap = null;
         return this;
     }
diff --git a/xstream/src/java/com/thoughtworks/xstream/core/util/PresortedMap.java b/xstream/src/java/com/thoughtworks/xstream/core/util/PresortedMap.java
index f22678a1..61885006 100644
--- a/xstream/src/java/com/thoughtworks/xstream/core/util/PresortedMap.java
+++ b/xstream/src/java/com/thoughtworks/xstream/core/util/PresortedMap.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2006, 2007, 2010, 2014, 2015 XStream Committers.
+ * Copyright (C) 2006, 2007, 2010, 2014, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * Created on 12.10.2010 by Joerg Schaible, extracted from TreeMapConverter.
@@ -27,11 +27,11 @@ public class PresortedMap<K, V> implements SortedMap<K, V> {
     private final Comparator<K> comparator;
 
     public PresortedMap() {
-        this(null, new ArraySet<Map.Entry<K, V>>());
+        this(null, new ArraySet<>());
     }
 
     public PresortedMap(final Comparator<K> comparator) {
-        this(comparator, new ArraySet<Map.Entry<K, V>>());
+        this(comparator, new ArraySet<>());
     }
 
     private PresortedMap(final Comparator<K> comparator, final PresortedMap.ArraySet<Map.Entry<K, V>> set) {
diff --git a/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafePropertyEditor.java b/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafePropertyEditor.java
index 77b63cf5..6d7d1892 100644
--- a/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafePropertyEditor.java
+++ b/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafePropertyEditor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2007, 2008, 2014, 2016 XStream Committers.
+ * Copyright (c) 2007, 2008, 2014, 2016, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -42,7 +42,7 @@ public class ThreadSafePropertyEditor {
             throw new IllegalArgumentException(type.getName() + " is not a " + PropertyEditor.class.getName());
         }
         editorType = type;
-        pool = new Pool<PropertyEditor>(initialPoolSize, maxPoolSize, new Pool.Factory<PropertyEditor>() {
+        pool = new Pool<>(initialPoolSize, maxPoolSize, new Pool.Factory<PropertyEditor>() {
             @Override
             public PropertyEditor newInstance() {
                 ErrorWritingException ex = null;
diff --git a/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.java b/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.java
index 0ae5d10a..981b1685 100644
--- a/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.java
+++ b/xstream/src/java/com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2004, 2005 Joe Walnes.
- * Copyright (C) 2006, 2007, 2009, 2011, 2012, 2014 XStream Committers.
+ * Copyright (C) 2006, 2007, 2009, 2011, 2012, 2014, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -51,7 +51,7 @@ public class ThreadSafeSimpleDateFormat {
             final int maxPoolSize, final boolean lenient) {
         formatString = format;
         this.timeZone = timeZone;
-        pool = new Pool<DateFormat>(initialPoolSize, maxPoolSize, new Pool.Factory<DateFormat>() {
+        pool = new Pool<>(initialPoolSize, maxPoolSize, new Pool.Factory<DateFormat>() {
             @Override
             public SimpleDateFormat newInstance() {
                 final SimpleDateFormat dateFormat = new SimpleDateFormat(formatString, locale);
diff --git a/xstream/src/java/com/thoughtworks/xstream/core/util/WeakCache.java b/xstream/src/java/com/thoughtworks/xstream/core/util/WeakCache.java
index 780cbcf7..97531646 100644
--- a/xstream/src/java/com/thoughtworks/xstream/core/util/WeakCache.java
+++ b/xstream/src/java/com/thoughtworks/xstream/core/util/WeakCache.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011, 2013, 2014, 2015, 2019 XStream Committers.
+ * Copyright (C) 2011, 2013, 2014, 2015, 2019, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -42,7 +42,7 @@ public class WeakCache<K, V> extends AbstractMap<K, V> {
      * @since 1.4
      */
     public WeakCache() {
-        this(new WeakHashMap<K, Reference<V>>());
+        this(new WeakHashMap<>());
     }
 
     /**
diff --git a/xstream/src/java/com/thoughtworks/xstream/io/StatefulWriter.java b/xstream/src/java/com/thoughtworks/xstream/io/StatefulWriter.java
index 9ec1d4f0..7892db90 100644
--- a/xstream/src/java/com/thoughtworks/xstream/io/StatefulWriter.java
+++ b/xstream/src/java/com/thoughtworks/xstream/io/StatefulWriter.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2006 Joe Walnes.
- * Copyright (C) 2006, 2007, 2014, 2015 XStream Committers.
+ * Copyright (C) 2006, 2007, 2014, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -97,7 +97,7 @@ public class StatefulWriter extends WriterWrapper {
         }
         state = STATE_NODE_START;
         ++balance;
-        attributes.push(new HashSet<String>());
+        attributes.push(new HashSet<>());
     }
 
     @Override
diff --git a/xstream/src/java/com/thoughtworks/xstream/io/json/JettisonStaxWriter.java b/xstream/src/java/com/thoughtworks/xstream/io/json/JettisonStaxWriter.java
index 3149b343..53c2a950 100644
--- a/xstream/src/java/com/thoughtworks/xstream/io/json/JettisonStaxWriter.java
+++ b/xstream/src/java/com/thoughtworks/xstream/io/json/JettisonStaxWriter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2008, 2009, 2010, 2011, 2014, 2018 XStream Committers.
+ * Copyright (c) 2008, 2009, 2010, 2011, 2014, 2018, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -38,7 +38,7 @@ import com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer;
 public class JettisonStaxWriter extends StaxWriter {
 
     private final MappedNamespaceConvention convention;
-    private final Deque<String> stack = new ArrayDeque<String>();
+    private final Deque<String> stack = new ArrayDeque<>();
 
     /**
      * @since 1.4
diff --git a/xstream/src/java/com/thoughtworks/xstream/io/xml/TraxSource.java b/xstream/src/java/com/thoughtworks/xstream/io/xml/TraxSource.java
index 13c1ab56..cd01c1c4 100644
--- a/xstream/src/java/com/thoughtworks/xstream/io/xml/TraxSource.java
+++ b/xstream/src/java/com/thoughtworks/xstream/io/xml/TraxSource.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2004 Joe Walnes.
- * Copyright (C) 2006, 2007, 2013, 2014, 2015, 2020 XStream Committers.
+ * Copyright (C) 2006, 2007, 2013, 2014, 2015, 2020, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -286,7 +286,7 @@ public class TraxSource extends SAXSource {
         }
         @SuppressWarnings("unchecked")
         final List<Object> olist = (List<Object>)list;
-        source = list instanceof Queue ? (Queue<?>)list : new ListWrappingQueue<Object>(olist);
+        source = list instanceof Queue ? (Queue<?>)list : new ListWrappingQueue<>(olist);
 
         configureXMLReader();
     }
diff --git a/xstream/src/java/com/thoughtworks/xstream/mapper/AnnotationMapper.java b/xstream/src/java/com/thoughtworks/xstream/mapper/AnnotationMapper.java
index 1eff9889..9476cdd7 100644
--- a/xstream/src/java/com/thoughtworks/xstream/mapper/AnnotationMapper.java
+++ b/xstream/src/java/com/thoughtworks/xstream/mapper/AnnotationMapper.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2007, 2008, 2009, 2011, 2012, 2013, 2014, 2015, 2016 XStream Committers.
+ * Copyright (C) 2007, 2008, 2009, 2011, 2012, 2013, 2014, 2015, 2016, 2022 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -289,8 +289,8 @@ public class AnnotationMapper extends MapperWrapper implements AnnotationConfigu
             final XStreamConverters convertersAnnotation = type.getAnnotation(XStreamConverters.class);
             final XStreamConverter converterAnnotation = type.getAnnotation(XStreamConverter.class);
             final List<XStreamConverter> annotations = convertersAnnotation != null
-                ? new ArrayList<XStreamConverter>(Arrays.asList(convertersAnnotation.value()))
-                : new ArrayList<XStreamConverter>();
+                ? new ArrayList<>(Arrays.asList(convertersAnnotation.value()))
+                : new ArrayList<>();
             if (converterAnnotation != null) {
                 annotations.add(converterAnnotation);
             }
diff --git a/xstream/src/java/com/thoughtworks/xstream/mapper/SecurityMapper.java b/xstream/src/java/com/thoughtworks/xstream/mapper/SecurityMapper.java
index f0e92937..c6660358 100644
--- a/xstream/src/java/com/thoughtworks/xstream/mapper/SecurityMapper.java
+++ b/xstream/src/java/com/thoughtworks/xstream/mapper/SecurityMapper.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014, 2015 XStream Committers.
+ * Copyright (C) 2014, 2015, 2022 XStream Committers.
  * All rights reserved.
  *
  * Created on 08. January 2014 by Joerg Schaible
@@ -47,8 +47,8 @@ public class SecurityMapper extends MapperWrapper {
     public SecurityMapper(final Mapper wrapped, final TypePermission... permissions) {
         super(wrapped);
         this.permissions = permissions == null //
-            ? new ArrayList<TypePermission>()
-            : new ArrayList<TypePermission>(Arrays.asList(permissions));
+            ? new ArrayList<>()
+            : new ArrayList<>(Arrays.asList(permissions));
     }
 
     /**
