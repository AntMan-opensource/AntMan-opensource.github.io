commit c6f7e48c83b36975024e3bd3f828a8c83c651e41
Author: Violeta Georgieva <vgeorgieva@pivotal.io>
Date:   Wed Feb 19 15:32:08 2020 +0200

    fix #1006 Add hook for redirect request handling

diff --git a/src/main/java/reactor/netty/http/HttpOperations.java b/src/main/java/reactor/netty/http/HttpOperations.java
index bb554f9e9..c9d94aa5c 100644
--- a/src/main/java/reactor/netty/http/HttpOperations.java
+++ b/src/main/java/reactor/netty/http/HttpOperations.java
@@ -100,13 +100,13 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 		if (source instanceof Mono) {
 			return new PostHeadersNettyOutbound(((Mono<ByteBuf>)source)
 					.flatMap(msg -> {
-						if (markSentHeaderAndBody()) {
+						if (markSentHeaderAndBody(msg)) {
 							try {
-								preSendHeadersAndStatus();
+								afterMarkSentHeaders();
 							}
 							catch (RuntimeException e) {
 								ReferenceCountUtil.release(msg);
-								throw e;
+								return Mono.error(e);
 							}
 							if (HttpUtil.getContentLength(outboundHttpMessage(), -1) == 0) {
 								log.debug(format(channel(), "Dropped HTTP content, " +
@@ -130,9 +130,9 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 		}
 		ByteBuf b = (ByteBuf) message;
 		return new PostHeadersNettyOutbound(FutureMono.deferFuture(() -> {
-			if (markSentHeaderAndBody()) {
+			if (markSentHeaderAndBody(b)) {
 				try {
-					preSendHeadersAndStatus();
+					afterMarkSentHeaders();
 				}
 				catch (RuntimeException e) {
 					b.release();
@@ -161,7 +161,7 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 		}
 
 		return FutureMono.deferFuture(() -> {
-			if (markSentHeaders()) {
+			if (markSentHeaders(outboundHttpMessage())) {
 				HttpMessage msg;
 
 				if (HttpUtil.isContentLengthSet(outboundHttpMessage())) {
@@ -180,7 +180,7 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 				}
 
 				try {
-					preSendHeadersAndStatus();
+					afterMarkSentHeaders();
 				}
 				catch (RuntimeException e) {
 					ReferenceCountUtil.release(msg);
@@ -195,7 +195,9 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 		});
 	}
 
-	protected abstract void preSendHeadersAndStatus();
+	protected abstract void beforeMarkSentHeaders();
+
+	protected abstract void afterMarkSentHeaders();
 
 	protected abstract HttpMessage newFullBodyMessage(ByteBuf body);
 
@@ -268,7 +270,23 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 	 *
 	 * @return true if marked for the first time
 	 */
-	protected final boolean markSentHeaders() {
+	protected final boolean markSentHeaders(Object... objectsToRelease) {
+		try {
+			if (!hasSentHeaders()) {
+				beforeMarkSentHeaders();
+			}
+		}
+		catch (RuntimeException e) {
+			for (Object o : objectsToRelease) {
+				try {
+					ReferenceCountUtil.release(o);
+				}
+				catch (Throwable e2) {
+					// keep going
+				}
+			}
+			throw e;
+		}
 		return HTTP_STATE.compareAndSet(this, READY, HEADERS_SENT);
 	}
 
@@ -286,7 +304,23 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 	 *
 	 * @return true if marked for the first time
 	 */
-	protected final boolean markSentHeaderAndBody() {
+	protected final boolean markSentHeaderAndBody(Object... objectsToRelease) {
+		try {
+			if (!hasSentHeaders()) {
+				beforeMarkSentHeaders();
+			}
+		}
+		catch (RuntimeException e) {
+			for (Object o : objectsToRelease) {
+				try {
+					ReferenceCountUtil.release(o);
+				}
+				catch (Throwable e2) {
+					// keep going
+				}
+			}
+			throw e;
+		}
 		return HTTP_STATE.compareAndSet(this, READY, BODY_SENT);
 	}
 
diff --git a/src/main/java/reactor/netty/http/client/HttpClient.java b/src/main/java/reactor/netty/http/client/HttpClient.java
index 4b283f574..c6d50864e 100644
--- a/src/main/java/reactor/netty/http/client/HttpClient.java
+++ b/src/main/java/reactor/netty/http/client/HttpClient.java
@@ -142,6 +142,12 @@ public abstract class HttpClient {
 		 * Configure a body to send on request using the {@link NettyOutbound} sending
 		 * builder and returning a {@link Publisher} to signal end of the request.
 		 *
+		 * <p><strong>Note:</strong> the sender {@code BiFunction} passed in may implement
+		 * {@link RedirectSendHandler} to indicate explicitly that it has special handling
+		 * for redirect requests. This is entirely optional, and redirect request handling
+		 * may also be handled globally via {@link #followRedirect(boolean, Consumer)} or
+		 * {@link #followRedirect(BiPredicate, Consumer)}.
+		 *
 		 * @param sender a bifunction given the outgoing request and the sending
 		 * {@link NettyOutbound}, returns a publisher that will terminate the request
 		 * body on complete
@@ -313,6 +319,20 @@ public abstract class HttpClient {
 		ByteBufFlux receive();
 	}
 
+	/**
+	 * Marker interface for use with {@link RequestSender#send(BiFunction)}.
+	 * <p>When the {@code BiFunction} passed into {@code send} is an implementation of this
+	 * interface, it indicates it differentiates between original and redirect requests,
+	 * e.g. as a result of enabling {@link #followRedirect(boolean)}, and is capable of
+	 * applying separate logic for each individually. Redirect scenarios may be detected
+	 * by checking {@link HttpClientRequest#redirectedFrom()}.
+	 * <p>When the {@code BiFunction} passsed in is not an implementation of this interface,
+	 * it indicates it does not differentiate between original and redirect requests, and
+	 * applies the same initialization logic.
+	 */
+	public interface RedirectSendHandler extends BiFunction<HttpClientRequest, NettyOutbound, Publisher<Void>> {
+	}
+
 	/**
 	 * Prepare a pooled {@link HttpClient}. {@link UriConfiguration#uri(String)} or
 	 * {@link #baseUrl(String)} should be invoked before a verb
@@ -663,8 +683,25 @@ public abstract class HttpClient {
 	 * @return a new {@link HttpClient}
 	 */
 	public final HttpClient followRedirect(boolean followRedirect) {
+		return followRedirect(followRedirect, null);
+	}
+
+	/**
+	 * Variant of {@link #followRedirect(boolean)} that also accepts a redirect request
+	 * processor.
+	 *
+	 * @param followRedirect if true HTTP status 301|302|307|308 auto-redirect support
+	 *                       is enabled, otherwise disabled (default: false).
+	 * @param redirectRequestConsumer redirect request consumer, invoked on redirects, after
+	 * the redirect request has been initialized, in order to apply further changes such as
+	 * add/remove headers and cookies; use {@link HttpClientRequest#redirectedFrom()} to
+	 * check the original and any number of subsequent redirect(s), including the one that
+	 * is in progress.
+	 * @return a new {@link HttpClient}
+	 */
+	public final HttpClient followRedirect(boolean followRedirect, @Nullable Consumer<HttpClientRequest> redirectRequestConsumer) {
 		if (followRedirect) {
-			return tcpConfiguration(FOLLOW_REDIRECT_ATTR_CONFIG);
+			return followRedirect(HttpClientConfiguration.FOLLOW_REDIRECT_PREDICATE, redirectRequestConsumer);
 		}
 		else {
 			return tcpConfiguration(FOLLOW_REDIRECT_ATTR_DISABLE);
@@ -683,9 +720,26 @@ public abstract class HttpClient {
 	 * @return a new {@link HttpClient}
 	 */
 	public final HttpClient followRedirect(BiPredicate<HttpClientRequest, HttpClientResponse> predicate) {
+		return followRedirect(predicate, null);
+	}
+
+	/**
+	 * Variant of {@link #followRedirect(BiPredicate)} that also accepts a redirect request
+	 * processor.
+	 *
+	 * @param predicate that returns true to enable auto-redirect support.
+	 * @param redirectRequestConsumer redirect request consumer, invoked on redirects, after
+	 * the redirect request has been initialized, in order to apply further changes such as
+	 * add/remove headers and cookies; use {@link HttpClientRequest#redirectedFrom()} to
+	 * check the original and any number of subsequent redirect(s), including the one that
+	 * is in progress.
+	 * @return a new {@link HttpClient}
+	 */
+	public final HttpClient followRedirect(BiPredicate<HttpClientRequest, HttpClientResponse> predicate,
+			@Nullable Consumer<HttpClientRequest> redirectRequestConsumer) {
 		Objects.requireNonNull(predicate, "predicate");
 		return tcpConfiguration(tcp -> tcp.bootstrap(
-				b -> HttpClientConfiguration.followRedirectPredicate(b, predicate)));
+				b -> HttpClientConfiguration.followRedirectPredicate(b, predicate, redirectRequestConsumer)));
 	}
 
 	/**
@@ -952,9 +1006,6 @@ public abstract class HttpClient {
 	static final Function<TcpClient, TcpClient> CHUNKED_ATTR_DISABLE =
 			tcp -> tcp.bootstrap(HttpClientConfiguration.MAP_NO_CHUNKED);
 
-	static final Function<TcpClient, TcpClient> FOLLOW_REDIRECT_ATTR_CONFIG =
-			tcp -> tcp.bootstrap(HttpClientConfiguration.MAP_REDIRECT);
-
 	static final Function<TcpClient, TcpClient> FOLLOW_REDIRECT_ATTR_DISABLE =
 			tcp -> tcp.bootstrap(HttpClientConfiguration.MAP_NO_REDIRECT);
 
diff --git a/src/main/java/reactor/netty/http/client/HttpClientConfiguration.java b/src/main/java/reactor/netty/http/client/HttpClientConfiguration.java
index 958bc4fbd..b69829132 100644
--- a/src/main/java/reactor/netty/http/client/HttpClientConfiguration.java
+++ b/src/main/java/reactor/netty/http/client/HttpClientConfiguration.java
@@ -18,6 +18,7 @@ package reactor.netty.http.client;
 
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
+import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
@@ -61,6 +62,7 @@ final class HttpClientConfiguration {
 	ClientCookieDecoder cookieDecoder = ClientCookieDecoder.STRICT;
 
 	BiPredicate<HttpClientRequest, HttpClientResponse> followRedirectPredicate = null;
+	Consumer<HttpClientRequest> redirectRequestConsumer = null;
 
 	Function<Mono<HttpClientConfiguration>, Mono<HttpClientConfiguration>> deferredConf                   = null;
 
@@ -77,6 +79,7 @@ final class HttpClientConfiguration {
 		this.cookieDecoder = from.cookieDecoder;
 		this.decoder = from.decoder;
 		this.followRedirectPredicate = from.followRedirectPredicate;
+		this.redirectRequestConsumer = from.redirectRequestConsumer;
 		this.chunkedTransfer = from.chunkedTransfer;
 		this.baseUrl = from.baseUrl;
 		this.headers = from.headers;
@@ -176,13 +179,11 @@ final class HttpClientConfiguration {
 			(req, res) -> FOLLOW_REDIRECT_CODES.matcher(res.status()
 			                                               .codeAsText())
 			                                   .matches();
-	static final Function<Bootstrap, Bootstrap> MAP_REDIRECT = b -> {
-		getOrCreate(b).followRedirectPredicate = FOLLOW_REDIRECT_PREDICATE;
-		return b;
-	};
 
 	static final Function<Bootstrap, Bootstrap> MAP_NO_REDIRECT = b -> {
-		getOrCreate(b).followRedirectPredicate = null;
+		HttpClientConfiguration conf = getOrCreate(b);
+		conf.followRedirectPredicate = null;
+		conf.redirectRequestConsumer = null;
 		return b;
 	};
 
@@ -281,8 +282,11 @@ final class HttpClientConfiguration {
 		return b;
 	}
 
-	static Bootstrap followRedirectPredicate(Bootstrap b, BiPredicate<HttpClientRequest, HttpClientResponse> predicate) {
-		getOrCreate(b).followRedirectPredicate = predicate;
+	static Bootstrap followRedirectPredicate(Bootstrap b, BiPredicate<HttpClientRequest, HttpClientResponse> predicate,
+			@Nullable Consumer<HttpClientRequest> redirectRequestConsumer) {
+		HttpClientConfiguration conf = getOrCreate(b);
+		conf.followRedirectPredicate = predicate;
+		conf.redirectRequestConsumer = redirectRequestConsumer;
 		return b;
 	}
 
diff --git a/src/main/java/reactor/netty/http/client/HttpClientConnect.java b/src/main/java/reactor/netty/http/client/HttpClientConnect.java
index f5cea40d0..ec5013fdb 100644
--- a/src/main/java/reactor/netty/http/client/HttpClientConnect.java
+++ b/src/main/java/reactor/netty/http/client/HttpClientConnect.java
@@ -22,6 +22,7 @@ import java.util.Objects;
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
+import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
@@ -457,6 +458,8 @@ final class HttpClientConnect extends HttpClient {
 		final ClientCookieDecoder     cookieDecoder;
 		final BiPredicate<HttpClientRequest, HttpClientResponse>
 		                              followRedirectPredicate;
+		final Consumer<HttpClientRequest>
+		                              redirectRequestConsumer;
 		final HttpResponseDecoderSpec decoder;
 		final ProxyProvider           proxyProvider;
 
@@ -471,6 +474,7 @@ final class HttpClientConnect extends HttpClient {
 			this.method = configuration.method;
 			this.compress = configuration.acceptGzip;
 			this.followRedirectPredicate = configuration.followRedirectPredicate;
+			this.redirectRequestConsumer = configuration.redirectRequestConsumer;
 			this.chunkedTransfer = configuration.chunkedTransfer;
 			this.cookieEncoder = configuration.cookieEncoder;
 			this.cookieDecoder = configuration.cookieDecoder;
@@ -551,14 +555,6 @@ final class HttpClientConnect extends HttpClient {
 					headers.set(HttpHeaderNames.USER_AGENT, USER_AGENT);
 				}
 
-				if (fromURI != null && !toURI.equals(fromURI)) {
-					headers.remove(HttpHeaderNames.HOST)
-					       .remove(HttpHeaderNames.EXPECT)
-					       .remove(HttpHeaderNames.COOKIE)
-					       .remove(HttpHeaderNames.AUTHORIZATION)
-					       .remove(HttpHeaderNames.PROXY_AUTHORIZATION);
-				}
-
 				SocketAddress remoteAddress = uri.getRemoteAddress();
 				if (!headers.contains(HttpHeaderNames.HOST) && remoteAddress instanceof InetSocketAddress) {
 					headers.set(HttpHeaderNames.HOST,
@@ -583,23 +579,38 @@ final class HttpClientConnect extends HttpClient {
 					ch.chunkedTransfer(chunkedTransfer);
 				}
 
-				if (handler != null) {
-					if (websocketProtocols != null) {
-						return Mono.fromRunnable(() -> ch.withWebsocketSupport(websocketProtocols, maxFramePayloadLength, compress))
-						           .thenEmpty(Mono.fromRunnable(() -> Flux.concat(handler.apply(ch, ch))));
-					}
-					else {
-						return handler.apply(ch, ch);
+				if (websocketProtocols != null) {
+					Mono<Void> result =
+							Mono.fromRunnable(() -> ch.withWebsocketSupport(websocketProtocols, maxFramePayloadLength, compress));
+					if (handler != null) {
+						result = result.thenEmpty(Mono.fromRunnable(() -> Flux.concat(handler.apply(ch, ch))));
 					}
+					return result;
 				}
-				else {
-					if (websocketProtocols != null) {
-						return Mono.fromRunnable(() -> ch.withWebsocketSupport(websocketProtocols, maxFramePayloadLength, compress));
+
+				Consumer<HttpClientRequest> consumer = null;
+				if (fromURI != null && !toURI.equals(fromURI)) {
+					if (handler instanceof RedirectSendHandler) {
+						headers.remove(HttpHeaderNames.EXPECT)
+						       .remove(HttpHeaderNames.COOKIE)
+						       .remove(HttpHeaderNames.AUTHORIZATION)
+						       .remove(HttpHeaderNames.PROXY_AUTHORIZATION);
 					}
 					else {
-						return ch.send();
+						consumer = request ->
+						        request.requestHeaders()
+						               .remove(HttpHeaderNames.EXPECT)
+						               .remove(HttpHeaderNames.COOKIE)
+						               .remove(HttpHeaderNames.AUTHORIZATION)
+						               .remove(HttpHeaderNames.PROXY_AUTHORIZATION);
 					}
 				}
+				if (this.redirectRequestConsumer != null) {
+					consumer = consumer != null ? consumer.andThen(this.redirectRequestConsumer) :
+					                              this.redirectRequestConsumer;
+				}
+				ch.redirectRequestConsumer(consumer);
+				return handler != null ? handler.apply(ch, ch) : ch.send();
 			}
 			catch (Throwable t) {
 				return Mono.error(t);
diff --git a/src/main/java/reactor/netty/http/client/HttpClientOperations.java b/src/main/java/reactor/netty/http/client/HttpClientOperations.java
index dc0f6e8e1..7161baafc 100644
--- a/src/main/java/reactor/netty/http/client/HttpClientOperations.java
+++ b/src/main/java/reactor/netty/http/client/HttpClientOperations.java
@@ -104,6 +104,7 @@ class HttpClientOperations extends HttpOperations<NettyInbound, NettyOutbound>
 	boolean started;
 
 	BiPredicate<HttpClientRequest, HttpClientResponse> followRedirectPredicate;
+	Consumer<HttpClientRequest> redirectRequestConsumer;
 
 	HttpClientOperations(HttpClientOperations replaced) {
 		super(replaced);
@@ -234,6 +235,10 @@ class HttpClientOperations extends HttpOperations<NettyInbound, NettyOutbound>
 		this.followRedirectPredicate = predicate;
 	}
 
+	void redirectRequestConsumer(@Nullable Consumer<HttpClientRequest> redirectRequestConsumer) {
+		this.redirectRequestConsumer = redirectRequestConsumer;
+	}
+
 	@Override
 	@SuppressWarnings("FutureReturnValueIgnored")
 	protected void onInboundCancel() {
@@ -353,7 +358,7 @@ class HttpClientOperations extends HttpOperations<NettyInbound, NettyOutbound>
 			                .collectList()
 			                .doOnDiscard(ByteBuf.class, ByteBuf::release)
 			                .flatMap(list -> {
-				                if (markSentHeaderAndBody()) {
+				                if (markSentHeaderAndBody(list.toArray())) {
 					                if (list.isEmpty()) {
 						                return FutureMono.from(channel().writeAndFlush(newFullBodyMessage(Unpooled.EMPTY_BUFFER)));
 					                }
@@ -444,10 +449,17 @@ class HttpClientOperations extends HttpOperations<NettyInbound, NettyOutbound>
 	}
 
 	@Override
-	protected void preSendHeadersAndStatus() {
+	protected void afterMarkSentHeaders() {
 		//Noop
 	}
 
+	@Override
+	protected void beforeMarkSentHeaders() {
+		if (redirectedFrom.length > 0 && redirectRequestConsumer != null) {
+			redirectRequestConsumer.accept(this);
+		}
+	}
+
 	@Override
 	@SuppressWarnings("FutureReturnValueIgnored")
 	protected void onOutboundComplete() {
diff --git a/src/main/java/reactor/netty/http/server/HttpServerOperations.java b/src/main/java/reactor/netty/http/server/HttpServerOperations.java
index 96e30fed3..57a42af3c 100644
--- a/src/main/java/reactor/netty/http/server/HttpServerOperations.java
+++ b/src/main/java/reactor/netty/http/server/HttpServerOperations.java
@@ -502,7 +502,7 @@ class HttpServerOperations extends HttpOperations<HttpServerRequest, HttpServerR
 	}
 
 	@Override
-	protected void preSendHeadersAndStatus(){
+	protected void afterMarkSentHeaders(){
 		if (HttpResponseStatus.NOT_MODIFIED.equals(status())) {
 			responseHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING)
 			               .remove(HttpHeaderNames.CONTENT_LENGTH);
@@ -512,6 +512,11 @@ class HttpServerOperations extends HttpOperations<HttpServerRequest, HttpServerR
 		}
 	}
 
+	@Override
+	protected void beforeMarkSentHeaders() {
+		//noop
+	}
+
 	@Override
 	protected void onOutboundComplete() {
 		if (isWebsocket()) {
