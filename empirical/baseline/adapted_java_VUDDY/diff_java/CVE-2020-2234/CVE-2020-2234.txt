commit dae9f08a8dd51d10afffaaf0e07824d2d8f6e572
Author: Arnaud HeÃÅritier <aheritier@apache.org>
Date:   Tue Aug 11 12:34:37 2020 +0200

    [SECURITY-1794]

diff --git a/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/GlobalPipelineMavenConfig.java b/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/GlobalPipelineMavenConfig.java
index f655c4e..85600a8 100644
--- a/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/GlobalPipelineMavenConfig.java
+++ b/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/GlobalPipelineMavenConfig.java
@@ -54,6 +54,7 @@ import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.DataBoundSetter;
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
+import org.kohsuke.stapler.verb.POST;
 
 import java.io.Closeable;
 import java.io.File;
@@ -397,6 +398,7 @@ public class GlobalPipelineMavenConfig extends GlobalConfiguration {
     }
 
     public ListBoxModel doFillJdbcCredentialsIdItems() {
+        Jenkins.get().checkPermission(Jenkins.ADMINISTER);
         // use deprecated "withMatching" because, even after 20 mins of research,
         // I didn't understand how to use the new "recommended" API
         return new StandardListBoxModel()
@@ -408,10 +410,13 @@ public class GlobalPipelineMavenConfig extends GlobalConfiguration {
                                 ACL.SYSTEM,
                                 Collections.EMPTY_LIST));
     }
+
+    @POST
     public FormValidation doValidateJdbcConnection(
                                      @QueryParameter String jdbcUrl,
                                      @QueryParameter String properties,
                                      @QueryParameter String jdbcCredentialsId) {
+        Jenkins.get().checkPermission(Jenkins.ADMINISTER);
         if (StringUtils.isBlank(jdbcUrl)) {
             return FormValidation.ok("OK");
         }
diff --git a/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/WithMavenStep.java b/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/WithMavenStep.java
index e3245ce..b4a3513 100644
--- a/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/WithMavenStep.java
+++ b/jenkins-plugin/src/main/java/org/jenkinsci/plugins/pipeline/maven/WithMavenStep.java
@@ -30,6 +30,7 @@ import hudson.EnvVars;
 import hudson.Extension;
 import hudson.FilePath;
 import hudson.Launcher;
+import hudson.model.Item;
 import hudson.model.ItemGroup;
 import hudson.model.JDK;
 import hudson.model.Run;
@@ -231,8 +232,12 @@ public class WithMavenStep extends Step {
         }
 
         @Restricted(NoExternalUse.class) // Only for UI calls
-        public ListBoxModel doFillMavenItems() {
+        public ListBoxModel doFillMavenItems(@AncestorInPath Item item) {
             ListBoxModel r = new ListBoxModel();
+            if (item == null) {
+                return r; // it's empty
+            }
+            item.checkPermission(Item.CONFIGURE);
             r.add("--- Use system default Maven ---",null);
             for (MavenInstallation installation : getMavenDescriptor().getInstallations()) {
                 r.add(installation.getName());
@@ -245,8 +250,12 @@ public class WithMavenStep extends Step {
         }
 
         @Restricted(NoExternalUse.class) // Only for UI calls
-        public ListBoxModel doFillJdkItems() {
+        public ListBoxModel doFillJdkItems(@AncestorInPath Item item) {
             ListBoxModel r = new ListBoxModel();
+            if (item == null) {
+                return r; // it's empty
+            }
+            item.checkPermission(Item.CONFIGURE);
             r.add("--- Use system default JDK ---",null);
             for (JDK installation : getJDKDescriptor().getInstallations()) {
                 r.add(installation.getName());
@@ -255,8 +264,12 @@ public class WithMavenStep extends Step {
         }
         
         @Restricted(NoExternalUse.class) // Only for UI calls
-        public ListBoxModel doFillMavenSettingsConfigItems(@AncestorInPath ItemGroup context) {
+        public ListBoxModel doFillMavenSettingsConfigItems(@AncestorInPath Item item, @AncestorInPath ItemGroup context) {
             ListBoxModel r = new ListBoxModel();
+            if (item == null) {
+                return r; // it's empty
+            }
+            item.checkPermission(Item.CONFIGURE);
             r.add("--- Use system default settings or file path ---",null);
             for (Config config : ConfigFiles.getConfigsInContext(context, MavenSettingsConfigProvider.class)) {
                 r.add(config.name, config.id);
@@ -265,8 +278,12 @@ public class WithMavenStep extends Step {
         }
 
         @Restricted(NoExternalUse.class) // Only for UI calls
-        public ListBoxModel doFillGlobalMavenSettingsConfigItems(@AncestorInPath ItemGroup context) {
+        public ListBoxModel doFillGlobalMavenSettingsConfigItems(@AncestorInPath Item item, @AncestorInPath ItemGroup context) {
             ListBoxModel r = new ListBoxModel();
+            if (item == null) {
+                return r; // it's empty
+            }
+            item.checkPermission(Item.CONFIGURE);
             r.add("--- Use system default settings or file path ---",null);
             for (Config config : ConfigFiles.getConfigsInContext(context, GlobalMavenSettingsConfigProvider.class)) {
                 r.add(config.name, config.id);
@@ -275,8 +292,12 @@ public class WithMavenStep extends Step {
         }
 
         @Restricted(NoExternalUse.class) // Only for UI calls
-        public ListBoxModel doFillPublisherStrategyItems(@AncestorInPath ItemGroup context) {
+        public ListBoxModel doFillPublisherStrategyItems(@AncestorInPath Item item, @AncestorInPath ItemGroup context) {
             ListBoxModel r = new ListBoxModel();
+            if (item == null) {
+                return r; // it's empty
+            }
+            item.checkPermission(Item.CONFIGURE);
             for(MavenPublisherStrategy publisherStrategy: MavenPublisherStrategy.values()) {
                 r.add(publisherStrategy.getDescription(), publisherStrategy.name());
             }
