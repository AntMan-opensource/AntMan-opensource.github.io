commit 59ead11bcb3fd132258d1d7da4a34d47750f40d2
Author: Jeff Thompson <jeffret.g@gmail.com>
Date:   Wed Apr 29 13:08:37 2020 +0200

    [SECURITY-1374]

diff --git a/src/main/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapper.java b/src/main/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapper.java
index 57c8b1a..de4adcf 100644
--- a/src/main/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapper.java
+++ b/src/main/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapper.java
@@ -107,7 +107,6 @@ public class SecretBuildWrapper extends BuildWrapper {
                 for (MultiBinding.MultiEnvironment e : m) {
                     e.getUnbinder().unbind(build, build.getWorkspace(), launcher, listener);
                 }
-                secretsForBuild.remove(build);
                 return true;
             }
         };
@@ -165,6 +164,7 @@ public class SecretBuildWrapper extends BuildWrapper {
                 @Override public void close() throws IOException {
                     super.close();
                     logger.close();
+                    secretsForBuild.remove(build);
                 }
             };
         }
diff --git a/src/test/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapperTest.java b/src/test/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapperTest.java
index 9151987..dde2f3e 100644
--- a/src/test/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapperTest.java
+++ b/src/test/java/org/jenkinsci/plugins/credentialsbinding/impl/SecretBuildWrapperTest.java
@@ -28,10 +28,16 @@ import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.CredentialsScope;
 import com.cloudbees.plugins.credentials.domains.Domain;
 import hudson.Functions;
+import hudson.Launcher;
+import hudson.model.AbstractBuild;
+import hudson.model.BuildListener;
 import hudson.model.FreeStyleBuild;
 import hudson.model.FreeStyleProject;
 import hudson.model.Item;
 import hudson.tasks.BatchFile;
+import hudson.tasks.BuildStepMonitor;
+import hudson.tasks.Publisher;
+import hudson.tasks.Recorder;
 import hudson.tasks.Shell;
 import hudson.util.Secret;
 import org.jenkinsci.plugins.credentialsbinding.MultiBinding;
@@ -109,4 +115,46 @@ public class SecretBuildWrapperTest {
         r.assertLogContains("PASSES", r.buildAndAssertSuccess(p));
     }
 
+    @Issue("SECURITY-1374")
+    @Test public void maskingPostBuild() throws Exception {
+        String credentialsId = "creds_1";
+        String password = "p4$$";
+        StringCredentialsImpl firstCreds = new StringCredentialsImpl(CredentialsScope.GLOBAL, credentialsId, "sample1", Secret.fromString(password));
+
+        CredentialsProvider.lookupStores(r.jenkins).iterator().next().addCredentials(Domain.global(), firstCreds);
+
+        SecretBuildWrapper wrapper = new SecretBuildWrapper(Collections.singletonList(new StringBinding("PASS_1", credentialsId)));
+
+        FreeStyleProject f = r.createFreeStyleProject();
+
+        f.setConcurrentBuild(true);
+        f.getBuildWrappersList().add(wrapper);
+        Publisher publisher = new PasswordPublisher(password);
+        f.getPublishersList().add(publisher);
+
+        FreeStyleBuild b = r.buildAndAssertSuccess(f);
+        r.assertLogNotContains(password, b);
+        r.assertLogContains("****", b);
+    }
+
+    static class PasswordPublisher extends Recorder {
+
+        private String password;
+
+        public PasswordPublisher(String password) {
+            this.password = password;
+        }
+
+        public @Override
+        boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {
+            listener.getLogger().println("Sneak it in during the postbuild: " + password + " :done.");
+            return true;
+        }
+
+        public BuildStepMonitor getRequiredMonitorService() {
+            return BuildStepMonitor.NONE;
+        }
+
+    }
+
 }
