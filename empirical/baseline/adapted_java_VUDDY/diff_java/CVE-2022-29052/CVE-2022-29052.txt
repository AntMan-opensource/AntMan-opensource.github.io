commit 16d2ae71a1b34c81db1d74f83c41577536e5256f
Author: Yaroslav Afenkin <yaroslav.afenkin@gmail.com>
Date:   Wed Apr 6 18:05:58 2022 +0300

    [SECURITY-2045]

diff --git a/src/main/java/com/google/jenkins/plugins/computeengine/ComputeEngineLinuxLauncher.java b/src/main/java/com/google/jenkins/plugins/computeengine/ComputeEngineLinuxLauncher.java
index b30556a..67dec09 100644
--- a/src/main/java/com/google/jenkins/plugins/computeengine/ComputeEngineLinuxLauncher.java
+++ b/src/main/java/com/google/jenkins/plugins/computeengine/ComputeEngineLinuxLauncher.java
@@ -20,6 +20,7 @@ import com.google.api.services.compute.model.Operation;
 import com.google.jenkins.plugins.computeengine.ssh.GoogleKeyPair;
 import com.trilead.ssh2.Connection;
 import hudson.model.TaskListener;
+import hudson.util.Secret;
 import java.io.IOException;
 import java.util.Optional;
 import java.util.logging.Logger;
@@ -81,7 +82,7 @@ public class ComputeEngineLinuxLauncher extends ComputeEngineComputerLauncher {
           bootstrapConn = connectToSsh(computer, listener);
           isAuthenticated =
               bootstrapConn.authenticateWithPublicKey(
-                  node.getSshUser(), kp.getPrivateKey().toCharArray(), "");
+                  node.getSshUser(), Secret.toString(kp.getPrivateKey()).toCharArray(), "");
         } catch (IOException e) {
           logException(computer, listener, "Exception trying to authenticate", e);
           if (bootstrapConn != null) {
diff --git a/src/main/java/com/google/jenkins/plugins/computeengine/ssh/GoogleKeyPair.java b/src/main/java/com/google/jenkins/plugins/computeengine/ssh/GoogleKeyPair.java
index d66a43b..0664bac 100644
--- a/src/main/java/com/google/jenkins/plugins/computeengine/ssh/GoogleKeyPair.java
+++ b/src/main/java/com/google/jenkins/plugins/computeengine/ssh/GoogleKeyPair.java
@@ -16,15 +16,16 @@
 
 package com.google.jenkins.plugins.computeengine.ssh;
 
+import hudson.util.Secret;
 import java.io.Serializable;
 import java.util.Map;
 
 public class GoogleKeyPair implements Serializable {
-  private final String privateKey;
+  private final Secret privateKey;
   private final String publicKey;
   private final String user;
 
-  private GoogleKeyPair(String publicKey, String privateKey, String user) {
+  private GoogleKeyPair(String publicKey, Secret privateKey, String user) {
     this.publicKey = user + ":" + publicKey + " " + user;
     this.privateKey = privateKey;
     this.user = user;
@@ -32,19 +33,19 @@ public class GoogleKeyPair implements Serializable {
 
   public static GoogleKeyPair generate(String user) {
     Map<String, String> keys = SshKeysHelper.generate();
-    return new GoogleKeyPair(keys.get("public"), keys.get("private"), user);
+    return new GoogleKeyPair(keys.get("public"), Secret.fromString(keys.get("private")), user);
   }
 
   public String getPublicKey() {
     return publicKey;
   }
 
-  public String getPrivateKey() {
+  public Secret getPrivateKey() {
     return privateKey;
   }
 
   @Override
   public String toString() {
-    return "Public key:\n" + publicKey + "\n\nPrivate key:\n" + privateKey;
+    return "Public key:\n" + publicKey + "\n\nPrivate key:\n" + privateKey.getEncryptedValue();
   }
 }
diff --git a/src/test/java/com/google/jenkins/plugins/computeengine/GoogleKeyPairTest.java b/src/test/java/com/google/jenkins/plugins/computeengine/GoogleKeyPairTest.java
index e519d04..6e21728 100644
--- a/src/test/java/com/google/jenkins/plugins/computeengine/GoogleKeyPairTest.java
+++ b/src/test/java/com/google/jenkins/plugins/computeengine/GoogleKeyPairTest.java
@@ -16,17 +16,43 @@
 
 package com.google.jenkins.plugins.computeengine;
 
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 import com.google.jenkins.plugins.computeengine.ssh.GoogleKeyPair;
+import hudson.util.XStream2;
+import org.apache.commons.io.FileUtils;
+import org.junit.Rule;
 import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.WithoutJenkins;
+
+import java.io.File;
+import java.nio.charset.StandardCharsets;
 
 public class GoogleKeyPairTest {
 
+  @Rule public JenkinsRule r = new JenkinsRule();
+
+  @WithoutJenkins
   @Test
   public void KeyPairGeneration() {
     GoogleKeyPair gkp = GoogleKeyPair.generate("user");
     assertNotNull(gkp.toString());
     assert (gkp.getPublicKey().contains("user"));
   }
+
+  @Issue("SECURITY-2045")
+  @Test
+  public void privateKeyNotStoredAsPlainTextOnDisk() throws Exception {
+    GoogleKeyPair sshKeyPair = GoogleKeyPair.generate("test-user");
+    File configFile = new File(r.jenkins.getRootDir(), sshKeyPair.getClass().getName() + ".xml");
+    FileUtils.write(configFile, new XStream2().toXML(sshKeyPair), StandardCharsets.UTF_8);
+
+    String configAsString = FileUtils.readFileToString(configFile, StandardCharsets.UTF_8);
+    assertTrue(configAsString.contains(sshKeyPair.getPrivateKey().getEncryptedValue()));
+    assertFalse(configAsString.contains(sshKeyPair.getPrivateKey().getPlainText()));
+  }
 }
diff --git a/src/test/java/com/google/jenkins/plugins/computeengine/integration/ITUtil.java b/src/test/java/com/google/jenkins/plugins/computeengine/integration/ITUtil.java
index 96595b3..432c968 100644
--- a/src/test/java/com/google/jenkins/plugins/computeengine/integration/ITUtil.java
+++ b/src/test/java/com/google/jenkins/plugins/computeengine/integration/ITUtil.java
@@ -64,6 +64,7 @@ import hudson.model.Node;
 import hudson.plugins.powershell.PowerShell;
 import hudson.tasks.Builder;
 import hudson.tasks.Shell;
+import hudson.util.Secret;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
@@ -131,7 +132,7 @@ class ITUtil {
   private static final String LAUNCH_TIMEOUT_SECONDS_STR = "";
   static final int SNAPSHOT_TIMEOUT = windows ? 600 : 300;
   private static final GoogleKeyPair SSH_KEY = GoogleKeyPair.generate(RUN_AS_USER);
-  static final String SSH_PRIVATE_KEY = SSH_KEY.getPrivateKey();
+  static final String SSH_PRIVATE_KEY = Secret.toString(SSH_KEY.getPrivateKey());
   private static final String WINDOWS_STARTUP_SCRIPT =
       "Stop-Service sshd\n"
           + "$ConfiguredPublicKey = "
@@ -203,7 +204,8 @@ class ITUtil {
             CredentialsScope.GLOBAL,
             null,
             RUN_AS_USER,
-            new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(SSH_KEY.getPrivateKey()),
+            new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(
+                Secret.toString(SSH_KEY.getPrivateKey())),
             null,
             "integration test private key for windows");
     store.addCredentials(Domain.global(), windowsPrivateKeyCredentials);
