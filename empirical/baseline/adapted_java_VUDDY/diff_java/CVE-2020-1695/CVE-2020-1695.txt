commit 88ba8537f2e8d465c7031d352bf9bb25526ce475
Author: Alessio Soldano <asoldano@redhat.com>
Date:   Tue May 12 18:33:50 2020 +0200

    [RESTEASY-2569] backporting fix

diff --git a/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/header/ClientHeadersRequestFilter.java b/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/header/ClientHeadersRequestFilter.java
index cdf11f8da3..ab2a7b98b6 100644
--- a/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/header/ClientHeadersRequestFilter.java
+++ b/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/header/ClientHeadersRequestFilter.java
@@ -39,7 +39,7 @@ public class ClientHeadersRequestFilter implements ClientRequestFilter {
         Optional<ClientHeaderProvider> handler = ClientHeaderProviders.getProvider(method);
         handler.ifPresent(h -> h.addHeaders(headers));
 
-        Optional<ClientHeadersFactory> factory = ClientHeaderProviders.getFactory(method.getDeclaringClass());
+        Optional<ClientHeadersFactory> factory = ClientHeaderProviders.getFactory(ClientRequestContextUtils.getDeclaringClass(requestContext));
 
         requestContext.getHeaders().forEach(
                 (key, values) -> headers.put(key, castToListOfStrings(values))
diff --git a/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/utils/ClientRequestContextUtils.java b/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/utils/ClientRequestContextUtils.java
index c79913d59e..edc4fec8f6 100644
--- a/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/utils/ClientRequestContextUtils.java
+++ b/resteasy-client-microprofile/src/main/java/org/jboss/resteasy/microprofile/client/utils/ClientRequestContextUtils.java
@@ -25,6 +25,19 @@ public class ClientRequestContextUtils {
         return invocation.getClientInvoker().getMethod();
     }
 
+    /**
+     * Get {@link Class} for the client call from {@link ClientRequestContext}
+     * @param requestContext the context
+     * @return the class
+     */
+    public static Class<?> getDeclaringClass(ClientRequestContext requestContext) {
+        if(requestContext instanceof ClientRequestContextImpl == false) {
+            throw new RuntimeException("Failed to get ClientInvocation from request context. Is RestEasy client used underneath?");
+        }
+        ClientInvocation invocation = ((ClientRequestContextImpl)requestContext).getInvocation();
+        return invocation.getClientInvoker().getDeclaring();
+    }
+
     private ClientRequestContextUtils() {
     }
 }
diff --git a/resteasy-client-microprofile/src/test/java/org/jboss/resteasy/microprofile/client/ClientHeadersFactoryCDITest.java b/resteasy-client-microprofile/src/test/java/org/jboss/resteasy/microprofile/client/ClientHeadersFactoryCDITest.java
index 8bd92f16cc..19fbb28b3e 100644
--- a/resteasy-client-microprofile/src/test/java/org/jboss/resteasy/microprofile/client/ClientHeadersFactoryCDITest.java
+++ b/resteasy-client-microprofile/src/test/java/org/jboss/resteasy/microprofile/client/ClientHeadersFactoryCDITest.java
@@ -36,7 +36,7 @@ public class ClientHeadersFactoryCDITest {
 
       @Inject
       @RestClient
-      private TestResourceIntf service;
+      private SubClassResourceIntf service;
 
       public String work() {
          return service.hello("Stefano");
@@ -44,9 +44,6 @@ public class ClientHeadersFactoryCDITest {
    }
 
    @Path("/")
-   @RegisterRestClient(baseUri="http://localhost:8081")
-   @RegisterClientHeaders(TestClientHeadersFactory.class)
-   @ClientHeaderParam(name="IntfHeader", value="intfValue")
    public interface TestResourceIntf {
 
       @Path("hello/{h}")
@@ -54,6 +51,11 @@ public class ClientHeadersFactoryCDITest {
       String hello(@PathParam("h") String h);
    }
 
+   @RegisterRestClient(baseUri="http://localhost:8081")
+   @RegisterClientHeaders(TestClientHeadersFactory.class)
+   @ClientHeaderParam(name="IntfHeader", value="intfValue")
+   public interface SubClassResourceIntf extends TestResourceIntf {};
+
    @Path("/")
    public static class TestResource {
 
@@ -102,7 +104,7 @@ public class ClientHeadersFactoryCDITest {
    public static void init() throws Exception {
       Weld weld = new Weld();
       weld.addBeanClass(Worker.class);
-      weld.addBeanClass(TestResourceIntf.class);
+      weld.addBeanClass(SubClassResourceIntf.class);
       weld.addBeanClass(TestClientHeadersFactory.class);
       weld.addBeanClass(Counter.class);
       container = weld.initialize();
