commit 11b3cb0f7ba68b73dd32f655ff3f3df842a0c6bd
Author: Tristan Tarrant <ttarrant@redhat.com>
Date:   Wed Aug 9 11:02:20 2023 +0200

    ISPN-14986 CVE-2023-3629 Non-admins should not be able to retrieve cache configuration

diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java b/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java
index 94f4e62a2e..0e3931d8bf 100644
--- a/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java
+++ b/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java
@@ -115,6 +115,7 @@
 import org.infinispan.rest.stream.CacheKeyStreamProcessor;
 import org.infinispan.rest.tracing.RestTelemetryService;
 import org.infinispan.security.AuditContext;
+import org.infinispan.security.AuthorizationManager;
 import org.infinispan.security.AuthorizationPermission;
 import org.infinispan.security.actions.SecurityActions;
 import org.infinispan.stats.Stats;
@@ -686,6 +687,8 @@ private CompletionStage<RestResponse> getAllDetails(RestRequest request) {
    }
 
    private RestResponse getDetailResponse(RestRequest request, Cache<?, ?> cache, boolean pretty) {
+      // We escalate privileges to obtain various items of the configuration, but we need to take care about
+      // the details included in the response
       Configuration configuration = SecurityActions.getCacheConfiguration(cache.getAdvancedCache());
       EmbeddedCacheManager cacheManager = invocationHelper.getRestCacheManager().getInstance();
       GlobalConfiguration globalConfiguration = SecurityActions.getCacheManagerConfiguration(cacheManager);
@@ -736,7 +739,16 @@ private RestResponse getDetailResponse(RestRequest request, Cache<?, ?> cache, b
       try (ConfigurationWriter w = ConfigurationWriter.to(sw).withType(APPLICATION_JSON).prettyPrint(pretty).build()) {
          invocationHelper.getParserRegistry().serialize(w, cache.getName(), configuration);
       }
-      fullDetail.configuration = sw.toString();
+      // Only include the full configuration if ADMIN
+      AuthorizationManager authorizationManager = SecurityActions.getCacheAuthorizationManager(cache.getAdvancedCache());
+      if (authorizationManager == null || authorizationManager.isPermissive()) {
+         // Cache is not secured, use the global authz
+         if (invocationHelper.getRestCacheManager().getAuthorizer().getPermissions(null, request.getSubject()).contains(AuthorizationPermission.ADMIN)) {
+            fullDetail.configuration = sw.toString();
+         }
+      } else {
+         authorizationManager.doIf(request.getSubject(), AuthorizationPermission.ADMIN, () -> fullDetail.configuration = sw.toString());
+      }
       fullDetail.size = size;
       fullDetail.rehashInProgress = rehashInProgress;
       fullDetail.indexingInProgress = indexingInProgress;
@@ -779,7 +791,12 @@ private CompletionStage<RestResponse> getCacheConfig(RestRequest request) {
       if (cache == null)
          return invocationHelper.newResponse(request, NOT_FOUND).toFuture();
 
-      Configuration cacheConfiguration = SecurityActions.getCacheConfiguration(cache.getAdvancedCache());
+      AuthorizationManager authorizationManager = SecurityActions.getCacheAuthorizationManager(cache.getAdvancedCache());
+      if (authorizationManager == null || authorizationManager.isPermissive()) {
+         // Cache is not secured, use the global authz
+         invocationHelper.getRestCacheManager().getAuthorizer().checkPermission(AuthorizationPermission.ADMIN);
+      }
+      Configuration cacheConfiguration = cache.getCacheConfiguration();
 
       ByteArrayOutputStream entity = new ByteArrayOutputStream();
       try (ConfigurationWriter writer = ConfigurationWriter.to(entity).withType(accept).prettyPrint(pretty).build()) {
@@ -1053,8 +1070,11 @@ public Json toJson() {
             json.set("rebalancing_enabled", rebalancingEnabled);
          }
 
+         if (configuration != null) {
+            json.set("configuration", Json.factory().raw(configuration));
+         }
+
          return json
-               .set("configuration", Json.factory().raw(configuration))
                .set("bounded", bounded)
                .set("indexed", indexed)
                .set("persistent", persistent)
diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceV2Test.java b/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceV2Test.java
index 73c4fd4c0f..7dd3e52fac 100644
--- a/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceV2Test.java
+++ b/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceV2Test.java
@@ -361,7 +361,7 @@ public void testCreateAndAlterCache() {
       response = cacheClient.updateWithConfiguration(RestEntity.create(APPLICATION_JSON, cacheConfigAlter));
       assertThat(response).isOk();
 
-      response = cacheClient.configuration();
+      response = adminClient.cache("mutable").configuration();
       assertThat(response).isOk();
       String configFromServer = join(response).getBody();
 
@@ -474,17 +474,17 @@ public void testCacheV2LifeCycle() throws Exception {
       assertPersistence("cache2", true);
 
       String mediaList = "application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
-      response = client.cache("cache1").configuration(mediaList);
+      response = adminClient.cache("cache1").configuration(mediaList);
       assertThat(response).isOk();
       String cache1Cfg = join(response).getBody();
 
-      response = client.cache("cache2").configuration();
+      response = adminClient.cache("cache2").configuration();
       assertThat(response).isOk();
       String cache2Cfg = join(response).getBody();
 
       assertEquals(cache1Cfg, cache2Cfg.replace("cache2", "cache1"));
 
-      response = client.cache("cache1").configuration("application/xml");
+      response = adminClient.cache("cache1").configuration("application/xml");
       assertThat(response).isOk();
       String cache1Xml = join(response).getBody();
 
@@ -493,7 +493,7 @@ public void testCacheV2LifeCycle() throws Exception {
       assertEquals(1200000, xmlConfig.clustering().l1().lifespan());
       assertEquals(60500, xmlConfig.clustering().stateTransfer().timeout());
 
-      response = client.cache("cache1").configuration("application/xml; q=0.9");
+      response = adminClient.cache("cache1").configuration("application/xml; q=0.9");
       assertThat(response).isOk();
    }
 
@@ -680,7 +680,7 @@ public void testCacheSize() {
 
    @Test
    public void testCacheFullDetail() {
-      RestResponse response = join(client.cache("default").details());
+      RestResponse response = join(adminClient.cache("default").details());
       Json document = Json.read(response.getBody());
       assertThat(response).isOk();
       assertThat(document.at("stats")).isNotNull();
@@ -698,6 +698,14 @@ public void testCacheFullDetail() {
       assertThat(document.at("key_storage").asString()).isEqualTo("application/unknown");
       assertThat(document.at("value_storage").asString()).isEqualTo("application/unknown");
 
+      // non admins should have an empty config
+      if (security) {
+         response = join(client.cache("default").details());
+         document = Json.read(response.getBody());
+         assertThat(response).isOk();
+         assertThat(document.at("configuration")).isNull();
+      }
+
       response = join(client.cache("proto").details());
       document = Json.read(response.getBody());
       assertThat(document.at("key_storage").asString()).isEqualTo("application/x-protostream");
@@ -1292,12 +1300,6 @@ public void testVersionMetadata() {
       }
    }
 
-   @Test
-   public void testGetProtoCacheConfig() {
-      testGetProtoCacheConfig(APPLICATION_XML_TYPE);
-      testGetProtoCacheConfig(APPLICATION_JSON_TYPE);
-   }
-
    @Test
    public void testRebalancingActions() {
       String cacheName = "default";
@@ -1326,12 +1328,8 @@ private void assertRebalancingStatus(String cacheName, boolean enabled) {
       }
    }
 
-   private void testGetProtoCacheConfig(String accept) {
-      getCacheConfig(accept, PROTOBUF_METADATA_CACHE_NAME);
-   }
-
    private String getCacheConfig(String accept, String name) {
-      RestResponse response = join(client.cache(name).configuration(accept));
+      RestResponse response = join(adminClient.cache(name).configuration(accept));
       assertThat(response).isOk();
       return response.getBody();
    }
diff --git a/server/tests/src/test/java/org/infinispan/server/security/authorization/RESTAuthorizationTest.java b/server/tests/src/test/java/org/infinispan/server/security/authorization/RESTAuthorizationTest.java
index e2a8af50d9..57073705ec 100644
--- a/server/tests/src/test/java/org/infinispan/server/security/authorization/RESTAuthorizationTest.java
+++ b/server/tests/src/test/java/org/infinispan/server/security/authorization/RESTAuthorizationTest.java
@@ -14,6 +14,8 @@
 import static org.infinispan.server.test.core.Common.sync;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.io.Closeable;
@@ -189,6 +191,26 @@ public void testRestNonAdminsMustNotCreateCache() {
       }
    }
 
+   @Test
+   public void testRestNonAdminsMustNotReadCacheConfig() {
+      restCreateAuthzCache();
+      String name = ext.getMethodName();
+      for (TestUser user : EnumSet.of(TestUser.ADMIN)) {
+         RestClient client = ext.rest().withClientConfiguration(restBuilders.get(user)).get();
+         assertStatus(OK, client.cache(name).configuration());
+         String details = assertStatus(OK, client.cache(name).details());
+         Json json = Json.read(details);
+         assertNotNull(json.asJsonMap().get("configuration"));
+      }
+      for (TestUser user : EnumSet.of(TestUser.APPLICATION, TestUser.OBSERVER, TestUser.MONITOR)) {
+         RestClient client = ext.rest().withClientConfiguration(restBuilders.get(user)).get();
+         assertStatus(FORBIDDEN, client.cache(name).configuration());
+         String details = assertStatus(OK, client.cache(name).details());
+         Json json = Json.read(details);
+         assertNull(json.asJsonMap().get("configuration"));
+      }
+   }
+
    @Test
    public void testRestWriterCannotReadImplicit() {
       testRestWriterCannotRead();
