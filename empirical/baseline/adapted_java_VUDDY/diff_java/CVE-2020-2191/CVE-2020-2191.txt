commit 4d18f98b00e4c84b152d52346fb9ef1a227b1cf7
Author: Basil Crow <me@basilcrow.com>
Date:   Tue Jun 2 22:10:51 2020 +0200

    [SECURITY-1200]

diff --git a/client/src/main/java/hudson/plugins/swarm/Candidate.java b/client/src/main/java/hudson/plugins/swarm/Candidate.java
index e2a7489..9fbdffe 100644
--- a/client/src/main/java/hudson/plugins/swarm/Candidate.java
+++ b/client/src/main/java/hudson/plugins/swarm/Candidate.java
@@ -7,20 +7,14 @@ public class Candidate {
     private static final Logger logger = Logger.getLogger(Candidate.class.getPackage().getName());
 
     final String url;
-    final String secret;
 
-    public Candidate(String url, String secret) {
+    public Candidate(String url) {
         this.url = url;
-        this.secret = secret;
 
-        logger.fine("Candidate constructed with url: " + url + ", " + "secret: " + secret);
+        logger.fine("Candidate constructed with url: " + url);
     }
 
     public String getURL() {
         return url;
     }
-
-    public String getSecret() {
-        return secret;
-    }
 }
diff --git a/client/src/main/java/hudson/plugins/swarm/Client.java b/client/src/main/java/hudson/plugins/swarm/Client.java
index 97d561a..3281942 100644
--- a/client/src/main/java/hudson/plugins/swarm/Client.java
+++ b/client/src/main/java/hudson/plugins/swarm/Client.java
@@ -156,8 +156,6 @@ public class Client {
                 logger.info(
                         "Attempting to connect to "
                                 + target.url
-                                + " "
-                                + target.secret
                                 + " with ID "
                                 + swarmClient.getHash());
 
diff --git a/client/src/main/java/hudson/plugins/swarm/LabelFileWatcher.java b/client/src/main/java/hudson/plugins/swarm/LabelFileWatcher.java
index 60f1e54..8d3f9f6 100644
--- a/client/src/main/java/hudson/plugins/swarm/LabelFileWatcher.java
+++ b/client/src/main/java/hudson/plugins/swarm/LabelFileWatcher.java
@@ -131,13 +131,7 @@ public class LabelFileWatcher implements Runnable {
 
         Document xml;
 
-        HttpGet get =
-                new HttpGet(
-                        targ.getURL()
-                                + "/plugin/swarm/getSlaveLabels?name="
-                                + name
-                                + "&secret="
-                                + targ.getSecret());
+        HttpGet get = new HttpGet(targ.getURL() + "/plugin/swarm/getSlaveLabels?name=" + name);
         try (CloseableHttpResponse response = h.execute(get, context)) {
             if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                 logger.log(
diff --git a/client/src/main/java/hudson/plugins/swarm/SwarmClient.java b/client/src/main/java/hudson/plugins/swarm/SwarmClient.java
index 8d2b590..f0187c4 100644
--- a/client/src/main/java/hudson/plugins/swarm/SwarmClient.java
+++ b/client/src/main/java/hudson/plugins/swarm/SwarmClient.java
@@ -113,9 +113,6 @@ public class SwarmClient {
         return name;
     }
 
-    @SuppressFBWarnings(
-            value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE",
-            justification = "False positive for try-with-resources in Java 11")
     public Candidate discoverFromMasterUrl() throws IOException, RetryException {
         logger.config("discoverFromMasterUrl() invoked");
 
@@ -131,40 +128,7 @@ public class SwarmClient {
             throw new RuntimeException(msg, e);
         }
 
-        logger.config("Connecting to " + masterURL + " to configure swarm client.");
-        CloseableHttpClient client = createHttpClient(masterURL);
-        HttpClientContext context = createHttpClientContext(masterURL);
-
-        String swarmSecret;
-
-        String url = masterURL.toExternalForm() + "plugin/swarm/slaveInfo";
-        HttpGet get = new HttpGet(url);
-        get.addHeader("Connection", "close");
-        try (CloseableHttpResponse response = client.execute(get, context)) {
-            if (response.getStatusLine().getStatusCode() != 200) {
-                if (response.getStatusLine().getStatusCode() == 404) {
-                    String msg = "Failed to fetch swarm information from Jenkins, plugin not installed?";
-                    logger.log(Level.SEVERE, msg);
-                    throw new RetryException(msg);
-                } else {
-                    String msg = "Failed to fetch slave info from Jenkins, HTTP response code: " + response.getStatusLine().getStatusCode();
-                    logger.log(Level.SEVERE, msg);
-                    throw new RetryException(msg);
-                }
-            }
-
-            Document xml;
-            try {
-                xml = XmlUtils.parse(response.getEntity().getContent());
-            } catch (SAXException e) {
-                String msg = "Invalid XML received from " + url;
-                logger.log(Level.SEVERE, msg, e);
-                throw new RetryException(msg);
-            }
-            swarmSecret = getChildElementString(xml.getDocumentElement(), "swarmSecret");
-        }
-
-        return new Candidate(masterURL.toExternalForm(), swarmSecret);
+        return new Candidate(masterURL.toExternalForm());
     }
 
     /**
@@ -412,8 +376,6 @@ public class SwarmClient {
                                 + param("labels", sMyLabels)
                                 + toolLocationBuilder.toString()
                                 + environmentVariablesBuilder.toString()
-                                + "&secret="
-                                + target.secret
                                 + param("mode", options.mode.toUpperCase(Locale.ENGLISH))
                                 + param("hash", hash)
                                 + param(
@@ -488,8 +450,6 @@ public class SwarmClient {
                         target.url
                                 + "plugin/swarm/removeSlaveLabels?name="
                                 + name
-                                + "&secret="
-                                + target.secret
                                 + SwarmClient.param("labels", labels));
 
         post.addHeader("Connection", "close");
@@ -527,8 +487,6 @@ public class SwarmClient {
                         target.url
                                 + "plugin/swarm/addSlaveLabels?name="
                                 + name
-                                + "&secret="
-                                + target.secret
                                 + param("labels", labels));
 
         post.addHeader("Connection", "close");
diff --git a/plugin/src/main/java/hudson/plugins/swarm/PluginImpl.java b/plugin/src/main/java/hudson/plugins/swarm/PluginImpl.java
index d8919c5..96bc370 100644
--- a/plugin/src/main/java/hudson/plugins/swarm/PluginImpl.java
+++ b/plugin/src/main/java/hudson/plugins/swarm/PluginImpl.java
@@ -1,7 +1,6 @@
 package hudson.plugins.swarm;
 
 import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;
-import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;
 import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
@@ -33,6 +32,7 @@ import org.apache.commons.lang.ArrayUtils;
 import org.kohsuke.stapler.QueryParameter;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
+import org.kohsuke.stapler.verb.POST;
 
 /**
  * Exposes an entry point to add a new swarm slave.
@@ -62,14 +62,8 @@ public class PluginImpl extends Plugin {
     /**
      * Gets list of labels for slave
      */
-    public void doGetSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name,
-                                 @QueryParameter String secret) throws IOException {
-
-        if (!getSwarmSecret().equals(secret)) {
-            rsp.setStatus(SC_FORBIDDEN);
-            return;
-        }
-
+    public void doGetSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name)
+                                 throws IOException {
         Node nn = getNodeByName(name, rsp);
         if (nn == null) {
             return;
@@ -92,17 +86,16 @@ public class PluginImpl extends Plugin {
     /**
      * Adds labels to a slave.
      */
+    @POST
     public void doAddSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name,
-                            @QueryParameter String secret, @QueryParameter String labels)  throws IOException{
-        if (!getSwarmSecret().equals(secret)) {
-            rsp.setStatus(SC_FORBIDDEN);
-            return;
-        }
+                            @QueryParameter String labels)  throws IOException{
         Node nn = getNodeByName(name, rsp);
         if (nn == null) {
             return;
         }
 
+        nn.checkPermission(Computer.CONFIGURE);
+
         String sCurrentLabels = nn.getLabelString();
         List<String> lCurrentLabels = Arrays.asList(sCurrentLabels.split("\\s+"));
         Set<String> hs = new HashSet<>(lCurrentLabels);
@@ -121,17 +114,16 @@ public class PluginImpl extends Plugin {
     /**
      * Remove labels from a slave
      */
+    @POST
     public void doRemoveSlaveLabels(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name,
-                            @QueryParameter String secret, @QueryParameter String labels) throws IOException {
-        if (!getSwarmSecret().equals(secret)) {
-            rsp.setStatus(SC_FORBIDDEN);
-            return;
-        }
+                            @QueryParameter String labels) throws IOException {
         Node nn = getNodeByName(name, rsp);
         if (nn == null) {
             return;
         }
 
+        nn.checkPermission(Computer.CONFIGURE);
+
         String sCurrentLabels = nn.getLabelString();
         List<String> lCurrentLabels = Arrays.asList(sCurrentLabels.split("\\s+"));
         Set<String> hs = new HashSet<>(lCurrentLabels);
@@ -145,17 +137,13 @@ public class PluginImpl extends Plugin {
     /**
      * Adds a new swarm slave.
      */
+    @POST
     public void doCreateSlave(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name,
                               @QueryParameter String description, @QueryParameter int executors,
                               @QueryParameter String remoteFsRoot, @QueryParameter String labels,
-                              @QueryParameter String secret, @QueryParameter Node.Mode mode,
+                              @QueryParameter Node.Mode mode,
                               @QueryParameter(fixEmpty = true) String hash,
                               @QueryParameter boolean deleteExistingClients) throws IOException {
-        if (!getSwarmSecret().equals(secret)) {
-            rsp.setStatus(SC_FORBIDDEN);
-            return;
-        }
-
         try {
             Jenkins jenkins = Jenkins.get();
 
@@ -286,12 +274,15 @@ public class PluginImpl extends Plugin {
         return result;
     }
 
-    private static final UUID secret = UUID.randomUUID();
-
-    private static String getSwarmSecret() {
-        return secret.toString();
-    }
-
+    /**
+     * This merely exists to support older versions of the Swarm client that expect to be able to
+     * retrieve a UUID-based secret. Security is now handled through CSRF and permission checks
+     * rather than a UUID-based secret. Newer clients do not call this method or pass in a
+     * UUID-based secret, and newer versions of the server do not check for a UUID-based secret.
+     * When support for older clients that call this endpoint is removed, this endpoint can be
+     * deleted.
+     */
+    @Deprecated
     @SuppressFBWarnings(
             value = "RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE",
             justification = "False positive for try-with-resources in Java 11")
@@ -301,7 +292,7 @@ public class PluginImpl extends Plugin {
 
         rsp.setContentType("text/xml");
         try (Writer w = rsp.getCompressedWriter(req)) {
-            w.write("<slaveInfo><swarmSecret>" + getSwarmSecret() + "</swarmSecret></slaveInfo>");
+            w.write("<slaveInfo><swarmSecret>" + UUID.randomUUID().toString() + "</swarmSecret></slaveInfo>");
         }
     }
 }
