commit fcb0dbca0ec72b22fe0c9ddc8abc9cb188a0ff31
Author: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>
Date:   Sat Jul 30 01:41:08 2022 +0000

    vuln-fix: Zip Slip Vulnerability
    
    This fixes a Zip-Slip vulnerability.
    
    This change does one of two things. This change either
    
    1. Inserts a guard to protect against Zip Slip.
    OR
    2. Replaces `dir.getCanonicalPath().startsWith(parent.getCanonicalPath())`, which is vulnerable to partial path traversal attacks, with the more secure `dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())`.
    
    For number 2, consider `"/usr/outnot".startsWith("/usr/out")`.
    The check is bypassed although `/outnot` is not under the `/out` directory.
    It's important to understand that the terminating slash may be removed when using various `String` representations of the `File` object.
    For example, on Linux, `println(new File("/var"))` will print `/var`, but `println(new File("/var", "/")` will print `/var/`;
    however, `println(new File("/var", "/").getCanonicalPath())` will print `/var`.
    
    Weakness: CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
    Severity: High
    CVSSS: 7.4
    Detection: CodeQL (https://codeql.github.com/codeql-query-help/java/java-zipslip/) & OpenRewrite (https://public.moderne.io/recipes/org.openrewrite.java.security.ZipSlip)
    
    Reported-by: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>
    Signed-off-by: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>
    
    Bug-tracker: https://github.com/JLLeitschuh/security-research/issues/16
    
    Co-authored-by: Moderne <team@moderne.io>

diff --git a/src/test/java/io/scif/util/DefaultSampleFilesService.java b/src/test/java/io/scif/util/DefaultSampleFilesService.java
index b9e9f437e..548a47018 100644
--- a/src/test/java/io/scif/util/DefaultSampleFilesService.java
+++ b/src/test/java/io/scif/util/DefaultSampleFilesService.java
@@ -159,6 +159,9 @@ public class DefaultSampleFilesService extends AbstractService implements
 				if (entry == null) break; // All done!
 				final String name = entry.getName();
 				final File outFile = new File(targetFolder, name);
+				if (!outFile.toPath().normalize().startsWith(targetFolder.toPath().normalize())) {
+					throw new RuntimeException("Bad zip entry");
+				}
 				if (entry.isDirectory()) {
 					outFile.mkdirs();
 				}
