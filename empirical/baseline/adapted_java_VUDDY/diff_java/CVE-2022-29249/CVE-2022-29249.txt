commit 9d39e0b0472f9b84d8ba636e49e6dfdb27d7df59
Author: Jacob Rutledge <jacob.rutledge0509@gmail.com>
Date:   Sun May 22 10:21:44 2022 -0500

    Security patches for Security.java

diff --git a/src/main/java/io/github/javaezlib/javaez/extensions/Security.java b/src/main/java/io/github/javaezlib/javaez/extensions/Security.java
index 50ce25a..2ddf61b 100644
--- a/src/main/java/io/github/javaezlib/javaez/extensions/Security.java
+++ b/src/main/java/io/github/javaezlib/javaez/extensions/Security.java
@@ -5,6 +5,7 @@ import io.github.javaezlib.javaez.backend.ErrorSystem;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
 import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.GCMParameterSpec;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.PBEKeySpec;
 import javax.crypto.spec.SecretKeySpec;
@@ -22,7 +23,7 @@ public class Security {
 
     /**
      * Locks a piece of text with a password.
-     * (For technical people: This function encrypts the data in the text using AES-256-CBC with a PBKDF2-based cipher generated from the password)
+     * (For technical people: This function encrypts the data in the text using AES-256-GCM with a PBKDF2-based cipher generated from the password)
      * @param text The text to lock
      * @param password The password to use
      * @return The locked text
@@ -37,9 +38,9 @@ public class Security {
             SecretKey key = new SecretKeySpec(originalKey.getEncoded(), "AES");
             byte[] iv = new byte[16];
             new SecureRandom().nextBytes(iv);
-            IvParameterSpec ivParamSpec =  new IvParameterSpec(iv);
-            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
-            cipher.init(Cipher.ENCRYPT_MODE, key, ivParamSpec);
+            GCMParameterSpec gcmParamSpec =  new GCMParameterSpec(128, iv);
+            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
+            cipher.init(Cipher.ENCRYPT_MODE, key, gcmParamSpec);
             byte[] encrypted = cipher.doFinal(text.getBytes(StandardCharsets.UTF_8));
             byte[] full = new byte[encrypted.length + iv.length];
             int index = 0;
@@ -54,13 +55,14 @@ public class Security {
             return Base64.getEncoder().encodeToString(full);
         } catch(Exception ex) {
             ErrorSystem.handleError("Could not lock text.");
+            ex.printStackTrace();
             return null;
         }
     }
 
     /**
      * Unlocks some text that was locked using {@link #lockText(String, String)}.
-     * (For technical people: This function decrypts the data in the text using AES-256-CBC with a PBKDF2-based cipher generated from the password)
+     * (For technical people: This function decrypts the data in the text using AES-256-GCM with a PBKDF2-based cipher generated from the password)
      * @param text The locked text to unlock
      * @param password The password used to lock the text
      * @return The unlocked text
@@ -76,9 +78,9 @@ public class Security {
             byte[] encrypted = Base64.getDecoder().decode(text);
             byte[] iv = Arrays.copyOfRange(encrypted, 0, 16);
             byte[] encData = Arrays.copyOfRange(encrypted, 16, encrypted.length);
-            IvParameterSpec ivParamSpec = new IvParameterSpec(iv);
-            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
-            cipher.init(Cipher.DECRYPT_MODE, key, ivParamSpec);
+            GCMParameterSpec gcmParamSpec = new GCMParameterSpec(128, iv);
+            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
+            cipher.init(Cipher.DECRYPT_MODE, key, gcmParamSpec);
             byte[] decrypted = cipher.doFinal(encData);
             return new String(decrypted, StandardCharsets.UTF_8);
         } catch(Exception ex) {
