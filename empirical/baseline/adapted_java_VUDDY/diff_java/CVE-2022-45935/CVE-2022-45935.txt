commit 3b668561afb5658fa5d3fc43d0da79e487da3648
Author: Benoit TELLIER <btellier@linagora.com>
Date:   Wed Dec 7 11:40:05 2022 +0700

    JAMES-3860 Rely on Files.createTempFile (#1325)

diff --git a/mailbox/store/src/main/java/org/apache/james/mailbox/store/StoreMessageManager.java b/mailbox/store/src/main/java/org/apache/james/mailbox/store/StoreMessageManager.java
index a3186c3d9b..314679b004 100644
--- a/mailbox/store/src/main/java/org/apache/james/mailbox/store/StoreMessageManager.java
+++ b/mailbox/store/src/main/java/org/apache/james/mailbox/store/StoreMessageManager.java
@@ -30,6 +30,7 @@ import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.EnumSet;
@@ -345,7 +346,7 @@ public class StoreMessageManager implements MessageManager {
             // Create a temporary file and copy the message to it. We will work
             // with the file as
             // source for the InputStream
-            file = File.createTempFile("imap", ".msg");
+            file = Files.createTempFile("imap", ".msg").toFile();
             try (FileOutputStream out = new FileOutputStream(file);
                 BufferedOutputStream bufferedOut = new BufferedOutputStream(out);
                 BufferedInputStream tmpMsgIn = new BufferedInputStream(new TeeInputStream(msgIn, bufferedOut));
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
index b72ecbddc9..4c5539c235 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
@@ -27,6 +27,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -462,7 +463,7 @@ public class StripAttachment extends GenericMailet {
 
     private File createTempFile(String originalFileName) throws IOException {
         OutputFileName outputFileName = OutputFileName.from(originalFileName);
-        return File.createTempFile(outputFileName.getPrefix(), outputFileName.getSuffix(), new File(directoryName));
+        return Files.createTempFile(new File(directoryName).toPath(), outputFileName.getPrefix(), outputFileName.getSuffix()).toFile();
     }
 
     @VisibleForTesting static class OutputFileName {
diff --git a/server/container/core/src/main/java/org/apache/james/server/core/BufferedDeferredFileOutputStream.java b/server/container/core/src/main/java/org/apache/james/server/core/BufferedDeferredFileOutputStream.java
index 761f9b1dce..526333ef9f 100644
--- a/server/container/core/src/main/java/org/apache/james/server/core/BufferedDeferredFileOutputStream.java
+++ b/server/container/core/src/main/java/org/apache/james/server/core/BufferedDeferredFileOutputStream.java
@@ -25,6 +25,7 @@ import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.file.Files;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.ByteArrayOutputStream;
@@ -78,11 +79,6 @@ public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
      */
     private final String suffix;
 
-    /**
-     * The directory to use for temporary files.
-     */
-    private final File directory;
-
 
     /**
      * True when close() has been called successfully.
@@ -97,7 +93,7 @@ public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
      * @param outputFile The file to which data is saved beyond the threshold.
      */
     public BufferedDeferredFileOutputStream(final int threshold, final File outputFile) {
-        this(threshold,  outputFile, null, null, null);
+        this(threshold,  outputFile, null, null);
     }
 
 
@@ -108,10 +104,9 @@ public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
      * @param threshold  The number of bytes at which to trigger an event.
      * @param prefix Prefix to use for the temporary file.
      * @param suffix Suffix to use for the temporary file.
-     * @param directory Temporary file directory.
      */
-    public BufferedDeferredFileOutputStream(final int threshold, final String prefix, final String suffix, final File directory) {
-        this(threshold, null, prefix, suffix, directory);
+    public BufferedDeferredFileOutputStream(final int threshold, final String prefix, final String suffix) {
+        this(threshold, null, prefix, suffix);
         if (prefix == null) {
             throw new IllegalArgumentException("Temporary file prefix is missing");
         }
@@ -128,7 +123,7 @@ public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
      * @param directory Temporary file directory.
      */
     private BufferedDeferredFileOutputStream(final int threshold, final File outputFile, final String prefix,
-                                             final String suffix, final File directory) {
+                                             final String suffix) {
         super(threshold);
         this.outputFile = outputFile;
 
@@ -136,7 +131,6 @@ public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
         currentOutputStream = memoryOutputStream;
         this.prefix = prefix;
         this.suffix = suffix;
-        this.directory = directory;
     }
 
     /**
@@ -163,7 +157,7 @@ public class BufferedDeferredFileOutputStream extends ThresholdingOutputStream {
     @Override
     protected void thresholdReached() throws IOException {
         if (prefix != null) {
-            outputFile = File.createTempFile(prefix, suffix, directory);
+            outputFile = Files.createTempFile(prefix, suffix).toFile();
         }
         final FileOutputStream fos = new FileOutputStream(outputFile);
         try {
diff --git a/server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStreamSource.java b/server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStreamSource.java
index 376d3d3b30..e0161ca5cf 100644
--- a/server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStreamSource.java
+++ b/server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStreamSource.java
@@ -71,11 +71,6 @@ public class MimeMessageInputStreamSource extends MimeMessageSource implements D
      */
     private final String sourceId;
 
-    /**
-     * Temporary directory to use
-     */
-    private static final File TMPDIR = new File(System.getProperty("java.io.tmpdir"));
-
     /**
      * Construct a new MimeMessageInputStreamSource from an
      * <code>InputStream</code> that contains the bytes of a MimeMessage.
@@ -89,7 +84,7 @@ public class MimeMessageInputStreamSource extends MimeMessageSource implements D
         // We want to immediately read this into a temporary file
         // Create a temp file and channel the input stream into it
         try {
-            out = new BufferedDeferredFileOutputStream(THRESHOLD, "mimemessage-" + key, ".m64", TMPDIR);
+            out = new BufferedDeferredFileOutputStream(THRESHOLD, "mimemessage-" + key, ".m64");
             IOUtils.copy(in, out);
             sourceId = key;
         } catch (IOException ioe) {
@@ -120,7 +115,7 @@ public class MimeMessageInputStreamSource extends MimeMessageSource implements D
 
     public MimeMessageInputStreamSource(String key) {
         super();
-        out = new BufferedDeferredFileOutputStream(THRESHOLD, key, ".m64", TMPDIR);
+        out = new BufferedDeferredFileOutputStream(THRESHOLD, key, ".m64");
         sourceId = key;
     }
 
diff --git a/server/container/core/src/test/java/org/apache/james/server/core/BufferedDeferredFileOutputStreamTest.java b/server/container/core/src/test/java/org/apache/james/server/core/BufferedDeferredFileOutputStreamTest.java
index c4c683ad0a..52920bc314 100644
--- a/server/container/core/src/test/java/org/apache/james/server/core/BufferedDeferredFileOutputStreamTest.java
+++ b/server/container/core/src/test/java/org/apache/james/server/core/BufferedDeferredFileOutputStreamTest.java
@@ -245,9 +245,8 @@ public class BufferedDeferredFileOutputStreamTest {
 
         final String prefix = "commons-io-test";
         final String suffix = ".out";
-        final File tempDir  = new File(".");
         final BufferedDeferredFileOutputStream dfos =
-            new BufferedDeferredFileOutputStream(testBytes.length + 42,  prefix, suffix, tempDir);
+            new BufferedDeferredFileOutputStream(testBytes.length + 42,  prefix, suffix);
         assertNull("Check file is null-A", dfos.getFile());
         try
         {
@@ -269,9 +268,8 @@ public class BufferedDeferredFileOutputStreamTest {
 
         final String prefix = "commons-io-test";
         final String suffix = ".out";
-        final File tempDir  = new File(".");
         final BufferedDeferredFileOutputStream dfos =
-            new BufferedDeferredFileOutputStream(testBytes.length - 5, prefix, suffix, tempDir);
+            new BufferedDeferredFileOutputStream(testBytes.length - 5, prefix, suffix);
         assertNull("Check file is null-A", dfos.getFile());
         try
         {
@@ -287,7 +285,6 @@ public class BufferedDeferredFileOutputStreamTest {
         assertTrue("Check file exists", dfos.getFile().exists());
         assertTrue("Check prefix", dfos.getFile().getName().startsWith(prefix));
         assertTrue("Check suffix", dfos.getFile().getName().endsWith(suffix));
-        assertEquals("Check dir", tempDir.getPath(), dfos.getFile().getParent());
 
         verifyResultFile(dfos.getFile());
 
@@ -303,9 +300,8 @@ public class BufferedDeferredFileOutputStreamTest {
 
         final String prefix = "commons-io-test";
         final String suffix = null;
-        final File tempDir  = null;
         final BufferedDeferredFileOutputStream dfos =
-            new BufferedDeferredFileOutputStream(testBytes.length - 5, prefix, suffix, tempDir);
+            new BufferedDeferredFileOutputStream(testBytes.length - 5, prefix, suffix);
         assertNull("Check file is null-A", dfos.getFile());
         try
         {
@@ -337,10 +333,9 @@ public class BufferedDeferredFileOutputStreamTest {
 
         final String prefix = null;
         final String suffix = ".out";
-        final File tempDir  = new File(".");
         try
         {
-            (new BufferedDeferredFileOutputStream(testBytes.length - 5, prefix, suffix, tempDir)).close();
+            (new BufferedDeferredFileOutputStream(testBytes.length - 5, prefix, suffix)).close();
             fail("Expected IllegalArgumentException ");
         }
         catch (final IllegalArgumentException e) {
diff --git a/server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java b/server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java
index b70496b6b3..aeac6604cb 100644
--- a/server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java
+++ b/server/data/data-file/src/main/java/org/apache/james/sieverepository/file/SieveFileRepository.java
@@ -29,6 +29,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
+import java.nio.file.Files;
 import java.time.Instant;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
@@ -102,7 +103,7 @@ public class SieveFileRepository implements SieveRepository {
         File tmpFile = null;
 
         try {
-            tmpFile = File.createTempFile(file.getName(), ".tmp", file.getParentFile());
+            tmpFile = Files.createTempFile(file.getParentFile().toPath(), "", ".tmp").toFile();
             try (Writer out = new OutputStreamWriter(new BufferedOutputStream(
                     new FileOutputStream(tmpFile), bufferSize), UTF_8)) {
                 out.write(content);
diff --git a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/ImapRequestFrameDecoder.java b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/ImapRequestFrameDecoder.java
index 6dbec4d0b8..d5e72c48c4 100644
--- a/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/ImapRequestFrameDecoder.java
+++ b/server/protocols/protocols-imap4/src/main/java/org/apache/james/imapserver/netty/ImapRequestFrameDecoder.java
@@ -23,6 +23,7 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -102,7 +103,7 @@ public class ImapRequestFrameDecoder extends FrameDecoder implements NettyConsta
                         written = (Integer) attachment.get(WRITTEN_DATA);
                         out = (OutputStream) attachment.get(OUTPUT_STREAM);
                     } else {
-                        f = File.createTempFile("imap-literal", ".tmp");
+                        f = Files.createTempFile("imap-literal", ".tmp").toFile();
                         attachment.put(STORED_DATA, f);
                         written = 0;
                         attachment.put(WRITTEN_DATA, written);
