commit 795233e930e007ca49c86c7be1b10c123d37b8ac
Author: Andy Seaborne <andy@apache.org>
Date:   Sat Feb 18 11:51:03 2023 +0000

    System property to enable scripting

diff --git a/jena-arq/src/main/java/org/apache/jena/query/ARQ.java b/jena-arq/src/main/java/org/apache/jena/query/ARQ.java
index d660ad5a7e..d77e3d80f6 100644
--- a/jena-arq/src/main/java/org/apache/jena/query/ARQ.java
+++ b/jena-arq/src/main/java/org/apache/jena/query/ARQ.java
@@ -30,6 +30,7 @@ import org.apache.jena.sparql.core.assembler.AssemblerUtils;
 import org.apache.jena.sparql.exec.http.QuerySendMode;
 import org.apache.jena.sparql.expr.aggregate.AggregateRegistry;
 import org.apache.jena.sparql.function.FunctionRegistry;
+import org.apache.jena.sparql.function.scripting.ScriptLangSymbols;
 import org.apache.jena.sparql.mgt.ARQMgt;
 import org.apache.jena.sparql.mgt.Explain;
 import org.apache.jena.sparql.mgt.Explain.InfoLevel;
@@ -522,15 +523,22 @@ public class ARQ
      */
     public static final Symbol extensionValueTypes = SystemARQ.allocSymbol("extensionValueTypesExpr");
 
+    /**
+     * Java system property to enable JavaScript functions
+     */
+    public static final String systemPropertyScripting = "jena:scripting";
+
     /**
      * Context symbol for JavaScript functions as a string value which is evaluated.
+     * {@code arq:js-functions}.
      */
-    public static Symbol symJavaScriptFunctions = SystemARQ.allocSymbol("js-functions");
+    public static Symbol symJavaScriptFunctions = ScriptLangSymbols.scriptFunctions("js");
 
     /**
      * Context symbol for JavaScript library of functions defined in a file.
+     * {@code arq:js-library}.
      */
-    public static Symbol symJavaScriptLibFile = SystemARQ.allocSymbol("js-library");
+    public static Symbol symJavaScriptLibFile = ScriptLangSymbols.scriptLibrary("js");
 
     /**
      * Generate the ToList operation in the algebra (as ARQ is stream based, ToList is a non-op).
diff --git a/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java b/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java
index d382214536..e23973ec34 100644
--- a/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java
+++ b/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java
@@ -40,10 +40,18 @@ import org.apache.jena.sparql.expr.*;
 import org.apache.jena.sparql.function.FunctionBase;
 
 public class ScriptFunction extends FunctionBase {
-	static {
+
+    static {
         System.setProperty("polyglot.engine.WarnInterpreterOnly", "false");
     }
 
+    private static void checkScriptingEnabled() {
+        String x = System.getProperty(ARQ.systemPropertyScripting);
+        boolean scriptingEnabled = "true".equals(x);
+        if ( !scriptingEnabled )
+            throw new ExprException("Scripting not enabled");
+	}
+
     private static final ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
 
     // The URI is structured: http://jena.apache.org/ARQ/jsFunction#fn
@@ -78,6 +86,7 @@ public class ScriptFunction extends FunctionBase {
 
     @Override
     public void checkBuild(String uri, ExprList args) {
+        checkScriptingEnabled();
         if (!isScriptFunction(uri))
             throw new ExprException("Invalid URI: " + uri);
         String localPart = uri.substring(ARQ_NS.length());
@@ -99,6 +108,7 @@ public class ScriptFunction extends FunctionBase {
 
     @Override
     public NodeValue exec(List<NodeValue> args) {
+        checkScriptingEnabled();
         Invocable engine = getEngine();
 
         try {
@@ -149,7 +159,7 @@ public class ScriptFunction extends FunctionBase {
         if (!(engine instanceof Invocable))
             throw new ExprException("Script engine  " + engine.getFactory().getEngineName() + " doesn't implement Invocable");
 
-        String functionLibFile = ARQ.getContext().getAsString(LanguageSymbols.scriptLibrary(lang));
+        String functionLibFile = ARQ.getContext().getAsString(ScriptLangSymbols.scriptLibrary(lang));
         if (functionLibFile != null) {
             try (Reader reader = Files.newBufferedReader(Path.of(functionLibFile), StandardCharsets.UTF_8)) {
                 engine.eval(reader);
@@ -162,7 +172,7 @@ public class ScriptFunction extends FunctionBase {
             }
         }
 
-        String functions = ARQ.getContext().getAsString(LanguageSymbols.scriptFunctions(lang));
+        String functions = ARQ.getContext().getAsString(ScriptLangSymbols.scriptFunctions(lang));
         if (functions != null) {
             try {
                 engine.eval(functions);
diff --git a/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/LanguageSymbols.java b/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptLangSymbols.java
similarity index 97%
rename from jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/LanguageSymbols.java
rename to jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptLangSymbols.java
index 4125c75d23..73ea79de13 100644
--- a/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/LanguageSymbols.java
+++ b/jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptLangSymbols.java
@@ -21,7 +21,7 @@ package org.apache.jena.sparql.function.scripting;
 import org.apache.jena.sparql.SystemARQ;
 import org.apache.jena.sparql.util.Symbol;
 
-public class LanguageSymbols {
+public class ScriptLangSymbols {
     public static Symbol scriptLibrary(String lang) {
         return SystemARQ.allocSymbol(lang + "-library");
     }
diff --git a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TS_FunctionScripting.java b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TS_FunctionScripting.java
index 402d8c9e75..bddde3125e 100644
--- a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TS_FunctionScripting.java
+++ b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TS_FunctionScripting.java
@@ -28,6 +28,8 @@ import org.junit.runners.Suite;
 @Suite.SuiteClasses( {
         TestNV.class,
         TestScriptFunction.class,
+        // Between two classes with scripting enabled.
+        TestNoScripting.class,
         TestSPARQL_Scripting.class
 })
 public class TS_FunctionScripting {
diff --git a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestNoScripting.java b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestNoScripting.java
new file mode 100644
index 0000000000..77df5e8f98
--- /dev/null
+++ b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestNoScripting.java
@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.jena.sparql.function.scripting;
+
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.apache.jena.query.ARQ;
+import org.apache.jena.sparql.expr.ExprException;
+import org.apache.jena.sparql.expr.NodeValue;
+import org.apache.jena.sparql.sse.SSE;
+import org.apache.jena.sparql.util.Context;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+@RunWith(Parameterized.class)
+public class TestNoScripting {
+    private static Context ctx = ARQ.getContext();
+
+    private String language;
+    private String library;
+    private String functions;
+
+//    @BeforeClass public static void enableScripting() {
+//        System.setProperty(ScriptFunction.systemPropertyScripting, "true");
+//    }
+//
+//    @AfterClass public static void disbleScripting() {
+//        System.clearProperty(ScriptFunction.systemPropertyScripting);
+//    }
+
+    @Parameterized.Parameters
+    public static Collection<Object[]> data() {
+        return Arrays.asList(new Object[][] {
+                { "js", "testing/ARQ/Scripting/test-library.js",
+                        "function toCamelCase(str) { return str.split(' ').map(cc).join('');}\n"
+                        + "function ucFirst(word)    { return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();}\n"
+                        + "function lcFirst(word)    { return word.toLowerCase(); }\n"
+                        + "function cc(word,index)   { return (index == 0) ? lcFirst(word) : ucFirst(word); }\n" }
+                , {"python", "testing/ARQ/Scripting/test-library.py",
+                        "def toCamelCase(str):\n" +
+                        "  return ''.join([cc(word, index) for index, word in enumerate(str.split(' '))])\n" +
+                        "def ucFirst(word):\n" +
+                        "  return word[0].upper() + word[1:].lower()\n" +
+                        "def lcFirst(word):\n" +
+                        "  return word.lower()\n" +
+                        "def cc(word,index):\n" +
+                        "  if index == 0:\n" +
+                        "    return lcFirst(word)\n" +
+                        "  return ucFirst(word)\n" }
+        });
+    }
+
+
+    public TestNoScripting(String language, String library, String functions) {
+        this.language = language;
+        this.library = library;
+        this.functions = functions;
+    }
+
+    @Before
+    public void setup() {
+        ctx.set(ScriptLangSymbols.scriptLibrary(language), library);
+        ctx.set(ScriptLangSymbols.scriptFunctions(language), functions);
+    }
+
+    @After
+    public void teardown() {
+        ctx.unset(ScriptLangSymbols.scriptFunctions(language));
+        ctx.unset(ScriptLangSymbols.scriptLibrary(language));
+
+        ScriptFunction.clearEngineCache();
+    }
+
+    @Test(expected = ExprException.class)
+    public void script_dt_boolean() {
+        // Scripting not enabled.
+        NodeValue nv = eval("rtnBoolean");
+        assertTrue(nv.isBoolean());
+    }
+
+    private NodeValue eval(String fn, String ...args) {
+        NodeValue[] nvs = new NodeValue[args.length];
+        for ( int i = 0 ; i < args.length ; i++ ) {
+            nvs[i] = nv(args[i]);
+        }
+        ScriptFunction f = new ScriptFunction();
+        f.build( "http://jena.apache.org/ARQ/" + language + "Function#" + fn, null);
+        return f.exec(Arrays.asList(nvs));
+    }
+
+    private static NodeValue nv(String str) {
+        return NodeValue.makeNode(SSE.parseNode(str));
+    }
+}
diff --git a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestSPARQL_Scripting.java b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestSPARQL_Scripting.java
index 3cf186673c..be48c94f97 100644
--- a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestSPARQL_Scripting.java
+++ b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestSPARQL_Scripting.java
@@ -32,10 +32,20 @@ import org.junit.runner.RunWith;
 @Manifests({
     "testing/ARQ/Scripting/manifest.ttl"
 })
-// TODO: Add more languages
+
+
+
 public class TestSPARQL_Scripting {
     static final String JS_LIB_FILE = "testing/ARQ/Scripting/test-library.js";
-    
+
+    @BeforeClass public static void enableScripting() {
+        System.setProperty(ARQ.systemPropertyScripting, "true");
+    }
+
+    @AfterClass public static void disbleScripting() {
+        System.clearProperty(ARQ.systemPropertyScripting);
+    }
+
     @BeforeClass
     public static void setupJS() {
         Context cxt = ARQ.getContext();
@@ -43,7 +53,7 @@ public class TestSPARQL_Scripting {
         cxt.set(ARQ.symJavaScriptFunctions, "function inc(x) { return x+1 }");
         ScriptFunction.clearEngineCache();
     }
-    
+
     @AfterClass
     public static void unsetupJS() {
         Context cxt = ARQ.getContext();
diff --git a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestScriptFunction.java b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestScriptFunction.java
index 3a6be2a8ae..ffb146adec 100644
--- a/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestScriptFunction.java
+++ b/jena-arq/src/test/java/org/apache/jena/sparql/function/scripting/TestScriptFunction.java
@@ -24,9 +24,7 @@ import org.apache.jena.sparql.expr.ExprEvalException;
 import org.apache.jena.sparql.expr.NodeValue;
 import org.apache.jena.sparql.sse.SSE;
 import org.apache.jena.sparql.util.Context;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.*;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
@@ -43,6 +41,14 @@ public class TestScriptFunction {
     private String library;
     private String functions;
 
+    @BeforeClass public static void enableScripting() {
+        System.setProperty(ARQ.systemPropertyScripting, "true");
+    }
+
+    @AfterClass public static void disbleScripting() {
+        System.clearProperty(ARQ.systemPropertyScripting);
+    }
+
     @Parameterized.Parameters
     public static Collection<Object[]> data() {
         return Arrays.asList(new Object[][] {
@@ -74,14 +80,14 @@ public class TestScriptFunction {
 
     @Before
     public void setup() {
-        ctx.set(LanguageSymbols.scriptLibrary(language), library);
-        ctx.set(LanguageSymbols.scriptFunctions(language), functions);
+        ctx.set(ScriptLangSymbols.scriptLibrary(language), library);
+        ctx.set(ScriptLangSymbols.scriptFunctions(language), functions);
     }
 
     @After
     public void teardown() {
-        ctx.unset(LanguageSymbols.scriptFunctions(language));
-        ctx.unset(LanguageSymbols.scriptLibrary(language));
+        ctx.unset(ScriptLangSymbols.scriptFunctions(language));
+        ctx.unset(ScriptLangSymbols.scriptLibrary(language));
 
         ScriptFunction.clearEngineCache();
     }
