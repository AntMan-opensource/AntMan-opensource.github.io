commit 1d94191c49617dffbcb6f6d8fd73bcd5dd597d52
Author: Tim <50115603+bossenti@users.noreply.github.com>
Date:   Thu Mar 21 10:59:04 2024 +0100

    refactor: use class `TokenUtil` for token generation (#2592)
    
    * refactor: use class `TokenUtil` for token generation
    
    * refactor: remove unused import

diff --git a/streampipes-model/src/main/java/org/apache/streampipes/model/util/ElementIdGenerator.java b/streampipes-model/src/main/java/org/apache/streampipes/model/util/ElementIdGenerator.java
index 18d29f1e8..1652fe90e 100644
--- a/streampipes-model/src/main/java/org/apache/streampipes/model/util/ElementIdGenerator.java
+++ b/streampipes-model/src/main/java/org/apache/streampipes/model/util/ElementIdGenerator.java
@@ -41,8 +41,4 @@ public class ElementIdGenerator {
   public static String makeElementIdFromAppId(String appId) {
     return prefix + appId;
   }
-
-  public static String makeRecoveryToken() {
-    return RandomStringUtils.randomAlphanumeric(40);
-  }
 }
diff --git a/streampipes-resource-management/src/main/java/org/apache/streampipes/resource/management/UserResourceManager.java b/streampipes-resource-management/src/main/java/org/apache/streampipes/resource/management/UserResourceManager.java
index 719ea614c..a2d332793 100644
--- a/streampipes-resource-management/src/main/java/org/apache/streampipes/resource/management/UserResourceManager.java
+++ b/streampipes-resource-management/src/main/java/org/apache/streampipes/resource/management/UserResourceManager.java
@@ -29,23 +29,24 @@ import org.apache.streampipes.model.client.user.RegistrationData;
 import org.apache.streampipes.model.client.user.Role;
 import org.apache.streampipes.model.client.user.UserAccount;
 import org.apache.streampipes.model.client.user.UserActivationToken;
-import org.apache.streampipes.model.util.ElementIdGenerator;
 import org.apache.streampipes.storage.api.IPasswordRecoveryTokenStorage;
 import org.apache.streampipes.storage.api.IUserActivationTokenStorage;
 import org.apache.streampipes.storage.api.IUserStorage;
 import org.apache.streampipes.storage.couchdb.CouchDbStorageManager;
 import org.apache.streampipes.storage.management.StorageDispatcher;
 import org.apache.streampipes.user.management.util.PasswordUtil;
+import org.apache.streampipes.user.management.util.TokenUtil;
 
 import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
 import java.security.spec.InvalidKeySpecException;
 import java.util.HashSet;
 import java.util.List;
-import java.util.stream.Collectors;
 
 public class UserResourceManager extends AbstractResourceManager<IUserStorage> {
 
+  private static final int RECOVERY_TOKEN_LENGTH = 40;
+
   public UserResourceManager() {
     super(StorageDispatcher.INSTANCE.getNoSqlStore().getUserStorageAPI());
   }
@@ -89,7 +90,7 @@ public class UserResourceManager extends AbstractResourceManager<IUserStorage> {
         throw new UsernameAlreadyTakenException("Username already taken");
       }
       String encryptedPassword = PasswordUtil.encryptPassword(data.getPassword());
-      List<Role> roles = data.getRoles().stream().map(Role::valueOf).collect(Collectors.toList());
+      List<Role> roles = data.getRoles().stream().map(Role::valueOf).toList();
       UserAccount user = UserAccount.from(data.getUsername(), encryptedPassword, new HashSet<>(roles));
       user.setUsername(data.getUsername());
       user.setPassword(encryptedPassword);
@@ -118,7 +119,7 @@ public class UserResourceManager extends AbstractResourceManager<IUserStorage> {
   }
 
   private void createTokenAndSendActivationMail(String username) throws IOException {
-    String activationCode = ElementIdGenerator.makeRecoveryToken();
+    String activationCode =  TokenUtil.generateToken(RECOVERY_TOKEN_LENGTH);
     storeActivationCode(username, activationCode);
   }
 
@@ -132,7 +133,7 @@ public class UserResourceManager extends AbstractResourceManager<IUserStorage> {
   public void sendPasswordRecoveryLink(String username) throws UserNotFoundException, IOException {
     // send a password recovery link to the user
     if (db.checkUser(username)) {
-      String recoveryCode = ElementIdGenerator.makeRecoveryToken();
+      String recoveryCode = TokenUtil.generateToken(RECOVERY_TOKEN_LENGTH);
       storeRecoveryCode(username, recoveryCode);
       new MailSender().sendPasswordRecoveryMail(username, recoveryCode);
     }
diff --git a/streampipes-user-management/src/main/java/org/apache/streampipes/user/management/util/TokenUtil.java b/streampipes-user-management/src/main/java/org/apache/streampipes/user/management/util/TokenUtil.java
index c16a12693..2233c8c20 100644
--- a/streampipes-user-management/src/main/java/org/apache/streampipes/user/management/util/TokenUtil.java
+++ b/streampipes-user-management/src/main/java/org/apache/streampipes/user/management/util/TokenUtil.java
@@ -21,7 +21,7 @@ import org.apache.streampipes.model.client.user.RawUserApiToken;
 import org.apache.streampipes.model.client.user.UserApiToken;
 
 import org.apache.commons.codec.digest.DigestUtils;
-import org.apache.commons.lang3.RandomStringUtils;
+import org.apache.commons.text.RandomStringGenerator;
 
 import java.util.UUID;
 
@@ -53,7 +53,15 @@ public class TokenUtil {
   }
 
   private static String generateToken() {
-    return RandomStringUtils.randomAlphanumeric(TOKEN_LENGTH);
+    return generateToken(TOKEN_LENGTH);
+  }
+
+  public static String generateToken(int tokenLength){
+    // allowing all ASCII-characters from decimal id 33 to 125
+    // see https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html for full list
+    var pwdGenerator = new RandomStringGenerator.Builder().withinRange(33, 125)
+                                                          .build();
+    return pwdGenerator.generate(tokenLength);
   }
 
   public static String hashToken(String token) {
