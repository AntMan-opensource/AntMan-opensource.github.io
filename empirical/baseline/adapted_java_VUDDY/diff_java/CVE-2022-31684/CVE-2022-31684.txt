commit 9662c6fb643180c1b4bd93e2d300c2d1928ffdf2
Author: Violeta Georgieva <violetag@vmware.com>
Date:   Thu Oct 6 10:28:45 2022 +0300

    Check for log level (#2528)

diff --git a/reactor-netty-core/src/main/java/reactor/netty/channel/AbstractChannelMetricsHandler.java b/reactor-netty-core/src/main/java/reactor/netty/channel/AbstractChannelMetricsHandler.java
index 13213cc43..98b8eac2e 100644
--- a/reactor-netty-core/src/main/java/reactor/netty/channel/AbstractChannelMetricsHandler.java
+++ b/reactor-netty-core/src/main/java/reactor/netty/channel/AbstractChannelMetricsHandler.java
@@ -54,7 +54,9 @@ public abstract class AbstractChannelMetricsHandler extends ChannelDuplexHandler
 				recorder().recordServerConnectionOpened(ctx.channel().localAddress());
 			}
 			catch (RuntimeException e) {
-				log.warn("Exception caught while recording metrics.", e);
+				if (log.isWarnEnabled()) {
+					log.warn("Exception caught while recording metrics.", e);
+				}
 				// Allow request-response exchange to continue, unaffected by metrics problem
 			}
 		}
@@ -68,7 +70,9 @@ public abstract class AbstractChannelMetricsHandler extends ChannelDuplexHandler
 				recorder().recordServerConnectionClosed(ctx.channel().localAddress());
 			}
 			catch (RuntimeException e) {
-				log.warn("Exception caught while recording metrics.", e);
+				if (log.isWarnEnabled()) {
+					log.warn("Exception caught while recording metrics.", e);
+				}
 				// Allow request-response exchange to continue, unaffected by metrics problem
 			}
 		}
@@ -111,7 +115,9 @@ public abstract class AbstractChannelMetricsHandler extends ChannelDuplexHandler
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 
@@ -137,7 +143,9 @@ public abstract class AbstractChannelMetricsHandler extends ChannelDuplexHandler
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 
@@ -151,7 +159,9 @@ public abstract class AbstractChannelMetricsHandler extends ChannelDuplexHandler
 			recordException(ctx, remoteAddress != null ? remoteAddress : ctx.channel().remoteAddress());
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 
diff --git a/reactor-netty-core/src/main/java/reactor/netty/resources/PooledConnectionProvider.java b/reactor-netty-core/src/main/java/reactor/netty/resources/PooledConnectionProvider.java
index fc0b697c4..3af9b502a 100644
--- a/reactor-netty-core/src/main/java/reactor/netty/resources/PooledConnectionProvider.java
+++ b/reactor-netty-core/src/main/java/reactor/netty/resources/PooledConnectionProvider.java
@@ -337,8 +337,10 @@ public abstract class PooledConnectionProvider<T extends Connection> implements
 					Double.parseDouble(System.getProperty(ReactorNetty.POOL_GET_PERMITS_SAMPLING_RATE, "0"));
 			if (getPermitsSamplingRate > 1d) {
 				DEFAULT_POOL_GET_PERMITS_SAMPLING_RATE = 0;
-				log.warn("Invalid configuration [" + ReactorNetty.POOL_GET_PERMITS_SAMPLING_RATE + "=" + getPermitsSamplingRate +
-						"], the value must be between 0d and 1d (percentage). SamplingAllocationStrategy in not enabled.");
+				if (log.isWarnEnabled()) {
+					log.warn("Invalid configuration [" + ReactorNetty.POOL_GET_PERMITS_SAMPLING_RATE + "=" + getPermitsSamplingRate +
+							"], the value must be between 0d and 1d (percentage). SamplingAllocationStrategy in not enabled.");
+				}
 			}
 			else {
 				DEFAULT_POOL_GET_PERMITS_SAMPLING_RATE = getPermitsSamplingRate;
@@ -351,8 +353,10 @@ public abstract class PooledConnectionProvider<T extends Connection> implements
 					Double.parseDouble(System.getProperty(ReactorNetty.POOL_RETURN_PERMITS_SAMPLING_RATE, "0"));
 			if (returnPermitsSamplingRate > 1d) {
 				DEFAULT_POOL_RETURN_PERMITS_SAMPLING_RATE = 0;
-				log.warn("Invalid configuration [" + ReactorNetty.POOL_RETURN_PERMITS_SAMPLING_RATE + "=" + returnPermitsSamplingRate +
-						"], the value must be between 0d and 1d (percentage). SamplingAllocationStrategy is enabled.");
+				if (log.isWarnEnabled()) {
+					log.warn("Invalid configuration [" + ReactorNetty.POOL_RETURN_PERMITS_SAMPLING_RATE + "=" + returnPermitsSamplingRate +
+							"], the value must be between 0d and 1d (percentage). SamplingAllocationStrategy is enabled.");
+				}
 			}
 			else {
 				DEFAULT_POOL_RETURN_PERMITS_SAMPLING_RATE = returnPermitsSamplingRate;
diff --git a/reactor-netty-core/src/main/java/reactor/netty/transport/AddressResolverGroupMetrics.java b/reactor-netty-core/src/main/java/reactor/netty/transport/AddressResolverGroupMetrics.java
index efd1f2f09..52456b56a 100644
--- a/reactor-netty-core/src/main/java/reactor/netty/transport/AddressResolverGroupMetrics.java
+++ b/reactor-netty-core/src/main/java/reactor/netty/transport/AddressResolverGroupMetrics.java
@@ -127,7 +127,9 @@ final class AddressResolverGroupMetrics<T extends SocketAddress> extends Address
 							status);
 				}
 				catch (RuntimeException e) {
-					log.warn("Exception caught while recording metrics.", e);
+					if (log.isWarnEnabled()) {
+						log.warn("Exception caught while recording metrics.", e);
+					}
 					// Allow request-response exchange to continue, unaffected by metrics problem
 				}
 			}
diff --git a/reactor-netty-core/src/main/java/reactor/netty/transport/ServerTransport.java b/reactor-netty-core/src/main/java/reactor/netty/transport/ServerTransport.java
index ec5c2af63..52fe15890 100644
--- a/reactor-netty-core/src/main/java/reactor/netty/transport/ServerTransport.java
+++ b/reactor-netty-core/src/main/java/reactor/netty/transport/ServerTransport.java
@@ -400,7 +400,7 @@ public abstract class ServerTransport<T extends ServerTransport<T, CONF>,
 				   .eventLoop()
 				   .schedule(enableAutoReadTask, 1, TimeUnit.SECONDS)
 				   .addListener(future -> {
-				       if (!future.isSuccess()) {
+				       if (!future.isSuccess() && log.isDebugEnabled()) {
 				           log.debug(format(ctx.channel(), "Cannot enable auto-read"), future.cause());
 				       }
 				   });
@@ -419,7 +419,9 @@ public abstract class ServerTransport<T extends ServerTransport<T, CONF>,
 
 		static void forceClose(Channel child, Throwable t) {
 			child.unsafe().closeForcibly();
-			log.warn(format(child, "Failed to register an accepted channel: {}"), child, t);
+			if (log.isWarnEnabled()) {
+				log.warn(format(child, "Failed to register an accepted channel: {}"), child, t);
+			}
 		}
 	}
 
diff --git a/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConfig.java b/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConfig.java
index 2416bb56a..0e02b5bd1 100644
--- a/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConfig.java
+++ b/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConfig.java
@@ -388,7 +388,9 @@ public abstract class TransportConfig {
 						MicrometerEventLoopMeterRegistrar.INSTANCE.registerMetrics(channel.eventLoop());
 					}
 					catch (RuntimeException e) {
-						log.warn("Exception caught while recording metrics.", e);
+						if (log.isWarnEnabled()) {
+							log.warn("Exception caught while recording metrics.", e);
+						}
 						// Allow request-response exchange to continue, unaffected by metrics problem
 					}
 				}
diff --git a/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConnector.java b/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConnector.java
index 284232897..70902b14c 100644
--- a/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConnector.java
+++ b/reactor-netty-core/src/main/java/reactor/netty/transport/TransportConnector.java
@@ -169,12 +169,16 @@ public final class TransportConnector {
 			}
 			try {
 				if (!channel.config().setOption((ChannelOption<Object>) e.getKey(), e.getValue())) {
-					log.warn(format(channel, "Unknown channel option '{}' for channel '{}'"), e.getKey(), channel);
+					if (log.isWarnEnabled()) {
+						log.warn(format(channel, "Unknown channel option '{}' for channel '{}'"), e.getKey(), channel);
+					}
 				}
 			}
 			catch (Throwable t) {
-				log.warn(format(channel, "Failed to set channel option '{}' with value '{}' for channel '{}'"),
-						e.getKey(), e.getValue(), channel, t);
+				if (log.isWarnEnabled()) {
+					log.warn(format(channel, "Failed to set channel option '{}' with value '{}' for channel '{}'"),
+							e.getKey(), e.getValue(), channel, t);
+				}
 			}
 		}
 	}
diff --git a/reactor-netty-http/src/main/java/reactor/netty/http/HttpOperations.java b/reactor-netty-http/src/main/java/reactor/netty/http/HttpOperations.java
index c16c33763..d5d27bf56 100644
--- a/reactor-netty-http/src/main/java/reactor/netty/http/HttpOperations.java
+++ b/reactor-netty-http/src/main/java/reactor/netty/http/HttpOperations.java
@@ -120,8 +120,10 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 								return Mono.error(e);
 							}
 							if (HttpUtil.getContentLength(outboundHttpMessage(), -1) == 0) {
-								log.debug(format(channel(), "Dropped HTTP content, " +
-										"since response has Content-Length: 0 {}"), toPrettyHexDump(msg));
+								if (log.isDebugEnabled()) {
+									log.debug(format(channel(), "Dropped HTTP content, " +
+											"since response has Content-Length: 0 {}"), toPrettyHexDump(msg));
+								}
 								msg.release();
 								return FutureMono.from(channel().writeAndFlush(newFullBodyMessage(Unpooled.EMPTY_BUFFER)));
 							}
@@ -154,8 +156,10 @@ public abstract class HttpOperations<INBOUND extends NettyInbound, OUTBOUND exte
 					throw e;
 				}
 				if (HttpUtil.getContentLength(outboundHttpMessage(), -1) == 0) {
-					log.debug(format(channel(), "Dropped HTTP content, " +
-							"since response has Content-Length: 0 {}"), toPrettyHexDump(b));
+					if (log.isDebugEnabled()) {
+						log.debug(format(channel(), "Dropped HTTP content, " +
+								"since response has Content-Length: 0 {}"), toPrettyHexDump(b));
+					}
 					b.release();
 					return channel().writeAndFlush(newFullBodyMessage(Unpooled.EMPTY_BUFFER));
 				}
diff --git a/reactor-netty-http/src/main/java/reactor/netty/http/client/AbstractHttpClientMetricsHandler.java b/reactor-netty-http/src/main/java/reactor/netty/http/client/AbstractHttpClientMetricsHandler.java
index 19e0b0ca9..31e475d39 100644
--- a/reactor-netty-http/src/main/java/reactor/netty/http/client/AbstractHttpClientMetricsHandler.java
+++ b/reactor-netty-http/src/main/java/reactor/netty/http/client/AbstractHttpClientMetricsHandler.java
@@ -94,14 +94,18 @@ abstract class AbstractHttpClientMetricsHandler extends ChannelDuplexHandler {
 						recordWrite(address);
 					}
 					catch (RuntimeException e) {
-						log.warn("Exception caught while recording metrics.", e);
+						if (log.isWarnEnabled()) {
+							log.warn("Exception caught while recording metrics.", e);
+						}
 						// Allow request-response exchange to continue, unaffected by metrics problem
 					}
 				});
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 		//"FutureReturnValueIgnored" this is deliberate
@@ -125,7 +129,9 @@ abstract class AbstractHttpClientMetricsHandler extends ChannelDuplexHandler {
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 		ctx.fireChannelRead(msg);
@@ -137,7 +143,9 @@ abstract class AbstractHttpClientMetricsHandler extends ChannelDuplexHandler {
 			recordException(ctx);
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 		ctx.fireExceptionCaught(cause);
diff --git a/reactor-netty-http/src/main/java/reactor/netty/http/server/AbstractHttpServerMetricsHandler.java b/reactor-netty-http/src/main/java/reactor/netty/http/server/AbstractHttpServerMetricsHandler.java
index 16e04bb01..495fa0a09 100644
--- a/reactor-netty-http/src/main/java/reactor/netty/http/server/AbstractHttpServerMetricsHandler.java
+++ b/reactor-netty-http/src/main/java/reactor/netty/http/server/AbstractHttpServerMetricsHandler.java
@@ -73,7 +73,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 				recorder().recordServerConnectionOpened(ctx.channel().localAddress());
 			}
 			catch (RuntimeException e) {
-				log.warn("Exception caught while recording metrics.", e);
+				if (log.isWarnEnabled()) {
+					log.warn("Exception caught while recording metrics.", e);
+				}
 				// Allow request-response exchange to continue, unaffected by metrics problem
 			}
 		}
@@ -87,7 +89,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 				recorder().recordServerConnectionClosed(ctx.channel().localAddress());
 			}
 			catch (RuntimeException e) {
-				log.warn("Exception caught while recording metrics.", e);
+				if (log.isWarnEnabled()) {
+					log.warn("Exception caught while recording metrics.", e);
+				}
 				// Allow request-response exchange to continue, unaffected by metrics problem
 			}
 		}
@@ -118,7 +122,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 									ops.method().name(), ops.status().codeAsText().toString());
 						}
 						catch (RuntimeException e) {
-							log.warn("Exception caught while recording metrics.", e);
+							if (log.isWarnEnabled()) {
+								log.warn("Exception caught while recording metrics.", e);
+							}
 							// Allow request-response exchange to continue, unaffected by metrics problem
 						}
 						// ops.hostAddress() == null when request decoding failed, in this case
@@ -133,7 +139,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 								}
 							}
 							catch (RuntimeException e) {
-								log.warn("Exception caught while recording metrics.", e);
+								if (log.isWarnEnabled()) {
+									log.warn("Exception caught while recording metrics.", e);
+								}
 								// Allow request-response exchange to continue, unaffected by metrics problem
 							}
 						}
@@ -144,7 +152,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 		finally {
@@ -183,7 +193,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 
@@ -201,7 +213,9 @@ abstract class AbstractHttpServerMetricsHandler extends ChannelDuplexHandler {
 			}
 		}
 		catch (RuntimeException e) {
-			log.warn("Exception caught while recording metrics.", e);
+			if (log.isWarnEnabled()) {
+				log.warn("Exception caught while recording metrics.", e);
+			}
 			// Allow request-response exchange to continue, unaffected by metrics problem
 		}
 
diff --git a/reactor-netty-http/src/main/java/reactor/netty/http/server/WebsocketServerOperations.java b/reactor-netty-http/src/main/java/reactor/netty/http/server/WebsocketServerOperations.java
index a35fa2f3e..cac874439 100644
--- a/reactor-netty-http/src/main/java/reactor/netty/http/server/WebsocketServerOperations.java
+++ b/reactor-netty-http/src/main/java/reactor/netty/http/server/WebsocketServerOperations.java
@@ -123,7 +123,7 @@ final class WebsocketServerOperations extends HttpServerOperations
 			                  // This change is needed after the Netty change https://github.com/netty/netty/pull/11966
 			                  channel.read();
 			              }
-			              else {
+			              else if (log.isDebugEnabled()) {
 			                  log.debug(format(channel, "Cannot bind WebsocketServerOperations after the handshake."));
 			              }
 			          });
