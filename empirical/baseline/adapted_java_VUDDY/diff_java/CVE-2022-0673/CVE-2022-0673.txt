commit 48f23ab4dae19268027ede6c923d12e0b5e8d1fe
Author: Fred Bricon <fbricon@gmail.com>
Date:   Mon Feb 7 17:38:01 2022 +0100

    Prevent suspicious directory traversal
    
    Signed-off-by: Fred Bricon <fbricon@gmail.com>

diff --git a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourceException.java b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourceException.java
index a5517456..2359559e 100644
--- a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourceException.java
+++ b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourceException.java
@@ -20,7 +20,7 @@ import org.eclipse.lemminx.utils.DOMUtils;
  * @author Angelo ZERR
  *
  */
-public class CacheResourceException extends RuntimeException {
+public abstract class CacheResourceException extends RuntimeException {
 
 	private static final long serialVersionUID = 1L;
 
diff --git a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java
index 271de044..412f3c92 100644
--- a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java
+++ b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/CacheResourcesManager.java
@@ -36,8 +36,10 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.eclipse.lemminx.uriresolver.CacheResourceDownloadingException.CacheResourceDownloadingError;
+import org.eclipse.lemminx.uriresolver.InvalidURIException.InvalidURIError;
 import org.eclipse.lemminx.utils.FilesUtils;
 import org.eclipse.lemminx.utils.StringUtils;
+import org.eclipse.lemminx.utils.platform.Platform;
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
@@ -51,7 +53,7 @@ import com.google.common.io.RecursiveDeleteOption;
 public class CacheResourcesManager {
 
 	private static final String USER_AGENT_KEY = "User-Agent";
-	private static final String USER_AGENT_VALUE = "LemMinX";
+	private static final String USER_AGENT_VALUE = "LemMinX/"+Platform.getVersion().getVersionNumber() + " ("+Platform.getOS().getName() + " "+ Platform.getOS().getVersion()+")";
 
 	protected final Cache<String, CacheResourceDownloadedException> unavailableURICache;
 
@@ -237,14 +239,26 @@ public class CacheResourcesManager {
 	}
 
 	public static Path getResourceCachePath(String resourceURI) throws IOException {
-		URI uri = URI.create(resourceURI);
+		URI uri = null;
+		try {
+			uri = URI.create(resourceURI);
+		} catch (Exception e) {
+			throw new InvalidURIException(resourceURI, InvalidURIError.ILLEGAL_SYNTAX, e);
+		}
 		return getResourceCachePath(uri);
 	}
 
 	public static Path getResourceCachePath(URI uri) throws IOException {
-		Path resourceCachePath = uri.getPort() > 0
-				? Paths.get(CACHE_PATH, uri.getScheme(), uri.getHost(), String.valueOf(uri.getPort()), uri.getPath())
-				: Paths.get(CACHE_PATH, uri.getScheme(), uri.getHost(), uri.getPath());
+		//Eliminate all path traversals
+		URI normalizedUri = uri.normalize();
+
+		//If there's any /../ left, we bail, as that looks like a malicious URI.
+		if (normalizedUri.getPath().contains("/../")) {
+			throw new InvalidURIException(uri.toString(), InvalidURIError.INVALID_PATH);
+		}
+		Path resourceCachePath = normalizedUri.getPort() > 0
+				? Paths.get(CACHE_PATH, normalizedUri.getScheme(), normalizedUri.getHost(), String.valueOf(normalizedUri.getPort()), normalizedUri.getPath())
+				: Paths.get(CACHE_PATH, normalizedUri.getScheme(), normalizedUri.getHost(), normalizedUri.getPath());
 		return FilesUtils.getDeployedPath(resourceCachePath);
 	}
 
diff --git a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java
new file mode 100644
index 00000000..4d04f8ae
--- /dev/null
+++ b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/uriresolver/InvalidURIException.java
@@ -0,0 +1,63 @@
+/**
+ *  Copyright (c) 2022 Red Hat Inc. and others.
+ *  All rights reserved. This program and the accompanying materials
+ *  are made available under the terms of the Eclipse Public License v2.0
+ *  which accompanies this distribution, and is available at
+ *  http://www.eclipse.org/legal/epl-v20.html
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ *  Contributors:
+ *  Red Hat Inc. - initial API and implementation
+ */
+package org.eclipse.lemminx.uriresolver;
+
+import java.text.MessageFormat;
+
+import org.eclipse.lemminx.uriresolver.CacheResourceDownloadingException.CacheResourceDownloadingError;
+
+/**
+ * Invalid URI exception.
+ *
+ * @author Fred Bricon
+ *
+ */
+public class InvalidURIException extends CacheResourceException {
+
+	private static final long serialVersionUID = 1L;
+	
+	public enum InvalidURIError {
+
+		ILLEGAL_SYNTAX("The ''{0}'' URI cannot be parsed: {1}"),
+		
+		INVALID_PATH("''{0}'' does not resolve to a valid URI.");
+
+		private final String rawMessage;
+
+		private InvalidURIError(String rawMessage) {
+			this.rawMessage = rawMessage;
+		}
+
+		public String getMessage(Object... arguments) {
+			return MessageFormat.format(rawMessage, arguments);
+		}
+
+	}
+	
+	private final InvalidURIError errorCode;
+	
+	public InvalidURIException(String resourceURI, InvalidURIError errorCode, Throwable cause) {
+		super(resourceURI,  errorCode.getMessage(resourceURI, cause.getMessage()));
+		this.errorCode = errorCode;
+	}
+
+	public InvalidURIException(String resourceURI, InvalidURIError errorCode) {
+		super(resourceURI, errorCode.getMessage(resourceURI));
+		this.errorCode = errorCode;
+	}
+
+	public InvalidURIError getErrorCode() {
+		return errorCode;
+	}
+
+}
diff --git a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/utils/FilesUtils.java b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/utils/FilesUtils.java
index d64e471f..5e874444 100644
--- a/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/utils/FilesUtils.java
+++ b/org.eclipse.lemminx/src/main/java/org/eclipse/lemminx/utils/FilesUtils.java
@@ -25,6 +25,7 @@ import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 import org.eclipse.lemminx.utils.platform.Platform;
 
@@ -276,4 +277,16 @@ public class FilesUtils {
 	public static String encodePath(String path) {
 		return path.replace(" ", "%20");
 	}
+	
+	/**
+	 * Very simple implementation of reading all content from a file into a string using the UTF-8 charset. Uses the System's line separator.
+	 * Not suited for reading large files. 
+	 *
+	 * @param path the path to a readable file. 
+	 * @return the contents of the file.
+	 * @throws IOException if an error occurred while reading the file.
+	 */
+	public static String readString(Path path) throws IOException {
+		return Files.readAllLines(path).stream().collect(Collectors.joining(System.lineSeparator()));
+	}
 }
diff --git a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java
index 65b0e0cf..428ec344 100644
--- a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java
+++ b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/CacheResourcesManagerTest.java
@@ -14,14 +14,19 @@ package org.eclipse.lemminx.uriresolver;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 
 import java.io.IOException;
+import java.net.URI;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 
 import org.eclipse.lemminx.AbstractCacheBasedTest;
+import org.eclipse.lemminx.utils.FilesUtils;
+import org.eclipse.lemminx.utils.platform.Platform;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -72,7 +77,7 @@ public class CacheResourcesManagerTest extends AbstractCacheBasedTest {
 			fail("cacheResourcesManager should be busy downloading the url");
 		} catch (CacheResourceDownloadingException containsFuture) {
 			try {
-				containsFuture.getFuture().get(30, TimeUnit.SECONDS);
+				containsFuture.getFuture().get(2, TimeUnit.SECONDS);
 				fail("Download should have failed");
 			} catch (ExecutionException failedDownload) {
 				// Failed to download file, so exception is thrown
@@ -104,7 +109,7 @@ public class CacheResourcesManagerTest extends AbstractCacheBasedTest {
 			cacheResourcesManager.getResource(uri);
 			fail("cacheResourcesManager should be busy downloading the url");
 		} catch (CacheResourceDownloadingException containsFuture) {
-			path = containsFuture.getFuture().get(30, TimeUnit.SECONDS);
+			path = containsFuture.getFuture().get(2, TimeUnit.SECONDS);
 		}
 		assertNotNull(path);
 		assertNotNull(cacheResourcesManager.getResource(uri));
@@ -116,21 +121,48 @@ public class CacheResourcesManagerTest extends AbstractCacheBasedTest {
 	}
 
 	@Test
-	public void testGetBadResource() throws IOException {
-		String url = "http://localhost/../../../../../test.txt";
-		CacheResourceDownloadingException actual = null;
+	public void testGetBadResourceName() throws Exception {
+		String url = "http://localhost/foo/bar/`test.txt`";
 		try {
 			cacheResourcesManager.getResource(url);
-		} catch (CacheResourceDownloadingException e) {
-			actual = e;
+			fail("Invalid url should fail to download");
+		} catch (Exception e) {
+			assertEquals(InvalidURIException.class, e.getClass());
+			assertEquals(InvalidURIException.InvalidURIError.ILLEGAL_SYNTAX, ((InvalidURIException)e).getErrorCode());
 		}
-		assertNotNull(actual);
-		String cachePath = CacheResourcesManager.getResourceCachePath(url).toString();
-		assertEquals("The resource '" + url + "' cannot be downloaded in the cache path '" + cachePath + "'.",
-				actual.getMessage());
+	}
+
+	@Test
+	public void testDirectoryTraversal() throws Exception {
+		FileServer server = new FileServer();
+		server.start();
+		String uri = server.getUri("/dtd/web-app_2_3.dtd/../../xsd/choice.xsd");
+		Path path = null;
+		try {
+			cacheResourcesManager.getResource(uri);
+			fail("cacheResourcesManager should be busy downloading the url");
+		} catch (CacheResourceDownloadingException containsFuture) {
+			path = containsFuture.getFuture().get(2, TimeUnit.SECONDS);
+		}
+		assertEquals("choice.xsd",path.getFileName().toString());
+		String choice = FilesUtils.readString(path);
+		assertTrue(choice.contains("<xs:element name=\"person\">"), () -> {return "Unexpected file content:"+choice;});
+		
+		String invalidUri = server.getUri("/../../../xsd/choice.xsd");
+		try {
+			cacheResourcesManager.getResource(invalidUri);
+			fail("Invalid url should fail to download");
+		} catch (Exception e) {
+			assertEquals(InvalidURIException.class, e.getClass());
+			assertEquals(InvalidURIException.InvalidURIError.INVALID_PATH, ((InvalidURIException)e).getErrorCode());
+		}
+		
+
+		
 	}
 
 	private Cache<String, CacheResourceDownloadedException> testingCache() {
 		return CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.SECONDS).maximumSize(1).build();
 	}
+	
 }
\ No newline at end of file
diff --git a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/ModifiedResourceHandler.java b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/ModifiedResourceHandler.java
index ed294fcc..ae3db03f 100644
--- a/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/ModifiedResourceHandler.java
+++ b/org.eclipse.lemminx/src/test/java/org/eclipse/lemminx/uriresolver/ModifiedResourceHandler.java
@@ -28,12 +28,13 @@ public class ModifiedResourceHandler extends ResourceHandler {
 	public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
 			throws IOException, ServletException {
 
-		// 403 if user agent starts with Java/1.
-		if (request.getHeader("User-Agent").indexOf("Java/1.") == 0) {
-			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Java 8 is not allowed");
+		// 403 if user agent starts with Java/1. with https://lime.software/. 
+		// See https://github.com/redhat-developer/vscode-xml/issues/429#issuecomment-784875083
+		String userAgent = request.getHeader("User-Agent");
+		if (userAgent != null && userAgent.startsWith("Java/1.")) {
+			response.sendError(HttpServletResponse.SC_FORBIDDEN, userAgent + " is not allowed");
 			return;
 		}
-
 		super.handle(target, baseRequest, request, response);
 	}
 
