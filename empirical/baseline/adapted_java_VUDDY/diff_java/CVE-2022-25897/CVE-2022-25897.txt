commit 4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5
Author: Kevin Herron <kevinherron@gmail.com>
Date:   Wed Aug 24 06:14:36 2022 -0700

    Allow max MonitoredItems per session to be configured via OpcUaServerConfigLimits

diff --git a/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/api/config/OpcUaServerConfigLimits.java b/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/api/config/OpcUaServerConfigLimits.java
index 6525fa111..b57c56819 100644
--- a/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/api/config/OpcUaServerConfigLimits.java
+++ b/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/api/config/OpcUaServerConfigLimits.java
@@ -112,6 +112,15 @@ public interface OpcUaServerConfigLimits {
         return uint(Integer.MAX_VALUE);
     }
 
+    /**
+     * Get the maximum number of MonitoredItems, per Session, that can be created.
+     *
+     * @return the maximum number of MonitoredItems, per Session, that can be created.
+     */
+    default UInteger getMaxMonitoredItemsPerSession() {
+        return uint(Integer.MAX_VALUE);
+    }
+
     //region ServerCapabilities
 
     default Double getMinSupportedSampleRate() {
diff --git a/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/subscriptions/SubscriptionManager.java b/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/subscriptions/SubscriptionManager.java
index 1ab724208..71794f8fe 100644
--- a/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/subscriptions/SubscriptionManager.java
+++ b/opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/subscriptions/SubscriptionManager.java
@@ -122,6 +122,8 @@ public class SubscriptionManager {
     private final Map<UInteger, Subscription> subscriptions = Maps.newConcurrentMap();
     private final List<Subscription> transferred = Lists.newCopyOnWriteArrayList();
 
+    private final AtomicLong monitoredItemCount = new AtomicLong(0L);
+
     private final Session session;
     private final OpcUaServer server;
 
@@ -190,6 +192,7 @@ public class SubscriptionManager {
                     eventItems -> server.getAddressSpaceManager().onEventItemsDeleted(eventItems)
                 );
 
+                monitoredItemCount.getAndUpdate(count -> count - monitoredItems.size());
                 server.getMonitoredItemCount().getAndUpdate(count -> count - monitoredItems.size());
 
                 monitoredItems.clear();
@@ -267,6 +270,7 @@ public class SubscriptionManager {
 
                 results[i] = StatusCode.GOOD;
 
+                monitoredItemCount.getAndUpdate(count -> count - deletedItems.size());
                 server.getMonitoredItemCount().getAndUpdate(count -> count - deletedItems.size());
             } else {
                 results[i] = new StatusCode(StatusCodes.Bad_SubscriptionIdInvalid);
@@ -348,13 +352,20 @@ public class SubscriptionManager {
 
             List<BaseMonitoredItem<?>> monitoredItems = new ArrayList<>();
 
+            long globalMax = server.getConfig()
+                .getLimits().getMaxMonitoredItems().longValue();
+
+            long sessionMax = server.getConfig()
+                .getLimits().getMaxMonitoredItemsPerSession().longValue();
+
             for (int i = 0; i < itemsToCreate.size(); i++) {
                 MonitoredItemCreateRequest createRequest = itemsToCreate.get(i);
 
                 try {
-                    long maxMonitoredItems = server.getConfig().getLimits().getMaxMonitoredItems().longValue();
+                    long globalCount = server.getMonitoredItemCount().incrementAndGet();
+                    long sessionCount = monitoredItemCount.incrementAndGet();
 
-                    if (server.getMonitoredItemCount().incrementAndGet() <= maxMonitoredItems) {
+                    if (globalCount <= globalMax && sessionCount <= sessionMax) {
                         BaseMonitoredItem<?> monitoredItem = createMonitoredItem(
                             createRequest,
                             subscription,
@@ -375,6 +386,7 @@ public class SubscriptionManager {
                         throw new UaException(StatusCodes.Bad_TooManyMonitoredItems);
                     }
                 } catch (UaException e) {
+                    monitoredItemCount.decrementAndGet();
                     server.getMonitoredItemCount().decrementAndGet();
 
                     createResults[i] = new MonitoredItemCreateResult(
@@ -979,6 +991,7 @@ public class SubscriptionManager {
 
                     deleteResults[i] = StatusCode.GOOD;
 
+                    monitoredItemCount.decrementAndGet();
                     server.getMonitoredItemCount().decrementAndGet();
                 }
             }
@@ -1250,6 +1263,7 @@ public class SubscriptionManager {
                     eventItems -> server.getAddressSpaceManager().onEventItemsDeleted(eventItems)
                 );
 
+                monitoredItemCount.getAndUpdate(count -> count - deletedItems.size());
                 server.getMonitoredItemCount().getAndUpdate(count -> count - deletedItems.size());
             }
 
@@ -1293,6 +1307,7 @@ public class SubscriptionManager {
                     eventItems -> server.getAddressSpaceManager().onEventItemsDeleted(eventItems)
                 );
 
+                monitoredItemCount.getAndUpdate(count -> count - monitoredItems.size());
                 server.getMonitoredItemCount().getAndUpdate(count -> count - monitoredItems.size());
 
                 monitoredItems.clear();
@@ -1312,6 +1327,8 @@ public class SubscriptionManager {
 
         if (subscription != null) {
             subscription.setStateListener(null);
+
+            monitoredItemCount.getAndUpdate(count -> count - subscription.getMonitoredItems().size());
         }
 
         return subscription;
