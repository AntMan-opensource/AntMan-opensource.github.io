commit 4800c18588433ec2e138bad30279140b38d713fa
Author: Jose Ross <jdross17@gmail.com>
Date:   Wed Jan 12 14:02:35 2022 -0600

    Add new cache template implementation (#166)

diff --git a/src/main/java/org/craftercms/core/util/cache/impl/NonLockingCacheTemplate.java b/src/main/java/org/craftercms/core/util/cache/impl/NonLockingCacheTemplate.java
new file mode 100644
index 0000000..959d100
--- /dev/null
+++ b/src/main/java/org/craftercms/core/util/cache/impl/NonLockingCacheTemplate.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.craftercms.core.util.cache.impl;
+
+import org.craftercms.commons.lang.Callback;
+import org.craftercms.core.service.CachingOptions;
+import org.craftercms.core.service.Context;
+
+/**
+ * Extension of {@link DefaultCacheTemplate} that skips locking when loading items into the cache.
+ *
+ * @author joseross
+ * @since 3.1.18
+ */
+public class NonLockingCacheTemplate extends DefaultCacheTemplate {
+
+    @Override
+    protected <T> T loadAndPutInCache(Context context, CachingOptions options, Callback<T> callback, Object key) {
+        T obj = doGet(context, callback, key);
+        if (obj == null) {
+            obj = callback.execute();
+            if (obj != null) {
+                if (options == null) {
+                    options = CachingOptions.DEFAULT_CACHING_OPTIONS;
+                }
+
+                obj = doPut(context, options, callback, key, obj);
+            }
+        }
+
+        return obj;
+    }
+
+}
diff --git a/src/test/java/org/craftercms/core/util/cache/impl/NonLockingCacheTemplateTest.java b/src/test/java/org/craftercms/core/util/cache/impl/NonLockingCacheTemplateTest.java
new file mode 100644
index 0000000..8f9932a
--- /dev/null
+++ b/src/test/java/org/craftercms/core/util/cache/impl/NonLockingCacheTemplateTest.java
@@ -0,0 +1,66 @@
+/*
+ * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.craftercms.core.util.cache.impl;
+
+import org.craftercms.commons.concurrent.locks.KeyBasedLockFactory;
+import org.craftercms.core.service.CacheService;
+import org.craftercms.core.service.Context;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+
+import java.util.concurrent.locks.ReentrantLock;
+
+import static java.util.Collections.singletonList;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+/**
+ * @author joseross
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class NonLockingCacheTemplateTest {
+
+    public static final String CACHE_KEY = "test";
+
+    public static final String CACHE_VALUE = "Hello";
+
+    @Mock
+    private Context context;
+
+    @Mock
+    private CacheService cacheService;
+
+    @Mock
+    private KeyBasedLockFactory<ReentrantLock> lockFactory;
+
+    @InjectMocks
+    private NonLockingCacheTemplate cacheTemplate;
+
+    @Test
+    public void testCacheIsNotUsed() {
+        cacheTemplate.getObject(context, () -> CACHE_VALUE, CACHE_KEY);
+
+        verify(cacheService, times(2)).get(eq(context), eq(singletonList(CACHE_KEY).toString()));
+        verify(lockFactory, never()).getLock(any());
+    }
+
+}
