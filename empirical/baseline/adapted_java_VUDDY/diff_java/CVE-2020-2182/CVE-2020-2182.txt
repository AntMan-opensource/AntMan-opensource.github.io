commit 77681e0d184b0ccafa2a27da3b3bdbba95b4fe8f
Author: Jeff Thompson <jeffret.g@gmail.com>
Date:   Wed Apr 29 13:09:08 2020 +0200

    [SECURITY-1835]

diff --git a/src/main/java/org/jenkinsci/plugins/credentialsbinding/masking/DollarSecretPatternFactory.java b/src/main/java/org/jenkinsci/plugins/credentialsbinding/masking/DollarSecretPatternFactory.java
new file mode 100644
index 0000000..988bc3a
--- /dev/null
+++ b/src/main/java/org/jenkinsci/plugins/credentialsbinding/masking/DollarSecretPatternFactory.java
@@ -0,0 +1,45 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2020 CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package org.jenkinsci.plugins.credentialsbinding.masking;
+
+import hudson.Extension;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
+
+import javax.annotation.Nonnull;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.regex.Pattern;
+
+@Extension
+@Restricted(NoExternalUse.class)
+public class DollarSecretPatternFactory implements SecretPatternFactory {
+    @Override
+    public @Nonnull Collection<String> getEncodedForms(@Nonnull String input) {
+        return input.contains("$")
+                ? Collections.singleton(input.replace("$", "$$"))
+                : Collections.emptySet();
+    }
+}
diff --git a/src/test/java/org/jenkinsci/plugins/credentialsbinding/masking/DollarSecretPatternFactoryTest.java b/src/test/java/org/jenkinsci/plugins/credentialsbinding/masking/DollarSecretPatternFactoryTest.java
new file mode 100644
index 0000000..2657ebf
--- /dev/null
+++ b/src/test/java/org/jenkinsci/plugins/credentialsbinding/masking/DollarSecretPatternFactoryTest.java
@@ -0,0 +1,67 @@
+package org.jenkinsci.plugins.credentialsbinding.masking;
+
+import com.cloudbees.plugins.credentials.CredentialsProvider;
+import com.cloudbees.plugins.credentials.CredentialsScope;
+import com.cloudbees.plugins.credentials.domains.Domain;
+import hudson.Functions;
+import hudson.model.FreeStyleBuild;
+import hudson.model.FreeStyleProject;
+import hudson.model.Item;
+import hudson.model.queue.QueueTaskFuture;
+import hudson.tasks.BatchFile;
+import hudson.tasks.Maven;
+import hudson.tasks.Shell;
+import hudson.util.Secret;
+import org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper;
+import org.jenkinsci.plugins.credentialsbinding.impl.StringBinding;
+import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import java.util.Arrays;
+
+public class DollarSecretPatternFactoryTest {
+
+    @Rule
+    public JenkinsRule r = new JenkinsRule();
+
+    @Issue("JENKINS-24805")
+    @Test
+    public void maskingFreeStyleSecrets() throws Exception {
+        String firstCredentialsId = "creds_1";
+        String firstPassword = "a$build";
+        StringCredentialsImpl firstCreds = new StringCredentialsImpl(CredentialsScope.GLOBAL, firstCredentialsId, "sample1", Secret.fromString(firstPassword));
+
+        CredentialsProvider.lookupStores(r.jenkins).iterator().next().addCredentials(Domain.global(), firstCreds);
+
+        String secondCredentialsId = "creds_2";
+        String secondPassword = "a$$b";
+        StringCredentialsImpl secondCreds = new StringCredentialsImpl(CredentialsScope.GLOBAL, secondCredentialsId, "sample2", Secret.fromString(secondPassword));
+
+        CredentialsProvider.lookupStores(r.jenkins).iterator().next().addCredentials(Domain.global(), secondCreds);
+
+        SecretBuildWrapper wrapper = new SecretBuildWrapper(Arrays.asList(new StringBinding("PASS_1", firstCredentialsId),
+                new StringBinding("PASS_2", secondCredentialsId)));
+
+        FreeStyleProject project = r.createFreeStyleProject();
+
+        project.setConcurrentBuild(true);
+        project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo %PASS_1%") : new Shell("echo \"$PASS_1\""));
+        project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo %PASS_2%") : new Shell("echo \"$PASS_2\""));
+        project.getBuildersList().add(new Maven("$PASS_1 $PASS_2", "default"));
+        project.getBuildWrappersList().add(wrapper);
+
+        r.configRoundtrip((Item)project);
+
+        QueueTaskFuture<FreeStyleBuild> future = project.scheduleBuild2(0);
+        FreeStyleBuild build = future.get();
+        r.assertLogNotContains(firstPassword, build);
+        r.assertLogNotContains(firstPassword.replace("$", "$$"), build);
+        r.assertLogNotContains(secondPassword, build);
+        r.assertLogNotContains(secondPassword.replace("$", "$$"), build);
+        r.assertLogContains("****", build);
+    }
+
+}
