commit 4bf54aff74555214b4fcd3e81a31e07b900f472a
Author: flange-ipb <34936695+flange-ipb@users.noreply.github.com>
Date:   Mon Mar 22 15:06:31 2021 +0100

    also render viewers' molfiles via hidden input fields

diff --git a/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MarvinJSRenderer.java b/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MarvinJSRenderer.java
index 5278f43..080e345 100644
--- a/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MarvinJSRenderer.java
+++ b/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MarvinJSRenderer.java
@@ -85,10 +85,12 @@ public class MarvinJSRenderer extends Renderer {
 	}
 
 	private void encodeViewer(FacesContext context, ResponseWriter writer, MolPluginCore plugin) throws IOException {
-		String divId = plugin.getClientId() + "_MarvinJSViewer";
+		String clientId = plugin.getClientId();
+		String hiddenInputId = clientId + "_Input";
+		String divId = clientId + "_MarvinJSViewer";
 
-		encodeViewerHTML(writer, plugin, divId);
-		encodeViewerJS(context, writer, plugin, divId);
+		encodeViewerHTML(writer, plugin, divId, hiddenInputId);
+		encodeViewerJS(context, writer, plugin, divId, hiddenInputId);
 	}
 
 	/**
@@ -97,14 +99,23 @@ public class MarvinJSRenderer extends Renderer {
 	 * 
 	 * @param writer
 	 * @param plugin
-	 * @param divId  DOM id of the embedded &lt;div&gt; element
+	 * @param divId         DOM id of the embedded &lt;div&gt; element
+	 * @param hiddenInputId DOM id of the embedded hidden &lt;input&gt; element
 	 */
-	private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId) throws IOException {
+	private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId, String hiddenInputId)
+			throws IOException {
 		// inner <div> is used for the plugin's rendering (aka the Javascript target)
 		writer.startElement("div", plugin);
 		writer.writeAttribute("id", divId, null);
 		writer.writeAttribute("style", generateDivStyle(plugin), null);
 		writer.endElement("div");
+
+		// hidden <input> without "name" attribute (prevents submission)
+		writer.startElement("input", plugin);
+		writer.writeAttribute("type", "hidden", null);
+		writer.writeAttribute("id", hiddenInputId, null);
+		writer.writeAttribute("value", plugin.getValue(), "value");
+		writer.endElement("input");
 	}
 
 	/**
@@ -113,10 +124,11 @@ public class MarvinJSRenderer extends Renderer {
 	 * @param context
 	 * @param writer
 	 * @param plugin
-	 * @param divId   DOM id of the &lt;div&gt; element
+	 * @param divId         DOM id of the &lt;div&gt; element
+	 * @param hiddenInputId DOM id of the embedded hidden &lt;input&gt; element
 	 */
-	private void encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId)
-			throws IOException {
+	private void encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId,
+			String hiddenInputId) throws IOException {
 		String escapedMolecule = escape((String) plugin.getValue());
 
 		writer.startElement("script", plugin);
@@ -145,8 +157,10 @@ public class MarvinJSRenderer extends Renderer {
 		 * embedded in a Promise.
 		 */
 		fmt.format("%s.status().then(() => {", loaderJSVar);
-		fmt.format("return molecularfaces.MarvinJSViewer.newViewer(\"%s\", \"%s\", \"%s\", %d, %d);", divId, escapedMolecule,
-				installPath, plugin.getHeight(), plugin.getWidth());
+		fmt.format(
+				"return molecularfaces.MarvinJSViewer.newViewer(\"%s\", "
+						+ "document.getElementById(\"%s\").getAttribute(\"value\"), \"%s\", %d, %d);",
+				divId, hiddenInputId, installPath, plugin.getHeight(), plugin.getWidth());
 
 		fmt.close();
 
diff --git a/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MolPaintJSRenderer.java b/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MolPaintJSRenderer.java
index 2909d10..1aa15de 100644
--- a/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MolPaintJSRenderer.java
+++ b/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/MolPaintJSRenderer.java
@@ -85,10 +85,12 @@ public class MolPaintJSRenderer extends Renderer {
 	}
 
 	private void encodeViewer(FacesContext context, ResponseWriter writer, MolPluginCore plugin) throws IOException {
-		String divId = plugin.getClientId() + "_MolPaintJSViewer";
+		String clientId = plugin.getClientId();
+		String hiddenInputId = clientId + "_Input";
+		String divId = clientId + "_MolPaintJSViewer";
 
-		encodeViewerHTML(writer, plugin, divId);
-		encodeViewerJS(context, writer, plugin, divId);
+		encodeViewerHTML(writer, plugin, divId, hiddenInputId);
+		encodeViewerJS(context, writer, plugin, divId, hiddenInputId);
 	}
 
 	/**
@@ -97,14 +99,23 @@ public class MolPaintJSRenderer extends Renderer {
 	 * 
 	 * @param writer
 	 * @param plugin
-	 * @param divId  DOM id of the embedded &lt;div&gt; element
+	 * @param divId         DOM id of the embedded &lt;div&gt; element
+	 * @param hiddenInputId DOM id of the embedded hidden &lt;input&gt; element
 	 */
-	private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId) throws IOException {
+	private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId, String hiddenInputId)
+			throws IOException {
 		// inner <div> is used for the plugin's rendering (aka the Javascript target)
 		writer.startElement("div", plugin);
 		writer.writeAttribute("id", divId, null);
 		writer.writeAttribute("style", generateDivStyle(plugin), null);
 		writer.endElement("div");
+
+		// hidden <input> without "name" attribute (prevents submission)
+		writer.startElement("input", plugin);
+		writer.writeAttribute("type", "hidden", null);
+		writer.writeAttribute("id", hiddenInputId, null);
+		writer.writeAttribute("value", plugin.getValue(), "value");
+		writer.endElement("input");
 	}
 
 	/**
@@ -113,10 +124,11 @@ public class MolPaintJSRenderer extends Renderer {
 	 * @param context
 	 * @param writer
 	 * @param plugin
-	 * @param divId   DOM id of the &lt;div&gt; element
+	 * @param divId         DOM id of the &lt;div&gt; element
+	 * @param hiddenInputId DOM id of the embedded hidden &lt;input&gt; element
 	 */
-	private void encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId)
-			throws IOException {
+	private void encodeViewerJS(FacesContext context, ResponseWriter writer, MolPluginCore plugin, String divId,
+			String hiddenInputId) throws IOException {
 		String escapedMolecule = escape((String) plugin.getValue());
 
 		writer.startElement("script", plugin);
@@ -140,8 +152,10 @@ public class MolPaintJSRenderer extends Renderer {
 		 * embedded in a Promise.
 		 */
 		fmt.format("%s.status().then(() => {", loaderJSVar);
-		fmt.format("return molecularfaces.MolPaintJSViewer.newViewer(\"%s\", \"%s\", %d, %d);", divId, escapedMolecule,
-				plugin.getHeight(), plugin.getWidth());
+		fmt.format(
+				"return molecularfaces.MolPaintJSViewer.newViewer(\"%s\", "
+						+ "document.getElementById(\"%s\").getAttribute(\"value\"), %d, %d);",
+				divId, hiddenInputId, plugin.getHeight(), plugin.getWidth());
 
 		fmt.close();
 
@@ -232,7 +246,7 @@ public class MolPaintJSRenderer extends Renderer {
 		 */
 		fmt.format(
 				".then((editor) => editor.addChangeListener("
-				+ "(mol) => { document.getElementById(\"%s\").setAttribute(\"value\", mol); }));",
+						+ "(mol) => { document.getElementById(\"%s\").setAttribute(\"value\", mol); }));",
 				hiddenInputId);
 
 		fmt.close();
diff --git a/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/OpenChemLibJSRenderer.java b/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/OpenChemLibJSRenderer.java
index 007a43b..cd017b6 100644
--- a/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/OpenChemLibJSRenderer.java
+++ b/src/main/java/de/ipb_halle/molecularfaces/component/molplugin/OpenChemLibJSRenderer.java
@@ -85,10 +85,12 @@ public class OpenChemLibJSRenderer extends Renderer {
 	}
 
 	private void encodeViewer(ResponseWriter writer, MolPluginCore plugin) throws IOException {
-		String divId = plugin.getClientId() + "_OpenChemLibJSViewer";
+		String clientId = plugin.getClientId();
+		String hiddenInputId = clientId + "_Input";
+		String divId = clientId + "_OpenChemLibJSViewer";
 
-		encodeViewerHTML(writer, plugin, divId);
-		encodeViewerJS(writer, plugin, divId);
+		encodeViewerHTML(writer, plugin, divId, hiddenInputId);
+		encodeViewerJS(writer, plugin, divId, hiddenInputId);
 	}
 
 	/**
@@ -97,14 +99,23 @@ public class OpenChemLibJSRenderer extends Renderer {
 	 * 
 	 * @param writer
 	 * @param plugin
-	 * @param divId  DOM id of the embedded &lt;div&gt; element
+	 * @param divId         DOM id of the embedded &lt;div&gt; element
+	 * @param hiddenInputId DOM id of the embedded hidden &lt;input&gt; element
 	 */
-	private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId) throws IOException {
+	private void encodeViewerHTML(ResponseWriter writer, MolPluginCore plugin, String divId, String hiddenInputId)
+			throws IOException {
 		// inner <div> is used for the plugin's rendering (aka the Javascript target)
 		writer.startElement("div", plugin);
 		writer.writeAttribute("id", divId, null);
 		writer.writeAttribute("style", generateDivStyle(plugin), null);
 		writer.endElement("div");
+
+		// hidden <input> without "name" attribute (prevents submission)
+		writer.startElement("input", plugin);
+		writer.writeAttribute("type", "hidden", null);
+		writer.writeAttribute("id", hiddenInputId, null);
+		writer.writeAttribute("value", plugin.getValue(), "value");
+		writer.endElement("input");
 	}
 
 	/**
@@ -112,9 +123,11 @@ public class OpenChemLibJSRenderer extends Renderer {
 	 * 
 	 * @param writer
 	 * @param plugin
-	 * @param divId  DOM id of the &lt;div&gt; element
+	 * @param divId         DOM id of the &lt;div&gt; element
+	 * @param hiddenInputId DOM id of the embedded hidden &lt;input&gt; element
 	 */
-	private void encodeViewerJS(ResponseWriter writer, MolPluginCore plugin, String divId) throws IOException {
+	private void encodeViewerJS(ResponseWriter writer, MolPluginCore plugin, String divId, String hiddenInputId)
+			throws IOException {
 		String escapedMolecule = escape((String) plugin.getValue());
 
 		writer.startElement("script", plugin);
@@ -138,8 +151,10 @@ public class OpenChemLibJSRenderer extends Renderer {
 		 * embedded in a Promise.
 		 */
 		fmt.format("%s.status().then(() => {", loaderJSVar);
-		fmt.format("return molecularfaces.OpenChemLibJSViewer.newViewer(\"%s\", \"%s\", %d, %d);", divId,
-				escapedMolecule, plugin.getHeight(), plugin.getWidth());
+		fmt.format(
+				"return molecularfaces.OpenChemLibJSViewer.newViewer(\"%s\", "
+						+ "document.getElementById(\"%s\").getAttribute(\"value\"), %d, %d);",
+				divId, hiddenInputId, plugin.getHeight(), plugin.getWidth());
 
 		fmt.close();
 
diff --git a/src/test/java/de/ipb_halle/molecularfaces/validator/MolFileValidatorTest.java b/src/test/java/de/ipb_halle/molecularfaces/validator/MolFileValidatorTest.java
index 8ac443f..ea91ffb 100644
--- a/src/test/java/de/ipb_halle/molecularfaces/validator/MolFileValidatorTest.java
+++ b/src/test/java/de/ipb_halle/molecularfaces/validator/MolFileValidatorTest.java
@@ -92,8 +92,8 @@ public class MolFileValidatorTest {
 		// invalid for both relaxed and strict
 		assertEquals(1, relaxedConstraintViolations.size());
 		assertEquals(1, strictConstraintViolations.size());
-		assertEquals("invalid MolFile", relaxedConstraintViolations.iterator().next().getMessage());
-		assertEquals("invalid MolFile", strictConstraintViolations.iterator().next().getMessage());
+		assertEquals("invalid MDL Molfile V2000", relaxedConstraintViolations.iterator().next().getMessage());
+		assertEquals("invalid MDL Molfile V2000", strictConstraintViolations.iterator().next().getMessage());
 	}
 
 	@Test
