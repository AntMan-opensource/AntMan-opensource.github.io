commit 0741865e206fdb2fe4cdbad7f9956de3121c7b26
Author: Bruno Dillenseger <bruno.dillenseger@orange.com>
Date:   Thu Sep 1 14:19:29 2022 +0200

    Fix security 2413 (#18)
    
    * [CI] Upgraded Java version from 8 to 11 for build
    
    * Trivial updates of project description/metadata
    
    * Added path sanitizing to zip extration and basedir calculus
    
    * Discarded zip directory entry name chopping
    
    * Added tests for 2 fixed Zip methods
    
    * Fixed maliciousPathIsSanitizedOnExtract for Windows wrt POSIX permissions
    
    * Fix for Zip.basedir on Windows environment

diff --git a/src/main/java/org/ow2/clif/jenkins/jobs/Zip.java b/src/main/java/org/ow2/clif/jenkins/jobs/Zip.java
index a5d34c1..362844a 100644
--- a/src/main/java/org/ow2/clif/jenkins/jobs/Zip.java
+++ b/src/main/java/org/ow2/clif/jenkins/jobs/Zip.java
@@ -35,7 +35,6 @@ import org.apache.commons.io.FileUtils;
 import org.ow2.clif.jenkins.Messages;
 import com.google.common.collect.Lists;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import static org.apache.commons.lang.StringUtils.chop;
 
 public class Zip {
 	private static final Logger logger = Logger.getLogger(Zip.class.getName());
@@ -136,12 +135,11 @@ public class Zip {
 		ZipEntry entry = zip.getNextEntry();
 		if (entry != null)
 		{
-			String name = entry.getName();
-
+			String name = sanitize(new File(entry.getName()).toPath()).toFile().getPath();
 			if (entry.isDirectory()) {
-				return chop(name);
+				return name;
 			}
-			int i = name.indexOf('/');
+			int i = name.indexOf(File.separator);
 			if (i != -1) {
 				return name.substring(0, i);
 			}
@@ -172,7 +170,7 @@ public class Zip {
 		ZipInputStream zip = newStream();
 		try {
 			for (zipentry = zip.getNextEntry(); zipentry != null; zipentry = zip.getNextEntry()) {
-				String entryName = zipentry.getName();
+				String entryName = sanitize(new File(zipentry.getName()).toPath()).toFile().getPath();
 
 				File dest = new File(dir, entryName);
 				if (zipentry.isDirectory())
diff --git a/src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java b/src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java
index d706c9f..e30c4e0 100644
--- a/src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java
+++ b/src/test/java/org/ow2/clif/jenkins/jobs/ZipTest.java
@@ -1,6 +1,7 @@
 /*
  * CLIF is a Load Injection Framework
  * Copyright (C) 2012 France Telecom R&D
+ * Copyright (C) 2022 Orange SA
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -21,18 +22,27 @@
 package org.ow2.clif.jenkins.jobs;
 
 import java.io.File;
-import java.util.List;
-
+import java.nio.file.Files;
+import java.nio.file.attribute.PosixFilePermissions;
 import org.apache.tools.ant.types.ZipScanner;
 import org.junit.Test;
-
-import jline.internal.TestAccessible;
-
 import static org.fest.assertions.Assertions.assertThat;
 
 public class ZipTest {
 	private Zip zip;
 
+	static private void deleteFileOnExit(File fileOrDir)
+	{
+		if (fileOrDir.isDirectory())
+		{
+			for (File f : fileOrDir.listFiles())
+			{
+				deleteFileOnExit(f);
+			}
+		}
+		fileOrDir.deleteOnExit();
+	}
+
 	@Test
 	public void namesAreZipEntriesFileName() throws Exception {
 		zip = new Zip("src/test/resources/zips/sources.zip");
@@ -120,4 +130,24 @@ public class ZipTest {
 					"UnexpectedFile.txt")
 					.toString());
 	}
+
+	@Test
+	public void maliciousPathIsSanitizedOnExtract() throws Exception
+	{
+		zip = new Zip("src/test/resources/zips/ProofOfConceptSEC2413.zip");
+		File tmpDir = Files.createTempDirectory(
+			"CLIF-test-maliciousPathIsSanitizedOnExtract")
+			.toFile();
+		zip.extractTo(tmpDir);
+		deleteFileOnExit(tmpDir);
+		assertThat(tmpDir.list()).containsOnly("UnexpectedDir");
+		assertThat(new File(tmpDir, "UnexpectedDir").list()).containsOnly("UnexpectedFile.txt");
+	}
+
+	@Test
+	public void maliciousPathIsSanitizedOnBasedir() throws Exception
+	{
+		zip = new Zip("src/test/resources/zips/ProofOfConceptSEC2413.zip");
+		assertThat(zip.basedir()).isEqualTo("UnexpectedDir");
+	}
 }
