commit b3b2bd869b91f9f1312bbbbf6128cad2cd86bd8c
Author: justusbunsi <61625851+justusbunsi@users.noreply.github.com>
Date:   Tue Dec 6 20:04:33 2022 +0100

    [SECURITY-2661]

diff --git a/src/main/java/org/jenkinsci/plugin/gitea/GiteaSCMBuilder.java b/src/main/java/org/jenkinsci/plugin/gitea/GiteaSCMBuilder.java
index 412ccb3..20e0f00 100644
--- a/src/main/java/org/jenkinsci/plugin/gitea/GiteaSCMBuilder.java
+++ b/src/main/java/org/jenkinsci/plugin/gitea/GiteaSCMBuilder.java
@@ -37,7 +37,6 @@ import hudson.model.Queue;
 import hudson.plugins.git.GitSCM;
 import hudson.security.ACL;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.ThreadLocalRandom;
@@ -49,7 +48,6 @@ import jenkins.scm.api.SCMSourceOwner;
 import jenkins.scm.api.mixin.ChangeRequestCheckoutStrategy;
 import org.eclipse.jgit.lib.Constants;
 import org.eclipse.jgit.transport.RefSpec;
-import org.jenkinsci.plugin.gitea.credentials.PersonalAccessToken;
 
 /**
  * Builds a {@link GitSCM} for {@link GiteaSCMSource}.
@@ -177,27 +175,6 @@ public class GiteaSCMBuilder extends GitSCMBuilder<GiteaSCMBuilder> {
                         .literal(".git")
                         .build();
             }
-            if (credentials instanceof PersonalAccessToken) {
-                try {
-                    // TODO is there a way we can get git plugin to redact the secret?
-                    URI tokenUri = new URI(
-                            serverUri.getScheme(),
-                            ((PersonalAccessToken) credentials).getToken().getPlainText(),
-                            serverUri.getHost(),
-                            serverUri.getPort(),
-                            serverUri.getPath(),
-                            serverUri.getQuery(),
-                            serverUri.getFragment()
-                    );
-                    return UriTemplate.buildFromTemplate(tokenUri.toASCIIString())
-                            .path(UriTemplateBuilder.var("owner"))
-                            .path(UriTemplateBuilder.var("repository"))
-                            .literal(".git")
-                            .build();
-                } catch (URISyntaxException e) {
-                    // ok we are at the end of the road
-                }
-            }
         }
         return UriTemplate.buildFromTemplate(serverUrl)
                 .path(UriTemplateBuilder.var("owner"))
diff --git a/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessToken.java b/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessToken.java
index c4fda2f..91b479d 100644
--- a/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessToken.java
+++ b/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessToken.java
@@ -23,14 +23,14 @@
  */
 package org.jenkinsci.plugin.gitea.credentials;
 
-import com.cloudbees.plugins.credentials.common.StandardCredentials;
+import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.util.Secret;
 
 /**
  * A Gitea personal access token.
  */
-public interface PersonalAccessToken extends StandardCredentials {
+public interface PersonalAccessToken extends StandardUsernamePasswordCredentials {
     /**
      * Gets the token.
      * @return the token.
diff --git a/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessTokenImpl.java b/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessTokenImpl.java
index b3ed547..a6b730f 100644
--- a/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessTokenImpl.java
+++ b/src/main/java/org/jenkinsci/plugin/gitea/credentials/PersonalAccessTokenImpl.java
@@ -26,6 +26,7 @@ package org.jenkinsci.plugin.gitea.credentials;
 import com.cloudbees.plugins.credentials.CredentialsDescriptor;
 import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.CredentialsScope;
+import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials;
 import com.cloudbees.plugins.credentials.impl.BaseStandardCredentials;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
@@ -44,7 +45,7 @@ import org.kohsuke.stapler.QueryParameter;
  * Default implementation of {@link PersonalAccessToken} for use by {@link Jenkins} {@link CredentialsProvider}
  * instances that store {@link Secret} locally.
  */
-public class PersonalAccessTokenImpl extends BaseStandardCredentials implements PersonalAccessToken {
+public class PersonalAccessTokenImpl extends BaseStandardCredentials implements StandardUsernameCredentials, PersonalAccessToken {
     /**
      * Our token.
      */
@@ -75,6 +76,24 @@ public class PersonalAccessTokenImpl extends BaseStandardCredentials implements
         return token;
     }
 
+
+    @Override
+    public boolean isUsernameSecret() {
+        return true;
+    }
+
+    @NonNull
+    @Override
+    public String getUsername() {
+        return getToken().getPlainText();
+    }
+
+    @NonNull
+    @Override
+    public Secret getPassword() {
+        return getToken();
+    }
+
     /**
      * Our descriptor.
      */
