commit bfbccb6ad213c1c2dea4ce6e9210f057e5ac1229
Author: Simon Steiner <ssteiner@apache.org>
Date:   Tue Aug 16 14:17:59 2022 +0000

    BATIK-1331: Jar url should be blocked by DefaultExternalResourceSecurity
    
    git-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/batik/trunk@1903462 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/batik-bridge/src/main/java/org/apache/batik/bridge/DefaultExternalResourceSecurity.java b/batik-bridge/src/main/java/org/apache/batik/bridge/DefaultExternalResourceSecurity.java
index a9e5d8828..8279a9a98 100644
--- a/batik-bridge/src/main/java/org/apache/batik/bridge/DefaultExternalResourceSecurity.java
+++ b/batik-bridge/src/main/java/org/apache/batik/bridge/DefaultExternalResourceSecurity.java
@@ -20,6 +20,9 @@ package org.apache.batik.bridge;
 
 import org.apache.batik.util.ParsedURL;
 
+import java.net.URI;
+import java.net.URISyntaxException;
+
 /**
  * Default implementation for the <code>ExternalResourceSecurity</code> interface.
  * It allows all types of external resources to be loaded, but only if they
@@ -81,6 +84,13 @@ public class DefaultExternalResourceSecurity implements ExternalResourceSecurity
         } else {
             String docHost    = docURL.getHost();
             String externalResourceHost = externalResourceURL.getHost();
+            if (externalResourceHost == null && !DATA_PROTOCOL.equals(externalResourceURL.getProtocol())) {
+                try {
+                    externalResourceHost = new URI(externalResourceURL.getPath()).getHost();
+                } catch (URISyntaxException e) {
+                    throw new RuntimeException(e);
+                }
+            }
             
             if ((docHost != externalResourceHost) &&
                 ((docHost == null) || (!docHost.equals(externalResourceHost)))){
diff --git a/batik-test-old/src/test/java/org/apache/batik/bridge/DefaultExternalResourceSecurityTestCase.java b/batik-test-old/src/test/java/org/apache/batik/bridge/DefaultExternalResourceSecurityTestCase.java
new file mode 100644
index 000000000..99ab5a9a1
--- /dev/null
+++ b/batik-test-old/src/test/java/org/apache/batik/bridge/DefaultExternalResourceSecurityTestCase.java
@@ -0,0 +1,40 @@
+/*
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+package org.apache.batik.bridge;
+
+import org.apache.batik.util.ParsedURL;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class DefaultExternalResourceSecurityTestCase {
+    @Test
+    public void testJarURL() {
+        ParsedURL ext = new ParsedURL("jar:http://evil.com/poc!/");
+        ParsedURL doc = new ParsedURL(".");
+        String err = "";
+        try {
+            new DefaultExternalResourceSecurity(ext, doc).checkLoadExternalResource();
+        } catch (SecurityException e) {
+            err = e.getMessage();
+        }
+        Assert.assertEquals(err, "The document references a external resource (jar:http://evil.com/poc!/) which " +
+                "comes from different location than the document itself. This is not allowed for security reasons and " +
+                "that resource will not be loaded.");
+    }
+}
