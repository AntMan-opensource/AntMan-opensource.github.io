commit ca97eb1f707ef7fed2ebabd127f87fee538b9b22
Author: Dominik Riemer <dominik.riemer@gmail.com>
Date:   Fri May 5 17:27:09 2023 +0200

    Fetch principalId instead of username when changing user password (#655) (#1553)
    
    * Fetch principalId instead of username when changing user password (#655)
    
    * Use correct userId when updating user details (#655)
    
    * Add user check to token (#655)
    
    * Fetch correct ids in user management (#655)

diff --git a/streampipes-rest/src/main/java/org/apache/streampipes/rest/impl/UserResource.java b/streampipes-rest/src/main/java/org/apache/streampipes/rest/impl/UserResource.java
index 6abed4191..a2658a9c2 100644
--- a/streampipes-rest/src/main/java/org/apache/streampipes/rest/impl/UserResource.java
+++ b/streampipes-rest/src/main/java/org/apache/streampipes/rest/impl/UserResource.java
@@ -127,9 +127,9 @@ public class UserResource extends AbstractAuthGuardedRestResource {
   @PUT
   @Produces(MediaType.APPLICATION_JSON)
   public Response updateAppearanceMode(@PathParam("darkMode") boolean darkMode) {
-    String authenticatedUserId = getAuthenticatedUsername();
-    if (authenticatedUserId != null) {
-      UserAccount user = getUser(authenticatedUserId);
+    String authenticatedUsername = getAuthenticatedUsername();
+    if (authenticatedUsername != null) {
+      UserAccount user = getUser(authenticatedUsername);
       user.setDarkMode(darkMode);
       getUserStorage().updateUser(user);
 
@@ -187,10 +187,15 @@ public class UserResource extends AbstractAuthGuardedRestResource {
   @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
   @JacksonSerialized
-  public Response createNewApiToken(@PathParam("userId") String userId,
+  public Response createNewApiToken(@PathParam("userId") String username,
                                     RawUserApiToken rawToken) {
-    RawUserApiToken generatedToken = new TokenService().createAndStoreNewToken(userId, rawToken);
-    return ok(generatedToken);
+    String authenticatedUserName = getAuthenticatedUsername();
+    if (authenticatedUserName.equals(username)) {
+      RawUserApiToken generatedToken = new TokenService().createAndStoreNewToken(username, rawToken);
+      return ok(generatedToken);
+    } else {
+      return statusMessage(Notifications.error("User not found"));
+    }
   }
 
   @PUT
@@ -199,7 +204,7 @@ public class UserResource extends AbstractAuthGuardedRestResource {
   @Produces(MediaType.APPLICATION_JSON)
   public Response updateUserAccountDetails(@PathParam("principalId") String principalId,
                                            UserAccount user) {
-    String authenticatedUserId = getAuthenticatedUsername();
+    String authenticatedUserId = getAuthenticatedUserSid();
     if (user != null && (authenticatedUserId.equals(principalId) || isAdmin())) {
       UserAccount existingUser = (UserAccount) getPrincipalById(principalId);
       updateUser(existingUser, user, isAdmin(), existingUser.getPassword());
@@ -217,7 +222,7 @@ public class UserResource extends AbstractAuthGuardedRestResource {
   @Produces(MediaType.APPLICATION_JSON)
   public Response updateUsername(@PathParam("principalId") String principalId,
                                  UserAccount user) {
-    String authenticatedUserId = getAuthenticatedUsername();
+    String authenticatedUserId = getAuthenticatedUserSid();
     if (user != null && (authenticatedUserId.equals(principalId) || isAdmin())) {
       UserAccount existingUser = (UserAccount) getPrincipalById(principalId);
       try {
@@ -251,7 +256,7 @@ public class UserResource extends AbstractAuthGuardedRestResource {
   @Produces(MediaType.APPLICATION_JSON)
   public Response updatePassword(@PathParam("principalId") String principalId,
                                  ChangePasswordRequest passwordRequest) {
-    String authenticatedUserId = getAuthenticatedUsername();
+    String authenticatedUserId = getAuthenticatedUserSid();
     UserAccount existingUser = (UserAccount) getPrincipalById(principalId);
     if (principalId.equals(authenticatedUserId) || isAdmin()) {
       try {
@@ -279,7 +284,7 @@ public class UserResource extends AbstractAuthGuardedRestResource {
   @Produces(MediaType.APPLICATION_JSON)
   public Response updateServiceAccountDetails(@PathParam("principalId") String principalId,
                                               ServiceAccount user) {
-    String authenticatedUserId = getAuthenticatedUsername();
+    String authenticatedUserId = getAuthenticatedUserSid();
     if (user != null && (authenticatedUserId.equals(principalId) || isAdmin())) {
       Principal existingUser = getPrincipalById(principalId);
       user.setRev(existingUser.getRev());
